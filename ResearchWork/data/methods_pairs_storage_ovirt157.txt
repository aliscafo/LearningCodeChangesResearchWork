190
#method_before
public ValidationResult diskImagesAlreadyExist() {
    List<String> existingDisksAliases = new ArrayList<String>();
    for (DiskImage diskImage : diskImages) {
        DiskImage existingDisk = getExistingDisk(diskImage.getId());
        if (existingDisk != null) {
            existingDisksAliases.add(diskImage.getDiskAlias() == null ? existingDisk.getDiskAlias() : diskImage.getDiskAlias());
        }
    }
    if (!existingDisksAliases.isEmpty()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST, String.format("$diskAliases %s", StringUtils.join(existingDisksAliases, ", ")));
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult diskImagesAlreadyExist() {
    List<String> existingDisksAliases = new ArrayList<String>();
    for (DiskImage diskImage : diskImages) {
        DiskImage existingDisk = getExistingDisk(diskImage.getId());
        if (existingDisk != null) {
            existingDisksAliases.add(diskImage.getDiskAlias().isEmpty() ? existingDisk.getDiskAlias() : diskImage.getDiskAlias());
        }
    }
    if (!existingDisksAliases.isEmpty()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_DISKS_ALREADY_EXIST, String.format("$diskAliases %s", StringUtils.join(existingDisksAliases, ", ")));
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
@BeforeClass
static public void beforeClass() {
    NotificationProperties.release();
    NotificationProperties.setDefaults(ClassLoader.getSystemResource("conf/notifier-prop-test.conf").getPath(), "");
    prop = NotificationProperties.getInstance();
    assertNotNull(prop);
}
#method_after
@BeforeClass
static public void beforeClass() throws UnsupportedEncodingException {
    NotificationProperties.release();
    NotificationProperties.setDefaults(URLDecoder.decode(ClassLoader.getSystemResource("conf/notifier-prop-test.conf").getPath(), "UTF-8"), "");
    prop = NotificationProperties.getInstance();
    assertNotNull(prop);
}
#end_block

#method_before
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Semaphore(1));
    try {
        log.debugFormat("scheduling started, correlation Id: {0}", correlationId);
        checkAllowOverbooking(cluster);
        clusterLockMap.get(cluster.getId()).acquire();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker, true, correlationId);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    return destHostId;
                }
            }
        }
        if (policy.getFunctions() == null || policy.getFunctions().isEmpty()) {
            return vdsList.get(0).getId();
        }
        Guid bestHost = null;
        if (shouldWeighClusterHosts(cluster, vdsList)) {
            bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        }
        if (bestHost == null && vdsList.size() > 0) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0);
        }
        return bestHost;
    } catch (InterruptedException e) {
        log.error("interrupted", e);
        return null;
    } finally {
        // ensuring setting the semaphore permits to 1
        synchronized (clusterLockMap.get(cluster.getId())) {
            clusterLockMap.get(cluster.getId()).drainPermits();
            clusterLockMap.get(cluster.getId()).release();
        }
        log.debugFormat("Scheduling ended, correlation Id: {0}", correlationId);
    }
}
#method_after
public Guid schedule(VDSGroup cluster, VM vm, List<Guid> hostBlackList, List<Guid> hostWhiteList, Guid destHostId, List<String> messages, VdsFreeMemoryChecker memoryChecker, String correlationId) {
    clusterLockMap.putIfAbsent(cluster.getId(), new Semaphore(1));
    try {
        log.debugFormat("scheduling started, correlation Id: {0}", correlationId);
        checkAllowOverbooking(cluster);
        clusterLockMap.get(cluster.getId()).acquire();
        List<VDS> vdsList = getVdsDAO().getAllForVdsGroupWithStatus(cluster.getId(), VDSStatus.Up);
        updateInitialHostList(vdsList, hostBlackList, true);
        updateInitialHostList(vdsList, hostWhiteList, false);
        ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());
        Map<String, String> parameters = createClusterPolicyParameters(cluster);
        vdsList = runFilters(policy.getFilters(), vdsList, vm, parameters, policy.getFilterPositionMap(), messages, memoryChecker, true, correlationId);
        if (vdsList == null || vdsList.size() == 0) {
            return null;
        }
        Guid bestHost = null;
        // it passed filters return it
        if (destHostId != null) {
            for (VDS vds : vdsList) {
                if (destHostId.equals(vds.getId())) {
                    bestHost = destHostId;
                    break;
                }
            }
        }
        if (bestHost == null && (policy.getFunctions() == null || policy.getFunctions().isEmpty())) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost == null && shouldWeighClusterHosts(cluster, vdsList)) {
            bestHost = runFunctions(policy.getFunctions(), vdsList, vm, parameters);
        }
        if (bestHost == null && vdsList.size() > 0) {
            bestHost = vdsList.get(0).getId();
        }
        if (bestHost != null) {
            getVdsDynamicDao().updatePartialVdsDynamicCalc(bestHost, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0);
        }
        return bestHost;
    } catch (InterruptedException e) {
        log.error("interrupted", e);
        return null;
    } finally {
        // ensuring setting the semaphore permits to 1
        synchronized (clusterLockMap.get(cluster.getId())) {
            clusterLockMap.get(cluster.getId()).drainPermits();
            clusterLockMap.get(cluster.getId()).release();
        }
        log.debugFormat("Scheduling ended, correlation Id: {0}", correlationId);
    }
}
#end_block

#method_before
@OnTimerMethodAnnotation("performHaResevationCheck")
public void performHaResevationCheck() {
    log.debug("HA Reservation check timer entered.");
    List<VDSGroup> clusters = DbFacade.getInstance().getVdsGroupDao().getAll();
    if (clusters != null) {
        HaReservationHandling haReservationHandling = new HaReservationHandling();
        for (VDSGroup cluster : clusters) {
            if (cluster.supportsHaReservation()) {
                List<VDS> returnedFailedHosts = new ArrayList<VDS>();
                boolean status = haReservationHandling.checkHaReservationStatusForCluster(cluster, returnedFailedHosts);
                if (!status) {
                    // create Alert using returnedFailedHosts
                    AuditLogableBase logable = new AuditLogableBase();
                    logable.setVdsGroupId(cluster.getId());
                    logable.addCustomValue("ClusterName", cluster.getName());
                    // create a string of host names
                    final StringBuilder buf = new StringBuilder(returnedFailedHosts.size() * 16);
                    for (int i = 0; i < returnedFailedHosts.size(); i++) {
                        if (i > 0) {
                            buf.append(SEPARATOR);
                        }
                        if (returnedFailedHosts.get(i) != null) {
                            buf.append(returnedFailedHosts.get(i).getName());
                        }
                    }
                    String failedHostsStr = buf.toString();
                    logable.addCustomValue("Hosts", failedHostsStr);
                    AlertDirector.Alert(logable, AuditLogType.CLUSTER_ALERT_HA_RESERVATION);
                    log.infoFormat("Cluster: {0} fail to pass HA reservation check.", cluster.getName());
                }
            }
        }
    }
    log.debug("HA Reservation check timer finished.");
}
#method_after
@OnTimerMethodAnnotation("performHaResevationCheck")
public void performHaResevationCheck() {
    log.debug("HA Reservation check timer entered.");
    List<VDSGroup> clusters = DbFacade.getInstance().getVdsGroupDao().getAll();
    if (clusters != null) {
        HaReservationHandling haReservationHandling = new HaReservationHandling();
        for (VDSGroup cluster : clusters) {
            if (cluster.supportsHaReservation()) {
                List<VDS> returnedFailedHosts = new ArrayList<VDS>();
                boolean status = haReservationHandling.checkHaReservationStatusForCluster(cluster, returnedFailedHosts);
                if (!status) {
                    // create Alert using returnedFailedHosts
                    AuditLogableBase logable = new AuditLogableBase();
                    logable.setVdsGroupId(cluster.getId());
                    logable.addCustomValue("ClusterName", cluster.getName());
                    String failedHostsStr = StringUtils.join(Entities.objectNames(returnedFailedHosts), ", ");
                    logable.addCustomValue("Hosts", failedHostsStr);
                    AlertDirector.Alert(logable, AuditLogType.CLUSTER_ALERT_HA_RESERVATION);
                    log.infoFormat("Cluster: {0} fail to pass HA reservation check.", cluster.getName());
                }
            }
        }
    }
    log.debug("HA Reservation check timer finished.");
}
#end_block

#method_before
private void validateProvider() throws ManageDomainsResult {
    if (contains(ARG_PROVIDER)) {
        try {
            LdapProviderType.valueOfIgnoreCase(get(ARG_PROVIDER));
        } catch (IllegalArgumentException | NullPointerException ex) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_VALUE, String.format("Invalid provider, valid providers are %s", StringUtils.join(new String[] { PROV_AD, PROV_IPA, PROV_RHDS, PROV_ITDS, PROV_OLDAP }, ", ")));
        }
    }
}
#method_after
private void validateProvider() throws ManageDomainsResult {
    if (contains(ARG_PROVIDER)) {
        try {
            LdapProviderType.valueOfIgnoreCase(get(ARG_PROVIDER));
        } catch (IllegalArgumentException | NullPointerException ex) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_VALUE, String.format("Invalid provider, valid providers are: '%s'.", StringUtils.join(new String[] { PROV_AD, PROV_IPA, PROV_RHDS, PROV_ITDS, PROV_OLDAP }, ", ")));
        }
    }
}
#end_block

#method_before
public void init() {
    setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    setHelpTag(HelpTag.run_virtual_machine);
    // $NON-NLS-1$
    setHashName("run_virtual_machine");
    getAttachIso().setEntity(false);
    getAttachFloppy().setEntity(false);
    getRunAsStateless().setEntity(vm.isStateless());
    getRunAndPause().setEntity(vm.isRunAndPause());
    setHwAcceleration(true);
    // passing Kernel parameters
    getKernel_parameters().setEntity(vm.getKernelParams());
    getKernel_path().setEntity(vm.getKernelUrl());
    getInitrd_path().setEntity(vm.getInitrdUrl());
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(vm.getVmOsId()));
    getIsLinuxOptionsAvailable().setEntity(getIsLinuxOS());
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(vm.getVmOsId()));
    getIsVmFirstRun().setEntity(!vm.isInitialized());
    initVmInitEnabled(vm.getVmInit());
    getVmInit().init(vm.getStaticData());
    setCustomPropertiesKeysList(customPropertiesKeysList);
    updateDomainList();
    updateIsoList();
    updateDisplayProtocols();
    updateFloppyImages();
    updateInitialRunFields();
    // Boot sequence.
    setIsBootFromNetworkAllowedForVm();
    setIsBootFromHardDiskAllowedForVm();
    // Display protocols.
    EntityModel vncProtocol = new EntityModel(DisplayType.vnc).setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    EntityModel qxlProtocol = new EntityModel(DisplayType.qxl).setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    getDisplayProtocol().setItems(Arrays.asList(vncProtocol, qxlProtocol));
    getDisplayProtocol().setSelectedItem(vm.getDefaultDisplayType() == DisplayType.vnc ? vncProtocol : qxlProtocol);
}
#method_after
public void init() {
    setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    setHelpTag(HelpTag.run_virtual_machine);
    // $NON-NLS-1$
    setHashName("run_virtual_machine");
    getAttachIso().setEntity(false);
    getAttachFloppy().setEntity(false);
    getRunAsStateless().setEntity(vm.isStateless());
    getRunAndPause().setEntity(vm.isRunAndPause());
    setHwAcceleration(true);
    // passing Kernel parameters
    getKernel_parameters().setEntity(vm.getKernelParams());
    getKernel_path().setEntity(vm.getKernelUrl());
    getInitrd_path().setEntity(vm.getInitrdUrl());
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(vm.getVmOsId()));
    getIsLinuxOptionsAvailable().setEntity(getIsLinuxOS());
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(vm.getVmOsId()));
    getIsVmFirstRun().setEntity(!vm.isInitialized());
    initVmInitEnabled(vm.getVmInit(), vm.isInitialized());
    getVmInit().init(vm.getStaticData());
    setCustomPropertiesKeysList(customPropertiesKeysList);
    updateDomainList();
    updateIsoList();
    updateDisplayProtocols();
    updateFloppyImages();
    updateInitialRunFields();
    // Boot sequence.
    setIsBootFromNetworkAllowedForVm();
    setIsBootFromHardDiskAllowedForVm();
    // Display protocols.
    EntityModel vncProtocol = new EntityModel(DisplayType.vnc).setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    EntityModel qxlProtocol = new EntityModel(DisplayType.qxl).setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    getDisplayProtocol().setItems(Arrays.asList(vncProtocol, qxlProtocol));
    getDisplayProtocol().setSelectedItem(vm.getDefaultDisplayType() == DisplayType.vnc ? vncProtocol : qxlProtocol);
}
#end_block

#method_before
private void initVmInitEnabled(VmInit vmInit) {
    if (vmInit == null) {
        getIsCloudInitEnabled().setEntity(false);
        getIsSysprepEnabled().setEntity(false);
        getAttachFloppy().setEntity(false);
    } else {
        if (getIsWindowsOS()) {
            getIsSysprepEnabled().setEntity(true);
            getAttachFloppy().setEntity(true);
        } else {
            getIsCloudInitEnabled().setEntity(true);
        }
    }
}
#method_after
private void initVmInitEnabled(VmInit vmInit, boolean isInitialized) {
    if (vmInit == null) {
        getIsCloudInitEnabled().setEntity(false);
        getIsSysprepEnabled().setEntity(false);
        getAttachFloppy().setEntity(false);
    } else if (!isInitialized) {
        if (getIsWindowsOS()) {
            getIsSysprepEnabled().setEntity(true);
            getAttachFloppy().setEntity(true);
        } else {
            getIsCloudInitEnabled().setEntity(true);
        }
    }
}
#end_block

#method_before
private void setIsBootFromNetworkAllowedForVm() {
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            Iterable<VmNetworkInterface> nics = (Iterable<VmNetworkInterface>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            Iterable<VmNetworkInterface> pluggedNics = Linq.where(nics, new Linq.IPredicate<VmNetworkInterface>() {

                @Override
                public boolean match(VmNetworkInterface vnic) {
                    return vnic.isPlugged();
                }
            });
            boolean hasPluggedNics = !((List<VmNetworkInterface>) pluggedNics).isEmpty();
            if (!hasPluggedNics) {
                BootSequenceModel bootSequenceModel = getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().interfaceIsRequiredToBootFromNetwork());
            }
        }
    }));
}
#method_after
private void setIsBootFromNetworkAllowedForVm() {
    Frontend.getInstance().runQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            Collection<VmNetworkInterface> nics = (Collection<VmNetworkInterface>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            Collection<VmNetworkInterface> pluggedNics = Linq.where(nics, new Linq.IPredicate<VmNetworkInterface>() {

                @Override
                public boolean match(VmNetworkInterface vnic) {
                    return vnic.isPlugged();
                }
            });
            boolean hasPluggedNics = !((List<VmNetworkInterface>) pluggedNics).isEmpty();
            if (!hasPluggedNics) {
                BootSequenceModel bootSequenceModel = getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().interfaceIsRequiredToBootFromNetwork());
            }
        }
    }));
}
#end_block

#method_before
private void handleVdsLiveSnapshotFailure(VdcBLLException e) {
    log.warnFormat("Could not live snapshot due to error: {0}. VM will still be configured to the new created snapshot", ExceptionUtils.getMessage(e));
    addCustomValue("SnapshotName", getSnapshotName());
    addCustomValue("VmName", getVmName());
    updateCallStackFromThrowable(e);
    AuditLogDirector.log(this, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE);
}
#method_after
private void handleVdsLiveSnapshotFailure(VdcBLLException e) {
    log.warnFormat("Could not perform live snapshot due to error: {0}. VM will still be configured to the new created snapshot", ExceptionUtils.getMessage(e));
    addCustomValue("SnapshotName", getSnapshotName());
    addCustomValue("VmName", getVmName());
    updateCallStackFromThrowable(e);
    AuditLogDirector.log(this, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE);
}
#end_block

#method_before
@Test
public void testgetAllConnectableStorageSeverConnectionWithNoConnections() {
    List<StorageServerConnections> result = dao.getConnectableStorageConnectionsByStorageType(Guid.newGuid(), null);
    assertNotNull(result);
    assertTrue(result.isEmpty());
}
#method_after
@Test
public void testgetAllConnectableStorageSeverConnectionWithNoConnections() {
    List<StorageServerConnections> result = dao.getAllConnectableStorageSeverConnection(Guid.newGuid());
    assertNotNull(result);
    assertTrue(result.isEmpty());
}
#end_block

#method_before
@Test
public void testGetAllConnectableStorageSeverConnections() {
    List<StorageServerConnections> result = dao.getConnectableStorageConnectionsByStorageType(EXISTING_STORAGE_POOL_ID, null);
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
#method_after
@Test
public void testGetAllConnectableStorageSeverConnections() {
    List<StorageServerConnections> result = dao.getAllConnectableStorageSeverConnection(EXISTING_STORAGE_POOL_ID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
}
#end_block

#method_before
private void createKerberosConfiguration(DomainsConfigurationEntry gssapiDomains, Map<String, List<String>> ldapServersPerGSSAPIDomains) throws ManageDomainsResult {
    if (!gssapiDomains.isEntryEmpty()) {
        String gssapiDomainsString = gssapiDomains.getDomainsConfigurationEntry();
        KrbConfCreator krbConfCreator;
        try {
            log.info("Creating kerberos configuration for domain(s): " + gssapiDomainsString);
            useDnsLookup = utilityConfiguration.getUseDnsLookup();
            if (!ldapServers && useDnsLookup) {
                // The arguments do not contain a list of ldap servers, the 725
                // kerberos configuration should not be created according to it if 726
                // useDnsLookup is set to true as in this case the kdc and the domain_realm info
                ldapServersPerGSSAPIDomains = Collections.emptyMap();
            }
            krbConfCreator = new KrbConfCreator(gssapiDomainsString, useDnsLookup, ldapServersPerGSSAPIDomains);
            StringBuffer buffer = null;
            buffer = krbConfCreator.parse("y");
            krbConfCreator.toFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX, buffer);
            log.info("Successfully created kerberos configuration for domain(s): " + gssapiDomainsString);
        } catch (Exception ex) {
            ManageDomainsResult result = new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_CREATING_KERBEROS_CONFIGURATION, ex.getMessage());
            throw result;
        }
    }
}
#method_after
private void createKerberosConfiguration(DomainsConfigurationEntry gssapiDomains, Map<String, List<String>> ldapServersPerGSSAPIDomains) throws ManageDomainsResult {
    if (!gssapiDomains.isEntryEmpty()) {
        String gssapiDomainsString = gssapiDomains.getDomainsConfigurationEntry();
        KrbConfCreator krbConfCreator;
        try {
            log.info("Creating kerberos configuration for domain(s): " + gssapiDomainsString);
            useDnsLookup = utilityConfiguration.getUseDnsLookup();
            if (!ldapServers && useDnsLookup) {
                // The arguments do not contain a list of ldap servers, the
                // kerberos configuration should not be created according to it if
                // useDnsLookup is set to true as in this case the kdc and the domain_realm info
                ldapServersPerGSSAPIDomains = Collections.emptyMap();
            }
            krbConfCreator = new KrbConfCreator(gssapiDomainsString, useDnsLookup, ldapServersPerGSSAPIDomains);
            StringBuffer buffer = null;
            buffer = krbConfCreator.parse("y");
            krbConfCreator.toFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX, buffer);
            log.info("Successfully created kerberos configuration for domain(s): " + gssapiDomainsString);
        } catch (Exception ex) {
            ManageDomainsResult result = new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_CREATING_KERBEROS_CONFIGURATION, ex.getMessage());
            throw result;
        }
    }
}
#end_block

#method_before
private void refreshVdsRunTimeInfo() {
    boolean isVdsUpOrGoingToMaintenance = _vds.getStatus() == VDSStatus.Up || _vds.getStatus() == VDSStatus.PreparingForMaintenance || _vds.getStatus() == VDSStatus.Error || _vds.getStatus() == VDSStatus.NonOperational;
    try {
        if (isVdsUpOrGoingToMaintenance) {
            // check if its time for statistics refresh
            if (_vdsManager.getRefreshStatistics() || _vds.getStatus() == VDSStatus.PreparingForMaintenance) {
                refreshVdsStats();
            } else {
            /**
             * TODO: Omer if vds team will not implement events to 4.2 please call here to refreshVdsStats -
             * refresh dynamic data
             */
            }
        } else {
            // refresh dynamic data
            final AtomicBoolean processHardwareNeededAtomic = new AtomicBoolean();
            VDSStatus refreshReturnStatus = _vdsManager.refreshCapabilities(processHardwareNeededAtomic, _vds);
            processHardwareCapsNeeded = processHardwareNeededAtomic.get();
            refreshedCapabilities = true;
            if (refreshReturnStatus != VDSStatus.NonOperational) {
                _vdsManager.setStatus(VDSStatus.Up, _vds);
            }
            _saveVdsDynamic = true;
        }
        beforeFirstRefreshTreatment(isVdsUpOrGoingToMaintenance);
        refreshVmStats();
    } catch (VDSRecoveringException e) {
        // move vds to maintenance
        if (_vds.getStatus() != VDSStatus.PreparingForMaintenance) {
            throw e;
        }
    } catch (ClassCastException cce) {
        // This should occur only if the vdsm API is not the same as the cluster API (version mismatch)
        log.error("Failure to refresh Vds runtime info. Incorrect vdsm version for cluster", cce);
        if (_vds.getStatus() != VDSStatus.PreparingForMaintenance && _vds.getStatus() != VDSStatus.Maintenance) {
            _vds.setStatus(VDSStatus.Error);
            _saveVdsDynamic = true;
        }
    } catch (Throwable t) {
        log.error("Failure to refresh Vds runtime info", t);
        throw t;
    }
    moveVDSToMaintenanceIfNeeded();
}
#method_after
private void refreshVdsRunTimeInfo() {
    boolean isVdsUpOrGoingToMaintenance = _vds.getStatus() == VDSStatus.Up || _vds.getStatus() == VDSStatus.PreparingForMaintenance || _vds.getStatus() == VDSStatus.Error || _vds.getStatus() == VDSStatus.NonOperational;
    try {
        if (isVdsUpOrGoingToMaintenance) {
            // check if its time for statistics refresh
            if (_vdsManager.getRefreshStatistics() || _vds.getStatus() == VDSStatus.PreparingForMaintenance) {
                refreshVdsStats();
            } else {
            /**
             * TODO: Omer if vds team will not implement events to 4.2 please call here to refreshVdsStats -
             * refresh dynamic data
             */
            }
        } else {
            // refresh dynamic data
            final AtomicBoolean processHardwareNeededAtomic = new AtomicBoolean();
            VDSStatus refreshReturnStatus = _vdsManager.refreshCapabilities(processHardwareNeededAtomic, _vds);
            processHardwareCapsNeeded = processHardwareNeededAtomic.get();
            refreshedCapabilities = true;
            if (refreshReturnStatus != VDSStatus.NonOperational) {
                _vdsManager.setStatus(VDSStatus.Up, _vds);
            }
            _saveVdsDynamic = true;
        }
        beforeFirstRefreshTreatment(isVdsUpOrGoingToMaintenance);
        refreshVmStats();
    } catch (VDSRecoveringException e) {
        // move vds to maintenance
        if (_vds.getStatus() != VDSStatus.PreparingForMaintenance) {
            throw e;
        }
    } catch (ClassCastException cce) {
        // This should occur only if the vdsm API is not the same as the cluster API (version mismatch)
        log.error(String.format("Failure to refresh Vds %s runtime info. Incorrect vdsm version for cluster %s", _vds.getName(), _vds.getVdsGroupName()), cce);
        if (_vds.getStatus() != VDSStatus.PreparingForMaintenance && _vds.getStatus() != VDSStatus.Maintenance) {
            ResourceManager.getInstance().runVdsCommand(VDSCommandType.SetVdsStatus, new SetVdsStatusVDSCommandParameters(_vds.getId(), VDSStatus.Error));
        }
    } catch (Throwable t) {
        log.error("Failure to refresh Vds runtime info", t);
        throw t;
    }
    moveVDSToMaintenanceIfNeeded();
}
#end_block

#method_before
protected void updateMigrationForLocalSD() {
    boolean isLocalSD = getModel().getSelectedDataCenter() != null && StorageType.LOCALFS.equals(getModel().getSelectedDataCenter().getStorageType());
    if (isLocalSD) {
        getModel().getIsAutoAssign().setEntity(false);
        getModel().getMigrationMode().setSelectedItem(MigrationSupport.PINNED_TO_HOST);
    }
    getModel().getIsAutoAssign().setIsChangable(!isLocalSD);
    getModel().getMigrationMode().setIsChangable(!isLocalSD);
    getModel().getDefaultHost().setIsChangable(!isLocalSD);
}
#method_after
protected void updateMigrationForLocalSD() {
    boolean isLocalSD = getModel().getSelectedDataCenter() != null && getModel().getSelectedDataCenter().isLocal();
    if (isLocalSD) {
        getModel().getIsAutoAssign().setEntity(false);
        getModel().getMigrationMode().setSelectedItem(MigrationSupport.PINNED_TO_HOST);
    }
    getModel().getIsAutoAssign().setIsChangable(!isLocalSD);
    getModel().getMigrationMode().setIsChangable(!isLocalSD);
    getModel().getDefaultHost().setIsChangable(!isLocalSD);
}
#end_block

#method_before
protected void setupTemplate(VM vm, ListModel model) {
    AsyncDataProvider.getTemplateById(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            VmTemplate template = (VmTemplate) returnValue;
            model.getTemplate().setItems(new ArrayList<VmTemplate>(Arrays.asList(new VmTemplate[] { template })));
            model.getTemplate().setSelectedItem(template);
            model.getTemplate().setIsChangable(false);
            postInitTemplate();
        }
    }, getModel().getHash()), vm.getVmtGuid());
}
#method_after
protected void setupTemplate(Guid templateId, final boolean useLatest) {
    AsyncDataProvider.getTemplateById(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            VmTemplate template = (VmTemplate) returnValue;
            if (useLatest) {
                template = createLatestTemplate(template);
            }
            setupBaseTemplate(template.getBaseTemplateId());
            model.getTemplate().setItems(Collections.singletonList(template));
            model.getTemplate().setSelectedItem(template);
            model.getTemplate().setIsChangable(false);
            if (!template.getId().equals(Guid.Empty)) {
                getModel().getVmInitModel().init(template);
            }
        }
    }, getModel().getHash()), templateId);
}
#end_block

#method_before
protected void updateCpuPinningVisibility() {
    if (getModel().getSelectedCluster() != null) {
        VDSGroup cluster = getModel().getSelectedCluster();
        String compatibilityVersion = cluster.getcompatibility_version().toString();
        boolean isLocalSD = getModel().getSelectedDataCenter() != null && StorageType.LOCALFS.equals(getModel().getSelectedDataCenter().getStorageType());
        // cpu pinning is available on Local SD with no consideration for auto assign value
        boolean hasCpuPinning = Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()) || isLocalSD;
        if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) {
            hasCpuPinning = false;
        } else if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, AsyncDataProvider.getDefaultConfigurationVersion())) && isVmMigratable() && !isLocalSD) {
            hasCpuPinning = false;
        }
        if (!hasCpuPinning) {
            if (isLocalSD) {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage());
            } else {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable());
            }
            getModel().getCpuPinning().setEntity("");
        }
        getModel().getCpuPinning().setIsChangable(hasCpuPinning);
    }
}
#method_after
protected void updateCpuPinningVisibility() {
    if (getModel().getSelectedCluster() != null) {
        VDSGroup cluster = getModel().getSelectedCluster();
        String compatibilityVersion = cluster.getcompatibility_version().toString();
        boolean isLocalSD = getModel().getSelectedDataCenter() != null && getModel().getSelectedDataCenter().isLocal();
        // cpu pinning is available on Local SD with no consideration for auto assign value
        boolean hasCpuPinning = Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()) || isLocalSD;
        if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) {
            hasCpuPinning = false;
        } else if (Boolean.FALSE.equals(AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, AsyncDataProvider.getDefaultConfigurationVersion())) && isVmMigratable() && !isLocalSD) {
            hasCpuPinning = false;
        }
        if (!hasCpuPinning) {
            if (isLocalSD) {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailableLocalStorage());
            } else {
                getModel().getCpuPinning().setChangeProhibitionReason(constants.cpuPinningUnavailable());
            }
            getModel().getCpuPinning().setEntity("");
        }
        getModel().getCpuPinning().setIsChangable(hasCpuPinning);
    }
}
#end_block

#method_before
public void totalCpuCoresChanged() {
    int totalCpuCores = getTotalCpuCores();
    int coresPerSocket = extractIntFromListModel(getModel().getCoresPerSocket());
    int numOfSockets = extractIntFromListModel(getModel().getNumOfSockets());
    // if incorrect value put - e.g. not an integer
    getModel().getCoresPerSocket().setIsChangable(totalCpuCores != 0);
    getModel().getNumOfSockets().setIsChangable(totalCpuCores != 0);
    if (totalCpuCores == 0) {
        return;
    }
    // if has not been yet inited, init to 1
    if (numOfSockets == 0 || coresPerSocket == 0) {
        initListToOne(getModel().getCoresPerSocket());
        initListToOne(getModel().getNumOfSockets());
        coresPerSocket = 1;
        numOfSockets = 1;
    }
    List<Integer> coresPerSocets = findIndependentPossibleValues(maxCpusPerSocket);
    List<Integer> sockets = findIndependentPossibleValues(maxNumOfSockets);
    getModel().getCoresPerSocket().setItems(filterPossibleValues(coresPerSocets, sockets));
    getModel().getNumOfSockets().setItems(filterPossibleValues(sockets, coresPerSocets));
    // and always try to set the max possible totalcpuCores
    if (totalCpuCores <= maxNumOfSockets) {
        getModel().getCoresPerSocket().setSelectedItem(1);
        getModel().getNumOfSockets().setSelectedItem(totalCpuCores);
    } else {
        // we need to compose it from more cores on the available sockets
        composeCoresAndSocketsWhenDontFitInto(totalCpuCores);
    }
    boolean isNumOfVcpusCorrect = isNumOfSocketsCorrect(totalCpuCores);
    getModel().getCoresPerSocket().setIsChangable(isNumOfVcpusCorrect);
    getModel().getNumOfSockets().setIsChangable(isNumOfVcpusCorrect);
}
#method_after
public void totalCpuCoresChanged() {
    int totalCpuCores = getTotalCpuCores();
    int coresPerSocket = extractIntFromListModel(getModel().getCoresPerSocket());
    int numOfSockets = extractIntFromListModel(getModel().getNumOfSockets());
    // if incorrect value put - e.g. not an integer
    getModel().getCoresPerSocket().setIsChangable(totalCpuCores != 0);
    getModel().getNumOfSockets().setIsChangable(totalCpuCores != 0);
    if (totalCpuCores == 0) {
        return;
    }
    // if has not been yet inited, init to 1
    if (numOfSockets == 0 || coresPerSocket == 0) {
        initListToOne(getModel().getCoresPerSocket());
        initListToOne(getModel().getNumOfSockets());
    }
    List<Integer> coresPerSocets = findIndependentPossibleValues(maxCpusPerSocket);
    List<Integer> sockets = findIndependentPossibleValues(maxNumOfSockets);
    getModel().getCoresPerSocket().setItems(filterPossibleValues(coresPerSocets, sockets));
    getModel().getNumOfSockets().setItems(filterPossibleValues(sockets, coresPerSocets));
    // and always try to set the max possible totalcpuCores
    if (totalCpuCores <= maxNumOfSockets) {
        getModel().getCoresPerSocket().setSelectedItem(1);
        getModel().getNumOfSockets().setSelectedItem(totalCpuCores);
    } else {
        // we need to compose it from more cores on the available sockets
        composeCoresAndSocketsWhenDontFitInto(totalCpuCores);
    }
    boolean isNumOfVcpusCorrect = isNumOfSocketsCorrect(totalCpuCores);
    getModel().getCoresPerSocket().setIsChangable(isNumOfVcpusCorrect);
    getModel().getNumOfSockets().setIsChangable(isNumOfVcpusCorrect);
}
#end_block

#method_before
private void composeCoresAndSocketsWhenDontFitInto(int totalCpuCores) {
    List<Integer> possibleSockets = findIndependentPossibleValues(maxNumOfSockets);
    List<Integer> possibleCoresPerSocket = findIndependentPossibleValues(maxCpusPerSocket);
    // the more sockets I can use, the better
    Collections.reverse(possibleSockets);
    for (Integer socket : possibleSockets) {
        for (Integer coresPerSocket : possibleCoresPerSocket) {
            if (socket * coresPerSocket == totalCpuCores) {
                getModel().getCoresPerSocket().setSelectedItem(coresPerSocket);
                getModel().getNumOfSockets().setSelectedItem(socket);
                return;
            }
        }
    }
}
#method_after
protected void composeCoresAndSocketsWhenDontFitInto(int totalCpuCores) {
    List<Integer> possibleSockets = findIndependentPossibleValues(maxNumOfSockets);
    List<Integer> possibleCoresPerSocket = findIndependentPossibleValues(maxCpusPerSocket);
    // the more sockets I can use, the better
    Collections.reverse(possibleSockets);
    for (Integer socket : possibleSockets) {
        for (Integer coresPerSocket : possibleCoresPerSocket) {
            if (socket * coresPerSocket == totalCpuCores) {
                getModel().getCoresPerSocket().setSelectedItem(coresPerSocket);
                getModel().getNumOfSockets().setSelectedItem(socket);
                return;
            }
        }
    }
}
#end_block

#method_before
private int extractIntFromListModel(ListModel model) {
    return model.getSelectedItem() != null ? Integer.parseInt(model.getSelectedItem().toString()) : 0;
}
#method_after
protected int extractIntFromListModel(ListModel model) {
    return model.getSelectedItem() != null ? Integer.parseInt(model.getSelectedItem().toString()) : 0;
}
#end_block

#method_before
private List<Integer> findIndependentPossibleValues(int max) {
    List<Integer> res = new ArrayList<Integer>();
    int totalCPUCores = getTotalCpuCores();
    for (int i = 1; i <= Math.min(totalCPUCores, max); i++) {
        if (totalCPUCores % i == 0) {
            res.add(i);
        }
    }
    return res;
}
#method_after
protected List<Integer> findIndependentPossibleValues(int max) {
    List<Integer> res = new ArrayList<Integer>();
    int totalCPUCores = getTotalCpuCores();
    for (int i = 1; i <= Math.min(totalCPUCores, max); i++) {
        if (totalCPUCores % i == 0) {
            res.add(i);
        }
    }
    return res;
}
#end_block

#method_before
private List<Integer> filterPossibleValues(List<Integer> candidates, List<Integer> others) {
    List<Integer> res = new ArrayList<Integer>();
    int currentCpusCores = getTotalCpuCores();
    for (Integer candidate : candidates) {
        for (Integer other : others) {
            if (candidate * other == currentCpusCores) {
                res.add(candidate);
                break;
            }
        }
    }
    return res;
}
#method_after
protected List<Integer> filterPossibleValues(List<Integer> candidates, List<Integer> others) {
    List<Integer> res = new ArrayList<Integer>();
    int currentCpusCores = getTotalCpuCores();
    for (Integer candidate : candidates) {
        for (Integer other : others) {
            if (candidate * other == currentCpusCores) {
                res.add(candidate);
                break;
            }
        }
    }
    return res;
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
                        initCdImage();
                    }
                }, getModel().getHash()), true, false);
            } else {
                getModel().disableEditing(ConstantsManager.getInstance().getConstants().notAvailableWithNoUpDC());
            }
        }
    }, getModel().getHash()), true, false);
    initPriority(0);
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    AsyncDataProvider.getDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final ArrayList<StoragePool> dataCenters = new ArrayList<StoragePool>();
            for (StoragePool a : (ArrayList<StoragePool>) returnValue) {
                if (a.getStatus() == StoragePoolStatus.Up) {
                    dataCenters.add(a);
                }
            }
            if (!dataCenters.isEmpty()) {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        List<VDSGroup> clusterList = (List<VDSGroup>) returnValue;
                        List<VDSGroup> filteredClusterList = AsyncDataProvider.filterClustersWithoutArchitecture(clusterList);
                        model.setDataCentersAndClusters(model, dataCenters, filteredClusterList, null);
                        initCdImage();
                    }
                }, getModel().getHash()), true, false);
            } else {
                getModel().disableEditing(ConstantsManager.getInstance().getConstants().notAvailableWithNoUpDC());
            }
        }
    }, getModel().getHash()), true, false);
    initPriority(0);
    getModel().getVmInitModel().init(null);
}
#end_block

#method_before
@Override
public void template_SelectedItemChanged() {
    VmTemplate template = getModel().getTemplate().getSelectedItem();
    if (template != null) {
        // If this a blank template, use the proper value for the default OS
        if (template.getId().equals(Guid.Empty)) {
            List<Integer> osIds = (List<Integer>) getModel().getOSType().getItems();
            if (!osIds.isEmpty()) {
                getModel().getOSType().setSelectedItem(Collections.min(osIds));
            }
        } else {
            getModel().getOSType().setSelectedItem(template.getOsId());
        }
        getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(template.getDomain());
        getModel().getMemSize().setEntity(template.getMemSizeMb());
        getModel().setBootSequence(template.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
        updateHostPinning(template.getMigrationSupport());
        doChangeDefautlHost(template.getDedicatedVmForVds());
        getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
        getModel().selectSsoMethod(template.getSsoMethod());
        getModel().getIsStateless().setEntity(template.isStateless());
        boolean hasCd = !StringHelper.isNullOrEmpty(template.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(template.getIsoPath());
        }
        updateConsoleDevice(template.getId());
        updateVirtioScsiEnabled(template.getId(), template.getOsId());
        updateTimeZone(template.getTimeZone());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == template.getDefaultDisplayType()) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(template.getKernelUrl());
        getModel().getKernel_parameters().setEntity(template.getKernelParams());
        getModel().getInitrd_path().setEntity(template.getInitrdUrl());
        if (!template.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().getProvisioning().setIsChangable(true);
            getModel().getVmType().setSelectedItem(template.getVmType());
            getModel().setIsBlankTemplate(false);
            getModel().getCopyPermissions().setIsAvailable(true);
            getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
            initDisks();
            initSoundCard(template.getId());
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().getCopyPermissions().setIsAvailable(false);
            getModel().setDisks(null);
        }
        initPriority(template.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (template.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
        }
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
        updateNetworkInterfacesByTemplate(template);
    }
}
#method_after
@Override
public void template_SelectedItemChanged() {
    VmTemplate template = getModel().getTemplate().getSelectedItem();
    if (template != null) {
        // If this a blank template, use the proper value for the default OS
        if (template.getId().equals(Guid.Empty)) {
            Integer osId = AsyncDataProvider.getDefaultOs(getModel().getSelectedCluster().getArchitecture());
            if (osId != null) {
                setSelectedOSById(osId.intValue());
            }
        } else {
            setSelectedOSById(template.getOsId());
        }
        getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
        getModel().getMemSize().setEntity(template.getMemSizeMb());
        getModel().setBootSequence(template.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
        updateHostPinning(template.getMigrationSupport());
        doChangeDefautlHost(template.getDedicatedVmForVds());
        getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
        getModel().selectSsoMethod(template.getSsoMethod());
        getModel().setSelectedMigrationDowntime(template.getMigrationDowntime());
        getModel().getIsStateless().setEntity(template.isStateless());
        boolean hasCd = !StringHelper.isNullOrEmpty(template.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(template.getIsoPath());
        }
        updateConsoleDevice(template.getId());
        updateVirtioScsiEnabled(template.getId(), template.getOsId());
        updateTimeZone(template.getTimeZone());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == template.getDefaultDisplayType()) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(template.getKernelUrl());
        getModel().getKernel_parameters().setEntity(template.getKernelParams());
        getModel().getInitrd_path().setEntity(template.getInitrdUrl());
        if (!template.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().getProvisioning().setIsChangable(true);
            getModel().getVmType().setSelectedItem(template.getVmType());
            getModel().setIsBlankTemplate(false);
            getModel().getCopyPermissions().setIsAvailable(true);
            getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
            initDisks();
            initSoundCard(template.getId());
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().getProvisioning().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().getCopyPermissions().setIsAvailable(false);
            getModel().setDisks(null);
        }
        initPriority(template.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (template.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
        }
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
        updateNetworkInterfacesByTemplate(template);
        getModel().getVmInitModel().init(template);
        getModel().getVmInitEnabled().setEntity(template.getVmInit() != null);
    }
}
#end_block

#method_before
private void updateTemplate() {
    DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.getTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.firstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(Guid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        behavior2.postInitTemplate((ArrayList<VmTemplate>) returnValue2);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                behavior.postInitTemplate((ArrayList<VmTemplate>) returnValue);
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#method_after
private void updateTemplate() {
    final DataCenterWithCluster dataCenterWithCluster = (DataCenterWithCluster) getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.getTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        List<VmTemplate> templatesByDataCenter = (List<VmTemplate>) array2[1];
                        List<VmTemplate> templatesByStorage = (List<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.firstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(Guid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        List<VmTemplate> templateList = AsyncDataProvider.filterTemplatesByArchitecture(templatesByStorage, dataCenterWithCluster.getCluster().getArchitecture());
                        behavior2.postInitTemplate(templateList);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.getTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                List<VmTemplate> templates = (List<VmTemplate>) returnValue;
                behavior.postInitTemplate(AsyncDataProvider.filterTemplatesByArchitecture(templates, dataCenterWithCluster.getCluster().getArchitecture()));
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#end_block

#method_before
private void postInitTemplate(ArrayList<VmTemplate> templates) {
    // If there was some template selected before, try select it again.
    VmTemplate oldTemplate = getModel().getTemplate().getSelectedItem();
    getModel().getTemplate().setItems(templates);
    getModel().getTemplate().setSelectedItem(Linq.firstOrDefault(templates, oldTemplate != null ? new Linq.TemplatePredicate(oldTemplate.getId()) : new Linq.TemplatePredicate(Guid.Empty)));
    updateIsDisksAvailable();
}
#method_after
private void postInitTemplate(List<VmTemplate> templates) {
    List<VmTemplate> baseTemplates = filterNotBaseTemplates(templates);
    // If there was some template selected before, try select it again.
    VmTemplate prevBaseTemplate = getModel().getBaseTemplate().getSelectedItem();
    getModel().getBaseTemplate().setItems(baseTemplates);
    getModel().getBaseTemplate().setSelectedItem(Linq.firstOrDefault(baseTemplates, new Linq.TemplatePredicate(prevBaseTemplate != null ? prevBaseTemplate.getId() : Guid.Empty)));
    updateIsDisksAvailable();
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getProvisioning().setIsChangable(false);
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    if (template.getStoragePoolId() != null && !template.getStoragePoolId().equals(Guid.Empty)) {
        AsyncDataProvider.getDataCenterById(new AsyncQuery(getModel(), new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                final StoragePool dataCenter = (StoragePool) returnValue;
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                        ArrayList<VDSGroup> filteredClusters = new ArrayList<VDSGroup>();
                        // filter clusters supporting virt service only
                        for (VDSGroup cluster : clusters) {
                            if (cluster.supportsVirtService()) {
                                filteredClusters.add(cluster);
                            }
                        }
                        model.setDataCentersAndClusters(model, new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dataCenter })), filteredClusters, template.getVdsGroupId());
                        AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                            @Override
                            public void onSuccess(Object model, Object returnValue) {
                                getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
                                initTemplate();
                                initCdImage();
                            }
                        }), template.getId());
                    }
                }, getModel().getHash()), true, false);
            }
        }, getModel().getHash()), template.getStoragePoolId());
    }
    AsyncDataProvider.getWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel().name());
            }
        }
    }), template.getId());
    getModel().getMigrationMode().setSelectedItem(template.getMigrationSupport());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getBaseTemplate().setIsChangable(false);
    getModel().getProvisioning().setIsChangable(false);
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    getModel().getVmType().setIsChangable(true);
    if (template.getStoragePoolId() != null && !template.getStoragePoolId().equals(Guid.Empty)) {
        AsyncDataProvider.getDataCenterById(new AsyncQuery(getModel(), new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                final StoragePool dataCenter = (StoragePool) returnValue;
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                        ArrayList<VDSGroup> clustersSupportingVirt = new ArrayList<VDSGroup>();
                        // filter clusters supporting virt service only
                        for (VDSGroup cluster : clusters) {
                            if (cluster.supportsVirtService()) {
                                clustersSupportingVirt.add(cluster);
                            }
                        }
                        List<VDSGroup> filteredClusters = AsyncDataProvider.filterByArchitecture(clustersSupportingVirt, template.getClusterArch());
                        model.setDataCentersAndClusters(model, new ArrayList<StoragePool>(Arrays.asList(new StoragePool[] { dataCenter })), filteredClusters, template.getVdsGroupId());
                        AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                            @Override
                            public void onSuccess(Object model, Object returnValue) {
                                getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
                                initTemplate();
                                initCdImage();
                            }
                        }), template.getId());
                    }
                }, getModel().getHash()), true, false);
            }
        }, getModel().getHash()), template.getStoragePoolId());
    }
    AsyncDataProvider.getWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel().name());
            }
        }
    }), template.getId());
    getModel().getMigrationMode().setSelectedItem(template.getMigrationSupport());
    setupBaseTemplate(template.getBaseTemplateId());
}
#end_block

#method_before
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getName().setEntity(this.template.getName());
    getModel().getDescription().setEntity(this.template.getDescription());
    getModel().getComment().setEntity(this.template.getComment());
    getModel().getMinAllocatedMemory().setEntity(this.template.getMinAllocatedMem());
    getModel().getMinAllocatedMemory().setIsChangable(false);
    getModel().getMemSize().setEntity(this.template.getMemSizeMb());
    getModel().getOSType().setSelectedItem(this.template.getOsId());
    getModel().getDomain().setSelectedItem(this.template.getDomain());
    getModel().getUsbPolicy().setSelectedItem(this.template.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(this.template.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.template.isAllowConsoleReconnect());
    getModel().setBootSequence(this.template.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(this.template.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.template.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.template.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.template.isStateless());
    getModel().getIsRunAndPause().setEntity(this.template.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.template.isDeleteProtected());
    getModel().selectSsoMethod(this.template.getSsoMethod());
    getModel().getIsSmartcardEnabled().setEntity(this.template.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.template.getVncKeyboardLayout());
    getModel().getKernel_parameters().setEntity(this.template.getKernelParams());
    getModel().getKernel_path().setEntity(this.template.getKernelUrl());
    getModel().getInitrd_path().setEntity(this.template.getInitrdUrl());
    getModel().getIsSingleQxlEnabled().setEntity(this.template.getSingleQxlPci());
    updateTimeZone(template.getTimeZone());
    // Update domain list
    updateDomain();
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == this.template.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    updateConsoleDevice(template.getId());
    initPriority(this.template.getPriority());
}
#method_after
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getName().setEntity(template.getName());
    getModel().getDescription().setEntity(template.getDescription());
    getModel().getComment().setEntity(template.getComment());
    getModel().getMinAllocatedMemory().setEntity(template.getMinAllocatedMem());
    getModel().getMinAllocatedMemory().setIsChangable(false);
    getModel().getMemSize().setEntity(template.getMemSizeMb());
    getModel().getOSType().setSelectedItem(template.getOsId());
    getModel().getUsbPolicy().setSelectedItem(template.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(template.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(template.isAllowConsoleReconnect());
    getModel().setBootSequence(template.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(template.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(template.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(template.getNumOfSockets());
    getModel().getIsStateless().setEntity(template.isStateless());
    getModel().getIsRunAndPause().setEntity(template.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(template.isDeleteProtected());
    getModel().selectSsoMethod(template.getSsoMethod());
    getModel().getIsSmartcardEnabled().setEntity(template.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(template.getVncKeyboardLayout());
    getModel().setSelectedMigrationDowntime(template.getMigrationDowntime());
    getModel().getKernel_parameters().setEntity(template.getKernelParams());
    getModel().getKernel_path().setEntity(template.getKernelUrl());
    getModel().getInitrd_path().setEntity(template.getInitrdUrl());
    getModel().getIsSingleQxlEnabled().setEntity(template.getSingleQxlPci());
    updateTimeZone(template.getTimeZone());
    // Update domain list
    updateDomain();
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == template.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    updateConsoleDevice(template.getId());
    getModel().getVmInitEnabled().setEntity(template.getVmInit() != null);
    getModel().getVmInitModel().init(template);
    initPriority(template.getPriority());
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getTemplate().setIsChangable(false);
    getModel().getVmType().setIsChangable(true);
    getModel().getCopyPermissions().setIsAvailable(true);
    DisksAllocationModel disksAllocationModel = getModel().getDisksAllocationModel();
    disksAllocationModel.setIsAliasChangable(true);
    AsyncDataProvider.getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final StoragePool dataCenter = (StoragePool) returnValue;
            if (dataCenter == null) {
                disableNewTemplateModel(ConstantsManager.getInstance().getConstants().dataCenterIsNotAccessibleMsg());
            } else {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        List<VDSGroup> clusters = (List<VDSGroup>) returnValue;
                        model.setDataCentersAndClusters(model, Arrays.asList(dataCenter), clusters, vm.getVdsGroupId());
                        initTemplate();
                    }
                }, getModel().getHash()), true, false);
                AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue) {
                        getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
                    }
                }, getModel().getHash()), vm.getId());
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getVmInitEnabled().setEntity(vm.getVmInit() != null);
    getModel().getVmInitModel().init(vm.getStaticData());
    getModel().getTemplate().setIsChangable(false);
    getModel().getVmType().setIsChangable(true);
    getModel().getCopyPermissions().setIsAvailable(true);
    DisksAllocationModel disksAllocationModel = getModel().getDisksAllocationModel();
    disksAllocationModel.setIsAliasChangable(true);
    AsyncDataProvider.getDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            final StoragePool dataCenter = (StoragePool) returnValue;
            if (dataCenter == null) {
                disableNewTemplateModel(ConstantsManager.getInstance().getConstants().dataCenterIsNotAccessibleMsg());
            } else {
                AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object target, Object returnValue) {
                        UnitVmModel model = (UnitVmModel) target;
                        List<VDSGroup> clusters = (List<VDSGroup>) returnValue;
                        List<VDSGroup> filteredClusters = AsyncDataProvider.filterByArchitecture(clusters, vm.getClusterArch());
                        model.setDataCentersAndClusters(model, Arrays.asList(dataCenter), filteredClusters, vm.getVdsGroupId());
                        initTemplate();
                    }
                }, getModel().getHash()), true, false);
                AsyncDataProvider.isSoundcardEnabled(new AsyncQuery(getModel(), new INewAsyncCallback() {

                    @Override
                    public void onSuccess(Object model, Object returnValue) {
                        getModel().getIsSoundcardEnabled().setEntity((Boolean) returnValue);
                    }
                }, getModel().getHash()), vm.getId());
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId());
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateQuotaByCluster(null, null);
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateOSValues();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateQuotaByCluster(null, null);
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateOSValues();
    updateTemplate();
}
#end_block

#method_before
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getMemSize().setEntity(this.vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(this.vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(this.vm.getVmOsId());
    getModel().getDomain().setSelectedItem(this.vm.getVmDomain());
    getModel().getNumOfMonitors().setSelectedItem(this.vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.vm.getAllowConsoleReconnect());
    getModel().setBootSequence(this.vm.getDefaultBootSequence());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.vm.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.vm.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.vm.isStateless());
    getModel().getIsRunAndPause().setEntity(this.vm.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.vm.isDeleteProtected());
    getModel().selectSsoMethod(this.vm.getSsoMethod());
    updateSelectedCdImage(this.vm.getStaticData());
    updateTimeZone(this.vm.getTimeZone());
    updateConsoleDevice(this.vm.getId());
    // Update domain list
    updateDomain();
    getModel().getStorageDomain().setIsChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == this.vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getUsbPolicy().setSelectedItem(this.vm.getUsbPolicy());
    getModel().getIsSmartcardEnabled().setEntity(this.vm.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.vm.getVncKeyboardLayout());
    initPriority(this.vm.getPriority());
}
#method_after
private void initTemplate() {
    // Update model state according to VM properties.
    getModel().getMemSize().setEntity(this.vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(this.vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(this.vm.getVmOsId());
    getModel().getNumOfMonitors().setSelectedItem(this.vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(this.vm.getAllowConsoleReconnect());
    getModel().setBootSequence(this.vm.getDefaultBootSequence());
    getModel().getTotalCPUCores().setEntity(Integer.toString(this.vm.getNumOfCpus()));
    getModel().getNumOfSockets().setSelectedItem(this.vm.getNumOfSockets());
    getModel().getIsStateless().setEntity(this.vm.isStateless());
    getModel().getIsRunAndPause().setEntity(this.vm.isRunAndPause());
    getModel().getIsDeleteProtected().setEntity(this.vm.isDeleteProtected());
    getModel().selectSsoMethod(this.vm.getSsoMethod());
    updateSelectedCdImage(this.vm.getStaticData());
    updateTimeZone(this.vm.getTimeZone());
    updateConsoleDevice(this.vm.getId());
    // Update domain list
    updateDomain();
    getModel().getStorageDomain().setIsChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == this.vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getUsbPolicy().setSelectedItem(this.vm.getUsbPolicy());
    getModel().getIsSmartcardEnabled().setEntity(this.vm.isSmartcardEnabled());
    getModel().getVncKeyboardLayout().setSelectedItem(this.vm.getDefaultVncKeyboardLayout());
    getModel().setSelectedMigrationDowntime(this.vm.getMigrationDowntime());
    initPriority(this.vm.getPriority());
}
#end_block

#method_before
protected void postDataCentersLoaded(final List<StoragePool> dataCenters) {
    AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, null);
            initCdImage();
            getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty);
        }
    }, getModel().getHash()), true, false);
}
#method_after
protected void postDataCentersLoaded(final List<StoragePool> dataCenters) {
    AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            List<VDSGroup> clusters = (List<VDSGroup>) returnValue;
            List<VDSGroup> filteredClusters = filterClusters(clusters);
            model.setDataCentersAndClusters(model, dataCenters, filteredClusters, null);
            initCdImage();
            getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.EMPTY);
        }
    }, getModel().getHash()), true, false);
}
#end_block

#method_before
protected void setupWindowModelFrom(VmBase vmBase) {
    if (vmBase != null) {
        updateQuotaByCluster(vmBase.getQuotaId(), vmBase.getQuotaName());
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(vmBase.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(vmBase.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(vmBase.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(vmBase.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(vmBase.getSingleQxlPci());
        getModel().getDomain().setSelectedItem(vmBase.getDomain());
        getModel().getMemSize().setEntity(vmBase.getMemSizeMb());
        getModel().setBootSequence(vmBase.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(vmBase.isAutoStartup());
        getModel().getIsDeleteProtected().setEntity(vmBase.isDeleteProtected());
        getModel().selectSsoMethod(vmBase.getSsoMethod());
        getModel().getIsRunAndPause().setEntity(false);
        boolean hasCd = !StringHelper.isNullOrEmpty(vmBase.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(vmBase.getIsoPath());
        }
        updateTimeZone(vmBase.getTimeZone());
        updateConsoleDevice(vmBase.getId());
        updateVirtioScsiEnabled(vmBase.getId(), vmBase.getOsId());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == extractDisplayType(vmBase)) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(vmBase.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(vmBase.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(vmBase.isSmartcardEnabled());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(vmBase.getKernelUrl());
        getModel().getKernel_parameters().setEntity(vmBase.getKernelParams());
        getModel().getInitrd_path().setEntity(vmBase.getInitrdUrl());
        if (!vmBase.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().setIsBlankTemplate(false);
            initDisks();
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().setDisks(null);
        }
        getModel().getProvisioning().setEntity(false);
        initPriority(vmBase.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (vmBase.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(vmBase.getMinAllocatedMem());
        }
        initSoundCard(vmBase.getId());
        getModel().getAllowConsoleReconnect().setEntity(vmBase.isAllowConsoleReconnect());
    }
}
#method_after
protected void setupWindowModelFrom(VmBase vmBase) {
    if (vmBase != null) {
        updateQuotaByCluster(vmBase.getQuotaId(), vmBase.getQuotaName());
        // Copy VM parameters from template.
        getModel().getOSType().setSelectedItem(vmBase.getOsId());
        getModel().getTotalCPUCores().setEntity(Integer.toString(vmBase.getNumOfCpus()));
        getModel().getNumOfSockets().setSelectedItem(vmBase.getNumOfSockets());
        getModel().getNumOfMonitors().setSelectedItem(vmBase.getNumOfMonitors());
        getModel().getIsSingleQxlEnabled().setEntity(vmBase.getSingleQxlPci());
        getModel().getMemSize().setEntity(vmBase.getMemSizeMb());
        getModel().setBootSequence(vmBase.getDefaultBootSequence());
        getModel().getIsHighlyAvailable().setEntity(vmBase.isAutoStartup());
        getModel().getIsDeleteProtected().setEntity(vmBase.isDeleteProtected());
        getModel().selectSsoMethod(vmBase.getSsoMethod());
        getModel().getIsRunAndPause().setEntity(false);
        boolean hasCd = !StringHelper.isNullOrEmpty(vmBase.getIsoPath());
        getModel().getCdImage().setIsChangable(hasCd);
        getModel().getCdAttached().setEntity(hasCd);
        if (hasCd) {
            getModel().getCdImage().setSelectedItem(vmBase.getIsoPath());
        }
        updateTimeZone(vmBase.getTimeZone());
        updateConsoleDevice(vmBase.getId());
        updateVirtioScsiEnabled(vmBase.getId(), vmBase.getOsId());
        // Update domain list
        updateDomain();
        // Update display protocol selected item
        EntityModel<DisplayType> displayProtocol = null;
        boolean isFirst = true;
        for (EntityModel<DisplayType> item : getModel().getDisplayProtocol().getItems()) {
            if (isFirst) {
                displayProtocol = item;
                isFirst = false;
            }
            DisplayType dt = item.getEntity();
            if (dt == extractDisplayType(vmBase)) {
                displayProtocol = item;
                break;
            }
        }
        getModel().getDisplayProtocol().setSelectedItem(displayProtocol);
        getModel().getUsbPolicy().setSelectedItem(vmBase.getUsbPolicy());
        getModel().getVncKeyboardLayout().setSelectedItem(vmBase.getVncKeyboardLayout());
        getModel().getIsSmartcardEnabled().setEntity(vmBase.isSmartcardEnabled());
        getModel().setSelectedMigrationDowntime(vmBase.getMigrationDowntime());
        // By default, take kernel params from template.
        getModel().getKernel_path().setEntity(vmBase.getKernelUrl());
        getModel().getKernel_parameters().setEntity(vmBase.getKernelParams());
        getModel().getInitrd_path().setEntity(vmBase.getInitrdUrl());
        if (!vmBase.getId().equals(Guid.Empty)) {
            getModel().getStorageDomain().setIsChangable(true);
            getModel().setIsBlankTemplate(false);
            initDisks();
        } else {
            getModel().getStorageDomain().setIsChangable(false);
            getModel().setIsBlankTemplate(true);
            getModel().setIsDisksAvailable(false);
            getModel().setDisks(null);
        }
        getModel().getProvisioning().setEntity(false);
        initPriority(vmBase.getPriority());
        initStorageDomains();
        // use min. allocated memory from the template, if specified
        if (vmBase.getMinAllocatedMem() == 0) {
            updateMinAllocatedMemory();
        } else {
            getModel().getMinAllocatedMemory().setEntity(vmBase.getMinAllocatedMem());
        }
        initSoundCard(vmBase.getId());
        getModel().getAllowConsoleReconnect().setEntity(vmBase.isAllowConsoleReconnect());
        getModel().getVmInitModel().init(vmBase);
        getModel().getVmInitEnabled().setEntity(vmBase.getVmInit() != null);
    }
}
#end_block

#method_before
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    updateOSValues();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
    updateTemplate();
}
#method_after
@Override
public void postDataCenterWithClusterSelectedItemChanged() {
    updateDefaultHost();
    updateCustomPropertySheet();
    updateMinAllocatedMemory();
    updateNumOfSockets();
    updateOSValues();
    if (getModel().getTemplate().getSelectedItem() != null) {
        VmTemplate template = getModel().getTemplate().getSelectedItem();
        updateQuotaByCluster(template.getQuotaId(), template.getQuotaName());
    }
    updateMemoryBalloon();
    updateCpuSharesAvailability();
    updateVirtioScsiAvailability();
}
#end_block

#method_before
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        getSsoMethodNone().setIsChangable(false);
        getSsoMethodGuestAgent().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#method_after
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenterWithClustersList().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getComment().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getMaxAssignedVmsPerUser().setIsChangable(false);
        getBaseTemplate().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSingleQxlEnabled().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        getSsoMethodNone().setIsChangable(false);
        getSsoMethodGuestAgent().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            getBehavior().oSType_SelectedItemChanged();
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.getInstance().getQueryStartedEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.getInstance().getQueryCompleteEventDefinition()) && StringHelper.stringsEqual(Frontend.getInstance().getCurrentContext(), getHash())) {
        frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) {
        if (sender == getVmType()) {
            vmTypeChanged();
        } else if (sender == getDataCenterWithClustersList()) {
            dataCenterWithClusterSelectedItemChanged(sender, args);
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getTemplate()) {
            template_SelectedItemChanged(sender, args);
        } else if (sender == getTimeZone()) {
            timeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            defaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            oSType_SelectedItemChanged(sender, args);
            getBehavior().oSType_SelectedItemChanged();
            getVmInitModel().osTypeChanged(getOSType().getSelectedItem());
            updateDisplayProtocol();
            initUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            firstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            displayProtocol_SelectedItemChanged(sender, args);
            initUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            numOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            coresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getCpuSharesAmountSelection()) {
            behavior.updateCpuSharesAmountChangeability();
        } else if (sender == getBaseTemplate()) {
            behavior.baseTemplateSelectedItemChanged();
        }
    } else if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) {
        if (sender == getVmInitEnabled()) {
            vmInitEnabledChanged();
        } else if (sender == getMemSize()) {
            memSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            totalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
            behavior.updateHaAvailability();
        } else if (sender == getProvisioning()) {
            provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if (getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if (getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        } else if (sender == getWatchdogModel()) {
            WatchdogModel_EntityChanged(sender, args);
        } else if (sender == getIsHighlyAvailable()) {
            behavior.updateMigrationAvailability();
        } else if (sender == getOverrideMigrationDowntime()) {
            overrideMigrationDowntimeChanged();
        }
    }
}
#end_block

#method_before
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
    handleQxlClusterLevel();
    updateWatchdogModels(osType);
}
#method_after
private void oSType_SelectedItemChanged(Object sender, EventArgs args) {
    Integer osType = getOSType().getSelectedItem();
    setIsWindowsOS(AsyncDataProvider.isWindowsOsType(osType));
    setIsLinuxOS(AsyncDataProvider.isLinuxOsType(osType));
    getInitrd_path().setIsChangable(getIsLinuxOS());
    getInitrd_path().setIsAvailable(getIsLinuxOS());
    getKernel_path().setIsChangable(getIsLinuxOS());
    getKernel_path().setIsAvailable(getIsLinuxOS());
    getKernel_parameters().setIsChangable(getIsLinuxOS());
    getKernel_parameters().setIsAvailable(getIsLinuxOS());
    getDomain().setIsChangable(getIsWindowsOS());
    getBehavior().updateDefaultTimeZone();
    handleQxlClusterLevel();
    updateWatchdogModels(osType);
    vmInitEnabledChanged();
}
#end_block

#method_before
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (cluster.getStoragePoolId() == null) {
            continue;
        }
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
            dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#method_after
protected void setupDataCenterWithClusters(UnitVmModel model, List<StoragePool> dataCenters, List<VDSGroup> clusters, Guid selectedCluster) {
    Map<Guid, List<VDSGroup>> dataCenterToCluster = new HashMap<Guid, List<VDSGroup>>();
    for (VDSGroup cluster : clusters) {
        if (cluster.getStoragePoolId() == null) {
            continue;
        }
        if (!dataCenterToCluster.containsKey(cluster.getStoragePoolId())) {
            dataCenterToCluster.put(cluster.getStoragePoolId(), new ArrayList<VDSGroup>());
        }
        dataCenterToCluster.get(cluster.getStoragePoolId()).add(cluster);
    }
    List<DataCenterWithCluster> dataCentersWithClusters = new ArrayList<DataCenterWithCluster>();
    for (StoragePool dataCenter : dataCenters) {
        if (dataCenterToCluster.containsKey(dataCenter.getId())) {
            for (VDSGroup cluster : dataCenterToCluster.get(dataCenter.getId())) {
                dataCentersWithClusters.add(new DataCenterWithCluster(dataCenter, cluster));
            }
        }
    }
    getDataCenterWithClustersList().setItems(dataCentersWithClusters);
    selectDataCenterWithCluster(model, selectedCluster, dataCentersWithClusters);
}
#end_block

#method_before
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? AsyncDataProvider.getMaxVmNameLengthWin() : AsyncDataProvider.getMaxVmNameLengthNonWin()), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, getSelectedCluster().getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && getIsAutoAssign().getEntity() == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty(getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty(getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty(getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    boolean behaviorValid = behavior.validate();
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid() && getSpiceProxy().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behaviorValid && customPropertySheetValid && getQuota().getIsValid();
}
#method_after
public boolean validate() {
    getDataCenterWithClustersList().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getMemSize().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getMinAllocatedMemory().validateEntity(new IValidation[] { new ByteSizeValidation() });
    getOSType().validateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    DataCenterWithCluster dataCenterWithCluster = getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().validateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    getTotalCPUCores().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(1, behavior.maxCpus), new TotalCpuCoresComposableValidation() });
    if (getOSType().getIsValid()) {
        Integer osType = getOSType().getSelectedItem();
        getName().validateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation((getBehavior() instanceof TemplateVmModelBehavior || getBehavior() instanceof NewTemplateVmModelBehavior) ? VM_TEMPLATE_NAME_MAX_LIMIT : AsyncDataProvider.isWindowsOsType(osType) ? AsyncDataProvider.getMaxVmNameLengthWin() : AsyncDataProvider.getMaxVmNameLengthNonWin()), isPoolTabValid ? new PoolNameValidation() : new I18NNameValidation() });
        getDescription().validateEntity(new IValidation[] { new LengthValidation(DESCRIPTION_MAX_LIMIT), new SpecialAsciiI18NOrNoneValidation() });
        AsyncQuery asyncQuery = new AsyncQuery();
        asyncQuery.setModel(this);
        asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                validateMemorySize(getMemSize(), (Integer) ((VdcQueryReturnValue) returnValue).getReturnValue(), _minMemSize);
                if (!(((UnitVmModel) model).getBehavior() instanceof TemplateVmModelBehavior)) {
                    // Minimum 'Physical Memory Guaranteed' is 1MB
                    validateMemorySize(getMinAllocatedMemory(), getMemSize().getEntity(), 1);
                }
            }
        };
        if (getSelectedCluster() != null) {
            AsyncDataProvider.getOsMaxRam(osType, getSelectedCluster().getcompatibility_version(), asyncQuery);
        }
        getComment().validateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    }
    if (getIsAutoAssign().getEntity() != null && getIsAutoAssign().getEntity() == false) {
        getDefaultHost().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    getTemplate().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDisksAllocationModel().validateEntity(new IValidation[] {});
    getCdImage().setIsValid(true);
    if (getCdImage().getIsChangable()) {
        getCdImage().validateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    getMigrationDowntime().validateEntity(new IValidation[] { new NotNullIntegerValidation(0, Integer.MAX_VALUE) });
    if (getIsLinuxOS()) {
        getKernel_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().validateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty(getKernel_path().getEntity())) {
            final UIConstants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty(getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty(getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getCpuSharesAmount().getIsAvailable()) {
        getCpuSharesAmount().validateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, 262144) });
    }
    boolean customPropertySheetValid = getCustomPropertySheet().validate();
    setIsBootSequenceTabValid(true);
    setIsAllocationTabValid(getIsBootSequenceTabValid());
    setIsDisplayTabValid(getIsAllocationTabValid());
    setIsFirstRunTabValid(getIsDisplayTabValid());
    setIsGeneralTabValid(getIsFirstRunTabValid());
    boolean behaviorValid = behavior.validate();
    setIsGeneralTabValid(getName().getIsValid() && getDescription().getIsValid() && getComment().getIsValid() && getDataCenterWithClustersList().getIsValid() && getTemplate().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid());
    setIsFirstRunTabValid(getDomain().getIsValid() && getTimeZone().getIsValid());
    setIsDisplayTabValid(getUsbPolicy().getIsValid() && getNumOfMonitors().getIsValid() && getSpiceProxy().getIsValid());
    setIsHostTabValid(getDefaultHost().getIsValid() && getMigrationDowntime().getIsValid());
    setIsAllocationTabValid(getDisksAllocationModel().getIsValid() && getMinAllocatedMemory().getIsValid() && getCpuSharesAmount().getIsValid());
    setIsBootSequenceTabValid(getCdImage().getIsValid() && getKernel_path().getIsValid());
    setIsCustomPropertiesTabValid(customPropertySheetValid);
    return getName().getIsValid() && getDescription().getIsValid() && getDataCenterWithClustersList().getIsValid() && getDisksAllocationModel().getIsValid() && getTemplate().getIsValid() && getComment().getIsValid() && getDefaultHost().getIsValid() && getMemSize().getIsValid() && getMinAllocatedMemory().getIsValid() && getNumOfMonitors().getIsValid() && getDomain().getIsValid() && getUsbPolicy().getIsValid() && getTimeZone().getIsValid() && getOSType().getIsValid() && getCdImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getCpuSharesAmount().getIsValid() && behaviorValid && customPropertySheetValid && getQuota().getIsValid() && getMigrationDowntime().getIsValid();
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getVmType().setIsChangable(true);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    AsyncQuery getVmNicsQuery = new AsyncQuery();
    getVmNicsQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            networkInerfaces = (List<VmNetworkInterface>) result;
            postNetworkInterfacesLoaded();
        }
    };
    AsyncDataProvider.getVmNicList(getVmNicsQuery, vm.getId());
    AsyncDataProvider.getWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            VdcQueryReturnValue val = (VdcQueryReturnValue) returnValue;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = val.getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction() == null ? null : watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel() == null ? "" : watchdog.getModel().name());
            }
        }
    }), vm.getId());
}
#method_after
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getVmInitEnabled().setEntity(getVm().getVmInit() != null);
    getModel().getVmInitModel().init(getVm().getStaticData());
    getModel().getVmType().setIsChangable(true);
    getModel().getIsSoundcardEnabled().setIsChangable(true);
    AsyncQuery getVmNicsQuery = new AsyncQuery();
    getVmNicsQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object result) {
            networkInerfaces = (List<VmNetworkInterface>) result;
            postNetworkInterfacesLoaded();
        }
    };
    AsyncDataProvider.getVmNicList(getVmNicsQuery, vm.getId());
    AsyncDataProvider.getWatchdogByVmId(new AsyncQuery(this.getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            VdcQueryReturnValue val = (VdcQueryReturnValue) returnValue;
            @SuppressWarnings("unchecked")
            Collection<VmWatchdog> watchdogs = val.getReturnValue();
            for (VmWatchdog watchdog : watchdogs) {
                model.getWatchdogAction().setSelectedItem(watchdog.getAction() == null ? null : watchdog.getAction().name().toLowerCase());
                model.getWatchdogModel().setSelectedItem(watchdog.getModel() == null ? "" : watchdog.getModel().name());
            }
        }
    }), vm.getId());
}
#end_block

#method_before
protected void initClusters(final List<StoragePool> dataCenters) {
    AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            model.setDataCentersAndClusters(model, dataCenters, (List<VDSGroup>) returnValue, vm.getVdsGroupId());
            initTemplate();
            initCdImage();
            initSoundCard(vm.getId());
        }
    }, getModel().getHash()), true, false);
}
#method_after
protected void initClusters(final List<StoragePool> dataCenters) {
    AsyncDataProvider.getClusterListByService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void onSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            List<VDSGroup> clusters = (List<VDSGroup>) returnValue;
            List<VDSGroup> filteredClusters = AsyncDataProvider.filterByArchitecture(clusters, vm.getClusterArch());
            model.setDataCentersAndClusters(model, dataCenters, filteredClusters, vm.getVdsGroupId());
            initTemplate();
            initCdImage();
            initSoundCard(vm.getId());
        }
    }, getModel().getHash()), true, false);
}
#end_block

#method_before
@Override
public void template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getComment().setEntity(vm.getComment());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOsId());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getIsSingleQxlEnabled().setEntity(vm.getSingleQxlPci());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().selectSsoMethod(vm.getSsoMethod());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties());
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    Frontend.getInstance().runQuery(VdcQueryType.GetWatchdog, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            @SuppressWarnings("unchecked")
            List<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (watchdogs.isEmpty()) {
                getModel().getWatchdogAction().setSelectedItem(null);
                getModel().getWatchdogModel().setSelectedItem(null);
            } else {
                VmWatchdog vmWatchdog = watchdogs.get(0);
                getModel().getWatchdogAction().setSelectedItem(vmWatchdog.getAction() == null ? null : vmWatchdog.getAction().name().toLowerCase());
                getModel().getWatchdogModel().setSelectedItem(vmWatchdog.getModel() == null ? "" : vmWatchdog.getModel().name());
            }
        }
    }));
    updateConsoleDevice(getVm().getId());
    updateVirtioScsiEnabled(getVm().getId(), getVm().getVmOsId());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getVncKeyboardLayout());
    Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getMemoryBalloonDeviceEnabled().setEntity((Boolean) ((VdcQueryReturnValue) returnValue).getReturnValue());
        }
    }));
    if (vm.isInitialized()) {
        UIConstants constants = ConstantsManager.getInstance().getConstants();
        getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneCannotBeChangedAfterVMInit());
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    updateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    initPriority(vm.getPriority());
}
#method_after
@Override
public void template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getComment().setEntity(vm.getComment());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOsId());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getIsSingleQxlEnabled().setEntity(vm.getSingleQxlPci());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().selectSsoMethod(vm.getSsoMethod());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(isHotSetCpuSupported() || !vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties());
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    Frontend.getInstance().runQuery(VdcQueryType.GetWatchdog, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            @SuppressWarnings("unchecked")
            List<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (watchdogs.isEmpty()) {
                getModel().getWatchdogAction().setSelectedItem(null);
                getModel().getWatchdogModel().setSelectedItem(null);
            } else {
                VmWatchdog vmWatchdog = watchdogs.get(0);
                getModel().getWatchdogAction().setSelectedItem(vmWatchdog.getAction() == null ? null : vmWatchdog.getAction().name().toLowerCase());
                getModel().getWatchdogModel().setSelectedItem(vmWatchdog.getModel() == null ? "" : vmWatchdog.getModel().name());
            }
        }
    }));
    updateConsoleDevice(getVm().getId());
    updateVirtioScsiEnabled(getVm().getId(), getVm().getVmOsId());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getDefaultVncKeyboardLayout());
    Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getMemoryBalloonDeviceEnabled().setEntity((Boolean) ((VdcQueryReturnValue) returnValue).getReturnValue());
        }
    }));
    if (vm.isInitialized()) {
        UIConstants constants = ConstantsManager.getInstance().getConstants();
        getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneCannotBeChangedAfterVMInit());
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    updateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    initPriority(vm.getPriority());
    getModel().setSelectedMigrationDowntime(vm.getMigrationDowntime());
    if (isHotSetCpuSupported()) {
        // cancel related events while fetching data
        getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel());
        getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel());
        getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel());
        AsyncDataProvider.getHostById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                ExistingVmModelBehavior existingVmModelBehavior = (ExistingVmModelBehavior) model;
                runningOnHost = (VDS) returnValue;
                hostCpu = calculateHostCpus();
                existingVmModelBehavior.updateNumOfSockets();
            }
        }), vm.getRunOnVds());
    }
}
#end_block

#method_before
public void initTemplate() {
    setupTemplate(vm, getModel().getTemplate());
}
#method_after
protected void initTemplate() {
    setupTemplate(vm.getVmtGuid(), vm.isUseLatestVersion());
}
#end_block

#method_before
protected void addVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOsId(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), getParameters().getMasterVm().getSingleQxlPci(), VmTemplateStatus.Locked.getValue(), getParameters().getMasterVm().getUsbPolicy().getValue(), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().getCpuShares(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getSsoMethod(), getParameters().getMasterVm().getTunnelMigration(), getParameters().getMasterVm().getVncKeyboardLayout(), getParameters().getMasterVm().getMinAllocatedMem(), getParameters().getMasterVm().isStateless(), getParameters().getMasterVm().isRunAndPause(), getUserId(), getParameters().getTemplateType(), getParameters().getMasterVm().isAutoStartup(), getParameters().getMasterVm().getPriority(), getParameters().getMasterVm().getDefaultDisplayType(), getParameters().getMasterVm().getInitrdUrl(), getParameters().getMasterVm().getKernelUrl(), getParameters().getMasterVm().getKernelParams(), getParameters().getMasterVm().getQuotaId(), getParameters().getMasterVm().getDedicatedVmForVds(), getParameters().getMasterVm().getMigrationSupport(), getParameters().getMasterVm().isAllowConsoleReconnect(), getParameters().getMasterVm().getIsoPath(), getParameters().getMasterVm().getMigrationDowntime(), getParameters().getBaseTemplateId(), getParameters().getTemplateVersionName()));
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#method_after
protected void addVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOsId(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getNumOfMonitors(), getParameters().getMasterVm().getSingleQxlPci(), VmTemplateStatus.Locked.getValue(), getParameters().getMasterVm().getUsbPolicy().getValue(), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().getCpuShares(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getSsoMethod(), getParameters().getMasterVm().getTunnelMigration(), getParameters().getMasterVm().getVncKeyboardLayout(), getParameters().getMasterVm().getMinAllocatedMem(), getParameters().getMasterVm().isStateless(), getParameters().getMasterVm().isRunAndPause(), getUserId(), getParameters().getTemplateType(), getParameters().getMasterVm().isAutoStartup(), getParameters().getMasterVm().getPriority(), getParameters().getMasterVm().getDefaultDisplayType(), getParameters().getMasterVm().getInitrdUrl(), getParameters().getMasterVm().getKernelUrl(), getParameters().getMasterVm().getKernelParams(), getParameters().getMasterVm().getQuotaId(), getParameters().getMasterVm().getDedicatedVmForVds(), getParameters().getMasterVm().getMigrationSupport(), getParameters().getMasterVm().isAllowConsoleReconnect(), getParameters().getMasterVm().getIsoPath(), getParameters().getMasterVm().getMigrationDowntime(), getParameters().getBaseTemplateId(), getParameters().getTemplateVersionName()));
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
    // Load Vm Init from DB and set it to the template
    VmHandler.updateVmInitFromDB(getParameters().getMasterVm(), true);
    getVmTemplate().setVmInit(getParameters().getMasterVm().getVmInit());
    VmHandler.addVmInitToDB(getVmTemplate());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // Set VM to lock status immediately, for reducing race condition.
    VmTemplateHandler.lockVmTemplateInTransaction(getVmTemplateId(), getCompensationContext());
    // if for some reason template doesn't have images, remove it now and not in end action
    final boolean hasImages = imageTemplates.size() > 0;
    if (hasImages) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                if (removeVmTemplateImages()) {
                    setSucceeded(true);
                }
                return null;
            }
        });
    } else {
        HandleEndAction();
    }
}
#method_after
@Override
protected void executeCommand() {
    // Set VM to lock status immediately, for reducing race condition.
    VmTemplateHandler.lockVmTemplateInTransaction(getVmTemplateId(), getCompensationContext());
    // if for some reason template doesn't have images, remove it now and not in end action
    final boolean hasImages = imageTemplates.size() > 0;
    if (hasImages) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                if (removeVmTemplateImages()) {
                    VmHandler.removeVmInitFromDB(getVmTemplate());
                    setSucceeded(true);
                }
                return null;
            }
        });
    } else {
        HandleEndAction();
    }
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + (autoStartup ? 1231 : 1237);
    result = prime * result + cpuPerSocket;
    result = prime * result + ((creationDate == null) ? 0 : creationDate.hashCode());
    result = prime * result + ((defaultBootSequence == null) ? 0 : defaultBootSequence.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + (failBack ? 1231 : 1237);
    result = prime * result + ((initrdUrl == null) ? 0 : initrdUrl.hashCode());
    result = prime * result + ((isoPath == null) ? 0 : isoPath.hashCode());
    result = prime * result + ((kernelParams == null) ? 0 : kernelParams.hashCode());
    result = prime * result + ((kernelUrl == null) ? 0 : kernelUrl.hashCode());
    result = prime * result + osId;
    result = prime * result + memSizeMb;
    result = prime * result + niceLevel;
    result = prime * result + cpuShares;
    result = prime * result + numOfSockets;
    result = prime * result + numOfMonitors;
    result = prime * result + ((origin == null) ? 0 : origin.hashCode());
    result = prime * result + priority;
    result = prime * result + (stateless ? 1231 : 1237);
    result = prime * result + (smartcardEnabled ? 1231 : 1237);
    result = prime * result + ((timeZone == null) ? 0 : timeZone.hashCode());
    result = prime * result + ((usbPolicy == null) ? 0 : usbPolicy.hashCode());
    result = prime * result + ((vdsGroupId == null) ? 0 : vdsGroupId.hashCode());
    result = prime * result + ((vmType == null) ? 0 : vmType.hashCode());
    result = prime * result + ((quotaId == null) ? 0 : quotaId.hashCode());
    result = prime * result + (allowConsoleReconnect ? 1231 : 1237);
    result = prime * result + ((dedicatedVmForVds == null) ? 0 : dedicatedVmForVds.hashCode());
    result = prime * result + ((migrationSupport == null) ? 0 : migrationSupport.hashCode());
    result = prime * result + ((tunnelMigration == null) ? 0 : tunnelMigration.hashCode());
    result = prime * result + ((vncKeyboardLayout == null) ? 0 : vncKeyboardLayout.hashCode());
    result = prime * result + ((createdByUserId == null) ? 0 : createdByUserId.hashCode());
    result = prime * result + ((defaultDisplayType == null) ? 0 : defaultDisplayType.hashCode());
    result = prime * result + ((migrationDowntime == null) ? 0 : migrationDowntime.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + (autoStartup ? 1231 : 1237);
    result = prime * result + cpuPerSocket;
    result = prime * result + ((creationDate == null) ? 0 : creationDate.hashCode());
    result = prime * result + ((defaultBootSequence == null) ? 0 : defaultBootSequence.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + (failBack ? 1231 : 1237);
    result = prime * result + ((initrdUrl == null) ? 0 : initrdUrl.hashCode());
    result = prime * result + ((isoPath == null) ? 0 : isoPath.hashCode());
    result = prime * result + ((kernelParams == null) ? 0 : kernelParams.hashCode());
    result = prime * result + ((kernelUrl == null) ? 0 : kernelUrl.hashCode());
    result = prime * result + osId;
    result = prime * result + memSizeMb;
    result = prime * result + niceLevel;
    result = prime * result + cpuShares;
    result = prime * result + numOfSockets;
    result = prime * result + numOfMonitors;
    result = prime * result + ((origin == null) ? 0 : origin.hashCode());
    result = prime * result + priority;
    result = prime * result + (stateless ? 1231 : 1237);
    result = prime * result + (smartcardEnabled ? 1231 : 1237);
    result = prime * result + ((timeZone == null) ? 0 : timeZone.hashCode());
    result = prime * result + ((usbPolicy == null) ? 0 : usbPolicy.hashCode());
    result = prime * result + ((vdsGroupId == null) ? 0 : vdsGroupId.hashCode());
    result = prime * result + ((vmType == null) ? 0 : vmType.hashCode());
    result = prime * result + ((quotaId == null) ? 0 : quotaId.hashCode());
    result = prime * result + (allowConsoleReconnect ? 1231 : 1237);
    result = prime * result + ((dedicatedVmForVds == null) ? 0 : dedicatedVmForVds.hashCode());
    result = prime * result + ((migrationSupport == null) ? 0 : migrationSupport.hashCode());
    result = prime * result + ((tunnelMigration == null) ? 0 : tunnelMigration.hashCode());
    result = prime * result + ((vncKeyboardLayout == null) ? 0 : vncKeyboardLayout.hashCode());
    result = prime * result + ((createdByUserId == null) ? 0 : createdByUserId.hashCode());
    result = prime * result + ((defaultDisplayType == null) ? 0 : defaultDisplayType.hashCode());
    result = prime * result + ((migrationDowntime == null) ? 0 : migrationDowntime.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof VmBase)) {
        return false;
    }
    VmBase other = (VmBase) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && autoStartup == other.autoStartup && cpuPerSocket == other.cpuPerSocket && ObjectUtils.objectsEqual(creationDate, other.creationDate) && defaultBootSequence == other.defaultBootSequence && ObjectUtils.objectsEqual(description, other.description) && ObjectUtils.objectsEqual(domain, other.domain) && failBack == other.failBack && ObjectUtils.objectsEqual(initrdUrl, other.initrdUrl) && ObjectUtils.objectsEqual(isoPath, other.isoPath) && ObjectUtils.objectsEqual(kernelParams, other.kernelParams) && ObjectUtils.objectsEqual(kernelUrl, other.kernelUrl) && osId == other.osId && memSizeMb == other.memSizeMb && niceLevel == other.niceLevel && numOfSockets == other.numOfSockets && numOfMonitors == other.numOfMonitors && singleQxlPci == other.singleQxlPci && origin == other.origin && priority == other.priority && stateless == other.stateless && smartcardEnabled == other.smartcardEnabled && deleteProtected == other.deleteProtected && ObjectUtils.objectsEqual(timeZone, other.timeZone) && usbPolicy == other.usbPolicy && ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId) && vmType == other.vmType && ObjectUtils.objectsEqual(quotaId, other.quotaId) && allowConsoleReconnect == other.allowConsoleReconnect && ObjectUtils.objectsEqual(dedicatedVmForVds, other.dedicatedVmForVds) && migrationSupport == other.migrationSupport && ObjectUtils.objectsEqual(tunnelMigration, other.tunnelMigration) && ObjectUtils.objectsEqual(vncKeyboardLayout, other.vncKeyboardLayout) && ObjectUtils.objectsEqual(createdByUserId, other.createdByUserId) && cpuShares == other.cpuShares && ObjectUtils.objectsEqual(migrationDowntime, other.migrationDowntime));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof VmBase)) {
        return false;
    }
    VmBase other = (VmBase) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && autoStartup == other.autoStartup && cpuPerSocket == other.cpuPerSocket && ObjectUtils.objectsEqual(creationDate, other.creationDate) && defaultBootSequence == other.defaultBootSequence && ObjectUtils.objectsEqual(description, other.description) && failBack == other.failBack && ObjectUtils.objectsEqual(initrdUrl, other.initrdUrl) && ObjectUtils.objectsEqual(isoPath, other.isoPath) && ObjectUtils.objectsEqual(kernelParams, other.kernelParams) && ObjectUtils.objectsEqual(kernelUrl, other.kernelUrl) && osId == other.osId && memSizeMb == other.memSizeMb && niceLevel == other.niceLevel && numOfSockets == other.numOfSockets && numOfMonitors == other.numOfMonitors && singleQxlPci == other.singleQxlPci && origin == other.origin && priority == other.priority && stateless == other.stateless && smartcardEnabled == other.smartcardEnabled && deleteProtected == other.deleteProtected && ObjectUtils.objectsEqual(timeZone, other.timeZone) && usbPolicy == other.usbPolicy && ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId) && vmType == other.vmType && ObjectUtils.objectsEqual(quotaId, other.quotaId) && allowConsoleReconnect == other.allowConsoleReconnect && ObjectUtils.objectsEqual(dedicatedVmForVds, other.dedicatedVmForVds) && migrationSupport == other.migrationSupport && ObjectUtils.objectsEqual(tunnelMigration, other.tunnelMigration) && ObjectUtils.objectsEqual(vncKeyboardLayout, other.vncKeyboardLayout) && ObjectUtils.objectsEqual(createdByUserId, other.createdByUserId) && cpuShares == other.cpuShares && ObjectUtils.objectsEqual(migrationDowntime, other.migrationDowntime));
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setLastStopTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_stop_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setSsoMethod(SsoMethod.fromString(rs.getString("sso_method")));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setDefaultVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setClusterArch(ArchitectureType.forValue(rs.getInt("architecture")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    entity.setVmPoolSpiceProxy(rs.getString("vm_pool_spice_proxy"));
    entity.setVdsGroupSpiceProxy(rs.getString("vds_group_spice_proxy"));
    entity.setMigrationDowntime((Integer) rs.getObject("migration_downtime"));
    // if template_version_number is null it means use latest version
    entity.setUseLatestVersion(rs.getObject("template_version_number") == VmStaticDAODbFacadeImpl.USE_LATEST_VERSION_NUMBER_INDICATOR);
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setName(rs.getString("vm_name"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setVmOs(rs.getInt("vm_os"));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setComment(rs.getString("vm_comment"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOsId(rs.getInt("vmt_os"));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmFQDN(rs.getString("vm_fqdn"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setLastStopTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_stop_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(getGuid(rs, "console_user_id"));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(getGuid(rs, "run_on_vds"));
    entity.setMigratingToVds(getGuid(rs, "migrating_to_vds"));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(getGuid(rs, "vm_pool_id"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setSsoMethod(SsoMethod.fromString(rs.getString("sso_method")));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(getGuid(rs, "last_vds_run_on"));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(getGuidDefaultEmpty(rs, "storage_pool_id"));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setCpuShares(rs.getInt("cpu_shares"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setDefaultVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    entity.setLastWatchdogEvent(getLong(rs, "last_watchdog_event"));
    entity.setTrustedService(rs.getBoolean("trusted_service"));
    entity.setRunOnce(rs.getBoolean("is_run_once"));
    entity.setCreatedByUserId(getGuid(rs, "created_by_user_id"));
    entity.setCpuName(rs.getString("cpu_name"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setClusterArch(ArchitectureType.forValue(rs.getInt("architecture")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    entity.setVmPoolSpiceProxy(rs.getString("vm_pool_spice_proxy"));
    entity.setVdsGroupSpiceProxy(rs.getString("vds_group_spice_proxy"));
    entity.setMigrationDowntime((Integer) rs.getObject("migration_downtime"));
    // if template_version_number is null it means use latest version
    entity.setUseLatestVersion(rs.getObject("template_version_number") == VmStaticDAODbFacadeImpl.USE_LATEST_VERSION_NUMBER_INDICATOR);
    return entity;
}
#end_block

#method_before
private MapSqlParameterSource getFullParameterSource(VmStatic vm) {
    return getIdParamterSource(vm.getId()).addValue("description", vm.getDescription()).addValue("free_text_comment", vm.getComment()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOsId()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_name", vm.getName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("domain", vm.getDomain()).addValue("creation_date", vm.getCreationDate()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("single_qxl_pci", vm.getSingleQxlPci()).addValue("is_initialized", vm.isInitialized()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("sso_method", vm.getSsoMethod().toString()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("cpu_shares", vm.getCpuShares()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.isAllowConsoleReconnect()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("tunnel_migration", vm.getTunnelMigration()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout()).addValue("is_run_and_pause", vm.isRunAndPause()).addValue("created_by_user_id", vm.getCreatedByUserId()).addValue("instance_type_id", vm.getInstanceTypeId()).addValue("image_type_id", vm.getImageTypeId()).addValue("original_template_name", vm.getOriginalTemplateName()).addValue("original_template_id", vm.getOriginalTemplateGuid()).addValue("migration_downtime", vm.getMigrationDowntime()).addValue("template_version_number", vm.isUseLatestVersion() ? USE_LATEST_VERSION_NUMBER_INDICATOR : DONT_USE_LATEST_VERSION_NUMBER_INDICATOR);
}
#method_after
private MapSqlParameterSource getFullParameterSource(VmStatic vm) {
    return getIdParamterSource(vm.getId()).addValue("description", vm.getDescription()).addValue("free_text_comment", vm.getComment()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOsId()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_name", vm.getName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("creation_date", vm.getCreationDate()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("single_qxl_pci", vm.getSingleQxlPci()).addValue("is_initialized", vm.isInitialized()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("sso_method", vm.getSsoMethod().toString()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("cpu_shares", vm.getCpuShares()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.isAllowConsoleReconnect()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("tunnel_migration", vm.getTunnelMigration()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout()).addValue("is_run_and_pause", vm.isRunAndPause()).addValue("created_by_user_id", vm.getCreatedByUserId()).addValue("instance_type_id", vm.getInstanceTypeId()).addValue("image_type_id", vm.getImageTypeId()).addValue("original_template_name", vm.getOriginalTemplateName()).addValue("original_template_id", vm.getOriginalTemplateGuid()).addValue("migration_downtime", vm.getMigrationDowntime()).addValue("template_version_number", vm.isUseLatestVersion() ? USE_LATEST_VERSION_NUMBER_INDICATOR : DONT_USE_LATEST_VERSION_NUMBER_INDICATOR);
}
#end_block

#method_before
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setName(rs.getString("vm_name"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    // if template_version_number is null it means use latest version
    entity.setUseLatestVersion(rs.getObject("template_version_number") == USE_LATEST_VERSION_NUMBER_INDICATOR);
    return entity;
}
#method_after
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(getGuidDefaultEmpty(rs, "vm_guid"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id"));
    entity.setName(rs.getString("vm_name"));
    entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setSingleQxlPci(rs.getBoolean("single_qxl_pci"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(getGuid(rs, "dedicated_vm_for_vds"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(getGuid(rs, "quota_id"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setInstanceTypeId(Guid.createGuidFromString(rs.getString("instance_type_id")));
    entity.setImageTypeId(Guid.createGuidFromString(rs.getString("image_type_id")));
    entity.setOriginalTemplateName(rs.getString("original_template_name"));
    entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id"));
    // if template_version_number is null it means use latest version
    entity.setUseLatestVersion(rs.getObject("template_version_number") == USE_LATEST_VERSION_NUMBER_INDICATOR);
    return entity;
}
#end_block

#method_before
private HttpURLConnection createURLConnection() throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, KeyManagementException {
    logger.debug(String.format("createURLConnection: getSessionUserGetSessionUserServletURL=%s, sslInsecure=%s, sslNoHostVerification=%s, sslTrustStoreType=%s, sslTrustStorePath=%s, sslProtocol=%s", getSessionUserGetSessionUserServletURL, sslInsecure, sslNoHostVerification, sslTrustStoreType, sslTrustStorePath, sslProtocol));
    URL url = new URL(getSessionUserGetSessionUserServletURL);
    HttpURLConnection servletConnection = (HttpURLConnection) url.openConnection();
    if ("https".equals(url.getProtocol())) {
        TrustManager[] trustManagers;
        if (sslInsecure) {
            trustManagers = new TrustManager[] { new X509TrustManager() {

                @Override
                public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                }

                @Override
                public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                }

                @Override
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[] {};
                }
            } };
        } else {
            if (sslTrustStorePassword == null || sslTrustStorePath == null) {
                throw new RuntimeException("The Supplied URL is secured, however no trust store path or password were supplied.");
            }
            KeyStore trustStore = KeyStore.getInstance(sslTrustStoreType);
            trustStore.load(new FileInputStream(sslTrustStorePath), sslTrustStorePassword.toCharArray());
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(trustStore);
            trustManagers = trustManagerFactory.getTrustManagers();
        }
        SSLContext ctx = SSLContext.getInstance(sslProtocol);
        ctx.init(null, trustManagers, null);
        HttpsURLConnection httpsConnection = (HttpsURLConnection) servletConnection;
        httpsConnection.setSSLSocketFactory(ctx.getSocketFactory());
        if (sslNoHostVerification || sslInsecure) {
            httpsConnection.setHostnameVerifier(new HostnameVerifier() {

                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
        }
    }
    servletConnection.setRequestMethod("POST");
    servletConnection.setDoOutput(true);
    servletConnection.setDoInput(true);
    servletConnection.setReadTimeout(10000);
    servletConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    return servletConnection;
}
#method_after
private HttpURLConnection createURLConnection() throws IOException {
    logger.debug(String.format("createURLConnection: getSessionUserGetSessionUserServletURL=%s, sslInsecure=%s, sslNoHostVerification=%s, sslTrustStoreType=%s, sslTrustStorePath=%s, sslProtocol=%s", getSessionUserGetSessionUserServletURL, sslInsecure, sslNoHostVerification, sslTrustStoreType, sslTrustStorePath, sslProtocol));
    HttpURLConnection servletConnection = (HttpURLConnection) getSessionUserGetSessionUserServletURL.openConnection();
    if ("https".equals(getSessionUserGetSessionUserServletURL.getProtocol())) {
        HttpsURLConnection httpsConnection = (HttpsURLConnection) servletConnection;
        httpsConnection.setSSLSocketFactory(sslctx.getSocketFactory());
        if (sslInsecure || sslNoHostVerification) {
            httpsConnection.setHostnameVerifier(new HostnameVerifier() {

                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });
        }
    }
    servletConnection.setRequestMethod("POST");
    servletConnection.setDoOutput(true);
    servletConnection.setDoInput(true);
    servletConnection.setReadTimeout(10000);
    servletConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    return servletConnection;
}
#end_block

#method_before
public void setGetSessionUserServletURL(String getSessionUserGetSessionUserServletURL) {
    this.getSessionUserGetSessionUserServletURL = getSessionUserGetSessionUserServletURL;
}
#method_after
public void setGetSessionUserServletURL(String getSessionUserGetSessionUserServletURL) throws MalformedURLException {
    this.getSessionUserGetSessionUserServletURL = new URL(getSessionUserGetSessionUserServletURL);
}
#end_block

#method_before
public void copyDetailsFrom(GlusterVolumeAdvancedDetails volumeAdvancedDetails) {
    for (BrickDetails newBrickDetails : volumeAdvancedDetails.getBrickDetails()) {
        Guid newBrickId = newBrickDetails.getBrickProperties().getBrickId();
        if (newBrickId != null) {
            for (BrickDetails brickDetails : getBrickDetails()) {
                if (newBrickId.equals(brickDetails.getBrickProperties().getBrickId())) {
                    copyBrickProperties(newBrickDetails.getBrickProperties(), brickDetails.getBrickProperties());
                    break;
                }
            }
        }
    }
}
#method_after
public void copyDetailsFrom(GlusterVolumeAdvancedDetails volumeAdvancedDetails) {
    setCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    for (BrickDetails newBrickDetails : volumeAdvancedDetails.getBrickDetails()) {
        Guid newBrickId = newBrickDetails.getBrickProperties().getBrickId();
        if (newBrickId != null) {
            for (BrickDetails brickDetails : getBrickDetails()) {
                if (newBrickId.equals(brickDetails.getBrickProperties().getBrickId())) {
                    copyBrickProperties(newBrickDetails.getBrickProperties(), brickDetails.getBrickProperties());
                    break;
                }
            }
        }
    }
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((capacityInfo == null) ? 0 : capacityInfo.hashCode());
    result = prime * result + ((serviceInfo == null) ? 0 : serviceInfo.hashCode());
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((capacityInfo == null) ? 0 : capacityInfo.hashCode());
    result = prime * result + ((serviceInfo == null) ? 0 : serviceInfo.hashCode());
    result = prime * result + ((brickDetails == null) ? 0 : brickDetails.hashCode());
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    GlusterVolumeAdvancedDetails other = (GlusterVolumeAdvancedDetails) obj;
    if (capacityInfo == null) {
        if (other.capacityInfo != null)
            return false;
    } else if (!capacityInfo.equals(other.capacityInfo))
        return false;
    if (serviceInfo == null) {
        if (other.serviceInfo != null)
            return false;
    } else if (!serviceInfo.equals(other.serviceInfo))
        return false;
    if (volumeId == null) {
        if (other.volumeId != null)
            return false;
    } else if (!volumeId.equals(other.volumeId))
        return false;
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterVolumeAdvancedDetails)) {
        return false;
    }
    if (this == obj)
        return true;
    GlusterVolumeAdvancedDetails otherVolumeAdvancedDetails = (GlusterVolumeAdvancedDetails) obj;
    if (!ObjectUtils.objectsEqual(capacityInfo, otherVolumeAdvancedDetails.getCapacityInfo())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(brickDetails, otherVolumeAdvancedDetails.getBrickDetails())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(serviceInfo, otherVolumeAdvancedDetails.getServiceInfo())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(updatedAt, otherVolumeAdvancedDetails.getUpdatedAt())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(volumeId, otherVolumeAdvancedDetails.getVolumeId())) {
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((totalSize == null) ? 0 : totalSize.hashCode());
    result = prime * result + ((freeSize == null) ? 0 : freeSize.hashCode());
    result = prime * result + ((usedSize == null) ? 0 : usedSize.hashCode());
    result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((totalSize == null) ? 0 : totalSize.hashCode());
    result = prime * result + ((freeSize == null) ? 0 : freeSize.hashCode());
    result = prime * result + ((usedSize == null) ? 0 : usedSize.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterVolumeSizeInfo)) {
        return false;
    }
    GlusterVolumeSizeInfo sizeInfo = (GlusterVolumeSizeInfo) obj;
    if (!ObjectUtils.objectsEqual(volumeId, sizeInfo.getVolumeId())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(updatedAt, sizeInfo.getUpdatedAt())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(totalSize, sizeInfo.getTotalSize())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(freeSize, sizeInfo.getFreeSize())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(usedSize, sizeInfo.getUsedSize())) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterVolumeSizeInfo)) {
        return false;
    }
    GlusterVolumeSizeInfo sizeInfo = (GlusterVolumeSizeInfo) obj;
    if (!ObjectUtils.objectsEqual(volumeId, sizeInfo.getVolumeId())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(totalSize, sizeInfo.getTotalSize())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(freeSize, sizeInfo.getFreeSize())) {
        return false;
    }
    if (!ObjectUtils.objectsEqual(usedSize, sizeInfo.getUsedSize())) {
        return false;
    }
    return true;
}
#end_block

#method_before
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterWithClusterEditor = new ListModelTypeAheadListBoxEditor<DataCenterWithCluster>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<DataCenterWithCluster>() {

        @Override
        public String getReplacementStringNullSafe(DataCenterWithCluster data) {
            return // $NON-NLS-1$
            data.getCluster().getName() + "/" + data.getDataCenter().getName();
        }

        @Override
        public String getDisplayStringNullSafe(DataCenterWithCluster data) {
            String dcDescription = data.getDataCenter().getdescription();
            return typeAheadNameDescriptionTemplateNullSafe(data.getCluster().getName(), !StringHelper.isNullOrEmpty(dcDescription) ? dcDescription : data.getDataCenter().getName());
        }
    }, new ModeSwitchingVisibilityRenderer());
    quotaEditor = new ListModelTypeAheadListBoxEditor<Quota>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<Quota>() {

        @Override
        public String getReplacementStringNullSafe(Quota data) {
            return data.getQuotaName();
        }

        @Override
        public String getDisplayStringNullSafe(Quota data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getQuotaName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    templateEditor = new ListModelTypeAheadListBoxEditor<VmTemplate>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<VmTemplate>() {

        @Override
        public String getReplacementStringNullSafe(VmTemplate data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(VmTemplate data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    oSTypeEditor = new ListModelListBoxEditor<Integer>(new AbstractRenderer<Integer>() {

        @Override
        public String render(Integer object) {
            return AsyncDataProvider.getOsName(object);
        }
    }, new ModeSwitchingVisibilityRenderer());
    vmTypeEditor = new ListModelListBoxEditor<VmType>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfSocketsEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    corePerSocketEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<EntityModel<VmPoolType>>(new NullSafeRenderer<EntityModel<VmPoolType>>() {

        @Override
        public String renderNullSafe(EntityModel<VmPoolType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    timeZoneEditor = new ListModelListBoxEditor<TimeZoneModel>(new NullSafeRenderer<TimeZoneModel>() {

        @Override
        public String renderNullSafe(TimeZoneModel timeZone) {
            if (timeZone.isDefault()) {
                return messages.defaultTimeZoneCaption(timeZone.getDisplayValue());
            } else {
                return timeZone.getDisplayValue();
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<EntityModel<DisplayType>>(new NullSafeRenderer<EntityModel<DisplayType>>() {

        @Override
        public String renderNullSafe(EntityModel<DisplayType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    usbSupportEditor = new ListModelListBoxEditor<UsbPolicy>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Integer>(new NullSafeRenderer<Integer>() {

        @Override
        public String renderNullSafe(Integer object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<String>(new AbstractRenderer<String>() {

        final String globalLayout = (String) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayout);

        @Override
        public String render(String object) {
            if (object == null) {
                return messages.globalVncKeyboardLayoutCaption(globalLayout);
            } else {
                return object;
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    isAutoAssignEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("runVmOnHostGroup", new ModeSwitchingVisibilityRenderer());
    defaultHostEditor = new ListModelListBoxEditor<VDS>(new NullSafeRenderer<VDS>() {

        @Override
        public String renderNullSafe(VDS object) {
            return object.getName();
        }
    }, new ModeSwitchingVisibilityRenderer());
    migrationModeEditor = new ListModelListBoxEditor<MigrationSupport>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    // Resource Allocation
    provisioningThinEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    provisioningCloneEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    secondBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    cdImageEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object;
        }
    }, new ModeSwitchingVisibilityRenderer());
    cpuSharesAmountSelectionEditor = new ListModelListBoxOnlyEditor<UnitVmModel.CpuSharesAmount>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
}
#method_after
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterWithClusterEditor = new ListModelTypeAheadListBoxEditor<DataCenterWithCluster>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<DataCenterWithCluster>() {

        @Override
        public String getReplacementStringNullSafe(DataCenterWithCluster data) {
            return // $NON-NLS-1$
            data.getCluster().getName() + "/" + data.getDataCenter().getName();
        }

        @Override
        public String getDisplayStringNullSafe(DataCenterWithCluster data) {
            String dcDescription = data.getDataCenter().getdescription();
            return typeAheadNameDescriptionTemplateNullSafe(data.getCluster().getName(), !StringHelper.isNullOrEmpty(dcDescription) ? dcDescription : data.getDataCenter().getName());
        }
    }, new ModeSwitchingVisibilityRenderer());
    quotaEditor = new ListModelTypeAheadListBoxEditor<Quota>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<Quota>() {

        @Override
        public String getReplacementStringNullSafe(Quota data) {
            return data.getQuotaName();
        }

        @Override
        public String getDisplayStringNullSafe(Quota data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getQuotaName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    templateEditor = new ListModelTypeAheadListBoxEditor<VmTemplate>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<VmTemplate>() {

        @Override
        public String getReplacementStringNullSafe(VmTemplate data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(VmTemplate data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    oSTypeEditor = new ListModelListBoxEditor<Integer>(new AbstractRenderer<Integer>() {

        @Override
        public String render(Integer object) {
            return AsyncDataProvider.getOsName(object);
        }
    }, new ModeSwitchingVisibilityRenderer());
    vmTypeEditor = new ListModelListBoxEditor<VmType>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfSocketsEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    corePerSocketEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<EntityModel<VmPoolType>>(new NullSafeRenderer<EntityModel<VmPoolType>>() {

        @Override
        public String renderNullSafe(EntityModel<VmPoolType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    timeZoneEditor = new ListModelListBoxEditor<TimeZoneModel>(new NullSafeRenderer<TimeZoneModel>() {

        @Override
        public String renderNullSafe(TimeZoneModel timeZone) {
            if (timeZone.isDefault()) {
                return messages.defaultTimeZoneCaption(timeZone.getDisplayValue());
            } else {
                return timeZone.getDisplayValue();
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<EntityModel<DisplayType>>(new NullSafeRenderer<EntityModel<DisplayType>>() {

        @Override
        public String renderNullSafe(EntityModel<DisplayType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    usbSupportEditor = new ListModelListBoxEditor<UsbPolicy>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Integer>(new NullSafeRenderer<Integer>() {

        @Override
        public String renderNullSafe(Integer object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<String>(new VncKeyMapRenderer(messages));
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    isAutoAssignEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("runVmOnHostGroup", new ModeSwitchingVisibilityRenderer());
    defaultHostEditor = new ListModelListBoxEditor<VDS>(new NullSafeRenderer<VDS>() {

        @Override
        public String renderNullSafe(VDS object) {
            return object.getName();
        }
    }, new ModeSwitchingVisibilityRenderer());
    migrationModeEditor = new ListModelListBoxEditor<MigrationSupport>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    overrideMigrationDowntimeEditor = new EntityModelCheckBoxOnlyEditor(new ModeSwitchingVisibilityRenderer(), false);
    migrationDowntimeEditor = new IntegerEntityModelTextBoxOnlyEditor(new ModeSwitchingVisibilityRenderer());
    // Resource Allocation
    provisioningThinEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    provisioningCloneEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    secondBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    cdImageEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object;
        }
    }, new ModeSwitchingVisibilityRenderer());
    cpuSharesAmountSelectionEditor = new ListModelListBoxOnlyEditor<UnitVmModel.CpuSharesAmount>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
}
#end_block

#method_before
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    quotaEditor.setTabIndex(nextTabIndex++);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    templateEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    copyTemplatePermissionsEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    incraseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    maxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    editMaxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    // ==System Tab==
    nextTabIndex = systemTab.setTabIndexes(nextTabIndex);
    memSizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = vcpusAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    domainEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    displayProtocolEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    isSingleQxlEnabledEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    ssoMethodNone.setTabIndex(nextTabIndex++);
    ssoMethodGuestAgent.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    isSoundcardEnabledEditor.setTabIndex(nextTabIndex++);
    isConsoleDeviceEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyOverrideEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    watchdogModelEditor.setTabIndex(nextTabIndex++);
    watchdogActionEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    provisioningEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    cpuSharesAmountEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#method_after
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    quotaEditor.setTabIndex(nextTabIndex++);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    templateEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    copyTemplatePermissionsEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    incraseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    maxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    editMaxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    // ==System Tab==
    nextTabIndex = systemTab.setTabIndexes(nextTabIndex);
    memSizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = vcpusAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    domainEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    displayProtocolEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    isSingleQxlEnabledEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    ssoMethodNone.setTabIndex(nextTabIndex++);
    ssoMethodGuestAgent.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    isSoundcardEnabledEditor.setTabIndex(nextTabIndex++);
    isConsoleDeviceEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyOverrideEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    overrideMigrationDowntimeEditor.setTabIndex(nextTabIndex++);
    migrationDowntimeEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    watchdogModelEditor.setTabIndex(nextTabIndex++);
    watchdogActionEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    provisioningEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    cpuSharesAmountEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#end_block

#method_before
@Override
public void template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getComment().setEntity(vm.getComment());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOsId());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getIsSingleQxlEnabled().setEntity(vm.getSingleQxlPci());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(isHotPlugCpuSupported());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().selectSsoMethod(vm.getSsoMethod());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(isHotPlugCpuSupported());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties());
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    Frontend.getInstance().runQuery(VdcQueryType.GetWatchdog, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            @SuppressWarnings("unchecked")
            List<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (watchdogs.isEmpty()) {
                getModel().getWatchdogAction().setSelectedItem(null);
                getModel().getWatchdogModel().setSelectedItem(null);
            } else {
                VmWatchdog vmWatchdog = watchdogs.get(0);
                getModel().getWatchdogAction().setSelectedItem(vmWatchdog.getAction() == null ? null : vmWatchdog.getAction().name().toLowerCase());
                getModel().getWatchdogModel().setSelectedItem(vmWatchdog.getModel() == null ? "" : vmWatchdog.getModel().name());
            }
        }
    }));
    updateConsoleDevice(getVm().getId());
    updateVirtioScsiEnabled(getVm().getId());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getVncKeyboardLayout());
    Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getMemoryBalloonDeviceEnabled().setEntity((Boolean) ((VdcQueryReturnValue) returnValue).getReturnValue());
        }
    }));
    if (vm.isInitialized()) {
        UIConstants constants = ConstantsManager.getInstance().getConstants();
        getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneCannotBeChangedAfterVMInit());
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    updateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    initPriority(vm.getPriority());
}
#method_after
@Override
public void template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getComment().setEntity(vm.getComment());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOsId());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getIsSingleQxlEnabled().setEntity(vm.getSingleQxlPci());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().selectSsoMethod(vm.getSsoMethod());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(isHotSetCpuSupported() || !vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties());
    getModel().getCpuSharesAmount().setEntity(vm.getCpuShares());
    updateCpuSharesSelection();
    Frontend.getInstance().runQuery(VdcQueryType.GetWatchdog, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            @SuppressWarnings("unchecked")
            List<VmWatchdog> watchdogs = ((VdcQueryReturnValue) returnValue).getReturnValue();
            if (watchdogs.isEmpty()) {
                getModel().getWatchdogAction().setSelectedItem(null);
                getModel().getWatchdogModel().setSelectedItem(null);
            } else {
                VmWatchdog vmWatchdog = watchdogs.get(0);
                getModel().getWatchdogAction().setSelectedItem(vmWatchdog.getAction() == null ? null : vmWatchdog.getAction().name().toLowerCase());
                getModel().getWatchdogModel().setSelectedItem(vmWatchdog.getModel() == null ? "" : vmWatchdog.getModel().name());
            }
        }
    }));
    updateConsoleDevice(getVm().getId());
    updateVirtioScsiEnabled(getVm().getId());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getDefaultVncKeyboardLayout());
    Frontend.getInstance().runQuery(VdcQueryType.IsBalloonEnabled, new IdQueryParameters(getVm().getId()), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object returnValue) {
            getModel().getMemoryBalloonDeviceEnabled().setEntity((Boolean) ((VdcQueryReturnValue) returnValue).getReturnValue());
        }
    }));
    if (vm.isInitialized()) {
        UIConstants constants = ConstantsManager.getInstance().getConstants();
        getModel().getTimeZone().setChangeProhibitionReason(constants.timeZoneCannotBeChangedAfterVMInit());
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    updateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (EntityModel<DisplayType> model : getModel().getDisplayProtocol().getItems()) {
        DisplayType displayType = model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(model);
            break;
        }
    }
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    initPriority(vm.getPriority());
    getModel().setSelectedMigrationDowntime(vm.getMigrationDowntime());
    if (isHotSetCpuSupported()) {
        // cancel related events while fetching data
        getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel());
        getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel());
        getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel());
        AsyncDataProvider.getHostById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object model, Object returnValue) {
                ExistingVmModelBehavior existingVmModelBehavior = (ExistingVmModelBehavior) model;
                runningOnHost = (VDS) returnValue;
                hostCpu = calculateHostCpus();
                existingVmModelBehavior.updateNumOfSockets();
            }
        }), vm.getRunOnVds());
    }
}
#end_block

#method_before
@Override
public void numOfSocketChanged() {
    // changing the architecture is not allowed. the number of sockets is used as the num
    // of virtual cpu to plug/unplug to the VM
    Integer selectedItem = getModel().getNumOfSockets().getSelectedItem();
    Integer selectedItem1 = getModel().getCoresPerSocket().getSelectedItem();
    getModel().getTotalCPUCores().setEntity(Integer.toString(selectedItem * selectedItem1));
}
#method_after
@Override
public void numOfSocketChanged() {
    if (isHotSetCpuSupported()) {
        int numOfSockets = extractIntFromListModel(getModel().getNumOfSockets());
        int coresPerSocket = vm.getCpuPerSocket();
        getModel().getTotalCPUCores().setEntity(Integer.toString(numOfSockets * coresPerSocket));
    } else {
        super.numOfSocketChanged();
    }
}
#end_block

#method_before
@SuppressWarnings({ "unchecked", "incomplete-switch" })
private GlusterVolumeEntity getVolume(Map<String, Object> map) {
    GlusterVolumeEntity volume = new GlusterVolumeEntity();
    volume.setClusterId(clusterId);
    volume.setId(Guid.createGuidFromStringDefaultEmpty((String) map.get(UUID)));
    volume.setName((String) map.get(VOLUME_NAME));
    volume.setVolumeType((String) map.get(VOLUME_TYPE));
    if (volume.getVolumeType() != null) {
        if (volume.getVolumeType().isReplicatedType()) {
            volume.setReplicaCount(Integer.valueOf((String) map.get(REPLICA_COUNT)));
        }
        if (volume.getVolumeType().isStripedType()) {
            volume.setStripeCount(Integer.valueOf((String) map.get(STRIPE_COUNT)));
        }
    }
    for (Object transportType : (Object[]) map.get(TRANSPORT_TYPE)) {
        volume.addTransportType(TransportType.valueOf((String) transportType));
    }
    String volStatus = (String) map.get(VOLUME_STATUS);
    if (volStatus.toUpperCase().equals(VOLUME_STATUS_ONLINE)) {
        volume.setStatus(GlusterStatus.UP);
    } else {
        volume.setStatus(GlusterStatus.DOWN);
    }
    try {
        if (map.get(BRICKS_INFO) != null) {
            volume.setBricks(getBricks(volume.getId(), (Object[]) map.get(BRICKS_INFO), true));
        } else {
            volume.setBricks(getBricks(volume.getId(), (Object[]) map.get(BRICKS), false));
        }
    } catch (Exception e) {
        log.errorFormat("Could not populate bricks of volume {0} on cluster {1}.", volume.getName(), clusterId, e);
    }
    volume.setOptions(getOptions((Map<String, Object>) map.get(OPTIONS)));
    return volume;
}
#method_after
@SuppressWarnings({ "unchecked", "incomplete-switch" })
private GlusterVolumeEntity getVolume(Map<String, Object> map) {
    GlusterVolumeEntity volume = new GlusterVolumeEntity();
    volume.setClusterId(clusterId);
    volume.setId(Guid.createGuidFromStringDefaultEmpty((String) map.get(UUID)));
    volume.setName((String) map.get(VOLUME_NAME));
    volume.setVolumeType((String) map.get(VOLUME_TYPE));
    if (volume.getVolumeType() != null) {
        if (volume.getVolumeType().isReplicatedType()) {
            volume.setReplicaCount(Integer.valueOf((String) map.get(REPLICA_COUNT)));
        }
        if (volume.getVolumeType().isStripedType()) {
            volume.setStripeCount(Integer.valueOf((String) map.get(STRIPE_COUNT)));
        }
    }
    for (Object transportType : (Object[]) map.get(TRANSPORT_TYPE)) {
        volume.addTransportType(TransportType.valueOf((String) transportType));
    }
    String volStatus = (String) map.get(VOLUME_STATUS);
    if (volStatus.toUpperCase().equals(VOLUME_STATUS_ONLINE)) {
        volume.setStatus(GlusterStatus.UP);
    } else {
        volume.setStatus(GlusterStatus.DOWN);
    }
    try {
        if (map.get(BRICKS_INFO) != null && ((Object[]) map.get(BRICKS_INFO)).length > 0) {
            volume.setBricks(getBricks(volume.getId(), (Object[]) map.get(BRICKS_INFO), true));
        } else {
            volume.setBricks(getBricks(volume.getId(), (Object[]) map.get(BRICKS), false));
        }
    } catch (Exception e) {
        log.errorFormat("Could not populate bricks of volume {0} on cluster {1}.", volume.getName(), clusterId, e);
    }
    volume.setOptions(getOptions((Map<String, Object>) map.get(OPTIONS)));
    return volume;
}
#end_block

#method_before
private GlusterBrickEntity getBrick(Guid clusterId, Guid volumeId, String brickInfo, int brickOrder) {
    String[] brickParts = brickInfo.split(":", -1);
    if (brickParts.length != 2) {
        throw new RuntimeException("Invalid brick representation [" + brickInfo + "]");
    }
    String hostnameOrIp = brickParts[0];
    String brickDir = brickParts[1];
    VdsStatic server = dbUtils.getServer(clusterId, hostnameOrIp);
    if (server == null) {
        log.errorFormat("Could not add brick {0} to volume {1} - server {2} not found in cluster {3}", brickInfo, volumeId, hostnameOrIp, clusterId);
        return null;
    }
    return getBrickEntity(clusterId, volumeId, brickOrder, server, brickDir);
}
#method_after
private GlusterBrickEntity getBrick(Guid clusterId, Guid volumeId, String brickInfo, int brickOrder) {
    String[] brickParts = brickInfo.split(":", -1);
    if (brickParts.length != 2) {
        throw new RuntimeException("Invalid brick representation [" + brickInfo + "]");
    }
    String hostnameOrIp = brickParts[0];
    String brickDir = brickParts[1];
    VdsStatic server = dbUtils.getServer(clusterId, hostnameOrIp);
    if (server == null) {
        log.warnFormat("Could not add brick {0} to volume {1} - server {2} not found in cluster {3}", brickInfo, volumeId, hostnameOrIp, clusterId);
        return null;
    }
    return getBrickEntity(clusterId, volumeId, brickOrder, server, brickDir);
}
#end_block

#method_before
private GlusterBrickEntity getBrick(Guid clusterId, Guid volumeId, Map<String, Object> brickInfoMap, int brickOrder) {
    String brickName = (String) brickInfoMap.get(NAME);
    String[] brickParts = brickName.split(":", -1);
    if (brickParts.length != 2) {
        throw new RuntimeException("Invalid brick representation [" + brickName + "]");
    }
    String hostUuid = (String) brickInfoMap.get(UUID);
    String brickDir = brickParts[1];
    GlusterServer glusterServer = dbUtils.getServerByUuid(Guid.createGuidFromString(hostUuid));
    if (glusterServer == null) {
        log.errorFormat("Could not add brick {0} to volume {1} - server uuid {2} not found in cluster {3}", brickName, volumeId, hostUuid, clusterId);
        return null;
    }
    VdsStatic server = DbFacade.getInstance().getVdsStaticDao().get(glusterServer.getId());
    return getBrickEntity(clusterId, volumeId, brickOrder, server, brickDir);
}
#method_after
private GlusterBrickEntity getBrick(Guid clusterId, Guid volumeId, Map<String, Object> brickInfoMap, int brickOrder) {
    String brickName = (String) brickInfoMap.get(NAME);
    String[] brickParts = brickName.split(":", -1);
    if (brickParts.length != 2) {
        throw new RuntimeException("Invalid brick representation [" + brickName + "]");
    }
    String hostUuid = (String) brickInfoMap.get(HOST_UUID);
    String brickDir = brickParts[1];
    GlusterServer glusterServer = dbUtils.getServerByUuid(Guid.createGuidFromString(hostUuid));
    if (glusterServer == null) {
        log.warnFormat("Could not add brick {0} to volume {1} - server uuid {2} not found in cluster {3}", brickName, volumeId, hostUuid, clusterId);
        return null;
    }
    VdsStatic server = DbFacade.getInstance().getVdsStaticDao().get(glusterServer.getId());
    return getBrickEntity(clusterId, volumeId, brickOrder, server, brickDir);
}
#end_block

#method_before
@Override
public boolean authenticate(String name, char[] password) {
    return true;
}
#method_after
@Override
public AuthenticationResult<?> authenticate(String name, String password) {
    return new NopAuthenticationResult();
}
#end_block

#method_before
@Override
public Directory create(File file, Configuration config) {
    // Get the name of the directory:
    String name = config.getInheritedString(NAME_PARAMETER);
    if (name == null) {
        log.error("The configuration file \"{}\" doesn't contain the name of the directory.", file.getAbsolutePath());
        return null;
    }
    // We are good, create the directory:
    return new NopDirectory(name);
}
#method_after
@Override
public Directory create(Configuration config) throws ConfigurationException {
    // Get the name of the directory:
    String name = config.getInheritedString(NAME_PARAMETER);
    if (name == null) {
        throw new ConfigurationException("The configuration file \"" + config.getFile().getAbsolutePath() + "\" doesn't contain the name of " + "the directory.");
    }
    // We are good, create the directory:
    return new NopDirectory(name);
}
#end_block

#method_before
@Override
public DirectoryUser findUser(String name) {
    ExternalId id = new ExternalId(name.getBytes());
    return new DirectoryUser(this, id, name);
}
#method_after
@Override
public DirectoryUser findUser(String name) {
    ExternalId id = null;
    try {
        id = new ExternalId(name.getBytes("UTF-8"));
    } catch (UnsupportedEncodingException e) {
        return null;
    }
    return new DirectoryUser(this, id, name);
}
#end_block

#method_before
@Override
public DirectoryUser findUser(ExternalId id) {
    String name = new String(id.getBytes());
    return new DirectoryUser(this, id, name);
}
#method_after
@Override
public DirectoryUser findUser(ExternalId id) {
    String name = null;
    try {
        name = new String(id.getBytes(), "UTF-8");
    } catch (UnsupportedEncodingException e) {
        return null;
    }
    return new DirectoryUser(this, id, name);
}
#end_block

#method_before
@Override
public Authenticator create(File file, Configuration config) {
    // Get the name of the authenticator:
    String name = config.getInheritedString(NAME_PARAMETER);
    if (name == null) {
        log.error("The configuration file \"{}\" doesn't contain the name of the authenticator.", file.getAbsolutePath());
        return null;
    }
    // We are good, create the authenticator:
    return new NopAuthenticator(name);
}
#method_after
@Override
public Authenticator create(Configuration config) throws ConfigurationException {
    return new NopAuthenticator();
}
#end_block

#method_before
public String getGroupIds() {
    List<ExternalId> ids = new ArrayList<ExternalId>(mGroups.size());
    for (LdapGroup group : mGroups.values()) {
        ExternalId id = group.getid();
        if (id != null) {
            ids.add(id);
        }
    }
    StringBuilder buffer = new StringBuilder();
    for (int i = 0; i < ids.size(); i++) {
        if (i > 0) {
            buffer.append(',');
        }
        ExternalId id = ids.get(i);
        buffer.append(id);
    }
    return buffer.toString();
}
#method_after
public String getGroupIds() {
    StringBuilder sb = new StringBuilder();
    boolean first = true;
    for (LdapGroup group : mGroups.values()) {
        if (first) {
            first = false;
        } else {
            sb.append(",");
        }
        sb.append(group.getid());
    }
    return sb.toString();
}
#end_block

#method_before
@Override
protected void syncSearch() {
    // allow only a single user lookup at a time
    if ((Boolean) getSearchInProgress().getEntity()) {
        return;
    }
    getSearchInProgress().setEntity(true);
    super.syncSearch();
    // var exclude = ExcludeItems != null ? ExcludeItems.Cast<DbUser>() : new List<DbUser>();
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.setHandleFailure(true);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            AdElementListModel adElementListModel = (AdElementListModel) model;
            VdcQueryReturnValue queryReturnValue = (VdcQueryReturnValue) ReturnValue;
            if (handleQueryError(queryReturnValue, adElementListModel)) {
                return;
            }
            setusers(new ArrayList<EntityModel>());
            addUsersToModel(queryReturnValue, getExcludeUsers());
            onUserAndAdGroupsLoaded(adElementListModel);
        }
    };
    findUsers(// $NON-NLS-1$
    "allnames=" + // $NON-NLS-1$
    (StringHelper.isNullOrEmpty(getSearchString()) ? "*" : getSearchString()), _asyncQuery);
    _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.setHandleFailure(true);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            AdElementListModel adElementListModel = (AdElementListModel) model;
            VdcQueryReturnValue queryReturnValue = (VdcQueryReturnValue) ReturnValue;
            if (handleQueryError(queryReturnValue, adElementListModel)) {
                return;
            }
            HashSet<Guid> excludeUsers = new HashSet<Guid>();
            if (adElementListModel.getExcludeItems() != null) {
                for (Object item : adElementListModel.getExcludeItems()) {
                    DbUser a = (DbUser) item;
                    excludeUsers.add(a.getId());
                }
            }
            adElementListModel.setgroups(new ArrayList<EntityModel>());
            for (IVdcQueryable item : (ArrayList<IVdcQueryable>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()) {
                LdapGroup a = (LdapGroup) item;
                if (!excludeUsers.contains(a.getid())) {
                    DbUser tempVar3 = new DbUser();
                    tempVar3.setExternalId(a.getid());
                    tempVar3.setFirstName(a.getname());
                    // $NON-NLS-1$
                    tempVar3.setLastName("");
                    // $NON-NLS-1$
                    tempVar3.setLoginName("");
                    tempVar3.setDomain(a.getdomain());
                    DbUser user = tempVar3;
                    EntityModel tempVar4 = new EntityModel();
                    tempVar4.setEntity(user);
                    adElementListModel.getgroups().add(tempVar4);
                }
            }
            onUserAndAdGroupsLoaded(adElementListModel);
        }
    };
    findGroups(// $NON-NLS-1$ //$NON-NLS-2$
    "name=" + (StringHelper.isNullOrEmpty(getSearchString()) ? "*" : getSearchString()), _asyncQuery);
}
#method_after
@Override
protected void syncSearch() {
    // allow only a single user lookup at a time
    if ((Boolean) getSearchInProgress().getEntity()) {
        return;
    }
    getSearchInProgress().setEntity(true);
    super.syncSearch();
    // var exclude = ExcludeItems != null ? ExcludeItems.Cast<DbUser>() : new List<DbUser>();
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.setHandleFailure(true);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            AdElementListModel adElementListModel = (AdElementListModel) model;
            VdcQueryReturnValue queryReturnValue = (VdcQueryReturnValue) ReturnValue;
            if (handleQueryError(queryReturnValue, adElementListModel)) {
                return;
            }
            setusers(new ArrayList<EntityModel>());
            addUsersToModel(queryReturnValue, getExcludeUsers());
            onUserAndAdGroupsLoaded(adElementListModel);
        }
    };
    findUsers(// $NON-NLS-1$
    "allnames=" + // $NON-NLS-1$
    (StringHelper.isNullOrEmpty(getSearchString()) ? "*" : getSearchString()), _asyncQuery);
    _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.setHandleFailure(true);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            AdElementListModel adElementListModel = (AdElementListModel) model;
            VdcQueryReturnValue queryReturnValue = (VdcQueryReturnValue) ReturnValue;
            if (handleQueryError(queryReturnValue, adElementListModel)) {
                return;
            }
            HashSet<ExternalId> excludeUsers = new HashSet<ExternalId>();
            if (adElementListModel.getExcludeItems() != null) {
                for (Object item : adElementListModel.getExcludeItems()) {
                    DbUser a = (DbUser) item;
                    excludeUsers.add(a.getExternalId());
                }
            }
            adElementListModel.setgroups(new ArrayList<EntityModel>());
            for (IVdcQueryable item : (ArrayList<IVdcQueryable>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()) {
                LdapGroup a = (LdapGroup) item;
                if (!excludeUsers.contains(a.getid())) {
                    DbUser tempVar3 = new DbUser();
                    tempVar3.setExternalId(a.getid());
                    tempVar3.setFirstName(a.getname());
                    // $NON-NLS-1$
                    tempVar3.setLastName("");
                    // $NON-NLS-1$
                    tempVar3.setLoginName("");
                    tempVar3.setDomain(a.getdomain());
                    DbUser user = tempVar3;
                    EntityModel tempVar4 = new EntityModel();
                    tempVar4.setEntity(user);
                    adElementListModel.getgroups().add(tempVar4);
                }
            }
            onUserAndAdGroupsLoaded(adElementListModel);
        }
    };
    findGroups(// $NON-NLS-1$ //$NON-NLS-2$
    "name=" + (StringHelper.isNullOrEmpty(getSearchString()) ? "*" : getSearchString()), _asyncQuery);
}
#end_block

#method_before
protected void addUsersToModel(VdcQueryReturnValue returnValue, Set<Guid> excludeUsers) {
    for (IVdcQueryable item : (ArrayList<IVdcQueryable>) returnValue.getReturnValue()) {
        LdapUser a = (LdapUser) item;
        if (!excludeUsers.contains(a.getUserId())) {
            EntityModel tempVar2 = new EntityModel();
            tempVar2.setEntity(new DbUser(a));
            getusers().add(tempVar2);
        }
    }
}
#method_after
protected void addUsersToModel(VdcQueryReturnValue returnValue, Set<ExternalId> excludeUsers) {
    for (IVdcQueryable item : (ArrayList<IVdcQueryable>) returnValue.getReturnValue()) {
        LdapUser a = (LdapUser) item;
        if (!excludeUsers.contains(a.getUserId())) {
            EntityModel tempVar2 = new EntityModel();
            tempVar2.setEntity(new DbUser(a));
            getusers().add(tempVar2);
        }
    }
}
#end_block

#method_before
protected Set<Guid> getExcludeUsers() {
    Set<Guid> excludeUsers = new HashSet<Guid>();
    if (getExcludeItems() != null) {
        for (Object item : getExcludeItems()) {
            DbUser a = (DbUser) item;
            excludeUsers.add(a.getId());
        }
    }
    return excludeUsers;
}
#method_after
protected Set<ExternalId> getExcludeUsers() {
    Set<ExternalId> excludeUsers = new HashSet<ExternalId>();
    if (getExcludeItems() != null) {
        for (Object item : getExcludeItems()) {
            DbUser a = (DbUser) item;
            excludeUsers.add(a.getExternalId());
        }
    }
    return excludeUsers;
}
#end_block

#method_before
protected void findGroups(String searchString, AsyncQuery query) {
    // $NON-NLS-1$ //$NON-NLS-2$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("ADGROUP@" + getDomain().getSelectedItem() + ": " + searchString, SearchType.AdGroup), query);
}
#method_after
protected void findGroups(String searchString, AsyncQuery query) {
    // $NON-NLS-1$ //$NON-NLS-2$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("ADGROUP@" + getDomain().getSelectedItem() + ": " + searchString, SearchType.AdGroup), query);
}
#end_block

#method_before
protected void findUsers(String searchString, AsyncQuery query) {
    // $NON-NLS-1$ //$NON-NLS-2$
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters("ADUSER@" + getDomain().getSelectedItem() + ": " + searchString, SearchType.AdUser), query);
}
#method_after
protected void findUsers(String searchString, AsyncQuery query) {
    // $NON-NLS-1$ //$NON-NLS-2$
    Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters("ADUSER@" + getDomain().getSelectedItem() + ": " + searchString, SearchType.AdUser), query);
}
#end_block

#method_before
private boolean handleQueryError(VdcQueryReturnValue returnValue, AdElementListModel model) {
    model.setMessage(null);
    if (!returnValue.getSucceeded()) {
        model.setMessage(Frontend.getAppErrorsTranslator().TranslateErrorTextSingle(returnValue.getExceptionString()));
        getSearchInProgress().setEntity(false);
        return true;
    }
    return false;
}
#method_after
private boolean handleQueryError(VdcQueryReturnValue returnValue, AdElementListModel model) {
    model.setMessage(null);
    if (!returnValue.getSucceeded()) {
        model.setMessage(Frontend.getInstance().getAppErrorsTranslator().translateErrorTextSingle(returnValue.getExceptionString()));
        getSearchInProgress().setEntity(false);
        return true;
    }
    return false;
}
#end_block

#method_before
protected void verifyModel(Group model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertArrayEquals(EXTERNAL_IDS[index].getBytes(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
    assertNotNull(model.getDomain());
    verifyLinks(model);
}
#method_after
protected void verifyModel(Group model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertEquals(EXTERNAL_IDS[index].toHex(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
    assertNotNull(model.getDomain());
    verifyLinks(model);
}
#end_block

#method_before
protected <E> void setUpGetEntityExpectations(VdcQueryType query, Class<? extends VdcQueryParametersBase> clz, String[] names, Object[] values, E entity) throws Exception {
    VdcQueryReturnValue queryResult = control.createMock(VdcQueryReturnValue.class);
    expect(backend.RunQuery(eq(query), eqQueryParams(clz, addSession(names), addSession(values)))).andReturn(queryResult);
    expect(queryResult.getSucceeded()).andReturn(true).anyTimes();
    expect(queryResult.getReturnValue()).andReturn(entity).anyTimes();
}
#method_after
protected <E> void setUpGetEntityExpectations(VdcQueryType query, Class<? extends VdcQueryParametersBase> clz, String[] names, Object[] values, E entity) throws Exception {
    VdcQueryReturnValue queryResult = control.createMock(VdcQueryReturnValue.class);
    expect(backend.runQuery(eq(query), eqQueryParams(clz, addSession(names), addSession(values)))).andReturn(queryResult);
    expect(queryResult.getSucceeded()).andReturn(true).anyTimes();
    expect(queryResult.getReturnValue()).andReturn(entity).anyTimes();
}
#end_block

#method_before
protected <E> void setUpGetEntityExpectations(String query, SearchType type, E entity) throws Exception {
    VdcQueryReturnValue queryResult = control.createMock(VdcQueryReturnValue.class);
    SearchParameters params = new SearchParameters(query, type);
    expect(backend.RunQuery(eq(VdcQueryType.Search), eqSearchParams(params))).andReturn(queryResult);
    expect(queryResult.getSucceeded()).andReturn(true).anyTimes();
    List<E> entities = new ArrayList<E>();
    entities.add(entity);
    expect(queryResult.getReturnValue()).andReturn(entities).anyTimes();
}
#method_after
protected <E> void setUpGetEntityExpectations(String query, SearchType type, E entity) throws Exception {
    VdcQueryReturnValue queryResult = control.createMock(VdcQueryReturnValue.class);
    SearchParameters params = new SearchParameters(query, type);
    expect(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).andReturn(queryResult);
    expect(queryResult.getSucceeded()).andReturn(true).anyTimes();
    List<E> entities = new ArrayList<E>();
    entities.add(entity);
    expect(queryResult.getReturnValue()).andReturn(entities).anyTimes();
}
#end_block

#method_before
protected void setUpEntityQueryExpectations(VdcQueryType query, Class<? extends VdcQueryParametersBase> queryClass, String[] queryNames, Object[] queryValues, Object queryReturn, Object failure) {
    VdcQueryReturnValue queryResult = control.createMock(VdcQueryReturnValue.class);
    expect(queryResult.getSucceeded()).andReturn(failure == null).anyTimes();
    if (failure == null) {
        expect(queryResult.getReturnValue()).andReturn(queryReturn).anyTimes();
    } else {
        if (failure instanceof String) {
            expect(queryResult.getExceptionString()).andReturn((String) failure).anyTimes();
            setUpL10nExpectations((String) failure);
        } else if (failure instanceof Exception) {
            expect(queryResult.getExceptionString()).andThrow((Exception) failure).anyTimes();
        }
    }
    if (queryClass == GetPermissionsForObjectParameters.class) {
        expect(backend.RunQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult).anyTimes();
    } else {
        expect(backend.RunQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult);
    }
}
#method_after
protected void setUpEntityQueryExpectations(VdcQueryType query, Class<? extends VdcQueryParametersBase> queryClass, String[] queryNames, Object[] queryValues, Object queryReturn, Object failure) {
    VdcQueryReturnValue queryResult = control.createMock(VdcQueryReturnValue.class);
    expect(queryResult.getSucceeded()).andReturn(failure == null).anyTimes();
    if (failure == null) {
        expect(queryResult.getReturnValue()).andReturn(queryReturn).anyTimes();
    } else {
        if (failure instanceof String) {
            expect(queryResult.getExceptionString()).andReturn((String) failure).anyTimes();
            setUpL10nExpectations((String) failure);
        } else if (failure instanceof Exception) {
            expect(queryResult.getExceptionString()).andThrow((Exception) failure).anyTimes();
        }
    }
    if (queryClass == GetPermissionsForObjectParameters.class) {
        expect(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult).anyTimes();
    } else {
        expect(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult);
    }
}
#end_block

#method_before
protected UriInfo setUpActionExpectations(VdcActionType task, Class<? extends VdcActionParametersBase> clz, String[] names, Object[] values, boolean canDo, boolean success, Object taskReturn, ArrayList<Guid> asyncTasks, ArrayList<AsyncTaskStatus> asyncStatuses, Guid jobId, JobExecutionStatus jobStatus, String baseUri, boolean replay, String errorMessage) {
    VdcReturnValueBase result = control.createMock(VdcReturnValueBase.class);
    expect(result.getCanDoAction()).andReturn(canDo).anyTimes();
    if (canDo) {
        expect(result.getSucceeded()).andReturn(success).anyTimes();
        if (success) {
            if (taskReturn != null) {
                expect(result.getActionReturnValue()).andReturn(taskReturn).anyTimes();
            }
        } else {
            expect(result.getExecuteFailedMessages()).andReturn(asList(FAILURE)).anyTimes();
            setUpL10nExpectations(asList(FAILURE));
        }
    } else {
        expect(result.getCanDoActionMessages()).andReturn(asList(errorMessage)).anyTimes();
        setUpL10nExpectations(asList(errorMessage));
    }
    expect(backend.RunAction(eq(task), eqActionParams(clz, addSession(names), addSession(values)))).andReturn(result);
    VdcQueryReturnValue monitorResult = control.createMock(VdcQueryReturnValue.class);
    expect(monitorResult.getSucceeded()).andReturn(success).anyTimes();
    expect(result.getHasAsyncTasks()).andReturn(asyncTasks != null || jobId != null).anyTimes();
    // simulate polling on async task's statuses, and/or job status.
    setAsyncTaskStatusExpectations(asyncTasks, asyncStatuses, monitorResult, result);
    setJobStatusExpectations(jobId, jobStatus, monitorResult, result);
    UriInfo uriInfo = setUpBasicUriExpectations();
    if (baseUri != null) {
        expect(uriInfo.getPath()).andReturn(baseUri).anyTimes();
    }
    if (replay) {
        control.replay();
    }
    return uriInfo;
}
#method_after
protected UriInfo setUpActionExpectations(VdcActionType task, Class<? extends VdcActionParametersBase> clz, String[] names, Object[] values, boolean canDo, boolean success, Object taskReturn, ArrayList<Guid> asyncTasks, ArrayList<AsyncTaskStatus> asyncStatuses, Guid jobId, JobExecutionStatus jobStatus, String baseUri, boolean replay, String errorMessage) {
    VdcReturnValueBase result = control.createMock(VdcReturnValueBase.class);
    expect(result.getCanDoAction()).andReturn(canDo).anyTimes();
    if (canDo) {
        expect(result.getSucceeded()).andReturn(success).anyTimes();
        if (success) {
            if (taskReturn != null) {
                expect(result.getActionReturnValue()).andReturn(taskReturn).anyTimes();
            }
        } else {
            expect(result.getExecuteFailedMessages()).andReturn(asList(FAILURE)).anyTimes();
            setUpL10nExpectations(asList(FAILURE));
        }
    } else {
        expect(result.getCanDoActionMessages()).andReturn(asList(errorMessage)).anyTimes();
        setUpL10nExpectations(asList(errorMessage));
    }
    expect(backend.runAction(eq(task), eqActionParams(clz, addSession(names), addSession(values)))).andReturn(result);
    VdcQueryReturnValue monitorResult = control.createMock(VdcQueryReturnValue.class);
    expect(monitorResult.getSucceeded()).andReturn(success).anyTimes();
    expect(result.getHasAsyncTasks()).andReturn(asyncTasks != null || jobId != null).anyTimes();
    // simulate polling on async task's statuses, and/or job status.
    setAsyncTaskStatusExpectations(asyncTasks, asyncStatuses, monitorResult, result);
    setJobStatusExpectations(jobId, jobStatus, monitorResult, result);
    UriInfo uriInfo = setUpBasicUriExpectations();
    if (baseUri != null) {
        expect(uriInfo.getPath()).andReturn(baseUri).anyTimes();
    }
    if (replay) {
        control.replay();
    }
    return uriInfo;
}
#end_block

#method_before
protected void verifyLinks(BaseResource model) {
    assertNotNull(model.getHref());
    assertTrue(model.getHref().startsWith("/api"));
    for (Link link : model.getLinks()) {
        assertTrue(link.getHref().startsWith("/api"));
    }
}
#method_after
protected void verifyLinks(BaseResource model) {
    assertNotNull(model.getHref());
    assertTrue(model.getHref().startsWith("/ovirt-engine/api"));
    for (Link link : model.getLinks()) {
        assertTrue(link.getHref().startsWith("/ovirt-engine/api"));
    }
}
#end_block

#method_before
private void setAsyncTaskStatusExpectations(ArrayList<Guid> asyncTasks, ArrayList<AsyncTaskStatus> asyncStatuses, VdcQueryReturnValue monitorResult, VdcReturnValueBase result) {
    if (asyncTasks != null) {
        expect(result.getVdsmTaskIdList()).andReturn(asyncTasks).anyTimes();
        expect(monitorResult.getReturnValue()).andReturn(asyncStatuses).anyTimes();
        expect(backend.RunQuery(eq(VdcQueryType.GetTasksStatusesByTasksIDs), eqQueryParams(GetTasksStatusesByTasksIDsParameters.class, addSession(new String[] {}), addSession(new Object[] {})))).andReturn(monitorResult);
    }
}
#method_after
private void setAsyncTaskStatusExpectations(ArrayList<Guid> asyncTasks, ArrayList<AsyncTaskStatus> asyncStatuses, VdcQueryReturnValue monitorResult, VdcReturnValueBase result) {
    if (asyncTasks != null) {
        expect(result.getVdsmTaskIdList()).andReturn(asyncTasks).anyTimes();
        expect(monitorResult.getReturnValue()).andReturn(asyncStatuses).anyTimes();
        expect(backend.runQuery(eq(VdcQueryType.GetTasksStatusesByTasksIDs), eqQueryParams(GetTasksStatusesByTasksIDsParameters.class, addSession(new String[] {}), addSession(new Object[] {})))).andReturn(monitorResult);
    }
}
#end_block

#method_before
private void setJobStatusExpectations(Guid jobId, JobExecutionStatus jobStatus, VdcQueryReturnValue monitorResult, VdcReturnValueBase result) {
    expect(result.getJobId()).andReturn(jobId).anyTimes();
    if (jobId != null) {
        Job jobMock = control.createMock(org.ovirt.engine.core.common.job.Job.class);
        expect(jobMock.getStatus()).andReturn(jobStatus);
        expect(monitorResult.getReturnValue()).andReturn(jobMock).anyTimes();
        expect(backend.RunQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(IdQueryParameters.class, addSession(new String[] { "Id" }), addSession(new Object[] { jobId })))).andReturn(monitorResult);
    }
}
#method_after
private void setJobStatusExpectations(Guid jobId, JobExecutionStatus jobStatus, VdcQueryReturnValue monitorResult, VdcReturnValueBase result) {
    expect(result.getJobId()).andReturn(jobId).anyTimes();
    if (jobId != null) {
        Job jobMock = control.createMock(org.ovirt.engine.core.common.job.Job.class);
        expect(jobMock.getStatus()).andReturn(jobStatus);
        expect(monitorResult.getReturnValue()).andReturn(jobMock).anyTimes();
        expect(backend.runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(IdQueryParameters.class, addSession(new String[] { "Id" }), addSession(new Object[] { jobId })))).andReturn(monitorResult);
    }
}
#end_block

#method_before
public static List<String> getDomainsList(boolean filterInternalDomain) {
    String[] domains = Config.<String>GetValue(ConfigValues.DomainName).split("[,]", -1);
    List<String> results = new ArrayList<String>();
    for (String domain : domains) {
        String trimmedDomain = domain.trim();
        if (!trimmedDomain.isEmpty()) {
            results.add(trimmedDomain);
        }
    }
    if (!filterInternalDomain) {
        results.add(Config.<String>GetValue(ConfigValues.AdminDomain).trim());
    }
    return results;
}
#method_after
public static List<String> getDomainsList(boolean filterInternalDomain) {
    String[] domains = Config.<String>getValue(ConfigValues.DomainName).split("[,]", -1);
    List<String> results = new ArrayList<String>();
    for (String domain : domains) {
        String trimmedDomain = domain.trim();
        if (!trimmedDomain.isEmpty()) {
            results.add(trimmedDomain);
        }
    }
    if (!filterInternalDomain) {
        results.add(Config.<String>getValue(ConfigValues.AdminDomain).trim());
    }
    return results;
}
#end_block

#method_before
public static List<GroupSearchResult> performGroupQuery(String loginName, String password, String domainName, LdapQueryData queryData) {
    LdapCredentials ldapCredentials = new LdapCredentials(LdapBrokerUtils.modifyLoginNameForKerberos(loginName, domainName), password);
    DirectorySearcher directorySearcher = new DirectorySearcher(ldapCredentials);
    try {
        List<GroupSearchResult> searchResults = (List<GroupSearchResult>) directorySearcher.FindAll(queryData);
        return searchResults;
    } catch (DomainNotConfiguredException ex) {
        log.errorFormat("User {0} from domain {1} is a member of a group from {2} which is not configured. Please use the manage domains utility if you wish to add this domain.", loginName, domainName, queryData.getDomain());
        return null;
    }
}
#method_after
public static List<GroupSearchResult> performGroupQuery(String loginName, String password, String domainName, LdapQueryData queryData) {
    LdapCredentials ldapCredentials = new LdapCredentials(LdapBrokerUtils.modifyLoginNameForKerberos(loginName, domainName), password);
    DirectorySearcher directorySearcher = new DirectorySearcher(ldapCredentials);
    try {
        List<GroupSearchResult> searchResults = (List<GroupSearchResult>) directorySearcher.findAll(queryData);
        return searchResults;
    } catch (DomainNotConfiguredException ex) {
        log.errorFormat("User {0} from domain {1} is a member of a group from {2} which is not configured. Please use the manage domains utility if you wish to add this domain.", loginName, domainName, queryData.getDomain());
        return null;
    }
}
#end_block

#method_before
public static void addLdapConfigValues(Hashtable<String, String> env) {
    env.put("com.sun.jndi.ldap.read.timeout", Long.toString(Config.<Integer>GetValue(ConfigValues.LDAPQueryTimeout) * 1000));
    env.put("com.sun.jndi.ldap.connect.timeout", Long.toString(Config.<Integer>GetValue(ConfigValues.LDAPConnectTimeout) * 1000));
}
#method_after
public static void addLdapConfigValues(Hashtable<String, String> env) {
    env.put("com.sun.jndi.ldap.read.timeout", Long.toString(Config.<Integer>getValue(ConfigValues.LDAPQueryTimeout) * 1000));
    env.put("com.sun.jndi.ldap.connect.timeout", Long.toString(Config.<Integer>getValue(ConfigValues.LDAPConnectTimeout) * 1000));
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    permissions perm = getParameters().getPermission();
    if (perm == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_PERMISSION_NOT_SENT);
        return false;
    }
    Role role = getRoleDao().get(perm.getrole_id());
    Guid adElementId = perm.getad_element_id();
    if (role == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_ROLE_ID);
        return false;
    }
    if (perm.getObjectType() == null || getVdcObjectName() == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_OBJECT_ID);
        return false;
    }
    // give permission
    if (getParameters().getUser() == null && getParameters().getGroup() == null && getDbUserDAO().get(adElementId) == null && getAdGroupDAO().get(adElementId) == null) {
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.USER_MUST_EXIST_IN_DB.toString());
        return false;
    }
    // only system super user can give permissions with admin roles
    if (!isSystemSuperUser() && role.getType() == RoleType.ADMIN) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_GIVE_ADMIN_ROLES);
        return false;
    }
    // don't allow adding permissions to vms from pool externally
    if (!isInternalExecution() && perm.getObjectType() == VdcObjectType.VM) {
        VM vm = getVmDAO().get(perm.getObjectId());
        if (vm != null && vm.getVmPoolId() != null) {
            addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_VM_IN_POOL);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    Permissions perm = getParameters().getPermission();
    if (perm == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_PERMISSION_NOT_SENT);
        return false;
    }
    Role role = getRoleDao().get(perm.getrole_id());
    Guid adElementId = perm.getad_element_id();
    if (role == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_ROLE_ID);
        return false;
    }
    if (perm.getObjectType() == null || getVdcObjectName() == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_OBJECT_ID);
        return false;
    }
    // give permission
    if (getParameters().getUser() == null && getParameters().getGroup() == null && getDbUserDAO().get(adElementId) == null && getAdGroupDAO().get(adElementId) == null) {
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.USER_MUST_EXIST_IN_DB.toString());
        return false;
    }
    // only system super user can give permissions with admin roles
    if (!isSystemSuperUser() && role.getType() == RoleType.ADMIN) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_GIVE_ADMIN_ROLES);
        return false;
    }
    // don't allow adding permissions to vms from pool externally
    if (!isInternalExecution() && perm.getObjectType() == VdcObjectType.VM) {
        VM vm = getVmDAO().get(perm.getObjectId());
        if (vm != null && vm.getVmPoolId() != null) {
            addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_VM_IN_POOL);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // Get the parameters:
    T parameters = getParameters();
    // The user or group given in the parameters may haven't been added to
    // the database yet, this will be the case if they don't have an
    // internal identifier, if this is the case then they need to be
    // added to the database now, before the permission:
    final DbUser user = parameters.getUser();
    if (user != null && user.getId() == null) {
        user.setId(Guid.newGuid());
        getDbUserDAO().save(user);
    }
    final DbGroup group = parameters.getGroup();
    if (group != null && group.getId() == null) {
        group.setId(Guid.newGuid());
        getAdGroupDAO().save(group);
    }
    // The identifier of the owner of the permission can come from the
    // parameters directly or from the user/group objects:
    Guid ownerId = parameters.getPermission().getad_element_id();
    if (ownerId == null) {
        if (user != null) {
            ownerId = user.getId();
        }
    }
    if (ownerId == null) {
        if (group != null) {
            ownerId = group.getId();
        }
    }
    final permissions paramPermission = parameters.getPermission();
    permissions permission = getPermissionDAO().getForRoleAndAdElementAndObject(paramPermission.getrole_id(), ownerId, paramPermission.getObjectId());
    if (permission == null) {
        paramPermission.setId(Guid.newGuid());
        paramPermission.setad_element_id(ownerId);
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getPermissionDAO().save(paramPermission);
                getCompensationContext().snapshotNewEntity(paramPermission);
                getCompensationContext().stateChanged();
                return null;
            }
        });
        permission = paramPermission;
    }
    getReturnValue().setActionReturnValue(permission.getId());
    if (user != null) {
        updateAdminStatus(permission);
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    // Get the parameters:
    T parameters = getParameters();
    // The user or group given in the parameters may haven't been added to
    // the database yet, this will be the case if they don't have an
    // internal identifier, if this is the case then they need to be
    // added to the database now, before the permission:
    final DbUser user = parameters.getUser();
    if (user != null && user.getId() == null) {
        user.setId(Guid.newGuid());
        getDbUserDAO().save(user);
    }
    final DbGroup group = parameters.getGroup();
    if (group != null && group.getId() == null) {
        group.setId(Guid.newGuid());
        getAdGroupDAO().save(group);
    }
    // The identifier of the owner of the permission can come from the parameters directly or from the user/group
    // objects:
    Guid ownerId = parameters.getPermission().getad_element_id();
    if (ownerId == null) {
        if (user != null) {
            ownerId = user.getId();
        }
        if (ownerId == null) {
            if (group != null) {
                ownerId = group.getId();
            }
        }
    }
    final Permissions paramPermission = parameters.getPermission();
    Permissions permission = getPermissionDAO().getForRoleAndAdElementAndObject(paramPermission.getrole_id(), ownerId, paramPermission.getObjectId());
    if (permission == null) {
        paramPermission.setId(Guid.newGuid());
        paramPermission.setad_element_id(ownerId);
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getPermissionDAO().save(paramPermission);
                getCompensationContext().snapshotNewEntity(paramPermission);
                getCompensationContext().stateChanged();
                return null;
            }
        });
        permission = paramPermission;
    }
    getReturnValue().setActionReturnValue(permission.getId());
    if (user != null) {
        updateAdminStatus(permission);
    }
    setSucceeded(true);
}
#end_block

#method_before
private void updateAdminStatus(permissions perm) {
    // if the role of the permission is of type admin update the user
    // lastAdminCheckStatus to true
    Role role = getRoleDao().get(perm.getrole_id());
    if (role.getType() == RoleType.ADMIN) {
        MultiLevelAdministrationHandler.setIsAdminGUIFlag(perm.getad_element_id(), true);
    }
}
#method_after
private void updateAdminStatus(Permissions perm) {
    // if the role of the permission is of type admin update the user
    // lastAdminCheckStatus to true
    Role role = getRoleDao().get(perm.getrole_id());
    if (role.getType() == RoleType.ADMIN) {
        MultiLevelAdministrationHandler.setIsAdminGUIFlag(perm.getad_element_id(), true);
    }
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    permissions permission = getParameters().getPermission();
    List<PermissionSubject> permissionsSubject = new ArrayList<>();
    permissionsSubject.add(new PermissionSubject(permission.getObjectId(), permission.getObjectType(), getActionType().getActionGroup()));
    initUserAndGroupData();
    // user from the directory service
    if (getParameters().getUser() != null && _dbUser == null) {
        permissionsSubject.add(new PermissionSubject(MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, VdcObjectType.System, VdcActionType.AddUser.getActionGroup()));
    }
    return permissionsSubject;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    Permissions permission = getParameters().getPermission();
    List<PermissionSubject> permissionsSubject = new ArrayList<>();
    permissionsSubject.add(new PermissionSubject(permission.getObjectId(), permission.getObjectType(), getActionType().getActionGroup()));
    initUserAndGroupData();
    // user from the directory service
    if (getParameters().getUser() != null && _dbUser == null) {
        permissionsSubject.add(new PermissionSubject(MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, VdcObjectType.System, VdcActionType.AddUser.getActionGroup()));
    }
    return permissionsSubject;
}
#end_block

#method_before
protected void verifyModel(User model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertArrayEquals(EXTERNAL_IDS[index].getBytes(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
    assertNotNull(model.getDomain());
    assertTrue(model.isSetGroups());
    assertEquals(PARSED_GROUPS.length, model.getGroups().getGroups().size());
    for (int i = 0; i < PARSED_GROUPS.length; i++) {
        Group group = model.getGroups().getGroups().get(i);
        assertEquals(PARSED_GROUPS[i], group.getName());
    }
    verifyLinks(model);
}
#method_after
protected void verifyModel(User model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertEquals(EXTERNAL_IDS[index].toHex(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
    assertNotNull(model.getDomain());
    assertTrue(model.isSetGroups());
    assertEquals(PARSED_GROUPS.length, model.getGroups().getGroups().size());
    for (int i = 0; i < PARSED_GROUPS.length; i++) {
        Group group = model.getGroups().getGroups().get(i);
        assertEquals(PARSED_GROUPS[i], group.getName());
    }
    verifyLinks(model);
}
#end_block

#method_before
@Override
protected void executeQuery(DirectorySearcher directorySearcher) {
    LdapUser user;
    LdapQueryData queryData = new LdapQueryDataImpl();
    queryData.setFilterParameters(new Object[] { getUserId() });
    queryData.setLdapQueryType(LdapQueryType.getUserByGuid);
    queryData.setDomain(getDomain());
    Object searchResult = directorySearcher.FindOne(queryData);
    user = populateUserData((LdapUser) searchResult, getDomain());
    if (user != null) {
        GroupsDNQueryGenerator generator = createGroupsGeneratorForUser(user);
        List<LdapQueryData> partialQueries = generator.getLdapQueriesData();
        for (LdapQueryData partialQuery : partialQueries) {
            PopulateGroup(partialQuery, getDomain(), user.getGroups(), getLoginName(), getPassword());
        }
    }
    setReturnValue(user);
    setSucceeded(true);
}
#method_after
@Override
protected void executeQuery(DirectorySearcher directorySearcher) {
    LdapUser user;
    LdapQueryData queryData = new LdapQueryDataImpl();
    queryData.setFilterParameters(new Object[] { getUserId() });
    queryData.setLdapQueryType(LdapQueryType.getUserByGuid);
    queryData.setDomain(getDomain());
    Object searchResult = directorySearcher.findOne(queryData);
    user = populateUserData((LdapUser) searchResult, getDomain());
    if (user != null) {
        GroupsDNQueryGenerator generator = createGroupsGeneratorForUser(user);
        List<LdapQueryData> partialQueries = generator.getLdapQueriesData();
        for (LdapQueryData partialQuery : partialQueries) {
            populateGroup(partialQuery, getDomain(), user.getGroups(), getLoginName(), getPassword());
        }
    }
    setReturnValue(user);
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // Get the name of the directory and the identifier of the user from
    // the parameters:
    String directory = getParameters().getDirectory();
    ExternalId id = getParameters().getId();
    // Check that the user is available in the directory (and save the
    // reference to avoid looking it up later when actually adding the
    // user to the database):
    directoryUser = (LdapUser) LdapFactory.getInstance(directory).RunAdAction(AdActionType.GetAdUserByUserId, new LdapSearchByIdParameters(directory, id)).getReturnValue();
    if (directoryUser == null) {
        addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
        return false;
    }
    // Populate information for the audit log:
    addCustomValue("NewUserName", directoryUser.getUserName());
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    // Get the name of the directory and the identifier of the user from the parameters:
    String directory = getParameters().getDirectory();
    ExternalId id = getParameters().getId();
    // Check that the user is available in the directory (and save the reference to avoid looking it up later when
    // actually adding the user to the database):
    directoryUser = (LdapUser) LdapFactory.getInstance(directory).runAdAction(AdActionType.GetAdUserByUserId, new LdapSearchByIdParameters(directory, id)).getReturnValue();
    if (directoryUser == null) {
        addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
        return false;
    }
    // Populate information for the audit log:
    addCustomValue("NewUserName", directoryUser.getUserName());
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // First check if the user is already in the database, if it is we
    // need to update, if not we need to insert:
    DbUserDAO dao = getDbUserDAO();
    DbUser dbUser = dao.getByExternalId(directoryUser.getDepartment(), directoryUser.getUserId());
    if (dbUser == null) {
        dbUser = new DbUser(directoryUser);
        dbUser.setId(Guid.newGuid());
        dao.save(dbUser);
    } else {
        Guid id = dbUser.getId();
        dbUser = new DbUser(directoryUser);
        dbUser.setId(id);
        dao.update(dbUser);
    }
    // Return the identifier of the created user:
    setActionReturnValue(dbUser.getId());
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    DbUserDAO dao = getDbUserDAO();
    // First check if the user is already in the database, if it is we need to update, if not we need to insert:
    DbUser dbUser = dao.getByExternalId(directoryUser.getDomainControler(), directoryUser.getUserId());
    if (dbUser == null) {
        dbUser = new DbUser(directoryUser);
        dbUser.setId(Guid.newGuid());
        dao.save(dbUser);
    } else {
        Guid id = dbUser.getId();
        dbUser = new DbUser(directoryUser);
        dbUser.setId(id);
        dao.update(dbUser);
    }
    // Return the identifier of the created user:
    setActionReturnValue(dbUser.getId());
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void verifyModel(Group model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertArrayEquals(EXTERNAL_IDS[index].getBytes(), model.getExternalId());
    assertEquals(GROUP_NAMES[index], model.getName());
    assertNotNull(model.getDomain());
    assertEquals(new Guid(DOMAIN.getBytes(), true).toString(), model.getDomain().getId());
    verifyLinks(model);
}
#method_after
@Override
protected void verifyModel(Group model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertEquals(EXTERNAL_IDS[index].toHex(), model.getExternalId());
    assertEquals(GROUP_NAMES[index], model.getName());
    assertNotNull(model.getDomain());
    assertEquals(new Guid(DOMAIN.getBytes(), true).toString(), model.getDomain().getId());
    verifyLinks(model);
}
#end_block

#method_before
public void init() {
    if (!initialized) {
        log.info("Start initializing " + getClass().getSimpleName());
        int mRefreshRate = Config.<Integer>GetValue(ConfigValues.UserRefreshRate);
        jobId = SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(this, "OnTimer", new Class[] {}, new Object[] {}, 0, mRefreshRate, TimeUnit.SECONDS);
        initialized = true;
        log.info("Finished initializing " + getClass().getSimpleName());
    }
}
#method_after
public void init() {
    if (!initialized) {
        log.info("Start initializing " + getClass().getSimpleName());
        int mRefreshRate = Config.<Integer>getValue(ConfigValues.UserRefreshRate);
        jobId = SchedulerUtilQuartzImpl.getInstance().scheduleAFixedDelayJob(this, "onTimer", new Class[] {}, new Object[] {}, 0, mRefreshRate, TimeUnit.SECONDS);
        initialized = true;
        log.info("Finished initializing " + getClass().getSimpleName());
    }
}
#end_block

#method_before
@Override
protected void finalize() throws Throwable {
    Dispose();
}
#method_after
@Override
protected void finalize() throws Throwable {
    dispose();
}
#end_block

#method_before
private static void updateDBUserFromADUser(DbUser dbUser, LdapUser ldapUser, HashSet<Guid> updatedUsers) {
    boolean succeeded = false;
    if (ldapUser == null || !ldapUser.getUserId().equals(dbUser.getExternalId())) {
        if (dbUser.getStatus() != 0) {
            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
            dbUser.setStatus(0);
            succeeded = true;
        }
    } else {
        if (dbUser.getStatus() == 0) {
            log.warnFormat("Inactive User {0} found in directory server, its status switched to Active", dbUser.getFirstName());
            dbUser.setStatus(1);
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getFirstName(), ldapUser.getName())) {
            dbUser.setFirstName(ldapUser.getName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLastName(), ldapUser.getSurName())) {
            dbUser.setLastName(ldapUser.getSurName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getDomain(), ldapUser.getDomainControler())) {
            dbUser.setDomain(ldapUser.getDomainControler());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLoginName(), ldapUser.getUserName())) {
            dbUser.setLoginName(ldapUser.getUserName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupNames(), ldapUser.getGroup())) {
            dbUser.setGroupNames(ldapUser.getGroup());
            succeeded = true;
            updatedUsers.add(dbUser.getId());
        }
        if (!StringUtils.equals(dbUser.getDepartment(), ldapUser.getDepartment())) {
            dbUser.setDepartment(ldapUser.getDepartment());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getRole(), ldapUser.getTitle())) {
            dbUser.setRole(ldapUser.getTitle());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getEmail(), ldapUser.getEmail())) {
            dbUser.setEmail(ldapUser.getEmail());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupIds(), ldapUser.getGroupIds())) {
            dbUser.setGroupIds(ldapUser.getGroupIds());
            succeeded = true;
        }
        if (succeeded) {
            dbUser.setStatus(dbUser.getStatus() + 1);
        }
    }
    if (succeeded) {
        DbFacade.getInstance().getDbUserDao().update(dbUser);
    }
}
#method_after
private static void updateDBUserFromADUser(DbUser dbUser, LdapUser ldapUser, HashSet<Guid> updatedUsers) {
    boolean succeeded = false;
    if (ldapUser == null || !ldapUser.getUserId().equals(dbUser.getExternalId())) {
        if (dbUser.isActive()) {
            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
            dbUser.setActive(false);
            succeeded = true;
        }
    } else {
        if (!dbUser.isActive()) {
            log.warnFormat("Inactive User {0} found in directory server, its status switched to Active", dbUser.getFirstName());
            dbUser.setActive(true);
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getFirstName(), ldapUser.getName())) {
            dbUser.setFirstName(ldapUser.getName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLastName(), ldapUser.getSurName())) {
            dbUser.setLastName(ldapUser.getSurName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getDomain(), ldapUser.getDomainControler())) {
            dbUser.setDomain(ldapUser.getDomainControler());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getLoginName(), ldapUser.getUserName())) {
            dbUser.setLoginName(ldapUser.getUserName());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupNames(), ldapUser.getGroup())) {
            dbUser.setGroupNames(ldapUser.getGroup());
            succeeded = true;
            updatedUsers.add(dbUser.getId());
        }
        if (!StringUtils.equals(dbUser.getDepartment(), ldapUser.getDepartment())) {
            dbUser.setDepartment(ldapUser.getDepartment());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getRole(), ldapUser.getTitle())) {
            dbUser.setRole(ldapUser.getTitle());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getEmail(), ldapUser.getEmail())) {
            dbUser.setEmail(ldapUser.getEmail());
            succeeded = true;
        }
        if (!StringUtils.equals(dbUser.getGroupIds(), ldapUser.getGroupIds())) {
            dbUser.setGroupIds(ldapUser.getGroupIds());
            succeeded = true;
        }
    }
    if (succeeded) {
        DbFacade.getInstance().getDbUserDao().update(dbUser);
    }
}
#end_block

#method_before
public void refreshAllUserData(List<DbGroup> updatedGroups) {
    try {
        log.info("Start refreshing all users data");
        List<DbUser> allUsers = DbFacade.getInstance().getDbUserDao().getAll();
        List<String> domainsList = LdapBrokerUtils.getDomainsList(true);
        List<DbUser> filteredUsers = LinqUtils.filter(allUsers, new UsersPerDomainPredicate(domainsList));
        Map<String, Map<ExternalId, DbUser>> userByDomains = new HashMap<>();
        // Filter all users by domains
        for (DbUser user : filteredUsers) {
            Map<ExternalId, DbUser> domainUser;
            if (!userByDomains.containsKey(user.getDomain())) {
                domainUser = new HashMap<ExternalId, DbUser>();
                userByDomains.put(user.getDomain(), domainUser);
            } else {
                domainUser = userByDomains.get(user.getDomain());
            }
            domainUser.put(user.getExternalId(), user);
        }
        if (userByDomains.size() != 0) {
            // Refresh users in each domain separately
            for (Map.Entry<String, Map<ExternalId, DbUser>> entry : userByDomains.entrySet()) {
                String domain = entry.getKey();
                Collection<DbUser> users = entry.getValue().values();
                List<ExternalId> ids = new ArrayList<>(users.size());
                for (DbUser user : users) {
                    ids.add(user.getExternalId());
                }
                List<LdapUser> adUsers = (List<LdapUser>) LdapFactory.getInstance(domain).RunAdAction(AdActionType.GetAdUserByUserIdList, new LdapSearchByUserIdListParameters(domain, ids, false)).getReturnValue();
                HashSet<Guid> updatedUsers = new HashSet<Guid>();
                if (adUsers == null) {
                    log.warn("No users returned from directory server during refresh users");
                } else {
                    List<LdapGroup> ldapUpdatedGroups = new ArrayList<>(updatedGroups.size());
                    for (DbGroup dbGroup : updatedGroups) {
                        LdapGroup ldapGroup = new LdapGroup(dbGroup);
                        ldapUpdatedGroups.add(ldapGroup);
                    }
                    LdapBrokerUtils.performGroupPopulationForUsers(adUsers, domain, ldapUpdatedGroups);
                    for (LdapUser adUser : adUsers) {
                        updateDBUserFromADUser(userByDomains.get(domain).get(adUser.getUserId()), adUser, updatedUsers);
                        userByDomains.get(domain).remove(adUser.getUserId());
                    }
                }
                Collection<DbUser> usersForDomain = entry.getValue().values();
                if (usersForDomain == null) {
                    log.warnFormat("No users for domain {0}", domain);
                } else {
                    for (DbUser dbUser : usersForDomain) {
                        if (dbUser.getStatus() != 0) {
                            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
                            dbUser.setStatus(AsyncTaskStatusEnum.unknown.getValue());
                            DbFacade.getInstance().getDbUserDao().update(dbUser);
                        }
                    }
                }
                // group or role was changed
                if (updatedUsers.size() > 0) {
                    DbFacade.getInstance().updateLastAdminCheckStatus(updatedUsers.toArray(new Guid[updatedUsers.size()]));
                }
            }
        }
    } catch (RuntimeException e) {
        log.error("Failed to refresh users data.", e);
    }
}
#method_after
public void refreshAllUserData(List<DbGroup> updatedGroups) {
    try {
        log.info("Start refreshing all users data");
        List<DbUser> allUsers = DbFacade.getInstance().getDbUserDao().getAll();
        List<String> domainsList = LdapBrokerUtils.getDomainsList(true);
        List<DbUser> filteredUsers = LinqUtils.filter(allUsers, new UsersPerDomainPredicate(domainsList));
        Map<String, Map<ExternalId, DbUser>> userByDomains = new HashMap<>();
        // Map all users by domains
        for (DbUser user : filteredUsers) {
            Map<ExternalId, DbUser> domainUser;
            if (!userByDomains.containsKey(user.getDomain())) {
                domainUser = new HashMap<>();
                userByDomains.put(user.getDomain(), domainUser);
            } else {
                domainUser = userByDomains.get(user.getDomain());
            }
            domainUser.put(user.getExternalId(), user);
        }
        if (userByDomains.size() != 0) {
            // Refresh users in each domain separately
            for (Map.Entry<String, Map<ExternalId, DbUser>> entry : userByDomains.entrySet()) {
                String domain = entry.getKey();
                Collection<DbUser> users = entry.getValue().values();
                List<ExternalId> ids = new ArrayList<>(users.size());
                for (DbUser user : users) {
                    ids.add(user.getExternalId());
                }
                List<LdapUser> adUsers = (List<LdapUser>) LdapFactory.getInstance(domain).runAdAction(AdActionType.GetAdUserByUserIdList, new LdapSearchByUserIdListParameters(domain, ids, false)).getReturnValue();
                HashSet<Guid> updatedUsers = new HashSet<Guid>();
                if (adUsers == null) {
                    log.warn("No users returned from directory server during refresh users");
                } else {
                    List<LdapGroup> ldapUpdatedGroups = new ArrayList<>(updatedGroups.size());
                    for (DbGroup dbGroup : updatedGroups) {
                        LdapGroup ldapGroup = new LdapGroup(dbGroup);
                        ldapUpdatedGroups.add(ldapGroup);
                    }
                    LdapBrokerUtils.performGroupPopulationForUsers(adUsers, domain, ldapUpdatedGroups);
                    for (LdapUser adUser : adUsers) {
                        updateDBUserFromADUser(userByDomains.get(domain).get(adUser.getUserId()), adUser, updatedUsers);
                        userByDomains.get(domain).remove(adUser.getUserId());
                    }
                }
                Collection<DbUser> usersForDomain = entry.getValue().values();
                if (usersForDomain == null) {
                    log.warnFormat("No users for domain {0}", domain);
                } else {
                    for (DbUser dbUser : usersForDomain) {
                        if (dbUser.isActive()) {
                            log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName());
                            dbUser.setActive(false);
                            DbFacade.getInstance().getDbUserDao().update(dbUser);
                        }
                    }
                }
                // group or role was changed
                if (updatedUsers.size() > 0) {
                    DbFacade.getInstance().updateLastAdminCheckStatus(updatedUsers.toArray(new Guid[updatedUsers.size()]));
                }
            }
        }
    } catch (RuntimeException e) {
        log.error("Failed to refresh users data.", e);
    }
}
#end_block

#method_before
private static List<DbGroup> updateGroups() {
    List<DbGroup> groups = DbFacade.getInstance().getDbGroupDao().getAll();
    for (DbGroup group : groups) {
        // following code should not occur
        if (group.getDomain() == null && group.getName().contains("@")) {
            StringBuilder logMsg = new StringBuilder();
            logMsg.append("domain name for ad group ").append(group.getName()).append(" is null. This should not occur, please check that domain name is passed correctly from client");
            log.warn(logMsg.toString());
            String partAfterAtSign = group.getName().split("[@]", -1)[1];
            String newDomainName = partAfterAtSign;
            if (partAfterAtSign.contains("/")) {
                String partPreviousToSlashSign = partAfterAtSign.split("[/]", -1)[0];
                newDomainName = partPreviousToSlashSign;
            }
            group.setDomain(newDomainName);
        }
        // to fetch for them
        if (group.getDomain() != null && !group.getDomain().isEmpty()) {
            if (UsersDomainsCacheManagerService.getInstance().getDomain(group.getDomain()) == null) {
                log.errorFormat("Cannot query for group {0} from domain {1} because the domain is not configured. Please use the manage domains utility if you wish to add this domain.", group.getName(), group.getDomain());
            } else {
                LdapGroup groupFromAD = (LdapGroup) LdapFactory.getInstance(group.getDomain()).RunAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(group.getDomain(), group.getExternalId())).getReturnValue();
                if (// Active
                group.getStatus() == 1 && (groupFromAD == null || groupFromAD.getstatus() == LdapRefStatus.Inactive)) {
                    // Inactive
                    group.setStatus(0);
                } else if (groupFromAD != null && (!StringUtils.equals(group.getName(), groupFromAD.getname()) || group.getStatus() != groupFromAD.getstatus().getValue() || !StringUtils.equals(group.getDistinguishedName(), groupFromAD.getDistinguishedName()))) {
                    group = new DbGroup(groupFromAD);
                }
                DbFacade.getInstance().getDbGroupDao().update(group);
                // memberOf is not persistent and should be set in the returned groups list from the LDAP queries
                if (groupFromAD != null) {
                    group.setMemberOf(groupFromAD.getMemberOf());
                }
            }
        }
    }
    return groups;
}
#method_after
private static List<DbGroup> updateGroups() {
    List<DbGroup> groups = DbFacade.getInstance().getDbGroupDao().getAll();
    for (DbGroup group : groups) {
        // following code should not occur
        if (group.getDomain() == null && group.getName().contains("@")) {
            StringBuilder logMsg = new StringBuilder();
            logMsg.append("domain name for ad group ").append(group.getName()).append(" is null. This should not occur, please check that domain name is passed correctly from client");
            log.warn(logMsg.toString());
            String partAfterAtSign = group.getName().split("[@]", -1)[1];
            String newDomainName = partAfterAtSign;
            if (partAfterAtSign.contains("/")) {
                String partPreviousToSlashSign = partAfterAtSign.split("[/]", -1)[0];
                newDomainName = partPreviousToSlashSign;
            }
            group.setDomain(newDomainName);
        }
        // to fetch for them
        if (group.getDomain() != null && !group.getDomain().isEmpty()) {
            if (UsersDomainsCacheManagerService.getInstance().getDomain(group.getDomain()) == null) {
                log.errorFormat("Cannot query for group {0} from domain {1} because the domain is not configured. Please use the manage domains utility if you wish to add this domain.", group.getName(), group.getDomain());
            } else {
                LdapGroup groupFromAD = (LdapGroup) LdapFactory.getInstance(group.getDomain()).runAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(group.getDomain(), group.getExternalId())).getReturnValue();
                if (group.isActive() && (groupFromAD == null || !groupFromAD.isActive())) {
                    group.setActive(false);
                } else if (groupFromAD != null && (!StringUtils.equals(group.getName(), groupFromAD.getname()) || group.isActive() != groupFromAD.isActive() || !StringUtils.equals(group.getDistinguishedName(), groupFromAD.getDistinguishedName()))) {
                    group = new DbGroup(groupFromAD);
                }
                DbFacade.getInstance().getDbGroupDao().update(group);
                // memberOf is not persistent and should be set in the returned groups list from the LDAP queries
                if (groupFromAD != null) {
                    group.setMemberOf(new HashSet<>(groupFromAD.getMemberOf()));
                }
            }
        }
    }
    return groups;
}
#end_block

#method_before
@Override
protected void executeQuery(DirectorySearcher directorySearcher) {
    Object group = null;
    LdapQueryData queryData = new LdapQueryDataImpl();
    queryData.setFilterParameters(new Object[] { getGroupId() });
    queryData.setLdapQueryType(LdapQueryType.getGroupByGuid);
    queryData.setDomain(getDomain());
    Object searchResult = directorySearcher.FindOne(queryData);
    if (searchResult != null) {
        GroupSearchResult result = (GroupSearchResult) searchResult;
        ExternalId groupId = result.getId();
        if (ObjectUtils.notEqual(getGroupId(), groupId)) {
            /**
             * Cannot find group - group is Inactive
             */
            group = new LdapGroup(getGroupId());
        } else {
            String distinguishedName = result.getDistinguishedName();
            List<String> memberOf = result.getMemberOf();
            String groupName = LdapBrokerUtils.generateGroupDisplayValue(distinguishedName);
            group = new LdapGroup(groupId, groupName, getDomain(), distinguishedName, memberOf);
        }
    }
    setReturnValue(group);
    setSucceeded(true);
}
#method_after
@Override
protected void executeQuery(DirectorySearcher directorySearcher) {
    Object group = null;
    LdapQueryData queryData = new LdapQueryDataImpl();
    queryData.setFilterParameters(new Object[] { getGroupId() });
    queryData.setLdapQueryType(LdapQueryType.getGroupByGuid);
    queryData.setDomain(getDomain());
    Object searchResult = directorySearcher.findOne(queryData);
    if (searchResult != null) {
        GroupSearchResult result = (GroupSearchResult) searchResult;
        ExternalId groupId = result.getId();
        if (ObjectUtils.notEqual(getGroupId(), groupId)) {
            /**
             * Cannot find group - group is Inactive
             */
            group = new LdapGroup(getGroupId());
        } else {
            String distinguishedName = result.getDistinguishedName();
            List<String> memberOf = result.getMemberOf();
            String groupName = LdapBrokerUtils.generateGroupDisplayValue(distinguishedName);
            group = new LdapGroup(groupId, groupName, getDomain(), distinguishedName, memberOf);
        }
    }
    setReturnValue(group);
    setSucceeded(true);
}
#end_block

#method_before
private void PopulateUsers() {
    List<LdapQueryData> queries = GenerateUsersQuery();
    List<LdapUser> results = new ArrayList<LdapUser>();
    for (LdapQueryData queryData : queries) {
        java.util.ArrayList<LdapUser> tempUsers = (java.util.ArrayList<LdapUser>) LdapFactory.getInstance(getDomain()).RunAdAction(AdActionType.SearchUserByQuery, new LdapSearchByQueryParameters(getParameters().getSessionId(), getDomain(), queryData)).getReturnValue();
        if (tempUsers != null) {
            results.addAll(tempUsers);
        }
    }
    setReturnValue(results);
}
#method_after
private void PopulateUsers() {
    List<LdapQueryData> queries = GenerateUsersQuery();
    List<LdapUser> results = new ArrayList<LdapUser>();
    for (LdapQueryData queryData : queries) {
        java.util.ArrayList<LdapUser> tempUsers = (java.util.ArrayList<LdapUser>) LdapFactory.getInstance(getDomain()).runAdAction(AdActionType.SearchUserByQuery, new LdapSearchByQueryParameters(getParameters().getSessionId(), getDomain(), queryData)).getReturnValue();
        if (tempUsers != null) {
            results.addAll(tempUsers);
        }
    }
    setReturnValue(results);
}
#end_block

#method_before
public void setMemberOf(List<String> memberOf) {
    this.memberOf = memberOf;
}
#method_after
public void setMemberOf(Set<String> memberOf) {
    this.memberOf = memberOf;
}
#end_block

#method_before
public List<String> getMemberOf() {
    return memberOf;
}
#method_after
public Set<String> getMemberOf() {
    return memberOf;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((externalId == null) ? 0 : externalId.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + status;
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((externalId == null) ? 0 : externalId.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + (active ? 1231 : 1237);
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    DbGroup other = (DbGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(externalId, other.externalId) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && status == other.status);
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    DbGroup other = (DbGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(externalId, other.externalId) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && active == other.active);
}
#end_block

#method_before
@SuppressWarnings("deprecation")
public static DbUser initUser(String sessionId, String domain, ExternalId id) {
    DbUser dbUser = DbFacade.getInstance().getDbUserDao().getByExternalId(domain, id);
    if (dbUser == null) {
        LdapUser adUser = (LdapUser) LdapFactory.getInstance(domain).RunAdAction(AdActionType.GetAdUserByUserId, new LdapSearchByIdParameters(sessionId, domain, id)).getReturnValue();
        if (adUser == null) {
            throw new VdcBLLException(VdcBllErrors.USER_FAILED_POPULATE_DATA);
        }
        dbUser = new DbUser(adUser);
        DbFacade.getInstance().getDbUserDao().save(dbUser);
    }
    return dbUser;
}
#method_after
@SuppressWarnings("deprecation")
public static DbUser initUser(String sessionId, String domain, ExternalId id) {
    DbUser dbUser = DbFacade.getInstance().getDbUserDao().getByExternalId(domain, id);
    if (dbUser == null) {
        LdapUser adUser = (LdapUser) LdapFactory.getInstance(domain).runAdAction(AdActionType.GetAdUserByUserId, new LdapSearchByIdParameters(sessionId, domain, id)).getReturnValue();
        if (adUser == null) {
            throw new VdcBLLException(VdcBllErrors.USER_FAILED_POPULATE_DATA);
        }
        dbUser = new DbUser(adUser);
        DbFacade.getInstance().getDbUserDao().save(dbUser);
    }
    return dbUser;
}
#end_block

#method_before
public List<LdapQueryData> getLdapQueriesData(String domain) {
    int queryLimit = Config.<Integer>GetValue(ConfigValues.MaxLDAPQueryPartsNumber);
    List<LdapQueryData> results = new ArrayList<LdapQueryData>();
    LdapQueryData subQueryData = new LdapQueryDataImpl();
    ArrayList<Object> filterParameters = new ArrayList<Object>();
    int counter = 0;
    for (ExternalId identifier : ldapIdentifiers) {
        filterParameters.add(identifier);
        // Checking if more than queryLimit query clauses were added to the query
        if (counter >= queryLimit) {
            // More than queryLimit query clauses were added to the query -
            // close the query, add it to the results, and start a new query
            subQueryData.setFilterParameters(filterParameters.toArray());
            subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids);
            subQueryData.setBaseDNParameters(null);
            subQueryData.setDomain(domain);
            results.add(subQueryData);
            subQueryData = new LdapQueryDataImpl();
            filterParameters = new ArrayList<Object>();
            counter = 0;
        }
        counter++;
    }
    if (!filterParameters.isEmpty()) {
        subQueryData.setFilterParameters(filterParameters.toArray());
        subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids);
        subQueryData.setBaseDNParameters(null);
        subQueryData.setDomain(domain);
        results.add(subQueryData);
    }
    return results;
}
#method_after
public List<LdapQueryData> getLdapQueriesData(String domain) {
    int queryLimit = Config.<Integer>getValue(ConfigValues.MaxLDAPQueryPartsNumber);
    List<LdapQueryData> results = new ArrayList<LdapQueryData>();
    LdapQueryData subQueryData = new LdapQueryDataImpl();
    ArrayList<Object> filterParameters = new ArrayList<Object>();
    int counter = 0;
    for (ExternalId identifier : ldapIdentifiers) {
        filterParameters.add(identifier);
        // Checking if more than queryLimit query clauses were added to the query
        if (counter >= queryLimit) {
            // More than queryLimit query clauses were added to the query -
            // close the query, add it to the results, and start a new query
            subQueryData.setFilterParameters(filterParameters.toArray());
            subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids);
            subQueryData.setBaseDNParameters(null);
            subQueryData.setDomain(domain);
            results.add(subQueryData);
            subQueryData = new LdapQueryDataImpl();
            filterParameters = new ArrayList<Object>();
            counter = 0;
        }
        counter++;
    }
    if (!filterParameters.isEmpty()) {
        subQueryData.setFilterParameters(filterParameters.toArray());
        subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids);
        subQueryData.setBaseDNParameters(null);
        subQueryData.setDomain(domain);
        results.add(subQueryData);
    }
    return results;
}
#end_block

#method_before
@Override
protected void executeQuery(DirectorySearcher directorySearcher) {
    java.util.ArrayList<LdapGroup> groupList = new java.util.ArrayList<LdapGroup>();
    List<GroupSearchResult> searchResults = (List<GroupSearchResult>) directorySearcher.FindAll(getLdapQueryData());
    {
        for (GroupSearchResult searchResult : searchResults) {
            String distinguishedName = searchResult.getDistinguishedName();
            List<String> memberOf = searchResult.getMemberOf();
            if (distinguishedName != null) {
                String groupName = LdapBrokerUtils.generateGroupDisplayValue(searchResult.getDistinguishedName());
                LdapGroup group = new LdapGroup(searchResult.getId(), groupName, getDomain(), distinguishedName, memberOf);
                groupList.add(group);
            }
        }
    }
    setReturnValue(groupList);
    setSucceeded(true);
}
#method_after
@Override
protected void executeQuery(DirectorySearcher directorySearcher) {
    java.util.ArrayList<LdapGroup> groupList = new java.util.ArrayList<LdapGroup>();
    List<GroupSearchResult> searchResults = (List<GroupSearchResult>) directorySearcher.findAll(getLdapQueryData());
    {
        for (GroupSearchResult searchResult : searchResults) {
            String distinguishedName = searchResult.getDistinguishedName();
            List<String> memberOf = searchResult.getMemberOf();
            if (distinguishedName != null) {
                String groupName = LdapBrokerUtils.generateGroupDisplayValue(searchResult.getDistinguishedName());
                LdapGroup group = new LdapGroup(searchResult.getId(), groupName, getDomain(), distinguishedName, memberOf);
                groupList.add(group);
            }
        }
    }
    setReturnValue(groupList);
    setSucceeded(true);
}
#end_block

#method_before
public static LdapUser getUserById(ExternalId id) {
    LdapUser retVal = null;
    DbUser dbUser = getDbUserDAO().getByExternalId(Config.<String>GetValue(ConfigValues.AdminDomain), id);
    if (dbUser != null) {
        retVal = new LdapUser(dbUser);
    }
    return retVal;
}
#method_after
public static LdapUser getUserById(ExternalId id) {
    LdapUser retVal = null;
    DbUser dbUser = getDbUserDAO().getByExternalId(Config.<String>getValue(ConfigValues.AdminDomain), id);
    if (dbUser != null) {
        retVal = new LdapUser(dbUser);
    }
    return retVal;
}
#end_block

#method_before
public static UserAuthenticationResult authenticate(String userName, String password, String domain) {
    UserAuthenticationResult result = null;
    String adminPassword = Config.<String>GetValue(ConfigValues.AdminPassword).trim();
    String adminUser = Config.<String>GetValue(ConfigValues.AdminUser).trim();
    String adminDomain = Config.<String>GetValue(ConfigValues.AdminDomain).trim();
    if (userName.equals(adminUser)) {
        if (domain.equalsIgnoreCase(adminDomain)) {
            if (adminPassword.isEmpty()) {
                result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE_ACCOUNT_IS_LOCKED_OR_DISABLED);
            } else if (adminPassword.equals(password)) {
                result = new UserAuthenticationResult();
            } else {
                result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
            }
        } else {
            result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
        }
    } else {
        result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
    }
    return result;
}
#method_after
public static UserAuthenticationResult authenticate(String userName, String password, String domain) {
    UserAuthenticationResult result = null;
    String adminPassword = Config.<String>getValue(ConfigValues.AdminPassword).trim();
    String adminUser = Config.<String>getValue(ConfigValues.AdminUser).trim();
    String adminDomain = Config.<String>getValue(ConfigValues.AdminDomain).trim();
    if (userName.equals(adminUser)) {
        if (domain.equalsIgnoreCase(adminDomain)) {
            if (adminPassword.isEmpty()) {
                result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE_ACCOUNT_IS_LOCKED_OR_DISABLED);
            } else if (adminPassword.equals(password)) {
                result = new UserAuthenticationResult();
            } else {
                result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
            }
        } else {
            result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
        }
    } else {
        result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
    }
    return result;
}
#end_block

#method_before
@Override
protected void verifyModel(User model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertArrayEquals(EXTERNAL_IDS[index].getBytes(), model.getExternalId());
    assertEquals(NAMES[index], model.getUserName());
    assertNotNull(model.getDomain());
    assertEquals(new Guid(DOMAIN.getBytes(), true).toString(), model.getDomain().getId());
    assertTrue(model.isSetGroups());
    assertEquals(PARSED_GROUPS.length, model.getGroups().getGroups().size());
    for (int i = 0; i < PARSED_GROUPS.length; i++) {
        Group group = model.getGroups().getGroups().get(i);
        assertEquals(PARSED_GROUPS[i], group.getName());
    }
    verifyLinks(model);
}
#method_after
@Override
protected void verifyModel(User model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertEquals(EXTERNAL_IDS[index].toHex(), model.getExternalId());
    assertEquals(NAMES[index], model.getUserName());
    assertNotNull(model.getDomain());
    assertEquals(new Guid(DOMAIN.getBytes(), true).toString(), model.getDomain().getId());
    assertTrue(model.isSetGroups());
    assertEquals(PARSED_GROUPS.length, model.getGroups().getGroups().size());
    for (int i = 0; i < PARSED_GROUPS.length; i++) {
        Group group = model.getGroups().getGroups().get(i);
        assertEquals(PARSED_GROUPS[i], group.getName());
    }
    verifyLinks(model);
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((externalId == null) ? 0 : externalId.hashCode());
    result = prime * result + ((department == null) ? 0 : department.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((email == null) ? 0 : email.hashCode());
    result = prime * result + ((groupNames == null) ? 0 : groupNames.hashCode());
    result = prime * result + (isAdmin ? 1231 : 1237);
    result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
    result = prime * result + ((note == null) ? 0 : note.hashCode());
    result = prime * result + ((role == null) ? 0 : role.hashCode());
    result = prime * result + status;
    result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
    result = prime * result + ((loginName == null) ? 0 : loginName.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((externalId == null) ? 0 : externalId.hashCode());
    result = prime * result + ((department == null) ? 0 : department.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((email == null) ? 0 : email.hashCode());
    result = prime * result + ((groupNames == null) ? 0 : groupNames.hashCode());
    result = prime * result + (isAdmin ? 1231 : 1237);
    result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
    result = prime * result + ((note == null) ? 0 : note.hashCode());
    result = prime * result + ((role == null) ? 0 : role.hashCode());
    result = prime * result + (active ? 1231 : 1237);
    result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
    result = prime * result + ((loginName == null) ? 0 : loginName.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    DbUser other = (DbUser) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(externalId, other.externalId) && ObjectUtils.objectsEqual(department, other.department) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(email, other.email) && ObjectUtils.objectsEqual(groupNames, other.groupNames) && isAdmin == other.isAdmin && ObjectUtils.objectsEqual(firstName, other.firstName) && ObjectUtils.objectsEqual(note, other.note) && ObjectUtils.objectsEqual(role, other.role) && status == other.status && ObjectUtils.objectsEqual(lastName, other.lastName) && ObjectUtils.objectsEqual(loginName, other.loginName));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    DbUser other = (DbUser) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(externalId, other.externalId) && ObjectUtils.objectsEqual(department, other.department) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(email, other.email) && ObjectUtils.objectsEqual(groupNames, other.groupNames) && isAdmin == other.isAdmin && ObjectUtils.objectsEqual(firstName, other.firstName) && ObjectUtils.objectsEqual(note, other.note) && ObjectUtils.objectsEqual(role, other.role) && active == other.active && ObjectUtils.objectsEqual(lastName, other.lastName) && ObjectUtils.objectsEqual(loginName, other.loginName));
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // Get the identifier of the group from the parameters:
    Guid id = getParameters().getId();
    // Remove the permissions of the group:
    for (permissions permission : getPermissionDAO().getAllDirectPermissionsForAdElement(id)) {
        PermissionsOperationsParameters param = new PermissionsOperationsParameters(permission);
        param.setSessionId(getParameters().getSessionId());
        getBackend().runInternalAction(VdcActionType.RemovePermission, param, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
    }
    // Remove the group itself:
    getAdGroupDAO().remove(id);
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    // Get the identifier of the group from the parameters:
    Guid id = getParameters().getId();
    // TODO: This should be done without invoking the command to avoid the overhead.
    for (Permissions permission : getPermissionDAO().getAllDirectPermissionsForAdElement(id)) {
        PermissionsOperationsParameters param = new PermissionsOperationsParameters(permission);
        param.setSessionId(getParameters().getSessionId());
        getBackend().runInternalAction(VdcActionType.RemovePermission, param, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
    }
    // Remove the group itself:
    getAdGroupDAO().remove(id);
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue;
    // check if user is not already subscribed to this event with same
    // method and address
    Guid subscriberId = getParameters().getEventSubscriber().getsubscriber_id();
    String eventName = getParameters().getEventSubscriber().getevent_up_name();
    int methodId = getParameters().getEventSubscriber().getmethod_id();
    List<event_subscriber> subscriptions = DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId);
    if (IsAlreadySubscribed(subscriptions, subscriberId, eventName, methodId)) {
        addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED);
        retValue = false;
    } else {
        // get notification method
        List<EventNotificationMethod> eventNotificationMethods = (DbFacade.getInstance().getEventDao().getEventNotificationMethodsById(methodId));
        if (eventNotificationMethods.size() > 0) {
            // validate event
            List<EventMap> eventMap = DbFacade.getInstance().getEventDao().getEventMapByName(eventName);
            if (eventMap.size() > 0) {
                String domain = getParameters().getDomain();
                // Validate user
                DbUser user = DbFacade.getInstance().getDbUserDao().get(subscriberId);
                if (user == null) {
                    addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB);
                    retValue = false;
                } else {
                    retValue = ValidateAdd(eventNotificationMethods, getParameters().getEventSubscriber(), user);
                }
            } else {
                addCanDoActionMessage(String.format("$eventName %1$s", eventName));
                addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT);
                retValue = false;
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD);
            retValue = false;
        }
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue;
    // check if user is not already subscribed to this event with same
    // method and address
    Guid subscriberId = getParameters().getEventSubscriber().getsubscriber_id();
    String eventName = getParameters().getEventSubscriber().getevent_up_name();
    int methodId = getParameters().getEventSubscriber().getmethod_id();
    List<event_subscriber> subscriptions = DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId);
    if (IsAlreadySubscribed(subscriptions, subscriberId, eventName, methodId)) {
        addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED);
        retValue = false;
    } else {
        // get notification method
        List<EventNotificationMethod> eventNotificationMethods = (DbFacade.getInstance().getEventDao().getEventNotificationMethodsById(methodId));
        if (eventNotificationMethods.size() > 0) {
            // validate event
            List<EventMap> eventMap = DbFacade.getInstance().getEventDao().getEventMapByName(eventName);
            if (eventMap.size() > 0) {
                // Validate user
                DbUser user = DbFacade.getInstance().getDbUserDao().get(subscriberId);
                if (user == null) {
                    addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB);
                    retValue = false;
                } else {
                    retValue = ValidateAdd(eventNotificationMethods, getParameters().getEventSubscriber(), user);
                }
            } else {
                addCanDoActionMessage(String.format("$eventName %1$s", eventName));
                addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT);
                retValue = false;
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD);
            retValue = false;
        }
    }
    return retValue;
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    final String domain = getParameters().getDomain();
    final ExternalId id = getParameters().getId();
    final LdapBroker broker = LdapFactory.getInstance(domain);
    final LdapGroup group = (LdapGroup) broker.RunAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(domain, id)).getReturnValue();
    getQueryReturnValue().setReturnValue(group);
}
#method_after
@Override
protected void executeQueryCommand() {
    final String domain = getParameters().getDomain();
    final ExternalId id = getParameters().getId();
    final LdapBroker broker = LdapFactory.getInstance(domain);
    final LdapGroup group = (LdapGroup) broker.runAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(domain, id)).getReturnValue();
    getQueryReturnValue().setReturnValue(group);
}
#end_block

#method_before
@Override
public Response add(Group group) {
    validateParameters(group, "name");
    if (!isNameContainsDomain(group)) {
        validateParameters(group, "domain.id|name");
    }
    String domain = getDomain(group);
    LdapGroup directoryGroup = getEntity(LdapGroup.class, SearchType.AdGroup, getDirectoryGroupSearchPattern(group.getName(), domain));
    if (directoryGroup == null) {
        return Response.status(Status.BAD_REQUEST).entity("No such group: " + group.getName() + " in domain " + domain).build();
    }
    DirectoryIdParameters parameters = new DirectoryIdParameters();
    parameters.setDirectory(directoryGroup.getdomain());
    parameters.setId(directoryGroup.getid());
    QueryIdResolver<Guid> resolver = new QueryIdResolver<>(VdcQueryType.GetDbGroupById, IdQueryParameters.class);
    return performCreate(VdcActionType.AddGroup, parameters, resolver, BaseResource.class);
}
#method_after
@Override
public Response add(Group group) {
    validateParameters(group, "name");
    if (!isNameContainsDomain(group)) {
        validateParameters(group, "domain.id|name");
    }
    String directoryName = getDirectoryName(group);
    LdapGroup directoryGroup = findDirectoryGroup(directoryName, group);
    if (directoryGroup == null) {
        return Response.status(Status.BAD_REQUEST).entity("No such group: " + group.getName() + " in directory " + directoryName).build();
    }
    DirectoryIdParameters parameters = new DirectoryIdParameters();
    parameters.setDirectory(directoryName);
    parameters.setId(directoryGroup.getid());
    QueryIdResolver<Guid> resolver = new QueryIdResolver<>(VdcQueryType.GetDbGroupById, IdQueryParameters.class);
    return performCreate(VdcActionType.AddGroup, parameters, resolver, BaseResource.class);
}
#end_block

#method_before
@Override
protected void verifyModel(Group model, int index) {
    assertArrayEquals(EXTERNAL_IDS[index].getBytes(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
}
#method_after
@Override
protected void verifyModel(Group model, int index) {
    assertEquals(EXTERNAL_IDS[index].toHex(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    String directory = getParameters().getDirectory();
    ExternalId id = getParameters().getId();
    directoryGroup = (LdapGroup) LdapFactory.getInstance(directory).RunAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(directory, id)).getReturnValue();
    if (directoryGroup == null) {
        addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
        return false;
    }
    addCustomValue("NewUserName", directoryGroup.getname());
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    String directory = getParameters().getDirectory();
    ExternalId id = getParameters().getId();
    directoryGroup = (LdapGroup) LdapFactory.getInstance(directory).runAdAction(AdActionType.GetAdGroupByGroupId, new LdapSearchByIdParameters(directory, id)).getReturnValue();
    if (directoryGroup == null) {
        addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
        return false;
    }
    addCustomValue("NewUserName", directoryGroup.getname());
    return true;
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    String domain = getParameters().getDomain();
    ExternalId id = getParameters().getId();
    LdapBroker broker = LdapFactory.getInstance(domain);
    LdapUser user = (LdapUser) broker.RunAdAction(AdActionType.GetAdUserByUserId, new LdapSearchByIdParameters(domain, id)).getReturnValue();
    getQueryReturnValue().setReturnValue(user);
}
#method_after
@Override
protected void executeQueryCommand() {
    String domain = getParameters().getDomain();
    ExternalId id = getParameters().getId();
    LdapBroker broker = LdapFactory.getInstance(domain);
    LdapUser user = (LdapUser) broker.runAdAction(AdActionType.GetAdUserByUserId, new LdapSearchByIdParameters(domain, id)).getReturnValue();
    getQueryReturnValue().setReturnValue(user);
}
#end_block

#method_before
private void getAttachedTagsToSelectedUsers(TagListModel model) {
    ArrayList<Guid> userIds = new ArrayList<Guid>();
    ArrayList<Guid> grpIds = new ArrayList<Guid>();
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<org.ovirt.engine.core.common.businessentities.tags>();
    selectedItemsCounter = 0;
    for (Object item : getSelectedItems()) {
        DbUser user = (DbUser) item;
        if (!user.isGroup()) {
            userIds.add(user.getId());
        } else {
            grpIds.add(user.getId());
        }
    }
    for (Guid userId : userIds) {
        AsyncDataProvider.getAttachedTagsToUser(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<org.ovirt.engine.core.common.businessentities.tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), userId);
    }
    for (Guid grpId : grpIds) {
        AsyncDataProvider.getAttachedTagsToUserGroup(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<org.ovirt.engine.core.common.businessentities.tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), grpId);
    }
}
#method_after
private void getAttachedTagsToSelectedUsers(TagListModel model) {
    ArrayList<Guid> userIds = new ArrayList<Guid>();
    ArrayList<Guid> grpIds = new ArrayList<Guid>();
    attachedTagsToEntities = new HashMap<Guid, Boolean>();
    allAttachedTags = new ArrayList<Tags>();
    selectedItemsCounter = 0;
    for (Object item : getSelectedItems()) {
        DbUser user = (DbUser) item;
        if (!user.isGroup()) {
            userIds.add(user.getId());
        } else {
            grpIds.add(user.getId());
        }
    }
    for (Guid userId : userIds) {
        AsyncDataProvider.getAttachedTagsToUser(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), userId);
    }
    for (Guid grpId : grpIds) {
        AsyncDataProvider.getAttachedTagsToUserGroup(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                Object[] array = (Object[]) target;
                UserListModel userListModel = (UserListModel) array[0];
                TagListModel tagListModel = (TagListModel) array[1];
                userListModel.allAttachedTags.addAll((ArrayList<Tags>) returnValue);
                userListModel.selectedItemsCounter++;
                if (userListModel.selectedItemsCounter == userListModel.getSelectedItems().size()) {
                    postGetAttachedTags(userListModel, tagListModel);
                }
            }
        }), grpId);
    }
}
#end_block

#method_before
private void postGetAttachedTags(UserListModel userListModel, TagListModel tagListModel) {
    if (userListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<org.ovirt.engine.core.common.businessentities.tags> attachedTags = Linq.distinct(userListModel.allAttachedTags, new TagsEqualityComparer());
        for (org.ovirt.engine.core.common.businessentities.tags a : attachedTags) {
            int count = 0;
            for (org.ovirt.engine.core.common.businessentities.tags b : allAttachedTags) {
                if (b.gettag_id().equals(a.gettag_id())) {
                    count++;
                }
            }
            userListModel.attachedTagsToEntities.put(a.gettag_id(), count == userListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(userListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(userListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        userListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#method_after
private void postGetAttachedTags(UserListModel userListModel, TagListModel tagListModel) {
    if (userListModel.getLastExecutedCommand() == getAssignTagsCommand()) {
        ArrayList<Tags> attachedTags = Linq.distinct(userListModel.allAttachedTags, new TagsEqualityComparer());
        for (Tags a : attachedTags) {
            int count = 0;
            for (Tags b : allAttachedTags) {
                if (b.gettag_id().equals(a.gettag_id())) {
                    count++;
                }
            }
            userListModel.attachedTagsToEntities.put(a.gettag_id(), count == userListModel.getSelectedItems().size());
        }
        tagListModel.setAttachedTagsToEntities(userListModel.attachedTagsToEntities);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(userListModel.getLastExecutedCommand().getName(), "OnAssignTags")) {
        userListModel.postOnAssignTags(tagListModel.getAttachedTagsToEntities());
    }
}
#end_block

#method_before
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> userIds = new ArrayList<Guid>();
    ArrayList<Guid> grpIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        DbUser user = (DbUser) item;
        if (user.isGroup()) {
            grpIds.add(user.getId());
        } else {
            userIds.add(user.getId());
        }
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<Guid>();
    ArrayList<Guid> tagsToDetach = new ArrayList<Guid>();
    if (model.getItems() != null && ((ArrayList<TagModel>) model.getItems()).size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<VdcActionParametersBase> usersToAttach = new ArrayList<VdcActionParametersBase>();
    ArrayList<VdcActionParametersBase> grpsToAttach = new ArrayList<VdcActionParametersBase>();
    for (Guid tag_id : tagsToAttach) {
        if (userIds.size() > 0) {
            usersToAttach.add(new AttachEntityToTagParameters(tag_id, userIds));
        }
        if (grpIds.size() > 0) {
            grpsToAttach.add(new AttachEntityToTagParameters(tag_id, grpIds));
        }
    }
    if (usersToAttach.size() > 0) {
        Frontend.RunMultipleAction(VdcActionType.AttachUserToTag, usersToAttach);
    }
    if (grpsToAttach.size() > 0) {
        Frontend.RunMultipleAction(VdcActionType.AttachUserGroupToTag, grpsToAttach);
    }
    ArrayList<VdcActionParametersBase> usersToDetach = new ArrayList<VdcActionParametersBase>();
    ArrayList<VdcActionParametersBase> grpsToDetach = new ArrayList<VdcActionParametersBase>();
    for (Guid tag_id : tagsToDetach) {
        if (userIds.size() > 0) {
            usersToDetach.add(new AttachEntityToTagParameters(tag_id, userIds));
        }
        if (grpIds.size() > 0) {
            grpsToDetach.add(new AttachEntityToTagParameters(tag_id, grpIds));
        }
    }
    if (usersToDetach.size() > 0) {
        Frontend.RunMultipleAction(VdcActionType.DetachUserFromTag, usersToDetach);
    }
    if (grpsToDetach.size() > 0) {
        Frontend.RunMultipleAction(VdcActionType.DetachUserGroupFromTag, grpsToDetach);
    }
    cancel();
}
#method_after
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> userIds = new ArrayList<Guid>();
    ArrayList<Guid> grpIds = new ArrayList<Guid>();
    for (Object item : getSelectedItems()) {
        DbUser user = (DbUser) item;
        if (user.isGroup()) {
            grpIds.add(user.getId());
        } else {
            userIds.add(user.getId());
        }
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<Guid>();
    ArrayList<Guid> tagsToDetach = new ArrayList<Guid>();
    if (model.getItems() != null && ((ArrayList<TagModel>) model.getItems()).size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<VdcActionParametersBase> usersToAttach = new ArrayList<VdcActionParametersBase>();
    ArrayList<VdcActionParametersBase> grpsToAttach = new ArrayList<VdcActionParametersBase>();
    for (Guid tag_id : tagsToAttach) {
        if (userIds.size() > 0) {
            usersToAttach.add(new AttachEntityToTagParameters(tag_id, userIds));
        }
        if (grpIds.size() > 0) {
            grpsToAttach.add(new AttachEntityToTagParameters(tag_id, grpIds));
        }
    }
    if (usersToAttach.size() > 0) {
        Frontend.getInstance().runMultipleAction(VdcActionType.AttachUserToTag, usersToAttach);
    }
    if (grpsToAttach.size() > 0) {
        Frontend.getInstance().runMultipleAction(VdcActionType.AttachUserGroupToTag, grpsToAttach);
    }
    ArrayList<VdcActionParametersBase> usersToDetach = new ArrayList<VdcActionParametersBase>();
    ArrayList<VdcActionParametersBase> grpsToDetach = new ArrayList<VdcActionParametersBase>();
    for (Guid tag_id : tagsToDetach) {
        if (userIds.size() > 0) {
            usersToDetach.add(new AttachEntityToTagParameters(tag_id, userIds));
        }
        if (grpIds.size() > 0) {
            grpsToDetach.add(new AttachEntityToTagParameters(tag_id, grpIds));
        }
    }
    if (usersToDetach.size() > 0) {
        Frontend.getInstance().runMultipleAction(VdcActionType.DetachUserFromTag, usersToDetach);
    }
    if (grpsToDetach.size() > 0) {
        Frontend.getInstance().runMultipleAction(VdcActionType.DetachUserGroupFromTag, grpsToDetach);
    }
    cancel();
}
#end_block

#method_before
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeUsersTitle());
    // $NON-NLS-1$
    model.setHashName("remove_user");
    model.setMessage(ConstantsManager.getInstance().getConstants().usersMsg());
    ArrayList<String> list = new ArrayList<String>();
    for (DbUser item : Linq.<DbUser>cast(getSelectedItems())) {
        list.add(item.getFirstName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeUsersTitle());
    // $NON-NLS-1$
    model.setHashName("remove_user");
    ArrayList<String> list = new ArrayList<String>();
    for (DbUser item : Linq.<DbUser>cast(getSelectedItems())) {
        list.add(item.getFirstName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    SearchParameters tempVar = new SearchParameters(getSearchString(), SearchType.DBUser);
    tempVar.setMaxCount(getSearchPageSize());
    super.syncSearch(VdcQueryType.Search, tempVar);
}
#method_after
@Override
protected void syncSearch() {
    SearchParameters tempVar = new SearchParameters(getSearchString(), SearchType.DBUser, isCaseSensitiveSearch());
    tempVar.setMaxCount(getSearchPageSize());
    super.syncSearch(VdcQueryType.Search, tempVar);
}
#end_block

#method_before
public void onAdd() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (model.getSelectedItems() == null) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    for (Object item : model.getItems()) {
        EntityModel entityModel = (EntityModel) item;
        if (entityModel.getIsSelected()) {
            items.add((DbUser) entityModel.getEntity());
        }
    }
    ArrayList<VdcActionType> actionsList = new ArrayList<VdcActionType>(items.size());
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>(items.size());
    for (DbUser item : items) {
        if (item.isGroup()) {
            actionsList.add(VdcActionType.AddGroup);
        } else {
            actionsList.add(VdcActionType.AddUser);
        }
        DirectoryIdParameters parameters = new DirectoryIdParameters();
        parameters.setDirectory(item.getDomain());
        parameters.setId(item.getExternalId());
        parametersList.add(parameters);
    }
    model.startProgress(null);
    IFrontendActionAsyncCallback nopCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
        // Nothing.
        }
    };
    IFrontendActionAsyncCallback lastCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            AdElementListModel localModel = (AdElementListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    };
    ArrayList<IFrontendActionAsyncCallback> callbacksList = new ArrayList<IFrontendActionAsyncCallback>(items.size());
    for (int i = 1; i < items.size(); i++) {
        callbacksList.add(nopCallback);
    }
    callbacksList.add(lastCallback);
    Frontend.RunMultipleActions(actionsList, parametersList, callbacksList, lastCallback, model);
}
#method_after
public void onAdd() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (model.getSelectedItems() == null) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    for (Object item : model.getItems()) {
        EntityModel entityModel = (EntityModel) item;
        if (entityModel.getIsSelected()) {
            items.add((DbUser) entityModel.getEntity());
        }
    }
    ArrayList<VdcActionType> actionsList = new ArrayList<VdcActionType>(items.size());
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>(items.size());
    for (DbUser item : items) {
        if (item.isGroup()) {
            actionsList.add(VdcActionType.AddGroup);
        } else {
            actionsList.add(VdcActionType.AddUser);
        }
        DirectoryIdParameters parameters = new DirectoryIdParameters();
        parameters.setDirectory(item.getDomain());
        parameters.setId(item.getExternalId());
        parametersList.add(parameters);
    }
    model.startProgress(null);
    IFrontendActionAsyncCallback nopCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
        // Nothing.
        }
    };
    IFrontendActionAsyncCallback lastCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void executed(FrontendActionAsyncResult result) {
            AdElementListModel localModel = (AdElementListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    };
    ArrayList<IFrontendActionAsyncCallback> callbacksList = new ArrayList<IFrontendActionAsyncCallback>(items.size());
    for (int i = 1; i < items.size(); i++) {
        callbacksList.add(nopCallback);
    }
    callbacksList.add(lastCallback);
    Frontend.getInstance().runMultipleActions(actionsList, parametersList, callbacksList, lastCallback, model);
}
#end_block

#method_before
public void onRemove() {
    ArrayList<DbUser> items = Linq.<DbUser>cast(getSelectedItems());
    ArrayList<VdcActionParametersBase> userPrms = new ArrayList<VdcActionParametersBase>();
    ArrayList<VdcActionParametersBase> groupPrms = new ArrayList<VdcActionParametersBase>();
    for (DbUser item : items) {
        if (!item.isGroup()) {
            userPrms.add(new IdParameters(item.getId()));
        } else {
            groupPrms.add(new IdParameters(item.getId()));
        }
    }
    if (userPrms.size() > 0) {
        Frontend.RunMultipleAction(VdcActionType.RemoveUser, userPrms);
    }
    if (groupPrms.size() > 0) {
        Frontend.RunMultipleAction(VdcActionType.RemoveGroup, groupPrms);
    }
    cancel();
}
#method_after
public void onRemove() {
    ArrayList<DbUser> items = Linq.<DbUser>cast(getSelectedItems());
    ArrayList<VdcActionParametersBase> userPrms = new ArrayList<VdcActionParametersBase>();
    ArrayList<VdcActionParametersBase> groupPrms = new ArrayList<VdcActionParametersBase>();
    for (DbUser item : items) {
        if (!item.isGroup()) {
            userPrms.add(new IdParameters(item.getId()));
        } else {
            groupPrms.add(new IdParameters(item.getId()));
        }
    }
    if (userPrms.size() > 0) {
        Frontend.getInstance().runMultipleAction(VdcActionType.RemoveUser, userPrms);
    }
    if (groupPrms.size() > 0) {
        Frontend.getInstance().runMultipleAction(VdcActionType.RemoveGroup, groupPrms);
    }
    cancel();
}
#end_block

#method_before
@Override
protected boolean isUserAuthorizedToRunAction() {
    if (log.isDebugEnabled()) {
        log.debugFormat("IsUserAutorizedToRunAction: Login - no permission check");
    }
    return true;
}
#method_after
@Override
protected boolean isUserAuthorizedToRunAction() {
    if (log.isDebugEnabled()) {
        log.debugFormat("IsUserAutorizedToRunAction: login - no permission check");
    }
    return true;
}
#end_block

#method_before
@Override
protected void verifyModel(User model, int index) {
    assertArrayEquals(EXTERNAL_IDS[index].getBytes(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
}
#method_after
@Override
protected void verifyModel(User model, int index) {
    assertEquals(EXTERNAL_IDS[index].toHex(), model.getExternalId());
    assertEquals(NAMES[index], model.getName());
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((distinguishedName == null) ? 0 : distinguishedName.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + ((memberOf == null) ? 0 : memberOf.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + (active ? 1231 : 1237);
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    LdapGroup other = (LdapGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && ObjectUtils.objectsEqual(name, other.name) && status == other.status);
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    LdapGroup other = (LdapGroup) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(distinguishedName, other.distinguishedName) && ObjectUtils.objectsEqual(domain, other.domain) && ObjectUtils.objectsEqual(memberOf, other.memberOf) && ObjectUtils.objectsEqual(name, other.name) && active == other.active);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    super.syncSearch();
    IdQueryParameters param = new IdQueryParameters(((Quota) getEntity()).getId());
    param.setRefresh(getIsQueryFirstTime());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            SearchableListModel searchableListModel = (SearchableListModel) model;
            ArrayList<permissions> list = (ArrayList<permissions>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Map<Guid, permissions> map = new HashMap<Guid, permissions>();
            for (permissions permission : list) {
                // filter out sys-admin and dc admin from consumers sub-tab
                if (permission.getrole_id().equals(ApplicationGuids.superUser.asGuid()) || permission.getrole_id().equals(ApplicationGuids.dataCenterAdmin.asGuid())) {
                    continue;
                }
                if (!map.containsKey(permission.getad_element_id())) {
                    map.put(permission.getad_element_id(), permission);
                } else {
                    if (map.get(permission.getad_element_id()).getrole_id().equals(ApplicationGuids.quotaConsumer.asGuid())) {
                        map.put(permission.getad_element_id(), permission);
                    }
                }
            }
            list.clear();
            for (permissions permission : map.values()) {
                list.add(permission);
            }
            searchableListModel.setItems(list);
        }
    };
    param.setRefresh(getIsQueryFirstTime());
    Frontend.RunQuery(VdcQueryType.GetPermissionsToConsumeQuotaByQuotaId, param, _asyncQuery);
    setIsQueryFirstTime(false);
}
#method_after
@Override
protected void syncSearch() {
    super.syncSearch();
    IdQueryParameters param = new IdQueryParameters(((Quota) getEntity()).getId());
    param.setRefresh(getIsQueryFirstTime());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            SearchableListModel searchableListModel = (SearchableListModel) model;
            ArrayList<Permissions> list = (ArrayList<Permissions>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Map<Guid, Permissions> map = new HashMap<Guid, Permissions>();
            for (Permissions permission : list) {
                // filter out sys-admin and dc admin from consumers sub-tab
                if (permission.getrole_id().equals(ApplicationGuids.superUser.asGuid()) || permission.getrole_id().equals(ApplicationGuids.dataCenterAdmin.asGuid())) {
                    continue;
                }
                if (!map.containsKey(permission.getad_element_id())) {
                    map.put(permission.getad_element_id(), permission);
                } else {
                    if (map.get(permission.getad_element_id()).getrole_id().equals(ApplicationGuids.quotaConsumer.asGuid())) {
                        map.put(permission.getad_element_id(), permission);
                    }
                }
            }
            list.clear();
            for (Permissions permission : map.values()) {
                list.add(permission);
            }
            searchableListModel.setItems(list);
        }
    };
    param.setRefresh(getIsQueryFirstTime());
    Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsToConsumeQuotaByQuotaId, param, _asyncQuery);
    setIsQueryFirstTime(false);
}
#end_block

#method_before
private void updateActionAvailability() {
    ArrayList<permissions> items = (((ArrayList<permissions>) getSelectedItems()) != null) ? (ArrayList<permissions>) getSelectedItems() : new ArrayList<permissions>();
    boolean removeExe = false;
    if (items.size() > 0) {
        removeExe = true;
    }
    for (permissions perm : items) {
        if (!perm.getrole_id().equals(ApplicationGuids.quotaConsumer.asGuid())) {
            removeExe = false;
            break;
        }
    }
    getRemoveCommand().setIsExecutionAllowed(removeExe);
}
#method_after
private void updateActionAvailability() {
    ArrayList<Permissions> items = (((ArrayList<Permissions>) getSelectedItems()) != null) ? (ArrayList<Permissions>) getSelectedItems() : new ArrayList<Permissions>();
    boolean removeExe = false;
    if (items.size() > 0) {
        removeExe = true;
    }
    for (Permissions perm : items) {
        if (!perm.getrole_id().equals(ApplicationGuids.quotaConsumer.asGuid())) {
            removeExe = false;
            break;
        }
    }
    getRemoveCommand().setIsExecutionAllowed(removeExe);
}
#end_block

#method_before
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeQuotaAssignmentFromUsersTitle());
    // $NON-NLS-1$
    model.setHashName("remove_quota_assignment_from_user");
    model.setMessage(ConstantsManager.getInstance().getConstants().assignmentsMsg());
    ArrayList<String> list = new ArrayList<String>();
    for (permissions item : Linq.<permissions>cast(getSelectedItems())) {
        list.add(item.getOwnerName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeQuotaAssignmentFromUsersTitle());
    // $NON-NLS-1$
    model.setHashName("remove_quota_assignment_from_user");
    ArrayList<String> list = new ArrayList<String>();
    for (Permissions item : Linq.<Permissions>cast(getSelectedItems())) {
        list.add(item.getOwnerName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void onAdd() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (model.getSelectedItems() == null && !model.getIsEveryoneSelected()) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    if (model.getIsEveryoneSelected()) {
        DbUser tempVar = new DbUser();
        tempVar.setId(ApplicationGuids.everyone.asGuid());
        items.add(tempVar);
    } else {
        for (Object item : model.getItems()) {
            EntityModel entityModel = (EntityModel) item;
            if (entityModel.getIsSelected()) {
                items.add((DbUser) entityModel.getEntity());
            }
        }
    }
    model.startProgress(null);
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    PermissionsOperationsParameters permissionParams;
    for (DbUser user : items) {
        permissions tempVar2 = new permissions();
        tempVar2.setad_element_id(user.getId());
        tempVar2.setrole_id(ApplicationGuids.quotaConsumer.asGuid());
        permissions perm = tempVar2;
        perm.setObjectId(((Quota) getEntity()).getId());
        perm.setObjectType(VdcObjectType.Quota);
        permissionParams = new PermissionsOperationsParameters();
        if (user.isGroup()) {
            DbGroup group = new DbGroup();
            group.setId(user.getId());
            group.setName(user.getFirstName());
            group.setDomain(user.getDomain());
            permissionParams.setGroup(group);
        } else {
            permissionParams.setUser(user);
        }
        permissionParams.setPermission(perm);
        list.add(permissionParams);
    }
    Frontend.RunMultipleAction(VdcActionType.AddPermission, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            QuotaUserListModel localModel = (QuotaUserListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
    cancel();
}
#method_after
public void onAdd() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (model.getSelectedItems() == null && !model.getIsEveryoneSelected()) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    if (model.getIsEveryoneSelected()) {
        DbUser tempVar = new DbUser();
        tempVar.setId(ApplicationGuids.everyone.asGuid());
        items.add(tempVar);
    } else {
        for (Object item : model.getItems()) {
            EntityModel entityModel = (EntityModel) item;
            if (entityModel.getIsSelected()) {
                items.add((DbUser) entityModel.getEntity());
            }
        }
    }
    model.startProgress(null);
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    PermissionsOperationsParameters permissionParams;
    for (DbUser user : items) {
        Permissions tempVar2 = new Permissions();
        tempVar2.setad_element_id(user.getId());
        tempVar2.setrole_id(ApplicationGuids.quotaConsumer.asGuid());
        Permissions perm = tempVar2;
        perm.setObjectId(((Quota) getEntity()).getId());
        perm.setObjectType(VdcObjectType.Quota);
        permissionParams = new PermissionsOperationsParameters();
        if (user.isGroup()) {
            DbGroup group = new DbGroup();
            group.setId(user.getId());
            group.setName(user.getFirstName());
            group.setDomain(user.getDomain());
            permissionParams.setGroup(group);
        } else {
            permissionParams.setUser(user);
        }
        permissionParams.setPermission(perm);
        list.add(permissionParams);
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AddPermission, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            QuotaUserListModel localModel = (QuotaUserListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
    cancel();
}
#end_block

#method_before
private void onRemove() {
    if (getSelectedItems() != null && getSelectedItems().size() > 0) {
        ConfirmationModel model = (ConfirmationModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object perm : getSelectedItems()) {
            PermissionsOperationsParameters tempVar = new PermissionsOperationsParameters();
            tempVar.setPermission((permissions) perm);
            list.add(tempVar);
        }
        model.startProgress(null);
        Frontend.RunMultipleAction(VdcActionType.RemovePermission, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ConfirmationModel localModel = (ConfirmationModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
    cancel();
}
#method_after
private void onRemove() {
    if (getSelectedItems() != null && getSelectedItems().size() > 0) {
        ConfirmationModel model = (ConfirmationModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object perm : getSelectedItems()) {
            PermissionsOperationsParameters tempVar = new PermissionsOperationsParameters();
            tempVar.setPermission((Permissions) perm);
            list.add(tempVar);
        }
        model.startProgress(null);
        Frontend.getInstance().runMultipleAction(VdcActionType.RemovePermission, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ConfirmationModel localModel = (ConfirmationModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
    cancel();
}
#end_block

#method_before
@Test
public void testAddGroupPermission() throws Exception {
    setUriInfo(setUpBasicUriExpectations());
    setUpCreationExpectations(VdcActionType.AddPermission, PermissionsOperationsParameters.class, new String[] { "Group.Id", "Permission.ad_element_id", "Permission.ObjectId", "Permission.role_id" }, new Object[] { GUIDS[1], GUIDS[1], GUIDS[2], GUIDS[3] }, true, true, GUIDS[0], VdcQueryType.GetPermissionById, IdQueryParameters.class, new String[] { "Id" }, new Object[] { GUIDS[0] }, getEntity(0));
    Permission model = new Permission();
    model.setRole(new Role());
    model.getRole().setId(GUIDS[3].toString());
    model.setGroup(new Group());
    model.getGroup().setId(GUIDS[1].toString());
    Response response = collection.add(model);
    assertEquals(201, response.getStatus());
    assertTrue(response.getEntity() instanceof Permission);
    verifyModel((Permission) response.getEntity(), 0);
}
#method_after
@Test
public void testAddGroupPermission() throws Exception {
    setUriInfo(setUpBasicUriExpectations());
    setUpCreationExpectations(VdcActionType.AddPermission, PermissionsOperationsParameters.class, new String[] { "Group.Id", "Permission.ad_element_id", "Permission.ObjectId", "Permission.role_id" }, new Object[] { GUIDS[1], GUIDS[1], targetId, GUIDS[3] }, true, true, GUIDS[0], VdcQueryType.GetPermissionById, IdQueryParameters.class, new String[] { "Id" }, new Object[] { GUIDS[0] }, getEntity(0));
    Permission model = new Permission();
    model.setRole(new Role());
    model.getRole().setId(GUIDS[3].toString());
    model.setGroup(new Group());
    model.getGroup().setId(GUIDS[1].toString());
    Response response = collection.add(model);
    assertEquals(201, response.getStatus());
    assertTrue(response.getEntity() instanceof Permission);
    verifyModel((Permission) response.getEntity(), 0);
}
#end_block

#method_before
@Override
protected void syncSearch() {
    VdcObjectType objType = getObjectType();
    boolean directOnly = (objType == VdcObjectType.VM ? true : false);
    GetPermissionsForObjectParameters tempVar = new GetPermissionsForObjectParameters();
    tempVar.setObjectId(getEntityGuid());
    tempVar.setVdcObjectType(objType);
    tempVar.setDirectOnly(directOnly);
    tempVar.setRefresh(getIsQueryFirstTime());
    super.syncSearch(VdcQueryType.GetPermissionsForObject, tempVar);
}
#method_after
@Override
protected void syncSearch() {
    VdcObjectType objType = getObjectType();
    boolean directOnly = (objType == VdcObjectType.VM ? true : false);
    GetPermissionsForObjectParameters tempVar = new GetPermissionsForObjectParameters();
    tempVar.setObjectId(getEntityGuid());
    tempVar.setVdcObjectType(objType);
    tempVar.setDirectOnly(directOnly);
    tempVar.setRefresh(getIsQueryFirstTime());
    tempVar.setAllUsersWithPermission(getAllUsersWithPermission());
    super.syncSearch(VdcQueryType.GetPermissionsForObject, tempVar);
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removePermissionTitle());
    // $NON-NLS-1$
    model.setHashName("remove_permission");
    model.setMessage(ConstantsManager.getInstance().getConstants().permissionMsg());
    model.setItems(getSelectedItems());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removePermissionTitle());
    // $NON-NLS-1$
    model.setHashName("remove_permission");
    model.setItems(getSelectedItems());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onRemove() {
    if (getSelectedItems() != null && getSelectedItems().size() > 0) {
        ConfirmationModel model = (ConfirmationModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object perm : getSelectedItems()) {
            PermissionsOperationsParameters tempVar = new PermissionsOperationsParameters();
            tempVar.setPermission((permissions) perm);
            list.add(tempVar);
        }
        model.startProgress(null);
        Frontend.RunMultipleAction(VdcActionType.RemovePermission, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ConfirmationModel localModel = (ConfirmationModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#method_after
private void onRemove() {
    if (getSelectedItems() != null && getSelectedItems().size() > 0) {
        ConfirmationModel model = (ConfirmationModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object perm : getSelectedItems()) {
            PermissionsOperationsParameters tempVar = new PermissionsOperationsParameters();
            tempVar.setPermission((Permissions) perm);
            list.add(tempVar);
        }
        model.startProgress(null);
        Frontend.getInstance().runMultipleAction(VdcActionType.RemovePermission, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ConfirmationModel localModel = (ConfirmationModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#end_block

#method_before
private void onAdd() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.getIsEveryoneSelected() && model.getSelectedItems() == null) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    if (model.getIsEveryoneSelected()) {
        DbUser tempVar = new DbUser();
        tempVar.setId(ApplicationGuids.everyone.asGuid());
        items.add(tempVar);
    } else {
        for (Object item : model.getItems()) {
            EntityModel entityModel = (EntityModel) item;
            if (entityModel.getIsSelected()) {
                items.add((DbUser) entityModel.getEntity());
            }
        }
    }
    Role role = (Role) model.getRole().getSelectedItem();
    // adGroup/user
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (DbUser user : items) {
        permissions tempVar2 = new permissions();
        tempVar2.setad_element_id(user.getId());
        tempVar2.setrole_id(role.getId());
        permissions perm = tempVar2;
        perm.setObjectId(getEntityGuid());
        perm.setObjectType(this.getObjectType());
        if (user.isGroup()) {
            DbGroup group = new DbGroup();
            group.setId(user.getId());
            group.setName(user.getFirstName());
            group.setDomain(user.getDomain());
            PermissionsOperationsParameters tempVar3 = new PermissionsOperationsParameters();
            tempVar3.setPermission(perm);
            tempVar3.setGroup(group);
            list.add(tempVar3);
        } else {
            PermissionsOperationsParameters tempVar4 = new PermissionsOperationsParameters();
            tempVar4.setPermission(perm);
            tempVar4.setUser(user);
            list.add(tempVar4);
        }
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.AddPermission, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            AdElementListModel localModel = (AdElementListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onAdd() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.getIsEveryoneSelected() && model.getSelectedItems() == null) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    if (model.getIsEveryoneSelected()) {
        DbUser tempVar = new DbUser();
        tempVar.setId(ApplicationGuids.everyone.asGuid());
        items.add(tempVar);
    } else {
        for (Object item : model.getItems()) {
            EntityModel entityModel = (EntityModel) item;
            if (entityModel.getIsSelected()) {
                items.add((DbUser) entityModel.getEntity());
            }
        }
    }
    Role role = (Role) model.getRole().getSelectedItem();
    // adGroup/user
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (DbUser user : items) {
        Permissions tempVar2 = new Permissions();
        tempVar2.setad_element_id(user.getId());
        tempVar2.setrole_id(role.getId());
        Permissions perm = tempVar2;
        perm.setObjectId(getEntityGuid());
        perm.setObjectType(this.getObjectType());
        if (user.isGroup()) {
            DbGroup group = new DbGroup();
            group.setId(user.getId());
            group.setName(user.getFirstName());
            group.setDomain(user.getDomain());
            PermissionsOperationsParameters tempVar3 = new PermissionsOperationsParameters();
            tempVar3.setPermission(perm);
            tempVar3.setGroup(group);
            list.add(tempVar3);
        } else {
            PermissionsOperationsParameters tempVar4 = new PermissionsOperationsParameters();
            tempVar4.setPermission(perm);
            tempVar4.setUser(user);
            list.add(tempVar4);
        }
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.AddPermission, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            AdElementListModel localModel = (AdElementListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
@Override
protected void entityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.entityPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.PropertyName.equals("status")) {
        updateActionAvailability();
    }
}
#method_after
@Override
protected void entityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.entityPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.propertyName.equals("status")) {
        updateActionAvailability();
    }
}
#end_block

#method_before
private void updateActionAvailability() {
    getRemoveCommand().setIsExecutionAllowed((getSelectedItems() != null && getSelectedItems().size() > 0));
    if (getRemoveCommand().getIsExecutionAllowed() == false) {
        return;
    }
    Guid entityGuid = getEntityGuid();
    for (Object p : getSelectedItems()) {
        if (!entityGuid.equals(((permissions) p).getObjectId())) {
            getRemoveCommand().setIsExecutionAllowed(false);
            return;
        }
    }
}
#method_after
private void updateActionAvailability() {
    getRemoveCommand().setIsExecutionAllowed((getSelectedItems() != null && getSelectedItems().size() > 0));
    if (getRemoveCommand().getIsExecutionAllowed() == false) {
        return;
    }
    Guid entityGuid = getEntityGuid();
    for (Object p : getSelectedItems()) {
        if (!entityGuid.equals(((Permissions) p).getObjectId())) {
            getRemoveCommand().setIsExecutionAllowed(false);
            return;
        }
    }
}
#end_block

#method_before
public permissions getPermission() {
    return permission;
}
#method_after
public Permissions getPermission() {
    return permission;
}
#end_block

#method_before
public void setPermission(permissions value) {
    permission = value;
}
#method_after
public void setPermission(Permissions value) {
    permission = value;
}
#end_block

#method_before
@Override
public Permissions list() {
    Set<permissions> permissions = new TreeSet<permissions>(new PermissionsComparator());
    List<permissions> directPermissions = getBackendCollection(queryType, queryParams);
    permissions.addAll(directPermissions);
    if (queryType.equals(VdcQueryType.GetPermissionsForObject)) {
        permissions.addAll(getInheritedPermissions());
    }
    return mapCollection(permissions);
}
#method_after
@Override
public org.ovirt.engine.api.model.Permissions list() {
    Set<Permissions> permissions = new TreeSet<Permissions>(new PermissionsComparator());
    List<Permissions> directPermissions = getBackendCollection(queryType, queryParams);
    permissions.addAll(directPermissions);
    if (queryType.equals(VdcQueryType.GetPermissionsForObject)) {
        permissions.addAll(getInheritedPermissions());
    }
    return mapCollection(permissions);
}
#end_block

#method_before
private List<permissions> getInheritedPermissions() {
    ((GetPermissionsForObjectParameters) queryParams).setVdcObjectType(objectType);
    ((GetPermissionsForObjectParameters) queryParams).setDirectOnly(false);
    List<permissions> inheritedPermissions = getBackendCollection(queryType, queryParams);
    for (permissions entity : inheritedPermissions) {
        if (objectType != null) {
            entity.setObjectType(objectType);
            entity.setObjectId(targetId);
        }
    }
    return inheritedPermissions;
}
#method_after
private List<Permissions> getInheritedPermissions() {
    ((GetPermissionsForObjectParameters) queryParams).setVdcObjectType(objectType);
    ((GetPermissionsForObjectParameters) queryParams).setDirectOnly(false);
    List<Permissions> inheritedPermissions = getBackendCollection(queryType, queryParams);
    for (Permissions entity : inheritedPermissions) {
        if (objectType != null) {
            entity.setObjectType(objectType);
            entity.setObjectId(targetId);
        }
    }
    return inheritedPermissions;
}
#end_block

#method_before
@Override
public int compare(permissions o1, permissions o2) {
    String id1 = o1.getId().toString();
    String id2 = o2.getId().toString();
    return id1.compareTo(id2);
}
#method_after
@Override
public int compare(Permissions o1, Permissions o2) {
    String id1 = o1.getId().toString();
    String id2 = o2.getId().toString();
    return id1.compareTo(id2);
}
#end_block

#method_before
@Override
public Response add(Permission permission) {
    validateParameters(permission, isPrincipalSubCollection() ? new String[] { "role.id", "dataCenter|cluster|host|storageDomain|vm|vmpool|template.id" } : new String[] { "role.id", "user|group.id" });
    permissions entity = map(permission, getPermissionsTemplate(permission));
    return performCreate(VdcActionType.AddPermission, getPrincipal(entity, permission), new QueryIdResolver<Guid>(VdcQueryType.GetPermissionById, IdQueryParameters.class));
}
#method_after
@Override
public Response add(Permission permission) {
    validateParameters(permission, isPrincipalSubCollection() ? new String[] { "role.id", "dataCenter|cluster|host|storageDomain|vm|vmpool|template.id" } : new String[] { "role.id", "user|group.id" });
    Permissions entity = map(permission, getPermissionsTemplate(permission));
    return performCreate(VdcActionType.AddPermission, getPrincipal(entity, permission), new QueryIdResolver<Guid>(VdcQueryType.GetPermissionById, IdQueryParameters.class));
}
#end_block

#method_before
protected Permissions mapCollection(Set<permissions> entities) {
    Permissions collection = new Permissions();
    for (permissions entity : entities) {
        castEveryonePermissionsToUser(entity);
        Permission permission = map(entity, getUserById(entity.getad_element_id()));
        collection.getPermissions().add(addLinks(permission, permission.getUser() != null ? suggestedParentType : Group.class));
    }
    return collection;
}
#method_after
protected org.ovirt.engine.api.model.Permissions mapCollection(Set<Permissions> entities) {
    org.ovirt.engine.api.model.Permissions collection = new org.ovirt.engine.api.model.Permissions();
    for (Permissions entity : entities) {
        castEveryonePermissionsToUser(entity);
        Permission permission = map(entity, getUserById(entity.getad_element_id()));
        collection.getPermissions().add(addLinks(permission, permission.getUser() != null ? suggestedParentType : Group.class));
    }
    return collection;
}
#end_block

#method_before
private void castEveryonePermissionsToUser(permissions entity) {
    if (entity.getad_element_id() != null && entity.getad_element_id().equals(Guid.EVERYONE) && queryType.equals(VdcQueryType.GetPermissionsByAdElementId)) {
        entity.setad_element_id(this.targetId);
    }
}
#method_after
private void castEveryonePermissionsToUser(Permissions entity) {
    if (entity.getad_element_id() != null && entity.getad_element_id().equals(Guid.EVERYONE) && queryType.equals(VdcQueryType.GetPermissionsByAdElementId)) {
        entity.setad_element_id(this.targetId);
    }
}
#end_block

#method_before
public Permission map(permissions entity, DbUser user) {
    Permission template = new Permission();
    if (entity.getad_element_id() != null) {
        if (isUser(user)) {
            template.setUser(new User());
            template.getUser().setId(entity.getad_element_id().toString());
        } else {
            template.setGroup(new Group());
            template.getGroup().setId(entity.getad_element_id().toString());
        }
    }
    return map(entity, template);
}
#method_after
public Permission map(Permissions entity, DbUser user) {
    Permission template = new Permission();
    if (entity.getad_element_id() != null) {
        if (isUser(user)) {
            template.setUser(new User());
            template.getUser().setId(entity.getad_element_id().toString());
        } else {
            template.setGroup(new Group());
            template.getGroup().setId(entity.getad_element_id().toString());
        }
    }
    return map(entity, template);
}
#end_block

#method_before
protected PermissionsOperationsParameters getPrincipal(permissions entity, Permission permission) {
    PermissionsOperationsParameters ret = null;
    if (isUserSubCollection() || permission.isSetUser()) {
        DbUser user = new DbUser();
        user.setId(isUserSubCollection() ? targetId : asGuid(permission.getUser().getId()));
        user.setDomain(getCurrent().get(Principal.class).getDomain());
        ret = new PermissionsOperationsParameters(entity, user);
    } else if (isGroupSubCollection() || permission.isSetGroup()) {
        DbGroup group = new DbGroup();
        group.setId(isGroupSubCollection() ? targetId : asGuid(permission.getGroup().getId()));
        group.setDomain(getCurrent().get(Principal.class).getDomain());
        ret = new PermissionsOperationsParameters(entity, group);
    }
    return ret;
}
#method_after
protected PermissionsOperationsParameters getPrincipal(Permissions entity, Permission permission) {
    PermissionsOperationsParameters ret = null;
    if (isUserSubCollection() || permission.isSetUser()) {
        DbUser user = new DbUser();
        user.setId(isUserSubCollection() ? targetId : asGuid(permission.getUser().getId()));
        user.setDomain(getCurrent().get(Principal.class).getDomain());
        ret = new PermissionsOperationsParameters(entity, user);
    } else if (isGroupSubCollection() || permission.isSetGroup()) {
        DbGroup group = new DbGroup();
        group.setId(isGroupSubCollection() ? targetId : asGuid(permission.getGroup().getId()));
        group.setDomain(getCurrent().get(Principal.class).getDomain());
        ret = new PermissionsOperationsParameters(entity, group);
    }
    return ret;
}
#end_block

#method_before
protected permissions getPermissionsTemplate(Permission perm) {
    permissions permission = new permissions();
    // representation
    if (isPrincipalSubCollection()) {
        permission.setad_element_id(targetId);
        permission.setObjectId(getMapper(Permission.class, Guid.class).map(perm, null));
    } else {
        if (perm.getUser() != null) {
            permission.setad_element_id(asGuid(perm.getUser().getId()));
        } else {
            // if user is null, group is not null; this was validated before
            permission.setad_element_id(asGuid(perm.getGroup().getId()));
        }
        permission.setObjectId(targetId);
        permission.setObjectType(objectType);
    }
    return permission;
}
#method_after
protected Permissions getPermissionsTemplate(Permission perm) {
    Permissions permission = new Permissions();
    // representation
    if (isPrincipalSubCollection()) {
        permission.setad_element_id(targetId);
        permission.setObjectId(getMapper(Permission.class, Guid.class).map(perm, null));
    } else {
        if (perm.getUser() != null) {
            permission.setad_element_id(asGuid(perm.getUser().getId()));
        } else {
            // if user is null, group is not null; this was validated before
            permission.setad_element_id(asGuid(perm.getGroup().getId()));
        }
        permission.setObjectId(targetId);
        permission.setObjectType(objectType);
    }
    return permission;
}
#end_block

#method_before
protected permissions getPermissions(String id) {
    return getEntity(permissions.class, VdcQueryType.GetPermissionById, new IdQueryParameters(new Guid(id)), id);
}
#method_after
protected Permissions getPermissions(String id) {
    return getEntity(Permissions.class, VdcQueryType.GetPermissionById, new IdQueryParameters(new Guid(id)), id);
}
#end_block

#method_before
@Override
protected Permission doPopulate(Permission model, permissions entity) {
    return model;
}
#method_after
@Override
protected Permission doPopulate(Permission model, Permissions entity) {
    return model;
}
#end_block

#method_before
@Override
protected void syncSearch() {
    super.syncSearch();
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            SystemPermissionListModel systemPermissionListModel = (SystemPermissionListModel) model;
            systemPermissionListModel.setItems((Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue());
        }
    };
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(false);
    Frontend.RunQuery(VdcQueryType.GetSystemPermissions, params, _asyncQuery);
}
#method_after
@Override
protected void syncSearch() {
    super.syncSearch();
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void onSuccess(Object model, Object ReturnValue) {
            SystemPermissionListModel systemPermissionListModel = (SystemPermissionListModel) model;
            systemPermissionListModel.setItems((Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue());
        }
    };
    VdcQueryParametersBase params = new VdcQueryParametersBase();
    params.setRefresh(false);
    Frontend.getInstance().runQuery(VdcQueryType.GetSystemPermissions, params, _asyncQuery);
}
#end_block

#method_before
private void onAttach() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (model.getSelectedItems() == null) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    for (Object item : model.getItems()) {
        EntityModel entityModel = (EntityModel) item;
        if (entityModel.getIsSelected()) {
            items.add((DbUser) entityModel.getEntity());
        }
    }
    Role role = (Role) model.getRole().getSelectedItem();
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (DbUser user : items) {
        permissions tempVar = new permissions();
        tempVar.setad_element_id(user.getId());
        tempVar.setrole_id(role.getId());
        permissions perm = tempVar;
        if (user.isGroup()) {
            DbGroup group = new DbGroup();
            group.setId(user.getId());
            group.setName(user.getFirstName());
            group.setDomain(user.getDomain());
            PermissionsOperationsParameters tempVar2 = new PermissionsOperationsParameters();
            tempVar2.setPermission(perm);
            tempVar2.setGroup(group);
            list.add(tempVar2);
        } else {
            PermissionsOperationsParameters tempVar3 = new PermissionsOperationsParameters();
            tempVar3.setPermission(perm);
            tempVar3.setUser(user);
            list.add(tempVar3);
        }
    }
    model.startProgress(null);
    Frontend.RunMultipleAction(VdcActionType.AddSystemPermission, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            AdElementListModel localModel = (AdElementListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#method_after
private void onAttach() {
    AdElementListModel model = (AdElementListModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (model.getSelectedItems() == null) {
        cancel();
        return;
    }
    ArrayList<DbUser> items = new ArrayList<DbUser>();
    for (Object item : model.getItems()) {
        EntityModel entityModel = (EntityModel) item;
        if (entityModel.getIsSelected()) {
            items.add((DbUser) entityModel.getEntity());
        }
    }
    Role role = (Role) model.getRole().getSelectedItem();
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (DbUser user : items) {
        Permissions tempVar = new Permissions();
        tempVar.setad_element_id(user.getId());
        tempVar.setrole_id(role.getId());
        Permissions perm = tempVar;
        if (user.isGroup()) {
            DbGroup group = new DbGroup();
            group.setId(user.getId());
            group.setName(user.getFirstName());
            group.setDomain(user.getDomain());
            PermissionsOperationsParameters tempVar2 = new PermissionsOperationsParameters();
            tempVar2.setPermission(perm);
            tempVar2.setGroup(group);
            list.add(tempVar2);
        } else {
            PermissionsOperationsParameters tempVar3 = new PermissionsOperationsParameters();
            tempVar3.setPermission(perm);
            tempVar3.setUser(user);
            list.add(tempVar3);
        }
    }
    model.startProgress(null);
    Frontend.getInstance().runMultipleAction(VdcActionType.AddSystemPermission, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            AdElementListModel localModel = (AdElementListModel) result.getState();
            localModel.stopProgress();
            cancel();
        }
    }, model);
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeSystemPermissionsTitle());
    // $NON-NLS-1$
    model.setHashName("remove_system_permission");
    model.setMessage(ConstantsManager.getInstance().getConstants().systemPermissionsMsg());
    model.setItems(getSelectedItems());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeSystemPermissionsTitle());
    // $NON-NLS-1$
    model.setHashName("remove_system_permission");
    model.setItems(getSelectedItems());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void onRemove() {
    if (getSelectedItems() != null && getSelectedItems().size() > 0) {
        ConfirmationModel model = (ConfirmationModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object perm : getSelectedItems()) {
            PermissionsOperationsParameters tempVar = new PermissionsOperationsParameters();
            tempVar.setPermission((permissions) perm);
            list.add(tempVar);
        }
        model.startProgress(null);
        Frontend.RunMultipleAction(VdcActionType.RemovePermission, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ConfirmationModel localModel = (ConfirmationModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#method_after
private void onRemove() {
    if (getSelectedItems() != null && getSelectedItems().size() > 0) {
        ConfirmationModel model = (ConfirmationModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
        for (Object perm : getSelectedItems()) {
            PermissionsOperationsParameters tempVar = new PermissionsOperationsParameters();
            tempVar.setPermission((Permissions) perm);
            list.add(tempVar);
        }
        model.startProgress(null);
        Frontend.getInstance().runMultipleAction(VdcActionType.RemoveSystemPermission, list, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void executed(FrontendMultipleActionAsyncResult result) {
                ConfirmationModel localModel = (ConfirmationModel) result.getState();
                localModel.stopProgress();
                cancel();
            }
        }, model);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    permissions perm = getParameters().getPermission();
    if (perm == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_PERMISSION_NOT_SENT);
        return false;
    }
    Role role = getRoleDao().get(perm.getrole_id());
    Guid adElementId = perm.getad_element_id();
    if (role == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_ROLE_ID);
        return false;
    }
    if (perm.getObjectType() == null || getVdcObjectName() == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_OBJECT_ID);
        return false;
    }
    // user or group
    if ((adElementId == null) || (getParameters().getUser() != null && !getParameters().getUser().getId().equals(adElementId)) || (getParameters().getGroup() != null && !getParameters().getGroup().getId().equals(adElementId))) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_USER_ID_MISMATCH);
        return false;
    }
    // give permission
    if (getParameters().getUser() == null && getParameters().getGroup() == null && getDbUserDAO().get(adElementId) == null && getAdGroupDAO().get(adElementId) == null) {
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.USER_MUST_EXIST_IN_DB.toString());
        return false;
    }
    // only system super user can give permissions with admin roles
    if (!isSystemSuperUser() && role.getType() == RoleType.ADMIN) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_GIVE_ADMIN_ROLES);
        return false;
    }
    // don't allow adding permissions to vms from pool externally
    if (!isInternalExecution() && perm.getObjectType() == VdcObjectType.VM) {
        VM vm = getVmDAO().get(perm.getObjectId());
        if (vm != null && vm.getVmPoolId() != null) {
            addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_VM_IN_POOL);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    Permissions perm = getParameters().getPermission();
    if (perm == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_PERMISSION_NOT_SENT);
        return false;
    }
    Role role = getRoleDao().get(perm.getrole_id());
    Guid adElementId = perm.getad_element_id();
    if (role == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_ROLE_ID);
        return false;
    }
    if (perm.getObjectType() == null || getVdcObjectName() == null) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_INVALID_OBJECT_ID);
        return false;
    }
    // user or group
    if ((adElementId == null) || (getParameters().getUser() != null && !getParameters().getUser().getId().equals(adElementId)) || (getParameters().getGroup() != null && !getParameters().getGroup().getId().equals(adElementId))) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_USER_ID_MISMATCH);
        return false;
    }
    // give permission
    if (getParameters().getUser() == null && getParameters().getGroup() == null && getDbUserDAO().get(adElementId) == null && getAdGroupDAO().get(adElementId) == null) {
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.USER_MUST_EXIST_IN_DB.toString());
        return false;
    }
    // only system super user can give permissions with admin roles
    if (!isSystemSuperUser() && role.getType() == RoleType.ADMIN) {
        addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_GIVE_ADMIN_ROLES);
        return false;
    }
    // don't allow adding permissions to vms from pool externally
    if (!isInternalExecution() && perm.getObjectType() == VdcObjectType.VM) {
        VM vm = getVmDAO().get(perm.getObjectId());
        if (vm != null && vm.getVmPoolId() != null) {
            addCanDoActionMessage(VdcBllMessages.PERMISSION_ADD_FAILED_VM_IN_POOL);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // Get the parameters:
    T parameters = getParameters();
    // The user or group given in the parameters may haven't been added to
    // the database yet, this will be the case if they don't have an
    // internal identifier, if this is the case then they need to be
    // added to the database now, before the permission:
    final DbUser user = parameters.getUser();
    if (user != null && user.getId() == null) {
        user.setId(Guid.newGuid());
        getDbUserDAO().save(user);
    }
    final DbGroup group = parameters.getGroup();
    if (group != null && group.getId() == null) {
        group.setId(Guid.newGuid());
        getAdGroupDAO().save(group);
    }
    final permissions paramPermission = parameters.getPermission();
    permissions permission = getPermissionDAO().getForRoleAndAdElementAndObject(paramPermission.getrole_id(), paramPermission.getad_element_id(), paramPermission.getObjectId());
    if (permission == null) {
        paramPermission.setId(Guid.newGuid());
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getPermissionDAO().save(paramPermission);
                getCompensationContext().snapshotNewEntity(paramPermission);
                getCompensationContext().stateChanged();
                return null;
            }
        });
        permission = paramPermission;
    }
    getReturnValue().setActionReturnValue(permission.getId());
    if (user != null) {
        updateAdminStatus(permission);
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    // Get the parameters:
    T parameters = getParameters();
    // The user or group given in the parameters may haven't been added to
    // the database yet, this will be the case if they don't have an
    // internal identifier, if this is the case then they need to be
    // added to the database now, before the permission:
    final DbUser user = parameters.getUser();
    if (user != null && user.getId() == null) {
        user.setId(Guid.newGuid());
        getDbUserDAO().save(user);
    }
    final DbGroup group = parameters.getGroup();
    if (group != null && group.getId() == null) {
        group.setId(Guid.newGuid());
        getAdGroupDAO().save(group);
    }
    final Permissions paramPermission = parameters.getPermission();
    Permissions permission = getPermissionDAO().getForRoleAndAdElementAndObject(paramPermission.getrole_id(), paramPermission.getad_element_id(), paramPermission.getObjectId());
    if (permission == null) {
        paramPermission.setId(Guid.newGuid());
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getPermissionDAO().save(paramPermission);
                getCompensationContext().snapshotNewEntity(paramPermission);
                getCompensationContext().stateChanged();
                return null;
            }
        });
        permission = paramPermission;
    }
    getReturnValue().setActionReturnValue(permission.getId());
    if (user != null) {
        updateAdminStatus(permission);
    }
    setSucceeded(true);
}
#end_block

#method_before
private void updateAdminStatus(permissions perm) {
    // if the role of the permission is of type admin update the user
    // lastAdminCheckStatus to true
    Role role = getRoleDao().get(perm.getrole_id());
    if (role.getType() == RoleType.ADMIN) {
        MultiLevelAdministrationHandler.setIsAdminGUIFlag(perm.getad_element_id(), true);
    }
}
#method_after
private void updateAdminStatus(Permissions perm) {
    // if the role of the permission is of type admin update the user
    // lastAdminCheckStatus to true
    Role role = getRoleDao().get(perm.getrole_id());
    if (role.getType() == RoleType.ADMIN) {
        MultiLevelAdministrationHandler.setIsAdminGUIFlag(perm.getad_element_id(), true);
    }
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    permissions permission = getParameters().getPermission();
    List<PermissionSubject> permissionsSubject = new ArrayList<>();
    permissionsSubject.add(new PermissionSubject(permission.getObjectId(), permission.getObjectType(), getActionType().getActionGroup()));
    initUserAndGroupData();
    // user from the directory service
    if (getParameters().getUser() != null && _dbUser == null) {
        permissionsSubject.add(new PermissionSubject(MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, VdcObjectType.System, VdcActionType.AddUser.getActionGroup()));
    }
    return permissionsSubject;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    Permissions permission = getParameters().getPermission();
    List<PermissionSubject> permissionsSubject = new ArrayList<>();
    permissionsSubject.add(new PermissionSubject(permission.getObjectId(), permission.getObjectType(), getActionType().getActionGroup()));
    initUserAndGroupData();
    // user from the directory service
    if (getParameters().getUser() != null && _dbUser == null) {
        permissionsSubject.add(new PermissionSubject(MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, VdcObjectType.System, VdcActionType.AddUser.getActionGroup()));
    }
    return permissionsSubject;
}
#end_block

#method_before
void localize() {
    // Boot Options
    runAsStatelessEditor.setLabel(constants.runOncePopupRunAsStatelessLabel());
    runAndPauseEditor.setLabel(constants.runOncePopupRunAndPauseLabel());
    attachFloppyEditor.setLabel(constants.runOncePopupAttachFloppyLabel());
    attachIsoEditor.setLabel(constants.runOncePopupAttachIsoLabel());
    bootSequenceLabel.setText(constants.runOncePopupBootSequenceLabel());
    // Linux Boot Options
    kernelPathEditor.setLabel(constants.runOncePopupKernelPathLabel());
    initrdPathEditor.setLabel(constants.runOncePopupInitrdPathLabel());
    kernelParamsEditor.setLabel(constants.runOncePopupKernelParamsLabel());
    // WindowsSysprep
    sysprepToEnableLabel.setText(constants.runOnceSysPrepToEnableLabel());
    sysPrepDomainNameListBoxEditor.setLabel(constants.runOncePopupSysPrepDomainNameLabel());
    useAlternateCredentialsEditor.setLabel(constants.runOnceUseAlternateCredentialsLabel());
    sysPrepUserNameEditor.setLabel(constants.runOncePopupSysPrepUserNameLabel());
    sysPrepPasswordEditor.setLabel(constants.runOncePopupSysPrepPasswordLabel());
    // Linux Cloud-Init
    cloudInitEnabledEditor.setLabel(constants.runOncePopupCloudInitLabel());
    // Display Protocol
    displayConsoleVncEditor.setLabel(constants.runOncePopupDisplayConsoleVncLabel());
    displayConsoleSpiceEditor.setLabel(constants.runOncePopupDisplayConsoleSpiceLabel());
    // Host Tab
    isAutoAssignEditor.setLabel(constants.anyHostInClusterVmPopup());
}
#method_after
void localize() {
    // Boot Options
    runAsStatelessEditor.setLabel(constants.runOncePopupRunAsStatelessLabel());
    runAndPauseEditor.setLabel(constants.runOncePopupRunAndPauseLabel());
    attachFloppyEditor.setLabel(constants.runOncePopupAttachFloppyLabel());
    attachIsoEditor.setLabel(constants.runOncePopupAttachIsoLabel());
    bootSequenceLabel.setText(constants.runOncePopupBootSequenceLabel());
    // Linux Boot Options
    kernelPathEditor.setLabel(constants.runOncePopupKernelPathLabel());
    initrdPathEditor.setLabel(constants.runOncePopupInitrdPathLabel());
    kernelParamsEditor.setLabel(constants.runOncePopupKernelParamsLabel());
    // WindowsSysprep
    sysprepToEnableLabel.setText(constants.runOnceSysPrepToEnableLabel());
    sysPrepDomainNameListBoxEditor.setLabel(constants.runOncePopupSysPrepDomainNameLabel());
    useAlternateCredentialsEditor.setLabel(constants.runOnceUseAlternateCredentialsLabel());
    sysPrepUserNameEditor.setLabel(constants.runOncePopupSysPrepUserNameLabel());
    sysPrepPasswordEditor.setLabel(constants.runOncePopupSysPrepPasswordLabel());
    // Linux Cloud-Init
    cloudInitEnabledEditor.setLabel(constants.runOncePopupCloudInitLabel());
    // Display Protocol
    displayConsoleVncEditor.setLabel(constants.runOncePopupDisplayConsoleVncLabel());
    vncKeyboardLayoutEditor.setLabel(constants.vncKeyboardLayoutVmPopup());
    displayConsoleSpiceEditor.setLabel(constants.runOncePopupDisplayConsoleSpiceLabel());
    // Host Tab
    isAutoAssignEditor.setLabel(constants.anyHostInClusterVmPopup());
}
#end_block

#method_before
private void addStyles() {
    importGlusterConfigurationEditor.addContentWidgetStyleName(style.editorContentWidget());
    migrateOnErrorOption_NOEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_YESEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_HA_ONLYEditor.addContentWidgetStyleName(style.label());
    countThreadsAsCoresEditor.setContentWidgetStyleName(style.fullWidth());
    enableTrustedServiceEditor.setContentWidgetStyleName(style.fullWidth());
}
#method_after
private void addStyles() {
    importGlusterConfigurationEditor.addContentWidgetStyleName(style.editorContentWidget());
    migrateOnErrorOption_NOEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_YESEditor.addContentWidgetStyleName(style.label());
    migrateOnErrorOption_HA_ONLYEditor.addContentWidgetStyleName(style.label());
    countThreadsAsCoresEditor.setContentWidgetStyleName(style.fullWidth());
    enableTrustedServiceEditor.setContentWidgetStyleName(style.fullWidth());
    enableHaReservationEditor.setContentWidgetStyleName(style.fullWidth());
}
#end_block

#method_before
private void localize(ApplicationConstants constants) {
    generalTab.setLabel(constants.clusterPopupGeneralTabLabel());
    dataCenterEditor.setLabel(constants.clusterPopupDataCenterLabel());
    nameEditor.setLabel(constants.clusterPopupNameLabel());
    descriptionEditor.setLabel(constants.clusterPopupDescriptionLabel());
    commentEditor.setLabel(constants.commentLabel());
    cPUEditor.setLabel(constants.clusterPopupCPULabel());
    architectureEditor.setLabel(constants.clusterPopupArchitectureLabel());
    versionEditor.setLabel(constants.clusterPopupVersionLabel());
    enableOvirtServiceEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    enableOvirtServiceOptionEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceOptionEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    importGlusterConfigurationEditor.setLabel(constants.clusterImportGlusterConfigurationLabel());
    importGlusterExplanationLabel.setText(constants.clusterImportGlusterConfigurationExplanationLabel());
    glusterHostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    glusterHostFingerprintEditor.setLabel(constants.hostPopupHostFingerprintLabel());
    glusterHostPasswordEditor.setLabel(constants.hostPopupPasswordLabel());
    optimizationTab.setLabel(constants.clusterPopupOptimizationTabLabel());
    memoryOptimizationPanelTitle.setText(constants.clusterPopupMemoryOptimizationPanelTitle());
    optimizationNoneEditor.asRadioButton().setHTML(templates.radioButtonLabel(constants.clusterPopupOptimizationNoneLabel()));
    cpuThreadsPanelTitle.setText(constants.clusterPopupCpuThreadsPanelTitle());
    countThreadsAsCoresEditor.setLabel(constants.clusterPopupCountThreadsAsCoresLabel());
    resiliencePolicyTab.setLabel(constants.clusterPopupResiliencePolicyTabLabel());
    migrateOnErrorOption_YESEditor.setLabel(constants.clusterPopupMigrateOnError_YesLabel());
    migrateOnErrorOption_HA_ONLYEditor.setLabel(constants.clusterPopupMigrateOnError_HaLabel());
    migrateOnErrorOption_NOEditor.setLabel(constants.clusterPopupMigrateOnError_NoLabel());
    clusterPolicyTab.setLabel(constants.clusterPopupClusterPolicyTabLabel());
    additionPropsPanelTitle.setText(constants.clusterPolicyAdditionalPropsPanelTitle());
    enableTrustedServiceEditor.setLabel(constants.clusterPolicyEnableTrustedServiceLabel());
    clusterPolicyEditor.setLabel(constants.clusterPolicySelectPolicyLabel());
    enableBallooning.setLabel(constants.enableBallooningLabel());
    schedulerOptimizationPanelTitle.setText(constants.schedulerOptimizationPanelLabel());
    optimizeForUtilizationEditor.setLabel(constants.optimizeForUtilizationLabel());
    optimizeForSpeedEditor.setLabel(constants.optimizeForSpeedLabel());
    guarantyResourcesEditor.setLabel(constants.guarantyResourcesLabel());
    allowOverbookingEditor.setLabel(constants.allowOverbookingLabel());
    spiceProxyEditor.setLabel(constants.overriddenSpiceProxyAddress());
    consoleTab.setLabel(constants.consoleTabLabel());
}
#method_after
private void localize(ApplicationConstants constants) {
    generalTab.setLabel(constants.clusterPopupGeneralTabLabel());
    dataCenterEditor.setLabel(constants.clusterPopupDataCenterLabel());
    nameEditor.setLabel(constants.clusterPopupNameLabel());
    descriptionEditor.setLabel(constants.clusterPopupDescriptionLabel());
    commentEditor.setLabel(constants.commentLabel());
    cPUEditor.setLabel(constants.clusterPopupCPULabel());
    architectureEditor.setLabel(constants.clusterPopupArchitectureLabel());
    versionEditor.setLabel(constants.clusterPopupVersionLabel());
    enableOvirtServiceEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    enableOvirtServiceOptionEditor.setLabel(constants.clusterEnableOvirtServiceLabel());
    enableGlusterServiceOptionEditor.setLabel(constants.clusterEnableGlusterServiceLabel());
    importGlusterConfigurationEditor.setLabel(constants.clusterImportGlusterConfigurationLabel());
    importGlusterExplanationLabel.setText(constants.clusterImportGlusterConfigurationExplanationLabel());
    glusterHostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    glusterHostFingerprintEditor.setLabel(constants.hostPopupHostFingerprintLabel());
    glusterHostPasswordEditor.setLabel(constants.hostPopupPasswordLabel());
    optimizationTab.setLabel(constants.clusterPopupOptimizationTabLabel());
    memoryOptimizationPanelTitle.setText(constants.clusterPopupMemoryOptimizationPanelTitle());
    optimizationNoneEditor.asRadioButton().setHTML(templates.radioButtonLabel(constants.clusterPopupOptimizationNoneLabel()));
    cpuThreadsPanelTitle.setText(constants.clusterPopupCpuThreadsPanelTitle());
    countThreadsAsCoresEditor.setLabel(constants.clusterPopupCountThreadsAsCoresLabel());
    resiliencePolicyTab.setLabel(constants.clusterPopupResiliencePolicyTabLabel());
    migrateOnErrorOption_YESEditor.setLabel(constants.clusterPopupMigrateOnError_YesLabel());
    migrateOnErrorOption_HA_ONLYEditor.setLabel(constants.clusterPopupMigrateOnError_HaLabel());
    migrateOnErrorOption_NOEditor.setLabel(constants.clusterPopupMigrateOnError_NoLabel());
    clusterPolicyTab.setLabel(constants.clusterPopupClusterPolicyTabLabel());
    additionPropsPanelTitle.setText(constants.clusterPolicyAdditionalPropsPanelTitle());
    enableTrustedServiceEditor.setLabel(constants.clusterPolicyEnableTrustedServiceLabel());
    enableHaReservationEditor.setLabel(constants.clusterPolicyEnableHaReservationLabel());
    clusterPolicyEditor.setLabel(constants.clusterPolicySelectPolicyLabel());
    enableBallooning.setLabel(constants.enableBallooningLabel());
    schedulerOptimizationPanelTitle.setText(constants.schedulerOptimizationPanelLabel());
    optimizeForUtilizationEditor.setLabel(constants.optimizeForUtilizationLabel());
    optimizeForSpeedEditor.setLabel(constants.optimizeForSpeedLabel());
    guarantyResourcesEditor.setLabel(constants.guarantyResourcesLabel());
    allowOverbookingEditor.setLabel(constants.allowOverbookingLabel());
    spiceProxyEditor.setLabel(constants.overriddenSpiceProxyAddress());
    consoleTab.setLabel(constants.consoleTabLabel());
}
#end_block

#method_before
private void initCheckBoxEditors() {
    importGlusterConfigurationEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    countThreadsAsCoresEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableTrustedServiceEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableBallooning = new EntityModelCheckBoxEditor(Align.RIGHT);
    // $NON-NLS-1$
    enableBallooning.getContentWidgetContainer().setWidth("350px");
}
#method_after
private void initCheckBoxEditors() {
    importGlusterConfigurationEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    countThreadsAsCoresEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableTrustedServiceEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableHaReservationEditor = new EntityModelCheckBoxEditor(Align.RIGHT);
    enableBallooning = new EntityModelCheckBoxEditor(Align.RIGHT);
    // $NON-NLS-1$
    enableBallooning.getContentWidgetContainer().setWidth("350px");
}
#end_block

#method_before
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterWithClusterEditor = new ListModelTypeAheadListBoxEditor<DataCenterWithCluster>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<DataCenterWithCluster>() {

        @Override
        public String getReplacementStringNullSafe(DataCenterWithCluster data) {
            return // $NON-NLS-1$
            data.getCluster().getName() + "/" + data.getDataCenter().getName();
        }

        @Override
        public String getDisplayStringNullSafe(DataCenterWithCluster data) {
            String dcDescription = data.getDataCenter().getdescription();
            return typeAheadNameDescriptionTemplateNullSafe(data.getCluster().getName(), !StringHelper.isNullOrEmpty(dcDescription) ? dcDescription : data.getDataCenter().getName());
        }
    }, new ModeSwitchingVisibilityRenderer());
    quotaEditor = new ListModelTypeAheadListBoxEditor<Quota>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<Quota>() {

        @Override
        public String getReplacementStringNullSafe(Quota data) {
            return data.getQuotaName();
        }

        @Override
        public String getDisplayStringNullSafe(Quota data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getQuotaName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    templateEditor = new ListModelTypeAheadListBoxEditor<VmTemplate>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<VmTemplate>() {

        @Override
        public String getReplacementStringNullSafe(VmTemplate data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(VmTemplate data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    oSTypeEditor = new ListModelListBoxEditor<Integer>(new AbstractRenderer<Integer>() {

        @Override
        public String render(Integer object) {
            return AsyncDataProvider.getOsName(object);
        }
    }, new ModeSwitchingVisibilityRenderer());
    vmTypeEditor = new ListModelListBoxEditor<VmType>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfSocketsEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    corePerSocketEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<EntityModel<VmPoolType>>(new NullSafeRenderer<EntityModel<VmPoolType>>() {

        @Override
        public String renderNullSafe(EntityModel<VmPoolType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    timeZoneEditor = new ListModelListBoxEditor<TimeZoneModel>(new NullSafeRenderer<TimeZoneModel>() {

        @Override
        public String renderNullSafe(TimeZoneModel timeZone) {
            if (timeZone.isDefault()) {
                return messages.defaultTimeZoneCaption(timeZone.getDisplayValue());
            } else {
                return timeZone.getDisplayValue();
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<EntityModel<DisplayType>>(new NullSafeRenderer<EntityModel<DisplayType>>() {

        @Override
        public String renderNullSafe(EntityModel<DisplayType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    usbSupportEditor = new ListModelListBoxEditor<UsbPolicy>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Integer>(new NullSafeRenderer<Integer>() {

        @Override
        public String renderNullSafe(Integer object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<String>(new AbstractRenderer<String>() {

        final String globalLayout = (String) AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VncKeyboardLayout);

        @Override
        public String render(String object) {
            if (object == null) {
                return messages.globalVncKeyboardLayoutCaption(globalLayout);
            } else {
                return object;
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    isAutoAssignEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("runVmOnHostGroup", new ModeSwitchingVisibilityRenderer());
    defaultHostEditor = new ListModelListBoxEditor<VDS>(new NullSafeRenderer<VDS>() {

        @Override
        public String renderNullSafe(VDS object) {
            return object.getName();
        }
    }, new ModeSwitchingVisibilityRenderer());
    migrationModeEditor = new ListModelListBoxEditor<MigrationSupport>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    // Resource Allocation
    provisioningThinEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    provisioningCloneEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    secondBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    cdImageEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object;
        }
    }, new ModeSwitchingVisibilityRenderer());
    cpuSharesAmountSelectionEditor = new ListModelListBoxOnlyEditor<UnitVmModel.CpuSharesAmount>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
}
#method_after
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterWithClusterEditor = new ListModelTypeAheadListBoxEditor<DataCenterWithCluster>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<DataCenterWithCluster>() {

        @Override
        public String getReplacementStringNullSafe(DataCenterWithCluster data) {
            return // $NON-NLS-1$
            data.getCluster().getName() + "/" + data.getDataCenter().getName();
        }

        @Override
        public String getDisplayStringNullSafe(DataCenterWithCluster data) {
            String dcDescription = data.getDataCenter().getdescription();
            return typeAheadNameDescriptionTemplateNullSafe(data.getCluster().getName(), !StringHelper.isNullOrEmpty(dcDescription) ? dcDescription : data.getDataCenter().getName());
        }
    }, new ModeSwitchingVisibilityRenderer());
    quotaEditor = new ListModelTypeAheadListBoxEditor<Quota>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<Quota>() {

        @Override
        public String getReplacementStringNullSafe(Quota data) {
            return data.getQuotaName();
        }

        @Override
        public String getDisplayStringNullSafe(Quota data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getQuotaName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    templateEditor = new ListModelTypeAheadListBoxEditor<VmTemplate>(new ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<VmTemplate>() {

        @Override
        public String getReplacementStringNullSafe(VmTemplate data) {
            return data.getName();
        }

        @Override
        public String getDisplayStringNullSafe(VmTemplate data) {
            return typeAheadNameDescriptionTemplateNullSafe(data.getName(), data.getDescription());
        }
    }, new ModeSwitchingVisibilityRenderer());
    oSTypeEditor = new ListModelListBoxEditor<Integer>(new AbstractRenderer<Integer>() {

        @Override
        public String render(Integer object) {
            return AsyncDataProvider.getOsName(object);
        }
    }, new ModeSwitchingVisibilityRenderer());
    vmTypeEditor = new ListModelListBoxEditor<VmType>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfSocketsEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    corePerSocketEditor = new ListModelListBoxEditor<Integer>(new ModeSwitchingVisibilityRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<EntityModel<VmPoolType>>(new NullSafeRenderer<EntityModel<VmPoolType>>() {

        @Override
        public String renderNullSafe(EntityModel<VmPoolType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    timeZoneEditor = new ListModelListBoxEditor<TimeZoneModel>(new NullSafeRenderer<TimeZoneModel>() {

        @Override
        public String renderNullSafe(TimeZoneModel timeZone) {
            if (timeZone.isDefault()) {
                return messages.defaultTimeZoneCaption(timeZone.getDisplayValue());
            } else {
                return timeZone.getDisplayValue();
            }
        }
    }, new ModeSwitchingVisibilityRenderer());
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<EntityModel<DisplayType>>(new NullSafeRenderer<EntityModel<DisplayType>>() {

        @Override
        public String renderNullSafe(EntityModel<DisplayType> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    usbSupportEditor = new ListModelListBoxEditor<UsbPolicy>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Integer>(new NullSafeRenderer<Integer>() {

        @Override
        public String renderNullSafe(Integer object) {
            return object.toString();
        }
    }, new ModeSwitchingVisibilityRenderer());
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<String>(new VncKeyMapRenderer(messages));
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    isAutoAssignEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("runVmOnHostGroup", new ModeSwitchingVisibilityRenderer());
    defaultHostEditor = new ListModelListBoxEditor<VDS>(new NullSafeRenderer<VDS>() {

        @Override
        public String renderNullSafe(VDS object) {
            return object.getName();
        }
    }, new ModeSwitchingVisibilityRenderer());
    migrationModeEditor = new ListModelListBoxEditor<MigrationSupport>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
    // Resource Allocation
    provisioningThinEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    provisioningCloneEditor = // $NON-NLS-1$
    new EntityModelRadioButtonEditor("provisioningGroup", new ModeSwitchingVisibilityRenderer());
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    secondBootDeviceEditor = new ListModelListBoxEditor<EntityModel<BootSequence>>(new NullSafeRenderer<EntityModel<BootSequence>>() {

        @Override
        public String renderNullSafe(EntityModel<BootSequence> object) {
            return object.getTitle();
        }
    }, new ModeSwitchingVisibilityRenderer());
    cdImageEditor = new ListModelListBoxEditor<String>(new NullSafeRenderer<String>() {

        @Override
        public String renderNullSafe(String object) {
            return object;
        }
    }, new ModeSwitchingVisibilityRenderer());
    cpuSharesAmountSelectionEditor = new ListModelListBoxOnlyEditor<UnitVmModel.CpuSharesAmount>(new EnumRenderer(), new ModeSwitchingVisibilityRenderer());
}
#end_block

#method_before
protected void init(Set<String> allKeys, Set<String> usedKeys) {
    this.allKeys = new HashSet<String>(allKeys);
    this.usedKeys = new HashSet<String>(usedKeys);
    List<KeyValueLineModel> list = new ArrayList<KeyValueLineModel>();
    KeyValueLineModel lineModel;
    disableEvent = true;
    for (String key : usedKeys) {
        lineModel = createNewLineModel(key);
        lineModel.getKeys().setSelectedItem(key);
        fillLineModel(lineModel, key);
        list.add(lineModel);
    }
    disableEvent = false;
    setItems(list);
}
#method_after
protected void init(Set<String> allKeys, Set<String> usedKeys) {
    this.allKeys = new HashSet<String>(allKeys);
    this.usedKeys = new HashSet<String>(usedKeys);
    List<KeyValueLineModel> list = new ArrayList<KeyValueLineModel>();
    disableEvent = true;
    for (String key : usedKeys) {
        KeyValueLineModel lineModel = createNewLineModel(key);
        lineModel.getKeys().setSelectedItem(key);
        setValueByKey(lineModel, key);
        list.add(lineModel);
    }
    disableEvent = false;
    setItems(list);
}
#end_block

#method_before
public List<String> getAvailableKeys(String key) {
    List<String> list = getAvailableKeys();
    boolean realKey = isKeyValid(key);
    if (realKey && !list.contains(key)) {
        list.add(0, key);
    }
    list.remove(selectKey);
    list.remove(noKeys);
    if (!realKey) {
        if (list.size() > 0) {
            list.add(0, selectKey);
        } else {
            list.add(noKeys);
        }
    }
    return list;
}
#method_after
private List<String> getAvailableKeys(String key) {
    List<String> list = getAvailableKeys();
    boolean realKey = isKeyValid(key);
    if (realKey && !list.contains(key)) {
        list.add(0, key);
    }
    list.remove(selectKey);
    list.remove(noKeys);
    if (!realKey) {
        if (list.size() > 0) {
            list.add(0, selectKey);
        } else {
            list.add(noKeys);
        }
    }
    return list;
}
#end_block

#method_before
public List<String> getAvailableKeys() {
    List<String> list = (allKeys == null) ? new LinkedList<String>() : new LinkedList<String>(allKeys);
    list.removeAll(getUsedKeys());
    if (list.size() > 0) {
        list.add(0, selectKey);
    } else {
        list.add(noKeys);
    }
    return list;
}
#method_after
private List<String> getAvailableKeys() {
    List<String> list = (allKeys == null) ? new LinkedList<String>() : new LinkedList<String>(allKeys);
    list.removeAll(getUsedKeys());
    if (list.size() > 0) {
        list.add(0, selectKey);
    } else {
        list.add(noKeys);
    }
    return list;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getNic() == null) {
        return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST);
    }
    if (NetworkUtils.isLabeled(getNic()) || !getNic().getLabels().contains(getLabel())) {
        return failCanDoAction(VdcBllMessages.INTERFACE_NOT_LABELED);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getNic() == null) {
        return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST);
    }
    if (!NetworkUtils.isLabeled(getNic()) || !getNic().getLabels().contains(getLabel())) {
        return failCanDoAction(VdcBllMessages.INTERFACE_NOT_LABELED);
    }
    return true;
}
#end_block

#method_before
public void removeNetworkFromParameters(SetupNetworksParameters params, VdsNetworkInterface nic, Network net) {
    if (NetworkUtils.isVlan(net)) {
        VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net);
        if (vlan == null) {
            throw new VdcBLLException(VdcBllErrors.NETWORK_LABEL_CONFLICT);
        } else {
            params.getInterfaces().remove(vlan);
        }
    } else {
        if (StringUtils.equals(net.getName(), nic.getNetworkName())) {
            nic.setNetworkName(null);
        }
    }
}
#method_after
public void removeNetworkFromParameters(SetupNetworksParameters params, VdsNetworkInterface nic, Network net) {
    if (NetworkUtils.isVlan(net)) {
        VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net);
        if (vlan == null) {
            throw new VdcBLLException(VdcBllErrors.NETWORK_LABEL_CONFLICT);
        } else {
            params.getInterfaces().remove(vlan);
        }
    } else if (StringUtils.equals(net.getName(), nic.getNetworkName())) {
        nic.setNetworkName(null);
    }
}
#end_block

#method_before
public boolean isHostExists(List<GlusterServerInfo> glusterServers, VDS server) {
    if (GlusterFeatureSupported.glusterHostUuidSupported(server.getVdsGroupCompatibilityVersion())) {
        GlusterServer glusterServer = DbFacade.getInstance().getGlusterServerDao().getByServerId(server.getId());
        if (glusterServer != null) {
            for (GlusterServerInfo glusterServerInfo : glusterServers) {
                if (glusterServerInfo.getUuid().equals(glusterServer.getGlusterServerUuid())) {
                    return true;
                }
            }
        }
    } else {
        for (GlusterServerInfo glusterServer : glusterServers) {
            if (glusterServer.getHostnameOrIp().equals(server.getHostName())) {
                return true;
            }
            try {
                String glusterHostAddr = InetAddress.getByName(glusterServer.getHostnameOrIp()).getHostAddress();
                for (VdsNetworkInterface vdsNwInterface : getVdsInterfaces(server.getId())) {
                    if (glusterHostAddr.equals(vdsNwInterface.getAddress())) {
                        return true;
                    }
                }
            } catch (UnknownHostException e) {
                log.errorFormat("Could not resole IP address of the host {0}. Error: {1}", glusterServer.getHostnameOrIp(), e.getMessage());
            }
        }
    }
    return false;
}
#method_after
public boolean isHostExists(List<GlusterServerInfo> glusterServers, VDS server) {
    if (GlusterFeatureSupported.glusterHostUuidSupported(server.getVdsGroupCompatibilityVersion())) {
        GlusterServer glusterServer = DbFacade.getInstance().getGlusterServerDao().getByServerId(server.getId());
        if (glusterServer != null) {
            for (GlusterServerInfo glusterServerInfo : glusterServers) {
                if (glusterServerInfo.getUuid().equals(glusterServer.getGlusterServerUuid())) {
                    return true;
                }
            }
        }
    } else {
        for (GlusterServerInfo glusterServer : glusterServers) {
            if (glusterServer.getHostnameOrIp().equals(server.getHostName())) {
                return true;
            }
            try {
                String glusterHostAddr = InetAddress.getByName(glusterServer.getHostnameOrIp()).getHostAddress();
                for (VdsNetworkInterface vdsNwInterface : getVdsInterfaces(server.getId())) {
                    if (glusterHostAddr.equals(vdsNwInterface.getAddress())) {
                        return true;
                    }
                }
            } catch (UnknownHostException e) {
                log.errorFormat("Could not resolve IP address of the host {0}. Error: {1}", glusterServer.getHostnameOrIp(), e.getMessage());
            }
        }
    }
    return false;
}
#end_block

#method_before
@Override
public void edit(final InstallModel model) {
    driver.edit(model);
    if (model.getVds().getStatus() == VDSStatus.InstallFailed) {
        rbPassword.setValue(true);
        model.setAuthenticationMethod(AuthenticationMethod.Password);
        displayPasswordField(true);
    } else {
        rbPublicKey.setValue(true);
        model.setAuthenticationMethod(AuthenticationMethod.PublicKey);
        displayPasswordField(false);
    }
    rbPassword.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            model.setAuthenticationMethod(AuthenticationMethod.Password);
            displayPasswordField(true);
        }
    });
    rbPublicKey.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            model.setAuthenticationMethod(AuthenticationMethod.PublicKey);
            displayPasswordField(false);
        }
    });
    // TODO: remove setIsChangable when configured ssh username is enabled
    userNameEditor.setEnabled(false);
    networkProviderWidget.edit(model.getNetworkProviderModel());
}
#method_after
@Override
public void edit(final InstallModel model) {
    driver.edit(model);
    boolean installedFailed = model.getVds().getStatus() == VDSStatus.InstallFailed;
    model.setAuthenticationMethod(installedFailed ? AuthenticationMethod.Password : AuthenticationMethod.PublicKey);
    displayPasswordField(installedFailed);
    rbPassword.setValue(installedFailed);
    rbPublicKey.setValue(!installedFailed);
    rbPassword.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            model.setAuthenticationMethod(AuthenticationMethod.Password);
            displayPasswordField(true);
        }
    });
    rbPublicKey.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            model.setAuthenticationMethod(AuthenticationMethod.PublicKey);
            displayPasswordField(false);
        }
    });
    // TODO: remove setIsChangable when configured ssh username is enabled
    userNameEditor.setEnabled(false);
    networkProviderWidget.edit(model.getNetworkProviderModel());
}
#end_block

#method_before
public void setVds(VDS v) {
    vds = v;
}
#method_after
public void setVds(VDS value) {
    vds = value;
}
#end_block

#method_before
public void install() {
    if (getWindow() != null) {
        return;
    }
    InstallModel model = new InstallModel();
    setWindow(model);
    model.setVds(getEntity());
    model.setTitle(constants.installHostTitle());
    // $NON-NLS-1$
    model.setHashName("install_host");
    model.getOVirtISO().setIsAvailable(false);
    model.getOverrideIpTables().setIsAvailable(false);
    model.getHostVersion().setEntity(getEntity().getHostOs());
    model.getHostVersion().setIsAvailable(false);
    getWindow().startProgress(null);
    if (getEntity().getVdsType() == VDSType.oVirtNode) {
        AsyncDataProvider.getoVirtISOsList(new AsyncQuery(model, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                InstallModel model = (InstallModel) target;
                ArrayList<RpmVersion> isos = (ArrayList<RpmVersion>) returnValue;
                Collections.sort(isos, Collections.reverseOrder());
                model.getOVirtISO().setItems(isos);
                model.getOVirtISO().setSelectedItem(Linq.firstOrDefault(isos));
                model.getOVirtISO().setIsAvailable(true);
                model.getOVirtISO().setIsChangable(!isos.isEmpty());
                model.getHostVersion().setIsAvailable(true);
                if (isos.isEmpty()) {
                    model.setMessage(constants.thereAreNoISOversionsVompatibleWithHostCurrentVerMsg());
                }
                addInstallCommands(model, isos.isEmpty());
                getWindow().stopProgress();
            }
        }), getEntity().getId());
    } else {
        model.getUserPassword().setIsAvailable(true);
        model.getUserPassword().setIsChangable(true);
        Version v3 = new Version(3, 0);
        boolean isLessThan3 = getEntity().getVdsGroupCompatibilityVersion().compareTo(v3) < 0;
        if (!isLessThan3) {
            model.getOverrideIpTables().setIsAvailable(true);
            model.getOverrideIpTables().setEntity(true);
        }
        addInstallCommands(model, false);
        getWindow().stopProgress();
    }
}
#method_after
public void install() {
    if (getWindow() != null) {
        return;
    }
    InstallModel model = new InstallModel();
    model.setVds(getEntity());
    setWindow(model);
    model.setTitle(constants.installHostTitle());
    // $NON-NLS-1$
    model.setHashName("install_host");
    model.getOVirtISO().setIsAvailable(false);
    model.getOverrideIpTables().setIsAvailable(false);
    model.getHostVersion().setEntity(getEntity().getHostOs());
    model.getHostVersion().setIsAvailable(false);
    getWindow().startProgress(null);
    if (getEntity().getVdsType() == VDSType.oVirtNode) {
        AsyncDataProvider.getoVirtISOsList(new AsyncQuery(model, new INewAsyncCallback() {

            @Override
            public void onSuccess(Object target, Object returnValue) {
                InstallModel model = (InstallModel) target;
                ArrayList<RpmVersion> isos = (ArrayList<RpmVersion>) returnValue;
                Collections.sort(isos, Collections.reverseOrder());
                model.getOVirtISO().setItems(isos);
                model.getOVirtISO().setSelectedItem(Linq.firstOrDefault(isos));
                model.getOVirtISO().setIsAvailable(true);
                model.getOVirtISO().setIsChangable(!isos.isEmpty());
                model.getHostVersion().setIsAvailable(true);
                if (isos.isEmpty()) {
                    model.setMessage(constants.thereAreNoISOversionsVompatibleWithHostCurrentVerMsg());
                }
                addInstallCommands(model, isos.isEmpty());
                getWindow().stopProgress();
            }
        }), getEntity().getId());
    } else {
        model.getUserPassword().setIsAvailable(true);
        model.getUserPassword().setIsChangable(true);
        Version v3 = new Version(3, 0);
        boolean isLessThan3 = getEntity().getVdsGroupCompatibilityVersion().compareTo(v3) < 0;
        if (!isLessThan3) {
            model.getOverrideIpTables().setIsAvailable(true);
            model.getOverrideIpTables().setEntity(true);
        }
        addInstallCommands(model, false);
        getWindow().stopProgress();
    }
}
#end_block

#method_before
public void editHost() {
    // Let's the parent model know about request.
    getRequestEditEvent().raise(this, EventArgs.Empty);
}
#method_after
public void editHost() {
    // Let's the parent model know about request.
    getRequestEditEvent().raise(this, EventArgs.EMPTY);
}
#end_block

#method_before
@Override
protected void entityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.entityPropertyChanged(sender, e);
    if (// $NON-NLS-1$ //$NON-NLS-2$
    e.PropertyName.equals("net_config_dirty") || e.PropertyName.equals("status") || e.PropertyName.equals("spm_status") || // $NON-NLS-1$ //$NON-NLS-2$
    e.PropertyName.equals("vm_active")) {
        updateUpgradeAlert = true;
        updateAlerts();
    }
    if (// $NON-NLS-1$ //$NON-NLS-2$
    e.PropertyName.equals("usage_mem_percent") || e.PropertyName.equals("physical_mem_mb")) {
        updateMemory();
    }
    if (// $NON-NLS-1$ //$NON-NLS-2$
    e.PropertyName.equals("swap_total") || e.PropertyName.equals("swap_free")) {
        updateSwapUsed();
    }
}
#method_after
@Override
protected void entityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.entityPropertyChanged(sender, e);
    if (// $NON-NLS-1$ //$NON-NLS-2$
    e.propertyName.equals("net_config_dirty") || e.propertyName.equals("status") || e.propertyName.equals("spm_status") || // $NON-NLS-1$ //$NON-NLS-2$
    e.propertyName.equals("vm_active")) {
        updateUpgradeAlert = true;
        updateAlerts();
    }
    if (// $NON-NLS-1$ //$NON-NLS-2$
    e.propertyName.equals("usage_mem_percent") || e.propertyName.equals("physical_mem_mb")) {
        updateMemory();
    }
    if (// $NON-NLS-1$ //$NON-NLS-2$
    e.propertyName.equals("swap_total") || e.propertyName.equals("swap_free")) {
        updateSwapUsed();
    }
}
#end_block

#method_before
private void addVmDynamic() {
    VmDynamic tempVar = new VmDynamic();
    tempVar.setId(getVmId());
    tempVar.setStatus(VMStatus.ImageLocked);
    tempVar.setVmHost("");
    tempVar.setVmIp("");
    tempVar.setVmFQDN("");
    tempVar.setAppList(getParameters().getVm().getDynamicData().getAppList());
    getVmDynamicDAO().save(tempVar);
    getCompensationContext().snapshotNewEntity(tempVar);
}
#method_after
private void addVmDynamic() {
    VmDynamic tempVar = new VmDynamic();
    tempVar.setId(getVmId());
    tempVar.setStatus(VMStatus.ImageLocked);
    tempVar.setVmHost("");
    tempVar.setVmIp("");
    tempVar.setVmFQDN("");
    tempVar.setLastStopTime(new Date());
    tempVar.setAppList(getParameters().getVm().getDynamicData().getAppList());
    getVmDynamicDAO().save(tempVar);
    getCompensationContext().snapshotNewEntity(tempVar);
}
#end_block

#method_before
protected <P extends VdcActionParametersBase> P sessionize(P parameters) {
    return sessionHelper.sessionize(parameters);
}
#method_after
protected <P extends VdcQueryParametersBase> P sessionize(P parameters) {
    return sessionHelper.sessionize(parameters);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    NetworkQosValidator validator = new NetworkQosValidator(getNetworkQoS());
    return validateParameters() && validateNameNotExistInDC() && validate(validator.allValuesPresent()) && validate(validator.peakConsistentWithAverage());
}
#method_after
@Override
protected boolean canDoAction() {
    NetworkQosValidator validator = new NetworkQosValidator(getNetworkQoS());
    return validateParameters() && validate(validator.nameNotTakenInDc()) && validate(validator.allValuesPresent()) && validate(validator.peakConsistentWithAverage());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (validateParameters()) {
        NetworkQosValidator validator = new NetworkQosValidator(getNetworkQoS());
        if (!validate(validator.qosExists()) || !validate(validator.consistentDataCenter()) || !validate(validator.allValuesPresent()) || !validate(validator.peakConsistentWithAverage())) {
            return false;
        } else {
            NetworkQoS oldNetworkQoS = getNetworkQoSDao().get(getNetworkQoS().getId());
            if (!oldNetworkQoS.getName().equals(getNetworkQoS().getName())) {
                return validateNameNotExistInDC();
            }
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    NetworkQosValidator validator = new NetworkQosValidator(getNetworkQoS());
    return (validateParameters() && validate(validator.qosExists()) && validate(validator.consistentDataCenter()) && validate(validator.allValuesPresent()) && validate(validator.peakConsistentWithAverage()) && validate(validator.nameNotChangedOrNotTaken()));
}
#end_block

#method_before
@Before
public void setup() {
    qos = new NetworkQoS();
    oldQos = new NetworkQoS();
    validator = spy(new NetworkQosValidator(qos));
    doReturn(oldQos).when(validator).getOldQos();
    nullValidator = spy(new NetworkQosValidator(null));
    doReturn(oldQos).when(nullValidator).getOldQos();
}
#method_after
@Before
public void setup() {
    qos = new NetworkQoS();
    oldQos = new NetworkQoS();
    allQos = new ArrayList<NetworkQoS>();
    validator = spy(new NetworkQosValidator(qos));
    doReturn(oldQos).when(validator).getOldQos();
    doReturn(allQos).when(validator).getAllQosInDc();
    nullValidator = spy(new NetworkQosValidator(null));
    doReturn(oldQos).when(nullValidator).getOldQos();
}
#end_block

#method_before
@Test
public void allValuesPresent() {
    qos.setInboundAverage(BANDWIDTH_MEDIUM);
    qos.setInboundPeak(BANDWIDTH_MEDIUM);
    qos.setInboundBurst(BANDWIDTH_MEDIUM);
    valuesPresentTest(isValid());
}
#method_after
@Test
public void allValuesPresent() {
    qos.setInboundAverage(BANDWIDTH_MEDIUM);
    qos.setInboundPeak(BANDWIDTH_MEDIUM);
    qos.setInboundBurst(BANDWIDTH_MEDIUM);
    qos.setOutboundAverage(BANDWIDTH_MEDIUM);
    qos.setOutboundPeak(BANDWIDTH_MEDIUM);
    qos.setOutboundBurst(BANDWIDTH_MEDIUM);
    valuesPresentTest(isValid());
}
#end_block

#method_before
private void peakConsistentWithAverageTest(Matcher<ValidationResult> matcher) {
    qos.setInboundAverage(BANDWIDTH_MEDIUM);
    assertThat(validator.peakConsistentWithAverage(), matcher);
}
#method_after
private void peakConsistentWithAverageTest(Matcher<ValidationResult> matcher) {
    qos.setInboundAverage(BANDWIDTH_MEDIUM);
    qos.setOutboundAverage(BANDWIDTH_MEDIUM);
    assertThat(validator.peakConsistentWithAverage(), matcher);
}
#end_block

#method_before
@Test
public void peakHigherThanAverage() {
    qos.setInboundPeak(BANDWIDTH_HIGH);
    peakConsistentWithAverageTest(isValid());
}
#method_after
@Test
public void peakHigherThanAverage() {
    qos.setInboundPeak(BANDWIDTH_HIGH);
    qos.setOutboundPeak(BANDWIDTH_HIGH);
    peakConsistentWithAverageTest(isValid());
}
#end_block

#method_before
@Test
public void peakEqualToAverage() {
    qos.setInboundPeak(BANDWIDTH_MEDIUM);
    peakConsistentWithAverageTest(isValid());
}
#method_after
@Test
public void peakEqualToAverage() {
    qos.setInboundPeak(BANDWIDTH_MEDIUM);
    qos.setOutboundPeak(BANDWIDTH_MEDIUM);
    peakConsistentWithAverageTest(isValid());
}
#end_block

