408
#method_before
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    List<String> invalidNetworkNames = new ArrayList<String>();
    List<String> invalidIfaceNames = new ArrayList<String>();
    Map<String, Network> networksInVdsByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getvds_group_id()));
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        initInterface(iface);
        if (!VmInterfaceManager.isValidVmNetwork(iface, networksInVdsByName)) {
            invalidNetworkNames.add(iface.getNetworkName());
            invalidIfaceNames.add(iface.getName());
            iface.setNetworkName(StringUtils.EMPTY);
        }
        macAdded = vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity());
    }
    auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames);
}
#method_after
protected void addVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    List<String> invalidNetworkNames = new ArrayList<String>();
    List<String> invalidIfaceNames = new ArrayList<String>();
    Map<String, Network> networksInVdsByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getvds_group_id()));
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        initInterface(iface);
        if (!vmInterfaceManager.isValidVmNetwork(iface, networksInVdsByName)) {
            invalidNetworkNames.add(iface.getNetworkName());
            invalidIfaceNames.add(iface.getName());
            iface.setNetworkName(StringUtils.EMPTY);
        }
        macAdded = vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity());
    }
    auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames);
}
#end_block

#method_before
protected void AddVmInterfaces() {
    List<VmNetworkInterface> interfaces = getVmTemplate().getInterfaces();
    List<String> invalidNetworkNames = new ArrayList<String>();
    List<String> invalidIfaceNames = new ArrayList<String>();
    Map<String, Network> networksInVdsByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getvds_group_id()));
    String networkName;
    for (VmNetworkInterface iface : interfaces) {
        if (iface.getId() == null) {
            iface.setId(Guid.NewGuid());
        }
        networkName = iface.getNetworkName();
        iface.setVmId(getVmTemplateId());
        VmNetworkInterface iDynamic = new VmNetworkInterface();
        VmNetworkStatistics iStat = new VmNetworkStatistics();
        iDynamic.setStatistics(iStat);
        iDynamic.setId(iface.getId());
        iStat.setId(iface.getId());
        iStat.setVmId(getVmTemplateId());
        iDynamic.setVmTemplateId(getVmTemplateId());
        iDynamic.setName(iface.getName());
        if (VmInterfaceManager.isValidVmNetwork(iface, networksInVdsByName)) {
            iDynamic.setNetworkName(networkName);
        } else {
            invalidNetworkNames.add(iface.getNetworkName());
            invalidIfaceNames.add(iface.getName());
            iDynamic.setNetworkName(StringUtils.EMPTY);
        }
        iDynamic.setSpeed(iface.getSpeed());
        iDynamic.setType(iface.getType());
        DbFacade.getInstance().getVmNetworkInterfaceDAO().save(iDynamic);
        getCompensationContext().snapshotNewEntity(iDynamic);
        DbFacade.getInstance().getVmNetworkStatisticsDAO().save(iStat);
        getCompensationContext().snapshotNewEntity(iStat);
    }
    auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames);
}
#method_after
protected void AddVmInterfaces() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    List<VmNetworkInterface> interfaces = getVmTemplate().getInterfaces();
    List<String> invalidNetworkNames = new ArrayList<String>();
    List<String> invalidIfaceNames = new ArrayList<String>();
    Map<String, Network> networksInVdsByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getvds_group_id()));
    String networkName;
    for (VmNetworkInterface iface : interfaces) {
        if (iface.getId() == null) {
            iface.setId(Guid.NewGuid());
        }
        networkName = iface.getNetworkName();
        iface.setVmId(getVmTemplateId());
        VmNetworkInterface iDynamic = new VmNetworkInterface();
        VmNetworkStatistics iStat = new VmNetworkStatistics();
        iDynamic.setStatistics(iStat);
        iDynamic.setId(iface.getId());
        iStat.setId(iface.getId());
        iStat.setVmId(getVmTemplateId());
        iDynamic.setVmTemplateId(getVmTemplateId());
        iDynamic.setName(iface.getName());
        if (vmInterfaceManager.isValidVmNetwork(iface, networksInVdsByName)) {
            iDynamic.setNetworkName(networkName);
        } else {
            invalidNetworkNames.add(iface.getNetworkName());
            invalidIfaceNames.add(iface.getName());
            iDynamic.setNetworkName(StringUtils.EMPTY);
        }
        iDynamic.setSpeed(iface.getSpeed());
        iDynamic.setType(iface.getType());
        DbFacade.getInstance().getVmNetworkInterfaceDAO().save(iDynamic);
        getCompensationContext().snapshotNewEntity(iDynamic);
        DbFacade.getInstance().getVmNetworkStatisticsDAO().save(iStat);
        getCompensationContext().snapshotNewEntity(iStat);
    }
    auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames);
}
#end_block

#method_before
protected AuditLogType getAuditLogTypeForInvalidInterfaces() {
    // Functionality must be implemented in subclasses
    throw new NotImplementedException();
}
#method_after
protected AuditLogType getAuditLogTypeForInvalidInterfaces() {
    return AuditLogType.UNASSIGNED;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    InitializeStorageDomain();
    // save storage if got from parameters in order to save first empty
    // storage in db and use it later
    String storage = ((getStorageDomain().getstorage()) != null) ? getStorageDomain().getstorage() : "";
    // set domain storage to empty because not nullable in db and for shared
    // status to be locked
    getStorageDomain().setstorage("");
    AddStorageDomainInDb();
    getStorageDomain().setstorage(storage);
    if (StringUtils.isEmpty(getStorageDomain().getstorage())) {
        getStorageDomain().setstorage(CreateVG());
    }
    if (!StringUtils.isEmpty(getStorageDomain().getstorage()) && (AddStorageDomainInIrs())) {
        DbFacade.getInstance().getStorageDomainStaticDAO().update(getStorageDomain().getStorageStaticData());
        UpdateStorageDomainDynamicFromIrs();
        ProceedVGLunsInDb();
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    InitializeStorageDomain();
    // save storage if got from parameters in order to save first empty
    // storage in db and use it later
    String storage = ((getStorageDomain().getstorage()) != null) ? getStorageDomain().getstorage() : "";
    // set domain storage to empty because not nullable in db and for shared
    // status to be locked
    getStorageDomain().setstorage("");
    AddStorageDomainInDb();
    getStorageDomain().setstorage(storage);
    if (StringUtils.isEmpty(getStorageDomain().getstorage())) {
        getStorageDomain().setstorage(CreateVG());
    }
    if (StringUtils.isNotEmpty(getStorageDomain().getstorage()) && (AddStorageDomainInIrs())) {
        DbFacade.getInstance().getStorageDomainStaticDAO().update(getStorageDomain().getStorageStaticData());
        UpdateStorageDomainDynamicFromIrs();
        ProceedVGLunsInDb();
        setSucceeded(true);
    }
}
#end_block

#method_before
@NotTransactional
@BeforeClass
public static void initTestCase() throws Exception {
    if (dataSource == null) {
        dataSource = createDataSource();
        Connection con = dataSource.getConnection();
        con.setAutoCommit(false);
        dataset = initDataSet();
        dbFacade = new DbFacade();
        dbFacade.setDbEngineDialect(DbFacadeLocator.loadDbEngineDialect());
        dbFacade.setTemplate(dbFacade.getDbEngineDialect().createJdbcTemplate(dataSource));
        // load data from fixtures to DB
        DatabaseOperation.CLEAN_INSERT.execute(getConnection(), dataset);
        con.commit();
    }
}
#method_after
@BeforeClass
public static void initTestCase() throws Exception {
    if (dataSource == null) {
        dataSource = createDataSource();
        dataset = initDataSet();
        dbFacade = new DbFacade();
        dbFacade.setDbEngineDialect(DbFacadeLocator.loadDbEngineDialect());
        dbFacade.setTemplate(dbFacade.getDbEngineDialect().createJdbcTemplate(dataSource));
        // load data from fixtures to DB
        DatabaseOperation.CLEAN_INSERT.execute(getConnection(), dataset);
    }
}
#end_block

#method_before
public static String getEngineSSHKeyFingerprint() {
    String fingerprint = null;
    String keystoreFile = Config.<String>GetValue(ConfigValues.keystoreUrl);
    String alias = Config.<String>GetValue(ConfigValues.CertAlias);
    InputStream in = null;
    try {
        in = new FileInputStream(keystoreFile);
        KeyStore ks = KeyStore.getInstance("JKS");
        ks.load(in, Config.<String>GetValue(ConfigValues.keystorePass).toCharArray());
        Certificate cert = ks.getCertificate(alias);
        if (cert == null) {
            throw new KeyStoreException(String.format("Failed to find certificate store '%1$s' using alias '%2%s'", keystoreFile, alias));
        }
        fingerprint = OpenSSHUtils.getKeyString(cert.getPublicKey(), "ovirt-engine");
    } catch (Exception e) {
        log.error(String.format("Failed to send own public key from store '%1$s' using alias '%2%s'", keystoreFile, alias), e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close key store", e);
            }
        }
    }
    return fingerprint;
}
#method_after
static public String getEngineSSHKeyFingerprint() {
    String fingerprint = null;
    InputStream in = null;
    try {
        in = new FileInputStream(Config.<String>GetValue(ConfigValues.keystoreUrl));
        KeyStore ks = KeyStore.getInstance("JKS");
        ks.load(in, Config.<String>GetValue(ConfigValues.keystorePass).toCharArray());
        fingerprint = OpenSSHUtils.getKeyString(ks.getCertificate(Config.<String>GetValue(ConfigValues.CertAlias)).getPublicKey(), "ovirt-engine");
    } catch (Exception e) {
        log.error("Failed to send own public key from store", e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close key store", e);
            }
        }
    }
    return fingerprint;
}
#end_block

#method_before
private boolean runBootstrapCommand(boolean doFinal) {
    boolean fRes = false;
    String command = _bootstrapCommand.replace("{RunFlag}", doFinal ? "True" : "False");
    if (doFinal && !_rebootAfterInstallation) {
        command = command.replace(" -b ", " ");
    }
    log.infoFormat("Installation of {0}. Sending SSH Command {1} < {2}. (Stage: {3})", _serverName, command, s_bootstrapPackage.getFileNoUse(), getCurrentInstallStage());
    InputStream in = null;
    try {
        in = s_bootstrapPackage.getStream();
        fRes = _wrapper.executeCommand(command, in);
    } catch (Exception e) {
        log.error("Error during executing bootstrap", e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close bootstrap file", e);
            }
        }
    }
    log.infoFormat("Script ended, result is {1}", fRes ? "Success" : "Failed");
    return fRes;
}
#method_after
private boolean runBootstrapCommand(boolean doFinal) {
    Boolean fRes = false;
    String command = _bootstrapCommand.replace("{RunFlag}", doFinal ? "True" : "False");
    if (doFinal && !_rebootAfterInstallation) {
        command = command.replace(" -b ", " ");
    }
    String bootstrap = Config.<String>GetValue(ConfigValues.BootstrapInstallerFileName);
    log.infoFormat("Installation of {0}. Sending SSH Command {1} < {2}. (Stage: {3})", _serverName, command, bootstrap, getCurrentInstallStage());
    InputStream in = null;
    try {
        in = new FileInputStream(bootstrap);
        fRes = _wrapper.executeCommand(command, in);
    } catch (Exception e) {
        log.error("Error during executing bootstrap", e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close bootstrap file", e);
            }
        }
    }
    log.infoFormat(" RunScript ended:" + fRes.toString());
    return fRes;
}
#end_block

#method_before
protected void RunStage() {
    if (this.getClass() == VdsInstaller.class) {
        log.infoFormat("Installation of {0}. Executing installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
    }
    switch(_currentInstallStage) {
        case Start:
            {
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                _executionSucceded = true;
                break;
            }
        case ConnectToServer:
            {
                _executionSucceded = _wrapper.connect(_serverName, _rootPassword);
                break;
            }
        case CheckUniqueVds:
            {
                _wrapper.executeCommand(Config.<String>GetValue(ConfigValues.BootstrapNodeIDCommand));
                break;
            }
        case UploadScript:
            {
                String thumbprint = VdsInstallerSSH.getEngineSSHKeyFingerprint();
                if (thumbprint == null) {
                    _executionSucceded = false;
                } else {
                    _executionSucceded = uploadStringAsFile(thumbprint, _remoteSSHKey);
                }
                if (_executionSucceded && isOverrideFirewallAllowed()) {
                    String ipTablesConfig = Config.<String>GetValue(ConfigValues.IPTablesConfig);
                    if (StringUtils.isNotEmpty(ipTablesConfig)) {
                        _executionSucceded = uploadStringAsFile(ipTablesConfig, remoteFwRulesFilePath);
                    }
                }
                if (_executionSucceded) {
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                }
                break;
            }
        case RunScript:
            {
                runBootstrapCommand(false);
                break;
            }
        case DownloadCertificateRequest:
            {
                // First parameter will always run on Linux, so use path.combine
                // just for the second param.
                Boolean fRes = _wrapper.receiveFile(_remoteDirectory + "/" + _certRequestFileName, buildCAPath(_requestsDirectory, _certRequestFileName));
                log.infoFormat(" DownloadCertificateRequest ended:" + fRes.toString());
                break;
            }
        case SignCertificateRequest:
            {
                _executionSucceded = _caWrapper.SignCertificateRequest(_certRequestFileName, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, _certFileNameLocal);
                log.infoFormat(" SignCertificateRequest ended:" + _executionSucceded);
                if (_executionSucceded) {
                    String currRequest = buildCAPath(_requestsDirectory, _certRequestFileName);
                    try {
                        FileUtil.deleteFile(currRequest);
                    } catch (RuntimeException exp) {
                        log.errorFormat("Installation of {0}. Could not delete certificate request file from: {1}. error: {2}. (Stage: {3}", _serverName, currRequest, exp.getMessage(), getCurrentInstallStage());
                    }
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                } else {
                    log.error("Error signing certificate request");
                }
                break;
            }
        case UploadSignedCertificate:
            {
                // Second parameter will always run on Linux, so use
                // path.combine just for the first param.
                Boolean fRes = _wrapper.sendFile(buildCAPath(_certificatesDirectory, _certFileNameLocal), _remoteDirectory + "/" + _certFileName);
                log.infoFormat(" UploadSignedCertificate ended:" + fRes.toString());
                break;
            }
        case UploadCA:
            {
                String path = String.format("%1$s/%2$s", _remoteDirectory, _caFileName);
                _wrapper.sendFile(Config.resolveCACertificatePath(), path);
                break;
            }
        case FinishCommand:
            {
                runBootstrapCommand(true);
                break;
            }
    }
}
#method_after
protected void RunStage() {
    if (this.getClass() == VdsInstaller.class) {
        log.infoFormat("Installation of {0}. Executing installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
    }
    switch(_currentInstallStage) {
        case Start:
            {
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                _executionSucceded = true;
                break;
            }
        case ConnectToServer:
            {
                _executionSucceded = _wrapper.connect(_serverName, _rootPassword);
                break;
            }
        case CheckUniqueVds:
            {
                _wrapper.executeCommand(Config.<String>GetValue(ConfigValues.BootstrapNodeIDCommand));
                break;
            }
        case UploadScript:
            {
                String thumbprint = VdsInstallerSSH.getEngineSSHKeyFingerprint();
                if (thumbprint == null) {
                    _executionSucceded = false;
                } else {
                    _executionSucceded = uploadStringAsFile(thumbprint, _remoteSSHKey);
                }
                if (_executionSucceded && isOverrideFirewallAllowed()) {
                    String ipTableConfig = Config.<String>GetValue(ConfigValues.IPTablesConfig);
                    if (StringUtils.isNotEmpty(ipTableConfig)) {
                        _executionSucceded = uploadStringAsFile(ipTableConfig, remoteFwRulesFilePath);
                    }
                }
                if (_executionSucceded) {
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                }
                break;
            }
        case RunScript:
            {
                runBootstrapCommand(false);
                break;
            }
        case DownloadCertificateRequest:
            {
                // First parameter will always run on Linux, so use path.combine
                // just for the second param.
                Boolean fRes = _wrapper.receiveFile(_remoteDirectory + "/" + _certRequestFileName, buildCAPath(_requestsDirectory, _certRequestFileName));
                log.infoFormat(" DownloadCertificateRequest ended:" + fRes.toString());
                break;
            }
        case SignCertificateRequest:
            {
                _executionSucceded = _caWrapper.SignCertificateRequest(_certRequestFileName, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, _certFileNameLocal);
                log.infoFormat(" SignCertificateRequest ended:" + _executionSucceded);
                if (_executionSucceded) {
                    String currRequest = buildCAPath(_requestsDirectory, _certRequestFileName);
                    try {
                        FileUtil.deleteFile(currRequest);
                    } catch (RuntimeException exp) {
                        log.errorFormat("Installation of {0}. Could not delete certificate request file from: {1}. error: {2}. (Stage: {3}", _serverName, currRequest, exp.getMessage(), getCurrentInstallStage());
                    }
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                } else {
                    log.error("Error signing certificate request");
                }
                break;
            }
        case UploadSignedCertificate:
            {
                // Second parameter will always run on Linux, so use
                // path.combine just for the first param.
                Boolean fRes = _wrapper.sendFile(buildCAPath(_certificatesDirectory, _certFileNameLocal), _remoteDirectory + "/" + _certFileName);
                log.infoFormat(" UploadSignedCertificate ended:" + fRes.toString());
                break;
            }
        case UploadCA:
            {
                String path = String.format("%1$s/%2$s", _remoteDirectory, _caFileName);
                _wrapper.sendFile(Config.resolveCACertificatePath(), path);
                break;
            }
        case FinishCommand:
            {
                runBootstrapCommand(true);
                break;
            }
    }
}
#end_block

#method_before
@Override
public void endTransfer() {
    if (// iso upload
    _currentInstallStage == VdsInstallStages.UploadScript || _currentInstallStage == VdsInstallStages.DownloadCertificateRequest || _currentInstallStage == VdsInstallStages.UploadSignedCertificate || _currentInstallStage == VdsInstallStages.UploadCA) {
        log.infoFormat("Installation of {0}. successfully done sftp operation ( Stage: {1})", _serverName, _translatedMessages.get(_currentInstallStage));
        _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
        _executionSucceded = true;
    } else if (_currentInstallStage != VdsInstallStages.Error) {
        log.warnFormat("Installation of {0}. Illegal stage for sftp operation. (Stage: {1})", _serverName, getCurrentInstallStage());
        _currentInstallStage = VdsInstallStages.Error;
    }
}
#method_after
@Override
public void endTransfer() {
    if (_currentInstallStage == VdsInstallStages.DownloadCertificateRequest || _currentInstallStage == VdsInstallStages.UploadSignedCertificate || _currentInstallStage == VdsInstallStages.UploadCA) {
        log.infoFormat("Installation of {0}. successfully done sftp operation ( Stage: {1})", _serverName, _translatedMessages.get(_currentInstallStage));
        _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
        _executionSucceded = true;
    } else if (_currentInstallStage != VdsInstallStages.Error) {
        log.warnFormat("Installation of {0}. Illegal stage for sftp operation. (Stage: {1})", _serverName, getCurrentInstallStage());
        _currentInstallStage = VdsInstallStages.Error;
    }
}
#end_block

#method_before
@Test
public void testCommandOKTar() throws Exception {
    MyVdsInstallerCallback callbacks = new MyVdsInstallerCallback();
    VdsInstallerSSH vssh = new VdsInstallerSSH();
    vssh.setPort(port);
    vssh.setCallback(callbacks);
    InputStream is = null;
    try {
        is = new FileInputStream("src/test/resources/tarball.tar");
        assertTrue(vssh.connect(host, password));
        callbacks.reset();
        assertTrue(vssh.executeCommand(String.format(("rm -fr /tmp/vssh-%1$d && " + "mkdir /tmp/vssh-%1$d && " + "tar -C /tmp/vssh-%1$d -x && " + "/tmp/vssh-%1$d/script; " + "rm -fr /tmp/vssh-%1$d"), Thread.currentThread().getId()), is));
        assertFalse(callbacks.connected);
        assertFalse(callbacks.endTransfer);
        assertEquals("ok\n", callbacks.message);
        assertNull(callbacks.error);
        assertNull(callbacks.fail);
    } finally {
        if (is != null) {
            try {
                is.close();
            } catch (Exception e) {
            // ignore we want test exception
            }
        }
        vssh.shutdown();
        vssh = null;
    }
}
#method_after
@Test
public void testCommandOKTar() throws Exception {
    MyVdsInstallerCallback callbacks = new MyVdsInstallerCallback();
    VdsInstallerSSH vssh = new VdsInstallerSSH();
    vssh.setPort(port);
    vssh.setCallback(callbacks);
    try {
        assertTrue(vssh.connect(host, password));
        callbacks.reset();
        assertTrue(vssh.executeCommand(String.format(("rm -fr /tmp/vssh-%1$d && " + "mkdir /tmp/vssh-%1$d && " + "tar -C /tmp/vssh-%1$d -x && " + "/tmp/vssh-%1$d/script; " + "rm -fr /tmp/vssh-%1$d"), Thread.currentThread().getId()), new FileInputStream("src/test/resources/tarball.tar")));
        assertFalse(callbacks.connected);
        assertFalse(callbacks.endTransfer);
        assertEquals("ok\n", callbacks.message);
        assertNull(callbacks.error);
        assertNull(callbacks.fail);
    } finally {
        vssh.shutdown();
        vssh = null;
    }
}
#end_block

#method_before
private AuditLogableBase getLoggableQuotaStorageParams(String quotaName, double storageUsagePercentage, double storageRequestedPercentage) {
    AuditLogableBase logable = new AuditLogableBase();
    logable.getUserName();
    logable.AddCustomValue("QuotaName", quotaName);
    logable.AddCustomValue("CurrentStorage", String.valueOf((int) storageUsagePercentage));
    logable.AddCustomValue("Requested", String.valueOf((int) storageRequestedPercentage));
    return logable;
}
#method_after
private AuditLogableBase getLoggableQuotaStorageParams(String quotaName, double storageUsagePercentage, double storageRequestedPercentage) {
    AuditLogableBase logable = new AuditLogableBase();
    logable.AddCustomValue("QuotaName", quotaName);
    logable.AddCustomValue("CurrentStorage", percentageFormatter.format(storageUsagePercentage));
    logable.AddCustomValue("Requested", percentageFormatter.format(storageRequestedPercentage));
    return logable;
}
#end_block

#method_before
private boolean checkQuotaClusterLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, QuotaVdsGroup quotaVdsGroup, long memToAdd, int vcpuToAdd, ArrayList<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> log) {
    if (quotaVdsGroup.getVirtualCpu() == 0 || quotaVdsGroup.getMemSizeMB() == 0) {
        return false;
    }
    double vcpuToAddPercentage = (double) vcpuToAdd / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double vcpuCurrentPercentage = (double) quotaVdsGroup.getVirtualCpuUsage() / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double newVcpuPercent = vcpuToAddPercentage + vcpuCurrentPercentage;
    double memToAddPercentage = (double) memToAdd / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double memCurrentPercentage = (double) quotaVdsGroup.getMemSizeMBUsage() / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double newMemoryPercent = memToAddPercentage + memCurrentPercentage;
    long newMemory = memToAdd + quotaVdsGroup.getMemSizeMBUsage();
    int newVcpu = vcpuToAdd + quotaVdsGroup.getVirtualCpuUsage();
    long memLimit = quotaVdsGroup.getMemSizeMB();
    int cpuLimit = quotaVdsGroup.getVirtualCpu();
    if (memLimit == UNLIMITED && cpuLimit == UNLIMITED) {
        // if both cpu and mem are unlimited
        // cache
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
        return true;
    } else if (// if cpu and mem usages are under the limit
    newVcpuPercent <= quota.getThresholdVdsGroupPercentage() && newMemoryPercent <= quota.getThresholdVdsGroupPercentage()) {
        // cache
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
        return true;
    } else if (newVcpuPercent <= 100 && newMemoryPercent <= 100) {
        // passed the threshold (not the quota limit)
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD);
        log.setSecond(getLoggableQuotaVdsGroupParams(quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > quota.getThresholdVdsGroupPercentage(), newMemoryPercent > quota.getThresholdVdsGroupPercentage()));
    } else if (newVcpuPercent <= quota.getGraceVdsGroupPercentage() + 100 && newMemoryPercent <= quota.getGraceVdsGroupPercentage() + 100) {
        // passed the quota limit (not the grace)
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT);
        log.setSecond(getLoggableQuotaVdsGroupParams(quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > 100, newMemoryPercent > 100));
    } else {
        // passed the grace
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT);
        log.setSecond(getLoggableQuotaVdsGroupParams(quota.getQuotaName(), vcpuCurrentPercentage, vcpuToAddPercentage, memCurrentPercentage, memToAddPercentage, newVcpuPercent > quota.getGraceVdsGroupPercentage() + 100, newMemoryPercent > quota.getGraceVdsGroupPercentage() + 100));
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(quotaEnforcementTypeEnum)) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_VDS_GROUP_LIMIT_EXCEEDED.toString());
            return false;
        }
    }
    // cache
    cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    return true;
}
#method_after
private boolean checkQuotaClusterLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, QuotaVdsGroup quotaVdsGroup, long memToAdd, int vcpuToAdd, ArrayList<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> log) {
    if (quotaVdsGroup.getVirtualCpu() == 0 || quotaVdsGroup.getMemSizeMB() == 0) {
        return false;
    }
    double vcpuToAddPercentage = (double) vcpuToAdd / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double vcpuCurrentPercentage = (double) quotaVdsGroup.getVirtualCpuUsage() / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double newVcpuPercent = vcpuToAddPercentage + vcpuCurrentPercentage;
    double memToAddPercentage = (double) memToAdd / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double memCurrentPercentage = (double) quotaVdsGroup.getMemSizeMBUsage() / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double newMemoryPercent = memToAddPercentage + memCurrentPercentage;
    long newMemory = memToAdd + quotaVdsGroup.getMemSizeMBUsage();
    int newVcpu = vcpuToAdd + quotaVdsGroup.getVirtualCpuUsage();
    long memLimit = quotaVdsGroup.getMemSizeMB();
    int cpuLimit = quotaVdsGroup.getVirtualCpu();
    if (memLimit == UNLIMITED && cpuLimit == UNLIMITED) {
        // if both cpu and mem are unlimited
        // cache
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
        return true;
    } else if (// if cpu and mem usages are under the limit
    newVcpuPercent <= quota.getThresholdVdsGroupPercentage() && newMemoryPercent <= quota.getThresholdVdsGroupPercentage()) {
        // cache
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
        return true;
    } else if (newVcpuPercent <= 100 && newMemoryPercent <= 100) {
        // passed the threshold (not the quota limit)
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD);
        log.setSecond(getLogableQuotaVdsGroupParams(quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > quota.getThresholdVdsGroupPercentage(), newMemoryPercent > quota.getThresholdVdsGroupPercentage()));
    } else if (newVcpuPercent <= quota.getGraceVdsGroupPercentage() + 100 && newMemoryPercent <= quota.getGraceVdsGroupPercentage() + 100) {
        // passed the quota limit (not the
        // grace)
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT);
        log.setSecond(getLogableQuotaVdsGroupParams(quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > 100, newMemoryPercent > 100));
    } else {
        // passed the grace
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT);
        log.setSecond(getLogableQuotaVdsGroupParams(quota.getQuotaName(), vcpuCurrentPercentage, vcpuToAddPercentage, memCurrentPercentage, memToAddPercentage, newVcpuPercent > quota.getGraceVdsGroupPercentage() + 100, newMemoryPercent > quota.getGraceVdsGroupPercentage() + 100));
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(quotaEnforcementTypeEnum)) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_VDS_GROUP_LIMIT_EXCEEDED.toString());
            return false;
        }
    }
    // cache
    cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    return true;
}
#end_block

#method_before
protected void performLiveSnapshot(Guid createdSnapshotId) {
    try {
        TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                List<Disk> pluggedDisks = new VmRunHandler().getPluggedDisks(getVm(), DbFacade.getInstance().getDiskDao().getAllForVm(getVm().getId()));
                runVdsCommand(VDSCommandType.Snapshot, new SnapshotVDSCommandParameters(getVm().getrun_on_vds().getValue(), getVm().getId(), ImagesHandler.filterImageDisks(pluggedDisks, false, true)));
                return null;
            }
        });
    } catch (VdcBLLException e) {
        if (e.getErrorCode() == VdcBllErrors.SNAPSHOT_FAILED) {
            getParameters().setTaskGroupSuccess(false);
            log.errorFormat("Wasn't able to live snpashot due to error: {0}, rolling back.", ExceptionUtils.getMessage(e));
            revertToActiveSnapshot(createdSnapshotId);
        } else {
            throw e;
        }
    }
}
#method_after
protected void performLiveSnapshot(Guid createdSnapshotId) {
    try {
        TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                List<Disk> pluggedDisks = VmRunHandler.getInstance().getPluggedDisks(getVm());
                runVdsCommand(VDSCommandType.Snapshot, new SnapshotVDSCommandParameters(getVm().getrun_on_vds().getValue(), getVm().getId(), ImagesHandler.filterImageDisks(pluggedDisks, false, true)));
                return null;
            }
        });
    } catch (VdcBLLException e) {
        if (e.getErrorCode() == VdcBllErrors.SNAPSHOT_FAILED) {
            getParameters().setTaskGroupSuccess(false);
            log.errorFormat("Wasn't able to live snpashot due to error: {0}, rolling back.", ExceptionUtils.getMessage(e));
            revertToActiveSnapshot(createdSnapshotId);
        } else {
            throw e;
        }
    }
}
#end_block

#method_before
@Override
public void addQuotaPermissionSubject(List<PermissionSubject> quotaPermissionList) {
    if (getStoragePool() != null && getQuotaId() != null && !getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)) {
        VmTemplate template = getVmTemplateDAO().get(getVmTemplateId());
        if (template != null && !getQuotaId().equals(template.getQuotaId())) {
            quotaPermissionList.add(new PermissionSubject(getQuotaId(), VdcObjectType.Quota, ActionGroup.CONSUME_QUOTA));
        }
    }
}
#method_after
@Override
public void addQuotaPermissionSubject(List<PermissionSubject> quotaPermissionList) {
    if (getStoragePool() != null && getQuotaId() != null && !getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)) {
        VmTemplate template = getVmTemplate();
        if (template != null && !getQuotaId().equals(template.getQuotaId())) {
            quotaPermissionList.add(new PermissionSubject(getQuotaId(), VdcObjectType.Quota, ActionGroup.CONSUME_QUOTA));
        }
    }
}
#end_block

#method_before
@Override
public void addQuotaPermissionSubject(List<PermissionSubject> quotaPermissionList) {
    if (getStoragePool() != null && getQuotaId() != null && !getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)) {
        VM vm = getVmDAO().get(getVmId());
        if (vm != null && !getQuotaId().equals(vm.getQuotaId())) {
            quotaPermissionList.add(new PermissionSubject(getQuotaId(), VdcObjectType.Quota, ActionGroup.CONSUME_QUOTA));
        }
    }
}
#method_after
@Override
public void addQuotaPermissionSubject(List<PermissionSubject> quotaPermissionList) {
    if (getStoragePool() != null && getQuotaId() != null && !getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)) {
        VM vm = getVm();
        if (vm != null && !getQuotaId().equals(vm.getQuotaId())) {
            quotaPermissionList.add(new PermissionSubject(getQuotaId(), VdcObjectType.Quota, ActionGroup.CONSUME_QUOTA));
        }
    }
}
#end_block

#method_before
@Override
public IConditionValueAutoCompleter getFieldValueAutoCompleter(String fieldName) {
    IConditionValueAutoCompleter retval = null;
    if (StringUtils.equals(fieldName, "TYPE")) {
        retval = new EnumValueAutoCompleter(VmPoolType.class);
    } else {
    }
    return retval;
}
#method_after
@Override
public IConditionValueAutoCompleter getFieldValueAutoCompleter(String fieldName) {
    IConditionValueAutoCompleter retval = null;
    if ("TYPE".equals(fieldName)) {
        retval = new EnumValueAutoCompleter(VmPoolType.class);
    }
    return retval;
}
#end_block

#method_before
protected void RunStage() {
    if (this.getClass() == VdsInstaller.class) {
        log.infoFormat("Installation of {0}. Executing installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
    }
    switch(_currentInstallStage) {
        case Start:
            {
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                _executionSucceded = true;
                break;
            }
        case ConnectToServer:
            {
                _executionSucceded = _wrapper.connect(_serverName, _rootPassword);
                break;
            }
        case CheckUniqueVds:
            {
                _wrapper.executeCommand(_getUniqueIdCommand);
                break;
            }
        case UploadScript:
            {
                String path = Config.resolveBootstrapInstallerPath();
                _executionSucceded = _wrapper.sendFile(path, _remoteBootstrapRunningScriptPath);
                if (isOverrideFirewallAllowed() && _executionSucceded) {
                    String ipTableConfig = Config.<String>GetValue(ConfigValues.IPTablesConfig);
                    if (StringUtils.isNotEmpty(ipTableConfig)) {
                        _executionSucceded = uploadString(ipTableConfig, remoteFwRulesFilePath);
                    }
                    if (_executionSucceded) {
                        _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                    }
                }
                break;
            }
        case RunScript:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _bootStrapInitialCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.executeCommand(_bootStrapInitialCommand);
                log.infoFormat(" RunScript ended:" + fRes.toString());
                break;
            }
        case DownloadCertificateRequest:
            {
                // First parameter will always run on Linux, so use path.combine
                // just for the second param.
                Boolean fRes = _wrapper.receiveFile(_remoteDirectory + "/" + _certRequestFileName, buildCAPath(_requestsDirectory, _certRequestFileName));
                log.infoFormat(" DownloadCertificateRequest ended:" + fRes.toString());
                break;
            }
        case SignCertificateRequest:
            {
                _executionSucceded = _caWrapper.SignCertificateRequest(_certRequestFileName, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, _certFileNameLocal);
                log.infoFormat(" SignCertificateRequest ended:" + _executionSucceded);
                if (_executionSucceded) {
                    String currRequest = buildCAPath(_requestsDirectory, _certRequestFileName);
                    try {
                        FileUtil.deleteFile(currRequest);
                    } catch (RuntimeException exp) {
                        log.errorFormat("Installation of {0}. Could not delete certificate request file from: {1}. error: {2}. (Stage: {3}", _serverName, currRequest, exp.getMessage(), getCurrentInstallStage());
                    }
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                } else {
                    log.error("Error signing certificate request");
                }
                break;
            }
        case UploadSignedCertificate:
            {
                // Second parameter will always run on Linux, so use
                // path.combine just for the first param.
                Boolean fRes = _wrapper.sendFile(buildCAPath(_certificatesDirectory, _certFileNameLocal), _remoteDirectory + "/" + _certFileName);
                log.infoFormat(" UploadSignedCertificate ended:" + fRes.toString());
                break;
            }
        case UploadCA:
            {
                String path = String.format("%1$s/%2$s", _remoteDirectory, _caFileName);
                _wrapper.sendFile(Config.resolveCACertificatePath(), path);
                break;
            }
        case FinishCommand:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _finishCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.executeCommand(_finishCommand);
                log.infoFormat(" FinishCommand ended:" + fRes.toString());
                break;
            }
    }
}
#method_after
protected void RunStage() {
    if (this.getClass() == VdsInstaller.class) {
        log.infoFormat("Installation of {0}. Executing installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
    }
    switch(_currentInstallStage) {
        case Start:
            {
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                _executionSucceded = true;
                break;
            }
        case ConnectToServer:
            {
                _executionSucceded = _wrapper.connect(_serverName, _rootPassword);
                break;
            }
        case CheckUniqueVds:
            {
                _wrapper.executeCommand(Config.<String>GetValue(ConfigValues.BootstrapNodeIDCommand));
                break;
            }
        case UploadScript:
            {
                String path = Config.resolveBootstrapInstallerPath();
                _executionSucceded = _wrapper.sendFile(path, _remoteBootstrapRunningScriptPath);
                if (isOverrideFirewallAllowed() && _executionSucceded) {
                    String ipTableConfig = Config.<String>GetValue(ConfigValues.IPTablesConfig);
                    if (StringUtils.isNotEmpty(ipTableConfig)) {
                        _executionSucceded = uploadStringAsFile(ipTableConfig, remoteFwRulesFilePath);
                    }
                    if (_executionSucceded) {
                        _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                    }
                }
                break;
            }
        case RunScript:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _bootStrapInitialCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.executeCommand(_bootStrapInitialCommand);
                log.infoFormat(" RunScript ended:" + fRes.toString());
                break;
            }
        case DownloadCertificateRequest:
            {
                // First parameter will always run on Linux, so use path.combine
                // just for the second param.
                Boolean fRes = _wrapper.receiveFile(_remoteDirectory + "/" + _certRequestFileName, buildCAPath(_requestsDirectory, _certRequestFileName));
                log.infoFormat(" DownloadCertificateRequest ended:" + fRes.toString());
                break;
            }
        case SignCertificateRequest:
            {
                _executionSucceded = _caWrapper.SignCertificateRequest(_certRequestFileName, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, _certFileNameLocal);
                log.infoFormat(" SignCertificateRequest ended:" + _executionSucceded);
                if (_executionSucceded) {
                    String currRequest = buildCAPath(_requestsDirectory, _certRequestFileName);
                    try {
                        FileUtil.deleteFile(currRequest);
                    } catch (RuntimeException exp) {
                        log.errorFormat("Installation of {0}. Could not delete certificate request file from: {1}. error: {2}. (Stage: {3}", _serverName, currRequest, exp.getMessage(), getCurrentInstallStage());
                    }
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                } else {
                    log.error("Error signing certificate request");
                }
                break;
            }
        case UploadSignedCertificate:
            {
                // Second parameter will always run on Linux, so use
                // path.combine just for the first param.
                Boolean fRes = _wrapper.sendFile(buildCAPath(_certificatesDirectory, _certFileNameLocal), _remoteDirectory + "/" + _certFileName);
                log.infoFormat(" UploadSignedCertificate ended:" + fRes.toString());
                break;
            }
        case UploadCA:
            {
                String path = String.format("%1$s/%2$s", _remoteDirectory, _caFileName);
                _wrapper.sendFile(Config.resolveCACertificatePath(), path);
                break;
            }
        case FinishCommand:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _finishCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.executeCommand(_finishCommand);
                log.infoFormat(" FinishCommand ended:" + fRes.toString());
                break;
            }
    }
}
#end_block

#method_before
@Override
public void initTable(final CommonApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new NicActivateStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VmNetworkInterface> nameColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getName();
        }
    };
    getTable().addColumn(nameColumn, constants.nameInterface());
    TextColumnWithTooltip<VmNetworkInterface> networkNameColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getNetworkName();
        }
    };
    getTable().addColumn(networkNameColumn, constants.networkNameInterface());
    TextColumnWithTooltip<VmNetworkInterface> typeColumn = new EnumColumn<VmNetworkInterface, VmInterfaceType>() {

        @Override
        protected VmInterfaceType getRawValue(VmNetworkInterface object) {
            return VmInterfaceType.forValue(object.getType());
        }
    };
    getTable().addColumn(typeColumn, constants.typeInterface());
    TextColumnWithTooltip<VmNetworkInterface> macColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getMacAddress();
        }
    };
    getTable().addColumn(macColumn, constants.macInterface());
    TextColumnWithTooltip<VmNetworkInterface> speedColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().toString();
            } else {
                return null;
            }
        }
    };
    getTable().addColumnWithHtmlHeader(speedColumn, templates.sub(constants.speedInterface(), constants.mbps()).asString());
    TextColumnWithTooltip<VmNetworkInterface> rxColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getReceiveRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    getTable().addColumnWithHtmlHeader(rxColumn, templates.sub(constants.rxInterface(), constants.mbps()).asString());
    TextColumnWithTooltip<VmNetworkInterface> txColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getTransmitRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    getTable().addColumnWithHtmlHeader(txColumn, templates.sub(constants.txInterface(), constants.mbps()).asString());
    TextColumnWithTooltip<VmNetworkInterface> dropsColumn = new SumUpColumn<VmNetworkInterface>() {

        @Override
        protected Double[] getRawValue(VmNetworkInterface object) {
            return new Double[] { object.getStatistics().getReceiveDropRate(), object.getStatistics().getTransmitDropRate() };
        }
    };
    getTable().addColumnWithHtmlHeader(dropsColumn, templates.sub(constants.dropsInterface(), constants.pkts()).asString());
    TextColumnWithTooltip<VmNetworkInterface> portMirroringColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            if (object.isPortMirroring()) {
                return constants.portMirroringEnabled();
            } else {
                return "";
            }
        }
    };
    // $NON-NLS-1$
    getTable().addColumnWithHtmlHeader(portMirroringColumn, constants.portMirroring(), "60px");
}
#method_after
@Override
public void initTable(final CommonApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new NicActivateStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VmNetworkInterface> nameColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getName();
        }
    };
    getTable().addColumn(nameColumn, constants.nameInterface());
    TextColumnWithTooltip<VmNetworkInterface> networkNameColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getNetworkName();
        }
    };
    getTable().addColumn(networkNameColumn, constants.networkNameInterface());
    TextColumnWithTooltip<VmNetworkInterface> typeColumn = new EnumColumn<VmNetworkInterface, VmInterfaceType>() {

        @Override
        protected VmInterfaceType getRawValue(VmNetworkInterface object) {
            return VmInterfaceType.forValue(object.getType());
        }
    };
    getTable().addColumn(typeColumn, constants.typeInterface());
    TextColumnWithTooltip<VmNetworkInterface> macColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            return object.getMacAddress();
        }
    };
    getTable().addColumn(macColumn, constants.macInterface());
    TextColumnWithTooltip<VmNetworkInterface> speedColumn = new TextColumnWithTooltip<VmNetworkInterface>() {

        @Override
        public String getValue(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().toString();
            } else {
                return null;
            }
        }
    };
    getTable().addColumnWithHtmlHeader(speedColumn, templates.sub(constants.speedInterface(), constants.mbps()).asString());
    TextColumnWithTooltip<VmNetworkInterface> rxColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getReceiveRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    getTable().addColumnWithHtmlHeader(rxColumn, templates.sub(constants.rxInterface(), constants.mbps()).asString());
    TextColumnWithTooltip<VmNetworkInterface> txColumn = new RxTxRateColumn<VmNetworkInterface>() {

        @Override
        protected Double getRate(VmNetworkInterface object) {
            return object.getStatistics().getTransmitRate();
        }

        @Override
        protected Double getSpeed(VmNetworkInterface object) {
            if (object.getSpeed() != null) {
                return object.getSpeed().doubleValue();
            } else {
                return null;
            }
        }
    };
    getTable().addColumnWithHtmlHeader(txColumn, templates.sub(constants.txInterface(), constants.mbps()).asString());
    TextColumnWithTooltip<VmNetworkInterface> dropsColumn = new SumUpColumn<VmNetworkInterface>() {

        @Override
        protected Double[] getRawValue(VmNetworkInterface object) {
            return new Double[] { object.getStatistics().getReceiveDropRate(), object.getStatistics().getTransmitDropRate() };
        }
    };
    getTable().addColumnWithHtmlHeader(dropsColumn, templates.sub(constants.dropsInterface(), constants.pkts()).asString());
}
#end_block

#method_before
public void init(String configFilePath) throws ManageDomainsResult {
    try {
        utilityConfiguration = new ManageDomainsConfiguration(configFilePath);
    } catch (ConfigurationException e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CONFIGURATION, "Verify that postgresql service is up and check DB configurations", e.getMessage());
    }
    try {
        daoImpl = new ManageDomainsDAOImpl();
    } catch (SQLException e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DB_EXCEPTION, "Verify that postgresql service is up and check DB configurations", e.getMessage());
    }
}
#method_after
public void init(String configFilePath) throws ManageDomainsResult {
    try {
        utilityConfiguration = new ManageDomainsConfiguration(configFilePath);
    } catch (ConfigurationException e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CONFIGURATION, e.getMessage());
    }
    try {
        daoImpl = new ManageDomainsDAOImpl();
    } catch (SQLException e) {
        throw new ManageDomainsResult("Please verify the following:\n1. Your database credentials are valid.\n2. The database machine is accessible.\n3. The database service is running", ManageDomainsResultEnum.DB_EXCEPTION, e.getMessage());
    }
}
#end_block

#method_before
private void createConfigurationProvider(String engineConfigProperties) throws ManageDomainsResult {
    try {
        String engineConfigExecutable = utilityConfiguration.getEngineConfigExecutablePath();
        String adUserName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserName);
        String adUserPassword = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserPassword);
        String ldapSecurityAuthentication = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPSecurityAuthentication);
        String domainName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.DomainName);
        String adUserId = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserId);
        String ldapServers = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LdapServers);
        String ldapProviderTypes = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPProviderTypes);
        configurationProvider = new ConfigurationProvider(adUserName, adUserPassword, domainName, ldapSecurityAuthentication, ldapServers, adUserId, ldapProviderTypes, utilityConfiguration.getEngineConfigExecutablePath(), engineConfigProperties);
    } catch (Throwable e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CURRENT_CONFIGURATION, "Verify that postgresql service is up and check DB configurations", e.getMessage());
    }
}
#method_after
private void createConfigurationProvider(String engineConfigProperties) throws ManageDomainsResult {
    try {
        String engineConfigExecutable = utilityConfiguration.getEngineConfigExecutablePath();
        String adUserName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserName);
        String adUserPassword = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserPassword);
        String ldapSecurityAuthentication = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPSecurityAuthentication);
        String domainName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.DomainName);
        String adUserId = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserId);
        String ldapServers = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LdapServers);
        String ldapProviderTypes = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPProviderTypes);
        configurationProvider = new ConfigurationProvider(adUserName, adUserPassword, domainName, ldapSecurityAuthentication, ldapServers, adUserId, ldapProviderTypes, utilityConfiguration.getEngineConfigExecutablePath(), engineConfigProperties);
    } catch (Throwable e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CURRENT_CONFIGURATION, e.getMessage());
    }
}
#end_block

#method_before
private void runCommand(CLIParser parser) throws ManageDomainsResult {
    String action = parser.getArg(Arguments.action.name());
    ActionType actionType;
    try {
        actionType = ActionType.valueOf(action);
    } catch (IllegalArgumentException ex) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ACTION, "Invalid action, verify DB connection", action);
    }
    if (actionType.equals(ActionType.add)) {
        addDomain(parser.getArg(Arguments.domain.name()).toLowerCase(), parser.getArg(Arguments.user.name()), getPasswordInput(parser), REMOTE_LOCATION, getLdapProviderType(parser));
    } else if (actionType.equals(ActionType.edit)) {
        editDomain(parser.getArg(Arguments.domain.name()).toLowerCase(), parser.getArg(Arguments.user.name()), getPasswordInput(parser), null, parser.hasArg(Arguments.provider.name()) ? getLdapProviderType(parser) : null);
    } else if (actionType.equals(ActionType.delete)) {
        deleteDomain(parser.getArg(Arguments.domain.name()).toLowerCase());
    } else if (actionType.equals(ActionType.validate)) {
        validate();
    } else if (actionType.equals(ActionType.list)) {
        getConfiguration();
    } else {
        throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ACTION, "Invalid action, verify DB connection", action);
    }
}
#method_after
private void runCommand(CLIParser parser) throws ManageDomainsResult {
    String action = parser.getArg(Arguments.action.name());
    ActionType actionType;
    try {
        actionType = ActionType.valueOf(action);
    } catch (IllegalArgumentException ex) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ACTION, action);
    }
    if (actionType.equals(ActionType.add)) {
        addDomain(parser.getArg(Arguments.domain.name()).toLowerCase(), parser.getArg(Arguments.user.name()), getPasswordInput(parser), REMOTE_LOCATION, getLdapProviderType(parser));
    } else if (actionType.equals(ActionType.edit)) {
        editDomain(parser.getArg(Arguments.domain.name()).toLowerCase(), parser.getArg(Arguments.user.name()), getPasswordInput(parser), null, parser.hasArg(Arguments.provider.name()) ? getLdapProviderType(parser) : null);
    } else if (actionType.equals(ActionType.delete)) {
        deleteDomain(parser.getArg(Arguments.domain.name()).toLowerCase());
    } else if (actionType.equals(ActionType.validate)) {
        validate();
    } else if (actionType.equals(ActionType.list)) {
        getConfiguration();
    } else {
        throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ACTION, action);
    }
}
#end_block

#method_before
protected LdapProviderType getLdapProviderType(CLIParser parser) throws ManageDomainsResult {
    try {
        return LdapProviderType.valueOfIgnoreCase(parser.getArg(Arguments.provider.name()));
    } catch (IllegalArgumentException i) {
    // continue and print message
    } catch (NullPointerException e) {
    // continue and print message
    }
    StringBuffer sb = new StringBuffer();
    sb.append(parser.getArg(Arguments.provider.name()) + ". Supported provider types are:\n");
    for (LdapProviderType t : LdapProviderType.values()) {
        sb.append(" " + t.name() + "\n");
    }
    throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_FOR_COMMAND, "Check Db Connection, getLdapProviderType received empty parameter", sb.toString());
}
#method_after
protected LdapProviderType getLdapProviderType(CLIParser parser) throws ManageDomainsResult {
    try {
        return LdapProviderType.valueOfIgnoreCase(parser.getArg(Arguments.provider.name()));
    } catch (IllegalArgumentException i) {
    // continue and print message
    } catch (NullPointerException e) {
    // continue and print message
    }
    StringBuffer sb = new StringBuffer();
    sb.append(parser.getArg(Arguments.provider.name()) + ". Supported provider types are:\n");
    for (LdapProviderType t : LdapProviderType.values()) {
        sb.append(" " + t.name() + "\n");
    }
    throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_FOR_COMMAND, sb.toString());
}
#end_block

#method_before
private String getPasswordInput(CLIParser parser) throws ManageDomainsResult {
    String pass = null;
    if (parser.hasArg(Arguments.passwordFile.name())) {
        try {
            String passwordFile = parser.getArg(Arguments.passwordFile.name());
            pass = readPasswordFile(passwordFile);
        } catch (Exception e) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_READING_PASSWORD_FILE, "Check DB connection. Error during reading password file", e.getMessage());
        }
    } else if (parser.hasArg(Arguments.interactive.name())) {
        pass = readPasswordInteractively();
    }
    validatePassword(pass);
    return pass;
}
#method_after
private String getPasswordInput(CLIParser parser) throws ManageDomainsResult {
    String pass = null;
    if (parser.hasArg(Arguments.passwordFile.name())) {
        try {
            String passwordFile = parser.getArg(Arguments.passwordFile.name());
            pass = readPasswordFile(passwordFile);
        } catch (Exception e) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_READING_PASSWORD_FILE, e.getMessage());
        }
    } else if (parser.hasArg(Arguments.interactive.name())) {
        pass = readPasswordInteractively();
    }
    validatePassword(pass);
    return pass;
}
#end_block

#method_before
public void addDomain(String domainName, String userName, String password, String mode, LdapProviderType ldapProviderType) throws ManageDomainsResult {
    String authMode = DEFAULT_AUTH_MODE;
    if (mode.equalsIgnoreCase(LdapModeEnum.LOCAL.name())) {
        authMode = LdapAuthModeEnum.SIMPLE.name();
    } else if (mode.equalsIgnoreCase(LdapModeEnum.REMOTE.name())) {
        authMode = LdapAuthModeEnum.GSSAPI.name();
    }
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    if (domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_ALREADY_EXISTS_IN_CONFIGURATION, "Error during verified domain name. Empty name or DB connection error", domainName);
    }
    domainNameEntry.setValueForDomain(domainName, null);
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserIdEntry = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String currentLDAPProviderTypes = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserIdEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypesEntry = new DomainsConfigurationEntry(currentLDAPProviderTypes, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    adUserNameEntry.setValueForDomain(domainName, userName);
    adUserPasswordEntry.setValueForDomain(domainName, password);
    authModeEntry.setValueForDomain(domainName, authMode);
    ldapProviderTypesEntry.setValueForDomain(domainName, ldapProviderType.name());
    if (authMode.equalsIgnoreCase(LdapAuthModeEnum.SIMPLE.name())) {
        ldapServersEntry.setValueForDomain(domainName, utilityConfiguration.getLocalHostEntry());
    }
    testConfiguration(domainName, domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, adUserIdEntry, ldapProviderTypesEntry, true, false);
    if (addPermissions) {
        updatePermissionsTable(adUserNameEntry, adUserIdEntry);
    } else {
        System.out.println(WARNING_NOT_ADDING_PERMISSIONS);
    }
    // Update the configuration
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypesEntry);
    System.out.println(String.format(SUCCESSFULLY_COMPLETED_ACTION_ON_DOMAIN, "added", domainName));
}
#method_after
public void addDomain(String domainName, String userName, String password, String mode, LdapProviderType ldapProviderType) throws ManageDomainsResult {
    String authMode = DEFAULT_AUTH_MODE;
    if (mode.equalsIgnoreCase(LdapModeEnum.LOCAL.name())) {
        authMode = LdapAuthModeEnum.SIMPLE.name();
    } else if (mode.equalsIgnoreCase(LdapModeEnum.REMOTE.name())) {
        authMode = LdapAuthModeEnum.GSSAPI.name();
    }
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    if (domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_ALREADY_EXISTS_IN_CONFIGURATION, domainName);
    }
    domainNameEntry.setValueForDomain(domainName, null);
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserIdEntry = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String currentLDAPProviderTypes = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserIdEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypesEntry = new DomainsConfigurationEntry(currentLDAPProviderTypes, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    adUserNameEntry.setValueForDomain(domainName, userName);
    adUserPasswordEntry.setValueForDomain(domainName, password);
    authModeEntry.setValueForDomain(domainName, authMode);
    ldapProviderTypesEntry.setValueForDomain(domainName, ldapProviderType.name());
    if (authMode.equalsIgnoreCase(LdapAuthModeEnum.SIMPLE.name())) {
        ldapServersEntry.setValueForDomain(domainName, utilityConfiguration.getLocalHostEntry());
    }
    testConfiguration(domainName, domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, adUserIdEntry, ldapProviderTypesEntry, true, false);
    if (addPermissions) {
        updatePermissionsTable(adUserNameEntry, adUserIdEntry);
    } else {
        System.out.println(WARNING_NOT_ADDING_PERMISSIONS);
    }
    // Update the configuration
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypesEntry);
    System.out.println(String.format(SUCCESSFULLY_COMPLETED_ACTION_ON_DOMAIN, "added", domainName));
}
#end_block

#method_before
private ManageDomainsResult updatePermissionsTable(DomainsConfigurationEntry adUserNameEntry, DomainsConfigurationEntry adUseridEntry) {
    try {
        Set<Entry<String, String>> userNameValues = adUserNameEntry.getValues();
        for (Entry<String, String> currUserEntry : userNameValues) {
            String currDomain = currUserEntry.getKey();
            String currUser = currUserEntry.getValue();
            String guid = adUseridEntry.getValueForDomain(currDomain);
            daoImpl.updatePermissionsTable(guid, currUser, currDomain);
        }
        return OK_RESULT;
    } catch (SQLException e) {
        return new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_CHANGES_IN_DATABASE, "Check connection to DB, failed during applying changes", e.getMessage());
    }
}
#method_after
private ManageDomainsResult updatePermissionsTable(DomainsConfigurationEntry adUserNameEntry, DomainsConfigurationEntry adUseridEntry) {
    try {
        Set<Entry<String, String>> userNameValues = adUserNameEntry.getValues();
        for (Entry<String, String> currUserEntry : userNameValues) {
            String currDomain = currUserEntry.getKey();
            String currUser = currUserEntry.getValue();
            String guid = adUseridEntry.getValueForDomain(currDomain);
            daoImpl.updatePermissionsTable(guid, currUser, currDomain);
        }
        return OK_RESULT;
    } catch (SQLException e) {
        return new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_CHANGES_IN_DATABASE, e.getMessage());
    }
}
#end_block

#method_before
public void editDomain(String domainName, String userName, String password, String mode, LdapProviderType ldapProviderType) throws ManageDomainsResult {
    String authMode;
    if (mode == null) {
        authMode = getDomainAuthMode(domainName);
    } else {
        authMode = DEFAULT_AUTH_MODE;
        if (mode.equalsIgnoreCase(LdapModeEnum.LOCAL.name())) {
            authMode = LdapAuthModeEnum.SIMPLE.name();
        } else if (mode.equalsIgnoreCase(LdapModeEnum.REMOTE.name())) {
            authMode = LdapAuthModeEnum.GSSAPI.name();
        }
    }
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    if (!domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_DOESNT_EXIST_IN_CONFIGURATION, "Error during verified domain name. Empty name or DB connection error", domainName);
    }
    domainNameEntry.setValueForDomain(domainName, null);
    // Assuming we got here, we need to change the configuration of the others as well
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserIdEntry = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String currentLdapProviderTypeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserIdEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypeEntry = new DomainsConfigurationEntry(currentLdapProviderTypeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    if (userName != null) {
        adUserNameEntry.setValueForDomain(domainName, userName);
    }
    if (password != null) {
        adUserPasswordEntry.setValueForDomain(domainName, password);
    }
    if (mode != null) {
        authModeEntry.setValueForDomain(domainName, authMode);
    }
    if (authMode.equalsIgnoreCase(LdapAuthModeEnum.SIMPLE.name())) {
        ldapServersEntry.setValueForDomain(domainName, utilityConfiguration.getLocalHostEntry());
    }
    if (ldapProviderType != null) {
        ldapProviderTypeEntry.setValueForDomain(domainName, ldapProviderType.name());
    }
    testConfiguration(domainName, domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, adUserIdEntry, ldapProviderTypeEntry, true, false);
    if (addPermissions) {
        updatePermissionsTable(adUserNameEntry, adUserIdEntry);
    } else {
        System.out.println(WARNING_NOT_ADDING_PERMISSIONS);
    }
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypeEntry);
    System.out.println(String.format(SUCCESSFULLY_COMPLETED_ACTION_ON_DOMAIN, "edited", domainName));
}
#method_after
public void editDomain(String domainName, String userName, String password, String mode, LdapProviderType ldapProviderType) throws ManageDomainsResult {
    String authMode;
    if (mode == null) {
        authMode = getDomainAuthMode(domainName);
    } else {
        authMode = DEFAULT_AUTH_MODE;
        if (mode.equalsIgnoreCase(LdapModeEnum.LOCAL.name())) {
            authMode = LdapAuthModeEnum.SIMPLE.name();
        } else if (mode.equalsIgnoreCase(LdapModeEnum.REMOTE.name())) {
            authMode = LdapAuthModeEnum.GSSAPI.name();
        }
    }
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    if (!domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_DOESNT_EXIST_IN_CONFIGURATION, domainName);
    }
    domainNameEntry.setValueForDomain(domainName, null);
    // Assuming we got here, we need to change the configuration of the others as well
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserIdEntry = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String currentLdapProviderTypeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserIdEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypeEntry = new DomainsConfigurationEntry(currentLdapProviderTypeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    if (userName != null) {
        adUserNameEntry.setValueForDomain(domainName, userName);
    }
    if (password != null) {
        adUserPasswordEntry.setValueForDomain(domainName, password);
    }
    if (mode != null) {
        authModeEntry.setValueForDomain(domainName, authMode);
    }
    if (authMode.equalsIgnoreCase(LdapAuthModeEnum.SIMPLE.name())) {
        ldapServersEntry.setValueForDomain(domainName, utilityConfiguration.getLocalHostEntry());
    }
    if (ldapProviderType != null) {
        ldapProviderTypeEntry.setValueForDomain(domainName, ldapProviderType.name());
    }
    testConfiguration(domainName, domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, adUserIdEntry, ldapProviderTypeEntry, true, false);
    if (addPermissions) {
        updatePermissionsTable(adUserNameEntry, adUserIdEntry);
    } else {
        System.out.println(WARNING_NOT_ADDING_PERMISSIONS);
    }
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypeEntry);
    System.out.println(String.format(SUCCESSFULLY_COMPLETED_ACTION_ON_DOMAIN, "edited", domainName));
}
#end_block

#method_before
private void createKerberosConfiguration(DomainsConfigurationEntry gssapiDomains) throws ManageDomainsResult {
    if (!gssapiDomains.isEntryEmpty()) {
        String gssapiDomainsString = gssapiDomains.getDomainsConfigurationEntry();
        KrbConfCreator krbConfCreator;
        try {
            log.info("Creating kerberos configuration for domain(s): " + gssapiDomainsString);
            krbConfCreator = new KrbConfCreator(gssapiDomainsString);
            StringBuffer buffer = null;
            buffer = krbConfCreator.parse("y");
            krbConfCreator.toFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX, buffer);
            log.info("Successfully created kerberos configuration for domain(s): " + gssapiDomainsString);
        } catch (Exception ex) {
            ManageDomainsResult result = new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_CREATING_KERBEROS_CONFIGURATION, "Check network Connection to DB, failed during configure kerberos.", ex.getMessage());
            throw result;
        }
    }
}
#method_after
private void createKerberosConfiguration(DomainsConfigurationEntry gssapiDomains) throws ManageDomainsResult {
    if (!gssapiDomains.isEntryEmpty()) {
        String gssapiDomainsString = gssapiDomains.getDomainsConfigurationEntry();
        KrbConfCreator krbConfCreator;
        try {
            log.info("Creating kerberos configuration for domain(s): " + gssapiDomainsString);
            krbConfCreator = new KrbConfCreator(gssapiDomainsString);
            StringBuffer buffer = null;
            buffer = krbConfCreator.parse("y");
            krbConfCreator.toFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX, buffer);
            log.info("Successfully created kerberos configuration for domain(s): " + gssapiDomainsString);
        } catch (Exception ex) {
            ManageDomainsResult result = new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_CREATING_KERBEROS_CONFIGURATION, ex.getMessage());
            throw result;
        }
    }
}
#end_block

#method_before
private void checkKerberosConfiguration(String domainName, DomainsConfigurationEntry users, DomainsConfigurationEntry passwords, DomainsConfigurationEntry gssapiDomains, DomainsConfigurationEntry userIds, DomainsConfigurationEntry ldapProviderTypes, String kerberosConfigFile, boolean isValidate) throws ManageDomainsResult {
    Set<Entry<String, String>> gssapiDomainValues = gssapiDomains.getValues();
    for (Entry<String, String> currDomain : gssapiDomainValues) {
        String domain = currDomain.getKey();
        String currUserName = users.getValueForDomain(domain);
        users.setValueForDomain(domain, constructUPN(currUserName, domain));
        try {
            log.info("Testing kerberos configuration for domain: " + domain);
            KerberosConfigCheck kerberosConfigCheck = new KerberosConfigCheck();
            StringBuffer userGuid = new StringBuffer();
            kerberosConfigCheck.checkInstallation(domain, users.getValueForDomain(domain), passwords.getValueForDomain(domain), utilityConfiguration.getJaasFilePath(), kerberosConfigFile, userGuid, LdapProviderType.valueOf(ldapProviderTypes.getValueForDomain(domain)));
            userIds.setValueForDomain(domain, userGuid.toString());
            if (isValidate) {
                System.out.println("Domain " + domain + " is valid.");
            }
            log.info("Successfully tested kerberos configuration for domain: " + domain);
        } catch (Exception e) {
            ManageDomainsResult result = new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_TESTING_DOMAIN, "Check DB Connection, failed during testing domain", new String[] { domain, e.getMessage() });
            if ((isValidate && reportAllErrors) || ((domainName != null) && !domain.equals(domainName))) {
                System.out.println("WARNING, domain: " + domain + " may not be functional: " + result.getDetailedMessage());
            } else {
                throw result;
            }
        }
    }
}
#method_after
private void checkKerberosConfiguration(String domainName, DomainsConfigurationEntry users, DomainsConfigurationEntry passwords, DomainsConfigurationEntry gssapiDomains, DomainsConfigurationEntry userIds, DomainsConfigurationEntry ldapProviderTypes, String kerberosConfigFile, boolean isValidate) throws ManageDomainsResult {
    Set<Entry<String, String>> gssapiDomainValues = gssapiDomains.getValues();
    for (Entry<String, String> currDomain : gssapiDomainValues) {
        String domain = currDomain.getKey();
        String currUserName = users.getValueForDomain(domain);
        users.setValueForDomain(domain, constructUPN(currUserName, domain));
        try {
            log.info("Testing kerberos configuration for domain: " + domain);
            KerberosConfigCheck kerberosConfigCheck = new KerberosConfigCheck();
            StringBuffer userGuid = new StringBuffer();
            kerberosConfigCheck.checkInstallation(domain, users.getValueForDomain(domain), passwords.getValueForDomain(domain), utilityConfiguration.getJaasFilePath(), kerberosConfigFile, userGuid, LdapProviderType.valueOf(ldapProviderTypes.getValueForDomain(domain)));
            userIds.setValueForDomain(domain, userGuid.toString());
            if (isValidate) {
                System.out.println("Domain " + domain + " is valid.");
            }
            log.info("Successfully tested kerberos configuration for domain: " + domain);
        } catch (Exception e) {
            ManageDomainsResult result = new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_TESTING_DOMAIN, new String[] { domain, e.getMessage() });
            if ((isValidate && reportAllErrors) || ((domainName != null) && !domain.equals(domainName))) {
                System.out.println("WARNING, domain: " + domain + " may not be functional: " + result.getDetailedMessage());
            } else {
                throw result;
            }
        }
    }
}
#end_block

#method_before
private void applyKerberosConfiguration() throws ManageDomainsResult {
    try {
        // We backup the kerberos configuration file in case it already exists
        if (FileUtil.fileExists(utilityConfiguration.getkrb5confFilePath())) {
            SimpleDateFormat ft = new SimpleDateFormat("yyyyMMddhhmmsszzz");
            String destFileName = utilityConfiguration.getkrb5confFilePath() + ".backup_" + ft.format(new Date());
            log.info("Performing backup of kerberos configuration file to " + destFileName);
            FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath(), destFileName);
        }
        log.info("Applying kerberos configuration");
        FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX, utilityConfiguration.getkrb5confFilePath());
        FileUtil.deleteFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX);
    } catch (IOException e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_KERBEROS_CONFIGURATION, "Check Connection to DB, kerberos configuration couldn't been saved", e.getMessage());
    }
}
#method_after
private void applyKerberosConfiguration() throws ManageDomainsResult {
    try {
        // We backup the kerberos configuration file in case it already exists
        if (FileUtil.fileExists(utilityConfiguration.getkrb5confFilePath())) {
            SimpleDateFormat ft = new SimpleDateFormat("yyyyMMddhhmmsszzz");
            String destFileName = utilityConfiguration.getkrb5confFilePath() + ".backup_" + ft.format(new Date());
            log.info("Performing backup of kerberos configuration file to " + destFileName);
            FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath(), destFileName);
        }
        log.info("Applying kerberos configuration");
        FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX, utilityConfiguration.getkrb5confFilePath());
        FileUtil.deleteFile(utilityConfiguration.getkrb5confFilePath() + TESTING_KRB5_CONF_SUFFIX);
    } catch (IOException e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_KERBEROS_CONFIGURATION, e.getMessage());
    }
}
#end_block

#method_before
private ManageDomainsResult checkSimple(String domain, String userName, String password, String address, StringBuffer userGuid, LdapProviderType ldapProviderType) {
    log.info("Testing domain " + domain);
    SimpleAuthenticationCheck simpleAuthenticationCheck = new SimpleAuthenticationCheck();
    ReturnStatus returnStatus = simpleAuthenticationCheck.printUserGuid(domain, userName, password, address, userGuid, ldapProviderType);
    if (!returnStatus.equals(ReturnStatus.OK)) {
        return new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_TESTING_DOMAIN, "Checking domain configuration failed, check network connection.", new String[] { domain, returnStatus.getDetailedMessage() });
    }
    log.info("Successfully tested domain " + domain);
    return OK_RESULT;
}
#method_after
private ManageDomainsResult checkSimple(String domain, String userName, String password, String address, StringBuffer userGuid, LdapProviderType ldapProviderType) {
    log.info("Testing domain " + domain);
    SimpleAuthenticationCheck simpleAuthenticationCheck = new SimpleAuthenticationCheck();
    ReturnStatus returnStatus = simpleAuthenticationCheck.printUserGuid(domain, userName, password, address, userGuid, ldapProviderType);
    if (!returnStatus.equals(ReturnStatus.OK)) {
        return new ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_TESTING_DOMAIN, new String[] { domain, returnStatus.getDetailedMessage() });
    }
    log.info("Successfully tested domain " + domain);
    return OK_RESULT;
}
#end_block

#method_before
public void deleteDomain(String domainName) throws ManageDomainsResult {
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    if (!domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_DOESNT_EXIST_IN_CONFIGURATION, "Error during verified domain name. Empty name or DB connection error", domainName);
    }
    domainNameEntry.removeValueForDomain(domainName);
    if (domainNameEntry.isEntryEmpty()) {
        System.out.println(String.format(WARNING_ABOUT_TO_DELETE_LAST_DOMAIN, domainName));
    }
    // Assuming we got here, we need to change the configuration of the others as well
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserId = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String ldapProviderType = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserId, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypeEntry = new DomainsConfigurationEntry(ldapProviderType, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    adUserNameEntry.removeValueForDomain(domainName);
    adUserIdEntry.removeValueForDomain(domainName);
    adUserPasswordEntry.removeValueForDomain(domainName);
    authModeEntry.removeValueForDomain(domainName);
    ldapServersEntry.removeValueForDomain(domainName);
    ldapProviderTypeEntry.removeValueForDomain(domainName);
    // Update the configuration
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypeEntry);
    System.out.println(String.format(DELETE_DOMAIN_SUCCESS, domainName));
}
#method_after
public void deleteDomain(String domainName) throws ManageDomainsResult {
    String currentDomains = configurationProvider.getConfigValue(ConfigValues.DomainName);
    DomainsConfigurationEntry domainNameEntry = new DomainsConfigurationEntry(currentDomains, DOMAIN_SEPERATOR, null);
    if (!domainNameEntry.doesDomainExist(domainName)) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.DOMAIN_DOESNT_EXIST_IN_CONFIGURATION, domainName);
    }
    domainNameEntry.removeValueForDomain(domainName);
    if (domainNameEntry.isEntryEmpty()) {
        System.out.println(String.format(WARNING_ABOUT_TO_DELETE_LAST_DOMAIN, domainName));
    }
    // Assuming we got here, we need to change the configuration of the others as well
    String currentAdUserNameEntry = configurationProvider.getConfigValue(ConfigValues.AdUserName);
    String currentAdUserPasswordEntry = configurationProvider.getConfigValue(ConfigValues.AdUserPassword);
    String currentAuthModeEntry = configurationProvider.getConfigValue(ConfigValues.LDAPSecurityAuthentication);
    String currentLdapServersEntry = configurationProvider.getConfigValue(ConfigValues.LdapServers);
    String currentAdUserId = configurationProvider.getConfigValue(ConfigValues.AdUserId);
    String ldapProviderType = configurationProvider.getConfigValue(ConfigValues.LDAPProviderTypes);
    DomainsConfigurationEntry adUserNameEntry = new DomainsConfigurationEntry(currentAdUserNameEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserPasswordEntry = new PasswordDomainsConfigurationEntry(currentAdUserPasswordEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry authModeEntry = new DomainsConfigurationEntry(currentAuthModeEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapServersEntry = new DomainsConfigurationEntry(currentLdapServersEntry, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry adUserIdEntry = new DomainsConfigurationEntry(currentAdUserId, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    DomainsConfigurationEntry ldapProviderTypeEntry = new DomainsConfigurationEntry(ldapProviderType, DOMAIN_SEPERATOR, VALUE_SEPERATOR);
    adUserNameEntry.removeValueForDomain(domainName);
    adUserIdEntry.removeValueForDomain(domainName);
    adUserPasswordEntry.removeValueForDomain(domainName);
    authModeEntry.removeValueForDomain(domainName);
    ldapServersEntry.removeValueForDomain(domainName);
    ldapProviderTypeEntry.removeValueForDomain(domainName);
    // Update the configuration
    setConfigurationEntries(domainNameEntry, adUserNameEntry, adUserPasswordEntry, authModeEntry, ldapServersEntry, adUserIdEntry, ldapProviderTypeEntry);
    System.out.println(String.format(DELETE_DOMAIN_SUCCESS, domainName));
}
#end_block

#method_before
private void validate(CLIParser parser) throws ManageDomainsResult {
    if (parser.hasArg(Arguments.propertiesFile.name())) {
        if (parser.hasArg(Arguments.action.name())) {
            String action = parser.getArg(Arguments.action.name());
            ActionType actionType;
            try {
                actionType = ActionType.valueOf(action);
            } catch (IllegalArgumentException ex) {
                throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ACTION, "Invalid DB action, check DB connection", action);
            }
            if (actionType.equals(ActionType.add)) {
                requireArgs(parser, Arguments.domain, Arguments.user, Arguments.provider);
                requireAtLeastOneArg(parser, Arguments.passwordFile, Arguments.interactive);
            } else if (actionType.equals(ActionType.edit)) {
                requireArgs(parser, Arguments.domain);
            } else if (actionType.equals(ActionType.delete)) {
                requireArgs(parser, Arguments.domain);
            } else if (actionType.equals(ActionType.validate)) {
                checkInvalidArgs(parser, Arguments.domain, Arguments.user, Arguments.passwordFile, Arguments.interactive);
            } else if (actionType.equals(ActionType.list)) {
                checkInvalidArgs(parser, Arguments.domain, Arguments.user, Arguments.passwordFile, Arguments.interactive);
            }
        } else {
            throw new ManageDomainsResult(ManageDomainsResultEnum.ACTION_IS_NOT_SPECIFIED);
        }
    } else {
        throw new ManageDomainsResult(ManageDomainsResultEnum.PROPERTIES_FILE_IS_NOT_SPECIFIED);
    }
    if (parser.getArgs().size() > Arguments.values().length) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.TOO_MANY_ARGUMENTS);
    }
}
#method_after
private void validate(CLIParser parser) throws ManageDomainsResult {
    if (parser.hasArg(Arguments.propertiesFile.name())) {
        if (parser.hasArg(Arguments.action.name())) {
            String action = parser.getArg(Arguments.action.name());
            ActionType actionType;
            try {
                actionType = ActionType.valueOf(action);
            } catch (IllegalArgumentException ex) {
                throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ACTION, action);
            }
            if (actionType.equals(ActionType.add)) {
                requireArgs(parser, Arguments.domain, Arguments.user, Arguments.provider);
                requireAtLeastOneArg(parser, Arguments.passwordFile, Arguments.interactive);
            } else if (actionType.equals(ActionType.edit)) {
                requireArgs(parser, Arguments.domain);
            } else if (actionType.equals(ActionType.delete)) {
                requireArgs(parser, Arguments.domain);
            } else if (actionType.equals(ActionType.validate)) {
                checkInvalidArgs(parser, Arguments.domain, Arguments.user, Arguments.passwordFile, Arguments.interactive);
            } else if (actionType.equals(ActionType.list)) {
                checkInvalidArgs(parser, Arguments.domain, Arguments.user, Arguments.passwordFile, Arguments.interactive);
            }
        } else {
            throw new ManageDomainsResult(ManageDomainsResultEnum.ACTION_IS_NOT_SPECIFIED);
        }
    } else {
        throw new ManageDomainsResult(ManageDomainsResultEnum.PROPERTIES_FILE_IS_NOT_SPECIFIED);
    }
    if (parser.getArgs().size() > Arguments.values().length) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.TOO_MANY_ARGUMENTS);
    }
}
#end_block

#method_before
private void requireArgs(CLIParser parser, Arguments... args) throws ManageDomainsResult {
    for (Arguments arg : args) {
        if (!parser.hasArg(arg.name())) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.ARGUMENT_IS_REQUIRED, "Missing argument for command", arg.name());
        }
    }
}
#method_after
private void requireArgs(CLIParser parser, Arguments... args) throws ManageDomainsResult {
    for (Arguments arg : args) {
        if (!parser.hasArg(arg.name())) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.ARGUMENT_IS_REQUIRED, arg.name());
        }
    }
}
#end_block

#method_before
private void requireAtLeastOneArg(CLIParser parser, Arguments... args) throws ManageDomainsResult {
    for (Arguments arg : args) {
        if (parser.hasArg(arg.name())) {
            return;
        }
    }
    throw new ManageDomainsResult(ManageDomainsResultEnum.ARGUMENT_IS_REQUIRED, "Missing argument for command", Arrays.deepToString(args));
}
#method_after
private void requireAtLeastOneArg(CLIParser parser, Arguments... args) throws ManageDomainsResult {
    for (Arguments arg : args) {
        if (parser.hasArg(arg.name())) {
            return;
        }
    }
    throw new ManageDomainsResult(ManageDomainsResultEnum.ARGUMENT_IS_REQUIRED, Arrays.deepToString(args));
}
#end_block

#method_before
private void checkInvalidArgs(CLIParser parser, Arguments... args) throws ManageDomainsResult {
    for (Arguments arg : args) {
        if (parser.hasArg(arg.name())) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_FOR_COMMAND, "Empty argument pass. Verify command", arg.name());
        }
    }
}
#method_after
private void checkInvalidArgs(CLIParser parser, Arguments... args) throws ManageDomainsResult {
    for (Arguments arg : args) {
        if (parser.hasArg(arg.name())) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_FOR_COMMAND, arg.name());
        }
    }
}
#end_block

#method_before
public void setConfigValue(ConfigValues enumValue, DomainsConfigurationEntry entry, boolean passedAsValue) throws ManageDomainsResult {
    log.info("Setting value for " + enumValue.toString() + " to " + entry.getDomainsLoggingEntry());
    File passFile = null;
    try {
        passFile = createPassFile(entry.getDomainsConfigurationEntry());
        Process engineConfigProcess = Runtime.getRuntime().exec(engineConfigExecutable + " -s " + enumValue.name() + ((passedAsValue) ? "=" + entry.getDomainsConfigurationEntry() : " --admin-pass-file " + passFile.getAbsolutePath()) + " -p " + engineConfigProperties);
        int retVal = engineConfigProcess.waitFor();
        if (retVal != 0) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_SETTING_CONFIGURATION_VALUE_FOR_OPTION, "Verify Connection to Db, Check if DB service is running", enumValue.name());
        }
    } catch (Throwable e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_SETTING_CONFIGURATION_VALUE_FOR_OPTION_WITH_DETAILS, "Verify Connection to Db, Check if DB service is running", new String[] { enumValue.name(), e.getMessage() });
    } finally {
        disposePassFile(passFile);
    }
}
#method_after
public void setConfigValue(ConfigValues enumValue, DomainsConfigurationEntry entry, boolean passedAsValue) throws ManageDomainsResult {
    log.info("Setting value for " + enumValue.toString() + " to " + entry.getDomainsLoggingEntry());
    File passFile = null;
    try {
        passFile = createPassFile(entry.getDomainsConfigurationEntry());
        Process engineConfigProcess = Runtime.getRuntime().exec(engineConfigExecutable + " -s " + enumValue.name() + ((passedAsValue) ? "=" + entry.getDomainsConfigurationEntry() : " --admin-pass-file " + passFile.getAbsolutePath()) + " -p " + engineConfigProperties);
        int retVal = engineConfigProcess.waitFor();
        if (retVal != 0) {
            throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_SETTING_CONFIGURATION_VALUE_FOR_OPTION, enumValue.name());
        }
    } catch (Throwable e) {
        throw new ManageDomainsResult(ManageDomainsResultEnum.FAILED_SETTING_CONFIGURATION_VALUE_FOR_OPTION_WITH_DETAILS, new String[] { enumValue.name(), e.getMessage() });
    } finally {
        disposePassFile(passFile);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVm() == null) {
        retVal = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
    } else {
        setDescription(getVmName());
    }
    // check that target domain exists
    StorageDomainValidator targetstorageDomainValidator = new StorageDomainValidator(getStorageDomain());
    retVal = retVal && targetstorageDomainValidator.isDomainExistAndActive(getReturnValue().getCanDoActionMessages());
    // load the disks of vm from database
    VmHandler.updateDisksFromDb(getVm());
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    setStoragePoolId(getVm().getstorage_pool_id());
    // check that the target and source domain are in the same storage_pool
    if (DbFacade.getInstance().getStoragePoolIsoMapDAO().get(new StoragePoolIsoMapId(getStorageDomain().getId(), getVm().getstorage_pool_id())) == null) {
        retVal = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    // check if template exists only if asked for
    if (retVal && getParameters().getTemplateMustExists()) {
        retVal = CheckTemplateInStorageDomain(getVm().getstorage_pool_id(), getParameters().getStorageDomainId(), getVm().getvmt_guid());
        if (!retVal) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_EXPORT_DOMAIN);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", getVm().getvmt_name()));
        }
    }
    if (retVal) {
        Map<Guid, ? extends Disk> images = getVm().getDiskMap();
        // check that the images requested format are valid (COW+Sparse)
        retVal = ImagesHandler.CheckImagesConfiguration(getParameters().getStorageDomainId(), new ArrayList<Disk>(images.values()), getReturnValue().getCanDoActionMessages());
        if (retVal && getParameters().getCopyCollapse()) {
            for (DiskImage img : getDisksBasedOnImage()) {
                if (images.containsKey(img.getId())) {
                    // mode)
                    if (((DiskImage) images.get(img.getId())).getvolume_format() == VolumeFormat.RAW && img.getvolume_format() != VolumeFormat.RAW) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_EXPORT_RAW_FORMAT);
                        retVal = false;
                    }
                }
            }
        }
    }
    // check destination storage is Export domain
    if (retVal && getStorageDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
        retVal = false;
    }
    // check destination storage have free space
    if (retVal) {
        int sizeInGB = (int) getVm().getActualDiskWithSnapshotsSize();
        retVal = StorageDomainSpaceChecker.hasSpaceForRequest(getStorageDomain(), sizeInGB);
        if (!retVal)
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
    }
    retVal = CheckVmInStorageDomain() && retVal && validate(new SnapshotsValidator().vmNotDuringSnapshot(getVmId())) && ImagesHandler.PerformImagesChecks(getVm(), getReturnValue().getCanDoActionMessages(), getVm().getstorage_pool_id(), Guid.Empty, false, true, false, false, true, true, true, true, getDisksBasedOnImage());
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__EXPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
        return false;
    }
    setDescription(getVmName());
    setStoragePoolId(getVm().getstorage_pool_id());
    // check that target domain exists
    StorageDomainValidator targetstorageDomainValidator = new StorageDomainValidator(getStorageDomain());
    if (!targetstorageDomainValidator.isDomainExistAndActive(getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // load the disks of vm from database
    VmHandler.updateDisksFromDb(getVm());
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    // check that the target and source domain are in the same storage_pool
    if (DbFacade.getInstance().getStoragePoolIsoMapDAO().get(new StoragePoolIsoMapId(getStorageDomain().getId(), getVm().getstorage_pool_id())) == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
        return false;
    }
    // check if template exists only if asked for
    if (getParameters().getTemplateMustExists()) {
        if (!CheckTemplateInStorageDomain(getVm().getstorage_pool_id(), getParameters().getStorageDomainId(), getVm().getvmt_guid())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_EXPORT_DOMAIN);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", getVm().getvmt_name()));
            return false;
        }
    }
    Map<Guid, ? extends Disk> images = getVm().getDiskMap();
    // check that the images requested format are valid (COW+Sparse)
    if (!ImagesHandler.CheckImagesConfiguration(getParameters().getStorageDomainId(), new ArrayList<Disk>(images.values()), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getCopyCollapse()) {
        for (DiskImage img : getDisksBasedOnImage()) {
            if (images.containsKey(img.getId())) {
                // mode)
                if (((DiskImage) images.get(img.getId())).getvolume_format() == VolumeFormat.RAW && img.getvolume_format() != VolumeFormat.RAW) {
                    addCanDoActionMessage(VdcBllMessages.VM_CANNOT_EXPORT_RAW_FORMAT);
                    return false;
                }
            }
        }
    }
    // check destination storage is Export domain
    if (getStorageDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
        return false;
    }
    // check destination storage have free space
    int sizeInGB = (int) getVm().getActualDiskWithSnapshotsSize();
    if (!StorageDomainSpaceChecker.hasSpaceForRequest(getStorageDomain(), sizeInGB)) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
        return false;
    }
    if (!(CheckVmInStorageDomain() && validate(new SnapshotsValidator().vmNotDuringSnapshot(getVmId())) && ImagesHandler.PerformImagesChecks(getVm(), getReturnValue().getCanDoActionMessages(), getVm().getstorage_pool_id(), Guid.Empty, false, true, false, false, true, true, true, true, getDisksBasedOnImage()))) {
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VmHandler.checkStatusAndLockVm(getVm().getId(), getCompensationContext());
    getDisksBasedOnImage();
    // immediately after the execution of the previous steps
    if (disksImages.isEmpty()) {
        endSuccessfullySynchronous();
    } else {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                MoveOrCopyAllImageGroups();
                return null;
            }
        });
        if (!getReturnValue().getTaskIdList().isEmpty()) {
            setSucceeded(true);
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    VmHandler.LockVm(getVm().getDynamicData(), getCompensationContext());
    freeLock();
    // immediately after the execution of the previous steps
    if (!hasSnappableDisks()) {
        endSuccessfullySynchronous();
    } else {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                MoveOrCopyAllImageGroups();
                return null;
            }
        });
        if (!getReturnValue().getTaskIdList().isEmpty()) {
            setSucceeded(true);
        }
    }
}
#end_block

#method_before
@Override
protected void EndSuccessfully() {
    VM vm = getVm();
    if (vm != null) {
        VmHandler.UnLockVm(vm.getId());
        endDiskRelatedActions(vm);
        if (getParameters().getCopyCollapse()) {
            this.endCopyCollapseOps(vm);
        } else {
            this.endDefaultOps(vm);
        }
        setSucceeded(true);
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ExportVmCommand::EndMoveVmCommand: Vm is null - not performing full EndAction");
    }
}
#method_after
@Override
protected void EndSuccessfully() {
    EndActionOnAllImageGroups();
    VM vm = getVm();
    VmHandler.UnLockVm(vm);
    endDiskRelatedActions(vm);
    if (getParameters().getCopyCollapse()) {
        endCopyCollapseOperations(vm);
    } else {
        updateSnapshotOvf(vm);
    }
    setSucceeded(true);
}
#end_block

#method_before
private void endDiskRelatedActions(VM vm) {
    EndActionOnAllImageGroups();
    VmHandler.updateDisksFromDb(vm);
    VmDeviceUtils.setVmDevices(vm.getStaticData());
}
#method_after
private void endDiskRelatedActions(VM vm) {
    VmHandler.updateDisksFromDb(vm);
    VmDeviceUtils.setVmDevices(vm.getStaticData());
}
#end_block

#method_before
protected void endSuccessfullySynchronous() {
    VM vm = getVm();
    if (vm != null) {
        VmHandler.UnLockVm(vm.getId());
        this.endDefaultOps(vm);
        setSucceeded(true);
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ExportVmCommand::EndSuccessfullySynchronous: Vm is null - not performing full EndAction");
    }
}
#method_after
protected void endSuccessfullySynchronous() {
    VM vm = getVm();
    VmHandler.UnLockVm(vm.getId());
    this.updateSnapshotOvf(vm);
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void EndWithFailure() {
    EndActionOnAllImageGroups();
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm().getId());
        VmHandler.updateDisksFromDb(getVm());
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ExportVmCommand::EndMoveVmCommand: Vm is null - not performing full EndAction");
    }
    setSucceeded(true);
}
#method_after
@Override
protected void EndWithFailure() {
    EndActionOnAllImageGroups();
    VM vm = getVm();
    VmHandler.UnLockVm(vm);
    VmHandler.updateDisksFromDb(vm);
    setSucceeded(true);
}
#end_block

#method_before
private void initImportClonedVm() {
    Guid guid = Guid.NewGuid();
    getVm().setId(guid);
    setVmId(guid);
    getVm().setvm_name(getParameters().getVm().getvm_name());
    getVm().setstorage_pool_id(getParameters().getStoragePoolId());
    getParameters().setVm(getVm());
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        iface.setId(Guid.NewGuid());
        String mac = MacPoolManager.getInstance().allocateNewMac();
        iface.setMacAddress(mac);
    }
}
#method_after
private void initImportClonedVm() {
    Guid guid = Guid.NewGuid();
    getVm().setId(guid);
    setVmId(guid);
    getVm().setvm_name(getParameters().getVm().getvm_name());
    getVm().setstorage_pool_id(getParameters().getStoragePoolId());
    getParameters().setVm(getVm());
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        iface.setId(Guid.NewGuid());
    }
}
#end_block

#method_before
private boolean canDoAction_afterCloneVm(boolean retVal, List<String> canDoActionMessages, Map<Guid, storage_domains> domainsMap) {
    // check that the imported vm guid is not in engine
    if (retVal) {
        VmStatic duplicateVm = getVmStaticDAO().get(getVm().getId());
        if (duplicateVm != null) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS);
            addCanDoActionMessage(String.format("$VmName %1$s", duplicateVm.getvm_name()));
            retVal = false;
        }
    }
    setVmTemplateId(getVm().getvmt_guid());
    if (retVal) {
        if (!TemplateExists() || !CheckTemplateInStorageDomain() || !CheckImagesGUIDsLegal() || !CanAddVm()) {
            retVal = false;
        }
    }
    if (retVal && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getvmt_guid()) && getVmTemplate() != null && getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
        retVal = false;
    }
    if (retVal && getParameters().getCopyCollapse() && getParameters().getVm().getDiskMap() != null) {
        for (Disk disk : getParameters().getVm().getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    retVal = ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, canDoActionMessages);
                    if (!retVal) {
                        break;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (retVal && getParameters().getCopyCollapse() && !TemplateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getstorage_name()));
        retVal = false;
    }
    if (retVal) {
        boolean inCluster = false;
        List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
        for (VDSGroup group : groups) {
            if (group.getId().equals(getParameters().getVdsGroupId())) {
                inCluster = true;
                break;
            }
        }
        if (!inCluster) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            retVal = false;
        }
    }
    if (retVal) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            retVal = StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue());
            if (!retVal) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
                break;
            }
        }
    }
    if (retVal && Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVdsGroup().getcompatibility_version().toString())) {
        // version 2.x)
        if (!VmCommand.validateNumberOfNics(getParameters().getVm().getInterfaces(), null)) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            retVal = false;
        }
    }
    // Check that the USB policy is legal
    if (retVal) {
        retVal = VmHandler.isUsbPolicyLegal(getParameters().getVm().getusb_policy(), getParameters().getVm().getos(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    if (retVal) {
        retVal = validateMacAddress(getVm().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    }
    return retVal;
}
#method_after
private boolean canDoAction_afterCloneVm(boolean retVal, List<String> canDoActionMessages, Map<Guid, storage_domains> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (retVal) {
        VmStatic duplicateVm = getVmStaticDAO().get(getVm().getId());
        if (duplicateVm != null) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS);
            addCanDoActionMessage(String.format("$VmName %1$s", duplicateVm.getvm_name()));
            retVal = false;
        }
    }
    setVmTemplateId(getVm().getvmt_guid());
    if (retVal) {
        if (!TemplateExists() || !CheckTemplateInStorageDomain() || !CheckImagesGUIDsLegal() || !CanAddVm()) {
            retVal = false;
        }
    }
    if (retVal && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getvmt_guid()) && getVmTemplate() != null && getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
        retVal = false;
    }
    if (retVal && getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    retVal = ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, canDoActionMessages);
                    if (!retVal) {
                        break;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (retVal && getParameters().getCopyCollapse() && !TemplateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getstorage_name()));
        retVal = false;
    }
    if (retVal) {
        boolean inCluster = false;
        List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
        for (VDSGroup group : groups) {
            if (group.getId().equals(getParameters().getVdsGroupId())) {
                inCluster = true;
                break;
            }
        }
        if (!inCluster) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            retVal = false;
        }
    }
    if (retVal) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            retVal = StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue());
            if (!retVal) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
                break;
            }
        }
    }
    if (retVal && Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVdsGroup().getcompatibility_version().toString())) {
        // version 2.x)
        if (!VmCommand.validateNumberOfNics(vm.getInterfaces(), null)) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            retVal = false;
        }
    }
    // Check that the USB policy is legal
    if (retVal) {
        VmHandler.updateImportedVmUsbPolicy(vm.getStaticData());
        retVal = VmHandler.isUsbPolicyLegal(vm.getusb_policy(), vm.getos(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    if (retVal) {
        retVal = validateMacAddress(getVm().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    }
    return retVal;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    addVmToDb();
    VM vm = getVm();
    // vm related ops
    if (vm.getImages().isEmpty()) {
        endVmRelatedOps();
    } else {
        processImages();
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    addVmToDb();
    VM vm = getVm();
    // vm related ops
    if (!hasSnappableDisks(vm)) {
        endVmRelatedOps();
    } else {
        processImages();
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void MoveOrCopyAllImageGroups(Guid containerID, Iterable<DiskImage> disks) {
    int i = 0;
    for (DiskImage disk : disks) {
        Guid destinationDomain = imageToDestinationDomainMap.get(diskGuidList.get(i));
        MoveOrCopyImageGroupParameters p = new MoveOrCopyImageGroupParameters(containerID, diskGuidList.get(i), imageGuidList.get(i), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
        p.setParentCommand(getActionType());
        p.setUseCopyCollapse(getParameters().getCopyCollapse());
        p.setCopyVolumeType(CopyVolumeType.LeafVol);
        p.setPostZero(disk.isWipeAfterDelete());
        p.setForceOverride(true);
        p.setSourceDomainId(getParameters().getSourceDomainId());
        p.setStoragePoolId(getParameters().getStoragePoolId());
        p.setImportEntity(true);
        p.setEntityId(disk.getImageId());
        if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(diskGuidList.get(i))) {
            DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(diskGuidList.get(i));
            p.setVolumeType(diskImageBase.getvolume_type());
            p.setVolumeFormat(diskImageBase.getvolume_format());
        }
        p.setParentParemeters(getParameters());
        p.setAddImageDomainMapping(getParameters().isImportAsNewEntity());
        VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.MoveOrCopyImageGroup, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (!vdcRetValue.getSucceeded()) {
            throw new VdcBLLException(vdcRetValue.getFault().getError(), "ImportVmCommand::MoveOrCopyAllImageGroups: Failed to copy disk!");
        }
        getParameters().getImagesParameters().add(p);
        getReturnValue().getTaskIdList().addAll(vdcRetValue.getInternalTaskIdList());
        i++;
    }
}
#method_after
@Override
protected void MoveOrCopyAllImageGroups(Guid containerID, Iterable<DiskImage> disks) {
    int i = 0;
    for (DiskImage disk : disks) {
        Guid destinationDomain = imageToDestinationDomainMap.get(diskGuidList.get(i));
        MoveOrCopyImageGroupParameters p = new MoveOrCopyImageGroupParameters(containerID, diskGuidList.get(i), imageGuidList.get(i), disk.getId(), disk.getImageId(), destinationDomain, getMoveOrCopyImageOperation());
        p.setParentCommand(getActionType());
        p.setUseCopyCollapse(getParameters().getCopyCollapse());
        p.setCopyVolumeType(CopyVolumeType.LeafVol);
        p.setPostZero(disk.isWipeAfterDelete());
        p.setForceOverride(true);
        p.setSourceDomainId(getParameters().getSourceDomainId());
        p.setStoragePoolId(getParameters().getStoragePoolId());
        p.setImportEntity(true);
        p.setEntityId(disk.getImageId());
        p.setQuotaId(disk.getQuotaId() != null ? disk.getQuotaId() : getQuotaId());
        if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(diskGuidList.get(i))) {
            DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(diskGuidList.get(i));
            p.setVolumeType(diskImageBase.getvolume_type());
            p.setVolumeFormat(diskImageBase.getvolume_format());
        }
        p.setParentParemeters(getParameters());
        p.setAddImageDomainMapping(getParameters().isImportAsNewEntity());
        VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.MoveOrCopyImageGroup, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (!vdcRetValue.getSucceeded()) {
            throw new VdcBLLException(vdcRetValue.getFault().getError(), "ImportVmCommand::MoveOrCopyAllImageGroups: Failed to copy disk!");
        }
        getParameters().getImagesParameters().add(p);
        getReturnValue().getTaskIdList().addAll(vdcRetValue.getInternalTaskIdList());
        i++;
    }
}
#end_block

#method_before
private void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = GetImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.NewGuid();
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setit_guid(VmTemplateHandler.BlankVmTemplateId);
            disk.setvm_snapshot_id(snapshotId);
            disk.setactive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolume_format(diskImageBase.getvolume_format());
                disk.setvolume_type(diskImageBase.getvolume_type());
            }
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            if (getParameters().isImportAsNewEntity()) {
                disk.setId(Guid.NewGuid());
                disk.setImageId(Guid.NewGuid());
                for (int i = 0; i < list.size() - 1; i++) {
                    list.get(i).setId(disk.getId());
                    list.get(i).setvm_guid(getVmId());
                }
            }
            disk.setvm_guid(getVmId());
            disk.setcreation_date(new Date());
            BaseImagesCommand.saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        Snapshot snapshot = new SnapshotsManager().addActiveSnapshot(snapshotId, getVm(), getCompensationContext());
        getVm().getSnapshots().clear();
        getVm().getSnapshots().add(snapshot);
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            disk.setactive(false);
            BaseImagesCommand.saveImage(disk);
            snapshotId = disk.getvm_snapshot_id().getValue();
            if (!getSnapshotDao().exists(getVm().getId(), snapshotId)) {
                getSnapshotDao().save(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.REGULAR, disk.getdescription(), disk.getlast_modified_date(), disk.getappList()));
            }
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            snapshotId = disk.getvm_snapshot_id().getValue();
            disk.setactive(true);
            DbFacade.getInstance().getImageDao().update(disk.getImage());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        getSnapshotDao().update(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.ACTIVE, "Active VM snapshot", new Date(), null));
    }
}
#method_after
private void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = GetImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.NewGuid();
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setit_guid(VmTemplateHandler.BlankVmTemplateId);
            disk.setvm_snapshot_id(snapshotId);
            disk.setactive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolume_format(diskImageBase.getvolume_format());
                disk.setvolume_type(diskImageBase.getvolume_type());
            }
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            if (getParameters().isImportAsNewEntity()) {
                disk.setId(Guid.NewGuid());
                disk.setImageId(Guid.NewGuid());
                for (int i = 0; i < list.size() - 1; i++) {
                    list.get(i).setId(disk.getId());
                }
            }
            disk.setcreation_date(new Date());
            BaseImagesCommand.saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        Snapshot snapshot = new SnapshotsManager().addActiveSnapshot(snapshotId, getVm(), getCompensationContext());
        getVm().getSnapshots().clear();
        getVm().getSnapshots().add(snapshot);
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            disk.setactive(false);
            BaseImagesCommand.saveImage(disk);
            snapshotId = disk.getvm_snapshot_id().getValue();
            if (!getSnapshotDao().exists(getVm().getId(), snapshotId)) {
                getSnapshotDao().save(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.REGULAR, disk.getdescription(), disk.getlast_modified_date(), disk.getappList()));
            }
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            snapshotId = disk.getvm_snapshot_id().getValue();
            disk.setactive(true);
            DbFacade.getInstance().getImageDao().update(disk.getImage());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        getSnapshotDao().update(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.ACTIVE, "Active VM snapshot", new Date(), null));
    }
}
#end_block

#method_before
private void addInterfacesFromTemplate() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        if (iface.getId() == null) {
            iface.setId(Guid.NewGuid());
        }
        fillMacAddressIfMissing(iface);
        iface.setVmTemplateId(null);
        iface.setVmId(getVmId());
        iface.setVmName(getVm().getvm_name());
        macAdded = vmInterfaceManager.add(iface, getCompensationContext());
    }
}
#method_after
private void addInterfacesFromTemplate() {
    VmInterfaceManager vmInterfaceManager = new VmInterfaceManager();
    for (VmNetworkInterface iface : getVm().getInterfaces()) {
        if (iface.getId() == null) {
            iface.setId(Guid.NewGuid());
        }
        fillMacAddressIfMissing(iface);
        iface.setVmTemplateId(null);
        iface.setVmId(getVmId());
        iface.setVmName(getVm().getvm_name());
        macAdded = vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity());
    }
}
#end_block

#method_before
@Override
protected void EndWithFailure() {
    // Going to try and refresh the VM by re-loading
    setVm(null);
    // it form DB
    VM vmFromParams = getParameters().getVm();
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm().getId());
        for (DiskImage disk : imageList) {
            DbFacade.getInstance().getDiskImageDynamicDAO().remove(disk.getImageId());
            DbFacade.getInstance().getImageDao().remove(disk.getImageId());
            List<DiskImage> imagesForDisk = DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForImageGroup(disk.getId());
            if (imagesForDisk == null || imagesForDisk.isEmpty()) {
                DbFacade.getInstance().getBaseDiskDao().remove(disk.getId());
            }
        }
        RemoveVmNetwork();
        new SnapshotsManager().removeSnapshots(getVm().getId());
        DbFacade.getInstance().getVmDynamicDAO().remove(getVmId());
        DbFacade.getInstance().getVmStatisticsDAO().remove(getVmId());
        new SnapshotsManager().removeSnapshots(getVmId());
        DbFacade.getInstance().getVmStaticDAO().remove(getVmId());
        setSucceeded(true);
    } else {
        // Setting VM from params, for logging purposes
        setVm(vmFromParams);
        // No point in trying to end action again, as the imported VM does not exist in the DB.
        getReturnValue().setEndActionTryAgain(false);
    }
}
#method_after
@Override
protected void EndWithFailure() {
    // Going to try and refresh the VM by re-loading
    setVm(null);
    // it form DB
    VM vmFromParams = getParameters().getVm();
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm());
        for (DiskImage disk : imageList) {
            DbFacade.getInstance().getDiskImageDynamicDAO().remove(disk.getImageId());
            DbFacade.getInstance().getImageDao().remove(disk.getImageId());
            List<DiskImage> imagesForDisk = DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForImageGroup(disk.getId());
            if (imagesForDisk == null || imagesForDisk.isEmpty()) {
                DbFacade.getInstance().getBaseDiskDao().remove(disk.getId());
            }
        }
        RemoveVmNetwork();
        new SnapshotsManager().removeSnapshots(getVm().getId());
        DbFacade.getInstance().getVmDynamicDAO().remove(getVmId());
        DbFacade.getInstance().getVmStatisticsDAO().remove(getVmId());
        new SnapshotsManager().removeSnapshots(getVmId());
        DbFacade.getInstance().getVmStaticDAO().remove(getVmId());
        setSucceeded(true);
    } else {
        // Setting VM from params, for logging purposes
        setVm(vmFromParams);
        // No point in trying to end action again, as the imported VM does not exist in the DB.
        getReturnValue().setEndActionTryAgain(false);
    }
    rollbackQuota();
}
#end_block

#method_before
private void endVmRelatedOps() {
    setVm(null);
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm().getId());
        UpdateVmImSpm();
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ImportVmCommand::EndImportCommand: Vm is null - not performing full EndAction");
    }
}
#method_after
private void endVmRelatedOps() {
    setVm(null);
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm());
        updateVmInSpm();
    } else {
        setCommandShouldBeLogged(false);
        log.warn("ImportVmCommand::EndImportCommand: Vm is null - not performing full EndAction");
    }
}
#end_block

#method_before
private void UpdateSpmPriority(Integer value) {
    List<EntityModel> items = new ArrayList<EntityModel>();
    if (value == null) {
        value = defaultSpmPriority;
    }
    int neverValue = -1;
    // $NON-NLS-1$
    EntityModel neverItem = new EntityModel("Never", neverValue);
    items.add(neverItem);
    int lowValue = defaultSpmPriority / 2;
    // $NON-NLS-1$ //$NON-NLS-2$
    items.add(new EntityModel("Low", lowValue));
    // $NON-NLS-1$ //$NON-NLS-2$
    items.add(new EntityModel("Normal", defaultSpmPriority));
    int highValue = defaultSpmPriority + (maxSpmPriority - defaultSpmPriority) / 2;
    // $NON-NLS-1$ //$NON-NLS-2$
    items.add(new EntityModel("High", highValue));
    // Determine whether to set custom SPM priority, and where.
    EntityModel selectedItem = null;
    int[] values = new int[] { neverValue, lowValue, defaultSpmPriority, highValue, maxSpmPriority + 1 };
    Integer prevValue = null;
    for (int i = 0; i < values.length; i++) {
        int currentValue = values[i];
        if (value == currentValue) {
            selectedItem = items.get(i);
            break;
        } else if (prevValue != null && value > prevValue && value < currentValue) {
            // $NON-NLS-1$ //$NON-NLS-2$
            EntityModel customItem = new EntityModel("Custom", value);
            items.add(i, customItem);
            selectedItem = customItem;
            break;
        }
        prevValue = currentValue;
    }
    // Delete 'never' item if it's not selected.
    if (selectedItem != neverItem) {
        items.remove(neverItem);
    }
    getSpmPriority().setItems(items);
    getSpmPriority().setSelectedItem(selectedItem);
}
#method_after
private void UpdateSpmPriority(Integer value) {
    List<EntityModel> items = new ArrayList<EntityModel>();
    if (value == null) {
        value = defaultSpmPriority;
    }
    int neverValue = -1;
    EntityModel neverItem = new EntityModel(constants.neverTitle(), neverValue);
    items.add(neverItem);
    int lowValue = defaultSpmPriority / 2;
    items.add(new EntityModel(constants.lowTitle(), lowValue));
    items.add(new EntityModel(constants.normalTitle(), defaultSpmPriority));
    int highValue = defaultSpmPriority + (maxSpmPriority - defaultSpmPriority) / 2;
    items.add(new EntityModel(constants.highTitle(), highValue));
    // Determine whether to set custom SPM priority, and where.
    EntityModel selectedItem = null;
    int[] values = new int[] { neverValue, lowValue, defaultSpmPriority, highValue, maxSpmPriority + 1 };
    Integer prevValue = null;
    for (int i = 0; i < values.length; i++) {
        int currentValue = values[i];
        if (value == currentValue) {
            selectedItem = items.get(i);
            break;
        } else if (prevValue != null && value > prevValue && value < currentValue) {
            // $NON-NLS-1$ //$NON-NLS-2$
            EntityModel customItem = new EntityModel("Custom (" + value + ")", value);
            items.add(i, customItem);
            selectedItem = customItem;
            break;
        }
        prevValue = currentValue;
    }
    // Delete 'never' item if it's not selected.
    if (selectedItem != neverItem) {
        items.remove(neverItem);
    }
    getSpmPriority().setItems(items);
    getSpmPriority().setSelectedItem(selectedItem);
}
#end_block

#method_before
void initTable() {
    // $NON-NLS-1$
    getTable().addColumn(new HostStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VDS> nameColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_name();
        }
    };
    getTable().addColumn(nameColumn, constants.nameHost());
    TextColumnWithTooltip<VDS> hostColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.gethost_name();
        }
    };
    getTable().addColumn(hostColumn, constants.ipHost());
    TextColumnWithTooltip<VDS> clusterColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_group_name();
        }
    };
    getTable().addColumn(clusterColumn, constants.clusterHost());
    TextColumnWithTooltip<VDS> dcColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getstorage_pool_name();
        }
    };
    getTable().addColumn(dcColumn, constants.dcHost());
    TextColumnWithTooltip<VDS> statusColumn = new EnumColumn<VDS, VDSStatus>() {

        @Override
        public VDSStatus getRawValue(VDS object) {
            return object.getstatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusHost());
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        ProgressBarColumn<VDS> loadColumn = new ProgressBarColumn<VDS>() {

            @Override
            protected String getProgressText(VDS object) {
                int numOfActiveVMs = object.getvm_active() != null ? object.getvm_active() : 0;
                // $NON-NLS-1$
                return numOfActiveVMs + " VMs";
            }

            @Override
            protected Integer getProgressValue(VDS object) {
                return object.getvm_active();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(loadColumn, constants.loadHost(), "100px");
    }
    PercentColumn<VDS> memColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_mem_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memColumn, constants.memoryHost(), "60px");
    PercentColumn<VDS> cpuColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_cpu_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpuHost(), "60px");
    PercentColumn<VDS> netColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_network_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(netColumn, constants.networkHost(), "60px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> spmColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                int value = object.getVdsSpmPriority();
                int lowValue = defaultSpmPriority / 2;
                int highValue = defaultSpmPriority + (maxSpmPriority - defaultSpmPriority) / 2;
                if (object.getspm_status() != VdsSpmStatus.None) {
                    return object.getspm_status().name();
                }
                if (value == -1) {
                    return constants.spmNeverText();
                } else if (value == lowValue) {
                    // $NON-NLS-1$ //$NON-NLS-2$
                    return constants.spmLowText();
                } else if (value == defaultSpmPriority) {
                    // $NON-NLS-1$ //$NON-NLS-2$
                    return constants.spmNormalText();
                } else if (value == highValue) {
                    // $NON-NLS-1$ //$NON-NLS-2$
                    return constants.spmHighText();
                }
                // $NON-NLS-1$ //$NON-NLS-2$
                return "Custom";
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(spmColumn, constants.spmPriorityHost(), "80px");
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.newHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.editHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.removeHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.activateHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getActivateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.maintenanceHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getMaintenanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.confirmRebootedHost(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getManualFenceCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.approveHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getApproveCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.configureLocalStorageHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureLocalStorageCommand();
        }
    });
    List<ActionButtonDefinition<VDS>> pmSubActions = new LinkedList<ActionButtonDefinition<VDS>>();
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.restartHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRestartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.startHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.stopHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.pmHost(), pmSubActions, CommandLocation.OnlyFromToolBar));
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.assignTagsHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getAssignTagsCommand();
        }
    });
    if (ReportInit.getInstance().isReportsEnabled()) {
        List<ActionButtonDefinition<VDS>> resourceSubActions = // $NON-NLS-1$
        ReportActionsHelper.getInstance().getResourceSubActions("Host", getModelProvider());
        if (resourceSubActions != null && resourceSubActions.size() > 0) {
            getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.showReportHost(), resourceSubActions));
        }
    }
}
#method_after
void initTable() {
    // $NON-NLS-1$
    getTable().addColumn(new HostStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VDS> nameColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_name();
        }
    };
    getTable().addColumn(nameColumn, constants.nameHost());
    TextColumnWithTooltip<VDS> hostColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.gethost_name();
        }
    };
    getTable().addColumn(hostColumn, constants.ipHost());
    TextColumnWithTooltip<VDS> clusterColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_group_name();
        }
    };
    getTable().addColumn(clusterColumn, constants.clusterHost());
    TextColumnWithTooltip<VDS> dcColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getstorage_pool_name();
        }
    };
    getTable().addColumn(dcColumn, constants.dcHost());
    TextColumnWithTooltip<VDS> statusColumn = new EnumColumn<VDS, VDSStatus>() {

        @Override
        public VDSStatus getRawValue(VDS object) {
            return object.getstatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusHost());
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        ProgressBarColumn<VDS> loadColumn = new ProgressBarColumn<VDS>() {

            @Override
            protected String getProgressText(VDS object) {
                int numOfActiveVMs = object.getvm_active() != null ? object.getvm_active() : 0;
                // $NON-NLS-1$
                return numOfActiveVMs + " VMs";
            }

            @Override
            protected Integer getProgressValue(VDS object) {
                return object.getvm_active();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(loadColumn, constants.loadHost(), "100px");
    }
    PercentColumn<VDS> memColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_mem_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memColumn, constants.memoryHost(), "60px");
    PercentColumn<VDS> cpuColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_cpu_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpuHost(), "60px");
    PercentColumn<VDS> netColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_network_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(netColumn, constants.networkHost(), "60px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> spmColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                int value = object.getVdsSpmPriority();
                int lowValue = defaultSpmPriority / 2;
                int highValue = defaultSpmPriority + (maxSpmPriority - defaultSpmPriority) / 2;
                if (object.getspm_status() != VdsSpmStatus.None) {
                    return object.getspm_status().name();
                }
                if (value == -1) {
                    return constants.spmNeverText();
                } else if (value == lowValue) {
                    return constants.spmLowText();
                } else if (value == defaultSpmPriority) {
                    return constants.spmNormalText();
                } else if (value == highValue) {
                    return constants.spmHighText();
                }
                return constants.spmCustomText();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(spmColumn, constants.spmPriorityHost(), "80px");
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.newHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.editHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.removeHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.activateHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getActivateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.maintenanceHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getMaintenanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.confirmRebootedHost(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getManualFenceCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.approveHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getApproveCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.configureLocalStorageHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureLocalStorageCommand();
        }
    });
    List<ActionButtonDefinition<VDS>> pmSubActions = new LinkedList<ActionButtonDefinition<VDS>>();
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.restartHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRestartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.startHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.stopHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.pmHost(), pmSubActions, CommandLocation.OnlyFromToolBar));
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.assignTagsHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getAssignTagsCommand();
        }
    });
    if (ReportInit.getInstance().isReportsEnabled()) {
        List<ActionButtonDefinition<VDS>> resourceSubActions = // $NON-NLS-1$
        ReportActionsHelper.getInstance().getResourceSubActions("Host", getModelProvider());
        if (resourceSubActions != null && resourceSubActions.size() > 0) {
            getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.showReportHost(), resourceSubActions));
        }
    }
}
#end_block

#method_before
public static String getKeyString(final PublicKey key, String alias) {
    // Get the serialized version of the key:
    final byte[] keyBytes = getKeyBytes(key);
    if (keyBytes == null) {
        log.error("Can't get key bytes, will return null.");
        return null;
    }
    // Encode it using BASE64:
    final Base64 encoder = new Base64(0);
    final String encoding = encoder.encodeToString(keyBytes);
    if (log.isDebugEnabled()) {
        log.debug("Key encoding is \"" + encoding + "\".");
    }
    // Return the generated SSH public key:
    final StringBuilder buffer = new StringBuilder(SSH_RSA.length() + 1 + encoding.length() + (alias != null ? 1 + alias.length() : 0));
    buffer.append(SSH_RSA);
    buffer.append(" ");
    buffer.append(encoding);
    if (alias != null) {
        buffer.append(" ");
        buffer.append(alias);
    }
    buffer.append('\n');
    final String keyString = buffer.toString();
    if (log.isDebugEnabled()) {
        log.debug("Key string is \"" + keyString + "\".");
    }
    return keyString;
}
#method_after
public static String getKeyString(final PublicKey key, String alias) {
    // Get the serialized version of the key:
    final byte[] keyBytes = getKeyBytes(key);
    if (keyBytes == null) {
        log.error("Can't get key bytes, will return null.");
        return null;
    }
    // Encode it using BASE64:
    final Base64 encoder = new Base64(0);
    final String encoding = encoder.encodeToString(keyBytes);
    if (log.isDebugEnabled()) {
        log.debug("Key encoding is \"" + encoding + "\".");
    }
    // Return the generated SSH public key:
    final StringBuilder buffer = new StringBuilder(SSH_RSA.length() + 1 + encoding.length() + (alias != null ? 1 + alias.length() : 0) + 1);
    buffer.append(SSH_RSA);
    buffer.append(" ");
    buffer.append(encoding);
    if (alias != null) {
        buffer.append(" ");
        buffer.append(alias);
    }
    buffer.append('\n');
    final String keyString = buffer.toString();
    if (log.isDebugEnabled()) {
        log.debug("Key string is \"" + keyString + "\".");
    }
    return keyString;
}
#end_block

#method_before
private void handleRemovedDevices(Guid vmId, HashSet<Guid> processedDevices, List<VmDevice> devices) {
    for (VmDevice device : devices) {
        if (!processedDevices.contains(device.getDeviceId())) {
            if (device.getIsManaged()) {
                if (!device.getIsPlugged()) {
                    log.errorFormat("VM {0} managed non pluggable device was removed unexpetedly from libvirt: {1}", vmId, device.toString());
                } else {
                    device.setAddress("");
                    addVmDeviceToList(device);
                    log.debugFormat("VM {0} managed pluggable device was unplugged : {1}", vmId, device.toString());
                }
            } else {
                removedDeviceIds.add(device.getId());
                log.debugFormat("VM {0} unmanaged device was marked for remove : {1}", vmId, device.toString());
            }
        }
    }
}
#method_after
private void handleRemovedDevices(Guid vmId, HashSet<Guid> processedDevices, List<VmDevice> devices) {
    for (VmDevice device : devices) {
        if (!processedDevices.contains(device.getDeviceId())) {
            if (device.getIsManaged()) {
                if (!device.getIsPlugged()) {
                    log.errorFormat("VM {0} managed non pluggable device was removed unexpectedly from libvirt: {1}", vmId, device.toString());
                } else {
                    device.setAddress("");
                    addVmDeviceToList(device);
                    log.debugFormat("VM {0} managed pluggable device was unplugged : {1}", vmId, device.toString());
                }
            } else {
                removedDeviceIds.add(device.getId());
                log.debugFormat("VM {0} unmanaged device was marked for remove : {1}", vmId, device.toString());
            }
        }
    }
}
#end_block

#method_before
// TODO: there might be a race condition here - the list of vm's is loaded
// and only afterwards a lock is performed - so we can't be aware to changes
private void buildSharedLockMap() {
    if (disk.getVmEntityType() == VmEntityType.VM) {
        List<VM> listVms = getVmsForDiskId();
        if (!listVms.isEmpty()) {
            sharedLockMap = new HashMap<String, String>();
            for (VM vm : listVms) {
                sharedLockMap.put(vm.getId().toString(), LockingGroup.VM.name());
            }
        }
    } else if (disk.getVmEntityType() == VmEntityType.TEMPLATE) {
        sharedLockMap = Collections.singletonMap(disk.getvm_guid().toString(), LockingGroup.TEMPLATE.name());
    }
}
#method_after
private void buildSharedLockMap() {
    if (disk.getVmEntityType() == VmEntityType.VM) {
        List<VM> listVms = getVmsForDiskId();
        if (!listVms.isEmpty()) {
            sharedLockMap = new HashMap<String, String>();
            for (VM vm : listVms) {
                sharedLockMap.put(vm.getId().toString(), LockingGroup.VM.name());
            }
        }
    } else if (disk.getVmEntityType() == VmEntityType.TEMPLATE) {
        setVmTemplateIdParameter();
        sharedLockMap = Collections.singletonMap(getVmTemplateId().toString(), LockingGroup.TEMPLATE.name());
    }
}
#end_block

#method_before
private boolean canRemoveTemplateDisk() {
    boolean retValue = true;
    DiskImage diskImage = (DiskImage) disk;
    setVmTemplateId(diskImage.getvm_guid());
    if (getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (retValue && diskImage.getstorage_ids().size() == 1) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN);
    }
    if (retValue) {
        List<String> problematicVmNames = new ArrayList<String>();
        List<VM> vms = DbFacade.getInstance().getVmDAO().getAllWithTemplate(getVmTemplateId());
        for (VM vm : vms) {
            List<Disk> vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
            for (Disk vmDisk : vmDisks) {
                if (vmDisk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage vmDiskImage = (DiskImage) vmDisk;
                    if (vmDiskImage.getit_guid().equals(diskImage.getImageId())) {
                        if (vmDiskImage.getstorage_ids().contains(getParameters().getStorageDomainId())) {
                            retValue = false;
                            problematicVmNames.add(vm.getvm_name());
                        }
                        break;
                    }
                }
            }
        }
        if (!retValue) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
            addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        }
    }
    return retValue;
}
#method_after
private boolean canRemoveTemplateDisk() {
    boolean retValue = true;
    DiskImage diskImage = (DiskImage) disk;
    if (getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (retValue && diskImage.getstorage_ids().size() == 1) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN);
    }
    if (retValue) {
        List<String> problematicVmNames = new ArrayList<String>();
        List<VM> vms = DbFacade.getInstance().getVmDAO().getAllWithTemplate(getVmTemplateId());
        for (VM vm : vms) {
            List<Disk> vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
            for (Disk vmDisk : vmDisks) {
                if (vmDisk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage vmDiskImage = (DiskImage) vmDisk;
                    if (vmDiskImage.getit_guid().equals(diskImage.getImageId())) {
                        if (vmDiskImage.getstorage_ids().contains(getParameters().getStorageDomainId())) {
                            retValue = false;
                            problematicVmNames.add(vm.getvm_name());
                        }
                        break;
                    }
                }
            }
        }
        if (!retValue) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
            addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        }
    }
    return retValue;
}
#end_block

#method_before
// TODO: need to verify that this list of vms cannot differ from the one
private void endCommand() {
    List<VM> listVms = getVmsForDiskId();
    Backend.getInstance().EndAction(VdcActionType.RemoveImage, getParameters().getImagesParameters().get(0));
    VmCommand.UpdateVmInSpm(getStoragePoolId().getValue(), listVms);
    setSucceeded(true);
}
#method_after
private void endCommand() {
    List<VM> listVms = getVmsForDiskId();
    Backend.getInstance().EndAction(VdcActionType.RemoveImage, getParameters().getImagesParameters().get(0));
    VmCommand.UpdateVmInSpm(getStoragePoolId().getValue(), listVms);
    setSucceeded(true);
}
#end_block

#method_before
private boolean canDoAction_afterCloneVm(boolean retVal, List<String> canDoActionMessages, Map<Guid, storage_domains> domainsMap) {
    // check that the imported vm guid is not in engine
    if (retVal) {
        VmStatic duplicateVm = getVmStaticDAO().get(getVm().getId());
        if (duplicateVm != null) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS);
            addCanDoActionMessage(String.format("$VmName %1$s", duplicateVm.getvm_name()));
            retVal = false;
        }
    }
    setVmTemplateId(getVm().getvmt_guid());
    if (retVal) {
        if (!TemplateExists() || !CheckTemplateInStorageDomain() || !CheckImagesGUIDsLegal() || !CanAddVm()) {
            retVal = false;
        }
    }
    if (retVal && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getvmt_guid()) && getVmTemplate() != null && getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
        retVal = false;
    }
    if (retVal && getParameters().getCopyCollapse() && getParameters().getVm().getDiskMap() != null) {
        for (Disk disk : getParameters().getVm().getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    retVal = ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, canDoActionMessages);
                    if (!retVal) {
                        break;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (retVal && getParameters().getCopyCollapse() && !TemplateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getstorage_name()));
        retVal = false;
    }
    if (retVal) {
        boolean inCluster = false;
        List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
        for (VDSGroup group : groups) {
            if (group.getId().equals(getParameters().getVdsGroupId())) {
                inCluster = true;
                break;
            }
        }
        if (!inCluster) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            retVal = false;
        }
    }
    if (retVal) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            retVal = StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue());
            if (!retVal) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
                break;
            }
        }
    }
    if (retVal && Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVdsGroup().getcompatibility_version().toString())) {
        // version 2.x)
        if (!VmCommand.validateNumberOfNics(getParameters().getVm().getInterfaces(), null)) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            retVal = false;
        }
    }
    // Check that the USB policy is legal
    if (retVal) {
        retVal = VmHandler.isUsbPolicyLegal(getParameters().getVm().getusb_policy(), getParameters().getVm().getos(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    if (retVal) {
        retVal = validateMacAddress(getVm().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    }
    return retVal;
}
#method_after
private boolean canDoAction_afterCloneVm(boolean retVal, List<String> canDoActionMessages, Map<Guid, storage_domains> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (retVal) {
        VmStatic duplicateVm = getVmStaticDAO().get(getVm().getId());
        if (duplicateVm != null) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_VM_EXISTS);
            addCanDoActionMessage(String.format("$VmName %1$s", duplicateVm.getvm_name()));
            retVal = false;
        }
    }
    setVmTemplateId(getVm().getvmt_guid());
    if (retVal) {
        if (!TemplateExists() || !CheckTemplateInStorageDomain() || !CheckImagesGUIDsLegal() || !CanAddVm()) {
            retVal = false;
        }
    }
    if (retVal && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getvmt_guid()) && getVmTemplate() != null && getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
        retVal = false;
    }
    if (retVal && getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    retVal = ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, canDoActionMessages);
                    if (!retVal) {
                        break;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (retVal && getParameters().getCopyCollapse() && !TemplateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getstorage_name()));
        retVal = false;
    }
    if (retVal) {
        boolean inCluster = false;
        List<VDSGroup> groups = getVdsGroupDAO().getAllForStoragePool(getParameters().getStoragePoolId());
        for (VDSGroup group : groups) {
            if (group.getId().equals(getParameters().getVdsGroupId())) {
                inCluster = true;
                break;
            }
        }
        if (!inCluster) {
            addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
            retVal = false;
        }
    }
    if (retVal) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            retVal = StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue());
            if (!retVal) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
                break;
            }
        }
    }
    if (retVal && Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVdsGroup().getcompatibility_version().toString())) {
        // version 2.x)
        if (!VmCommand.validateNumberOfNics(vm.getInterfaces(), null)) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            retVal = false;
        }
    }
    // Check that the USB policy is legal
    if (retVal) {
        // Enforce disabled USB policy for Linux OS with legacy policy.
        if (vm.getos().isLinux() && vm.getusb_policy().equals(UsbPolicy.ENABLED_LEGACY)) {
            vm.setusb_policy(UsbPolicy.DISABLED);
        }
        retVal = VmHandler.isUsbPolicyLegal(vm.getusb_policy(), vm.getos(), getVdsGroup(), getReturnValue().getCanDoActionMessages());
    }
    if (retVal) {
        retVal = validateMacAddress(getVm().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    }
    return retVal;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    addVmToDb();
    VM vm = getVm();
    // vm related ops
    if (vm.getImages().isEmpty()) {
        endVmRelatedOps();
    } else {
        processImages();
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    addVmToDb();
    processImages();
    setSucceeded(true);
}
#end_block

#method_before
private void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = GetImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.NewGuid();
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setit_guid(VmTemplateHandler.BlankVmTemplateId);
            disk.setvm_snapshot_id(snapshotId);
            disk.setactive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolume_format(diskImageBase.getvolume_format());
                disk.setvolume_type(diskImageBase.getvolume_type());
            }
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            if (getParameters().isImportAsNewEntity()) {
                disk.setId(Guid.NewGuid());
                disk.setImageId(Guid.NewGuid());
                for (int i = 0; i < list.size() - 1; i++) {
                    list.get(i).setId(disk.getId());
                    list.get(i).setvm_guid(getVmId());
                }
            }
            disk.setvm_guid(getVmId());
            disk.setcreation_date(new Date());
            BaseImagesCommand.saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        Snapshot snapshot = new SnapshotsManager().addActiveSnapshot(snapshotId, getVm(), getCompensationContext());
        getVm().getSnapshots().clear();
        getVm().getSnapshots().add(snapshot);
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            disk.setactive(false);
            BaseImagesCommand.saveImage(disk);
            snapshotId = disk.getvm_snapshot_id().getValue();
            if (!getSnapshotDao().exists(getVm().getId(), snapshotId)) {
                getSnapshotDao().save(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.REGULAR, disk.getdescription(), disk.getlast_modified_date(), disk.getappList()));
            }
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            snapshotId = disk.getvm_snapshot_id().getValue();
            disk.setactive(true);
            DbFacade.getInstance().getImageDao().update(disk.getImage());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        getSnapshotDao().update(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.ACTIVE, "Active VM snapshot", new Date(), null));
    }
}
#method_after
private void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = GetImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.NewGuid();
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setit_guid(VmTemplateHandler.BlankVmTemplateId);
            disk.setvm_snapshot_id(snapshotId);
            disk.setactive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolume_format(diskImageBase.getvolume_format());
                disk.setvolume_type(diskImageBase.getvolume_type());
            }
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            if (getParameters().isImportAsNewEntity()) {
                disk.setId(Guid.NewGuid());
                disk.setImageId(Guid.NewGuid());
                for (int i = 0; i < list.size() - 1; i++) {
                    list.get(i).setId(disk.getId());
                }
            }
            disk.setcreation_date(new Date());
            BaseImagesCommand.saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        Snapshot snapshot = new SnapshotsManager().addActiveSnapshot(snapshotId, getVm(), getCompensationContext());
        getVm().getSnapshots().clear();
        getVm().getSnapshots().add(snapshot);
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            disk.setactive(false);
            BaseImagesCommand.saveImage(disk);
            snapshotId = disk.getvm_snapshot_id().getValue();
            if (!getSnapshotDao().exists(getVm().getId(), snapshotId)) {
                getSnapshotDao().save(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.REGULAR, disk.getdescription(), disk.getlast_modified_date(), disk.getappList()));
            }
            DiskImageDynamic diskDynamic = new DiskImageDynamic();
            diskDynamic.setId(disk.getImageId());
            diskDynamic.setactual_size(disk.getactual_size());
            DbFacade.getInstance().getDiskImageDynamicDAO().save(diskDynamic);
        }
        for (Guid id : images.keySet()) {
            List<DiskImage> list = images.get(id);
            DiskImage disk = list.get(list.size() - 1);
            snapshotId = disk.getvm_snapshot_id().getValue();
            disk.setactive(true);
            DbFacade.getInstance().getImageDao().update(disk.getImage());
            DbFacade.getInstance().getBaseDiskDao().save(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        getSnapshotDao().update(new Snapshot(snapshotId, SnapshotStatus.OK, getVm().getId(), null, SnapshotType.ACTIVE, "Active VM snapshot", new Date(), null));
    }
}
#end_block

#method_before
@Override
protected void EndSuccessfully() {
    EndActionOnAllImageGroups();
    endVmRelatedOps();
    setSucceeded(true);
}
#method_after
@Override
protected void EndSuccessfully() {
    EndImportCommand();
}
#end_block

#method_before
@Override
protected void EndWithFailure() {
    // Going to try and refresh the VM by re-loading
    // it form DB
    VM vm = getUpdatedVmForOperation();
    VM vmFromParams = getParameters().getVm();
    if (getVm() != null) {
        VmHandler.UnLockVm(vm.getId());
        for (DiskImage disk : imageList) {
            DbFacade.getInstance().getDiskImageDynamicDAO().remove(disk.getImageId());
            DbFacade.getInstance().getImageDao().remove(disk.getImageId());
            List<DiskImage> imagesForDisk = DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForImageGroup(disk.getId());
            if (imagesForDisk == null || imagesForDisk.isEmpty()) {
                DbFacade.getInstance().getBaseDiskDao().remove(disk.getId());
            }
        }
        RemoveVmNetwork();
        new SnapshotsManager().removeSnapshots(vm.getId());
        DbFacade.getInstance().getVmDynamicDAO().remove(getVmId());
        DbFacade.getInstance().getVmStatisticsDAO().remove(getVmId());
        new SnapshotsManager().removeSnapshots(getVmId());
        DbFacade.getInstance().getVmStaticDAO().remove(getVmId());
        setSucceeded(true);
    } else {
        // Setting VM from params, for logging purposes
        setVm(vmFromParams);
        // No point in trying to end action again, as the imported VM does not exist in the DB.
        getReturnValue().setEndActionTryAgain(false);
    }
    rollbackQuota();
}
#method_after
@Override
protected void EndWithFailure() {
    // Going to try and refresh the VM by re-loading
    setVm(null);
    // it form DB
    VM vmFromParams = getParameters().getVm();
    if (getVm() != null) {
        VmHandler.UnLockVm(getVm());
        for (DiskImage disk : imageList) {
            DbFacade.getInstance().getDiskImageDynamicDAO().remove(disk.getImageId());
            DbFacade.getInstance().getImageDao().remove(disk.getImageId());
            List<DiskImage> imagesForDisk = DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForImageGroup(disk.getId());
            if (imagesForDisk == null || imagesForDisk.isEmpty()) {
                DbFacade.getInstance().getBaseDiskDao().remove(disk.getId());
            }
        }
        RemoveVmNetwork();
        new SnapshotsManager().removeSnapshots(getVm().getId());
        DbFacade.getInstance().getVmDynamicDAO().remove(getVmId());
        DbFacade.getInstance().getVmStatisticsDAO().remove(getVmId());
        new SnapshotsManager().removeSnapshots(getVmId());
        DbFacade.getInstance().getVmStaticDAO().remove(getVmId());
        setSucceeded(true);
    } else {
        // Setting VM from params, for logging purposes
        setVm(vmFromParams);
        // No point in trying to end action again, as the imported VM does not exist in the DB.
        getReturnValue().setEndActionTryAgain(false);
    }
    rollbackQuota();
}
#end_block

#method_before
@Override
public Map<String, String> getJobMessageProperties() {
    if (jobProperties == null) {
        jobProperties = super.getJobMessageProperties();
        jobProperties.put(VdcObjectType.VM.name().toLowerCase(), (getVmName() == null) ? "" : getVmName());
    }
    return jobProperties;
}
#method_after
@Override
public Map<String, String> getJobMessageProperties() {
    if (jobProperties == null) {
        jobProperties = super.getJobMessageProperties();
        jobProperties.put(VdcObjectType.VM.name().toLowerCase(), (getVmName() == null) ? "" : getVmName());
        jobProperties.put(VdcObjectType.VdsGroups.name().toLowerCase(), getVdsGroupName());
    }
    return jobProperties;
}
#end_block

#method_before
@Before
public void setUp() {
    client = new OvirtSSH();
    client.setSoftTimeout(10 * 1000);
    client.setHardTimeout(60 * 1000);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
    client.setPassword(TestCommon.password);
}
#method_after
@Before
public void setUp() {
    client = new SSHClient();
    client.setSoftTimeout(10 * 1000);
    client.setHardTimeout(60 * 1000);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
    client.setPassword(TestCommon.password);
}
#end_block

#method_before
@Test(expected = TimeLimitExceededException.class)
public void testConnectTimeout() throws Exception {
    OvirtSSH _client = spy(client);
    SshClient ssh = spy(SshClient.setUpDefaultClient());
    ConnectFuture future = mock(ConnectFuture.class);
    doReturn(ssh).when(_client)._createSshClient();
    doReturn(future).when(ssh).connect(anyString(), anyInt());
    when(future.await(anyLong())).thenReturn(false);
    _client.connect();
}
#method_after
@Test(expected = TimeLimitExceededException.class)
public void testConnectTimeout() throws Exception {
    SSHClient _client = spy(client);
    SshClient ssh = spy(SshClient.setUpDefaultClient());
    ConnectFuture future = mock(ConnectFuture.class);
    doReturn(ssh).when(_client)._createSshClient();
    doReturn(future).when(ssh).connect(anyString(), anyInt());
    when(future.await(anyLong())).thenReturn(false);
    _client.connect();
}
#end_block

#method_before
@Test(expected = TimeLimitExceededException.class)
public void testPasswordTimeout() throws Exception {
    OvirtSSH _client = spy(client);
    SshClient ssh = spy(SshClient.setUpDefaultClient());
    ConnectFuture future = mock(ConnectFuture.class);
    ClientSession session = mock(ClientSession.class);
    doReturn(ssh).when(_client)._createSshClient();
    doReturn(future).when(ssh).connect(anyString(), anyInt());
    when(future.await(anyLong())).thenReturn(true);
    when(future.getSession()).thenReturn(session);
    AuthFuture authFuture = mock(AuthFuture.class);
    when(authFuture.await(anyLong())).thenReturn(false);
    when(session.authPassword(anyString(), anyString())).thenReturn(authFuture);
    _client.connect();
}
#method_after
@Test(expected = TimeLimitExceededException.class)
public void testPasswordTimeout() throws Exception {
    SSHClient _client = spy(client);
    SshClient ssh = spy(SshClient.setUpDefaultClient());
    ConnectFuture future = mock(ConnectFuture.class);
    ClientSession session = mock(ClientSession.class);
    doReturn(ssh).when(_client)._createSshClient();
    doReturn(future).when(ssh).connect(anyString(), anyInt());
    when(future.await(anyLong())).thenReturn(true);
    when(future.getSession()).thenReturn(session);
    AuthFuture authFuture = mock(AuthFuture.class);
    when(authFuture.await(anyLong())).thenReturn(false);
    when(session.authPassword(anyString(), anyString())).thenReturn(authFuture);
    _client.connect();
    _client.authenticate();
}
#end_block

#method_before
@Before
public void setUp() throws IOException, Exception {
    remote = String.format("/tmp/ssh-test-%1$s.tmp", System.currentTimeMillis());
    local2 = File.createTempFile("ssh-test-", ".tmp");
    client = new OvirtSSH();
    client.setSoftTimeout(5 * 60 * 1000);
    client.setHardTimeout(TestCommon.largeTestHardTimeout);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
    client.setPassword(TestCommon.password);
    client.connect();
}
#method_after
@Before
public void setUp() throws IOException, Exception {
    remote = String.format("/tmp/ssh-test-%1$s.tmp", System.currentTimeMillis());
    local2 = File.createTempFile("ssh-test-", ".tmp");
    client = new SSHClient();
    client.setSoftTimeout(5 * 60 * 1000);
    client.setHardTimeout(TestCommon.largeTestHardTimeout);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
    client.setPassword(TestCommon.password);
    client.connect();
    client.authenticate();
}
#end_block

#method_before
@After
public void tearDown() {
    if (client != null) {
        try {
            client.execute(String.format("rm -f '%1$s'", remote), null, null, null);
        } catch (Exception e) {
        }
        try {
            client.disconnect();
        } catch (Exception e) {
        }
        client = null;
    }
    if (local2 != null) {
        local2.delete();
        local2 = null;
    }
}
#method_after
@After
public void tearDown() {
    if (client != null) {
        try {
            client.executeCommand(String.format("rm -f '%1$s'", remote), null, null, null);
        } catch (Exception e) {
        }
        try {
            client.disconnect();
        } catch (Exception e) {
        }
        client = null;
    }
    if (local2 != null) {
        local2.delete();
        local2 = null;
    }
}
#end_block

#method_before
@Before
public void setUp() {
    client = new OvirtSSH();
    client.setSoftTimeout(30 * 1000);
    client.setHardTimeout(5 * 60 * 1000);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
}
#method_after
@Before
public void setUp() {
    client = new SSHClient();
    client.setSoftTimeout(30 * 1000);
    client.setHardTimeout(5 * 60 * 1000);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
}
#end_block

#method_before
@Test(expected = AuthenticationException.class)
public void testWrongPassword() throws Exception {
    client.setPassword(TestCommon.password + "A");
    client.connect();
    client.execute(hello_command, null, null, null);
}
#method_after
@Test(expected = AuthenticationException.class)
public void testWrongPassword() throws Exception {
    client.setPassword(TestCommon.password + "A");
    client.connect();
    client.authenticate();
    client.executeCommand(hello_command, null, null, null);
}
#end_block

#method_before
@Test(expected = AuthenticationException.class)
public void testWrongKey() throws Exception {
    KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
    KeyPair badKeyPair = generator.generateKeyPair();
    client.setKeyPair(badKeyPair);
    client.connect();
    client.execute(hello_command, null, null, null);
}
#method_after
@Test(expected = AuthenticationException.class)
public void testWrongKey() throws Exception {
    KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
    KeyPair badKeyPair = generator.generateKeyPair();
    client.setKeyPair(badKeyPair);
    client.connect();
    client.authenticate();
    client.executeCommand(hello_command, null, null, null);
}
#end_block

#method_before
@Test
public void testPassword() throws Exception {
    client.setPassword(TestCommon.password);
    client.connect();
    ByteArrayOutputStream out = new OvirtSSH.ConstraintByteArrayOutputStream(500);
    client.execute(hello_command, null, out, null);
    assertEquals(hello_result, new String(out.toByteArray(), "UTF-8"));
}
#method_after
@Test
public void testPassword() throws Exception {
    client.setPassword(TestCommon.password);
    client.connect();
    client.authenticate();
    ByteArrayOutputStream out = new ConstraintByteArrayOutputStream(500);
    client.executeCommand(hello_command, null, out, null);
    assertEquals(hello_result, new String(out.toByteArray(), "UTF-8"));
}
#end_block

#method_before
@Test
public void testPK() throws Exception {
    client.setKeyPair(TestCommon.keyPair);
    client.connect();
    ByteArrayOutputStream out = new OvirtSSH.ConstraintByteArrayOutputStream(500);
    client.execute(hello_command, null, out, null);
    assertEquals(hello_result, new String(out.toByteArray(), "UTF-8"));
}
#method_after
@Test
public void testPK() throws Exception {
    client.setKeyPair(TestCommon.keyPair);
    client.connect();
    client.authenticate();
    ByteArrayOutputStream out = new ConstraintByteArrayOutputStream(500);
    client.executeCommand(hello_command, null, out, null);
    assertEquals(hello_result, new String(out.toByteArray(), "UTF-8"));
}
#end_block

#method_before
@Test
public void testLimit() throws IOException {
    int limit = 1000;
    ByteArrayOutputStream os = new OvirtSSH.ConstraintByteArrayOutputStream(limit);
    byte[] buffer = new byte[100];
    for (int i = 0; i < limit * 5 / buffer.length; i++) {
        os.write(buffer);
    }
    assertTrue(os.size() >= limit);
    assertTrue(os.size() < limit * 3 / 2);
}
#method_after
@Test
public void testLimit() throws IOException {
    int limit = 1000;
    ByteArrayOutputStream os = new ConstraintByteArrayOutputStream(limit);
    byte[] buffer = new byte[100];
    for (int i = 0; i < limit * 5 / buffer.length; i++) {
        os.write(buffer);
    }
    assertTrue(os.size() >= limit);
    assertTrue(os.size() < limit * 3 / 2);
}
#end_block

#method_before
@Before
public void setUp() throws IOException, Exception {
    client = new OvirtSSH();
    client.setSoftTimeout(softTimeout);
    client.setHardTimeout(hardTimeout);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
    client.setPassword(TestCommon.password);
    client.connect();
}
#method_after
@Before
public void setUp() throws IOException, Exception {
    client = new SSHClient();
    client.setSoftTimeout(softTimeout);
    client.setHardTimeout(hardTimeout);
    client.setHost(TestCommon.host, TestCommon.port);
    client.setUser(TestCommon.user);
    client.setPassword(TestCommon.password);
    client.connect();
    client.authenticate();
}
#end_block

#method_before
@Test
public void testCommandZero() throws Exception {
    client.execute("true", null, null, null);
}
#method_after
@Test
public void testCommandZero() throws Exception {
    client.executeCommand("true", null, null, null);
}
#end_block

#method_before
@Test(expected = IOException.class)
public void testCommandNonZero() throws Exception {
    client.execute("false", null, null, null);
}
#method_after
@Test(expected = IOException.class)
public void testCommandNonZero() throws Exception {
    client.executeCommand("false", null, null, null);
}
#end_block

#method_before
@Test(expected = IOException.class)
public void testCommandSignal() throws Exception {
    client.execute("kill $$ ; sleep 10", null, null, null);
}
#method_after
@Test(expected = IOException.class)
public void testCommandSignal() throws Exception {
    client.executeCommand("kill $$ ; sleep 10", null, null, null);
}
#end_block

#method_before
@Test
public void testEchoStdout() throws Exception {
    String content = "hello\nworld!\nother\ndata";
    InputStream stdin = new ByteArrayInputStream(content.getBytes("UTF-8"));
    ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    client.execute("cat", stdin, stdout, stderr);
    assertEquals(content, new String(stdout.toByteArray(), "UTF-8"));
    assertEquals(0, stderr.size());
}
#method_after
@Test
public void testEchoStdout() throws Exception {
    String content = "hello\nworld!\nother\ndata";
    InputStream stdin = new ByteArrayInputStream(content.getBytes("UTF-8"));
    ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    client.executeCommand("cat", stdin, stdout, stderr);
    assertEquals(content, new String(stdout.toByteArray(), "UTF-8"));
    assertEquals(0, stderr.size());
}
#end_block

#method_before
@Test
public void testEchoStderr() throws Exception {
    String content = "hello\nworld!\nother\ndata";
    InputStream stdin = new ByteArrayInputStream(content.getBytes("UTF-8"));
    ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    client.execute("cat >&2", stdin, stdout, stderr);
    assertEquals(content, new String(stderr.toByteArray(), "UTF-8"));
    assertEquals(0, stdout.size());
}
#method_after
@Test
public void testEchoStderr() throws Exception {
    String content = "hello\nworld!\nother\ndata";
    InputStream stdin = new ByteArrayInputStream(content.getBytes("UTF-8"));
    ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    client.executeCommand("cat >&2", stdin, stdout, stderr);
    assertEquals(content, new String(stderr.toByteArray(), "UTF-8"));
    assertEquals(0, stdout.size());
}
#end_block

#method_before
@Test
public void testEchoBoth() throws Exception {
    String content = "hello\nworld!\nother\ndata";
    InputStream stdin = new ByteArrayInputStream(content.getBytes("UTF-8"));
    ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    client.execute("cat | tee /proc/self/fd/2", stdin, stdout, stderr);
    assertEquals(content, new String(stdout.toByteArray(), "UTF-8"));
    assertEquals(content, new String(stderr.toByteArray(), "UTF-8"));
}
#method_after
@Test
public void testEchoBoth() throws Exception {
    String content = "hello\nworld!\nother\ndata";
    InputStream stdin = new ByteArrayInputStream(content.getBytes("UTF-8"));
    ByteArrayOutputStream stdout = new ByteArrayOutputStream();
    ByteArrayOutputStream stderr = new ByteArrayOutputStream();
    client.executeCommand("cat | tee /proc/self/fd/2", stdin, stdout, stderr);
    assertEquals(content, new String(stdout.toByteArray(), "UTF-8"));
    assertEquals(content, new String(stderr.toByteArray(), "UTF-8"));
}
#end_block

#method_before
@Test
public void testSoftTimeout() throws Exception {
    long start = System.currentTimeMillis();
    try {
        client.execute(String.format("sleep %d", softTimeout / 1000 * 4), null, null, null);
    } catch (TimeLimitExceededException e) {
        assertTrue(System.currentTimeMillis() - start >= softTimeout);
        assertTrue(System.currentTimeMillis() - start < softTimeout * 3 / 2);
    }
}
#method_after
@Test
public void testSoftTimeout() throws Exception {
    long start = System.currentTimeMillis();
    try {
        client.executeCommand(String.format("sleep %d", softTimeout / 1000 * 4), null, null, null);
    } catch (TimeLimitExceededException e) {
        assertTrue(System.currentTimeMillis() - start >= softTimeout);
        assertTrue(System.currentTimeMillis() - start < softTimeout * 3 / 2);
    }
}
#end_block

#method_before
@Test(timeout = 120 * 1000)
public void testHardTimeout() throws Exception {
    long start = System.currentTimeMillis();
    try {
        client.execute(String.format("while true; do echo sleeping; sleep %d; done", softTimeout / 1000 / 2), null, null, null);
    } catch (TimeLimitExceededException e) {
        assertTrue(System.currentTimeMillis() - start >= hardTimeout);
        assertTrue(System.currentTimeMillis() - start < hardTimeout * 3 / 2);
    }
}
#method_after
@Test(timeout = 120 * 1000)
public void testHardTimeout() throws Exception {
    long start = System.currentTimeMillis();
    try {
        client.executeCommand(String.format("while true; do echo sleeping; sleep %d; done", softTimeout / 1000 / 2), null, null, null);
    } catch (TimeLimitExceededException e) {
        assertTrue(System.currentTimeMillis() - start >= hardTimeout);
        assertTrue(System.currentTimeMillis() - start < hardTimeout * 3 / 2);
    }
}
#end_block

#method_before
public static void initialize() {
    host = System.getProperty("ssh-host");
    if (host == null) {
        System.out.println("WARNING: using internal daemon");
        try {
            keyPair = KeyPairGenerator.getInstance("RSA").generateKeyPair();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        host = "localhost";
        user = "root";
        password = "password";
        SSHD sshd = new SSHD();
        sshd.setUser(user, password, keyPair.getPublic());
        try {
            sshd.start();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        port = sshd.getPort();
    } else {
        port = Integer.parseInt(System.getProperty("ssh-test-port", "22"));
        user = System.getProperty("ssh-test-user", "root");
        password = System.getProperty("ssh-test-password", "password");
        String p12 = System.getProperty("ssh-test-p12");
        String p12_password = System.getProperty("ssh-test-p12-password", "password");
        try {
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(new FileInputStream(p12), p12_password.toCharArray());
            KeyStore.PrivateKeyEntry entry = (KeyStore.PrivateKeyEntry) keyStore.getEntry("1", new KeyStore.PasswordProtection(p12_password.toCharArray()));
            keyPair = new KeyPair(entry.getCertificate().getPublicKey(), entry.getPrivateKey());
        } catch (Throwable t) {
            throw new RuntimeException(t);
        }
    }
    largeTestFileSize = Long.parseLong(System.getProperty("ssh-test-large-file-size", "50000000"));
    largeTestHardTimeout = Long.parseLong(System.getProperty("ssh-test-long-hard-timeout", "0"));
}
#method_after
public static void initialize() {
    host = System.getProperty("ssh-host");
    if (host == null) {
        System.out.println("WARNING: using internal daemon");
        try {
            keyPair = KeyPairGenerator.getInstance("RSA").generateKeyPair();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        host = "localhost";
        user = "root";
        password = "password";
        sshd = new SSHD();
        sshd.setUser(user, password, keyPair.getPublic());
        try {
            sshd.start();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        port = sshd.getPort();
    } else {
        port = Integer.parseInt(System.getProperty("ssh-test-port", "22"));
        user = System.getProperty("ssh-test-user", "root");
        password = System.getProperty("ssh-test-password", "password");
        String p12 = System.getProperty("ssh-test-p12");
        String p12_password = System.getProperty("ssh-test-p12-password", "password");
        try {
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            keyStore.load(new FileInputStream(p12), p12_password.toCharArray());
            KeyStore.PrivateKeyEntry entry = (KeyStore.PrivateKeyEntry) keyStore.getEntry("1", new KeyStore.PasswordProtection(p12_password.toCharArray()));
            keyPair = new KeyPair(entry.getCertificate().getPublicKey(), entry.getPrivateKey());
        } catch (Throwable t) {
            throw new RuntimeException(t);
        }
    }
    largeTestFileSize = Long.parseLong(System.getProperty("ssh-test-large-file-size", "50000000"));
    largeTestHardTimeout = Long.parseLong(System.getProperty("ssh-test-long-hard-timeout", "0"));
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(upServer.getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                return;
            }
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(upServer.getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                errorType = AuditLogType.GLUSTER_HOST_ADD_FAILED;
                return;
            }
        }
    }
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    return getSucceeded() ? AuditLogType.USER_ADD_VDS : AuditLogType.USER_FAILED_ADD_VDS;
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    return getSucceeded() ? AuditLogType.USER_ADD_VDS : errorType;
}
#end_block

#method_before
public String getServerUniqueId() {
    wrapper.execute(VdsInstaller._getUniqueIdCommand);
    return callback.serverUniqueId;
}
#method_after
public String getServerUniqueId() {
    wrapper.executeCommand(VdsInstaller._getUniqueIdCommand);
    return callback.serverUniqueId;
}
#end_block

#method_before
protected void RunStage() {
    if (this.getClass() == VdsInstaller.class) {
        log.infoFormat("Installation of {0}. Executing installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
    }
    switch(_currentInstallStage) {
        case Start:
            {
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                _executionSucceded = true;
                break;
            }
        case ConnectToServer:
            {
                _executionSucceded = _wrapper.connect(_serverName, _rootPassword);
                break;
            }
        case CheckUniqueVds:
            {
                _wrapper.execute(_getUniqueIdCommand);
                break;
            }
        case UploadScript:
            {
                String path = Config.resolveBootstrapInstallerPath();
                _executionSucceded = _wrapper.sendFile(path, _remoteBootstrapRunningScriptPath);
                if (isOverrideFirewallAllowed() && _executionSucceded) {
                    _currentInstallStage = VdsInstallStages.UploadScript;
                    _executionSucceded = uploadFirewallRulesConfFile();
                }
                break;
            }
        case RunScript:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _bootStrapInitialCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.execute(_bootStrapInitialCommand);
                log.infoFormat(" RunScript ended:" + fRes.toString());
                break;
            }
        case DownloadCertificateRequest:
            {
                // First parameter will always run on Linux, so use path.combine
                // just for the second param.
                Boolean fRes = _wrapper.receiveFile(_remoteDirectory + "/" + _certRequestFileName, buildCAPath(_requestsDirectory, _certRequestFileName));
                log.infoFormat(" DownloadCertificateRequest ended:" + fRes.toString());
                break;
            }
        case SignCertificateRequest:
            {
                _executionSucceded = _caWrapper.SignCertificateRequest(_certRequestFileName, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, _certFileNameLocal);
                log.infoFormat(" SignCertificateRequest ended:" + _executionSucceded);
                if (_executionSucceded) {
                    String currRequest = buildCAPath(_requestsDirectory, _certRequestFileName);
                    try {
                        FileUtil.deleteFile(currRequest);
                    } catch (RuntimeException exp) {
                        log.errorFormat("Installation of {0}. Could not delete certificate request file from: {1}. error: {2}. (Stage: {3}", _serverName, currRequest, exp.getMessage(), getCurrentInstallStage());
                    }
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                } else {
                    log.error("Error signing certificate request");
                }
                break;
            }
        case UploadSignedCertificate:
            {
                // Second parameter will always run on Linux, so use
                // path.combine just for the first param.
                Boolean fRes = _wrapper.sendFile(buildCAPath(_certificatesDirectory, _certFileNameLocal), _remoteDirectory + "/" + _certFileName);
                log.infoFormat(" UploadSignedCertificate ended:" + fRes.toString());
                break;
            }
        case UploadCA:
            {
                String path = String.format("%1$s/%2$s", _remoteDirectory, _caFileName);
                _wrapper.sendFile(Config.resolveCACertificatePath(), path);
                break;
            }
        case FinishCommand:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _finishCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.execute(_finishCommand);
                log.infoFormat(" FinishCommand ended:" + fRes.toString());
                break;
            }
    }
}
#method_after
protected void RunStage() {
    if (this.getClass() == VdsInstaller.class) {
        log.infoFormat("Installation of {0}. Executing installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
    }
    switch(_currentInstallStage) {
        case Start:
            {
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                _executionSucceded = true;
                break;
            }
        case ConnectToServer:
            {
                _executionSucceded = _wrapper.connect(_serverName, _rootPassword);
                break;
            }
        case CheckUniqueVds:
            {
                _wrapper.executeCommand(_getUniqueIdCommand);
                break;
            }
        case UploadScript:
            {
                String path = Config.resolveBootstrapInstallerPath();
                _executionSucceded = _wrapper.sendFile(path, _remoteBootstrapRunningScriptPath);
                if (isOverrideFirewallAllowed() && _executionSucceded) {
                    _currentInstallStage = VdsInstallStages.UploadScript;
                    _executionSucceded = uploadFirewallRulesConfFile();
                }
                break;
            }
        case RunScript:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _bootStrapInitialCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.executeCommand(_bootStrapInitialCommand);
                log.infoFormat(" RunScript ended:" + fRes.toString());
                break;
            }
        case DownloadCertificateRequest:
            {
                // First parameter will always run on Linux, so use path.combine
                // just for the second param.
                Boolean fRes = _wrapper.receiveFile(_remoteDirectory + "/" + _certRequestFileName, buildCAPath(_requestsDirectory, _certRequestFileName));
                log.infoFormat(" DownloadCertificateRequest ended:" + fRes.toString());
                break;
            }
        case SignCertificateRequest:
            {
                _executionSucceded = _caWrapper.SignCertificateRequest(_certRequestFileName, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, _certFileNameLocal);
                log.infoFormat(" SignCertificateRequest ended:" + _executionSucceded);
                if (_executionSucceded) {
                    String currRequest = buildCAPath(_requestsDirectory, _certRequestFileName);
                    try {
                        FileUtil.deleteFile(currRequest);
                    } catch (RuntimeException exp) {
                        log.errorFormat("Installation of {0}. Could not delete certificate request file from: {1}. error: {2}. (Stage: {3}", _serverName, currRequest, exp.getMessage(), getCurrentInstallStage());
                    }
                    _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                } else {
                    log.error("Error signing certificate request");
                }
                break;
            }
        case UploadSignedCertificate:
            {
                // Second parameter will always run on Linux, so use
                // path.combine just for the first param.
                Boolean fRes = _wrapper.sendFile(buildCAPath(_certificatesDirectory, _certFileNameLocal), _remoteDirectory + "/" + _certFileName);
                log.infoFormat(" UploadSignedCertificate ended:" + fRes.toString());
                break;
            }
        case UploadCA:
            {
                String path = String.format("%1$s/%2$s", _remoteDirectory, _caFileName);
                _wrapper.sendFile(Config.resolveCACertificatePath(), path);
                break;
            }
        case FinishCommand:
            {
                log.infoFormat("Installation of {0}. Sending SSH Command {1}. (Stage: {2})", _serverName, _finishCommand, getCurrentInstallStage());
                Boolean fRes = _wrapper.executeCommand(_finishCommand);
                log.infoFormat(" FinishCommand ended:" + fRes.toString());
                break;
            }
    }
}
#end_block

#method_before
@Override
protected void RunStage() {
    switch(_currentInstallStage) {
        case Start:
            {
                log.infoFormat("Installation of {0}. Executing oVirt reinstall/upgrade stage. (Stage: {1})", _serverName, getCurrentInstallStage());
                super.RunStage();
                break;
            }
        // (relies on public key existing on cbc image)
        case ConnectToServer:
            {
                log.infoFormat("Installation of {0}. Executing oVirt reinstall/upgrade stage. (Stage: {1})", _serverName, getCurrentInstallStage());
                _executionSucceded = _wrapper.connect(_serverName);
                break;
            }
        case UploadScript:
            log.infoFormat("Installation of {0}. Executing oVirt reinstall/upgrade stage. (Stage: {1})", _serverName, getCurrentInstallStage());
            String path = Path.Combine(Config.resolveOVirtISOsRepositoryPath(), _oVirtISOFile);
            _executionSucceded = _wrapper.sendFile(path, Config.<String>GetValue(ConfigValues.oVirtUploadPath));
            break;
        case RunScript:
            log.infoFormat("Installation of {0}. Executing oVirt reinstall/upgrade stage. (Stage: {1})", _serverName, getCurrentInstallStage());
            _wrapper.execute(runUpgradeCommand);
            break;
        // Skip unused states
        default:
            {
                _executionSucceded = true;
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                break;
            }
    }
}
#method_after
@Override
protected void RunStage() {
    switch(_currentInstallStage) {
        // Keep base logic for following states
        case Start:
        case SignCertificateRequest:
        case UploadSignedCertificate:
        case UploadCA:
        case DownloadCertificateRequest:
            {
                log.infoFormat("Installation of {0}. Executing oVirt installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
                super.RunStage();
                break;
            }
        case ConnectToServer:
            {
                log.infoFormat("Installation of {0}. Executing oVirt installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
                _executionSucceded = _wrapper.connect(_serverName);
                break;
            }
        case RunScript:
            {
                log.infoFormat("Installation of {0}. Executing oVirt installation stage. (Stage: {1})", _serverName, getCurrentInstallStage());
                _wrapper.executeCommand(createCertReqCommand);
                break;
            }
        case FinishCommand:
            {
                log.infoFormat("Installation of {0}. Executing oVirt installation stage, sending SSH Command {1}. (Stage: {2})", _serverName, finishCommandInitial, getCurrentInstallStage());
                _wrapper.executeCommand(finishCommandInitial);
                break;
            }
        // VdsInstallStages.CheckUniqueVds
        default:
            {
                _executionSucceded = true;
                _currentInstallStage = VdsInstallStages.forValue(_currentInstallStage.getValue() + 1);
                break;
            }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    } else if (getGlusterVolume().getVolumeType() == GlusterVolumeType.STRIPE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return (updateBrickServerNames(getParameters().getBricks(), true) && isValidBricks(getParameters().getBricks()));
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    } else if (getGlusterVolume().getVolumeType() == GlusterVolumeType.STRIPE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return (updateBrickServerNames(getParameters().getBricks(), true) && validateBricks(getParameters().getBricks()));
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks());
        getReturnValue().setActionReturnValue(getBrickIds(getParameters().getBricks()));
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks());
        getReturnValue().setActionReturnValue(getBrickIds(getParameters().getBricks()));
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
public String getQuotaName() {
    return quota.getQuotaName();
}
#method_after
public String getQuotaName() {
    return quota.getQuotaName();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    setVdsGroupId(getParameters().getVdsStaticData().getvds_group_id());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        returnValue = false;
    } else {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getvds_name();
        String hostName = vds.gethost_name();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
            returnValue = false;
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
            returnValue = false;
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
            returnValue = false;
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.UseSecureConnectionWithServers) && !FileUtil.fileExists(Config.resolveCertificatePath())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
                returnValue = false;
            } else if (!getParameters().getAddPending() && StringHelper.isNullOrEmpty(getParameters().getRootPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
                returnValue = false;
            } else if (!IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())) {
                returnValue = false;
            } else if (getParameters().getVdsStaticData().getport() < 1 || getParameters().getVdsStaticData().getport() > 65536) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_IS_NOT_LEGAL);
                returnValue = false;
            } else {
                returnValue = returnValue && validateHostUniqueness(vds);
            }
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (clusterHasServers()) {
            upServer = ClusterUtils.getInstance().getUpServer(getVdsGroupId());
            if (upServer == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
                returnValue = false;
            }
        }
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    setVdsGroupId(getParameters().getVdsStaticData().getvds_group_id());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        returnValue = false;
    } else {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getvds_name();
        String hostName = vds.gethost_name();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
            returnValue = false;
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
            returnValue = false;
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
            returnValue = false;
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.UseSecureConnectionWithServers) && !FileUtil.fileExists(Config.resolveCertificatePath())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
                returnValue = false;
            } else if (!getParameters().getAddPending() && StringUtils.isEmpty(getParameters().getRootPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
                returnValue = false;
            } else if (!IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())) {
                returnValue = false;
            } else if (getParameters().getVdsStaticData().getport() < 1 || getParameters().getVdsStaticData().getport() > 65536) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_IS_NOT_LEGAL);
                returnValue = false;
            } else {
                returnValue = returnValue && validateHostUniqueness(vds);
            }
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (clusterHasServers()) {
            upServer = ClusterUtils.getInstance().getUpServer(getVdsGroupId());
            if (upServer == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
                returnValue = false;
            }
        }
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    }
    return returnValue;
}
#end_block

#method_before
private boolean validateHostUniqueNameAndAddress(VdsStatic vdsStaticData) {
    // having oVirt in pending approval state allows having a host with same name and address
    Guid vdsForUniqueId = getParameters().getVdsForUniqueId();
    if (vdsForUniqueId == null) {
        return !VdsHandler.isVdsExist(getParameters().getVdsStaticData(), getReturnValue().getCanDoActionMessages());
    } else {
        return !VdsHandler.isVdsExistForPendingOvirt(getParameters().getVdsStaticData(), getReturnValue().getCanDoActionMessages(), vdsForUniqueId);
    }
}
#method_after
private boolean validateHostUniqueNameAndAddress(VdsStatic vdsStaticData) {
    // having oVirt in pending approval state allows having a host with same name and address
    Guid vdsForUniqueId = getParameters().getVdsForUniqueId();
    if (vdsForUniqueId == null) {
        return !VdsHandler.isVdsExist(vdsStaticData, getReturnValue().getCanDoActionMessages());
    }
    return !VdsHandler.isVdsExistForPendingOvirt(vdsStaticData, getReturnValue().getCanDoActionMessages(), vdsForUniqueId);
}
#end_block

#method_before
private static void initVMsPoolSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_ADD_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initVMsPoolSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_ADD_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED, AuditLogSeverity.WARNING);
}
#end_block

#method_before
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.NORMAL);
}
#method_after
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
}
#method_after
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initNetworkSeverities() {
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_NETWORK_MTU_DIFFER_FROM_LOGICAL_NETWORK, AuditLogSeverity.WARNING);
}
#method_after
private static void initNetworkSeverities() {
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
}
#end_block

#method_before
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        if ((message = mMessages.get(logType)) != null) {
            String resolvedMessage = resolveMessage(message, auditLogable);
            AuditLogSeverity severity = AuditLogSeverity.forValue(0);
            if (!((severity = mSeverities.get(logType)) != null)) {
                severity = AuditLogSeverity.NORMAL;
                log.infoFormat("No severity for {0} type", logType);
            }
            AuditLog auditLog;
            if (auditLogable != null) {
                AuditLog tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setQuotaId(auditLogable.getQuotaId());
                tempVar.setQuotaName(auditLogable.getQuotaName());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                auditLog = tempVar;
            } else {
                auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
            }
            getDbFacadeInstance().getAuditLogDAO().save(auditLog);
            if (!StringHelper.EqOp(loggerString, "")) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        } else if (auditLogable != null) {
            log.infoFormat("No string for {0} type. Use default Log", auditLogable.getAuditLogTypeValue());
            defaultLog(auditLogable);
        }
    }
}
#method_after
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        if ((message = mMessages.get(logType)) != null) {
            String resolvedMessage = resolveMessage(message, auditLogable);
            AuditLogSeverity severity = AuditLogSeverity.forValue(0);
            if (!((severity = mSeverities.get(logType)) != null)) {
                severity = AuditLogSeverity.NORMAL;
                log.infoFormat("No severity for {0} type", logType);
            }
            AuditLog auditLog;
            if (auditLogable != null) {
                AuditLog tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                if (tempVar instanceof Quotable) {
                    Quotable quotable = (Quotable) tempVar;
                    tempVar.setQuotaId(quotable.getQuotaId());
                }
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                auditLog = tempVar;
            } else {
                auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
            }
            getDbFacadeInstance().getAuditLogDAO().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        } else if (auditLogable != null) {
            log.infoFormat("No string for {0} type. Use default Log", auditLogable.getAuditLogTypeValue());
            defaultLog(auditLogable);
        }
    }
}
#end_block

#method_before
static String resolveMessage(String message, AuditLogableBase logable) {
    String returnValue = message;
    if (logable != null) {
        Map<String, String> map = getAvalableValues(logable);
        returnValue = resolveMessage(message, map);
    }
    return returnValue;
}
#method_after
static String resolveMessage(String message, AuditLogableBase logable) {
    String returnValue = message;
    if (logable != null) {
        Map<String, String> map = getAvailableValues(logable);
        returnValue = resolveMessage(message, map);
    }
    return returnValue;
}
#end_block

#method_before
public static String resolveMessage(String message, Map<String, String> values) {
    Matcher matcher = pattern.matcher(message);
    StringBuffer buffer = new StringBuffer();
    String value;
    String token;
    while (matcher.find()) {
        token = matcher.group();
        // remove leading ${
        token = token.substring(2);
        // remove trailing }
        token = token.substring(0, token.length() - 1);
        // get value from value map
        value = values.get(token.toLowerCase());
        if (value == null || value.isEmpty()) {
            // replace value with token if value not defined
            value = token;
        }
        // put the value into message
        matcher.appendReplacement(buffer, Matcher.quoteReplacement(value));
    }
    // append the rest of the message
    matcher.appendTail(buffer);
    return buffer.toString();
}
#method_after
public static String resolveMessage(String message, Map<String, String> values) {
    Matcher matcher = pattern.matcher(message);
    StringBuffer buffer = new StringBuffer();
    String value;
    String token;
    while (matcher.find()) {
        token = matcher.group();
        // remove leading ${
        token = token.substring(2);
        // remove trailing }
        token = token.substring(0, token.length() - 1);
        // get value from value map
        value = values.get(token.toLowerCase());
        if (value == null || value.isEmpty()) {
            // replace value with UNKNOWN_VARIABLE_VALUE if value not defined
            value = UNKNOWN_VARIABLE_VALUE;
        }
        // put the value into message
        matcher.appendReplacement(buffer, Matcher.quoteReplacement(value));
    }
    // append the rest of the message
    matcher.appendTail(buffer);
    return buffer.toString();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VDS vds = getVds();
    if (vds == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
        return false;
    }
    if (!ObjectIdentityChecker.CanUpdateField(vds, "vds_group_id", vds.getstatus())) {
        addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE);
        return false;
    }
    VDSGroup targetCluster = DbFacade.getInstance().getVdsGroupDAO().get(getParameters().getClusterId());
    if (targetCluster == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    targetStoragePool = DbFacade.getInstance().getStoragePoolDAO().getForVdsGroup(targetCluster.getId());
    if (targetStoragePool != null && targetStoragePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!DbFacade.getInstance().getVdsStaticDAO().getAllForVdsGroup(getParameters().getClusterId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE);
            return false;
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (getClusterUtils().hasVolumeOnServer(getVdsId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
            return false;
        }
        if (getClusterUtils().hasMultipleServers(getVdsGroupId()) && getClusterUtils().getUpServer(getVdsGroupId()) == null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND);
            return false;
        }
    }
    if (getVdsGroup(getParameters().getClusterId()).supportsGlusterService()) {
        if (getClusterUtils().hasServers(getParameters().getClusterId()) && getClusterUtils().getUpServer(getParameters().getClusterId()) == null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    VDS vds = getVds();
    if (vds == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
        return false;
    }
    if (!ObjectIdentityChecker.CanUpdateField(vds, "vds_group_id", vds.getstatus())) {
        addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE);
        return false;
    }
    if (getTargetCluster() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    targetStoragePool = DbFacade.getInstance().getStoragePoolDAO().getForVdsGroup(getTargetCluster().getId());
    if (targetStoragePool != null && targetStoragePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!DbFacade.getInstance().getVdsStaticDAO().getAllForVdsGroup(getParameters().getClusterId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE);
            return false;
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (getGlusterUtils().hasBricks(getSourceCluster().getId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
            return false;
        }
        if (!hasUpServer(getSourceCluster())) {
            return false;
        }
    }
    if (getTargetCluster().supportsGlusterService() && !hasUpServer(getTargetCluster())) {
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSGroup sourceCluster = getVdsGroup();
    final Guid targetClusterId = getParameters().getClusterId();
    if (sourceCluster.getId().equals(targetClusterId)) {
        setSucceeded(true);
        return;
    }
    // save the new cluster id
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            VdsStatic staticData = getVds().getStaticData();
            getCompensationContext().snapshotEntity(staticData);
            staticData.setvds_group_id(targetClusterId);
            DbFacade.getInstance().getVdsStaticDAO().update(staticData);
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // handle spm
    getParameters().setCompensationEnabled(true);
    getParameters().setTransactionScopeOption(TransactionScopeOption.RequiresNew);
    if (sourceCluster.getstorage_pool_id() != null) {
        if (sourceCluster.supportsGlusterService()) {
            glusterHostRemove(sourceCluster.getId());
            if (!getSucceeded()) {
                return;
            }
        }
        VdcReturnValueBase removeVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.RemoveVdsSpmId, getParameters(), new CommandContext(getCompensationContext()));
        if (!removeVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(removeVdsSpmIdReturn.getFault());
            return;
        }
    }
    if (targetStoragePool != null) {
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, getParameters(), new CommandContext(getCompensationContext()));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
        if (getVdsGroup(getParameters().getClusterId()).supportsGlusterService()) {
            glusterHostAdd(getParameters().getClusterId());
            if (!getSucceeded()) {
                return;
            }
        }
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    final Guid targetClusterId = getParameters().getClusterId();
    if (getSourceCluster().getId().equals(targetClusterId)) {
        setSucceeded(true);
        return;
    }
    // save the new cluster id
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            VdsStatic staticData = getVds().getStaticData();
            getCompensationContext().snapshotEntity(staticData);
            staticData.setvds_group_id(targetClusterId);
            DbFacade.getInstance().getVdsStaticDAO().update(staticData);
            getCompensationContext().stateChanged();
            return null;
        }
    });
    if (getSourceCluster().supportsGlusterService() && getClusterUtils().hasServers(getSourceCluster().getId())) {
        if (!glusterHostRemove(getSourceCluster().getId())) {
            return;
        }
    }
    if (getTargetCluster().supportsGlusterService() && getClusterUtils().hasMultipleServers(getTargetCluster().getId())) {
        if (!glusterHostAdd(getTargetCluster().getId())) {
            return;
        }
    }
    // handle spm
    getParameters().setCompensationEnabled(true);
    getParameters().setTransactionScopeOption(TransactionScopeOption.RequiresNew);
    if (getSourceCluster().getstorage_pool_id() != null) {
        VdcReturnValueBase removeVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.RemoveVdsSpmId, getParameters(), new CommandContext(getCompensationContext()));
        if (!removeVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(removeVdsSpmIdReturn.getFault());
            return;
        }
    }
    if (targetStoragePool != null) {
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, getParameters(), new CommandContext(getCompensationContext()));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
private void glusterHostRemove(Guid sourceClusterId) {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (getClusterUtils().hasServers(sourceClusterId) && !getClusterUtils().hasVolumeOnServer(getVdsId())) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((getClusterUtils().getUpServer(sourceClusterId)).getId(), getVds().gethost_name(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!getSucceeded()) {
            getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
            getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
            return;
        }
    } else {
        setSucceeded(true);
    }
}
#method_after
private boolean glusterHostRemove(Guid sourceClusterId) {
    String hostName = (getVds().gethost_name().isEmpty()) ? getVds().getManagmentIp() : getVds().gethost_name();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((getClusterUtils().getUpServer(sourceClusterId)).getId(), hostName, false));
    if (!returnValue.getSucceeded()) {
        handleVdsError(returnValue);
        errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
        return false;
    }
    return true;
}
#end_block

#method_before
private void glusterHostAdd(Guid targetClusterId) {
    // If cluster supports gluster service do gluster peer probe
    if (getClusterUtils().hasMultipleServers(targetClusterId)) {
        String hostName = (getVds().gethost_name().isEmpty()) ? getVds().getManagmentIp() : getVds().gethost_name();
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getClusterUtils().getUpServer(targetClusterId).getId(), hostName));
        setSucceeded(returnValue.getSucceeded());
        if (!getSucceeded()) {
            getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
            getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
            errorType = AuditLogType.GLUSTER_HOST_ADD_FAILED;
            return;
        }
    } else {
        setSucceeded(true);
    }
}
#method_after
private boolean glusterHostAdd(Guid targetClusterId) {
    String hostName = (getVds().gethost_name().isEmpty()) ? getVds().getManagmentIp() : getVds().gethost_name();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getClusterUtils().getUpServer(targetClusterId).getId(), hostName));
    if (!returnValue.getSucceeded()) {
        handleVdsError(returnValue);
        errorType = AuditLogType.GLUSTER_HOST_ADD_FAILED;
        return false;
    }
    return true;
}
#end_block

#method_before
@Test
public void testUpdateImageVmSnapshotId() {
    dao.updateImageVmSnapshotId(EXISTING_IMAGE_ID, EXISTING_SNAPSHOT_ID);
    Image imageFromDb = dao.get(EXISTING_IMAGE_ID);
    assertNotNull(imageFromDb);
    assertEquals("Image snapshot id wasn't updated properly", EXISTING_SNAPSHOT_ID, imageFromDb.getSnapshotId());
}
#method_after
@Test
public void testUpdateImageVmSnapshotId() {
    Guid guid = Guid.NewGuid();
    dao.updateImageVmSnapshotId(EXISTING_IMAGE_ID, guid);
    Image imageFromDb = dao.get(EXISTING_IMAGE_ID);
    assertNotNull(imageFromDb);
    assertEquals("Image snapshot id wasn't updated properly", guid, imageFromDb.getSnapshotId());
}
#end_block

#method_before
private void updateDiskVmSnapshotId() {
    if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
        Guid snapshotId = getSnapshotDao().getId(getVmId(), SnapshotType.ACTIVE);
        getImageDao().updateImageVmSnapshotId(disk.getId(), snapshotId);
        ((DiskImage) disk).setvm_snapshot_id(snapshotId);
    }
}
#method_after
private void updateDiskVmSnapshotId() {
    Guid snapshotId = getSnapshotDao().getId(getVmId(), SnapshotType.ACTIVE);
    if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
        DiskImage diskImage = ((DiskImage) disk);
        getImageDao().updateImageVmSnapshotId(diskImage.getImageId(), snapshotId);
    } else {
        throw new VdcBLLException(VdcBllErrors.StorageException, "update of snapshot id was initiated for unsupported disk type");
    }
}
#end_block

#method_before
@Override
protected Map<Guid, String> getExclusiveLocks() {
    if (disk.isBoot()) {
        return Collections.singletonMap(getParameters().getVmId(), LockingGroup.VM_DISK_BOOT.name());
    }
    return null;
}
#method_after
@Override
protected Map<String, String> getExclusiveLocks() {
    if (disk.isBoot()) {
        return Collections.singletonMap(getParameters().getVmId().toString(), LockingGroup.VM_DISK_BOOT.name());
    }
    return null;
}
#end_block

#method_before
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vm_name", "description", "domain", "os", "osType", "creation_date", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "is_auto_suspend", "auto_startup", "dedicated_vm_for_vds", "default_display_type", "priority", "default_boot_sequence", "initrd_url", "kernel_url", "kernel_params", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled", "num_of_cpus" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum<?>[] { VMStatus.Down }), Arrays.asList(new String[] { "vds_group_id", "time_zone", "is_stateless", "nice_level", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "iso_path", "userDefinedProperties", "predefinedProperties", "customProperties", "images", "interfaces" }));
}
#method_after
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vm_name", "description", "domain", "os", "osType", "creation_date", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "is_auto_suspend", "auto_startup", "dedicated_vm_for_vds", "default_display_type", "priority", "default_boot_sequence", "initrd_url", "kernel_url", "kernel_params", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum<?>[] { VMStatus.Down }), Arrays.asList(new String[] { "vds_group_id", "time_zone", "is_stateless", "nice_level", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "iso_path", "userDefinedProperties", "predefinedProperties", "customProperties", "images", "interfaces" }));
}
#end_block

#method_before
public static boolean VerifyAddVm(List<String> reasons, int nicsCount, VmTemplate vmTemplate, Guid storagePoolId, int vmPriority) {
    boolean returnValue = true;
    if (MacPoolManager.getInstance().getavailableMacsCount() < nicsCount) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString());
        }
        returnValue = false;
    } else {
        boolean isValid = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(storagePoolId)).getReturnValue()).booleanValue();
        if (isValid) {
            if (!VmTemplateCommand.IsVmPriorityValueLegal(vmPriority, reasons)) {
                returnValue = false;
            }
        } else if (reasons != null) {
            reasons.add(VdcBllMessages.IMAGE_REPOSITORY_NOT_FOUND.toString());
        }
    }
    return returnValue;
}
#method_after
public static boolean VerifyAddVm(List<String> reasons, int nicsCount, VmTemplate vmTemplate, Guid storagePoolId, int vmPriority) {
    boolean returnValue = true;
    if (MacPoolManager.getInstance().getavailableMacsCount() < nicsCount) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString());
        }
        returnValue = false;
    } else {
        boolean isValid = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(storagePoolId)).getReturnValue()).booleanValue();
        if (isValid) {
            if (!VmTemplateCommand.IsVmPriorityValueLegal(vmPriority, reasons)) {
                returnValue = false;
            }
        } else {
            if (reasons != null) {
                reasons.add(VdcBllMessages.IMAGE_REPOSITORY_NOT_FOUND.toString());
            }
            returnValue = false;
        }
    }
    return returnValue;
}
#end_block

#method_before
public static void unlockVm(final VmDynamic vm, final CompensationContext compensationContext) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            compensationContext.snapshotEntityStatus(vm, vm.getstatus());
            vm.setstatus(VMStatus.Down);
            UnLockVm(vm.getId());
            compensationContext.stateChanged();
            return null;
        }
    });
}
#method_after
public static void unlockVm(final VM vm, final CompensationContext compensationContext) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            compensationContext.snapshotEntityStatus(vm, vm.getstatus());
            UnLockVm(vm);
            compensationContext.stateChanged();
            return null;
        }
    });
}
#end_block

#method_before
public static void UnLockVm(Guid vmId) {
    VM vm = DbFacade.getInstance().getVmDAO().get(vmId);
    if (vm.getstatus() == VMStatus.ImageLocked) {
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new SetVmStatusVDSCommandParameters(vmId, VMStatus.Down));
    } else {
        log.errorFormat("Trying to unlock vm {0} in status {1} - not moving to down!", vm.getvm_name(), vm.getstatus());
    }
}
#method_after
public static void UnLockVm(VM vm) {
    Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new SetVmStatusVDSCommandParameters(vm.getId(), VMStatus.Down));
    vm.setstatus(VMStatus.Down);
}
#end_block

#method_before
public static int GetRoundedPriority(int priority, int maxPriority) {
    int medium = maxPriority / 2;
    int[] levels = new int[] { 1, medium, maxPriority };
    for (int i = 0; i < levels.length; i++) {
        int lengthToLess = levels[i] - priority;
        int lengthToMore = levels[i + 1] - priority;
        if (lengthToMore < 0) {
            continue;
        }
        return Math.abs(lengthToLess) < lengthToMore ? levels[i] : levels[i + 1];
    }
    return 0;
// aQuery.asyncCallback.OnSuccess(aQuery.getModel(), aQuery.converterCallback.Convert(priority,aQuery));
}
#method_after
public static int GetRoundedPriority(int priority, int maxPriority) {
    int medium = maxPriority / 2;
    int[] levels = new int[] { 1, medium, maxPriority };
    for (int i = 0; i < levels.length; i++) {
        int lengthToLess = levels[i] - priority;
        int lengthToMore = levels[i + 1] - priority;
        if (lengthToMore < 0) {
            continue;
        }
        return Math.abs(lengthToLess) < lengthToMore ? levels[i] : levels[i + 1];
    }
    return 0;
}
#end_block

#method_before
private void onCreateVolume() {
    VolumeModel volumeModel = (VolumeModel) getWindow();
    if (!volumeModel.validate()) {
        return;
    }
    Guid clusterId = ((VDSGroup) volumeModel.getCluster().getSelectedItem()).getId();
    GlusterVolumeEntity volume = new GlusterVolumeEntity();
    volume.setClusterId(clusterId);
    volume.setName((String) volumeModel.getName().getEntity());
    GlusterVolumeType type = (GlusterVolumeType) volumeModel.getTypeList().getSelectedItem();
    if (type == GlusterVolumeType.STRIPE || type == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        volume.setStripeCount(volumeModel.getStripeCountValue());
    } else if (type == GlusterVolumeType.REPLICATE || type == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        volume.setReplicaCount(volumeModel.getReplicaCountValue());
    }
    volume.setVolumeType(type);
    if ((Boolean) volumeModel.getTcpTransportType().getEntity())
        volume.getTransportTypes().add(TransportType.TCP);
    if ((Boolean) volumeModel.getRdmaTransportType().getEntity())
        volume.getTransportTypes().add(TransportType.RDMA);
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeModel.getBricks().getItems()) {
        brickList.add((GlusterBrickEntity) ((EntityModel) model).getEntity());
    }
    volume.setBricks(brickList);
    if ((Boolean) volumeModel.getNfs_accecssProtocol().getEntity())
        volume.enableNFS();
    else
        volume.disableNFS();
    if ((Boolean) volumeModel.getCifs_accecssProtocol().getEntity())
        volume.enableCifs();
    else
        volume.disableCifs();
    volume.setAccessControlList((String) volumeModel.getAllowAccess().getEntity());
    volumeModel.StartProgress(null);
    CreateGlusterVolumeParameters parameter = new CreateGlusterVolumeParameters(volume);
    Frontend.RunAction(VdcActionType.CreateGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VolumeListModel localModel = (VolumeListModel) result.getState();
            localModel.postOnCreateVolume(result.getReturnValue());
        }
    }, this);
}
#method_after
private void onCreateVolume() {
    VolumeModel volumeModel = (VolumeModel) getWindow();
    if (!volumeModel.validate()) {
        return;
    }
    Guid clusterId = ((VDSGroup) volumeModel.getCluster().getSelectedItem()).getId();
    GlusterVolumeEntity volume = new GlusterVolumeEntity();
    volume.setClusterId(clusterId);
    volume.setName((String) volumeModel.getName().getEntity());
    GlusterVolumeType type = (GlusterVolumeType) volumeModel.getTypeList().getSelectedItem();
    if (type == GlusterVolumeType.STRIPE || type == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        volume.setStripeCount(volumeModel.getStripeCountValue());
    } else if (type == GlusterVolumeType.REPLICATE || type == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        volume.setReplicaCount(volumeModel.getReplicaCountValue());
    }
    volume.setVolumeType(type);
    if ((Boolean) volumeModel.getTcpTransportType().getEntity()) {
        volume.getTransportTypes().add(TransportType.TCP);
    }
    if ((Boolean) volumeModel.getRdmaTransportType().getEntity()) {
        volume.getTransportTypes().add(TransportType.RDMA);
    }
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeModel.getBricks().getItems()) {
        brickList.add((GlusterBrickEntity) ((EntityModel) model).getEntity());
    }
    volume.setBricks(brickList);
    if ((Boolean) volumeModel.getNfs_accecssProtocol().getEntity()) {
        volume.enableNFS();
    } else {
        volume.disableNFS();
    }
    if ((Boolean) volumeModel.getCifs_accecssProtocol().getEntity()) {
        volume.enableCifs();
    } else {
        volume.disableCifs();
    }
    volume.setAccessControlList((String) volumeModel.getAllowAccess().getEntity());
    volumeModel.StartProgress(null);
    CreateGlusterVolumeParameters parameter = new CreateGlusterVolumeParameters(volume);
    Frontend.RunAction(VdcActionType.CreateGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VolumeListModel localModel = (VolumeListModel) result.getState();
            localModel.postOnCreateVolume(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
private void StoragePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    storage_pool selectedDataCenter = (storage_pool) getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getstorage_pool_type() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            clusterModel.getVersion().setItems(versions);
            if (!versions.contains(clusterModel.getVersion().getSelectedItem())) {
                if (versions.contains(((storage_pool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version())) {
                    clusterModel.getVersion().setSelectedItem(((storage_pool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version());
                } else {
                    clusterModel.getVersion().setSelectedItem(Linq.SelectHighestVersion(versions));
                }
            }
        }
    };
    AsyncDataProvider.GetDataCenterVersions(_asyncQuery, selectedDataCenter == null ? null : (NGuid) (selectedDataCenter.getId()));
}
#method_after
private void StoragePool_SelectedItemChanged(EventArgs e) {
    // possible versions for new cluster (when editing cluster, this event won't occur)
    // are actually the possible versions for the data-center that the cluster is going
    // to be attached to.
    storage_pool selectedDataCenter = (storage_pool) getDataCenter().getSelectedItem();
    if (selectedDataCenter == null) {
        return;
    }
    if (selectedDataCenter.getstorage_pool_type() == StorageType.LOCALFS) {
        setIsResiliencePolicyTabAvailable(false);
    } else {
        setIsResiliencePolicyTabAvailable(true);
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            ClusterModel clusterModel = (ClusterModel) model;
            ArrayList<Version> versions = (ArrayList<Version>) result;
            clusterModel.getVersion().setItems(versions);
            if (!versions.contains(clusterModel.getVersion().getSelectedItem())) {
                if (versions.contains(((storage_pool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version())) {
                    clusterModel.getVersion().setSelectedItem(((storage_pool) clusterModel.getDataCenter().getSelectedItem()).getcompatibility_version());
                } else {
                    clusterModel.getVersion().setSelectedItem(Linq.SelectHighestVersion(versions));
                }
            } else {
                clusterModel.getVersion().setSelectedItem(Linq.FirstOrDefault(versions, new Linq.VersionPredicate(((VDSGroup) getEntity()).getcompatibility_version())));
            }
        }
    };
    AsyncDataProvider.GetDataCenterVersions(_asyncQuery, selectedDataCenter == null ? null : (NGuid) (selectedDataCenter.getId()));
}
#end_block

#method_before
private void SetDefaultNames8() {
    VDS host = context.host;
    ArrayList<storage_pool> dataCenters = context.dataCenterList;
    ArrayList<VDSGroup> clusters = context.clusterList;
    // $NON-NLS-1$
    setCommonName(StringFormat.format("%1$s-Local", host.getvds_name().replace('.', '-')));
    storage_pool candidate = null;
    // Check if current settings suitable for local setup (in case just SD creation failed - re-using the same
    // setup)
    boolean useCurrentSettings = false;
    if (host.getstorage_pool_id() != null) {
        storage_pool tempCandidate = context.hostDataCenter;
        if (IsLocalDataCenterEmpty(tempCandidate)) {
            candidate = tempCandidate;
            useCurrentSettings = true;
        } else {
            if (tempCandidate != null && tempCandidate.getstorage_pool_type() == StorageType.LOCALFS) {
                setMessage(ConstantsManager.getInstance().getConstants().noteLocalStorageAlreadyConfiguredForThisHostMsg() + " " + host.getstorage_pool_name() + " " + // $NON-NLS-1$ //$NON-NLS-2$
                ConstantsManager.getInstance().getConstants().withLocalStorageDomainMsg());
            }
        }
    }
    // Check if there is other DC suitable for re-use
    if (candidate == null) {
        for (storage_pool dataCenter : dataCenters) {
            // Need to check if the new DC is without host.
            if (IsLocalDataCenterEmpty(dataCenter) && context.localStorageHostByDataCenterMap.get(dataCenter) == null) {
                candidate = dataCenter;
                break;
            }
        }
    }
    ArrayList<String> names;
    // In case we found a suitable candidate for re-use:
    if (candidate != null) {
        getDataCenter().setDataCenterId(candidate.getId());
        getDataCenter().getName().setEntity(candidate.getname());
        getDataCenter().getDescription().setEntity(candidate.getdescription());
        Version version = candidate.getcompatibility_version();
        getDataCenter().getVersion().setSelectedItem(version);
        getCluster().getVersion().setSelectedItem(version);
        setCandidateDataCenter(candidate);
        // If we use current settings there is no need to create cluster.
        if (useCurrentSettings) {
            getCluster().setClusterId(host.getvds_group_id().getValue());
            getCluster().getName().setEntity(host.getvds_group_name());
            VDSGroup cluster = context.hostCluster;
            if (cluster != null) {
                getCluster().getDescription().setEntity(cluster.getdescription());
                ServerCpu cpu = new ServerCpu();
                cpu.setCpuName(cluster.getcpu_name());
                getCluster().getCPU().setSelectedItem(cpu);
            }
            setCandidateCluster(cluster);
        } else // Use different cluster
        {
            // Check the DC cluster list (for re-use)
            clusters = context.clusterListByDataCenterMap.get(candidate);
            // No clusters available - pick up new name.
            if (clusters == null || clusters.isEmpty()) {
                names = new ArrayList<String>();
                ArrayList<VDSGroup> listClusters = context.clusterList;
                for (VDSGroup cluster : listClusters) {
                    names.add(cluster.getname());
                }
                getCluster().getName().setEntity(AvailableName(names));
            } else {
                // Use the DC cluster.
                VDSGroup cluster = Linq.FirstOrDefault(clusters);
                getCluster().setClusterId(cluster.getId());
                getCluster().getName().setEntity(cluster.getname());
                getCluster().getDescription().setEntity(cluster.getdescription());
                cluster = Linq.FirstOrDefault(context.clusterList, new Linq.ClusterPredicate(getCluster().getClusterId().getValue()));
                if (cluster != null) {
                    ServerCpu cpu = new ServerCpu();
                    cpu.setCpuName(cluster.getcpu_name());
                    getCluster().getCPU().setSelectedItem(cpu);
                }
                setCandidateCluster(cluster);
            }
        }
    } else {
        // Didn't found DC to re-use, so we select new names.
        names = new ArrayList<String>();
        for (storage_pool dataCenter : dataCenters) {
            names.add(dataCenter.getname());
        }
        getDataCenter().getName().setEntity(AvailableName(names));
        // Choose a Data Center version corresponding to the host.
        if (!StringHelper.isNullOrEmpty(host.getsupported_cluster_levels())) {
            // The supported_cluster_levels are sorted.
            // $NON-NLS-1$
            String[] array = host.getsupported_cluster_levels().split("[,]", -1);
            Version maxVersion = null;
            for (int i = 0; i < array.length; i++) {
                Version vdsVersion = new Version(array[i]);
                for (Version version : (List<Version>) getDataCenter().getVersion().getItems()) {
                    if (version.equals(vdsVersion) && version.compareTo(maxVersion) > 0) {
                        maxVersion = version;
                    }
                }
            }
            if (maxVersion != null) {
                getDataCenter().getVersion().setSelectedItem(maxVersion);
                getCluster().getVersion().setSelectedItem(maxVersion);
            }
        }
        names = new ArrayList<String>();
        if (clusters == null) {
            clusters = context.clusterList;
        } else {
            for (VDSGroup cluster : clusters) {
                names.add(cluster.getname());
            }
        }
        getCluster().getName().setEntity(AvailableName(names));
    }
    // Choose default CPU name to match host.
    if (host.getCpuName() != null && getCluster().getCPU().getSelectedItem() != null) {
        getCluster().getCPU().setSelectedItem(Linq.FirstOrDefault((List<ServerCpu>) getCluster().getCPU().getItems(), new Linq.ServerCpuPredicate(host.getCpuName().getCpuName())));
    }
    // Always choose a available storage name.
    ArrayList<storage_domains> storages = context.storageList;
    names = new ArrayList<String>();
    for (storage_domains storageDomain : storages) {
        names.add(storageDomain.getstorage_name());
    }
    getFormattedStorageName().setEntity(AvailableName(names));
}
#method_after
private void SetDefaultNames8() {
    VDS host = context.host;
    ArrayList<storage_pool> dataCenters = context.dataCenterList;
    ArrayList<VDSGroup> clusters = context.clusterList;
    // $NON-NLS-1$
    setCommonName(StringFormat.format("%1$s-Local", host.getvds_name().replace('.', '-')));
    storage_pool candidate = null;
    // Check if current settings suitable for local setup (in case just SD creation failed - re-using the same
    // setup)
    boolean useCurrentSettings = false;
    if (host.getstorage_pool_id() != null) {
        storage_pool tempCandidate = context.hostDataCenter;
        if (IsLocalDataCenterEmpty(tempCandidate)) {
            candidate = tempCandidate;
            useCurrentSettings = true;
        } else {
            if (tempCandidate != null && tempCandidate.getstorage_pool_type() == StorageType.LOCALFS) {
                setMessage(ConstantsManager.getInstance().getConstants().noteLocalStorageAlreadyConfiguredForThisHostMsg() + " " + host.getstorage_pool_name() + " " + // $NON-NLS-1$ //$NON-NLS-2$
                ConstantsManager.getInstance().getConstants().withLocalStorageDomainMsg());
            }
        }
    }
    // Check if there is other DC suitable for re-use
    if (candidate == null) {
        for (storage_pool dataCenter : dataCenters) {
            // Need to check if the new DC is without host.
            if (IsLocalDataCenterEmpty(dataCenter) && context.localStorageHostByDataCenterMap.get(dataCenter) == null) {
                candidate = dataCenter;
                break;
            }
        }
    }
    ArrayList<String> names;
    // In case we found a suitable candidate for re-use:
    if (candidate != null) {
        getDataCenter().setDataCenterId(candidate.getId());
        getDataCenter().getName().setEntity(candidate.getname());
        getDataCenter().getDescription().setEntity(candidate.getdescription());
        Version version = candidate.getcompatibility_version();
        getDataCenter().getVersion().setSelectedItem(version);
        getCluster().getVersion().setSelectedItem(version);
        setCandidateDataCenter(candidate);
        // If we use current settings there is no need to create cluster.
        if (useCurrentSettings) {
            getCluster().setClusterId(host.getvds_group_id().getValue());
            getCluster().getName().setEntity(host.getvds_group_name());
            VDSGroup cluster = context.hostCluster;
            if (cluster != null) {
                getCluster().getDescription().setEntity(cluster.getdescription());
                ServerCpu cpu = new ServerCpu();
                cpu.setCpuName(cluster.getcpu_name());
                getCluster().getCPU().setSelectedItem(cpu);
            }
            setCandidateCluster(cluster);
        } else // Use different cluster
        {
            // Check the DC cluster list (for re-use)
            clusters = context.clusterListByDataCenterMap.get(candidate);
            // No clusters available - pick up new name.
            if (clusters == null || clusters.isEmpty()) {
                names = new ArrayList<String>();
                ArrayList<VDSGroup> listClusters = context.clusterList;
                for (VDSGroup cluster : listClusters) {
                    names.add(cluster.getname());
                }
                getCluster().getName().setEntity(AvailableName(names));
            } else {
                // Use the DC cluster.
                VDSGroup cluster = Linq.FirstOrDefault(clusters);
                getCluster().setClusterId(cluster.getId());
                getCluster().getName().setEntity(cluster.getname());
                getCluster().getDescription().setEntity(cluster.getdescription());
                cluster = Linq.FirstOrDefault(context.clusterList, new Linq.ClusterPredicate(getCluster().getClusterId().getValue()));
                if (cluster != null) {
                    ServerCpu cpu = new ServerCpu();
                    cpu.setCpuName(cluster.getcpu_name());
                    getCluster().getCPU().setSelectedItem(cpu);
                }
                setCandidateCluster(cluster);
            }
        }
    } else {
        // Didn't found DC to re-use, so we select new names.
        names = new ArrayList<String>();
        for (storage_pool dataCenter : dataCenters) {
            names.add(dataCenter.getname());
        }
        getDataCenter().getName().setEntity(AvailableName(names));
        // Choose a Data Center version corresponding to the host.
        if (!StringHelper.isNullOrEmpty(host.getsupported_cluster_levels())) {
            // The supported_cluster_levels are sorted.
            // $NON-NLS-1$
            String[] array = host.getsupported_cluster_levels().split("[,]", -1);
            Version maxVersion = null;
            for (int i = 0; i < array.length; i++) {
                Version vdsVersion = new Version(array[i]);
                for (Version version : (List<Version>) getDataCenter().getVersion().getItems()) {
                    if (version.equals(vdsVersion) && version.compareTo(maxVersion) > 0) {
                        maxVersion = version;
                    }
                }
            }
            if (maxVersion != null) {
                getDataCenter().getVersion().setSelectedItem(maxVersion);
                getCluster().getVersion().setSelectedItem(maxVersion);
            }
        }
        names = new ArrayList<String>();
        if (clusters == null) {
            clusters = context.clusterList;
        } else {
            for (VDSGroup cluster : clusters) {
                names.add(cluster.getname());
            }
        }
        getCluster().getName().setEntity(AvailableName(names));
    }
    // Choose default CPU name to match host.
    List<ServerCpu> serverCpus = (List<ServerCpu>) getCluster().getCPU().getItems();
    if (host.getCpuName() != null) {
        getCluster().getCPU().setSelectedItem(Linq.FirstOrDefault(serverCpus, new Linq.ServerCpuPredicate(host.getCpuName().getCpuName())));
    } else {
        getCluster().getCPU().setSelectedItem(serverCpus.isEmpty() ? null : serverCpus.get(0));
    }
    // Always choose a available storage name.
    ArrayList<storage_domains> storages = context.storageList;
    names = new ArrayList<String>();
    for (storage_domains storageDomain : storages) {
        names.add(storageDomain.getstorage_name());
    }
    getFormattedStorageName().setEntity(AvailableName(names));
}
#end_block

#method_before
@Override
protected void InitDetailModels() {
    super.InitDetailModels();
    ObservableCollection<EntityModel> list = new ObservableCollection<EntityModel>();
    list.add(new ClusterPolicyModel());
    list.add(new ClusterHostListModel());
    list.add(new ClusterVmListModel());
    list.add(new ClusterNetworkListModel());
    list.add(new PermissionListModel());
    setDetailModels(list);
}
#method_after
@Override
protected void InitDetailModels() {
    super.InitDetailModels();
    ObservableCollection<EntityModel> list = new ObservableCollection<EntityModel>();
    list.add(new ClusterPolicyModel());
    list.add(new ClusterNetworkListModel());
    list.add(new ClusterHostListModel());
    list.add(new ClusterVmListModel());
    list.add(new PermissionListModel());
    setDetailModels(list);
}
#end_block

#method_before
private List<Snapshot> prepareSnapshotConfigWithoutImage(Guid imageGroupToRemove) {
    List<Snapshot> result = new LinkedList<Snapshot>();
    List<DiskImage> snapshotDisks = getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove);
    for (DiskImage snapshotDisk : snapshotDisks) {
        NGuid vmSnapshotId = snapshotDisk.getvm_snapshot_id();
        if (vmSnapshotId != null && !Guid.Empty.equals(vmSnapshotId.getValue())) {
            Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(snapshotDisk.getvm_snapshot_id().getValue(), snapshotDisk.getImageId());
            if (updated != null) {
                result.add(updated);
            }
        }
    }
    return result;
}
#method_after
private List<Snapshot> prepareSnapshotConfigWithoutImage(Guid imageGroupToRemove) {
    List<Snapshot> result = new LinkedList<Snapshot>();
    List<DiskImage> snapshotDisks = getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove);
    for (DiskImage snapshotDisk : snapshotDisks) {
        NGuid vmSnapshotId = snapshotDisk.getvm_snapshot_id();
        if (vmSnapshotId != null && !Guid.Empty.equals(vmSnapshotId.getValue())) {
            Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(vmSnapshotId.getValue(), snapshotDisk.getImageId());
            if (updated != null) {
                result.add(updated);
            }
        }
    }
    return result;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VmStatic vm = getVm().getStaticData();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    switch(DbFacade.getInstance().getVmDynamicDAO().get(getParameters().getVmId()).getstatus()) {
        case Up:
        case Down:
        case ImageLocked:
            break;
        default:
            addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_ADD_INTERFACE_WHEN_VM_STATUS_NOT_UP_DOWN_LOCKED);
            return false;
    }
    List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getParameters().getVmId());
    if (!VmHandler.IsNotDuplicateInterfaceName(interfaces, getParameters().getInterface().getName(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getInterface().getVmTemplateId() != null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_TEMPLATE_CANNOT_BE_SET);
        return false;
    }
    // check that not exceeded PCI and IDE limit
    List<VmNetworkInterface> allInterfaces = new ArrayList<VmNetworkInterface>(interfaces);
    allInterfaces.add(getParameters().getInterface());
    List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getParameters().getVmId());
    if (!CheckPCIAndIDELimit(vm.getnum_of_monitors(), allInterfaces, allDisks, getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check that the number of interfaces does not exceed limit. Necessary
    // only for version 2.2.
    boolean limitNumOfNics = Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVm().getvds_group_compatibility_version().toString());
    if (limitNumOfNics) {
        boolean numOfNicsLegal = validateNumberOfNics(interfaces, getParameters().getInterface());
        if (!numOfNicsLegal) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            return false;
        }
    }
    // check that the exists in current cluster
    List<Network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(vm.getvds_group_id());
    Network interfaceNetwork = LinqUtils.firstOrNull(networks, new Predicate<Network>() {

        @Override
        public boolean eval(Network network) {
            return network.getname().equals(getParameters().getInterface().getNetworkName());
        }
    });
    if (interfaceNetwork == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER);
        return false;
    } else if (!interfaceNetwork.isVmNetwork()) {
        AddCustomValue("networks", interfaceNetwork.getname());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK);
        addCanDoActionMessage(String.format("$networks %1$s", interfaceNetwork.getname()));
        return false;
    }
    if (getParameters().getInterface().isActive()) {
        if (getVm().getstatus() == VMStatus.Up && !canPerformHotPlug()) {
            return false;
        }
    }
    // this must be the last check because it adds the mac address to the pool
    if (!StringUtils.isEmpty(getMacAddress())) {
        Regex re = new Regex(ValidationUtils.INVALID_NULLABLE_MAC_ADDRESS);
        if (re.IsMatch(getMacAddress())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INVALID_MAC_ADDRESS);
            return false;
        }
        Boolean allowDupMacs = Config.<Boolean>GetValue(ConfigValues.AllowDuplicateMacAddresses);
        if (!MacPoolManager.getInstance().AddMac(getMacAddress()) && !allowDupMacs) {
            // Free the mac address since canDoAction failed
            MacPoolManager.getInstance().freeMac(getMacAddress());
            addCanDoActionMessage(VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE);
            return false;
        }
    } else if (// check
    MacPoolManager.getInstance().getavailableMacsCount() <= 0) // if
    // we
    // have
    // mac
    // address
    // in
    // pool
    {
        addCanDoActionMessage(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES);
        return false;
    }
    return super.canDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    VmStatic vm = getVm().getStaticData();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    switch(DbFacade.getInstance().getVmDynamicDAO().get(getParameters().getVmId()).getstatus()) {
        case Up:
        case Down:
        case ImageLocked:
            break;
        default:
            addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_ADD_INTERFACE_WHEN_VM_STATUS_NOT_UP_DOWN_LOCKED);
            return false;
    }
    List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getParameters().getVmId());
    if (!VmHandler.IsNotDuplicateInterfaceName(interfaces, getParameters().getInterface().getName(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getInterface().getVmTemplateId() != null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_TEMPLATE_CANNOT_BE_SET);
        return false;
    }
    // check that not exceeded PCI and IDE limit
    List<VmNetworkInterface> allInterfaces = new ArrayList<VmNetworkInterface>(interfaces);
    allInterfaces.add(getParameters().getInterface());
    List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getParameters().getVmId());
    if (!CheckPCIAndIDELimit(vm.getnum_of_monitors(), allInterfaces, allDisks, getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check that the number of interfaces does not exceed limit. Necessary
    // only for version 2.2.
    boolean limitNumOfNics = Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVm().getvds_group_compatibility_version().toString());
    if (limitNumOfNics) {
        boolean numOfNicsLegal = validateNumberOfNics(interfaces, getParameters().getInterface());
        if (!numOfNicsLegal) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            return false;
        }
    }
    // check that the exists in current cluster
    List<Network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(vm.getvds_group_id());
    Network interfaceNetwork = LinqUtils.firstOrNull(networks, new Predicate<Network>() {

        @Override
        public boolean eval(Network network) {
            return network.getname().equals(getParameters().getInterface().getNetworkName());
        }
    });
    if (interfaceNetwork == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER);
        return false;
    } else if (!interfaceNetwork.isVmNetwork()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK);
        addCanDoActionMessage(String.format("$networks %1$s", interfaceNetwork.getname()));
        return false;
    }
    if (getParameters().getInterface().isActive()) {
        if (getVm().getstatus() == VMStatus.Up && !canPerformHotPlug()) {
            return false;
        }
    }
    // this must be the last check because it adds the mac address to the pool
    if (!StringUtils.isEmpty(getMacAddress())) {
        Regex re = new Regex(ValidationUtils.INVALID_NULLABLE_MAC_ADDRESS);
        if (re.IsMatch(getMacAddress())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INVALID_MAC_ADDRESS);
            return false;
        }
        Boolean allowDupMacs = Config.<Boolean>GetValue(ConfigValues.AllowDuplicateMacAddresses);
        if (!MacPoolManager.getInstance().AddMac(getMacAddress()) && !allowDupMacs) {
            // Free the mac address since canDoAction failed
            MacPoolManager.getInstance().freeMac(getMacAddress());
            addCanDoActionMessage(VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE);
            return false;
        }
    } else if (// check
    MacPoolManager.getInstance().getavailableMacsCount() <= 0) // if
    // we
    // have
    // mac
    // address
    // in
    // pool
    {
        addCanDoActionMessage(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES);
        return false;
    }
    return super.canDoAction();
}
#end_block

#method_before
private HttpURLConnection createURLConnection() throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, KeyManagementException {
    boolean secured = servletURL.startsWith("https");
    URL url = new URL(servletURL);
    HttpURLConnection servletConnection;
    if (secured) {
        if (trustStorePassword == null || trustStorePath == null) {
            logger.error("The Supplied URL is secured, however no trust store path or password were supplied.");
            return null;
        }
        HttpsURLConnection securedConnection = (HttpsURLConnection) url.openConnection();
        KeyStore trustStore = KeyStore.getInstance(trustStoreType);
        trustStore.load(new FileInputStream(trustStorePath), trustStorePassword.toCharArray());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);
        SSLContext ctx = SSLContext.getInstance(sslProtocol);
        if (sslIgnoreCertErrors) {
            logger.debug("sslIgnoreCertErrors mode");
            ctx.init(null, new TrustManager[] { new X509TrustManager() {

                @Override
                public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
                }

                @Override
                public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
                }

                @Override
                public X509Certificate[] getAcceptedIssuers() {
                    return new X509Certificate[0];
                }
            } }, null);
        } else {
            ctx.init(null, trustManagerFactory.getTrustManagers(), null);
        }
        securedConnection.setSSLSocketFactory(ctx.getSocketFactory());
        if (sslIgnoreHostVerification) {
            logger.debug("sslIgnoreHostVerification mode");
            securedConnection.setHostnameVerifier(IgnoredHostnameVerifier);
        }
        servletConnection = securedConnection;
    } else {
        servletConnection = (HttpURLConnection) url.openConnection();
    }
    servletConnection.setRequestMethod("POST");
    servletConnection.setDoOutput(true);
    servletConnection.setDoInput(true);
    servletConnection.setReadTimeout(10000);
    servletConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    return servletConnection;
}
#method_after
private HttpURLConnection createURLConnection() throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException, KeyManagementException {
    boolean secured = servletURL.startsWith("https");
    URL url = new URL(servletURL);
    HttpURLConnection servletConnection;
    if (secured) {
        if (trustStorePassword == null || trustStorePath == null) {
            logger.error("The Supplied URL is secured, however no trust store path or password were supplied.");
            return null;
        }
        HttpsURLConnection securedConnection = (HttpsURLConnection) url.openConnection();
        KeyStore trustStore = KeyStore.getInstance(trustStoreType);
        trustStore.load(new FileInputStream(trustStorePath), trustStorePassword.toCharArray());
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(trustStore);
        SSLContext ctx = SSLContext.getInstance(sslProtocol);
        initSslcontext(ctx, trustManagerFactory);
        securedConnection.setSSLSocketFactory(ctx.getSocketFactory());
        if (sslIgnoreHostVerification) {
            logger.debug("sslIgnoreHostVerification mode");
            securedConnection.setHostnameVerifier(IgnoredHostnameVerifier);
        }
        servletConnection = securedConnection;
    } else {
        servletConnection = (HttpURLConnection) url.openConnection();
    }
    servletConnection.setRequestMethod("POST");
    servletConnection.setDoOutput(true);
    servletConnection.setDoInput(true);
    servletConnection.setReadTimeout(10000);
    servletConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    return servletConnection;
}
#end_block

#method_before
public static void GetInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final RefObject<String> defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces:
        // ifacesOptions.RemoveAll(
        // delegate(Interface i)
        // {
        // return InterfaceHasChildVlanInterfaces(vdsID, i);
        // });
        ArrayList<GetAllChildVlanInterfacesQueryParameters> parametersList = new ArrayList<GetAllChildVlanInterfacesQueryParameters>();
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        GetAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    ArrayList<VdsNetworkInterface> childVlanInterfaces = new ArrayList<VdsNetworkInterface>();
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // ifacesOptions.AddRange(interfaceList.Where(a => a.bond_name == originalInterface.name).ToList());
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.argvalue = originalInterface.getName();
                asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        GetVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    InterfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // ifacesOptions.AddRange(interfaceList.Where(a => a.bond_name == vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.argvalue = vlanParent.getName();
                            asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                        }
                    }));
                } else {
                    // the vlanParent should already be in ifacesOptions
                    // (since it has no network_name or bond_name).
                    defaultInterfaceName.argvalue = vlanParent.getName();
                    asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                }
            }
        }));
    }
}
#method_after
public static void GetInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        ArrayList<GetAllChildVlanInterfacesQueryParameters> parametersList = new ArrayList<GetAllChildVlanInterfacesQueryParameters>();
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        GetAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    ArrayList<VdsNetworkInterface> childVlanInterfaces = new ArrayList<VdsNetworkInterface>();
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        GetVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    InterfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // ifacesOptions.AddRange(interfaceList.Where(a => a.bond_name == vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                        }
                    }));
                } else {
                    // the vlanParent should already be in ifacesOptions
                    // (since it has no network_name or bond_name).
                    defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                }
            }
        }));
    }
}
#end_block

#method_before
public void EditManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            final VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            final HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.FindNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            final RefObject<String> tempRef_defaultInterfaceName = new RefObject<String>(null);
            AsyncDataProvider.GetInterfaceOptionsForEditNetwork(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object returnValue) {
                    ArrayList<VdsNetworkInterface> interfaces = (ArrayList<VdsNetworkInterface>) returnValue;
                    String defaultInterfaceName = tempRef_defaultInterfaceName.argvalue;
                    managementModel.getInterface().setItems(interfaces);
                    managementModel.getInterface().setSelectedItem(Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(interfaces), defaultInterfaceName));
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                        managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
                    }
                    managementModel.getCheckConnectivity().setIsAvailable(true);
                    managementModel.getCheckConnectivity().setIsChangable(true);
                    // currently, always should be
                    managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
                    // true
                    managementModel.getBondingOptions().setIsAvailable(false);
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getBondingOptions().setIsAvailable(true);
                        Map.Entry<String, EntityModel> defaultItem = null;
                        RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                        ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                        defaultItem = tempRef_defaultItem.argvalue;
                        Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                        boolean containsSelectBondingOpt = false;
                        managementModel.getBondingOptions().setItems(list);
                        for (int i = 0; i < list.size(); i++) {
                            if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                                selectBondingOpt = list.get(i);
                                containsSelectBondingOpt = true;
                                break;
                            }
                        }
                        if (containsSelectBondingOpt == false) {
                            if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                                selectBondingOpt = defaultItem;
                            } else {
                                selectBondingOpt = list.get(list.size() - 1);
                                EntityModel entityModel = selectBondingOpt.getValue();
                                entityModel.setEntity(item.getBondOptions());
                            }
                        }
                        managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
                    }
                    // $NON-NLS-1$
                    UICommand tempVar = new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
                    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
                    tempVar.setIsDefault(true);
                    managementModel.getCommands().add(tempVar);
                    // $NON-NLS-1$
                    UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                    tempVar2.setIsCancel(true);
                    managementModel.getCommands().add(tempVar2);
                }
            }), getOriginalItems(), item, networkToEdit, getEntity().getId(), tempRef_defaultInterfaceName);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void EditManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            final HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            final VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            final HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.FindNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            final StringBuilder tmpDefaultInterfaceName = new StringBuilder();
            AsyncDataProvider.GetInterfaceOptionsForEditNetwork(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object returnValue) {
                    ArrayList<VdsNetworkInterface> interfaces = (ArrayList<VdsNetworkInterface>) returnValue;
                    String defaultInterfaceName = tmpDefaultInterfaceName.toString();
                    managementModel.getInterface().setItems(interfaces);
                    managementModel.getInterface().setSelectedItem(Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(interfaces), defaultInterfaceName));
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                        managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
                    }
                    managementModel.getCheckConnectivity().setIsAvailable(true);
                    managementModel.getCheckConnectivity().setIsChangable(true);
                    // currently, always should be
                    managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
                    // true
                    managementModel.getBondingOptions().setIsAvailable(false);
                    if (item.getBonded() != null && item.getBonded().equals(true)) {
                        managementModel.getBondingOptions().setIsAvailable(true);
                        Map.Entry<String, EntityModel> defaultItem = null;
                        RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                        ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                        defaultItem = tempRef_defaultItem.argvalue;
                        Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                        boolean containsSelectBondingOpt = false;
                        managementModel.getBondingOptions().setItems(list);
                        for (int i = 0; i < list.size(); i++) {
                            if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                                selectBondingOpt = list.get(i);
                                containsSelectBondingOpt = true;
                                break;
                            }
                        }
                        if (containsSelectBondingOpt == false) {
                            if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                                selectBondingOpt = defaultItem;
                            } else {
                                selectBondingOpt = list.get(list.size() - 1);
                                EntityModel entityModel = selectBondingOpt.getValue();
                                entityModel.setEntity(item.getBondOptions());
                            }
                        }
                        managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
                    }
                    // $NON-NLS-1$
                    UICommand tempVar = new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
                    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
                    tempVar.setIsDefault(true);
                    managementModel.getCommands().add(tempVar);
                    // $NON-NLS-1$
                    UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                    tempVar2.setIsCancel(true);
                    managementModel.getCommands().add(tempVar2);
                }
            }), getOriginalItems(), item, networkToEdit, getEntity().getId(), tmpDefaultInterfaceName);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
@Override
protected void templateInited() {
    super.templateInited();
    setupWindowModelFrom(pool.getStaticData());
}
#method_after
protected void templateInited() {
    super.templateInited();
    setupWindowModelFrom(pool.getStaticData());
}
#end_block

#method_before
private void OnCloneVM() {
    UnitVmModel model = (UnitVmModel) getWindow();
    CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        Cancel();
        return;
    }
    if (!model.Validate()) {
        return;
    }
    setcurrentVm(behavior.getVm());
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setvm_type(model.getVmType());
    getcurrentVm().setvmt_guid(template.getId());
    getcurrentVm().setvm_name(name);
    getcurrentVm().setvm_os((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setnum_of_monitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setvm_description((String) model.getDescription().getEntity());
    getcurrentVm().setvm_domain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setvm_mem_size_mb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setvds_group_id(newClusterID);
    getcurrentVm().settime_zone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setnum_of_sockets((Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setcpu_per_socket((Integer) model.getTotalCPUCores().getEntity() / (Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setusb_policy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setis_auto_suspend(false);
    getcurrentVm().setis_stateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setdefault_boot_sequence(model.getBootSequence());
    getcurrentVm().setiso_path(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setauto_startup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setinitrd_url((String) model.getInitrd_path().getEntity());
    getcurrentVm().setkernel_url((String) model.getKernel_path().getEntity());
    getcurrentVm().setkernel_params((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties((String) model.getCustomProperties().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setdefault_display_type((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setpriority((Integer) prioritySelectedItem.getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    getcurrentVm().setdedicated_vm_for_vds((Boolean) model.getIsAutoAssign().getEntity() ? null : defaultHost.getId());
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
    }
    getcurrentVm().setDiskMap(behavior.getVm().getDiskMap());
    HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
    storage_domains storageDomain = ((storage_domains) model.getDisksAllocationModel().getStorageDomain().getSelectedItem());
    ArrayList<DiskImage> diskInfoList = CreateDiskInfoList();
    if ((Boolean) model.getDisksAllocationModel().getIsSingleStorageDomain().getEntity()) {
        for (Guid key : imageToDestinationDomainMap.keySet()) {
            ArrayList<Guid> storageIdList = new ArrayList<Guid>();
            storageIdList.add(storageDomain.getId());
            DiskImage diskImage = new DiskImage();
            diskImage.setstorage_ids(storageIdList);
            imageToDestinationDomainMap.put(key, diskImage);
        }
    }
    AddVmFromSnapshotParameters parameters = new AddVmFromSnapshotParameters(getcurrentVm().getStaticData(), snapshot.getId());
    parameters.setDiskInfoDestinationMap(imageToDestinationDomainMap);
    setupAddVmFromSnapshotParameters(parameters);
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVmFromSnapshot, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) result.getState();
            vmSnapshotListModel.getWindow().StopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmSnapshotListModel.Cancel();
                vmSnapshotListModel.UpdateActionAvailability();
            }
        }
    }, this);
}
#method_after
private void OnCloneVM() {
    UnitVmModel model = (UnitVmModel) getWindow();
    CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        Cancel();
        return;
    }
    if (!model.Validate()) {
        return;
    }
    setcurrentVm(behavior.getVm());
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setvm_type(model.getVmType());
    getcurrentVm().setvmt_guid(template.getId());
    getcurrentVm().setvm_name(name);
    getcurrentVm().setvm_os((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setnum_of_monitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setvm_description((String) model.getDescription().getEntity());
    getcurrentVm().setvm_domain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setvm_mem_size_mb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setvds_group_id(newClusterID);
    getcurrentVm().settime_zone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setnum_of_sockets((Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setcpu_per_socket((Integer) model.getTotalCPUCores().getEntity() / (Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setusb_policy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setis_auto_suspend(false);
    getcurrentVm().setis_stateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setdefault_boot_sequence(model.getBootSequence());
    getcurrentVm().setiso_path(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setauto_startup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setinitrd_url((String) model.getInitrd_path().getEntity());
    getcurrentVm().setkernel_url((String) model.getKernel_path().getEntity());
    getcurrentVm().setkernel_params((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties((String) model.getCustomProperties().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setdefault_display_type((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setpriority((Integer) prioritySelectedItem.getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    getcurrentVm().setdedicated_vm_for_vds((Boolean) model.getIsAutoAssign().getEntity() ? null : defaultHost.getId());
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
    }
    getcurrentVm().setDiskMap(behavior.getVm().getDiskMap());
    HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
    storage_domains storageDomain = ((storage_domains) model.getDisksAllocationModel().getStorageDomain().getSelectedItem());
    ArrayList<DiskImage> diskInfoList = CreateDiskInfoList();
    if ((Boolean) model.getDisksAllocationModel().getIsSingleStorageDomain().getEntity()) {
        for (Guid key : imageToDestinationDomainMap.keySet()) {
            ArrayList<Guid> storageIdList = new ArrayList<Guid>();
            storageIdList.add(storageDomain.getId());
            DiskImage diskImage = new DiskImage();
            diskImage.setstorage_ids(storageIdList);
            imageToDestinationDomainMap.put(key, diskImage);
        }
    }
    AddVmFromSnapshotParameters parameters = new AddVmFromSnapshotParameters(getcurrentVm().getStaticData(), snapshot.getId());
    parameters.setDiskInfoDestinationMap(imageToDestinationDomainMap);
    setupAddVmFromSnapshotParameters(parameters);
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVmFromSnapshot, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) result.getState();
            vmSnapshotListModel.getWindow().StopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmSnapshotListModel.Cancel();
                vmSnapshotListModel.UpdateActionAvailability();
            }
        }
    }, this);
}
#end_block

#method_before
@Override
protected void EndSuccessfully() {
    EndActionOnDisks();
    if (getVm() != null) {
        tryBackToVmConfigurationSnapshot();
    } else {
        setCommandShouldBeLogged(false);
        log.warn("VmCommand::EndVmCommand: Vm is null - not performing EndAction on Vm");
    }
    setSucceeded(true);
}
#method_after
@Override
protected void EndSuccessfully() {
    EndActionOnDisks();
    if (getVm() != null) {
        VmHandler.unlockVm(getVm().getDynamicData(), getCompensationContext());
        restoreVmConfigFromSnapshot();
    } else {
        setCommandShouldBeLogged(false);
        log.warn("VmCommand::EndVmCommand: Vm is null - not performing EndAction on Vm");
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void ExecuteVmCommand() {
    final Guid newActiveSnapshotId = Guid.NewGuid();
    Guid previousActiveSnapshotId = TransactionSupport.executeInNewTransaction(new TransactionMethod<Guid>() {

        @Override
        public Guid runInTransaction() {
            Snapshot previousActiveSnapshot = getSnapshotDao().get(getVmId(), SnapshotType.ACTIVE);
            getCompensationContext().snapshotEntity(previousActiveSnapshot);
            Guid previousActiveSnapshotId = previousActiveSnapshot.getId();
            getSnapshotDao().remove(previousActiveSnapshotId);
            snapshotsManager.addSnapshot(previousActiveSnapshotId, "Active VM before the preview", SnapshotType.PREVIEW, getVm(), getCompensationContext());
            snapshotsManager.addActiveSnapshot(newActiveSnapshotId, getVm(), getCompensationContext());
            snapshotsManager.removeAllIllegalDisks(previousActiveSnapshotId);
            getCompensationContext().stateChanged();
            return previousActiveSnapshotId;
        }
    });
    final List<DiskImage> images = DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForVmSnapshot(getParameters().getDstSnapshotId());
    if (images.size() > 0) {
        VmHandler.LockVm(getVm().getDynamicData(), getCompensationContext());
        freeLock();
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                for (DiskImage image : images) {
                    ImagesContainterParametersBase tempVar = new ImagesContainterParametersBase(image.getImageId());
                    tempVar.setParentCommand(VdcActionType.TryBackToAllSnapshotsOfVm);
                    tempVar.setVmSnapshotId(newActiveSnapshotId);
                    tempVar.setEntityId(getParameters().getEntityId());
                    tempVar.setParentParemeters(getParameters());
                    ImagesContainterParametersBase p = tempVar;
                    VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.TryBackToSnapshot, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
                    getParameters().getImagesParameters().add(p);
                    if (vdcReturnValue.getSucceeded()) {
                        getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
                    } else if (vdcReturnValue.getFault() != null) {
                        // if we have a fault, forward it to the user
                        throw new VdcBLLException(vdcReturnValue.getFault().getError(), vdcReturnValue.getFault().getMessage());
                    } else {
                        log.error("Cannot create snapshot");
                        throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
                    }
                }
                return null;
            }
        });
    } else {
        freeLock();
        tryBackToVmConfigurationSnapshot();
    }
    setSucceeded(true);
}
#method_after
@Override
protected void ExecuteVmCommand() {
    final Guid newActiveSnapshotId = Guid.NewGuid();
    Guid previousActiveSnapshotId = TransactionSupport.executeInNewTransaction(new TransactionMethod<Guid>() {

        @Override
        public Guid runInTransaction() {
            Snapshot previousActiveSnapshot = getSnapshotDao().get(getVmId(), SnapshotType.ACTIVE);
            getCompensationContext().snapshotEntity(previousActiveSnapshot);
            Guid previousActiveSnapshotId = previousActiveSnapshot.getId();
            getSnapshotDao().remove(previousActiveSnapshotId);
            snapshotsManager.addSnapshot(previousActiveSnapshotId, "Active VM before the preview", SnapshotType.PREVIEW, getVm(), getCompensationContext());
            snapshotsManager.addActiveSnapshot(newActiveSnapshotId, getVm(), getCompensationContext());
            snapshotsManager.removeAllIllegalDisks(previousActiveSnapshotId);
            getCompensationContext().stateChanged();
            return previousActiveSnapshotId;
        }
    });
    final List<DiskImage> images = DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForVmSnapshot(getParameters().getDstSnapshotId());
    if (images.size() > 0) {
        VmHandler.LockVm(getVm().getDynamicData(), getCompensationContext());
        freeLock();
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                for (DiskImage image : images) {
                    ImagesContainterParametersBase tempVar = new ImagesContainterParametersBase(image.getImageId());
                    tempVar.setParentCommand(VdcActionType.TryBackToAllSnapshotsOfVm);
                    tempVar.setVmSnapshotId(newActiveSnapshotId);
                    tempVar.setEntityId(getParameters().getEntityId());
                    tempVar.setParentParemeters(getParameters());
                    ImagesContainterParametersBase p = tempVar;
                    VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.TryBackToSnapshot, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
                    getParameters().getImagesParameters().add(p);
                    if (vdcReturnValue.getSucceeded()) {
                        getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
                    } else if (vdcReturnValue.getFault() != null) {
                        // if we have a fault, forward it to the user
                        throw new VdcBLLException(vdcReturnValue.getFault().getError(), vdcReturnValue.getFault().getMessage());
                    } else {
                        log.error("Cannot create snapshot");
                        throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
                    }
                }
                return null;
            }
        });
    } else {
        restoreVmConfigFromSnapshot();
        freeLock();
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    initializeObjectState();
    // Since 'VmId' is overriden, 'Vm' should be retrieved manually.
    getVmDAO().get(getVmId());
    getReturnValue().setCanDoAction(validate(validateVmNotDuringSnapshot()));
    if (!validateSnapshotExists()) {
        getReturnValue().setCanDoAction(false);
    }
    if (!validateImages()) {
        getReturnValue().setCanDoAction(false);
    }
    // check that we are not deleting the template
    if (!validateImageNotInTemplate()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE);
        getReturnValue().setCanDoAction(false);
    }
    // check that we are not deleting the vm working snapshot
    if (!validateImageNotActive()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_ACTIVE_IMAGE);
        getReturnValue().setCanDoAction(false);
    }
    if (!getReturnValue().getCanDoAction()) {
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__SNAPSHOT);
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    }
    return getReturnValue().getCanDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    initializeObjectState();
    if (!validateVmNotDuringSnapshot()) {
        handleCanDoActionFailure();
        return false;
    }
    if (!validateSnapshotExists()) {
        handleCanDoActionFailure();
        return false;
    }
    if (!validateImagesAndVMStates()) {
        handleCanDoActionFailure();
        return false;
    }
    if (hasImages()) {
        // check that we are not deleting the template
        if (!validateImageNotInTemplate()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE);
            handleCanDoActionFailure();
            return false;
        }
        // check that we are not deleting the vm working snapshot
        if (!validateImageNotActive()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_ACTIVE_IMAGE);
            handleCanDoActionFailure();
            return false;
        }
    }
    getReturnValue().setCanDoAction(true);
    return true;
}
#end_block

#method_before
protected ValidationResult validateVmNotDuringSnapshot() {
    return createSnapshotValidator().vmNotDuringSnapshot(getVmId());
}
#method_after
protected boolean validateVmNotDuringSnapshot() {
    return validate(createSnapshotValidator().vmNotDuringSnapshot(getVmId()));
}
#end_block

#method_before
protected boolean validateImageNotInTemplate() {
    if (!hasImages()) {
        return true;
    }
    return getVmTemplateDAO().get(getRepresentativeSourceImageId()) == null;
}
#method_after
protected boolean validateImageNotInTemplate() {
    return getVmTemplateDAO().get(getRepresentativeSourceImageId()) == null;
}
#end_block

#method_before
protected boolean validateImageNotActive() {
    if (!hasImages()) {
        return true;
    }
    return getDiskImageDAO().get(getRepresentativeSourceImageId()) == null;
}
#method_after
protected boolean validateImageNotActive() {
    return getDiskImageDAO().get(getRepresentativeSourceImageId()) == null;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    initializeObjectState();
    // Since 'VmId' is overriden, 'Vm' should be retrieved manually.
    getVmDAO().get(getVmId());
    getReturnValue().setCanDoAction(validate(validateVmNotDuringSnapshot()));
    if (!validateSnapshotExists()) {
        getReturnValue().setCanDoAction(false);
    }
    if (!validateImages()) {
        getReturnValue().setCanDoAction(false);
    }
    // check that we are not deleting the template
    if (!validateImageNotInTemplate()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE);
        getReturnValue().setCanDoAction(false);
    }
    // check that we are not deleting the vm working snapshot
    if (!validateImageNotActive()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_ACTIVE_IMAGE);
        getReturnValue().setCanDoAction(false);
    }
    if (!getReturnValue().getCanDoAction()) {
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__SNAPSHOT);
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    }
    return getReturnValue().getCanDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    initializeObjectState();
    if (!validateVmNotDuringSnapshot()) {
        handleCanDoActionFailure();
        return false;
    }
    if (!validateSnapshotExists()) {
        handleCanDoActionFailure();
        return false;
    }
    if (!validateImages()) {
        handleCanDoActionFailure();
        return false;
    }
    // check that we are not deleting the template
    if (!validateImageNotInTemplate()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE);
        handleCanDoActionFailure();
        return false;
    }
    // check that we are not deleting the vm working snapshot
    if (!validateImageNotActive()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_ACTIVE_IMAGE);
        handleCanDoActionFailure();
        return false;
    }
    getReturnValue().setCanDoAction(true);
    return true;
}
#end_block

#method_before
protected ValidationResult validateVmNotDuringSnapshot() {
    return createSnapshotValidator().vmNotDuringSnapshot(getVmId());
}
#method_after
protected boolean validateVmNotDuringSnapshot() {
    return validate(createSnapshotValidator().vmNotDuringSnapshot(getVmId()));
}
#end_block

#method_before
protected boolean HandleHibernatedVm(VdcActionType parentCommand, boolean startPollingTasks) {
    // this is temp code until it will be implemented in SPM
    String[] strings = getVm().gethibernation_vol_handle().split(",");
    List<Guid> guids = new LinkedList<Guid>();
    for (String string : strings) {
        guids.add(new Guid(string));
    }
    Guid[] imagesList = guids.toArray(new Guid[0]);
    if (imagesList.length == 6) {
        // get all vm disks in order to check post zero - if one of the
        // disks is marked with wipe_after_delete
        boolean postZero = LinqUtils.filter(getDiskDAO().getAllForVm(getVm().getId()), new Predicate<Disk>() {

            @Override
            public boolean eval(Disk disk) {
                return disk.isWipeAfterDelete();
            }
        }).size() > 0;
        // delete first image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue1 = runVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[2], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue1.getSucceeded()) {
            return false;
        }
        Guid guid1 = CreateTask(vdsRetValue1.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid1);
        // delete second image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue2 = runVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[4], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue2.getSucceeded()) {
            if (startPollingTasks) {
                UpdateTasksWithActionParameters();
                AsyncTaskManager.getInstance().StartPollingTask(guid1);
            }
            return false;
        }
        Guid guid2 = CreateTask(vdsRetValue2.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid2);
        if (startPollingTasks) {
            UpdateTasksWithActionParameters();
            AsyncTaskManager.getInstance().StartPollingTask(guid1);
            AsyncTaskManager.getInstance().StartPollingTask(guid2);
        }
    }
    return true;
}
#method_after
protected boolean HandleHibernatedVm(VdcActionType parentCommand, boolean startPollingTasks) {
    // this is temp code until it will be implemented in SPM
    String[] strings = getVm().gethibernation_vol_handle().split(",");
    List<Guid> guids = new LinkedList<Guid>();
    for (String string : strings) {
        guids.add(new Guid(string));
    }
    Guid[] imagesList = guids.toArray(new Guid[0]);
    if (imagesList.length == 6) {
        // get all vm disks in order to check post zero - if one of the
        // disks is marked with wipe_after_delete
        boolean postZero = LinqUtils.filter(getDiskDAO().getAllForVm(getVm().getId()), new Predicate<Disk>() {

            @Override
            public boolean eval(Disk disk) {
                return disk.isWipeAfterDelete();
            }
        }).size() > 0;
        // delete first image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue1 = runVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[2], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue1.getSucceeded()) {
            return false;
        }
        Guid guid1 = CreateTask(vdsRetValue1.getCreationInfo(), parentCommand, VdcObjectType.Storage, imagesList[0]);
        getTaskIdList().add(guid1);
        // delete second image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue2 = runVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[4], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue2.getSucceeded()) {
            if (startPollingTasks) {
                UpdateTasksWithActionParameters();
                AsyncTaskManager.getInstance().StartPollingTask(guid1);
            }
            return false;
        }
        Guid guid2 = CreateTask(vdsRetValue2.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid2);
        if (startPollingTasks) {
            UpdateTasksWithActionParameters();
            AsyncTaskManager.getInstance().StartPollingTask(guid1);
            AsyncTaskManager.getInstance().StartPollingTask(guid2);
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected Guid ConcreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new async_tasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), getParameters(), asyncTaskCreationInfo.getStepId(), getCommandId()));
    p.setEntityId(getParameters().getEntityId());
    Guid taskID = AsyncTaskManager.getInstance().CreateTask(AsyncTaskType.deleteImage, p);
    return taskID;
}
#method_after
@Override
protected SPMAsyncTask ConcreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new async_tasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), getParameters(), asyncTaskCreationInfo.getStepId(), getCommandId()));
    p.setEntityId(getParameters().getEntityId());
    return AsyncTaskManager.getInstance().CreateTask(AsyncTaskType.deleteImage, p);
}
#end_block

#method_before
protected void initStorageDomainId() {
    if (GuidUtils.isEmpty(getParameters().getStorageDomainId()) && hasDiskImage()) {
        setStorageDomainId(getDiskImage().getstorage_ids().get(0));
    }
}
#method_after
protected void initStorageDomainId() {
    if ((getParameters().getStorageDomainId() == null || Guid.Empty.equals(getParameters().getStorageDomainId())) && getDiskImage() != null) {
        setStorageDomainId(getDiskImage().getstorage_ids().get(0));
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (hasDiskImage()) {
        VDSReturnValue vdsReturnValue = performImageVdsmOperation();
        getReturnValue().getInternalTaskIdList().add(CreateTask(vdsReturnValue.getCreationInfo(), getParameters().getParentCommand()));
        if (getParameters().getParentCommand() != VdcActionType.RemoveVmFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveVmTemplateFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveDisk) {
            removeImageFromDB();
        }
    } else {
        log.warn("RemoveImageCommand::ExecuteCommand: DiskImage is null, nothing to remove");
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    if (getDiskImage() != null) {
        VDSReturnValue vdsReturnValue = performImageVdsmOperation();
        getReturnValue().getInternalTaskIdList().add(CreateTask(vdsReturnValue.getCreationInfo(), getParameters().getParentCommand(), VdcObjectType.Storage, getParameters().getStorageDomainId()));
        if (getParameters().getParentCommand() != VdcActionType.RemoveVmFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveVmTemplateFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveDisk) {
            removeImageFromDB();
        }
    } else {
        log.warn("DiskImage is null, nothing to remove");
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected Guid ConcreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new async_tasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), getParametersForTask(parentCommand, getParameters()), asyncTaskCreationInfo.getStepId(), getCommandId()));
    p.setEntityId(getParameters().getEntityId());
    Guid ret = AsyncTaskManager.getInstance().CreateTask(AsyncTaskType.deleteImage, p);
    return ret;
}
#method_after
@Override
protected SPMAsyncTask ConcreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new async_tasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), getParametersForTask(parentCommand, getParameters()), asyncTaskCreationInfo.getStepId(), getCommandId()));
    p.setEntityId(getParameters().getEntityId());
    return AsyncTaskManager.getInstance().CreateTask(AsyncTaskType.deleteImage, p);
}
#end_block

#method_before
private void removeImageFromDB() {
    TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            DiskImage diskImage = getDiskImage();
            if (diskImage != null) {
                getDiskImageDynamicDAO().remove(diskImage.getImageId());
                Guid imageTemplate = diskImage.getit_guid();
                Guid currentGuid = diskImage.getImageId();
                // the storage).
                while (!imageTemplate.equals(currentGuid) && !currentGuid.equals(Guid.Empty)) {
                    RemoveChildren(currentGuid);
                    DiskImage image = getDiskImageDao().getSnapshotById(currentGuid);
                    if (image != null) {
                        RemoveSnapshot(image);
                        removeImageFromSnapshotConfiguration(image.getvm_snapshot_id().getValue(), currentGuid);
                        currentGuid = image.getParentId();
                    } else {
                        currentGuid = Guid.Empty;
                        log.warnFormat("RemoveImageCommand::RemoveImageFromDB: 'image' (snapshot of image '{0}') is null, cannot remove it.", diskImage.getImageId());
                    }
                }
                getBaseDiskDao().remove(diskImage.getId());
                getVmDeviceDAO().remove(new VmDeviceId(diskImage.getId(), null));
            } else {
                log.warn("RemoveImageCommand::RemoveImageFromDB: DiskImage is null, nothing to remove.");
            }
            return null;
        }
    });
}
#method_after
private void removeImageFromDB() {
    final DiskImage diskImage = getDiskImage();
    final List<Snapshot> updatedSnapshots = prepareSnapshotConfigWithoutImage(diskImage.getId());
    TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            getDiskImageDynamicDAO().remove(diskImage.getImageId());
            Guid imageTemplate = diskImage.getit_guid();
            Guid currentGuid = diskImage.getImageId();
            // the storage).
            while (!currentGuid.equals(imageTemplate) && !currentGuid.equals(Guid.Empty)) {
                RemoveChildren(currentGuid);
                DiskImage image = getDiskImageDao().getSnapshotById(currentGuid);
                if (image != null) {
                    RemoveSnapshot(image);
                    currentGuid = image.getParentId();
                } else {
                    currentGuid = Guid.Empty;
                    log.warnFormat("'image' (snapshot of image '{0}') is null, cannot remove it.", diskImage.getImageId());
                }
            }
            getBaseDiskDao().remove(diskImage.getId());
            getVmDeviceDAO().remove(new VmDeviceId(diskImage.getId(), null));
            for (Snapshot s : updatedSnapshots) {
                getSnapshotDao().update(s);
            }
            return null;
        }
    });
}
#end_block

#method_before
@SuppressWarnings("serial")
@Before
public void setUp() {
    RemoveImageParameters params = new RemoveImageParameters(Guid.NewGuid());
    cmd = spy(new RemoveImageCommand<RemoveImageParameters>(params) {

        @Override
        protected void initStoragePoolId() {
        // Stub implementation for testing
        }

        @Override
        protected void initStoragePoolByDiskImage() {
        // Stub implementation for testing
        }

        @Override
        protected void initStorageDomainId() {
        // Stub implementation for testing
        }

        @Override
        protected void initDiskImage() {
        // Stub implementation for testing
        }
    });
    doReturn(snapshotDAO).when(cmd).getSnapshotDAO();
}
#method_after
@SuppressWarnings("serial")
@Before
public void setUp() {
    RemoveImageParameters params = new RemoveImageParameters(Guid.NewGuid());
    cmd = spy(new RemoveImageCommand<RemoveImageParameters>(params) {

        @Override
        protected void initImage() {
        // Stub implementation for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub implementation for testing
        }

        @Override
        protected void initStorageDomainId() {
        // Stub implementation for testing
        }

        @Override
        protected void initContainerDetails(ImagesContainterParametersBase parameters) {
        // Stub implementation for testing
        }
    });
    doReturn(snapshotDAO).when(cmd).getSnapshotDao();
}
#end_block

#method_before
@Test
public void testRemoveImageFromSnapshotConfiguration() throws OvfReaderException {
    Guid vmId = Guid.NewGuid();
    VM vm = new VM();
    vm.setId(vmId);
    vm.setstorage_pool_id(Guid.NewGuid());
    vm.setvmt_name(RandomUtils.instance().nextString(10));
    vm.setorigin(OriginType.OVIRT);
    Guid vmSnapshotId = Guid.NewGuid();
    DiskImage disk1 = addTestDisk(vm, vmSnapshotId);
    DiskImage disk2 = addTestDisk(vm, vmSnapshotId);
    OvfManager ovfManager = new OvfManager();
    ArrayList<DiskImage> disks = new ArrayList<DiskImage>(Arrays.asList(disk1, disk2));
    String ovf = ovfManager.ExportVm(vm, disks);
    Snapshot snap = new Snapshot();
    snap.setVmConfiguration(ovf);
    snap.setId(vmSnapshotId);
    when(snapshotDAO.get(vmSnapshotId)).thenReturn(snap);
    doReturn(disk2).when(cmd).getDiskImage();
    doReturn(disk2).when(cmd).getImage();
    doReturn(disk2.getId()).when(cmd).getImageId();
    cmd.removeImageFromSnapshotConfiguration(vmSnapshotId, disk2.getImageId());
    ArgumentCaptor<Snapshot> snapCapture = ArgumentCaptor.forClass(Snapshot.class);
    verify(snapshotDAO).update(snapCapture.capture());
    String actualOvf = snapCapture.getValue().getVmConfiguration();
    ArrayList<DiskImage> actualImages = new ArrayList<DiskImage>();
    ovfManager.ImportVm(actualOvf, new VM(), actualImages, new ArrayList<VmNetworkInterface>());
    assertEquals("Wrong number of disks", 1, actualImages.size());
    assertEquals("Wrong disk", disk1, actualImages.get(0));
}
#method_after
@Test
public void testRemoveImageFromSnapshotConfiguration() throws OvfReaderException {
    Guid vmId = Guid.NewGuid();
    VM vm = new VM();
    vm.setId(vmId);
    vm.setstorage_pool_id(Guid.NewGuid());
    vm.setvmt_name(RandomUtils.instance().nextString(10));
    vm.setorigin(OriginType.OVIRT);
    Guid vmSnapshotId = Guid.NewGuid();
    DiskImage disk1 = addTestDisk(vm, vmSnapshotId);
    DiskImage disk2 = addTestDisk(vm, vmSnapshotId);
    OvfManager ovfManager = new OvfManager();
    ArrayList<DiskImage> disks = new ArrayList<DiskImage>(Arrays.asList(disk1, disk2));
    String ovf = ovfManager.ExportVm(vm, disks);
    Snapshot snap = new Snapshot();
    snap.setVmConfiguration(ovf);
    snap.setId(vmSnapshotId);
    when(snapshotDAO.get(vmSnapshotId)).thenReturn(snap);
    doReturn(disk2).when(cmd).getDiskImage();
    doReturn(disk2).when(cmd).getImage();
    doReturn(disk2.getId()).when(cmd).getImageId();
    Snapshot actual = cmd.prepareSnapshotConfigWithoutImageSingleImage(vmSnapshotId, disk2.getImageId());
    String actualOvf = actual.getVmConfiguration();
    ArrayList<DiskImage> actualImages = new ArrayList<DiskImage>();
    ovfManager.ImportVm(actualOvf, new VM(), actualImages, new ArrayList<VmNetworkInterface>());
    assertEquals("Wrong number of disks", 1, actualImages.size());
    assertEquals("Wrong disk", disk1, actualImages.get(0));
}
#end_block

#method_before
private static DiskImage addTestDisk(VM vm, Guid snapshotId) {
    Guid imageId = Guid.NewGuid();
    DiskImage disk = new DiskImage();
    disk.setImageId(imageId);
    disk.setId(Guid.NewGuid());
    disk.setvolume_type(VolumeType.Sparse);
    disk.setvolume_format(VolumeFormat.COW);
    disk.setDiskInterface(DiskInterface.VirtIO);
    disk.setstorage_pool_id(vm.getstorage_pool_id());
    disk.setAllowSnapshot(true);
    disk.setactive(Boolean.TRUE);
    disk.setvm_snapshot_id(snapshotId);
    disk.setvm_guid(vm.getId());
    disk.setimageStatus(ImageStatus.OK);
    disk.setappList("");
    disk.setdescription("");
    vm.getDiskList().add(disk);
    vm.getDiskMap().put(imageId, disk);
    return disk;
}
#method_after
private static DiskImage addTestDisk(VM vm, Guid snapshotId) {
    Guid imageId = Guid.NewGuid();
    DiskImage disk = new DiskImage();
    disk.setImageId(imageId);
    disk.setId(Guid.NewGuid());
    disk.setvolume_type(VolumeType.Sparse);
    disk.setvolume_format(VolumeFormat.COW);
    disk.setDiskInterface(DiskInterface.VirtIO);
    disk.setstorage_pool_id(vm.getstorage_pool_id());
    disk.setactive(Boolean.TRUE);
    disk.setvm_snapshot_id(snapshotId);
    disk.setvm_guid(vm.getId());
    disk.setimageStatus(ImageStatus.OK);
    disk.setappList("");
    disk.setdescription("");
    vm.getDiskList().add(disk);
    vm.getDiskMap().put(imageId, disk);
    return disk;
}
#end_block

#method_before
protected void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#method_after
private void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#end_block

#method_before
protected void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#method_after
private void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#end_block

#method_before
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshotFromDB(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#method_after
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshot(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#end_block

#method_before
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    RemoveSnapshotFromDB(snapshot);
    AdditionalImageRemoveTreatment(snapshot);
}
#method_after
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    getImageStorageDomainMapDao().remove(snapshot.getImageId());
    getImageDao().remove(snapshot.getImageId());
    List<DiskImage> imagesForDisk = getDiskImageDao().getAllSnapshotsForImageGroup(snapshot.getId());
    if (imagesForDisk == null || imagesForDisk.isEmpty()) {
        getBaseDiskDao().remove(snapshot.getId());
    }
}
#end_block

#method_before
protected void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#method_after
private void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#end_block

#method_before
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshotFromDB(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#method_after
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshot(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#end_block

#method_before
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    RemoveSnapshotFromDB(snapshot);
    AdditionalImageRemoveTreatment(snapshot);
}
#method_after
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    DbFacade.getInstance().getImageStorageDomainMapDao().remove(snapshot.getImageId());
    getImageDao().remove(snapshot.getImageId());
    List<DiskImage> imagesForDisk = getDiskImageDao().getAllSnapshotsForImageGroup(snapshot.getId());
    if (imagesForDisk == null || imagesForDisk.isEmpty()) {
        getBaseDiskDao().remove(snapshot.getId());
    }
}
#end_block

#method_before
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshotFromDB(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#method_after
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshot(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#end_block

#method_before
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    RemoveSnapshotFromDB(snapshot);
    AdditionalImageRemoveTreatment(snapshot);
}
#method_after
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    DbFacade.getInstance().getImageStorageDomainMapDao().remove(snapshot.getImageId());
    getImageDao().remove(snapshot.getImageId());
    List<DiskImage> imagesForDisk = getDiskImageDao().getAllSnapshotsForImageGroup(snapshot.getId());
    if (imagesForDisk == null || imagesForDisk.isEmpty()) {
        getBaseDiskDao().remove(snapshot.getId());
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    Network network = (Network) getSelectedItem();
    // CanRemove = SelectedItems != null && SelectedItems.Count > 0;
    getSetAsDisplayCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1 && network != null && !network.getCluster().getis_display() && network.getCluster().getStatus() != NetworkStatus.NonOperational);
}
#method_after
private void UpdateActionAvailability() {
    Network network = (Network) getSelectedItem();
    // CanRemove = SelectedItems != null && SelectedItems.Count > 0;
    getSetAsDisplayCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1 && network != null && !network.getCluster().getis_display() && network.getCluster().getstatus() != NetworkStatus.NonOperational);
}
#end_block

#method_before
public void OnSave() {
    ClusterNetworkModel model = (ClusterNetworkModel) getWindow();
    if (getEntity() == null) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(new Network(null));
    if (!model.Validate() || getEntity().getstorage_pool_id() == null) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getstorage_pool_id());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(model.getcurrentNetwork().getstorage_pool_id().getValue(), model.getcurrentNetwork()), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result1) {
            ClusterNetworkListModel networkListModel1 = (ClusterNetworkListModel) result1.getState();
            VdcReturnValueBase retVal = result1.getReturnValue();
            boolean succeeded = false;
            if (retVal != null && retVal.getSucceeded()) {
                succeeded = true;
            }
            networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
        }
    }, this);
}
#method_after
public void OnSave() {
    ClusterNetworkModel model = (ClusterNetworkModel) getWindow();
    if (getEntity() == null) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(new Network());
    if (!model.Validate() || getEntity().getstorage_pool_id() == null) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getstorage_pool_id());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(model.getcurrentNetwork().getstorage_pool_id().getValue(), model.getcurrentNetwork()), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result1) {
            ClusterNetworkListModel networkListModel1 = (ClusterNetworkListModel) result1.getState();
            VdcReturnValueBase retVal = result1.getReturnValue();
            boolean succeeded = false;
            if (retVal != null && retVal.getSucceeded()) {
                succeeded = true;
            }
            networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
        }
    }, this);
}
#end_block

#method_before
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    ClusterNetworkModel networkModel = (ClusterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    networkModel.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : networkModel.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            networkModel.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    Guid networkId = networkGuid;
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : networkModel.getnewClusters()) {
        Network tempVar = new Network(null);
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#method_after
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    ClusterNetworkModel networkModel = (ClusterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    networkModel.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : networkModel.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            networkModel.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    Guid networkId = networkGuid;
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : networkModel.getnewClusters()) {
        Network tempVar = new Network();
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#end_block

#method_before
public void OnSave() {
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    if (getEntity() == null || (!model.getIsNew() && getSelectedItem() == null)) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(model.getIsNew() ? new Network(null) : (Network) Cloner.clone(getSelectedItem()));
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getId());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : model.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            model.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    ArrayList<VDSGroup> detachNetworkFromClusters = Linq.Except(model.getOriginalClusters(), model.getnewClusters());
    ArrayList<VdcActionParametersBase> actionParameters = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup detachNetworkFromCluster : detachNetworkFromClusters) {
        actionParameters.add(new AttachNetworkToVdsGroupParameter(detachNetworkFromCluster, model.getcurrentNetwork()));
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.DetachNetworkToVdsGroup, actionParameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) result.getState();
            DataCenterNetworkModel networkModel = (DataCenterNetworkModel) networkListModel.getWindow();
            Network network = networkModel.getcurrentNetwork();
            if (networkModel.getIsNew()) {
                Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result1) {
                        DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                        VdcReturnValueBase retVal = result1.getReturnValue();
                        boolean succeeded = false;
                        if (retVal != null && retVal.getSucceeded()) {
                            succeeded = true;
                        }
                        networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
                    }
                }, networkListModel);
            } else {
                if ((Boolean) networkModel.getIsEnabled().getEntity()) {
                    Frontend.RunAction(VdcActionType.UpdateNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                            DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                            VdcReturnValueBase retVal = result1.getReturnValue();
                            networkListModel1.PostNetworkAction(null, retVal != null && retVal.getSucceeded());
                        }
                    }, networkListModel);
                } else {
                    PostNetworkAction(null, true);
                }
            }
        }
    }, this);
}
#method_after
public void OnSave() {
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    if (getEntity() == null || (!model.getIsNew() && getSelectedItem() == null)) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(model.getIsNew() ? new Network() : (Network) Cloner.clone(getSelectedItem()));
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getId());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : model.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            model.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    ArrayList<VDSGroup> detachNetworkFromClusters = Linq.Except(model.getOriginalClusters(), model.getnewClusters());
    ArrayList<VdcActionParametersBase> actionParameters = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup detachNetworkFromCluster : detachNetworkFromClusters) {
        actionParameters.add(new AttachNetworkToVdsGroupParameter(detachNetworkFromCluster, model.getcurrentNetwork()));
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.DetachNetworkToVdsGroup, actionParameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) result.getState();
            DataCenterNetworkModel networkModel = (DataCenterNetworkModel) networkListModel.getWindow();
            Network network = networkModel.getcurrentNetwork();
            if (networkModel.getIsNew()) {
                Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result1) {
                        DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                        VdcReturnValueBase retVal = result1.getReturnValue();
                        boolean succeeded = false;
                        if (retVal != null && retVal.getSucceeded()) {
                            succeeded = true;
                        }
                        networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
                    }
                }, networkListModel);
            } else {
                if ((Boolean) networkModel.getIsEnabled().getEntity()) {
                    Frontend.RunAction(VdcActionType.UpdateNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                            DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                            VdcReturnValueBase retVal = result1.getReturnValue();
                            networkListModel1.PostNetworkAction(null, retVal != null && retVal.getSucceeded());
                        }
                    }, networkListModel);
                } else {
                    PostNetworkAction(null, true);
                }
            }
        }
    }, this);
}
#end_block

#method_before
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    DataCenterNetworkModel networkModel = (DataCenterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    Guid networkId = networkModel.getIsNew() ? networkGuid : network.getId();
    ArrayList<VDSGroup> attachNetworkToClusters = Linq.Except(networkModel.getnewClusters(), networkModel.getOriginalClusters());
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : attachNetworkToClusters) {
        Network tempVar = new Network(null);
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#method_after
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    DataCenterNetworkModel networkModel = (DataCenterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    Guid networkId = networkModel.getIsNew() ? networkGuid : network.getId();
    ArrayList<VDSGroup> attachNetworkToClusters = Linq.Except(networkModel.getnewClusters(), networkModel.getOriginalClusters());
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : attachNetworkToClusters) {
        Network tempVar = new Network();
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#end_block

#method_before
private void New() {
    VM vm = (VM) getEntity();
    if (getWindow() != null) {
        return;
    }
    ArrayList<VmNetworkInterface> interfaces = Linq.<VmNetworkInterface>Cast(getItems());
    String newNicName = DataProvider.GetNewNicName(interfaces);
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms");
    model.setIsNew(true);
    model.getNicType().setItems(DataProvider.GetNicTypeList(vm.getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(vm.getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    model.getActive().setEntity(true);
    model.getPortMirroring().setEntity(false);
    // $NON-NLS-1$
    final UICommand okCommand = new UICommand("OnSave", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // wait for data to fetch
    okCommand.setIsExecutionAllowed(false);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getStatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(null);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
            // fetch completed
            okCommand.setIsExecutionAllowed(true);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
}
#method_after
private void New() {
    VM vm = (VM) getEntity();
    if (getWindow() != null) {
        return;
    }
    ArrayList<VmNetworkInterface> interfaces = Linq.<VmNetworkInterface>Cast(getItems());
    String newNicName = DataProvider.GetNewNicName(interfaces);
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms");
    model.setIsNew(true);
    model.getNicType().setItems(DataProvider.GetNicTypeList(vm.getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(vm.getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    model.getActive().setEntity(true);
    model.getPortMirroring().setEntity(false);
    // $NON-NLS-1$
    final UICommand okCommand = new UICommand("OnSave", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // wait for data to fetch
    okCommand.setIsExecutionAllowed(false);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getstatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(null);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
            // fetch completed
            okCommand.setIsExecutionAllowed(true);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
}
#end_block

#method_before
private void Edit() {
    VM vm = (VM) getEntity();
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("edit_network_interface_vms");
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(vm.getvm_os(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(vm.getvm_os()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsChangable(false);
    model.getMAC().setEntity(nic.getMacAddress());
    model.getActive().setIsAvailable(false);
    model.getPortMirroring().setEntity(nic.isPortMirroring());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getStatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic1 = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic1.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void Edit() {
    VM vm = (VM) getEntity();
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("edit_network_interface_vms");
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(vm.getvm_os(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(vm.getvm_os()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsChangable(false);
    model.getMAC().setEntity(nic.getMacAddress());
    model.getActive().setIsAvailable(false);
    model.getPortMirroring().setEntity(nic.isPortMirroring());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getstatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic1 = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic1.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private static Network CloneNetwork(Network instance) {
    Network obj = new Network(null);
    obj.setaddr(instance.getaddr());
    obj.setdescription(instance.getdescription());
    obj.setId(instance.getId());
    obj.setname(instance.getname());
    obj.setsubnet(instance.getsubnet());
    obj.setgateway(instance.getgateway());
    obj.settype(instance.gettype());
    obj.setvlan_id(instance.getvlan_id());
    obj.setstp(instance.getstp());
    obj.setstorage_pool_id(instance.getstorage_pool_id());
    if (instance.getCluster() != null) {
        obj.setCluster(new network_cluster());
        obj.getCluster().setstatus(instance.getCluster().getstatus());
        obj.getCluster().setis_display(instance.getCluster().getis_display());
        obj.getCluster().setRequired(instance.getCluster().isRequired());
    }
    return obj;
}
#method_after
private static Network CloneNetwork(Network instance) {
    Network obj = new Network();
    obj.setaddr(instance.getaddr());
    obj.setdescription(instance.getdescription());
    obj.setId(instance.getId());
    obj.setname(instance.getname());
    obj.setsubnet(instance.getsubnet());
    obj.setgateway(instance.getgateway());
    obj.settype(instance.gettype());
    obj.setvlan_id(instance.getvlan_id());
    obj.setstp(instance.getstp());
    obj.setstorage_pool_id(instance.getstorage_pool_id());
    if (instance.getCluster() != null) {
        obj.setCluster(new network_cluster());
        obj.getCluster().setstatus(instance.getCluster().getstatus());
        obj.getCluster().setis_display(instance.getCluster().getis_display());
        obj.getCluster().setRequired(instance.getCluster().isRequired());
    }
    return obj;
}
#end_block

#method_before
@Override
public NetworkStatus getStatus() {
    return (getEntity().getCluster() == null ? null : getEntity().getCluster().getStatus());
}
#method_after
@Override
public NetworkStatus getStatus() {
    return (getEntity().getCluster() == null ? null : getEntity().getCluster().getstatus());
}
#end_block

#method_before
void initTable(final ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new NetworkStatusColumn(), constants.empty(), "20px");
    TextColumnWithTooltip<Network> nameColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getname();
        }
    };
    getTable().addColumn(nameColumn, constants.nameNetwork());
    TextColumnWithTooltip<Network> statusColumn = new EnumColumn<Network, NetworkStatus>() {

        @Override
        public NetworkStatus getRawValue(Network object) {
            return object.getCluster().getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusNetwork());
    TextColumnWithTooltip<Network> roleColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            // according to ClusterNetworkListView.xaml:45
            return (object.getCluster() == null ? false : object.getCluster().getis_display()) ? constants.displayNetwork() : constants.empty();
        }
    };
    getTable().addColumn(roleColumn, constants.roleNetwork());
    TextColumnWithTooltip<Network> descColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getdescription();
        }
    };
    getTable().addColumn(descColumn, constants.descriptionNetwork());
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.addNetworkNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getNewNetworkCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.assignDetatchNetworksNework()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getManageCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.setAsDisplayNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSetAsDisplayCommand();
        }
    });
}
#method_after
void initTable(final ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new NetworkStatusColumn(), constants.empty(), "20px");
    TextColumnWithTooltip<Network> nameColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getname();
        }
    };
    getTable().addColumn(nameColumn, constants.nameNetwork());
    TextColumnWithTooltip<Network> statusColumn = new EnumColumn<Network, NetworkStatus>() {

        @Override
        public NetworkStatus getRawValue(Network object) {
            return object.getCluster().getstatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusNetwork());
    TextColumnWithTooltip<Network> roleColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            // according to ClusterNetworkListView.xaml:45
            return (object.getCluster() == null ? false : object.getCluster().getis_display()) ? constants.displayNetwork() : constants.empty();
        }
    };
    getTable().addColumn(roleColumn, constants.roleNetwork());
    TextColumnWithTooltip<Network> descColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getdescription();
        }
    };
    getTable().addColumn(descColumn, constants.descriptionNetwork());
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.addNetworkNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getNewNetworkCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.assignDetatchNetworksNework()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getManageCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.setAsDisplayNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSetAsDisplayCommand();
        }
    });
}
#end_block

#method_before
public void Edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (StringHelper.stringsEqual(network.getname(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getname(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.Except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getvlan_id() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new Linq.NetworkByNameComparer());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network(null);
                tempVar.setId(NGuid.Empty);
                // $NON-NLS-1$
                tempVar.setname("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = new UICommand("OnSave", hostInterfaceListModel);
                tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
                tempVar3.setIsDefault(true);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                tempVar4.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void Edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (StringHelper.stringsEqual(network.getname(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getname(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.Except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getvlan_id() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new Linq.NetworkByNameComparer());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network();
                tempVar.setId(NGuid.Empty);
                // $NON-NLS-1$
                tempVar.setname("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = new UICommand("OnSave", hostInterfaceListModel);
                tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
                tempVar3.setIsDefault(true);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                tempVar4.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
public void EditManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.FindNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            String defaultInterfaceName = null;
            RefObject<String> tempRef_defaultInterfaceName = new RefObject<String>(defaultInterfaceName);
            ArrayList<VdsNetworkInterface> interfaces = AsyncDataProvider.GetInterfaceOptionsForEditNetwork(getOriginalItems(), item, networkToEdit, getEntity().getId(), tempRef_defaultInterfaceName);
            defaultInterfaceName = tempRef_defaultInterfaceName.argvalue;
            managementModel.getInterface().setItems(interfaces);
            managementModel.getInterface().setSelectedItem(Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(interfaces), defaultInterfaceName));
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
            }
            managementModel.getCheckConnectivity().setIsAvailable(true);
            managementModel.getCheckConnectivity().setIsChangable(true);
            // currently, always should be
            managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
            // true
            managementModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                managementModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            managementModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            managementModel.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void EditManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.FindNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            String defaultInterfaceName = null;
            RefObject<String> tempRef_defaultInterfaceName = new RefObject<String>(defaultInterfaceName);
            ArrayList<VdsNetworkInterface> interfaces = DataProvider.GetInterfaceOptionsForEditNetwork(getOriginalItems(), item, networkToEdit, getEntity().getId(), tempRef_defaultInterfaceName);
            defaultInterfaceName = tempRef_defaultInterfaceName.argvalue;
            managementModel.getInterface().setItems(interfaces);
            managementModel.getInterface().setSelectedItem(Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(interfaces), defaultInterfaceName));
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
            }
            managementModel.getCheckConnectivity().setIsAvailable(true);
            managementModel.getCheckConnectivity().setIsChangable(true);
            // currently, always should be
            managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
            // true
            managementModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                managementModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            managementModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            managementModel.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
public void OnDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    setcurrentModel(model);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
            Network defaultNetwork = new Network(null);
            VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar != null) ? tempVar : defaultNetwork;
            hostInterfaceListModel.StartProgress(null);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, hostInterfaceListModel);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void OnDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    setcurrentModel(model);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
            Network defaultNetwork = new Network();
            VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar != null) ? tempVar : defaultNetwork;
            hostInterfaceListModel.StartProgress(null);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, hostInterfaceListModel);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
public void OnSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(getAllItems()), nicName);
    if (nic == null) {
        Cancel();
        return;
    }
    Network network = (Network) model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(NGuid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnConfirmManagementDetach", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
            Network defaultNetwork = new Network(null);
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar3 = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
            model.StartProgress(null);
            setcurrentModel(model);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, this);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().getValue().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (StringHelper.stringsEqual(network.getname(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && StringHelper.stringsEqual(item.getNetworkName(), network.getname())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getvlan_id() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = (Map.Entry<String, EntityModel>) model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress((String) model.getAddress().getEntity());
            parameters.setSubnet((String) model.getSubnet().getEntity());
        }
        model.StartProgress(null);
        setcurrentModel(model);
        Frontend.RunAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if ((Boolean) commitChanges.getEntity()) {
                        SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                        hostInterfaceListModel.Cancel();
                        hostInterfaceListModel.Search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                }
            }
        }, this);
    }
}
#method_after
public void OnSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(getAllItems()), nicName);
    if (nic == null) {
        Cancel();
        return;
    }
    Network network = (Network) model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(NGuid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnConfirmManagementDetach", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
            Network defaultNetwork = new Network();
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar3 = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
            model.StartProgress(null);
            setcurrentModel(model);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, this);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().getValue().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (StringHelper.stringsEqual(network.getname(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && StringHelper.stringsEqual(item.getNetworkName(), network.getname())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getvlan_id() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = (Map.Entry<String, EntityModel>) model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress((String) model.getAddress().getEntity());
            parameters.setSubnet((String) model.getSubnet().getEntity());
        }
        model.StartProgress(null);
        setcurrentModel(model);
        Frontend.RunAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if ((Boolean) commitChanges.getEntity()) {
                        SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                        hostInterfaceListModel.Cancel();
                        hostInterfaceListModel.Search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                }
            }
        }, this);
    }
}
#end_block

#method_before
public void OnConfirmManagementDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.<NetworkInterface>Cast(getInterfaceItems()), nicName);
    ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
    Network defaultNetwork = new Network(null);
    defaultNetwork.setname(nic.getNetworkName());
    Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
    Network net = (tempVar != null) ? tempVar : defaultNetwork;
    model.StartProgress(null);
    setcurrentModel(model);
    Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                    hostInterfaceListModel.Cancel();
                    hostInterfaceListModel.Search();
                }
            } else {
                hostInterfaceListModel.getcurrentModel().StopProgress();
            }
        }
    }, this);
}
#method_after
public void OnConfirmManagementDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.<NetworkInterface>Cast(getInterfaceItems()), nicName);
    ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
    Network defaultNetwork = new Network();
    defaultNetwork.setname(nic.getNetworkName());
    Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
    Network net = (tempVar != null) ? tempVar : defaultNetwork;
    model.StartProgress(null);
    setcurrentModel(model);
    Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                    hostInterfaceListModel.Cancel();
                    hostInterfaceListModel.Search();
                }
            } else {
                hostInterfaceListModel.getcurrentModel().StopProgress();
            }
        }
    }, this);
}
#end_block

#method_before
private void showNetwork(LogicalNetworkModel networkModel) {
    contents.removeAllRows();
    Network entity = networkModel.getEntity();
    addRow(templates.titleSetupNetworkTooltip(networkModel.getName()));
    if (entity.getdescription() != null && !entity.getdescription().trim().equals("")) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(entity.getdescription()));
    }
    // Usages
    boolean isDisplay = entity.getCluster() == null ? false : entity.getCluster().getis_display();
    if (networkModel.isManagement() || isDisplay || entity.isVmNetwork()) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(constants.usageItemInfo() + ":"));
        if (networkModel.isManagement()) {
            addRow(templates.imageTextSetupNetworkUsage(mgmtNetworkImage, constants.managementItemInfo()));
        }
        if (isDisplay) {
            addRow(templates.imageTextSetupNetworkUsage(monitorImage, constants.displayItemInfo()));
        }
        if (entity.isVmNetwork()) {
            addRow(templates.imageTextSetupNetworkUsage(vmImage, constants.vmItemInfo()));
        }
        // Mtu
        if (entity.getMtu() != 0) {
            addRow(constants.mtuItemInfo(), String.valueOf(entity.getMtu()));
        }
    }
}
#method_after
private void showNetwork(LogicalNetworkModel networkModel) {
    contents.removeAllRows();
    Network entity = networkModel.getEntity();
    addRow(templates.titleSetupNetworkTooltip(networkModel.getName()));
    if (entity.getdescription() != null && !entity.getdescription().trim().equals("")) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(entity.getdescription()));
    }
    // Usages
    boolean isDisplay = entity.getCluster() == null ? false : entity.getCluster().getis_display();
    if (entity.getCluster() == null || networkModel.isManagement() || isDisplay || entity.isVmNetwork()) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(constants.usageItemInfo() + ":"));
        if (entity.getCluster() == null) {
            addRow(templates.imageTextSetupNetworkUsage(unknownImage, constants.unknownItemInfo()));
        } else {
            if (networkModel.isManagement()) {
                addRow(templates.imageTextSetupNetworkUsage(mgmtNetworkImage, constants.managementItemInfo()));
            }
            if (isDisplay) {
                addRow(templates.imageTextSetupNetworkUsage(monitorImage, constants.displayItemInfo()));
            }
            if (entity.isVmNetwork()) {
                addRow(templates.imageTextSetupNetworkUsage(vmImage, constants.vmItemInfo()));
            }
        }
    }
    // Mtu
    if (entity.getMtu() != 0) {
        addRow(constants.mtuItemInfo(), String.valueOf(entity.getMtu()));
    }
}
#end_block

#method_before
private void AddNetworkPostData() {
    if (nics == null || networks == null) {
        return;
    }
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    ArrayList<Network> operationalNetworks = new ArrayList<Network>();
    for (Network a : networks) {
        if (a.getCluster().getStatus() == NetworkStatus.Operational) {
            operationalNetworks.add(a);
        }
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms_guide");
    model.setIsNew(true);
    model.getNetwork().setItems(operationalNetworks);
    model.getNetwork().setSelectedItem(operationalNetworks.size() > 0 ? operationalNetworks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntity().getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntity().getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    if (isActivateSupported) {
        model.getActive().setEntity(true);
    } else {
        model.getActive().setEntity(false);
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnAddNetwork", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    StopProgress();
}
#method_after
private void AddNetworkPostData() {
    if (nics == null || networks == null) {
        return;
    }
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    ArrayList<Network> operationalNetworks = new ArrayList<Network>();
    for (Network a : networks) {
        if (a.getCluster().getstatus() == NetworkStatus.Operational) {
            operationalNetworks.add(a);
        }
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms_guide");
    model.setIsNew(true);
    model.getNetwork().setItems(operationalNetworks);
    model.getNetwork().setSelectedItem(operationalNetworks.size() > 0 ? operationalNetworks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntity().getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntity().getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    if (isActivateSupported) {
        model.getActive().setEntity(true);
    } else {
        model.getActive().setEntity(false);
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnAddNetwork", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    StopProgress();
}
#end_block

#method_before
@Override
protected Widget getContents() {
    LogicalNetworkModel network = (LogicalNetworkModel) item;
    Image mgmtNetworkImage = new Image(network.isManagement() ? resources.mgmtNetwork() : resources.empty());
    Image vmImage = new Image(network.getEntity().isVmNetwork() ? resources.networkVm() : resources.empty());
    Image monitorImage;
    if (network.getEntity().getCluster() == null) {
        monitorImage = new Image(resources.questionMarkImage());
    } else {
        monitorImage = new Image(network.getEntity().getCluster().getis_display() ? resources.networkMonitor() : resources.empty());
    }
    Grid rowPanel = new Grid(1, 7);
    rowPanel.setCellSpacing(3);
    // $NON-NLS-1$
    rowPanel.setWidth("100%");
    // $NON-NLS-1$
    rowPanel.setHeight("100%");
    ColumnFormatter columnFormatter = rowPanel.getColumnFormatter();
    // $NON-NLS-1$
    columnFormatter.setWidth(0, "5px");
    // $NON-NLS-1$
    columnFormatter.setWidth(1, "20px");
    // $NON-NLS-1$
    columnFormatter.setWidth(2, "100%");
    if (network.isManagement()) {
        mgmtNetworkImage.setStylePrimaryName(style.networkImageBorder());
    }
    if (network.getEntity().isVmNetwork()) {
        vmImage.setStylePrimaryName(style.networkImageBorder());
    }
    if (network.getEntity().getCluster() != null) {
        if (network.getEntity().getCluster().getis_display()) {
            monitorImage.setStylePrimaryName(style.networkImageBorder());
        }
    }
    rowPanel.setWidget(0, 0, dragImage);
    ImageResource statusImage = getStatusImage();
    if (statusImage != null) {
        rowPanel.setWidget(0, 1, new Image(statusImage));
    }
    Label titleLabel = new Label(getItemTitle());
    rowPanel.setWidget(0, 2, titleLabel);
    rowPanel.setWidget(0, 3, actionButton);
    rowPanel.setWidget(0, 4, mgmtNetworkImage);
    rowPanel.setWidget(0, 5, monitorImage);
    rowPanel.setWidget(0, 6, vmImage);
    return rowPanel;
}
#method_after
@Override
protected Widget getContents() {
    LogicalNetworkModel network = (LogicalNetworkModel) item;
    Image mgmtNetworkImage;
    Image vmImage;
    Image monitorImage;
    if (network.getEntity().getCluster() == null) {
        monitorImage = new Image(resources.questionMarkImage());
        mgmtNetworkImage = new Image(resources.empty());
        vmImage = new Image(resources.empty());
    } else {
        monitorImage = new Image(network.getEntity().getCluster().getis_display() ? resources.networkMonitor() : resources.empty());
        mgmtNetworkImage = new Image(network.isManagement() ? resources.mgmtNetwork() : resources.empty());
        vmImage = new Image(network.getEntity().isVmNetwork() ? resources.networkVm() : resources.empty());
        if (network.isManagement()) {
            mgmtNetworkImage.setStylePrimaryName(style.networkImageBorder());
        }
        if (network.getEntity().isVmNetwork()) {
            vmImage.setStylePrimaryName(style.networkImageBorder());
        }
        if (network.getEntity().getCluster().getis_display()) {
            monitorImage.setStylePrimaryName(style.networkImageBorder());
        }
    }
    Grid rowPanel = new Grid(1, 7);
    rowPanel.setCellSpacing(3);
    // $NON-NLS-1$
    rowPanel.setWidth("100%");
    // $NON-NLS-1$
    rowPanel.setHeight("100%");
    ColumnFormatter columnFormatter = rowPanel.getColumnFormatter();
    // $NON-NLS-1$
    columnFormatter.setWidth(0, "5px");
    // $NON-NLS-1$
    columnFormatter.setWidth(1, "20px");
    // $NON-NLS-1$
    columnFormatter.setWidth(2, "100%");
    rowPanel.setWidget(0, 0, dragImage);
    ImageResource statusImage = getStatusImage();
    if (statusImage != null) {
        rowPanel.setWidget(0, 1, new Image(statusImage));
    }
    Label titleLabel = new Label(getItemTitle());
    rowPanel.setWidget(0, 2, titleLabel);
    rowPanel.setWidget(0, 3, actionButton);
    rowPanel.setWidget(0, 4, mgmtNetworkImage);
    rowPanel.setWidget(0, 5, monitorImage);
    rowPanel.setWidget(0, 6, vmImage);
    return rowPanel;
}
#end_block

#method_before
public void PostGetClusterNetworkList_New(ArrayList<Network> network_list) {
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getStatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    ArrayList<VmNetworkInterface> nics = Linq.<VmNetworkInterface>Cast(getItems());
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    model.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void PostGetClusterNetworkList_New(ArrayList<Network> network_list) {
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getstatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    ArrayList<VmNetworkInterface> nics = Linq.<VmNetworkInterface>Cast(getItems());
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    model.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void PostGetClusterNetworkList_Edit(ArrayList<Network> network_list) {
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    int nicCount = Linq.<VmNetworkInterface>Cast(getItems()).size();
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getStatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    Network network = null;
    for (Network a : networks) {
        if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
            network = a;
            break;
        }
    }
    model.getNetwork().setSelectedItem(network);
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void PostGetClusterNetworkList_Edit(ArrayList<Network> network_list) {
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    int nicCount = Linq.<VmNetworkInterface>Cast(getItems()).size();
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getstatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    Network network = null;
    for (Network a : networks) {
        if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
            network = a;
            break;
        }
    }
    model.getNetwork().setSelectedItem(network);
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@Override
public ImageResource getValue(Network nwk) {
    switch(nwk.getCluster().getStatus()) {
        case Operational:
            return getApplicationResources().upImage();
        case NonOperational:
            return getApplicationResources().downImage();
        default:
            return getApplicationResources().downImage();
    }
}
#method_after
@Override
public ImageResource getValue(Network nwk) {
    switch(nwk.getCluster().getstatus()) {
        case Operational:
            return getApplicationResources().upImage();
        case NonOperational:
            return getApplicationResources().downImage();
        default:
            return getApplicationResources().downImage();
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(items.size() == 1);
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#method_after
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelError")) {
        CancelError();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (command.getName().equals("closeVncInfo")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelError")) {
        CancelError();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (command.getName().equals("closeVncInfo")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (otp != null && !isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (!isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean isValidOtp(VDS vds, Long otp) {
    if (otp.longValue() == vds.getOtpValidity()) {
        Integer otpExpiration = Config.<Integer>GetValue(ConfigValues.OtpExpirationInSeconds);
        DateTime otpValidity = new DateTime(otp);
        otpValidity.AddSeconds(otpExpiration);
        if (otpValidity.before(DateTime.getUtcNow())) {
            return true;
        }
    }
    return false;
}
#method_after
private boolean isValidOtp(VDS vds, Long otp) {
    if (otp != null && otp.longValue() == vds.getOtpValidity()) {
        Integer otpExpiration = Config.<Integer>GetValue(ConfigValues.OtpExpirationInSeconds);
        DateTime otpValidity = new DateTime(otp);
        otpValidity.AddSeconds(otpExpiration);
        if (otpValidity.before(DateTime.getUtcNow())) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingStorage() throws Exception {
    // there is one specific quota and all the general ones defined on this storage domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_MASTER, NUM_QUOTAS);
}
#method_after
@Test
public void testGetRelevantQuotasExistingStorage() throws Exception {
    // there is one specific quota and all the general ones defined on this storage domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_MASTER, STORAGE_NUM_QUOTAS);
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingStorageNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_ISO, NUM_QUOTAS - 1);
}
#method_after
@Test
public void testGetRelevantQuotasExistingStorageNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_ISO, STORAGE_NUM_QUOTAS - 1);
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingVdsGroup() throws Exception {
    // there is one specific quota and all the general ones defined on this VDS Group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS, NUM_QUOTAS);
}
#method_after
@Test
public void testGetRelevantQuotasExistingVdsGroup() throws Exception {
    // there is one specific quota and all the general ones defined on this VDS Group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS, VDS_GRUOP_NUM_QUOTAS);
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingVdsGroupNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS_NO_SPECIFIC_QUOTAS, NUM_QUOTAS - 1);
}
#method_after
@Test
public void testGetRelevantQuotasExistingVdsGroupNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS_NO_SPECIFIC_QUOTAS, VDS_GRUOP_NUM_QUOTAS - 1);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getGlusterVolume() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID);
        return false;
    }
    setVdsGroupId(getGlusterVolume().getClusterId());
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getGlusterVolume() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID);
        return false;
    }
    setVdsGroupId(getGlusterVolume().getClusterId());
    // super class canDoAction expects cluster id (VdsGroupId).
    if (!super.canDoAction()) {
        return false;
    }
    return true;
}
#end_block

#method_before
public VdsStaticDAO getVdsStaticDao() {
    return DbFacade.getInstance().getVdsStaticDAO();
}
#method_after
public VdsStaticDAO getVdsStaticDao() {
    return getDbFacade().getVdsStaticDAO();
}
#end_block

#method_before
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isBlank(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (otp != null && !isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (otp != null && !isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#end_block

#method_before
protected void ExecuteRegisterVdsCommand() {
    synchronized (doubleRegistrationLock) {
        // force to reload vdss by unique ID used later on
        _vdssByUniqueId = null;
        VDS vdsByUniqueId = getVdssByUniqueId().size() != 0 ? getVdssByUniqueId().get(0) : null;
        // in case oVirt host was added for the second time - perform approval
        if (vdsByUniqueId != null && vdsByUniqueId.getstatus() == VDSStatus.PendingApproval && getParameters().getVdsType() == VDSType.oVirtNode && getParameters().getOtp() != null) {
            getQueryReturnValue().setSucceeded(dispatchOvirtApprovalCommand(vdsByUniqueId.getId()));
            return;
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.info("RegisterVdsQuery::ExecuteCommand - Entering");
        }
        if (StringUtils.isBlank(getParameters().getVdsName())) {
            getParameters().setVdsName(getParameters().getVdsUniqueId());
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.info("RegisterVdsQuery::ExecuteCommand - VdsName empty, using VdsUnique ID as name");
            }
        }
        logable.AddCustomValue("VdsName1", getParameters().getVdsName());
        Guid vdsGroupId;
        if (getParameters().getVdsGroupId().equals(Guid.Empty)) {
            vdsGroupId = new Guid(Config.<String>GetValue(ConfigValues.PowerClientAutoRegistrationDefaultVdsGroupID));
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.infoFormat("RegisterVdsQuery::ExecuteCommand - VdsGroupId recieved as -1, using PowerClientAutoRegistrationDefaultVdsGroupID: {0}", vdsGroupId);
            }
        } else {
            vdsGroupId = getParameters().getVdsGroupId();
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration) && vdsByUniqueId != null) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - found vds {0} with existing Unique Id {1}.  Will try to update existing vds", vdsByUniqueId.getId(), vdsByUniqueId.getUniqueId());
        }
        // TODO: always add in pending state, and if auto approve call
        // approve command action after registration
        RefObject<Boolean> isPending = new RefObject<Boolean>(Boolean.FALSE);
        getQueryReturnValue().setSucceeded(HandleOldVdssWithSameHostName(vdsByUniqueId) && HandleOldVdssWithSameName(vdsByUniqueId) && CheckAutoApprovalDefinitions(isPending) && Register(vdsByUniqueId, vdsGroupId, isPending.argvalue.booleanValue()));
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - Leaving Succeded value is {0}", getQueryReturnValue().getSucceeded());
        }
    }
}
#method_after
protected void ExecuteRegisterVdsCommand() {
    synchronized (doubleRegistrationLock) {
        // force to reload vdss by unique ID used later on
        _vdssByUniqueId = null;
        VDS vdsByUniqueId = getVdssByUniqueId().size() != 0 ? getVdssByUniqueId().get(0) : null;
        // in case oVirt host was added for the second time - perform approval
        if (vdsByUniqueId != null && vdsByUniqueId.getstatus() == VDSStatus.PendingApproval && getParameters().getVdsType() == VDSType.oVirtNode && getParameters().getOtp() != null) {
            getQueryReturnValue().setSucceeded(dispatchOvirtApprovalCommand(vdsByUniqueId.getId()));
            return;
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.info("RegisterVdsQuery::ExecuteCommand - Entering");
        }
        if (StringUtils.isEmpty(getParameters().getVdsName())) {
            getParameters().setVdsName(getParameters().getVdsUniqueId());
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.info("RegisterVdsQuery::ExecuteCommand - VdsName empty, using VdsUnique ID as name");
            }
        }
        logable.AddCustomValue("VdsName1", getParameters().getVdsName());
        Guid vdsGroupId;
        if (getParameters().getVdsGroupId().equals(Guid.Empty)) {
            vdsGroupId = new Guid(Config.<String>GetValue(ConfigValues.PowerClientAutoRegistrationDefaultVdsGroupID));
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.infoFormat("RegisterVdsQuery::ExecuteCommand - VdsGroupId recieved as -1, using PowerClientAutoRegistrationDefaultVdsGroupID: {0}", vdsGroupId);
            }
        } else {
            vdsGroupId = getParameters().getVdsGroupId();
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration) && vdsByUniqueId != null) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - found vds {0} with existing Unique Id {1}.  Will try to update existing vds", vdsByUniqueId.getId(), vdsByUniqueId.getUniqueId());
        }
        // TODO: always add in pending state, and if auto approve call
        // approve command action after registration
        RefObject<Boolean> isPending = new RefObject<Boolean>(Boolean.FALSE);
        getQueryReturnValue().setSucceeded(HandleOldVdssWithSameHostName(vdsByUniqueId) && HandleOldVdssWithSameName(vdsByUniqueId) && CheckAutoApprovalDefinitions(isPending) && Register(vdsByUniqueId, vdsGroupId, isPending.argvalue.booleanValue()));
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - Leaving Succeded value is {0}", getQueryReturnValue().getSucceeded());
        }
    }
}
#end_block

#method_before
@Override
protected boolean validateInputs() {
    boolean result = super.validateInputs();
    if (result) {
        returnValue.setExceptionString("");
        try {
            String hostName = getParameters().getVdsHostName();
            if (StringUtils.isBlank(hostName)) {
                returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
                result = false;
            } else {
                List<VDS> vdssByUniqueId = getVdssByUniqueId();
                if (vdssByUniqueId.size() > 1) {
                    returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
                    result = false;
                } else if (vdssByUniqueId.size() == 1) {
                    VDS vds = vdssByUniqueId.get(0);
                    if (!VdsHandler.isPendingOvirt(vds)) {
                        returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                        result = false;
                    } else {
                        Long otp = getParameters().getOtp();
                        if (otp != null && !isValidOtp(vds, otp)) {
                            returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                            result = false;
                        }
                    }
                }
            }
        } catch (RuntimeException ex) {
            log.error("RegisterVdsQuery::CanDoAction: An exception has been thrown.", ex);
            returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
            result = false;
        }
    }
    return result;
}
#method_after
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (otp != null && !isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#end_block

#method_before
protected void ExecuteRegisterVdsCommand() {
    synchronized (_doubleRegistrationLock) {
        // force to reload vdss by unique ID used later on
        _vdssByUniqueId = null;
        VDS vdsByUniqueId = getVdssByUniqueId().size() != 0 ? getVdssByUniqueId().get(0) : null;
        // in case oVirt host was added for the second time - perform approval
        if (vdsByUniqueId != null && vdsByUniqueId.getstatus() == VDSStatus.PendingApproval && getParameters().getVdsType() == VDSType.oVirtNode && getParameters().getOtp() != null) {
            getQueryReturnValue().setSucceeded(dispatchOvirtApprovalCommand(vdsByUniqueId.getId()));
            return;
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.info("RegisterVdsQuery::ExecuteCommand - Entering");
        }
        if (StringUtils.isBlank(getParameters().getVdsName())) {
            getParameters().setVdsName(getParameters().getVdsUniqueId());
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.info("RegisterVdsQuery::ExecuteCommand - VdsName empty, using VdsUnique ID as name");
            }
        }
        _logable.AddCustomValue("VdsName1", getParameters().getVdsName());
        Guid vdsGroupId;
        if (getParameters().getVdsGroupId().equals(Guid.Empty)) {
            vdsGroupId = new Guid(Config.<String>GetValue(ConfigValues.PowerClientAutoRegistrationDefaultVdsGroupID));
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.infoFormat("RegisterVdsQuery::ExecuteCommand - VdsGroupId recieved as -1, using PowerClientAutoRegistrationDefaultVdsGroupID: {0}", vdsGroupId);
            }
        } else {
            vdsGroupId = getParameters().getVdsGroupId();
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration) && vdsByUniqueId != null) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - found vds {0} with existing Unique Id {1}.  Will try to update existing vds", vdsByUniqueId.getId(), vdsByUniqueId.getUniqueId());
        }
        // TODO: always add in pending state, and if auto approve call
        // approve command action after registration
        RefObject<Boolean> isPending = new RefObject<Boolean>(Boolean.FALSE);
        getQueryReturnValue().setSucceeded(HandleOldVdssWithSameHostName(vdsByUniqueId) && HandleOldVdssWithSameName(vdsByUniqueId) && CheckAutoApprovalDefinitions(isPending) && Register(vdsByUniqueId, vdsGroupId, isPending.argvalue.booleanValue()));
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - Leaving Succeded value is {0}", getQueryReturnValue().getSucceeded());
        }
    }
}
#method_after
protected void ExecuteRegisterVdsCommand() {
    synchronized (_doubleRegistrationLock) {
        // force to reload vdss by unique ID used later on
        _vdssByUniqueId = null;
        VDS vdsByUniqueId = getVdssByUniqueId().size() != 0 ? getVdssByUniqueId().get(0) : null;
        // in case oVirt host was added for the second time - perform approval
        if (vdsByUniqueId != null && vdsByUniqueId.getstatus() == VDSStatus.PendingApproval && getParameters().getVdsType() == VDSType.oVirtNode && getParameters().getOtp() != null) {
            getQueryReturnValue().setSucceeded(dispatchOvirtApprovalCommand(vdsByUniqueId.getId()));
            return;
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.info("RegisterVdsQuery::ExecuteCommand - Entering");
        }
        if (StringUtils.isEmpty(getParameters().getVdsName())) {
            getParameters().setVdsName(getParameters().getVdsUniqueId());
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.info("RegisterVdsQuery::ExecuteCommand - VdsName empty, using VdsUnique ID as name");
            }
        }
        _logable.AddCustomValue("VdsName1", getParameters().getVdsName());
        Guid vdsGroupId;
        if (getParameters().getVdsGroupId().equals(Guid.Empty)) {
            vdsGroupId = new Guid(Config.<String>GetValue(ConfigValues.PowerClientAutoRegistrationDefaultVdsGroupID));
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.infoFormat("RegisterVdsQuery::ExecuteCommand - VdsGroupId recieved as -1, using PowerClientAutoRegistrationDefaultVdsGroupID: {0}", vdsGroupId);
            }
        } else {
            vdsGroupId = getParameters().getVdsGroupId();
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration) && vdsByUniqueId != null) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - found vds {0} with existing Unique Id {1}.  Will try to update existing vds", vdsByUniqueId.getId(), vdsByUniqueId.getUniqueId());
        }
        // TODO: always add in pending state, and if auto approve call
        // approve command action after registration
        RefObject<Boolean> isPending = new RefObject<Boolean>(Boolean.FALSE);
        getQueryReturnValue().setSucceeded(HandleOldVdssWithSameHostName(vdsByUniqueId) && HandleOldVdssWithSameName(vdsByUniqueId) && CheckAutoApprovalDefinitions(isPending) && Register(vdsByUniqueId, vdsGroupId, isPending.argvalue.booleanValue()));
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - Leaving Succeded value is {0}", getQueryReturnValue().getSucceeded());
        }
    }
}
#end_block

#method_before
@SuppressWarnings("unused")
protected boolean canPerformRollbackUsingCommand(VdcActionType commandType, VdcActionParametersBase params) {
    return true;
}
#method_after
protected boolean canPerformRollbackUsingCommand(@SuppressWarnings("unused") VdcActionType commandType, @SuppressWarnings("unused") VdcActionParametersBase params) {
    return true;
}
#end_block

#method_before
@SuppressWarnings("unused")
protected SPMAsyncTask ConcreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    throw new NotImplementedException();
}
#method_after
protected SPMAsyncTask ConcreteCreateTask(@SuppressWarnings("unused") AsyncTaskCreationInfo asyncTaskCreationInfo, @SuppressWarnings("unused") VdcActionType parentCommand) {
    throw new NotImplementedException();
}
#end_block

#method_before
@Test
public void testGetStrippedVdsUniqueIdWithUnacceptedChars() {
    RegisterVdsParameters paramsMock = getQueryParameters();
    when(paramsMock.getVdsUniqueId()).thenReturn("Test_^123^");
    String result = getQuery().getStrippedVdsUniqueId();
    assertEquals("Test_123", result);
}
#method_after
@Test
public void testGetStrippedVdsUniqueIdWithUnacceptedChars() {
    String result = this.gerStrippedVdsUniqueId("Test_123");
    assertEquals("Vds id doesn't equal to the expected value", "Test_123", result);
}
#end_block

#method_before
@Test
public void testGetStrippedVdsUniqueIdOnlyAllowrdChars() {
    RegisterVdsParameters paramsMock = getQueryParameters();
    when(paramsMock.getVdsUniqueId()).thenReturn("Test_123");
    String result = getQuery().getStrippedVdsUniqueId();
    assertEquals("Test_123", result);
}
#method_after
@Test
public void testGetStrippedVdsUniqueIdOnlyAllowrdChars() {
    String result = this.gerStrippedVdsUniqueId("Test_123");
    assertEquals("Vds id doesn't equal to the expected value", "Test_123", result);
}
#end_block

#method_before
@Test
public void testGetStrippedVdsUniqueIdWithoutValidChars() {
    RegisterVdsParameters paramsMock = getQueryParameters();
    when(paramsMock.getVdsUniqueId()).thenReturn("^%^");
    String result = getQuery().getStrippedVdsUniqueId();
    assertEquals("", result);
}
#method_after
@Test
public void testGetStrippedVdsUniqueIdWithoutValidChars() {
    String result = this.gerStrippedVdsUniqueId("^%^");
    assertEquals("Vds id is not empty as expected", "", result);
}
#end_block

#method_before
protected boolean CanDoAction(RefObject<String> errorMessage) {
    boolean returnValue = true;
    errorMessage.argvalue = "";
    Long otp = getParameters().getOtp();
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringHelper.isNullOrEmpty(hostName)) {
            errorMessage.argvalue = "Cannot register Host - no Hostname address specified.";
            returnValue = false;
        } else {
            List<VDS> vdssByUniqueId = getVdssByUniqueId();
            if (vdssByUniqueId.size() > 1) {
                errorMessage.argvalue = "Cannot register Host - unique id is ambigious.";
                returnValue = false;
            } else if (vdssByUniqueId.size() == 1) {
                VDS vds = vdssByUniqueId.get(0);
                if (!VdsHandler.isPendingOvirt(vds)) {
                    errorMessage.argvalue = String.format("Illegal Host status %s and/or type %s for host %s, expected %s type with %s status.", vds.getstatus().name(), vds.getvds_type().name(), vds.getvds_name(), VDSType.oVirtNode.name(), VDSStatus.PendingApproval.name());
                    errorMessage.argvalue = VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name();
                    returnValue = false;
                } else if (otp != null && !isValidOtp(vds, otp)) {
                    errorMessage.argvalue = "Invalid OTP for host " + hostName;
                    returnValue = false;
                }
            }
        }
    } catch (RuntimeException ex) {
        log.error("RegisterVdsQuery::CanDoAction: An exception has been thrown.", ex);
        errorMessage.argvalue = String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage());
        returnValue = false;
    }
    return returnValue;
}
#method_after
protected boolean CanDoAction(RefObject<String> errorMessage) {
    boolean returnValue = true;
    errorMessage.argvalue = "";
    Long otp = getParameters().getOtp();
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            errorMessage.argvalue = "Cannot register Host - no Hostname address specified.";
            returnValue = false;
        } else {
            List<VDS> vdssByUniqueId = getVdssByUniqueId();
            if (vdssByUniqueId.size() > 1) {
                errorMessage.argvalue = "Cannot register Host - unique id is ambigious.";
                returnValue = false;
            } else if (vdssByUniqueId.size() == 1) {
                VDS vds = vdssByUniqueId.get(0);
                if (!VdsHandler.isPendingOvirt(vds)) {
                    errorMessage.argvalue = String.format("Illegal Host status %s and/or type %s for host %s, expected %s type with %s status.", vds.getstatus().name(), vds.getvds_type().name(), vds.getvds_name(), VDSType.oVirtNode.name(), VDSStatus.PendingApproval.name());
                    errorMessage.argvalue = VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name();
                    returnValue = false;
                } else if (otp != null && !isValidOtp(vds, otp)) {
                    errorMessage.argvalue = "Invalid OTP for host " + hostName;
                    returnValue = false;
                }
            }
        }
    } catch (RuntimeException ex) {
        log.error("RegisterVdsQuery::CanDoAction: An exception has been thrown.", ex);
        errorMessage.argvalue = String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage());
        returnValue = false;
    }
    return returnValue;
}
#end_block

#method_before
protected void ExecuteRegisterVdsCommand() {
    synchronized (_doubleRegistrationLock) {
        // force to reload vdss by unique ID used later on
        _vdssByUniqueId = null;
        VDS vdsByUniqueId = getVdssByUniqueId().size() != 0 ? getVdssByUniqueId().get(0) : null;
        // in case oVirt host was added for the second time - perform approval
        if (vdsByUniqueId != null && vdsByUniqueId.getstatus() == VDSStatus.PendingApproval && getParameters().getVdsType() == VDSType.oVirtNode && getParameters().getOtp() != null) {
            getQueryReturnValue().setSucceeded(dispatchOvirtApprovalCommand(vdsByUniqueId.getId()));
            return;
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.info("RegisterVdsQuery::ExecuteCommand - Entering");
        }
        if (StringHelper.isNullOrEmpty(getParameters().getVdsName())) {
            getParameters().setVdsName(getParameters().getVdsUniqueId());
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.info("RegisterVdsQuery::ExecuteCommand - VdsName empty, using VdsUnique ID as name");
            }
        }
        _logable.AddCustomValue("VdsName1", getParameters().getVdsName());
        Guid vdsGroupId;
        if (getParameters().getVdsGroupId().equals(Guid.Empty)) {
            vdsGroupId = new Guid(Config.<String>GetValue(ConfigValues.PowerClientAutoRegistrationDefaultVdsGroupID));
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.infoFormat("RegisterVdsQuery::ExecuteCommand - VdsGroupId recieved as -1, using PowerClientAutoRegistrationDefaultVdsGroupID: {0}", vdsGroupId);
            }
        } else {
            vdsGroupId = getParameters().getVdsGroupId();
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration) && vdsByUniqueId != null) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - found vds {0} with existing Unique Id {1}.  Will try to update existing vds", vdsByUniqueId.getId(), vdsByUniqueId.getUniqueId());
        }
        // TODO: always add in pending state, and if auto approve call
        // approve command action after registration
        RefObject<Boolean> isPending = new RefObject<Boolean>(Boolean.FALSE);
        getQueryReturnValue().setSucceeded(HandleOldVdssWithSameHostName(vdsByUniqueId) && HandleOldVdssWithSameName(vdsByUniqueId) && CheckAutoApprovalDefinitions(isPending) && Register(vdsByUniqueId, vdsGroupId, isPending.argvalue.booleanValue()));
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - Leaving Succeded value is {0}", getQueryReturnValue().getSucceeded());
        }
    }
}
#method_after
protected void ExecuteRegisterVdsCommand() {
    synchronized (_doubleRegistrationLock) {
        // force to reload vdss by unique ID used later on
        _vdssByUniqueId = null;
        VDS vdsByUniqueId = getVdssByUniqueId().size() != 0 ? getVdssByUniqueId().get(0) : null;
        // in case oVirt host was added for the second time - perform approval
        if (vdsByUniqueId != null && vdsByUniqueId.getstatus() == VDSStatus.PendingApproval && getParameters().getVdsType() == VDSType.oVirtNode && getParameters().getOtp() != null) {
            getQueryReturnValue().setSucceeded(dispatchOvirtApprovalCommand(vdsByUniqueId.getId()));
            return;
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.info("RegisterVdsQuery::ExecuteCommand - Entering");
        }
        if (StringUtils.isEmpty(getParameters().getVdsName())) {
            getParameters().setVdsName(getParameters().getVdsUniqueId());
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.info("RegisterVdsQuery::ExecuteCommand - VdsName empty, using VdsUnique ID as name");
            }
        }
        _logable.AddCustomValue("VdsName1", getParameters().getVdsName());
        Guid vdsGroupId;
        if (getParameters().getVdsGroupId().equals(Guid.Empty)) {
            vdsGroupId = new Guid(Config.<String>GetValue(ConfigValues.PowerClientAutoRegistrationDefaultVdsGroupID));
            if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
                log.infoFormat("RegisterVdsQuery::ExecuteCommand - VdsGroupId recieved as -1, using PowerClientAutoRegistrationDefaultVdsGroupID: {0}", vdsGroupId);
            }
        } else {
            vdsGroupId = getParameters().getVdsGroupId();
        }
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration) && vdsByUniqueId != null) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - found vds {0} with existing Unique Id {1}.  Will try to update existing vds", vdsByUniqueId.getId(), vdsByUniqueId.getUniqueId());
        }
        // TODO: always add in pending state, and if auto approve call
        // approve command action after registration
        RefObject<Boolean> isPending = new RefObject<Boolean>(Boolean.FALSE);
        getQueryReturnValue().setSucceeded(HandleOldVdssWithSameHostName(vdsByUniqueId) && HandleOldVdssWithSameName(vdsByUniqueId) && CheckAutoApprovalDefinitions(isPending) && Register(vdsByUniqueId, vdsGroupId, isPending.argvalue.booleanValue()));
        if (Config.<Boolean>GetValue(ConfigValues.LogVdsRegistration)) {
            log.infoFormat("RegisterVdsQuery::ExecuteCommand - Leaving Succeded value is {0}", getQueryReturnValue().getSucceeded());
        }
    }
}
#end_block

#method_before
@Override
protected void ExecuteVmCommand() {
    if (getVm().getstatus() == VMStatus.Up) {
        runVdsCommand(getParameters().getAction().getCommandType(), new HotPlugUnplgNicVDSParameters(getVm().getrun_on_vds().getValue(), getVm().getId(), DbFacade.getInstance().getVmNetworkInterfaceDAO().get(getParameters().getNicId()), vmDevice));
    }
    TransactionSupport.executeInNewTransaction(updateDevice());
    setSucceeded(true);
}
#method_after
@Override
protected void ExecuteVmCommand() {
    if (getVm().getstatus() == VMStatus.Up) {
        runVdsCommand(getParameters().getAction().getCommandType(), new HotPlugUnplgNicVDSParameters(getVm().getrun_on_vds().getValue(), getVm().getId(), DbFacade.getInstance().getVmNetworkInterfaceDAO().get(getParameters().getNicId()), vmDevice));
    }
    TransactionSupport.executeInNewTransaction(updateDevice());
    VmDeviceUtils.updateBootOrderInVmDevice(getVm().getStaticData());
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__DEACTIVATE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__INTERFACE);
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage((getParameters().getAction() == PlugAction.PLUG) ? VdcBllMessages.VAR__ACTION__ACTIVATE : VdcBllMessages.VAR__ACTION__DEACTIVATE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__INTERFACE);
}
#end_block

#method_before
private void setConfigurationEntries(DomainsConfigurationEntry domainNameEntry, DomainsConfigurationEntry adUserNameEntry, DomainsConfigurationEntry adPasswordEntry, DomainsConfigurationEntry authModeEntry, DomainsConfigurationEntry ldapServersEntry, DomainsConfigurationEntry adUserIdEntry, DomainsConfigurationEntry ldapProviderTypeEntry) throws ManageDomainsResult {
    // Update the configuration
    configurationProvider.setConfigValue(ConfigValues.AdUserName, adUserNameEntry.getDomainsConfigurationEntry(), adUserNameEntry.getDomainsLoggingEntry());
    configurationProvider.setConfigValue(ConfigValues.AdUserPassword, adPasswordEntry.getDomainsConfigurationEntry(), adPasswordEntry.getDomainsLoggingEntry());
    configurationProvider.setConfigValue(ConfigValues.LdapServers, ldapServersEntry.getDomainsConfigurationEntry(), ldapServersEntry.getDomainsLoggingEntry());
    configurationProvider.setConfigValue(ConfigValues.AdUserId, adUserIdEntry.getDomainsConfigurationEntry(), adUserIdEntry.getDomainsLoggingEntry());
    configurationProvider.setConfigValue(ConfigValues.LDAPSecurityAuthentication, authModeEntry.getDomainsConfigurationEntry(), authModeEntry.getDomainsLoggingEntry());
    configurationProvider.setConfigValue(ConfigValues.DomainName, domainNameEntry.getDomainsConfigurationEntry(), domainNameEntry.getDomainsLoggingEntry());
    configurationProvider.setConfigValue(ConfigValues.LDAPProviderTypes, ldapProviderTypeEntry.getDomainsConfigurationEntry(), ldapProviderTypeEntry.getDomainsLoggingEntry());
}
#method_after
private void setConfigurationEntries(DomainsConfigurationEntry domainNameEntry, DomainsConfigurationEntry adUserNameEntry, DomainsConfigurationEntry adPasswordEntry, DomainsConfigurationEntry authModeEntry, DomainsConfigurationEntry ldapServersEntry, DomainsConfigurationEntry adUserIdEntry, DomainsConfigurationEntry ldapProviderTypeEntry) throws ManageDomainsResult {
    // Update the configuration
    configurationProvider.setConfigValue(ConfigValues.AdUserName, adUserNameEntry);
    configurationProvider.setConfigValue(ConfigValues.AdUserPassword, adPasswordEntry, false);
    configurationProvider.setConfigValue(ConfigValues.LdapServers, ldapServersEntry);
    configurationProvider.setConfigValue(ConfigValues.AdUserId, adUserIdEntry);
    configurationProvider.setConfigValue(ConfigValues.LDAPSecurityAuthentication, authModeEntry);
    configurationProvider.setConfigValue(ConfigValues.DomainName, domainNameEntry);
    configurationProvider.setConfigValue(ConfigValues.LDAPProviderTypes, ldapProviderTypeEntry);
}
#end_block

#method_before
@Override
public String toString() {
    return String.format("spUUID = %s, poolVersion = %s", getStoragePoolId().toString(), getCompatibilityVersion());
}
#method_after
@Override
public String toString() {
    return String.format("storagePoolId = %s, poolVersion = %s", getStoragePoolId(), getCompatibilityVersion());
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc createVolume(String sdUUID, String spUUID, String imgGUID, String size, int volFormat, int volType, int diskType, String volUUID, String descr, String srcImgGUID, String srcVolUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.createVolume(sdUUID, spUUID, imgGUID, size, volFormat, volType, diskType, volUUID, descr, srcImgGUID, srcVolUUID);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc createVolume(String sdUUID, String spUUID, String imgGUID, String size, int volFormat, int volType, int diskType, String volUUID, String descr, String srcImgGUID, String srcVolUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.createVolume(sdUUID, spUUID, imgGUID, size, volFormat, volType, diskType, volUUID, descr, srcImgGUID, srcVolUUID);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc copyImage(String sdUUID, String spUUID, String vmGUID, String srcImgGUID, String srcVolUUID, String dstImgGUID, String dstVolUUID, String descr, String dstSdUUID, int volType, int volFormat, int preallocate, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.copyImage(sdUUID, spUUID, vmGUID, srcImgGUID, srcVolUUID, dstImgGUID, dstVolUUID, descr, dstSdUUID, volType, volFormat, preallocate, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc copyImage(String sdUUID, String spUUID, String vmGUID, String srcImgGUID, String srcVolUUID, String dstImgGUID, String dstVolUUID, String descr, String dstSdUUID, int volType, int volFormat, int preallocate, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.copyImage(sdUUID, spUUID, vmGUID, srcImgGUID, srcVolUUID, dstImgGUID, dstVolUUID, descr, dstSdUUID, volType, volFormat, preallocate, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc setVolumeDescription(String sdUUID, String spUUID, String imgGUID, String volUUID, String description) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setVolumeDescription(sdUUID, spUUID, imgGUID, volUUID, description);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc setVolumeDescription(String sdUUID, String spUUID, String imgGUID, String volUUID, String description) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setVolumeDescription(sdUUID, spUUID, imgGUID, volUUID, description);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc mergeSnapshots(String sdUUID, String spUUID, String vmGUID, String imgGUID, String ancestorUUID, String successorUUID, String postZero) {
    Map<String, Object> xmlRpcReturnValue = irsServer.mergeSnapshots(sdUUID, spUUID, vmGUID, imgGUID, ancestorUUID, successorUUID, postZero);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc mergeSnapshots(String sdUUID, String spUUID, String vmGUID, String imgGUID, String ancestorUUID, String successorUUID, String postZero) {
    Map<String, Object> xmlRpcReturnValue = irsServer.mergeSnapshots(sdUUID, spUUID, vmGUID, imgGUID, ancestorUUID, successorUUID, postZero);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc deleteVolume(String sdUUID, String spUUID, String imgGUID, String[] volUUID, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.deleteVolume(sdUUID, spUUID, imgGUID, volUUID, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc deleteVolume(String sdUUID, String spUUID, String imgGUID, String[] volUUID, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.deleteVolume(sdUUID, spUUID, imgGUID, volUUID, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneImageInfoReturnForXmlRpc getVolumeInfo(String sdUUID, String spUUID, String imgGUID, String volUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getVolumeInfo(sdUUID, spUUID, imgGUID, volUUID);
    OneImageInfoReturnForXmlRpc wrapper = new OneImageInfoReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneImageInfoReturnForXmlRpc getVolumeInfo(String sdUUID, String spUUID, String imgGUID, String volUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getVolumeInfo(sdUUID, spUUID, imgGUID, volUUID);
    OneImageInfoReturnForXmlRpc wrapper = new OneImageInfoReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public IrsStatsAndStatusXmlRpc getIrsStats() {
    Map<String, Object> xmlRpcReturnValue = irsServer.getStats();
    IrsStatsAndStatusXmlRpc wrapper = new IrsStatsAndStatusXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public IrsStatsAndStatusXmlRpc getIrsStats() {
    Map<String, Object> xmlRpcReturnValue = irsServer.getStats();
    IrsStatsAndStatusXmlRpc wrapper = new IrsStatsAndStatusXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc exportCandidate(String sdUUID, String vmGUID, String[] volumesList, String vmMeta, String templateGUID, String templateVolGUID, String templateMeta, String expPath, String collapse, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.exportCandidate(sdUUID, vmGUID, volumesList, vmMeta, templateGUID, templateVolGUID, templateMeta, expPath, collapse, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc exportCandidate(String sdUUID, String vmGUID, String[] volumesList, String vmMeta, String templateGUID, String templateVolGUID, String templateMeta, String expPath, String collapse, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.exportCandidate(sdUUID, vmGUID, volumesList, vmMeta, templateGUID, templateVolGUID, templateMeta, expPath, collapse, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc importCandidate(String sdUUID, String vmGUID, String templateGUID, String templateVolGUID, String path, String type, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.importCandidate(sdUUID, vmGUID, templateGUID, templateVolGUID, path, type, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc importCandidate(String sdUUID, String vmGUID, String templateGUID, String templateVolGUID, String path, String type, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.importCandidate(sdUUID, vmGUID, templateGUID, templateVolGUID, path, type, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public IsoListReturnForXmlRpc getIsoList(String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getIsoList(spUUID);
    IsoListReturnForXmlRpc wrapper = new IsoListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public IsoListReturnForXmlRpc getIsoList(String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getIsoList(spUUID);
    IsoListReturnForXmlRpc wrapper = new IsoListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public IsoListReturnForXmlRpc getFloppyList(String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getFloppyList(spUUID);
    IsoListReturnForXmlRpc wrapper = new IsoListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public IsoListReturnForXmlRpc getFloppyList(String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getFloppyList(spUUID);
    IsoListReturnForXmlRpc wrapper = new IsoListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc extendVolume(String sdUUID, String spUUID, String imgGUID, String volUUID, int newSize) {
    Map<String, Object> xmlRpcReturnValue = irsServer.extendVolume(sdUUID, spUUID, imgGUID, volUUID, newSize);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc extendVolume(String sdUUID, String spUUID, String imgGUID, String volUUID, int newSize) {
    Map<String, Object> xmlRpcReturnValue = irsServer.extendVolume(sdUUID, spUUID, imgGUID, volUUID, newSize);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StorageStatusReturnForXmlRpc activateStorageDomain(String sdUUID, String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.activateStorageDomain(sdUUID, spUUID);
    StorageStatusReturnForXmlRpc wrapper = new StorageStatusReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StorageStatusReturnForXmlRpc activateStorageDomain(String sdUUID, String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.activateStorageDomain(sdUUID, spUUID);
    StorageStatusReturnForXmlRpc wrapper = new StorageStatusReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc deactivateStorageDomain(String sdUUID, String spUUID, String msdUUID, int masterVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.deactivateStorageDomain(sdUUID, spUUID, msdUUID, masterVersion);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc deactivateStorageDomain(String sdUUID, String spUUID, String msdUUID, int masterVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.deactivateStorageDomain(sdUUID, spUUID, msdUUID, masterVersion);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc detachStorageDomain(String sdUUID, String spUUID, String msdUUID, int masterVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.detachStorageDomain(sdUUID, spUUID, msdUUID, masterVersion);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc detachStorageDomain(String sdUUID, String spUUID, String msdUUID, int masterVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.detachStorageDomain(sdUUID, spUUID, msdUUID, masterVersion);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc forcedDetachStorageDomain(String sdUUID, String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.forcedDetachStorageDomain(sdUUID, spUUID);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc forcedDetachStorageDomain(String sdUUID, String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.forcedDetachStorageDomain(sdUUID, spUUID);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc attachStorageDomain(String sdUUID, String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.attachStorageDomain(sdUUID, spUUID);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc attachStorageDomain(String sdUUID, String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.attachStorageDomain(sdUUID, spUUID);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc setStorageDomainDescription(String sdUUID, String description) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setStorageDomainDescription(sdUUID, description);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc setStorageDomainDescription(String sdUUID, String description) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setStorageDomainDescription(sdUUID, description);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StorageDomainListReturnForXmlRpc reconstructMaster(String spUUID, String msdUUID, String masterVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.reconstructMaster(spUUID, msdUUID, masterVersion);
    StorageDomainListReturnForXmlRpc wrapper = new StorageDomainListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StorageDomainListReturnForXmlRpc reconstructMaster(String spUUID, int hostSpmId, String msdUUID, String masterVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.reconstructMaster(spUUID, hostSpmId, msdUUID, masterVersion);
    StorageDomainListReturnForXmlRpc wrapper = new StorageDomainListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc extendStorageDomain(String sdUUID, String spUUID, String[] devlist) {
    Map<String, Object> xmlRpcReturnValue = irsServer.extendStorageDomain(sdUUID, spUUID, devlist);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc extendStorageDomain(String sdUUID, String spUUID, String[] devlist) {
    Map<String, Object> xmlRpcReturnValue = irsServer.extendStorageDomain(sdUUID, spUUID, devlist);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc setStoragePoolDescription(String spUUID, String description) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setStoragePoolDescription(spUUID, description);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc setStoragePoolDescription(String spUUID, String description) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setStoragePoolDescription(spUUID, description);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StoragePoolInfoReturnForXmlRpc getStoragePoolInfo(String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getStoragePoolInfo(spUUID);
    StoragePoolInfoReturnForXmlRpc wrapper = new StoragePoolInfoReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StoragePoolInfoReturnForXmlRpc getStoragePoolInfo(String spUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getStoragePoolInfo(spUUID);
    StoragePoolInfoReturnForXmlRpc wrapper = new StoragePoolInfoReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc destroyStoragePool(String spUUID, int hostSpmId, String SCSIKey) {
    Map<String, Object> xmlRpcReturnValue = irsServer.destroyStoragePool(spUUID, hostSpmId, SCSIKey);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc destroyStoragePool(String spUUID, int hostSpmId, String SCSIKey) {
    Map<String, Object> xmlRpcReturnValue = irsServer.destroyStoragePool(spUUID, hostSpmId, SCSIKey);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc deleteImage(String sdUUID, String spUUID, String imgGUID, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.deleteImage(sdUUID, spUUID, imgGUID, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc deleteImage(String sdUUID, String spUUID, String imgGUID, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.deleteImage(sdUUID, spUUID, imgGUID, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc moveImage(String spUUID, String srcDomUUID, String dstDomUUID, String imgGUID, String vmGUID, int op, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.moveImage(spUUID, srcDomUUID, dstDomUUID, imgGUID, vmGUID, op, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public OneUuidReturnForXmlRpc moveImage(String spUUID, String srcDomUUID, String dstDomUUID, String imgGUID, String vmGUID, int op, String postZero, String force) {
    Map<String, Object> xmlRpcReturnValue = irsServer.moveImage(spUUID, srcDomUUID, dstDomUUID, imgGUID, vmGUID, op, postZero, force);
    OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StorageDomainGuidListReturnForXmlRpc getImageDomainsList(String spUUID, String imgUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getImageDomainsList(spUUID, imgUUID);
    StorageDomainGuidListReturnForXmlRpc wrapper = new StorageDomainGuidListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StorageDomainGuidListReturnForXmlRpc getImageDomainsList(String spUUID, String imgUUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getImageDomainsList(spUUID, imgUUID);
    StorageDomainGuidListReturnForXmlRpc wrapper = new StorageDomainGuidListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc setMaxHosts(int maxHosts) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setMaxHosts(maxHosts);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc setMaxHosts(int maxHosts) {
    Map<String, Object> xmlRpcReturnValue = irsServer.setMaxHosts(maxHosts);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc removeVM(String spUUID, String vmGUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.removeVM(spUUID, vmGUID);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc removeVM(String spUUID, String vmGUID) {
    Map<String, Object> xmlRpcReturnValue = irsServer.removeVM(spUUID, vmGUID);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc removeVM(String spUUID, String vmGUID, String storageDomainId) {
    Map<String, Object> xmlRpcReturnValue = irsServer.removeVM(spUUID, vmGUID, storageDomainId);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc removeVM(String spUUID, String vmGUID, String storageDomainId) {
    Map<String, Object> xmlRpcReturnValue = irsServer.removeVM(spUUID, vmGUID, storageDomainId);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public GetVmsInfoReturnForXmlRpc getVmsInfo(String storagePoolId, String storageDomainId, String[] VMIDList) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getVmsInfo(storagePoolId, storageDomainId, VMIDList);
    GetVmsInfoReturnForXmlRpc wrapper = new GetVmsInfoReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public GetVmsInfoReturnForXmlRpc getVmsInfo(String storagePoolId, String storageDomainId, String[] VMIDList) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getVmsInfo(storagePoolId, storageDomainId, VMIDList);
    GetVmsInfoReturnForXmlRpc wrapper = new GetVmsInfoReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public GetVmsListReturnForXmlRpc getVmsList(String storagePoolId, String storageDomainId) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getVmsList(storagePoolId, storageDomainId);
    GetVmsListReturnForXmlRpc wrapper = new GetVmsListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public GetVmsListReturnForXmlRpc getVmsList(String storagePoolId, String storageDomainId) {
    Map<String, Object> xmlRpcReturnValue = irsServer.getVmsList(storagePoolId, storageDomainId);
    GetVmsListReturnForXmlRpc wrapper = new GetVmsListReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc upgradeStoragePool(String storagePoolId, String targetVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.upgradeStoragePool(storagePoolId, targetVersion);
    StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
    return wrapper;
}
#method_after
public StatusOnlyReturnForXmlRpc upgradeStoragePool(String storagePoolId, String targetVersion) {
    Map<String, Object> xmlRpcReturnValue = irsServer.upgradeStoragePool(storagePoolId, targetVersion);
    return new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
}
#end_block

#method_before
@Override
protected void ExecuteIrsBrokerCommand() {
    P params = getParameters();
    String spUUIDstr = params.getStoragePoolId().toString();
    String targetVersion = params.getCompatibilityVersion();
    log.info("-- UpgradeStoragePoolVDSCommand::ExecuteIrsBrokerCommand: calling 'upgradeStoragePool' with two new parameters: poolVersion and UUID");
    log.infoFormat("-- upgradeStoragePool parameters:\r\n" + "spUUID={0}\r\n" + "version={1}\r\n", spUUIDstr, targetVersion);
    status = getIrsProxy().upgradeStoragePool(spUUIDstr, targetVersion);
    ProceedProxyReturnValue();
}
#method_after
@Override
protected void ExecuteIrsBrokerCommand() {
    final P params = getParameters();
    final String storagePoolId = params.getStoragePoolId().toString();
    final String targetVersion = params.getCompatibilityVersion();
    log.infoFormat("Upgrading storage pool {0} to version {1}", storagePoolId, targetVersion);
    status = getIrsProxy().upgradeStoragePool(storagePoolId, targetVersion);
    ProceedProxyReturnValue();
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // the default quota configuration.
    if ((_oldStoragePool.getQuotaEnforcementType() == QuotaEnforcmentTypeEnum.DISABLED) && (getStoragePool().getQuotaEnforcementType() != QuotaEnforcmentTypeEnum.DISABLED)) {
        QuotaHelper.getInstance().setDefaultQuotaAsRegularQuota(_oldStoragePool);
    }
    storage_pool storagePool = getStoragePool();
    getStoragePoolDAO().updatePartial(storagePool);
    updateStoragePoolFormatType();
    if (storagePool.getstatus() != StoragePoolStatus.Up) {
        setSucceeded(true);
        return;
    }
    String spName = storagePool.getname();
    Guid spId = storagePool.getId();
    VDSBrokerFrontend resourceManager = Backend.getInstance().getResourceManager();
    if (!StringHelper.EqOp(_oldStoragePool.getname(), spName)) {
        SetStoragePoolDescriptionVDSCommandParameters parameters = new SetStoragePoolDescriptionVDSCommandParameters(spId, spName);
        resourceManager.RunVdsCommand(VDSCommandType.SetStoragePoolDescription, parameters);
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    updateDefaultQuota();
    if (_oldStoragePool.getstatus() == StoragePoolStatus.Up) {
        if (!StringHelper.EqOp(_oldStoragePool.getname(), getStoragePool().getname())) {
            runVdsCommand(VDSCommandType.SetStoragePoolDescription, new SetStoragePoolDescriptionVDSCommandParameters(getStoragePool().getId(), getStoragePool().getname()));
            getStoragePoolDAO().updatePartial(getStoragePool());
        }
    }
    updateStoragePoolFormatType();
    setSucceeded(true);
}
#end_block

#method_before
private void updateStoragePoolFormatType() {
    storage_pool storagePool = getStoragePool();
    Guid spId = storagePool.getId();
    VDSBrokerFrontend resourceManager = Backend.getInstance().getResourceManager();
    Version spVersion = storagePool.getcompatibility_version();
    // Version oldSpVersion = _oldStoragePool.getcompatibility_version();
    // if (Version.OpEquality(spVersion, oldSpVersion)) {
    // return;
    // }
    StorageType spType = storagePool.getstorage_pool_type();
    if (spType != StorageType.ISCSI && spType != StorageType.FCP) {
        // We try and not change the format type for pools that aren't iSCSI/FCP
        return;
    }
    // TODO: The entire version -> format type scheme should be moved to a place
    // when everyone can utilize it.
    StorageFormatType targetFormat = StorageFormatType.V1;
    Version v2FormatChangeBar = new Version("3.0");
    if (spVersion.compareTo(v2FormatChangeBar) >= 0) {
        targetFormat = StorageFormatType.V2;
    }
    storagePool.setStoragePoolFormatType(targetFormat);
    getStoragePoolDAO().update(storagePool);
    updateMemberDomainsFormat(targetFormat);
    if (storagePool.getstatus() != StoragePoolStatus.Up) {
        return;
    }
    // There is no need to worry about "reupgrading"
    // as VDSM will silently ignore the request
    UpgradeStoragePoolVDSCommandParameters parameters = new UpgradeStoragePoolVDSCommandParameters(spId, targetFormat);
    resourceManager.RunVdsCommand(VDSCommandType.UpgradeStoragePool, parameters);
}
#method_after
private void updateStoragePoolFormatType() {
    final storage_pool storagePool = getStoragePool();
    final Guid spId = storagePool.getId();
    final Version spVersion = storagePool.getcompatibility_version();
    final Version oldSpVersion = _oldStoragePool.getcompatibility_version();
    final StorageFormatType targetFormat;
    if (Version.OpEquality(spVersion, oldSpVersion)) {
        return;
    }
    // when everyone can utilize it.
    if (spVersion.compareTo(Version.v3_0) == 0) {
        targetFormat = StorageFormatType.V2;
    } else if (spVersion.compareTo(Version.v3_1) == 0) {
        targetFormat = StorageFormatType.V3;
    } else {
        targetFormat = StorageFormatType.V1;
    }
    StorageType spType = storagePool.getstorage_pool_type();
    if (targetFormat == StorageFormatType.V2 && spType != StorageType.ISCSI && spType != StorageType.FCP) {
        // There is no format V2 for domains that aren't ISCSI/FCP
        return;
    }
    storagePool.setStoragePoolFormatType(targetFormat);
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            getStoragePoolDAO().updatePartial(storagePool);
            updateMemberDomainsFormat(targetFormat);
            return null;
        }
    });
    if (_oldStoragePool.getstatus() == StoragePoolStatus.Up) {
        // No need to worry about "reupgrading" as VDSM will silently ignore
        // the request.
        runVdsCommand(VDSCommandType.UpgradeStoragePool, new UpgradeStoragePoolVDSCommandParameters(spId, targetFormat));
    }
}
#end_block

#method_before
private void updateMemberDomainsFormat(StorageFormatType targetFormat) {
    Guid spId = getStoragePool().getId();
    StorageDomainStaticDAO sdStatDao = DbFacade.getInstance().getStorageDomainStaticDAO();
    List<storage_domain_static> domains = sdStatDao.getAllForStoragePool(spId);
    log.info("DOMAINS");
    log.info(domains);
    for (storage_domain_static domain : domains) {
        StorageDomainType sdType = domain.getstorage_domain_type();
        log.info("sdType");
        log.info(sdType);
        if (sdType != StorageDomainType.Data && sdType != StorageDomainType.Master) {
            continue;
        }
        log.info("update");
        log.info(targetFormat);
        log.info(domain.getId());
        domain.setStorageFormat(targetFormat);
        sdStatDao.update(domain);
    }
}
#method_after
private void updateMemberDomainsFormat(StorageFormatType targetFormat) {
    Guid spId = getStoragePool().getId();
    StorageDomainStaticDAO sdStatDao = DbFacade.getInstance().getStorageDomainStaticDAO();
    List<storage_domain_static> domains = sdStatDao.getAllForStoragePool(spId);
    for (storage_domain_static domain : domains) {
        StorageDomainType sdType = domain.getstorage_domain_type();
        if (sdType == StorageDomainType.Data || sdType == StorageDomainType.Master) {
            log.infoFormat("Updating storage domain {0} (type {1}) to format {2}", domain.getId(), sdType, targetFormat);
            domain.setStorageFormat(targetFormat);
            sdStatDao.update(domain);
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (!CheckStoragePool()) {
        return false;
    }
    if (!validateStoragePoolName()) {
        return false;
    }
    if (!validateStoragePoolTypeChange()) {
        return false;
    }
    if (!CheckStoragePoolNameLengthValid()) {
        return false;
    }
    if (!validateCompatibilityVersionChange()) {
        return false;
    }
    if (!isNotLocalfsWithDefaultCluster()) {
        return false;
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = super.canDoAction() && checkStoragePool();
    _oldStoragePool = getStoragePoolDAO().get(getStoragePool().getId());
    if (returnValue && !StringHelper.EqOp(_oldStoragePool.getname(), getStoragePool().getname()) && getStoragePoolDAO().getByName(getStoragePool().getname()) != null) {
        returnValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST);
    }
    if (returnValue && _oldStoragePool.getstorage_pool_type() != getStoragePool().getstorage_pool_type() && getStorageDomainStaticDAO().getAllForStoragePool(getStoragePool().getId()).size() > 0) {
        returnValue = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_DOMAINS.toString());
    }
    returnValue = returnValue && CheckStoragePoolNameLengthValid();
    if (returnValue && Version.OpInequality(_oldStoragePool.getcompatibility_version(), getStoragePool().getcompatibility_version())) {
        if (!isStoragePoolVersionSupported()) {
            addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
            returnValue = false;
        } else // decreasing of compatibility version is not allowed
        if (getStoragePool().getcompatibility_version().compareTo(_oldStoragePool.getcompatibility_version()) < 0) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION);
        } else {
            // check all clusters has at least the same compatibility
            // version
            List<VDSGroup> clusters = getVdsGroupDAO().getAllForStoragePool(getStoragePool().getId());
            for (VDSGroup cluster : clusters) {
                if (getStoragePool().getcompatibility_version().compareTo(cluster.getcompatibility_version()) > 0) {
                    returnValue = false;
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString());
                    break;
                }
            }
        }
    }
    StoragePoolValidator validator = createStoragePoolValidator();
    if (returnValue) {
        returnValue = validator.isNotLocalfsWithDefaultCluster();
    }
    if (returnValue) {
        returnValue = validator.isPosixDcAndMatchingCompatiblityVersion();
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    return returnValue;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc reconstructMaster(String spUUID, int hostSpmId, String poolName, String masterDom, Map<String, String> domDict, int masterVersion, String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.reconstructMaster(spUUID, hostSpmId, poolName, masterDom, domDict, masterVersion, lockPolicy, lockRenewalIntervalSec, leaseTimeSec, ioOpTimeoutSec, leaseRetries);
        StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public StatusOnlyReturnForXmlRpc reconstructMaster(String spUUID, String poolName, String masterDom, Map<String, String> domDict, int masterVersion, String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries, int hostSpmId) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.reconstructMaster(spUUID, poolName, masterDom, domDict, masterVersion, lockPolicy, lockRenewalIntervalSec, leaseTimeSec, ioOpTimeoutSec, leaseRetries, hostSpmId);
        StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc createVG(String sdUUID, String[] deviceList) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.createVG(sdUUID, deviceList);
        OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public OneUuidReturnForXmlRpc createVG(String sdUUID, String[] deviceList, boolean force) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.createVG(sdUUID, deviceList, force);
        OneUuidReturnForXmlRpc wrapper = new OneUuidReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc glusterVolumeRemoveBrickForce(String volumeName, String[] brickDirectories) {
    try {
        return new StatusOnlyReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickForce(volumeName, brickDirectories));
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public StatusOnlyReturnForXmlRpc glusterVolumeRemoveBrickForce(String volumeName, String[] brickDirectories, int replicaCount) {
    try {
        return new StatusOnlyReturnForXmlRpc(vdsServer.glusterVolumeRemoveBrickForce(volumeName, brickDirectories, replicaCount));
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__RECONSTRUCT_MASTER);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__STORAGE__DOMAIN);
    List<storage_pool_iso_map> poolDomains = DbFacade.getInstance().getStoragePoolIsoMapDAO().getAllForStoragePool(getStoragePool().getId());
    for (storage_pool_iso_map poolDomain : poolDomains) {
        if (poolDomain.getstatus() == StorageDomainStatus.Locked) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2);
            return false;
        }
    }
    return InitializeVds();
}
#method_after
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__RECONSTRUCT_MASTER);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__STORAGE__DOMAIN);
    List<storage_pool_iso_map> poolDomains = DbFacade.getInstance().getStoragePoolIsoMapDAO().getAllForStoragePool(getStoragePool().getId());
    for (storage_pool_iso_map poolDomain : poolDomains) {
        if (poolDomain.getstatus() == StorageDomainStatus.Locked) {
            addInvalidSDStatusMessage(poolDomain.getstatus());
            return false;
        }
    }
    return InitializeVds();
}
#end_block

#method_before
@Override
protected void executeCommand() {
    try {
        boolean commandSucceeded = (Boolean) TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                boolean commandSucceeded = false;
                final storage_pool storagePool = getStoragePool();
                final Version storagePoolVersion = storagePool.getcompatibility_version();
                final Integer vdsSpmId = getVds().getvds_spm_id();
                ProceedStorageDomainTreatmentByDomainType(true);
                // reconstruct or if its last master
                if (getParameters().getIsDeactivate()) {
                    SetStorageDomainStatus(StorageDomainStatus.InActive);
                    CalcStoragePoolStatusByDomainsStatus();
                }
                commandSucceeded = true;
                if (!_isLastMaster) {
                    // pause the timers for the domain error handling.
                    Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new MarkPoolInReconstructModeVDSCommandParameters(getStoragePoolId().getValue(), ReconstructMarkAction.ClearJobs));
                    // if we have spm, stop spm and reset cache (resetIrs)
                    commandSucceeded = stopSpm();
                    if (storagePoolVersion.compareTo(Version.v3_1) < 0) {
                        commandSucceeded = commandSucceeded && Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DisconnectStoragePool, new DisconnectStoragePoolVDSCommandParameters(getVds().getId(), storagePool.getId(), vdsSpmId)).getSucceeded();
                    }
                    if (commandSucceeded) {
                        List<storage_pool_iso_map> domains = DbFacade.getInstance().getStoragePoolIsoMapDAO().getAllForStoragePool(storagePool.getId());
                        for (storage_pool_iso_map domain : domains) {
                            if (domain.getstatus() == null || domain.getstatus() == StorageDomainStatus.Unknown) {
                                domain.setstatus(StorageDomainStatus.Active);
                            } else if (domain.getstatus() == StorageDomainStatus.Locked) {
                                throw new VdcBLLException(VdcBllErrors.CANT_RECONSTRUCT_WHEN_A_DOMAIN_IN_POOL_IS_LOCKED, "Cannot reconstruct master domain when a domain in the pool is " + "locked.");
                            }
                        }
                        commandSucceeded = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ReconstructMaster, new ReconstructMasterVDSCommandParameters(getVds().getId(), vdsSpmId, storagePool.getId(), storagePool.getname(), storagePoolVersion, _newMasterStorageDomainId, domains, storagePool.getmaster_domain_version())).getSucceeded();
                    }
                } else {
                    stopSpm();
                }
                return commandSucceeded;
            }
        });
        connectAndRefreshAllUpHosts(commandSucceeded);
        if (!_isLastMaster && commandSucceeded) {
            SearchParameters p = new SearchParameters(MessageFormat.format(DesktopsInStoragePoolQuery, getStoragePool().getname()), SearchType.VM);
            p.setMaxCount(Integer.MAX_VALUE);
            @SuppressWarnings("unchecked")
            List<VM> vmsInPool = (List<VM>) Backend.getInstance().runInternalQuery(VdcQueryType.Search, p).getReturnValue();
            VmCommand.UpdateVmInSpm(getStoragePool().getId(), vmsInPool);
        }
        setSucceeded(commandSucceeded);
    } finally {
        // reset cache and mark reconstruct for pool as finished
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new MarkPoolInReconstructModeVDSCommandParameters(getStoragePoolId().getValue(), ReconstructMarkAction.ClearCache));
    }
}
#method_after
@Override
protected void executeCommand() {
    try {
        Boolean commandSucceeded = reconstructMaster();
        connectAndRefreshAllUpHosts(commandSucceeded);
        if (!_isLastMaster && commandSucceeded) {
            SearchParameters p = new SearchParameters(MessageFormat.format(DesktopsInStoragePoolQuery, getStoragePool().getname()), SearchType.VM);
            p.setMaxCount(Integer.MAX_VALUE);
            @SuppressWarnings("unchecked")
            List<VM> vmsInPool = (List<VM>) Backend.getInstance().runInternalQuery(VdcQueryType.Search, p).getReturnValue();
            VmCommand.UpdateVmInSpm(getStoragePool().getId(), vmsInPool);
        }
        setSucceeded(commandSucceeded);
    } finally {
        // Reset cache and mark reconstruct for pool as finished
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new MarkPoolInReconstructModeVDSCommandParameters(getStoragePoolId().getValue(), ReconstructMarkAction.ClearCache));
    }
}
#end_block

#method_before
private void connectAndRefreshAllUpHosts(final boolean commandSucceeded) {
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            try {
                for (VDS vds : getAllRunningVdssInPool()) {
                    try {
                        if (!_isLastMaster && commandSucceeded) {
                            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getvds_spm_id(), getMasterDomainIdFromDb(), getStoragePool().getmaster_domain_version()));
                            if (returnValue.getSucceeded()) {
                                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RefreshStoragePool, new RefreshStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version()));
                            } else {
                                log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnValue.getVdsError().getMessage());
                            }
                        }
                        // only if we deactivate the storage domain we want to disconnect from it.
                        if (getParameters().getIsDeactivate()) {
                            StorageHelperDirector.getInstance().getItem(getStorageDomain().getstorage_type()).DisconnectStorageFromDomainByVdsId(getStorageDomain(), vds.getId());
                        }
                    } catch (Exception e) {
                        log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}", vds.getId(), e.getMessage());
                    }
                }
            } catch (Exception ex) {
                log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on all up hosts in the pool. error {0}", ex.getMessage());
            }
            return null;
        }
    });
}
#method_after
private void connectAndRefreshAllUpHosts(final boolean commandSucceeded) {
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            try {
                for (VDS vds : getAllRunningVdssInPool()) {
                    try {
                        if (!_isLastMaster && commandSucceeded) {
                            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getvds_spm_id(), getMasterDomainIdFromDb(), getStoragePool().getmaster_domain_version()));
                            if (returnValue.getSucceeded()) {
                                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RefreshStoragePool, new RefreshStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version()));
                            } else {
                                log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnValue.getVdsError().getMessage());
                            }
                        }
                        // only if we deactivate the storage domain we want to disconnect from it.
                        if (getParameters().isInactive()) {
                            StorageHelperDirector.getInstance().getItem(getStorageDomain().getstorage_type()).DisconnectStorageFromDomainByVdsId(getStorageDomain(), vds.getId());
                        }
                    } catch (Exception e) {
                        log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}", vds.getId(), e.getMessage());
                    }
                }
            } catch (Exception ex) {
                log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on all up hosts in the pool. error {0}", ex.getMessage());
            }
            return null;
        }
    });
}
#end_block

#method_before
@Override
protected void ExecuteVdsBrokerCommand() {
    Map<String, String> domains = new HashMap<String, String>();
    for (storage_pool_iso_map domain : getParameters().getDomainsList()) {
        domains.put(domain.getstorage_id().toString(), domain.getstatus() != null ? domain.getstatus() == StorageDomainStatus.InActive ? "attached" : domain.getstatus().toString().toLowerCase() : StorageDomainStatus.Unknown.toString().toLowerCase());
    }
    if (getParameters().getStoragePoolVersion().compareTo(Version.v3_1) < 0) {
        status = getBroker().reconstructMaster(getParameters().getStoragePoolId().toString(), getParameters().getStoragePoolName(), getParameters().getMasterDomainId().toString(), domains, getParameters().getMasterVersion(), Config.<String>GetValue(ConfigValues.LockPolicy), Config.<Integer>GetValue(ConfigValues.LockRenewalIntervalSec), Config.<Integer>GetValue(ConfigValues.LeaseTimeSec), Config.<Integer>GetValue(ConfigValues.IoOpTimeoutSec), Config.<Integer>GetValue(ConfigValues.LeaseRetries));
    } else {
        status = getBroker().reconstructMaster(getParameters().getStoragePoolId().toString(), getParameters().getVdsSpmId(), getParameters().getStoragePoolName(), getParameters().getMasterDomainId().toString(), domains, getParameters().getMasterVersion(), Config.<String>GetValue(ConfigValues.LockPolicy), Config.<Integer>GetValue(ConfigValues.LockRenewalIntervalSec), Config.<Integer>GetValue(ConfigValues.LeaseTimeSec), Config.<Integer>GetValue(ConfigValues.IoOpTimeoutSec), Config.<Integer>GetValue(ConfigValues.LeaseRetries));
    }
    ProceedProxyReturnValue();
}
#method_after
@Override
protected void ExecuteVdsBrokerCommand() {
    final Map<String, String> domains = new HashMap<String, String>();
    for (storage_pool_iso_map domain : getParameters().getDomainsList()) {
        domains.put(domain.getstorage_id().toString(), domain.getstatus() != null ? domain.getstatus() == StorageDomainStatus.InActive ? "attached" : domain.getstatus().toString().toLowerCase() : StorageDomainStatus.Unknown.toString().toLowerCase());
    }
    status = getBroker().reconstructMaster(getParameters().getStoragePoolId().toString(), getParameters().getStoragePoolName(), getParameters().getMasterDomainId().toString(), domains, getParameters().getMasterVersion(), Config.<String>GetValue(ConfigValues.LockPolicy), Config.<Integer>GetValue(ConfigValues.LockRenewalIntervalSec), Config.<Integer>GetValue(ConfigValues.LeaseTimeSec), Config.<Integer>GetValue(ConfigValues.IoOpTimeoutSec), Config.<Integer>GetValue(ConfigValues.LeaseRetries), getParameters().getVdsSpmId());
    ProceedProxyReturnValue();
}
#end_block

#method_before
public Integer getVdsSpmId() {
    return privateVdsSpmId;
}
#method_after
public int getVdsSpmId() {
    return privateVdsSpmId;
}
#end_block

#method_before
public void setVdsSpmId(Integer value) {
    privateVdsSpmId = value;
}
#method_after
public void setVdsSpmId(int value) {
    privateVdsSpmId = value;
}
#end_block

#method_before
@Override
public String toString() {
    return String.format("%s, storagePoolId = %s, storagePoolName = %s, masterDomainId = %s, masterVersion = %s, domainsList = [%s]", super.toString(), getStoragePoolId(), getStoragePoolName(), getMasterDomainId(), getMasterVersion(), getPrintableDomainsList());
}
#method_after
@Override
public String toString() {
    return String.format("%s, vdsSpmId = %i, storagePoolId = %s, " + "storagePoolName = %s, masterDomainId = %s, masterVersion = %s, " + "domainsList = [%s]", super.toString(), getVdsSpmId(), getStoragePoolId(), getStoragePoolName(), getMasterDomainId(), getMasterVersion(), getPrintableDomainsList());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    try {
        boolean commandSucceeded = (Boolean) TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                boolean commandSucceeded = false;
                ProceedStorageDomainTreatmentByDomainType(true);
                // reconstruct or if its last master
                if (getParameters().getIsInactive()) {
                    SetStorageDomainStatus(StorageDomainStatus.InActive);
                    CalcStoragePoolStatusByDomainsStatus();
                }
                commandSucceeded = stopSpm();
                if (_isLastMaster) {
                    return commandSucceeded;
                }
                // pause the timers for the domain error handling.
                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new MarkPoolInReconstructModeVDSCommandParameters(getStoragePoolId().getValue(), ReconstructMarkAction.ClearJobs));
                // if we have spm, stop spm and reset cache (resetIrs)
                commandSucceeded = commandSucceeded && Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DisconnectStoragePool, new DisconnectStoragePoolVDSCommandParameters(getVds().getId(), getStoragePool().getId(), getVds().getvds_spm_id())).getSucceeded();
                if (!commandSucceeded) {
                    return false;
                }
                List<storage_pool_iso_map> domains = DbFacade.getInstance().getStoragePoolIsoMapDAO().getAllForStoragePool(getStoragePool().getId());
                for (storage_pool_iso_map domain : domains) {
                    if (domain.getstatus() == null || domain.getstatus() == StorageDomainStatus.Unknown) {
                        domain.setstatus(StorageDomainStatus.Active);
                    } else if (domain.getstatus() == StorageDomainStatus.Locked) {
                        throw new VdcBLLException(VdcBllErrors.CANT_RECONSTRUCT_WHEN_A_DOMAIN_IN_POOL_IS_LOCKED, "Cannot reconstruct master domain when a domain in the pool is " + "locked.");
                    }
                }
                commandSucceeded = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ReconstructMaster, new ReconstructMasterVDSCommandParameters(getVds().getId(), getStoragePool().getId(), getStoragePool().getname(), _newMasterStorageDomainId, domains, getStoragePool().getmaster_domain_version())).getSucceeded();
                return commandSucceeded;
            }
        });
        connectAndRefreshAllUpHosts(commandSucceeded);
        if (!_isLastMaster && commandSucceeded) {
            SearchParameters p = new SearchParameters(MessageFormat.format(DesktopsInStoragePoolQuery, getStoragePool().getname()), SearchType.VM);
            p.setMaxCount(Integer.MAX_VALUE);
            @SuppressWarnings("unchecked")
            List<VM> vmsInPool = (List<VM>) Backend.getInstance().runInternalQuery(VdcQueryType.Search, p).getReturnValue();
            VmCommand.UpdateVmInSpm(getStoragePool().getId(), vmsInPool);
        }
        setSucceeded(commandSucceeded);
    } finally {
        // reset cache and mark reconstruct for pool as finished
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new MarkPoolInReconstructModeVDSCommandParameters(getStoragePoolId().getValue(), ReconstructMarkAction.ClearCache));
    }
}
#method_after
@Override
protected void executeCommand() {
    try {
        Boolean commandSucceeded = reconstructMaster();
        connectAndRefreshAllUpHosts(commandSucceeded);
        if (!_isLastMaster && commandSucceeded) {
            SearchParameters p = new SearchParameters(MessageFormat.format(DesktopsInStoragePoolQuery, getStoragePool().getname()), SearchType.VM);
            p.setMaxCount(Integer.MAX_VALUE);
            @SuppressWarnings("unchecked")
            List<VM> vmsInPool = (List<VM>) Backend.getInstance().runInternalQuery(VdcQueryType.Search, p).getReturnValue();
            VmCommand.UpdateVmInSpm(getStoragePool().getId(), vmsInPool);
        }
        setSucceeded(commandSucceeded);
    } finally {
        // Reset cache and mark reconstruct for pool as finished
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new MarkPoolInReconstructModeVDSCommandParameters(getStoragePoolId().getValue(), ReconstructMarkAction.ClearCache));
    }
}
#end_block

#method_before
private void connectAndRefreshAllUpHosts(final boolean commandSucceeded) {
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            try {
                for (VDS vds : getAllRunningVdssInPool()) {
                    try {
                        if (!_isLastMaster && commandSucceeded) {
                            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getvds_spm_id(), getMasterDomainIdFromDb(), getStoragePool().getmaster_domain_version()));
                            if (returnValue.getSucceeded()) {
                                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RefreshStoragePool, new RefreshStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version()));
                            } else {
                                log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnValue.getVdsError().getMessage());
                            }
                        }
                        // only if we deactivate the storage domain we want to disconnect from it.
                        if (getParameters().getIsInactive()) {
                            StorageHelperDirector.getInstance().getItem(getStorageDomain().getstorage_type()).DisconnectStorageFromDomainByVdsId(getStorageDomain(), vds.getId());
                        }
                    } catch (Exception e) {
                        log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}", vds.getId(), e.getMessage());
                    }
                }
            } catch (Exception ex) {
                log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on all up hosts in the pool. error {0}", ex.getMessage());
            }
            return null;
        }
    });
}
#method_after
private void connectAndRefreshAllUpHosts(final boolean commandSucceeded) {
    TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, new TransactionMethod<Object>() {

        @Override
        public Object runInTransaction() {
            try {
                for (VDS vds : getAllRunningVdssInPool()) {
                    try {
                        if (!_isLastMaster && commandSucceeded) {
                            VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStoragePool, new ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getvds_spm_id(), getMasterDomainIdFromDb(), getStoragePool().getmaster_domain_version()));
                            if (returnValue.getSucceeded()) {
                                Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RefreshStoragePool, new RefreshStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version()));
                            } else {
                                log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnValue.getVdsError().getMessage());
                            }
                        }
                        // only if we deactivate the storage domain we want to disconnect from it.
                        if (getParameters().isInactive()) {
                            StorageHelperDirector.getInstance().getItem(getStorageDomain().getstorage_type()).DisconnectStorageFromDomainByVdsId(getStorageDomain(), vds.getId());
                        }
                    } catch (Exception e) {
                        log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}", vds.getId(), e.getMessage());
                    }
                }
            } catch (Exception ex) {
                log.errorFormat("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on all up hosts in the pool. error {0}", ex.getMessage());
            }
            return null;
        }
    });
}
#end_block

#method_before
private void setHost(ListModel value) {
    privateHost = value;
}
#method_after
public void setHost(ListModel value) {
    privateHost = value;
}
#end_block

#method_before
@Override
public void Initialize() {
    super.Initialize();
    setHash(getHashName() + new Date());
    InitDataCenter();
}
#method_after
@Override
public void Initialize() {
    super.Initialize();
    setHash(getHashName() + new Date());
    behavior.setHash(getHash());
    InitDataCenter();
}
#end_block

#method_before
private void Frontend_QueryStarted() {
    queryCounter++;
    if (getProgress() == null) {
        StartProgress(null);
    }
}
#method_after
public void Frontend_QueryStarted() {
    queryCounter++;
    if (getProgress() == null) {
        StartProgress(null);
    }
}
#end_block

#method_before
private void Frontend_QueryComplete() {
    queryCounter--;
    if (queryCounter == 0) {
        StopProgress();
    }
}
#method_after
public void Frontend_QueryComplete() {
    queryCounter--;
    if (queryCounter == 0) {
        StopProgress();
    }
}
#end_block

#method_before
private void DataCenter_SelectedItemChanged() {
    UpdateItemsAvailability();
    UpdateFormat();
    UpdateHost();
}
#method_after
private void DataCenter_SelectedItemChanged() {
    UpdateItemsAvailability();
}
#end_block

#method_before
private void Host_SelectedItemChanged() {
    VDS host = (VDS) getHost().getSelectedItem();
    if (getSelectedItem() != null) {
        // When changing host clear items for san storage model.
        if (getSelectedItem() instanceof SanStorageModelBase && getStorage() == null) {
            SanStorageModelBase sanStorageModel = (SanStorageModelBase) getSelectedItem();
            sanStorageModel.setItems(null);
        }
        if (host != null) {
            getSelectedItem().getUpdateCommand().Execute();
            VDSType vdsType = ((VDS) this.getHost().getSelectedItem()).getvds_type();
            // $NON-NLS-1$
            String prefix = vdsType.equals(VDSType.oVirtNode) ? localFSPath : "";
            if (!StringHelper.isNullOrEmpty(prefix)) {
                for (Object item : getItems()) {
                    if (item instanceof LocalStorageModel) {
                        LocalStorageModel model = (LocalStorageModel) item;
                        model.getPath().setEntity(prefix);
                        model.getPath().setIsChangable(false);
                    }
                }
            }
        }
    }
}
#method_after
private void Host_SelectedItemChanged() {
    VDS host = (VDS) getHost().getSelectedItem();
    if (getSelectedItem() != null) {
        // When changing host clear items for san storage model.
        if (getSelectedItem() instanceof SanStorageModelBase) {
            SanStorageModelBase sanStorageModel = (SanStorageModelBase) getSelectedItem();
            sanStorageModel.setHash(getHash());
            if (getStorage() == null) {
                sanStorageModel.setItems(null);
            }
        }
        if (host != null) {
            getSelectedItem().getUpdateCommand().Execute();
            VDSType vdsType = ((VDS) this.getHost().getSelectedItem()).getvds_type();
            // $NON-NLS-1$
            String prefix = vdsType.equals(VDSType.oVirtNode) ? localFSPath : "";
            if (!StringHelper.isNullOrEmpty(prefix)) {
                for (Object item : getItems()) {
                    if (item instanceof LocalStorageModel) {
                        LocalStorageModel model = (LocalStorageModel) item;
                        model.getPath().setEntity(prefix);
                        model.getPath().setIsChangable(false);
                    }
                }
            }
        }
    }
}
#end_block

#method_before
private void UpdateHost() {
    if (getDataCenter().getItems() == null) {
        return;
    }
    storage_pool dataCenter = (storage_pool) getDataCenter().getSelectedItem();
    if (getSelectedItem() instanceof LocalStorageModel && (dataCenter == null || dataCenter.getId().equals(UnassignedDataCenterId))) {
        ArrayList<storage_pool> dataCenterList = (ArrayList<storage_pool>) getDataCenter().getItems();
        ArrayList<storage_pool> localDCList = new ArrayList<storage_pool>();
        // $NON-NLS-1$
        String dataCenterQueryLine = "";
        for (storage_pool storagePool : dataCenterList) {
            if (storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
                localDCList.add(storagePool);
            }
        }
        if (localDCList.size() > 0) {
            int i = 0;
            for (; i < localDCList.size() - 1; i++) {
                // $NON-NLS-1$ //$NON-NLS-2$
                dataCenterQueryLine += "datacenter=" + localDCList.get(i).getname() + " or ";
            }
            // $NON-NLS-1$
            dataCenterQueryLine += "datacenter=" + localDCList.get(i).getname();
            AsyncQuery _asyncQuery = new AsyncQuery();
            _asyncQuery.setModel(this);
            _asyncQuery.setContext(getHash());
            _asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object ReturnValue) {
                    StorageModel storageModel = (StorageModel) model;
                    Iterable<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
                    storageModel.PostUpdateHost(hosts);
                }
            };
            Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
            SearchParameters(// $NON-NLS-1$
            "Hosts: status=Up " + dataCenterQueryLine, SearchType.VDS), _asyncQuery);
        }
    } else {
        if (dataCenter == null || dataCenter.getId().equals(UnassignedDataCenterId)) {
            AsyncDataProvider.GetHostList(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    StorageModel storageModel = (StorageModel) target;
                    Iterable<VDS> hosts = (Iterable<VDS>) returnValue;
                    storageModel.PostUpdateHost(hosts);
                }
            }, getHash()));
        } else {
            AsyncDataProvider.GetHostListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    StorageModel storageModel = (StorageModel) target;
                    Iterable<VDS> hosts = (Iterable<VDS>) returnValue;
                    storageModel.PostUpdateHost(hosts);
                }
            }, getHash()), dataCenter.getname());
        }
    }
}
#method_after
void UpdateHost() {
    if (getDataCenter().getItems() == null) {
        return;
    }
    if (getSelectedItem() == null) {
        return;
    }
    storage_pool dataCenter = (storage_pool) getDataCenter().getSelectedItem();
    if (getSelectedItem() instanceof LocalStorageModel && (dataCenter == null || dataCenter.getId().equals(UnassignedDataCenterId))) {
        ArrayList<storage_pool> dataCenterList = (ArrayList<storage_pool>) getDataCenter().getItems();
        ArrayList<storage_pool> localDCList = new ArrayList<storage_pool>();
        // $NON-NLS-1$
        String dataCenterQueryLine = "";
        for (storage_pool storagePool : dataCenterList) {
            if (storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
                localDCList.add(storagePool);
            }
        }
        if (localDCList.size() > 0) {
            int i = 0;
            for (; i < localDCList.size() - 1; i++) {
                // $NON-NLS-1$ //$NON-NLS-2$
                dataCenterQueryLine += "datacenter=" + localDCList.get(i).getname() + " or ";
            }
            // $NON-NLS-1$
            dataCenterQueryLine += "datacenter=" + localDCList.get(i).getname();
            AsyncQuery _asyncQuery = new AsyncQuery();
            _asyncQuery.setModel(this);
            _asyncQuery.setContext(getHash());
            _asyncQuery.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object ReturnValue) {
                    StorageModel storageModel = (StorageModel) model;
                    Iterable<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
                    storageModel.PostUpdateHost(hosts);
                }
            };
            Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
            SearchParameters(// $NON-NLS-1$
            "Hosts: status=Up " + dataCenterQueryLine, SearchType.VDS), _asyncQuery);
        }
    } else {
        if (dataCenter == null || dataCenter.getId().equals(UnassignedDataCenterId)) {
            AsyncDataProvider.GetHostList(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    StorageModel storageModel = (StorageModel) target;
                    Iterable<VDS> hosts = (Iterable<VDS>) returnValue;
                    storageModel.PostUpdateHost(hosts);
                }
            }, getHash()));
        } else {
            AsyncDataProvider.GetHostListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    StorageModel storageModel = (StorageModel) target;
                    Iterable<VDS> hosts = (Iterable<VDS>) returnValue;
                    storageModel.PostUpdateHost(hosts);
                }
            }, getHash()), dataCenter.getId());
        }
    }
}
#end_block

#method_before
public void PostUpdateHost(Iterable<VDS> hosts) {
    // Filter hosts
    hosts = Linq.Where(hosts, new Linq.HostStatusPredicate(VDSStatus.Up));
    // Allow only hosts with version above 2.2 for export storage.
    ArrayList<VDS> list = new ArrayList<VDS>();
    if (getSelectedItem() != null && getSelectedItem().getRole() == StorageDomainType.ImportExport) {
        for (VDS host : hosts) {
            if (// $NON-NLS-1$
            host.getvds_group_compatibility_version().compareTo(new Version("2.2")) >= 0) {
                list.add(host);
            }
        }
        hosts = list;
    }
    VDS oldSelectedItem = (VDS) getHost().getSelectedItem();
    getHost().setItems(hosts);
    // Try to select previously selected host.
    if (oldSelectedItem != null) {
        getHost().setSelectedItem(Linq.FirstOrDefault(hosts, new Linq.HostPredicate(oldSelectedItem.getId())));
    }
    // Try to select an SPM host when edit storage.
    if (getHost().getSelectedItem() == null && getStorage() != null) {
        for (VDS host : hosts) {
            if (host.getspm_status() == VdsSpmStatus.SPM) {
                getHost().setSelectedItem(host);
                break;
            }
        }
    }
    // Select a default - first host in the list.
    if (getHost().getSelectedItem() == null) {
        getHost().setSelectedItem(Linq.FirstOrDefault(hosts));
    }
    if (queryCounter > 0) {
        queryCounter++;
    }
    StopProgress();
    getSelectedItem().getUpdateCommand().Execute();
}
#method_after
public void PostUpdateHost(Iterable<VDS> hosts) {
    // Filter hosts
    hosts = Linq.Where(hosts, new Linq.HostStatusPredicate(VDSStatus.Up));
    // Allow only hosts with version above 2.2 for export storage.
    ArrayList<VDS> list = new ArrayList<VDS>();
    if (getSelectedItem() != null && getSelectedItem().getRole() == StorageDomainType.ImportExport) {
        for (VDS host : hosts) {
            if (// $NON-NLS-1$
            host.getvds_group_compatibility_version().compareTo(new Version("2.2")) >= 0) {
                list.add(host);
            }
        }
        hosts = list;
    }
    VDS oldSelectedItem = (VDS) getHost().getSelectedItem();
    VDS selectedItem = null;
    getHost().setItems(hosts);
    // Try to select previously selected host.
    if (oldSelectedItem != null) {
        selectedItem = Linq.FirstOrDefault(hosts, new Linq.HostPredicate(oldSelectedItem.getId()));
    }
    // Try to select an SPM host when edit storage.
    if (selectedItem == null && getStorage() != null) {
        for (VDS host : hosts) {
            if (host.getspm_status() == VdsSpmStatus.SPM) {
                selectedItem = host;
                break;
            }
        }
    }
    // Select a default - first host in the list.
    if (selectedItem == null) {
        selectedItem = Linq.FirstOrDefault(hosts);
    }
    getHost().setSelectedItem(selectedItem);
}
#end_block

#method_before
private void UpdateFormat() {
    storage_pool dataCenter = (storage_pool) getDataCenter().getSelectedItem();
    StorageFormatType selectItem = StorageFormatType.V1;
    ArrayList<StorageFormatType> formats = new ArrayList<StorageFormatType>();
    if (dataCenter != null && getSelectedItem() != null) {
        if (!dataCenter.getId().equals(UnassignedDataCenterId)) {
            getFormat().setIsChangable(true);
            // If data center has format defined and the selected-item role is Data, choose it.
            if (dataCenter.getStoragePoolFormatType() != null && getSelectedItem().getRole() == StorageDomainType.Data) {
                formats.add(dataCenter.getStoragePoolFormatType());
                selectItem = dataCenter.getStoragePoolFormatType();
            } else // and in order to make the code more explicit, it is here. ***)
            if (getSelectedItem().getRole() == StorageDomainType.ISO || getSelectedItem().getRole() == StorageDomainType.ImportExport) {
                formats.add(StorageFormatType.V1);
            } else if (getSelectedItem().getType() == StorageType.NFS || getSelectedItem().getType() == StorageType.LOCALFS) {
                formats.add(StorageFormatType.V1);
            } else if ((getSelectedItem().getType() == StorageType.ISCSI || getSelectedItem().getType() == StorageType.FCP) && // $NON-NLS-1$
            dataCenter.getcompatibility_version().compareTo(Version.v3_0) < 0) {
                formats.add(StorageFormatType.V1);
            } else if ((getSelectedItem().getType() == StorageType.ISCSI || getSelectedItem().getType() == StorageType.FCP) && // $NON-NLS-1$
            dataCenter.getcompatibility_version().compareTo(Version.v3_0) >= 0) {
                formats.add(StorageFormatType.V2);
                selectItem = StorageFormatType.V2;
            }
            // If the Data Center is 3.1 we should display the V3 option
            if ((getSelectedItem().getType() == StorageType.ISCSI || getSelectedItem().getType() == StorageType.FCP) && // $NON-NLS-1$
            dataCenter.getcompatibility_version().compareTo(Version.v3_1) >= 0) {
                formats.add(StorageFormatType.V3);
            }
        } else // Unassigned DC:
        {
            getFormat().setIsChangable(true);
            formats.add(StorageFormatType.V1);
            if ((getSelectedItem().getType() == StorageType.FCP || getSelectedItem().getType() == StorageType.ISCSI) && getSelectedItem().getRole() == StorageDomainType.Data) {
                formats.add(StorageFormatType.V2);
                selectItem = StorageFormatType.V2;
            }
        }
    }
    getFormat().setItems(formats);
    getFormat().setSelectedItem(selectItem);
}
#method_after
void UpdateFormat() {
    storage_pool dataCenter = (storage_pool) getDataCenter().getSelectedItem();
    StorageFormatType selectItem = StorageFormatType.V1;
    ArrayList<StorageFormatType> formats = new ArrayList<StorageFormatType>();
    if (dataCenter != null && getSelectedItem() != null) {
        if (!dataCenter.getId().equals(UnassignedDataCenterId)) {
            getFormat().setIsChangable(false);
            // If data center has format defined and the selected-item role is Data, choose it.
            if (dataCenter.getStoragePoolFormatType() != null && getSelectedItem().getRole() == StorageDomainType.Data) {
                formats.add(dataCenter.getStoragePoolFormatType());
                selectItem = dataCenter.getStoragePoolFormatType();
            } else // and in order to make the code more explicit, it is here. ***)
            if ((getSelectedItem().getRole() == StorageDomainType.ISO || getSelectedItem().getRole() == StorageDomainType.ImportExport) && (dataCenter.getcompatibility_version().compareTo(Version.v3_1) < 0)) {
                formats.add(StorageFormatType.V1);
            } else if ((getSelectedItem().getType() == StorageType.NFS || getSelectedItem().getType() == StorageType.LOCALFS) && (dataCenter.getcompatibility_version().compareTo(Version.v3_1) < 0)) {
                formats.add(StorageFormatType.V1);
            } else if ((getSelectedItem().getType() == StorageType.ISCSI || getSelectedItem().getType() == StorageType.FCP) && // $NON-NLS-1$
            dataCenter.getcompatibility_version().compareTo(Version.v3_0) < 0) {
                formats.add(StorageFormatType.V1);
            } else if ((getSelectedItem().getType() == StorageType.ISCSI || getSelectedItem().getType() == StorageType.FCP) && // $NON-NLS-1$
            dataCenter.getcompatibility_version().compareTo(Version.v3_0) == 0) {
                formats.add(StorageFormatType.V2);
                selectItem = StorageFormatType.V2;
            } else if (// $NON-NLS-1$
            dataCenter.getcompatibility_version().compareTo(Version.v3_1) >= 0) {
                formats.add(StorageFormatType.V3);
                selectItem = StorageFormatType.V3;
            }
        } else // Unassigned DC:
        {
            getFormat().setIsChangable(true);
            formats.add(StorageFormatType.V1);
            if ((getSelectedItem().getType() == StorageType.FCP || getSelectedItem().getType() == StorageType.ISCSI) && getSelectedItem().getRole() == StorageDomainType.Data) {
                formats.add(StorageFormatType.V2);
                selectItem = StorageFormatType.V2;
            }
        }
    }
    getFormat().setItems(formats);
    getFormat().setSelectedItem(selectItem);
}
#end_block

#method_before
public void ChooseFirstItem() {
    boolean chooseFirst = false;
    if (getSelectedItem() != null) {
        Model selectedModel = (Model) getSelectedItem();
        if (!selectedModel.getIsSelectable()) {
            chooseFirst = true;
        }
        SelectStorageItem(selectedModel);
    } else {
        chooseFirst = true;
    }
    if (chooseFirst) {
        // New Domain and ISO role in case of Import Domain).
        for (IStorageModel item : Linq.<IStorageModel>Cast(getItems())) {
            Model model = (Model) item;
            if (model.getIsSelectable()) {
                setSelectedItem(item);
                SelectStorageItem(model);
                break;
            }
        }
    }
}
#method_after
public void ChooseFirstItem() {
    // first init to null
    setSelectedItem(null);
    boolean chooseFirst = false;
    if (getSelectedItem() != null) {
        Model selectedModel = (Model) getSelectedItem();
        if (!selectedModel.getIsSelectable()) {
            chooseFirst = true;
        }
        SelectStorageItem(selectedModel);
    } else {
        chooseFirst = true;
    }
    if (chooseFirst) {
        // New Domain and ISO role in case of Import Domain).
        for (IStorageModel item : Linq.<IStorageModel>Cast(getItems())) {
            Model model = (Model) item;
            if (model.getIsSelectable()) {
                setSelectedItem(item);
                SelectStorageItem(model);
                break;
            }
        }
    }
}
#end_block

#method_before
private AddVmFromTemplateCommand<AddVmFromTemplateParameters> createVmFromTemplateCommand(VM vm) {
    AddVmFromTemplateParameters param = new AddVmFromTemplateParameters();
    param.setVm(vm);
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> concrete = new AddVmFromTemplateCommand<AddVmFromTemplateParameters>(param) {

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }
    };
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> result = spy(concrete);
    doReturn(true).when(result).checkNumberOfMonitors();
    doReturn(createVmTemplate()).when(result).getVmTemplate();
    doReturn(Collections.emptyList()).when(result).validateCustomProperties(any(VmStatic.class));
    mockDAOs(result);
    mockBackend(result);
    return result;
}
#method_after
private AddVmFromTemplateCommand<AddVmFromTemplateParameters> createVmFromTemplateCommand(VM vm) {
    AddVmFromTemplateParameters param = new AddVmFromTemplateParameters();
    param.setVm(vm);
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> concrete = new AddVmFromTemplateCommand<AddVmFromTemplateParameters>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }
    };
    AddVmFromTemplateCommand<AddVmFromTemplateParameters> result = spy(concrete);
    doReturn(true).when(result).checkNumberOfMonitors();
    doReturn(createVmTemplate()).when(result).getVmTemplate();
    doReturn(Collections.emptyList()).when(result).validateCustomProperties(any(VmStatic.class));
    mockDAOs(result);
    mockBackend(result);
    return result;
}
#end_block

#method_before
private AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> createVmFromSnapshotCommand(VM vm, Guid sourceSnapshotId) {
    AddVmFromSnapshotParameters param = new AddVmFromSnapshotParameters();
    param.setVm(vm);
    param.setSourceSnapshotId(sourceSnapshotId);
    param.setStorageDomainId(Guid.NewGuid());
    AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> cmd = new AddVmFromSnapshotCommand<AddVmFromSnapshotParameters>(param) {

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }
    };
    cmd = spy(cmd);
    doReturn(vm).when(cmd).getVm();
    mockDAOs(cmd);
    doReturn(snapshotDao).when(cmd).getSnapshotDao();
    mockBackend(cmd);
    return cmd;
}
#method_after
private AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> createVmFromSnapshotCommand(VM vm, Guid sourceSnapshotId) {
    AddVmFromSnapshotParameters param = new AddVmFromSnapshotParameters();
    param.setVm(vm);
    param.setSourceSnapshotId(sourceSnapshotId);
    param.setStorageDomainId(Guid.NewGuid());
    AddVmFromSnapshotCommand<AddVmFromSnapshotParameters> cmd = new AddVmFromSnapshotCommand<AddVmFromSnapshotParameters>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // Stub for testing
        }
    };
    cmd = spy(cmd);
    doReturn(vm).when(cmd).getVm();
    mockDAOs(cmd);
    doReturn(snapshotDao).when(cmd).getSnapshotDao();
    mockBackend(cmd);
    return cmd;
}
#end_block

#method_before
private AddVmCommand<VmManagementParametersBase> createCommand(VM vm) {
    VmManagementParametersBase param = new VmManagementParametersBase(vm);
    AddVmCommand<VmManagementParametersBase> cmd = spy(new AddVmCommandDummy(param));
    mockDAOs(cmd);
    mockBackend(cmd);
    return cmd;
}
#method_after
private AddVmCommand<VmManagementParametersBase> createCommand(VM vm) {
    VmManagementParametersBase param = new VmManagementParametersBase(vm);
    AddVmCommand<VmManagementParametersBase> cmd = new AddVmCommand<VmManagementParametersBase>(param) {

        @Override
        protected void initTemplateDisks() {
        // Stub for testing
        }

        @Override
        protected void initStoragePoolId() {
        // stub for testing
        }

        @Override
        protected int getNeededDiskSize(Guid domainId) {
            return getBlockSparseInitSizeInGB() * getVmTemplate().getDiskMap().size();
        }
    };
    cmd = spy(cmd);
    mockDAOs(cmd);
    mockBackend(cmd);
    return cmd;
}
#end_block

#method_before
private Principal setUpLoginExpectations(boolean canDo, boolean success) {
    VdcReturnValueBase result = control.createMock(VdcReturnValueBase.class);
    Principal principal = new Principal(USER, SECRET, DOMAIN);
    expect(backend.Login((LoginUserParameters) eqActionParams(LoginUserParameters.class, new String[] { "UserName", "UserPassword", "Domain", "ActionType", "SessionId" }, new Object[] { USER, SECRET, DOMAIN, VdcActionType.LoginAdminUser, session.getSessionId() }))).andReturn(result);
    expect(result.getCanDoAction()).andReturn(canDo);
    expect(result.getSucceeded()).andReturn(success).anyTimes();
    VdcUser user = control.createMock(VdcUser.class);
    if (canDo && success) {
        expect(result.getActionReturnValue()).andReturn(user);
        VdcQueryReturnValue appModeResult = new VdcQueryReturnValue();
        appModeResult.setReturnValue(255);
        appModeResult.setSucceeded(true);
        expect(backend.RunPublicQuery(eq(VdcQueryType.GetConfigurationValue), eqQueryParams(GetConfigurationValueParameters.class, new String[] { "ConfigValue" }, new Object[] { ConfigurationValues.ApplicationMode }))).andReturn(appModeResult);
        current.set(user);
        EasyMock.expectLastCall();
    }
    control.replay();
    return principal;
}
#method_after
private Principal setUpLoginExpectations(boolean canDo, boolean success) {
    VdcReturnValueBase result = control.createMock(VdcReturnValueBase.class);
    Principal principal = new Principal(USER, SECRET, DOMAIN);
    expect(backend.Login((LoginUserParameters) eqActionParams(LoginUserParameters.class, new String[] { "UserName", "UserPassword", "Domain", "ActionType", "SessionId" }, new Object[] { USER, SECRET, DOMAIN, VdcActionType.LoginUser, session.getSessionId() }))).andReturn(result);
    expect(result.getCanDoAction()).andReturn(canDo);
    expect(result.getSucceeded()).andReturn(success).anyTimes();
    VdcUser user = control.createMock(VdcUser.class);
    if (canDo && success) {
        expect(result.getActionReturnValue()).andReturn(user);
        VdcQueryReturnValue appModeResult = new VdcQueryReturnValue();
        appModeResult.setReturnValue(255);
        appModeResult.setSucceeded(true);
        expect(backend.RunPublicQuery(eq(VdcQueryType.GetConfigurationValue), eqQueryParams(GetConfigurationValueParameters.class, new String[] { "ConfigValue" }, new Object[] { ConfigurationValues.ApplicationMode }))).andReturn(appModeResult);
        current.set(user);
        EasyMock.expectLastCall();
    }
    control.replay();
    return principal;
}
#end_block

#method_before
protected void verifyApiGlusterOnly(API api) {
    assertNotNull(api);
    assertNotNull(api.getTime());
    assertNotNull(api.getLinks());
    assertEquals(relationshipsGlusterOnly.length, api.getLinks().size());
    for (int i = 0; i < relationshipsGlusterOnly.length; i++) {
        Link l = api.getLinks().get(i);
        assertNotNull(l);
        assertEquals(relationshipsGlusterOnly[i], l.getRel());
        assertEquals(hrefsGlusterOnly[i], l.getHref());
    }
    assertNotNull(api.getSpecialObjects());
    assertContainsRootTag(api.getSpecialObjects());
    assertNotContainsBlankTemplate(api.getSpecialObjects());
    assertNotNull(api.getProductInfo());
    assertNotNull(api.getProductInfo().getVersion());
    assertEquals(MAJOR, api.getProductInfo().getVersion().getMajor().intValue());
    assertEquals(MINOR, api.getProductInfo().getVersion().getMinor().intValue());
    assertEquals(BUILD, api.getProductInfo().getVersion().getBuild().intValue());
    assertEquals(REVISION, api.getProductInfo().getVersion().getRevision().intValue());
    assertNotNull(api.getSummary());
    assertEquals(TOTAL_HOSTS, api.getSummary().getHosts().getTotal());
    assertEquals(ACTIVE_HOSTS, api.getSummary().getHosts().getActive());
    assertEquals(TOTAL_USERS, api.getSummary().getUsers().getTotal());
    assertEquals(ACTIVE_USERS, api.getSummary().getUsers().getActive());
}
#method_after
protected void verifyApiGlusterOnly(API api) {
    assertNotNull(api);
    assertNotNull(api.getTime());
    assertNotNull(api.getLinks());
    assertEquals(relationshipsGlusterOnly.length, api.getLinks().size());
    for (int i = 0; i < relationshipsGlusterOnly.length; i++) {
        Link l = api.getLinks().get(i);
        assertNotNull(l);
        assertEquals(relationshipsGlusterOnly[i], l.getRel());
        assertEquals(hrefsGlusterOnly[i], l.getHref());
    }
    assertNotNull(api.getSpecialObjects());
    assertContainsRootTag(api.getSpecialObjects());
    assertNotNull(api.getProductInfo());
    assertNotNull(api.getProductInfo().getVersion());
    assertEquals(MAJOR, api.getProductInfo().getVersion().getMajor().intValue());
    assertEquals(MINOR, api.getProductInfo().getVersion().getMinor().intValue());
    assertEquals(BUILD, api.getProductInfo().getVersion().getBuild().intValue());
    assertEquals(REVISION, api.getProductInfo().getVersion().getRevision().intValue());
    assertNotNull(api.getSummary());
    assertEquals(TOTAL_HOSTS, api.getSummary().getHosts().getTotal());
    assertEquals(ACTIVE_HOSTS, api.getSummary().getHosts().getActive());
    assertEquals(TOTAL_USERS, api.getSummary().getUsers().getTotal());
    assertEquals(ACTIVE_USERS, api.getSummary().getUsers().getActive());
}
#end_block

#method_before
@Override
public Clusters list() {
    if (isFiltered())
        return mapCollection(getBackendCollection(VdcQueryType.GetAllVdsGroups, new VdcQueryParametersBase()));
    else
        return mapCollection(getBackendCollection(SearchType.Cluster));
}
#method_after
@Override
public Clusters list() {
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    if (appMode == ApplicationMode.VirtOnly) {
        return listVirtOnly();
    } else {
        return listAll();
    }
}
#end_block

#method_before
private Clusters mapCollection(List<VDSGroup> entities) {
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    Clusters collection = new Clusters();
    for (org.ovirt.engine.core.common.businessentities.VDSGroup entity : entities) {
        if (appMode == ApplicationMode.VirtOnly) {
            collection.getClusters().add(addLinks(map(entity), "glusterVolumes"));
        } else {
            collection.getClusters().add(addLinks(map(entity)));
        }
    }
    return collection;
}
#method_after
private Clusters mapCollection(List<VDSGroup> entities) {
    Clusters collection = new Clusters();
    for (org.ovirt.engine.core.common.businessentities.VDSGroup entity : entities) {
        collection.getClusters().add(addLinks(map(entity)));
    }
    return collection;
}
#end_block

#method_before
@Override
public Hosts list() {
    if (isFiltered())
        return mapCollection(getBackendCollection(VdcQueryType.GetAllHosts, new VdcQueryParametersBase()));
    else
        return mapCollection(getBackendCollection(SearchType.VDS));
}
#method_after
@Override
public Hosts list() {
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    if (appMode == ApplicationMode.GlusterOnly) {
        return listGlusterOnly();
    } else {
        return listAll();
    }
}
#end_block

#method_before
private Hosts mapCollection(List<VDS> entities) {
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    Hosts collection = new Hosts();
    for (VDS entity : entities) {
        if (appMode == ApplicationMode.GlusterOnly) {
            collection.getHosts().add(addLinks(populate(map(entity), entity), "storage"));
        } else {
            collection.getHosts().add(addLinks(populate(map(entity), entity)));
        }
    }
    return collection;
}
#method_after
private Hosts mapCollection(List<VDS> entities) {
    Hosts collection = new Hosts();
    for (VDS entity : entities) {
        collection.getHosts().add(addLinks(populate(map(entity), entity)));
    }
    return collection;
}
#end_block

#method_before
private Collection<DetailedLink> getLinks() {
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    if (appMode == ApplicationMode.GlusterOnly) {
        return getGlusterOnlyLinks();
    }
    Collection<DetailedLink> links = new LinkedList<DetailedLink>();
    links.add(createLink("capabilities"));
    links.add(createLink("clusters", LinkFlags.SEARCHABLE));
    links.add(createLink("datacenters", LinkFlags.SEARCHABLE));
    links.add(createLink("events", LinkFlags.SEARCHABLE, getEventParams()));
    links.add(createLink("hosts", LinkFlags.SEARCHABLE));
    links.add(createLink("networks"));
    links.add(createLink("roles"));
    links.add(createLink("storagedomains", LinkFlags.SEARCHABLE));
    links.add(createLink("tags"));
    links.add(createLink("templates", LinkFlags.SEARCHABLE));
    links.add(createLink("users", LinkFlags.SEARCHABLE));
    links.add(createLink("groups", LinkFlags.SEARCHABLE));
    links.add(createLink("domains"));
    links.add(createLink("vmpools", LinkFlags.SEARCHABLE));
    links.add(createLink("vms", LinkFlags.SEARCHABLE));
    links.add(createLink("disks", LinkFlags.SEARCHABLE));
    return links;
}
#method_after
private Collection<DetailedLink> getLinks() {
    Collection<DetailedLink> links = new LinkedList<DetailedLink>();
    links.add(createLink("capabilities"));
    links.add(createLink("clusters", LinkFlags.SEARCHABLE));
    links.add(createLink("datacenters", LinkFlags.SEARCHABLE));
    links.add(createLink("events", LinkFlags.SEARCHABLE, getEventParams()));
    links.add(createLink("hosts", LinkFlags.SEARCHABLE));
    links.add(createLink("networks"));
    links.add(createLink("roles"));
    links.add(createLink("storagedomains", LinkFlags.SEARCHABLE));
    links.add(createLink("tags"));
    links.add(createLink("templates", LinkFlags.SEARCHABLE));
    links.add(createLink("users", LinkFlags.SEARCHABLE));
    links.add(createLink("groups", LinkFlags.SEARCHABLE));
    links.add(createLink("domains"));
    links.add(createLink("vmpools", LinkFlags.SEARCHABLE));
    links.add(createLink("vms", LinkFlags.SEARCHABLE));
    links.add(createLink("disks", LinkFlags.SEARCHABLE));
    return links;
}
#end_block

#method_before
private API getApi() {
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    API api = new API();
    api.setTime(DateMapper.map(new Date(), null));
    for (DetailedLink detailedLink : getLinks()) {
        // add thin link
        api.getLinks().add(LinkHelper.createLink(detailedLink.getHref(), detailedLink.getRel()));
        // when required - add extra link for search
        if (detailedLink.isSetLinkCapabilities() && detailedLink.getLinkCapabilities().isSetSearchable() && detailedLink.getLinkCapabilities().isSearchable()) {
            api.getLinks().add(LinkHelper.createLink(detailedLink.getHref(), detailedLink.getRel(), detailedLink.getRequest().getUrl().getParametersSets()));
        }
        // add special links
        api.setSpecialObjects(new SpecialObjects());
        if (appMode != ApplicationMode.GlusterOnly) {
            api.getSpecialObjects().getLinks().add(createBlankTemplateLink());
        }
        api.getSpecialObjects().getLinks().add(createRootTagLink());
    }
    return api;
}
#method_after
private API getApi() {
    API api = new API();
    api.setTime(DateMapper.map(new Date(), null));
    for (DetailedLink detailedLink : getLinks()) {
        // add thin link
        api.getLinks().add(LinkHelper.createLink(detailedLink.getHref(), detailedLink.getRel()));
        // when required - add extra link for search
        if (detailedLink.isSetLinkCapabilities() && detailedLink.getLinkCapabilities().isSetSearchable() && detailedLink.getLinkCapabilities().isSearchable()) {
            api.getLinks().add(LinkHelper.createLink(detailedLink.getHref(), detailedLink.getRel(), detailedLink.getRequest().getUrl().getParametersSets()));
        }
        // add special links
        api.setSpecialObjects(new SpecialObjects());
        api.getSpecialObjects().getLinks().add(createBlankTemplateLink());
        api.getSpecialObjects().getLinks().add(createRootTagLink());
    }
    return api;
}
#end_block

#method_before
private String addPath(UriBuilder uriBuilder, Link link) {
    String query = "";
    String path = relative(link);
    // otherwise UriBuilder.build() will substitute {query}
    if (path.contains("?")) {
        query = path.substring(path.indexOf("?"));
        path = path.substring(0, path.indexOf("?"));
    }
    link = JAXBHelper.clone(OBJECT_FACTORY.createLink(link));
    link.setHref(uriBuilder.clone().path(path).build() + query);
    return LinkHeader.format(link);
}
#method_after
private String addPath(UriBuilder uriBuilder, Link link) {
    String query = "";
    String matrix = "";
    String path = relative(link);
    // otherwise UriBuilder.build() will substitute {query}
    if (path.contains("?")) {
        query = path.substring(path.indexOf("?"));
        path = path.substring(0, path.indexOf("?"));
    }
    // otherwise UriBuilder.build() will substitute {matrix}
    if (path.contains(";")) {
        matrix = path.substring(path.indexOf(";"));
        path = path.substring(0, path.indexOf(";"));
    }
    link = JAXBHelper.clone(OBJECT_FACTORY.createLink(link));
    link.setHref(uriBuilder.clone().path(path).build().toString() + matrix + query);
    return LinkHeader.format(link);
}
#end_block

#method_before
@Override
public Response head() {
    API api = getApi();
    return getResponseBuilder(api).build();
}
#method_after
@Override
public Response head() {
    appMode = getCurrent().get(ApplicationMode.class);
    API api = null;
    if (appMode == ApplicationMode.GlusterOnly) {
        api = getGlusterApi();
    } else {
        api = getApi();
    }
    return getResponseBuilder(api).build();
}
#end_block

#method_before
@Override
public Response get() {
    if (QueryHelper.hasConstraint(getUriInfo(), RSDL_CONSTRAINT_PARAMETER)) {
        RSDL rsdl = addSystemVersion(getRSDL());
        return Response.ok().entity(rsdl).build();
    } else if (QueryHelper.hasConstraint(getUriInfo(), SCHEMA_CONSTRAINT_PARAMETER)) {
        return getSchema();
    } else {
        BaseResource response = addSummary(addSystemVersion(getApi()));
        return getResponseBuilder(response).entity(response).build();
    }
}
#method_after
@Override
public Response get() {
    appMode = getCurrent().get(ApplicationMode.class);
    if (QueryHelper.hasConstraint(getUriInfo(), RSDL_CONSTRAINT_PARAMETER)) {
        RSDL rsdl = addSystemVersion(getRSDL());
        return Response.ok().entity(rsdl).build();
    } else if (QueryHelper.hasConstraint(getUriInfo(), SCHEMA_CONSTRAINT_PARAMETER)) {
        return getSchema();
    } else {
        BaseResource response = null;
        if (appMode == ApplicationMode.GlusterOnly) {
            response = addGlusterSummary(addSystemVersion(getGlusterApi()));
        } else {
            response = addSummary(addSystemVersion(getApi()));
        }
        return getResponseBuilder(response).entity(response).build();
    }
}
#end_block

#method_before
private API addSummary(API api) {
    HashMap<String, Integer> stats = getSystemStatistics();
    ApplicationMode appMode = getCurrent().get(ApplicationMode.class);
    ApiSummary summary = new ApiSummary();
    if (appMode != ApplicationMode.GlusterOnly) {
        summary.setVMs(new VMs());
        summary.getVMs().setTotal(get(stats, "total_vms"));
        summary.getVMs().setActive(get(stats, "active_vms"));
    }
    summary.setHosts(new Hosts());
    summary.getHosts().setTotal(get(stats, "total_vds"));
    summary.getHosts().setActive(get(stats, "active_vds"));
    summary.setUsers(new Users());
    summary.getUsers().setTotal(get(stats, "total_users"));
    summary.getUsers().setActive(get(stats, "active_users"));
    if (appMode != ApplicationMode.GlusterOnly) {
        summary.setStorageDomains(new StorageDomains());
        summary.getStorageDomains().setTotal(get(stats, "total_storage_domains"));
        summary.getStorageDomains().setActive(get(stats, "active_storage_domains"));
    }
    api.setSummary(summary);
    return api;
}
#method_after
private API addSummary(API api) {
    HashMap<String, Integer> stats = getSystemStatistics();
    ApiSummary summary = new ApiSummary();
    summary.setVMs(new VMs());
    summary.getVMs().setTotal(get(stats, "total_vms"));
    summary.getVMs().setActive(get(stats, "active_vms"));
    summary.setHosts(new Hosts());
    summary.getHosts().setTotal(get(stats, "total_vds"));
    summary.getHosts().setActive(get(stats, "active_vds"));
    summary.setUsers(new Users());
    summary.getUsers().setTotal(get(stats, "total_users"));
    summary.getUsers().setActive(get(stats, "active_users"));
    summary.setStorageDomains(new StorageDomains());
    summary.getStorageDomains().setTotal(get(stats, "total_storage_domains"));
    summary.getStorageDomains().setActive(get(stats, "active_storage_domains"));
    api.setSummary(summary);
    return api;
}
#end_block

#method_before
@Override
public boolean validate(Principal principal, String sessionId) {
    if (principal.getDomain() == null) {
        return loginFailure(principal, NO_DOMAIN);
    }
    LoginUserParameters params = new LoginUserParameters(principal.getUser(), principal.getSecret(), principal.getDomain(), null, null, null);
    params.setActionType(VdcActionType.LoginAdminUser);
    sessionHelper.setSessionId(sessionId);
    VdcReturnValueBase ret = backend.Login(sessionHelper.sessionize(params));
    if (ret.getCanDoAction() && ret.getSucceeded()) {
        return loginSuccess(principal, ret);
    } else {
        return loginFailure(principal, reasons(ret));
    }
}
#method_after
@Override
public boolean validate(Principal principal, String sessionId) {
    if (principal.getDomain() == null) {
        return loginFailure(principal, NO_DOMAIN);
    }
    LoginUserParameters params = new LoginUserParameters(principal.getUser(), principal.getSecret(), principal.getDomain(), null, null, null);
    params.setActionType(VdcActionType.LoginUser);
    sessionHelper.setSessionId(sessionId);
    VdcReturnValueBase ret = backend.Login(sessionHelper.sessionize(params));
    if (ret.getCanDoAction() && ret.getSucceeded()) {
        return loginSuccess(principal, ret);
    } else {
        return loginFailure(principal, reasons(ret));
    }
}
#end_block

#method_before
public static boolean CanRunVm(VM vm, ArrayList<String> message, RunVmParams runParams, VdsSelector vdsSelector, SnapshotsValidator snapshotsValidator, VmPropertiesUtils vmPropsUtils) {
    boolean retValue = true;
    List<VmPropertiesUtils.ValidationError> validationErrors = null;
    if (vm == null) {
        retValue = false;
        if (message != null) {
            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString());
        }
    } else if (!(validationErrors = vmPropsUtils.validateVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData())).isEmpty()) {
        handleCustomPropertiesError(validationErrors, message);
        retValue = false;
    } else {
        BootSequence boot_sequence = ((runParams.getBootSequence()) != null) ? runParams.getBootSequence() : vm.getdefault_boot_sequence();
        Guid storagePoolId = vm.getstorage_pool_id();
        // Block from running a VM with no HDD when its first boot device is
        // HD
        // and no other boot devices are configured
        List<Disk> vmDisks = getPluggedDisks(vm);
        if (boot_sequence == BootSequence.C && vmDisks.size() == 0) {
            String messageStr = !vmDisks.isEmpty() ? VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_PLUGGED_DISK.toString() : VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK.toString();
            message.add(messageStr);
            retValue = false;
        } else {
            if (boot_sequence == BootSequence.CD && findActiveISODomain(storagePoolId) == null) {
                message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
                retValue = false;
            } else // custom properties allowed only from cluster 2.3
            if (!StringUtils.isEmpty(vm.getStaticData().getCustomProperties()) && !Config.<Boolean>GetValue(ConfigValues.SupportCustomProperties, vm.getvds_group_compatibility_version().getValue())) {
                message.add(VdcBllMessages.CUSTOM_VM_PROPERTIES_INVALID_VALUES_NOT_ALLOWED_IN_CURRENT_CLUSTER.toString());
                retValue = false;
            } else {
                // otherwise the vm cannot be run in vdsm
                if (boot_sequence == BootSequence.N && DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()).size() == 0) {
                    message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK.toString());
                    retValue = false;
                } else if (vmDisks.size() > 0) {
                    ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vm.getId());
                    if (!vmDuringSnapshotResult.isValid()) {
                        message.add(vmDuringSnapshotResult.getMessage().name());
                        retValue = false;
                    }
                    // if VM is not HA VM
                    if (retValue && !ImagesHandler.PerformImagesChecks(vm, message, vm.getstorage_pool_id(), Guid.Empty, !vm.getauto_startup(), true, false, false, false, false, !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), vmDisks)) {
                        retValue = false;
                    }
                    // Check if iso and floppy path exists
                    if (retValue && !vm.getauto_startup() && !validateIsoPath(findActiveISODomain(vm.getstorage_pool_id()), runParams, message)) {
                        retValue = false;
                    } else if (retValue) {
                        boolean isVmDuringInit = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsVmDuringInitiating, new IsVmDuringInitiatingVDSCommandParameters(vm.getId())).getReturnValue()).booleanValue();
                        if (vm.isStatusUp() || (vm.getstatus() == VMStatus.NotResponding) || isVmDuringInit) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING.toString());
                            }
                        } else if (vm.getstatus() == VMStatus.Paused && vm.getrun_on_vds() != null) {
                            VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vm.getrun_on_vds().toString()));
                            if (vds.getstatus() != VDSStatus.Up) {
                                retValue = false;
                                if (message != null) {
                                    message.add(VdcBllMessages.VAR__HOST_STATUS__UP.toString());
                                    message.add(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL.toString());
                                }
                            }
                        }
                        boolean isStatelessVm = shouldVmRunAsStateless(runParams, vm);
                        if (retValue && isStatelessVm && ImagesHandler.isVmInPreview(vm.getId())) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_WHILE_IN_PREVIEW.toString());
                            }
                        }
                        // if the VM itself is stateless or run once as stateless
                        if (retValue && isStatelessVm && vm.getauto_startup()) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_HA.toString());
                            }
                        }
                        retValue = retValue == false ? retValue : vdsSelector.CanFindVdsToRunOn(message, false);
                        /**
                         * only if can do action ok then check with actions matrix that status is valid for this
                         * action
                         */
                        if (retValue && !VdcActionUtils.CanExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL.toString());
                            }
                        }
                    }
                }
            }
        }
    }
    return retValue;
}
#method_after
public static boolean CanRunVm(VM vm, ArrayList<String> message, RunVmParams runParams, VdsSelector vdsSelector, SnapshotsValidator snapshotsValidator, VmPropertiesUtils vmPropsUtils) {
    boolean retValue = true;
    List<VmPropertiesUtils.ValidationError> validationErrors = null;
    if (vm == null) {
        retValue = false;
        message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString());
    } else if (!(validationErrors = vmPropsUtils.validateVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData())).isEmpty()) {
        handleCustomPropertiesError(validationErrors, message);
        retValue = false;
    } else {
        BootSequence boot_sequence = ((runParams.getBootSequence()) != null) ? runParams.getBootSequence() : vm.getdefault_boot_sequence();
        Guid storagePoolId = vm.getstorage_pool_id();
        // Block from running a VM with no HDD when its first boot device is
        // HD
        // and no other boot devices are configured
        List<Disk> vmDisks = getPluggedDisks(vm);
        if (boot_sequence == BootSequence.C && vmDisks.size() == 0) {
            String messageStr = !vmDisks.isEmpty() ? VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_PLUGGED_DISK.toString() : VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK.toString();
            message.add(messageStr);
            retValue = false;
        } else {
            if (boot_sequence == BootSequence.CD && findActiveISODomain(storagePoolId) == null) {
                message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
                retValue = false;
            } else // custom properties allowed only from cluster 2.3
            if (!StringUtils.isEmpty(vm.getStaticData().getCustomProperties()) && !Config.<Boolean>GetValue(ConfigValues.SupportCustomProperties, vm.getvds_group_compatibility_version().getValue())) {
                message.add(VdcBllMessages.CUSTOM_VM_PROPERTIES_INVALID_VALUES_NOT_ALLOWED_IN_CURRENT_CLUSTER.toString());
                retValue = false;
            } else {
                // otherwise the vm cannot be run in vdsm
                if (boot_sequence == BootSequence.N && DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()).size() == 0) {
                    message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK.toString());
                    retValue = false;
                } else if (vmDisks.size() > 0) {
                    ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vm.getId());
                    if (!vmDuringSnapshotResult.isValid()) {
                        message.add(vmDuringSnapshotResult.getMessage().name());
                        retValue = false;
                    }
                    // if VM is not HA VM
                    if (retValue && !ImagesHandler.PerformImagesChecks(vm, message, vm.getstorage_pool_id(), Guid.Empty, !vm.getauto_startup(), true, false, false, false, false, !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), vmDisks)) {
                        retValue = false;
                    }
                    // Check if iso and floppy path exists
                    if (retValue && !vm.getauto_startup() && !validateIsoPath(findActiveISODomain(vm.getstorage_pool_id()), runParams, message)) {
                        retValue = false;
                    } else if (retValue) {
                        boolean isVmDuringInit = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsVmDuringInitiating, new IsVmDuringInitiatingVDSCommandParameters(vm.getId())).getReturnValue()).booleanValue();
                        if (vm.isStatusUp() || (vm.getstatus() == VMStatus.NotResponding) || isVmDuringInit) {
                            retValue = false;
                            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING.toString());
                        } else if (vm.getstatus() == VMStatus.Paused && vm.getrun_on_vds() != null) {
                            VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vm.getrun_on_vds().toString()));
                            if (vds.getstatus() != VDSStatus.Up) {
                                retValue = false;
                                message.add(VdcBllMessages.VAR__HOST_STATUS__UP.toString());
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL.toString());
                            }
                        }
                        boolean isStatelessVm = shouldVmRunAsStateless(runParams, vm);
                        if (retValue && isStatelessVm && ImagesHandler.isVmInPreview(vm.getId())) {
                            retValue = false;
                            message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_WHILE_IN_PREVIEW.toString());
                        }
                        // if the VM itself is stateless or run once as stateless
                        if (retValue && isStatelessVm && vm.getauto_startup()) {
                            retValue = false;
                            message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_HA.toString());
                        }
                        retValue = retValue == false ? retValue : vdsSelector.CanFindVdsToRunOn(message, false);
                        /**
                         * only if can do action ok then check with actions matrix that status is valid for this
                         * action
                         */
                        if (retValue && !VdcActionUtils.CanExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
                            retValue = false;
                            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL.toString());
                        }
                    }
                }
            }
        }
    }
    return retValue;
}
#end_block

#method_before
public static String getRootURL() {
    String moduleURL = GWT.getModuleBaseURL();
    // $NON-NLS-1$
    int index = moduleURL.indexOf("://");
    if (index == -1) {
        // $NON-NLS-1$ $NON-NLS-2$
        GWT.log("Can't extract root URL from module URL \"" + moduleURL + "\".");
    }
    // $NON-NLS-1$
    index = moduleURL.indexOf("/", index + 3);
    if (index == -1) {
        return moduleURL;
    }
    return moduleURL.substring(0, index);
}
#method_after
public static String getRootURL() {
    String moduleURL = GWT.getModuleBaseURL();
    // $NON-NLS-1$
    String separator = "://";
    int index = moduleURL.indexOf(separator);
    if (index == -1) {
        throw new RuntimeException();
    }
    // $NON-NLS-1$
    index = moduleURL.indexOf("/", index + separator.length());
    if (index == -1) {
        return moduleURL;
    }
    return moduleURL.substring(0, index);
}
#end_block

#method_before
@Override
protected void ReadHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText;
        if (StringHelper.EqOp(resourceType, OvfHardware.CPU)) {
            _vm.getStaticData().setnum_of_sockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
            _vm.getStaticData().setcpu_per_socket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
        } else if (StringHelper.EqOp(resourceType, OvfHardware.Memory)) {
            _vm.getStaticData().setmem_size_mb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
        } else if (StringHelper.EqOp(resourceType, OvfHardware.DiskImage)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
            if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
            }
            if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                image.setit_guid(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
            }
            image.setappList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
            if (node.SelectSingleNode("rasd:StorageId", _xmlNS) != null && !StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText)) {
                image.setstorage_ids(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText))));
            }
            if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                image.setstorage_pool_id(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
            if (creationDate == null) {
                image.setcreation_date(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
            if (lastModified != null) {
                image.setlastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).InnerText);
            if (last_modified_date != null) {
                image.setlast_modified_date(last_modified_date);
            }
            readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.Network)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.USB)) {
            _vm.getStaticData().setusb_policy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
        } else if (StringHelper.EqOp(resourceType, OvfHardware.Monitor)) {
            _vm.getStaticData().setnum_of_monitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.CD)) {
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.OTHER)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && !StringHelper.isNullOrEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
                String type = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText);
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
            }
        }
    }
}
#method_after
@Override
protected void ReadHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText;
        if (StringHelper.EqOp(resourceType, OvfHardware.CPU)) {
            _vm.getStaticData().setnum_of_sockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
            _vm.getStaticData().setcpu_per_socket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
        } else if (StringHelper.EqOp(resourceType, OvfHardware.Memory)) {
            _vm.getStaticData().setmem_size_mb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
        } else if (StringHelper.EqOp(resourceType, OvfHardware.DiskImage)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
            if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
            }
            if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                image.setit_guid(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
            }
            image.setappList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && !StringHelper.isNullOrEmpty(storageNode.InnerText)) {
                image.setstorage_ids(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.InnerText))));
            }
            if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                image.setstorage_pool_id(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
            if (creationDate == null) {
                image.setcreation_date(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
            if (lastModified != null) {
                image.setlastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).InnerText);
            if (last_modified_date != null) {
                image.setlast_modified_date(last_modified_date);
            }
            readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.Network)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.USB)) {
            _vm.getStaticData().setusb_policy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
        } else if (StringHelper.EqOp(resourceType, OvfHardware.Monitor)) {
            _vm.getStaticData().setnum_of_monitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.CD)) {
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (StringHelper.EqOp(resourceType, OvfHardware.OTHER)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && !StringHelper.isNullOrEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
                String type = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText);
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
            }
        }
    }
}
#end_block

#method_before
@Override
protected void ReadGeneralData() {
    // General Vm
    XmlNode content = _document.SelectSingleNode("//*/Content");
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vm.getStaticData().setvm_name(node.InnerText);
        name = _vm.getStaticData().getvm_name();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.getStaticData().setvmt_guid(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TemplateName");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setvmt_name(node.InnerText);
        }
    }
    node = content.SelectSingleNode("Description");
    if (node != null) {
        _vm.getStaticData().setdescription(node.InnerText);
    }
    node = content.SelectSingleNode("Domain");
    if (node != null) {
        _vm.getStaticData().setdomain(node.InnerText);
    }
    node = content.SelectSingleNode("CreationDate");
    final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
    if (creationDate != null) {
        _vm.getStaticData().setcreation_date(creationDate);
    }
    node = content.SelectSingleNode("ExportDate");
    final Date exportDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
    if (exportDate != null) {
        _vm.getStaticData().setExportDate(exportDate);
    }
    node = content.SelectSingleNode("IsInitilized");
    if (node != null) {
        _vm.getStaticData().setis_initialized(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("IsAutoSuspend");
    if (node != null) {
        _vm.getStaticData().setis_auto_suspend(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        _vm.getStaticData().settime_zone(node.InnerText);
    }
    node = content.SelectSingleNode("IsStateless");
    if (node != null) {
        _vm.getStaticData().setis_stateless(Boolean.parseBoolean(node.InnerText));
    }
    XmlNodeList list = content.SelectNodes("Section");
    for (XmlNode section : list) {
        String value = section.Attributes.get("xsi:type").getValue();
        if (StringHelper.EqOp(value, "ovf:OperatingSystemSection_Type")) {
            ReadOsSection(section);
        } else if (StringHelper.EqOp(value, "ovf:VirtualHardwareSection_Type")) {
            ReadHardwareSection(section);
        } else if (StringUtils.equals(value, "ovf:SnapshotsSection_Type")) {
            readSnapshotsSection(section);
        }
    }
    node = content.SelectSingleNode("Origin");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setorigin(OriginType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("initrd_url");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setinitrd_url((node.InnerText));
        }
    }
    node = content.SelectSingleNode("default_boot_sequence");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setdefault_boot_sequence(BootSequence.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("kernel_url");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setkernel_url((node.InnerText));
        }
    }
    node = content.SelectSingleNode("kernel_params");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setkernel_params((node.InnerText));
        }
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a list of all the aliases of the fields that should be logged in
    // ovd For each one of these fields, the proper value will be read from
    // the ovf and field in vm static
    List<String> aliases = handler.getAliases();
    for (String alias : aliases) {
        String value = readEventLogValue(content, alias);
        if (!StringHelper.isNullOrEmpty(value)) {
            handler.addValueForAlias(alias, value);
        }
    }
    node = content.SelectSingleNode("app_list");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setapp_list(node.InnerText);
        }
    } else // if no app list in VM, get it from one of the leafs
    if (_images != null && _images.size() > 0) {
        int root = GetFirstImage(_images, _images.get(0));
        if (root != -1) {
            for (int i = 0; i < _images.size(); i++) {
                int x = GetNextImage(_images, _images.get(i));
                if (x == -1) {
                    _vm.setapp_list(_images.get(i).getappList());
                }
            }
        } else {
            _vm.setapp_list(_images.get(0).getappList());
        }
    }
    node = content.SelectSingleNode("VmType");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setvm_type(VmType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("DefaultDisplayType");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setdefault_display_type(DisplayType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("MinAllocatedMem");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setMinAllocatedMem(Integer.parseInt(node.InnerText));
        }
    }
}
#method_after
@Override
protected void ReadGeneralData() {
    // General Vm
    XmlNode content = _document.SelectSingleNode("//*/Content");
    XmlNode node = content.SelectSingleNode("Name");
    if (node != null) {
        _vm.getStaticData().setvm_name(node.InnerText);
        name = _vm.getStaticData().getvm_name();
    }
    node = content.SelectSingleNode("TemplateId");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.getStaticData().setvmt_guid(new Guid(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TemplateName");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setvmt_name(node.InnerText);
        }
    }
    node = content.SelectSingleNode("Description");
    if (node != null) {
        _vm.getStaticData().setdescription(node.InnerText);
    }
    node = content.SelectSingleNode("Domain");
    if (node != null) {
        _vm.getStaticData().setdomain(node.InnerText);
    }
    node = content.SelectSingleNode("CreationDate");
    if (node != null) {
        final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (creationDate != null) {
            _vm.getStaticData().setcreation_date(creationDate);
        }
    }
    node = content.SelectSingleNode("ExportDate");
    if (node != null) {
        final Date exportDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (exportDate != null) {
            _vm.getStaticData().setExportDate(exportDate);
        }
    }
    node = content.SelectSingleNode("IsInitilized");
    if (node != null) {
        _vm.getStaticData().setis_initialized(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("IsAutoSuspend");
    if (node != null) {
        _vm.getStaticData().setis_auto_suspend(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        _vm.getStaticData().settime_zone(node.InnerText);
    }
    node = content.SelectSingleNode("IsStateless");
    if (node != null) {
        _vm.getStaticData().setis_stateless(Boolean.parseBoolean(node.InnerText));
    }
    XmlNodeList list = content.SelectNodes("Section");
    for (XmlNode section : list) {
        String value = section.Attributes.get("xsi:type").getValue();
        if (StringHelper.EqOp(value, "ovf:OperatingSystemSection_Type")) {
            ReadOsSection(section);
        } else if (StringHelper.EqOp(value, "ovf:VirtualHardwareSection_Type")) {
            ReadHardwareSection(section);
        } else if (StringUtils.equals(value, "ovf:SnapshotsSection_Type")) {
            readSnapshotsSection(section);
        }
    }
    node = content.SelectSingleNode("Origin");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setorigin(OriginType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("initrd_url");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setinitrd_url((node.InnerText));
        }
    }
    node = content.SelectSingleNode("default_boot_sequence");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setdefault_boot_sequence(BootSequence.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("kernel_url");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setkernel_url((node.InnerText));
        }
    }
    node = content.SelectSingleNode("kernel_params");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setkernel_params((node.InnerText));
        }
    }
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a list of all the aliases of the fields that should be logged in
    // ovd For each one of these fields, the proper value will be read from
    // the ovf and field in vm static
    List<String> aliases = handler.getAliases();
    for (String alias : aliases) {
        String value = readEventLogValue(content, alias);
        if (!StringHelper.isNullOrEmpty(value)) {
            handler.addValueForAlias(alias, value);
        }
    }
    node = content.SelectSingleNode("app_list");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setapp_list(node.InnerText);
        }
    } else // if no app list in VM, get it from one of the leafs
    if (_images != null && _images.size() > 0) {
        int root = GetFirstImage(_images, _images.get(0));
        if (root != -1) {
            for (int i = 0; i < _images.size(); i++) {
                int x = GetNextImage(_images, _images.get(i));
                if (x == -1) {
                    _vm.setapp_list(_images.get(i).getappList());
                }
            }
        } else {
            _vm.setapp_list(_images.get(0).getappList());
        }
    }
    node = content.SelectSingleNode("VmType");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setvm_type(VmType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("DefaultDisplayType");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setdefault_display_type(DisplayType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("MinAllocatedMem");
    if (node != null) {
        if (!StringHelper.isNullOrEmpty(node.InnerText)) {
            _vm.setMinAllocatedMem(Integer.parseInt(node.InnerText));
        }
    }
}
#end_block

#method_before
private void PostShowWarningOnExistingVms(final ExportVmModel exportModel, List<storage_pool> storagePools, VdcQueryType getVmOrTemplateQuery) {
    storage_pool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
    if (storagePool != null) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object result) {
                VmBaseListModel listModel = (VmBaseListModel) model;
                ExportVmModel exportModel1 = (ExportVmModel) listModel.getWindow();
                // $NON-NLS-1$
                String existingEntitiess = "";
                if (result != null) {
                    for (Object selectedItem : listModel.getSelectedItems()) {
                        Object foundVm = null;
                        VdcQueryReturnValue returnValue = (VdcQueryReturnValue) result;
                        for (Object a : asIterableReturnValue(returnValue.getReturnValue())) {
                            if (entititesEqualsNullSafe(a, selectedItem)) {
                                foundVm = selectedItem;
                                break;
                            }
                        }
                        if (foundVm != null) {
                            // $NON-NLS-1$ //$NON-NLS-2$
                            existingEntitiess += "\u2022  " + extractNameFromEntity(foundVm) + "\n";
                        }
                    }
                }
                if (!StringHelper.isNullOrEmpty(existingEntitiess)) {
                    exportModel1.setMessage(composeEntityOnStorage(existingEntitiess));
                }
                exportModel.StopProgress();
            }
        };
        Guid storageDomainId = ((storage_domains) exportModel.getStorage().getSelectedItem()).getId();
        GetAllFromExportDomainQueryParamenters tempVar = new GetAllFromExportDomainQueryParamenters(storagePool.getId(), storageDomainId);
        tempVar.setGetAll(true);
        Frontend.RunQuery(getVmOrTemplateQuery, tempVar, _asyncQuery);
    } else {
        exportModel.StopProgress();
    }
}
#method_after
private void PostShowWarningOnExistingVms(final ExportVmModel exportModel, List<storage_pool> storagePools, VdcQueryType getVmOrTemplateQuery) {
    storage_pool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
    if (storagePool != null) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object result) {
                VmBaseListModel listModel = (VmBaseListModel) model;
                ExportVmModel exportModel1 = (ExportVmModel) listModel.getWindow();
                // $NON-NLS-1$
                String existingEntitiess = "";
                if (result != null) {
                    for (Object rawSelectedItem : listModel.getSelectedItems()) {
                        T selectedItem = (T) rawSelectedItem;
                        T foundVm = null;
                        VdcQueryReturnValue returnValue = (VdcQueryReturnValue) result;
                        for (T returnValueItem : asIterableReturnValue(returnValue.getReturnValue())) {
                            if (entititesEqualsNullSafe(returnValueItem, selectedItem)) {
                                foundVm = selectedItem;
                                break;
                            }
                        }
                        if (foundVm != null) {
                            // $NON-NLS-1$ //$NON-NLS-2$
                            existingEntitiess = "\u2022  " + extractNameFromEntity(foundVm) + "\n";
                        }
                    }
                }
                if (!StringHelper.isNullOrEmpty(existingEntitiess)) {
                    exportModel1.setMessage(composeEntityOnStorage(existingEntitiess));
                }
                exportModel.StopProgress();
            }
        };
        Guid storageDomainId = ((storage_domains) exportModel.getStorage().getSelectedItem()).getId();
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(storagePool.getId(), storageDomainId);
        tempVar.setGetAll(true);
        Frontend.RunQuery(getVmOrTemplateQuery, tempVar, _asyncQuery);
    } else {
        exportModel.StopProgress();
    }
}
#end_block

#method_before
protected boolean entititesEqualsNullSafe(Object e1, Object e2) {
    if (e1 instanceof VmTemplate && e2 instanceof VmTemplate) {
        return ((VmTemplate) e1).getId().equals(((VmTemplate) e2).getId());
    }
    return false;
}
#method_after
protected boolean entititesEqualsNullSafe(VmTemplate e1, VmTemplate e2) {
    return e1.getId().equals(e2.getId());
}
#end_block

#method_before
@Override
protected Iterable<?> asIterableReturnValue(Object returnValue) {
    return ((Map<?, ?>) returnValue).keySet();
}
#method_after
@Override
protected Iterable<VmTemplate> asIterableReturnValue(Object returnValue) {
    return ((Map<VmTemplate, ?>) returnValue).keySet();
}
#end_block

#method_before
@Override
protected String extractNameFromEntity(Object entity) {
    if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getname();
    }
    return "";
}
#method_after
@Override
protected String extractNameFromEntity(VmTemplate entity) {
    return ((VmTemplate) entity).getname();
}
#end_block

#method_before
private void Guide() {
    VmGuideModel model = new VmGuideModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVirtualMachineGuideMeTitle());
    // $NON-NLS-1$
    model.setHashName("new_virtual_machine_-_guide_me");
    if (getGuideContext() == null) {
        VM vm = (VM) getSelectedItem();
        setGuideContext(vm.getId());
    }
    AsyncDataProvider.GetVmById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            VmGuideModel model = (VmGuideModel) vmListModel.getWindow();
            model.setEntity((VM) returnValue);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("Cancel", vmListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().configureLaterTitle());
            tempVar.setIsDefault(true);
            tempVar.setIsCancel(true);
            model.getCommands().add(tempVar);
        }
    }), (Guid) getGuideContext());
}
#method_after
private void Guide() {
    VmGuideModel model = new VmGuideModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVirtualMachineGuideMeTitle());
    // $NON-NLS-1$
    model.setHashName("new_virtual_machine_-_guide_me");
    if (getGuideContext() == null) {
        VM vm = (VM) getSelectedItem();
        setGuideContext(vm.getId());
    }
    AsyncDataProvider.GetVmById(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            VmGuideModel model = (VmGuideModel) vmListModel.getWindow();
            model.setEntity(returnValue);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("Cancel", vmListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().configureLaterTitle());
            tempVar.setIsDefault(true);
            tempVar.setIsCancel(true);
            model.getCommands().add(tempVar);
        }
    }), (Guid) getGuideContext());
}
#end_block

#method_before
protected String extractNameFromEntity(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getvm_name();
    }
    return "";
}
#method_after
protected String extractNameFromEntity(VM entity) {
    return entity.getvm_name();
}
#end_block

#method_before
protected boolean entititesEqualsNullSafe(Object e1, Object e2) {
    if (e1 instanceof VM && e2 instanceof VM) {
        return ((VM) e1).getId().equals(((VM) e2).getId());
    }
    return false;
}
#method_after
protected boolean entititesEqualsNullSafe(VM e1, VM e2) {
    return e1.getId().equals(e2.getId());
}
#end_block

#method_before
@Override
protected Iterable<?> asIterableReturnValue(Object returnValue) {
    return (List<?>) returnValue;
}
#method_after
@Override
protected Iterable<VM> asIterableReturnValue(Object returnValue) {
    return (List<VM>) returnValue;
}
#end_block

#method_before
private void OnSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    if (model.getIsNew() == false && selectedItem == null) {
        Cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    if (!model.Validate()) {
        return;
    }
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!DataProvider.IsVmNameUnique(name) && name.compareToIgnoreCase(getcurrentVm().getvm_name()) != 0) {
        model.getName().setIsValid(false);
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setvm_type(model.getVmType());
    getcurrentVm().setvmt_guid(template.getId());
    getcurrentVm().setvm_name(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setvm_os((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setnum_of_monitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setvm_description((String) model.getDescription().getEntity());
    getcurrentVm().setvm_domain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setvm_mem_size_mb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setvds_group_id(newClusterID);
    getcurrentVm().settime_zone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setnum_of_sockets((Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setcpu_per_socket((Integer) model.getTotalCPUCores().getEntity() / (Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setusb_policy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setis_auto_suspend(false);
    getcurrentVm().setis_stateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setdefault_boot_sequence(model.getBootSequence());
    getcurrentVm().setiso_path(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setauto_startup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setinitrd_url((String) model.getInitrd_path().getEntity());
    getcurrentVm().setkernel_url((String) model.getKernel_path().getEntity());
    getcurrentVm().setkernel_params((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setdefault_display_type((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setpriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setdedicated_vm_for_vds(null);
    } else {
        getcurrentVm().setdedicated_vm_for_vds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getvmt_guid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<storage_domains> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap((Boolean) unitVmModel.getDisksAllocationModel().getIsSingleStorageDomain().getEntity());
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            storage_domains storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getImageId()).getstorage_ids().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getImageId()).setvolume_type((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getImageId()).setvolume_format(DataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getstorage_type()));
                            }
                        }
                        storage_domains storageDomain = (storage_domains) unitVmModel.getDisksAllocationModel().getStorageDomain().getSelectedItem();
                        AddVmFromTemplateParameters parameters = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, storageDomain.getId());
                        Frontend.RunAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase returnValueBase = result.getReturnValue();
                                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
                storage_domains storageDomain = ((storage_domains) model.getDisksAllocationModel().getStorageDomain().getSelectedItem());
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap((Boolean) model.getDisksAllocationModel().getIsSingleStorageDomain().getEntity()));
                Frontend.RunAction(VdcActionType.AddVm, params, new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result) {
                        VmListModel vmListModel = (VmListModel) result.getState();
                        vmListModel.getWindow().StopProgress();
                        VdcReturnValueBase returnValueBase = result.getReturnValue();
                        if (returnValueBase != null && returnValueBase.getSucceeded()) {
                            vmListModel.Cancel();
                        }
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getvds_group_id();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                boolean isSucceeded = retVal.getSucceeded();
                                if (retVal != null && isSucceeded) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#method_after
private void OnSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    if (model.getIsNew() == false && selectedItem == null) {
        Cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    if (!model.Validate()) {
        return;
    }
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!DataProvider.IsVmNameUnique(name) && name.compareToIgnoreCase(getcurrentVm().getvm_name()) != 0) {
        model.getName().setIsValid(false);
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setvm_type(model.getVmType());
    getcurrentVm().setvmt_guid(template.getId());
    getcurrentVm().setvm_name(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setvm_os((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setnum_of_monitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setvm_description((String) model.getDescription().getEntity());
    getcurrentVm().setvm_domain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setvm_mem_size_mb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setvds_group_id(newClusterID);
    getcurrentVm().settime_zone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setnum_of_sockets((Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setcpu_per_socket((Integer) model.getTotalCPUCores().getEntity() / (Integer) model.getNumOfSockets().getEntity());
    getcurrentVm().setusb_policy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setis_auto_suspend(false);
    getcurrentVm().setis_stateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setdefault_boot_sequence(model.getBootSequence());
    getcurrentVm().setiso_path(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setauto_startup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setinitrd_url((String) model.getInitrd_path().getEntity());
    getcurrentVm().setkernel_url((String) model.getKernel_path().getEntity());
    getcurrentVm().setkernel_params((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setdefault_display_type((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setpriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setdedicated_vm_for_vds(null);
    } else {
        getcurrentVm().setdedicated_vm_for_vds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getvmt_guid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<storage_domains> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap((Boolean) unitVmModel.getDisksAllocationModel().getIsSingleStorageDomain().getEntity());
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            storage_domains storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getstorage_ids().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setvolume_type((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolume_format(DataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getstorage_type()));
                            }
                        }
                        storage_domains storageDomain = (storage_domains) unitVmModel.getDisksAllocationModel().getStorageDomain().getSelectedItem();
                        AddVmFromTemplateParameters parameters = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, storageDomain.getId());
                        Frontend.RunAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase returnValueBase = result.getReturnValue();
                                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
                storage_domains storageDomain = ((storage_domains) model.getDisksAllocationModel().getStorageDomain().getSelectedItem());
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap((Boolean) model.getDisksAllocationModel().getIsSingleStorageDomain().getEntity()));
                Frontend.RunAction(VdcActionType.AddVm, params, new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result) {
                        VmListModel vmListModel = (VmListModel) result.getState();
                        vmListModel.getWindow().StopProgress();
                        VdcReturnValueBase returnValueBase = result.getReturnValue();
                        if (returnValueBase != null && returnValueBase.getSucceeded()) {
                            vmListModel.Cancel();
                        }
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getvds_group_id();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                boolean isSucceeded = retVal.getSucceeded();
                                if (retVal != null && isSucceeded) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#end_block

#method_before
void initTable(final ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new HostStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VDS> nameColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_name();
        }
    };
    getTable().addColumn(nameColumn, constants.nameClusterHost());
    TextColumnWithTooltip<VDS> hostColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.gethost_name();
        }
    };
    getTable().addColumn(hostColumn, constants.hostIpClusterHost());
    TextColumnWithTooltip<VDS> statusColumn = new EnumColumn<VDS, VDSStatus>() {

        @Override
        public VDSStatus getRawValue(VDS object) {
            return object.getstatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusClusterHost());
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> loadColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                // $NON-NLS-1$
                return object.getvm_active() + " " + constants.vmsClusterHost();
            }
        };
        getTable().addColumn(loadColumn, constants.loadClusterHost());
    }
}
#method_after
void initTable(final ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new HostStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VDS> nameColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_name();
        }
    };
    getTable().addColumn(nameColumn, constants.nameClusterHost());
    TextColumnWithTooltip<VDS> hostColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.gethost_name();
        }
    };
    getTable().addColumn(hostColumn, constants.hostIpClusterHost());
    TextColumnWithTooltip<VDS> statusColumn = new EnumColumn<VDS, VDSStatus>() {

        @Override
        public VDSStatus getRawValue(VDS object) {
            return object.getstatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusClusterHost());
    if (ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)) {
        TextColumnWithTooltip<VDS> loadColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                // $NON-NLS-1$
                return object.getvm_active() + " " + constants.vmsClusterHost();
            }
        };
        getTable().addColumn(loadColumn, constants.loadClusterHost());
    }
}
#end_block

#method_before
@Override
public Object run() {
    Hashtable env = new Hashtable(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env.put("java.naming.ldap.attributes.binary", "objectGUID");
    env.put(Context.SECURITY_AUTHENTICATION, "GSSAPI");
    // Send an SRV record DNS query to retrieve all the LDAP servers in the domain
    LdapSRVLocator locator = new LdapSRVLocator();
    DnsSRVResult ldapDnsResult;
    try {
        ldapDnsResult = locator.getLdapServers(domainName);
    } catch (Exception ex) {
        return KerberosUtils.convertDNSException(ex);
    }
    DirContext ctx = null;
    String currentLdapServer = null;
    if (ldapDnsResult == null || ldapDnsResult.getNumOfValidAddresses() == 0) {
        return AuthenticationResult.CANNOT_FIND_LDAP_SERVER_FOR_DOMAIN;
    }
    // Goes over all the retrieved LDAP servers
    for (int counter = 0; counter < ldapDnsResult.getNumOfValidAddresses(); counter++) {
        String address = ldapDnsResult.getAddresses()[counter];
        try {
            // Constructs an LDAP url in a format of ldap://hostname:port (based on the data in the SRV record
            // This URL is not enough in order to query for user - as for querying users, we should also provide a
            // base dn, for example: ldap://hostname:389/DC=abc,DC=com . However, this URL (ldap:hostname:port)
            // suffices for
            // getting the rootDSE information, which includes the baseDN.
            URI uri = locator.constructURI("LDAP", address);
            env.put(Context.PROVIDER_URL, uri.toString());
            ctx = new InitialDirContext(env);
            // Get the base DN from rootDSE
            String domainDN = getDomainDN(ctx);
            if (domainDN != null) {
                // Append the base DN to the ldap URL in order to construct a full ldap URL (in form of
                // ldap:hostname:port/baseDN ) to query for the user
                StringBuilder ldapQueryPath = new StringBuilder(uri.toString());
                ldapQueryPath.append("/").append(domainDN);
                SearchControls controls = new SearchControls();
                controls.setSearchScope(SearchControls.SUBTREE_SCOPE);
                // Adding all the three attributes possible, as RHDS doesn't return the nsUniqueId by default
                controls.setReturningAttributes(new String[] { "nsUniqueId", "ipaUniqueId", "objectGuid", "uniqueIdentifier" });
                // Added this in order to prevent a warning saying: "the returning obj flag wasn't set, setting it to true"
                controls.setReturningObjFlag(true);
                currentLdapServer = ldapQueryPath.toString();
                env.put(Context.PROVIDER_URL, currentLdapServer);
                // Run the LDAP query to get the user
                ctx = new InitialDirContext(env);
                NamingEnumeration<SearchResult> answer = executeQuery(ctx, controls, prepareQuery());
                while (answer.hasMoreElements()) {
                    // Print the objectGUID for the user
                    String guid = guidFromResults(answer.next());
                    if (guid == null) {
                        break;
                    }
                    userGuid.append(guid);
                    log.debug("User guid is: " + userGuid.toString());
                    return AuthenticationResult.OK;
                }
                System.out.println("No user in Directory was found for " + userName + ". Trying next LDAP server in list");
            } else {
                System.out.println(InstallerConstants.ERROR_PREFIX + " Failed to query rootDSE in order to get the baseDN. Could not query for user " + userName + " in domain" + domainName);
            }
        } catch (CommunicationException ex) {
            System.out.println("Cannot connect to LDAP URL: " + currentLdapServer + ". Trying next LDAP server in list (if exists)");
        } catch (AuthenticationException ex) {
            ex.printStackTrace();
            AuthenticationResult result = AuthenticationResult.OTHER;
            KerberosReturnCodeParser parser = new KerberosReturnCodeParser();
            result = parser.parse(ex.toString());
            String errorMsg = result.getDetailedMessage().replace("Authentication Failed", "LDAP query Failed");
            System.out.println(InstallerConstants.ERROR_PREFIX + errorMsg);
        } catch (Exception ex) {
            System.out.println("General error has occured" + ex.getMessage());
            ex.printStackTrace();
            break;
        } finally {
            if (ctx != null) {
                try {
                    ctx.close();
                } catch (NamingException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }
    return AuthenticationResult.NO_USER_INFORMATION_WAS_FOUND_FOR_USER;
}
#method_after
@Override
public Object run() {
    Hashtable env = new Hashtable(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    env.put("java.naming.ldap.attributes.binary", "objectGUID");
    env.put(Context.SECURITY_AUTHENTICATION, "GSSAPI");
    env.put("javax.security.sasl.qop", "auth-conf");
    // Send an SRV record DNS query to retrieve all the LDAP servers in the domain
    LdapSRVLocator locator = new LdapSRVLocator();
    DnsSRVResult ldapDnsResult;
    try {
        ldapDnsResult = locator.getLdapServers(domainName);
    } catch (Exception ex) {
        return KerberosUtils.convertDNSException(ex);
    }
    DirContext ctx = null;
    String currentLdapServer = null;
    if (ldapDnsResult == null || ldapDnsResult.getNumOfValidAddresses() == 0) {
        return AuthenticationResult.CANNOT_FIND_LDAP_SERVER_FOR_DOMAIN;
    }
    // Goes over all the retrieved LDAP servers
    for (int counter = 0; counter < ldapDnsResult.getNumOfValidAddresses(); counter++) {
        String address = ldapDnsResult.getAddresses()[counter];
        try {
            // Constructs an LDAP url in a format of ldap://hostname:port (based on the data in the SRV record
            // This URL is not enough in order to query for user - as for querying users, we should also provide a
            // base dn, for example: ldap://hostname:389/DC=abc,DC=com . However, this URL (ldap:hostname:port)
            // suffices for
            // getting the rootDSE information, which includes the baseDN.
            URI uri = locator.constructURI("LDAP", address);
            env.put(Context.PROVIDER_URL, uri.toString());
            ctx = new InitialDirContext(env);
            // Get the base DN from rootDSE
            String domainDN = getDomainDN(ctx);
            if (domainDN != null) {
                // Append the base DN to the ldap URL in order to construct a full ldap URL (in form of
                // ldap:hostname:port/baseDN ) to query for the user
                StringBuilder ldapQueryPath = new StringBuilder(uri.toString());
                ldapQueryPath.append("/").append(domainDN);
                SearchControls controls = new SearchControls();
                controls.setSearchScope(SearchControls.SUBTREE_SCOPE);
                // Adding all the three attributes possible, as RHDS doesn't return the nsUniqueId by default
                controls.setReturningAttributes(new String[] { "nsUniqueId", "ipaUniqueId", "objectGuid", "uniqueIdentifier" });
                // Added this in order to prevent a warning saying: "the returning obj flag wasn't set, setting it to true"
                controls.setReturningObjFlag(true);
                currentLdapServer = ldapQueryPath.toString();
                env.put(Context.PROVIDER_URL, currentLdapServer);
                // Run the LDAP query to get the user
                ctx = new InitialDirContext(env);
                NamingEnumeration<SearchResult> answer = executeQuery(ctx, controls, prepareQuery());
                while (answer.hasMoreElements()) {
                    // Print the objectGUID for the user
                    String guid = guidFromResults(answer.next());
                    if (guid == null) {
                        break;
                    }
                    userGuid.append(guid);
                    log.debug("User guid is: " + userGuid.toString());
                    return AuthenticationResult.OK;
                }
                System.out.println("No user in Directory was found for " + userName + ". Trying next LDAP server in list");
            } else {
                System.out.println(InstallerConstants.ERROR_PREFIX + " Failed to query rootDSE in order to get the baseDN. Could not query for user " + userName + " in domain" + domainName);
            }
        } catch (CommunicationException ex) {
            System.out.println("Cannot connect to LDAP URL: " + currentLdapServer + ". Trying next LDAP server in list (if exists)");
        } catch (AuthenticationException ex) {
            ex.printStackTrace();
            AuthenticationResult result = AuthenticationResult.OTHER;
            KerberosReturnCodeParser parser = new KerberosReturnCodeParser();
            result = parser.parse(ex.toString());
            String errorMsg = result.getDetailedMessage().replace("Authentication Failed", "LDAP query Failed");
            System.out.println(InstallerConstants.ERROR_PREFIX + errorMsg);
            log.error("Error from Kerberos: " + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("General error has occured" + ex.getMessage());
            ex.printStackTrace();
            break;
        } finally {
            if (ctx != null) {
                try {
                    ctx.close();
                } catch (NamingException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }
    return AuthenticationResult.NO_USER_INFORMATION_WAS_FOUND_FOR_USER;
}
#end_block

#method_before
protected void setUpCommand() {
    command = createCommand();
    doReturn(true).when(command).areTemplateImagesInStorageReady(any(Guid.class));
    doReturn(true).when(command).isMemorySizeLegal(any(VDSGroup.class), any(VmStatic.class));
    doReturn(true).when(command).verifyAddVM(any(VDSGroup.class));
}
#method_after
protected void setUpCommand() {
    command = createCommand();
    doReturn(true).when(command).areTemplateImagesInStorageReady(any(Guid.class));
    doReturn(true).when(command).isMemorySizeLegal(any(Version.class));
    doReturn(true).when(command).verifyAddVM(any(Guid.class));
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getvds_group_id());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    VmStatic vmStaticData = getParameters().getVmStaticData();
    if (!isMemorySizeLegal(grp, vmStaticData)) {
        return false;
    }
    vm_pools pool = getVmPoolDAO().getByName(getParameters().getVmPool().getvm_pool_name());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getvm_pool_id().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    if (!((Boolean) runVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(grp.getstorage_pool_id().getValue())).getReturnValue()).booleanValue()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        return false;
    }
    if (!verifyAddVM(grp)) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getstorage_ids().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().getis_stateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getvm_assigned_count()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getvds_group_id());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!isMemorySizeLegal(grp.getcompatibility_version())) {
        return false;
    }
    vm_pools pool = getVmPoolDAO().getByName(getParameters().getVmPool().getvm_pool_name());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getvm_pool_id().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    if (!((Boolean) runVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(grp.getstorage_pool_id().getValue())).getReturnValue()).booleanValue()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        return false;
    }
    if (!verifyAddVM(grp.getstorage_pool_id().getValue())) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getstorage_ids().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().getis_stateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getvm_assigned_count()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#end_block

#method_before
protected boolean isMemorySizeLegal(VDSGroup grp, VmStatic vmStaticData) {
    return VmHandler.isMemorySizeLegal(vmStaticData.getos(), vmStaticData.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), grp.getcompatibility_version().toString());
}
#method_after
protected boolean isMemorySizeLegal(Version version) {
    VmStatic vmStaticData = getParameters().getVmStaticData();
    return VmHandler.isMemorySizeLegal(vmStaticData.getos(), vmStaticData.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), version.toString());
}
#end_block

#method_before
protected boolean verifyAddVM(VDSGroup grp) {
    return VmHandler.VerifyAddVm(getReturnValue().getCanDoActionMessages(), getParameters().getVmsCount() * getVmNetworkInterfaceDAO().getAllForTemplate(getVmTemplateId()).size(), getVmTemplate(), grp.getstorage_pool_id().getValue(), getParameters().getVmStaticData().getpriority());
}
#method_after
protected boolean verifyAddVM(Guid storagePoolId) {
    return VmHandler.VerifyAddVm(getReturnValue().getCanDoActionMessages(), getParameters().getVmsCount() * getVmNetworkInterfaceDAO().getAllForTemplate(getVmTemplateId()).size(), getVmTemplate(), storagePoolId, getParameters().getVmStaticData().getpriority());
}
#end_block

#method_before
public static void main(String[] args) {
    try {
        CLIParse parser = new CLIParse(args);
        if (parser.hasArg("?") || parser.hasArg("help") || args.length == 0) {
            printUsage();
            return;
        }
        if (!validate(parser)) {
            return;
        }
        String alias = "engine";
        if (parser.hasArg("alias")) {
            alias = parser.getArg("alias");
        }
        if (parser.hasArg("enc")) {
            System.out.println(EncryptionUtils.encrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias).trim().replace("\r\n", ""));
        } else if (parser.hasArg("dec")) {
            System.out.println(EncryptionUtils.decrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pvk")) {
            System.out.write(pvk(parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pubkey2ssh")) {
            System.out.println(pubkey2ssh(parser.getArg("store"), parser.getArg("pass"), alias));
        }
        System.exit(0);
    } catch (Exception e) {
        System.out.println("Operation failed!");
        System.exit(1);
    }
}
#method_after
public static void main(String[] args) {
    int exitCode = 0;
    try {
        CLIParse parser = new CLIParse(args);
        if (parser.hasArg("?") || parser.hasArg("help") || args.length == 0) {
            printUsage();
            return;
        }
        if (!validate(parser)) {
            exitCode = 1;
            return;
        }
        String alias = "engine";
        if (parser.hasArg("alias")) {
            alias = parser.getArg("alias");
        }
        if (parser.hasArg("enc")) {
            System.out.println(EncryptionUtils.encrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias).trim().replace("\r\n", ""));
        } else if (parser.hasArg("dec")) {
            System.out.println(EncryptionUtils.decrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pvk")) {
            System.out.write(pvk(parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pubkey2ssh")) {
            System.out.println(pubkey2ssh(parser.getArg("store"), parser.getArg("pass"), alias));
        }
    } catch (Exception e) {
        System.out.println("Operation failed!");
        exitCode = 1;
    } finally {
        System.exit(exitCode);
    }
}
#end_block

#method_before
public VdsNetworkInterface attach(NetworkInterfaceModel targetNic, boolean createBridge) {
    attachedToNic = targetNic;
    List<LogicalNetworkModel> networksOnTarget = targetNic.getItems();
    networksOnTarget.add(this);
    NetworkParameters netParams = getSetupModel().getNetwork2LastDetachParams().get(getName());
    if (netParams != null) {
        targetNic.getEntity().setBootProtocol(netParams.getBootProtocol());
        targetNic.getEntity().setAddress(netParams.getAddress());
        targetNic.getEntity().setSubnet(netParams.getSubnet());
        targetNic.getEntity().setGateway(netParams.getGateway());
    }
    if (isManagement()) {
        // mark the nic as a management nic
        targetNic.getEntity().setType(2);
    }
    if (!createBridge) {
        return null;
    }
    VdsNetworkInterface targetNicEntity = targetNic.getEntity();
    if (hasVlan()) {
        // create vlan bridge (eth0.1)
        VdsNetworkInterface bridge = new VdsNetworkInterface();
        // $NON-NLS-1$
        bridge.setName(targetNic.getName() + "." + getVlanId());
        bridge.setNetworkName(getName());
        bridge.setVlanId(getVlanId());
        bridge.setVdsId(targetNicEntity.getVdsId());
        bridge.setVdsName(targetNicEntity.getVdsName());
        bridge.setBootProtocol(targetNicEntity.getBootProtocol());
        return bridge;
    } else {
        targetNicEntity.setNetworkName(getName());
        return null;
    }
}
#method_after
public VdsNetworkInterface attach(NetworkInterfaceModel targetNic, boolean createBridge) {
    attachedToNic = targetNic;
    List<LogicalNetworkModel> networksOnTarget = targetNic.getItems();
    networksOnTarget.add(this);
    NetworkParameters netParams = getSetupModel().getNetworkToLastDetachParams().get(getName());
    if (netParams != null) {
        targetNic.getEntity().setBootProtocol(netParams.getBootProtocol());
        targetNic.getEntity().setAddress(netParams.getAddress());
        targetNic.getEntity().setSubnet(netParams.getSubnet());
        targetNic.getEntity().setGateway(netParams.getGateway());
    }
    if (isManagement()) {
        // mark the nic as a management nic
        targetNic.getEntity().setType(2);
    }
    if (!createBridge) {
        return null;
    }
    VdsNetworkInterface targetNicEntity = targetNic.getEntity();
    if (hasVlan()) {
        // create vlan bridge (eth0.1)
        VdsNetworkInterface bridge = new VdsNetworkInterface();
        // $NON-NLS-1$
        bridge.setName(targetNic.getName() + "." + getVlanId());
        bridge.setNetworkName(getName());
        bridge.setVlanId(getVlanId());
        bridge.setVdsId(targetNicEntity.getVdsId());
        bridge.setVdsName(targetNicEntity.getVdsName());
        bridge.setBootProtocol(targetNicEntity.getBootProtocol());
        return bridge;
    } else {
        targetNicEntity.setNetworkName(getName());
        return null;
    }
}
#end_block

#method_before
public void detach() {
    assert attachedToNic != null;
    NetworkInterfaceModel attachingNic = attachedToNic;
    // this needs to be null before the NIC items are changed, because they trigger an event
    attachedToNic = null;
    List<LogicalNetworkModel> nicNetworks = attachingNic.getItems();
    nicNetworks.remove(this);
    // clear network name
    VdsNetworkInterface nicEntity = attachingNic.getEntity();
    NetworkParameters netParams = new NetworkParameters();
    netParams.setBootProtocol(nicEntity.getBootProtocol());
    netParams.setAddress(nicEntity.getAddress());
    netParams.setSubnet(nicEntity.getSubnet());
    if (isManagement()) {
        netParams.setGateway(nicEntity.getGateway());
    }
    getSetupModel().getNetwork2LastDetachParams().put(getName(), netParams);
    if (!hasVlan()) {
        nicEntity.setNetworkName(null);
        nicEntity.setBootProtocol(null);
        nicEntity.setAddress(null);
        nicEntity.setSubnet(null);
        nicEntity.setGateway(null);
    }
    setBridge(null);
    // is this a management nic?
    if (nicEntity.getIsManagement()) {
        nicEntity.setType(0);
    }
}
#method_after
public void detach() {
    assert attachedToNic != null;
    NetworkInterfaceModel attachingNic = attachedToNic;
    // this needs to be null before the NIC items are changed, because they trigger an event
    attachedToNic = null;
    List<LogicalNetworkModel> nicNetworks = attachingNic.getItems();
    nicNetworks.remove(this);
    // clear network name
    VdsNetworkInterface nicEntity = attachingNic.getEntity();
    NetworkParameters netParams = new NetworkParameters();
    netParams.setBootProtocol(nicEntity.getBootProtocol());
    netParams.setAddress(nicEntity.getAddress());
    netParams.setSubnet(nicEntity.getSubnet());
    if (isManagement()) {
        netParams.setGateway(nicEntity.getGateway());
    }
    getSetupModel().getNetworkToLastDetachParams().put(getName(), netParams);
    if (!hasVlan()) {
        nicEntity.setNetworkName(null);
        nicEntity.setBootProtocol(null);
        nicEntity.setAddress(null);
        nicEntity.setSubnet(null);
        nicEntity.setGateway(null);
    }
    setBridge(null);
    // is this a management nic?
    if (nicEntity.getIsManagement()) {
        nicEntity.setType(0);
    }
}
#end_block

#method_before
@Override
public network getEntity() {
    return (network) super.getEntity();
}
#method_after
@Override
public Network getEntity() {
    return (Network) super.getEntity();
}
#end_block

#method_before
private LogicalNetworkModel createErrorNetworkModel(String networkName, Integer vlanId) {
    network errorNetwork = new network();
    errorNetwork.setname(networkName);
    errorNetwork.setvlan_id(vlanId);
    LogicalNetworkModel networkModel = new LogicalNetworkModel(errorNetwork, this);
    networkModel.setError(ConstantsManager.getInstance().getConstants().thisNetworkDoesNotExistInTheClusterErr());
    networkMap.put(networkName, networkModel);
    return networkModel;
}
#method_after
private LogicalNetworkModel createErrorNetworkModel(String networkName, Integer vlanId) {
    Network errorNetwork = new Network();
    errorNetwork.setname(networkName);
    errorNetwork.setvlan_id(vlanId);
    LogicalNetworkModel networkModel = new LogicalNetworkModel(errorNetwork, this);
    networkModel.setError(ConstantsManager.getInstance().getConstants().thisNetworkDoesNotExistInTheClusterErr());
    networkMap.put(networkName, networkModel);
    return networkModel;
}
#end_block

#method_before
private void initNetworkModels() {
    Map<String, LogicalNetworkModel> networkModels = new HashMap<String, LogicalNetworkModel>();
    for (network network : allNetworks) {
        networkModels.put(network.getname(), new LogicalNetworkModel(network, this));
    }
    setNetworks(networkModels);
}
#method_after
private void initNetworkModels() {
    Map<String, LogicalNetworkModel> networkModels = new HashMap<String, LogicalNetworkModel>();
    for (Network network : allNetworks) {
        networkModels.put(network.getname(), new LogicalNetworkModel(network, this));
    }
    setNetworks(networkModels);
}
#end_block

#method_before
private void queryNetworks() {
    // query for networks
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            List<network> networks = (List<network>) returnValue;
            allNetworks = networks;
            initNetworkModels();
            // chain the nic query
            queryInterfaces();
        }
    };
    VDS vds = (VDS) getEntity();
    AsyncDataProvider.GetClusterNetworkList(asyncQuery, vds.getvds_group_id());
}
#method_after
private void queryNetworks() {
    // query for networks
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(this);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            List<Network> networks = (List<Network>) returnValue;
            allNetworks = networks;
            initNetworkModels();
            // chain the nic query
            queryInterfaces();
        }
    };
    VDS vds = (VDS) getEntity();
    AsyncDataProvider.GetClusterNetworkList(asyncQuery, vds.getvds_group_id());
}
#end_block

#method_before
public List<VdcBllMessages> validate() {
    Set<String> ifaceNames = new HashSet<String>();
    Set<String> bonds = new HashSet<String>();
    Set<String> attachedNetworksNames = new HashSet<String>();
    // key = master bond name, value = list of interfaces
    Map<String, List<VdsNetworkInterface>> bondSlaves = new HashMap<String, List<VdsNetworkInterface>>();
    for (VdsNetworkInterface iface : params.getInterfaces()) {
        String name = iface.getName();
        String networkName = iface.getNetworkName();
        String bondName = iface.getBondName();
        if (ifaceNames.contains(name)) {
            violations.add(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE);
            continue;
        } else {
            ifaceNames.add(name);
        }
        if (isBond(iface)) {
            extractBondIfModified(bonds, iface, name);
        } else {
            if (StringUtils.isNotBlank(bondName)) {
                extractBondSlave(bondSlaves, iface, bondName);
            }
            // validate the nic exists on host
            if (!getExistingIfaces().containsKey(NetworkUtils.StripVlan(name))) {
                violations.add(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
            }
        }
        // validate and extract to network map
        if (violations.isEmpty() && StringUtils.isNotBlank(networkName)) {
            extractNetwork(attachedNetworksNames, iface, networkName);
        }
    }
    validateBonds(bonds, bondSlaves);
    detectSlaveChanges(bondSlaves);
    extractRemoveNetworks(attachedNetworksNames, getExisitingHostNetworkNames());
    this.removedBonds = extractRemovedBonds(bonds);
    return violations;
}
#method_after
public List<VdcBllMessages> validate() {
    for (VdsNetworkInterface iface : params.getInterfaces()) {
        String name = iface.getName();
        if (addInterfaceToProcessedList(iface)) {
            if (isBond(iface)) {
                extractBondIfModified(iface, name);
            } else {
                if (StringUtils.isNotBlank(iface.getBondName())) {
                    extractBondSlave(iface);
                }
                // validate the nic exists on host
                if (!getExistingIfaces().containsKey(NetworkUtils.StripVlan(name))) {
                    violations.add(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
                }
            }
            // validate and extract to network map
            if (violations.isEmpty() && StringUtils.isNotBlank(iface.getNetworkName())) {
                extractNetwork(iface);
            }
        }
    }
    validateBondSlavesCount();
    extractRemovedNetworks();
    extractRemovedBonds();
    detectSlaveChanges();
    return violations;
}
#end_block

#method_before
private void detectSlaveChanges(Map<String, List<VdsNetworkInterface>> bondSlaves) {
    for (Map.Entry<String, List<VdsNetworkInterface>> bondEntry : bondSlaves.entrySet()) {
        String bondName = bondEntry.getKey();
        if (!modifiedBonds.containsKey(bondName)) {
            for (VdsNetworkInterface bondSlave : bondEntry.getValue()) {
                if (interfaceWasModified(bondSlave)) {
                    modifiedBonds.put(bondName, getExistingIfaces().get(bondName));
                }
            }
        }
    }
}
#method_after
private void detectSlaveChanges() {
    for (VdsNetworkInterface newIface : params.getInterfaces()) {
        if (!isBond(newIface) && newIface.getVlanId() == null) {
            String bondNameInNewIface = newIface.getBondName();
            String bondNameInOldIface = getExistingIfaces().get(newIface.getName()).getBondName();
            if (!StringUtils.equals(bondNameInNewIface, bondNameInOldIface)) {
                if (bondNameInNewIface != null && !modifiedBonds.containsKey(bondNameInNewIface)) {
                    modifiedBonds.put(bondNameInNewIface, getExistingIfaces().get(bondNameInNewIface));
                }
                if (bondNameInOldIface != null && !modifiedBonds.containsKey(bondNameInNewIface) && !removedBonds.contains(bondNameInOldIface)) {
                    modifiedBonds.put(bondNameInOldIface, getExistingIfaces().get(bondNameInOldIface));
                }
            }
        }
    }
}
#end_block

#method_before
private void extractNetwork(Set<String> attachedNetworksNames, VdsNetworkInterface iface, String networkName) {
    // check if network exists on cluster
    if (getExistingClusterNetworks().containsKey(networkName)) {
        // prevent attaching 2 interfaces to 1 network
        if (attachedNetworksNames.contains(networkName)) {
            violations.add(VdcBllMessages.NETWROK_ALREADY_ATTACHED_TO_INTERFACE);
        } else {
            attachedNetworksNames.add(networkName);
            if (interfaceWasModified(iface)) {
                modifiedNetworks.add(getExistingClusterNetworks().get(networkName));
            }
        }
    // Interface must exist, it was checked before and we can't reach here if it does'nt exist already.
    } else if (networkName.equals(getExistingIfaces().get(iface.getName()).getNetworkName())) {
        unmanagedNetworks.add(networkName);
    } else {
        violations.add(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER);
    }
}
#method_after
private void extractNetwork(VdsNetworkInterface iface) {
    String networkName = iface.getNetworkName();
    // prevent attaching 2 interfaces to 1 network
    if (attachedNetworksNames.contains(networkName)) {
        violations.add(VdcBllMessages.NETWROK_ALREADY_ATTACHED_TO_INTERFACE);
    } else {
        attachedNetworksNames.add(networkName);
        // check if network exists on cluster
        if (getExistingClusterNetworks().containsKey(networkName)) {
            if (networkWasModified(iface)) {
                modifiedNetworks.add(getExistingClusterNetworks().get(networkName));
            }
        } else if (unmanagedNetworkChanged(iface)) {
            violations.add(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER);
        }
    }
}
#end_block

#method_before
protected void extractBondSlave(Map<String, List<VdsNetworkInterface>> bondSlaves, VdsNetworkInterface iface, String bondName) {
    List<VdsNetworkInterface> value = new ArrayList<VdsNetworkInterface>();
    value.add(iface);
    if (bondSlaves.containsKey(bondName)) {
        value.addAll(bondSlaves.get(bondName));
    }
    bondSlaves.put(bondName, value);
}
#method_after
private void extractBondSlave(VdsNetworkInterface iface) {
    List<VdsNetworkInterface> slaves = bonds.get(iface.getBondName());
    if (slaves == null) {
        slaves = new ArrayList<VdsNetworkInterface>();
        bonds.put(iface.getBondName(), slaves);
    }
    slaves.add(iface);
}
#end_block

#method_before
protected void extractBondIfModified(Set<String> bonds, VdsNetworkInterface iface, String name) {
    if (bonds.contains(name)) {
        violations.add(VdcBllMessages.NETWORK_BOND_NAME_EXISTS);
    } else {
        bonds.add(name);
        if (interfaceWasModified(iface)) {
            modifiedBonds.put(name, iface);
        }
    }
}
#method_after
private void extractBondIfModified(VdsNetworkInterface iface, String bondName) {
    if (!bonds.containsKey(bondName)) {
        bonds.put(bondName, new ArrayList<VdsNetworkInterface>());
    }
    if (bondWasModified(iface)) {
        modifiedBonds.put(bondName, iface);
    }
}
#end_block

#method_before
protected List<VdsNetworkInterface> extractRemovedBonds(Set<String> bonds) {
    List<VdsNetworkInterface> removedBonds = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface iface : getExistingIfaces().values()) {
        String bondName = iface.getBondName();
        if (StringUtils.isNotBlank(bondName) && !bonds.contains(bondName)) {
            removedBonds.add(getExistingIfaces().get(bondName));
        }
    }
    return removedBonds;
}
#method_after
private void extractRemovedBonds() {
    for (VdsNetworkInterface iface : getExistingIfaces().values()) {
        String bondName = iface.getBondName();
        if (StringUtils.isNotBlank(bondName) && !bonds.containsKey(bondName)) {
            removedBonds.add(bondName);
        }
    }
}
#end_block

#method_before
public List<String> getRemoveNetworks() {
    return removeNetworks;
}
#method_after
public List<String> getRemoveNetworks() {
    return removedNetworks;
}
#end_block

#method_before
public List<VdsNetworkInterface> getRemovedBonds() {
    return removedBonds;
}
#method_after
public Set<String> getRemovedBonds() {
    return removedBonds;
}
#end_block

#method_before
public VdsNetworkInterface attach(NetworkInterfaceModel targetNic, boolean createBridge) {
    attachedToNic = targetNic;
    List<LogicalNetworkModel> networksOnTarget = targetNic.getItems();
    networksOnTarget.add(this);
    if (isManagement()) {
        // mark the nic as a management nic
        targetNic.getEntity().setType(2);
    }
    if (!createBridge) {
        return null;
    }
    VdsNetworkInterface targetNicEntity = targetNic.getEntity();
    if (hasVlan()) {
        // create vlan bridge (eth0.1)
        VdsNetworkInterface bridge = new VdsNetworkInterface();
        // $NON-NLS-1$
        bridge.setName(targetNic.getName() + "." + getVlanId());
        bridge.setNetworkName(getName());
        bridge.setVlanId(getVlanId());
        bridge.setVdsId(targetNicEntity.getVdsId());
        bridge.setVdsName(targetNicEntity.getVdsName());
        bridge.setBootProtocol(targetNicEntity.getBootProtocol());
        return bridge;
    } else {
        targetNicEntity.setNetworkName(getName());
        return null;
    }
}
#method_after
public VdsNetworkInterface attach(NetworkInterfaceModel targetNic, boolean createBridge) {
    attachedToNic = targetNic;
    List<LogicalNetworkModel> networksOnTarget = targetNic.getItems();
    networksOnTarget.add(this);
    if (isManagement()) {
        // mark the nic as a management nic
        targetNic.getEntity().setType(2);
        targetNic.getEntity().setBootProtocol(NetworkBootProtocol.Dhcp);
    } else {
        targetNic.getEntity().setBootProtocol(NetworkBootProtocol.None);
    }
    if (!createBridge) {
        return null;
    }
    VdsNetworkInterface targetNicEntity = targetNic.getEntity();
    if (hasVlan()) {
        // create vlan bridge (eth0.1)
        VdsNetworkInterface bridge = new VdsNetworkInterface();
        // $NON-NLS-1$
        bridge.setName(targetNic.getName() + "." + getVlanId());
        bridge.setNetworkName(getName());
        bridge.setVlanId(getVlanId());
        bridge.setVdsId(targetNicEntity.getVdsId());
        bridge.setVdsName(targetNicEntity.getVdsName());
        bridge.setBootProtocol(targetNicEntity.getBootProtocol());
        return bridge;
    } else {
        targetNicEntity.setNetworkName(getName());
        return null;
    }
}
#end_block

#method_before
public void detach() {
    assert attachedToNic != null;
    NetworkInterfaceModel attachingNic = attachedToNic;
    // this needs to be null before the NIC items are changed, because they trigger an event
    attachedToNic = null;
    List<LogicalNetworkModel> nicNetworks = attachingNic.getItems();
    nicNetworks.remove(this);
    // clear network name
    VdsNetworkInterface nicEntity = attachingNic.getEntity();
    if (!hasVlan()) {
        nicEntity.setNetworkName(null);
    }
    setBridge(null);
    // is this a management nic?
    if (nicEntity.getIsManagement()) {
        nicEntity.setType(0);
    }
}
#method_after
public void detach() {
    assert attachedToNic != null;
    NetworkInterfaceModel attachingNic = attachedToNic;
    // this needs to be null before the NIC items are changed, because they trigger an event
    attachedToNic = null;
    List<LogicalNetworkModel> nicNetworks = attachingNic.getItems();
    nicNetworks.remove(this);
    // clear network name
    VdsNetworkInterface nicEntity = attachingNic.getEntity();
    if (!hasVlan()) {
        nicEntity.setNetworkName(null);
        nicEntity.setBootProtocol(null);
        nicEntity.setAddress(null);
        nicEntity.setSubnet(null);
        nicEntity.setGateway(null);
    }
    setBridge(null);
    // is this a management nic?
    if (nicEntity.getIsManagement()) {
        nicEntity.setType(0);
    }
}
#end_block

#method_before
private XmlRpcStruct generateNetworks() {
    XmlRpcStruct networks = new XmlRpcStruct();
    // Networks
    for (Network net : getParameters().getNetworks()) {
        Map<String, String> opts = new HashMap<String, String>();
        VdsNetworkInterface i = findNetworkInterface(net.getname(), getParameters().getInterfaces(), getParameters().getBonds());
        Boolean bonded = isVlan(net) ? findInterfaceByName(NetworkUtils.StripVlan(i.getName())).getBonded() : i.getBonded();
        String type = (bonded != null && bonded) ? "bonding" : "nic";
        opts.put(type, NetworkUtils.StripVlan(i.getName()));
        if (isVlan(net)) {
            opts.put("vlan", net.getvlan_id().toString());
        }
        // TODO: add bootproto to network object
        switch(i.getBootProtocol()) {
            case Dhcp:
                opts.put(BOOT_PROTOCOL, DHCP_BOOT_PROTOCOL);
                break;
            case StaticIp:
                putIfNotEmpty(opts, "ipaddr", i.getAddress());
                putIfNotEmpty(opts, "netmask", i.getSubnet());
                putIfNotEmpty(opts, "gateway", i.getGateway());
                break;
        }
        if (net.getMtu() != 0) {
            opts.put("mtu", String.valueOf(net.getMtu()));
        }
        opts.put("bridged", Boolean.toString(net.isVmNetwork()));
        networks.add(net.getname(), opts);
    }
    for (String net : getParameters().getRemovedNetworks()) {
        networks.add(net, REMOVE_OBJ);
    }
    return networks;
}
#method_after
private XmlRpcStruct generateNetworks() {
    XmlRpcStruct networks = new XmlRpcStruct();
    for (Network net : getParameters().getNetworks()) {
        Map<String, String> opts = new HashMap<String, String>();
        VdsNetworkInterface i = findNetworkInterface(net.getname(), getParameters().getInterfaces(), getParameters().getBonds());
        Boolean bonded = isVlan(net) ? findInterfaceByName(NetworkUtils.StripVlan(i.getName())).getBonded() : i.getBonded();
        String type = (bonded != null && bonded) ? "bonding" : "nic";
        opts.put(type, NetworkUtils.StripVlan(i.getName()));
        if (isVlan(net)) {
            opts.put("vlan", net.getvlan_id().toString());
        }
        // TODO: add bootproto to network object
        switch(i.getBootProtocol()) {
            case Dhcp:
                opts.put(BOOT_PROTOCOL, DHCP_BOOT_PROTOCOL);
                break;
            case StaticIp:
                putIfNotEmpty(opts, "ipaddr", i.getAddress());
                putIfNotEmpty(opts, "netmask", i.getSubnet());
                putIfNotEmpty(opts, "gateway", i.getGateway());
                break;
        }
        if (net.getMtu() != 0) {
            opts.put("mtu", String.valueOf(net.getMtu()));
        }
        opts.put("bridged", Boolean.toString(net.isVmNetwork()));
        networks.add(net.getname(), opts);
    }
    for (String net : getParameters().getRemovedNetworks()) {
        networks.add(net, REMOVE_OBJ);
    }
    return networks;
}
#end_block

#method_before
private XmlRpcStruct generateBonds() {
    XmlRpcStruct bonds = new XmlRpcStruct();
    for (VdsNetworkInterface bond : getParameters().getBonds()) {
        XmlRpcStruct opts = new XmlRpcStruct();
        opts.add(SLAVES, getBondNics(bond, getParameters().getInterfaces()));
        if (!StringHelper.isNullOrEmpty(bond.getBondOptions())) {
            opts.add(BONDING_OPTIONS, bond.getBondOptions());
        }
        bonds.add(bond.getName(), opts);
    }
    for (VdsNetworkInterface bond : getParameters().getRemovedBonds()) {
        bonds.add(bond.getName(), REMOVE_OBJ);
    }
    return bonds;
}
#method_after
private XmlRpcStruct generateBonds() {
    XmlRpcStruct bonds = new XmlRpcStruct();
    for (VdsNetworkInterface bond : getParameters().getBonds()) {
        XmlRpcStruct opts = new XmlRpcStruct();
        opts.add(SLAVES, getBondNics(bond, getParameters().getInterfaces()));
        if (!StringHelper.isNullOrEmpty(bond.getBondOptions())) {
            opts.add(BONDING_OPTIONS, bond.getBondOptions());
        }
        bonds.add(bond.getName(), opts);
    }
    for (String bond : getParameters().getRemovedBonds()) {
        bonds.add(bond, REMOVE_OBJ);
    }
    return bonds;
}
#end_block

#method_before
@Override
protected void ExecuteVdsBrokerCommand() {
    // call getVdsCapabilities verb
    super.ExecuteVdsBrokerCommand();
    // update to db
    persistAndEnforceNetworkCompliance(getVds());
    ProceedProxyReturnValue();
}
#method_after
@Override
protected void ExecuteVdsBrokerCommand() {
    // call getVdsCapabilities verb
    super.ExecuteVdsBrokerCommand();
    updateNetConfigDirtyFlag();
    // update to db
    persistAndEnforceNetworkCompliance(getVds());
    ProceedProxyReturnValue();
}
#end_block

#method_before
private static String getVmNetworksImplementedAsBridgeless(VDS vds, List<Network> clusterNetworks) {
    StringBuffer sb = new StringBuffer();
    Map<String, VdsNetworkInterface> interfacesByNetworkName = Entities.interfacesByNetworkName(vds.getInterfaces());
    for (Network net : clusterNetworks) {
        if (net.isVmNetwork() && interfacesByNetworkName.containsKey(net.getName()) && !interfacesByNetworkName.get(net.getName()).isBridged()) {
            sb.append(net.getname()).append(",");
        }
    }
    return sb.toString();
}
#method_after
private static String getVmNetworksImplementedAsBridgeless(VDS vds, List<Network> clusterNetworks) {
    Map<String, VdsNetworkInterface> interfacesByNetworkName = Entities.interfacesByNetworkName(vds.getInterfaces());
    List<String> networkNames = new ArrayList<String>();
    for (Network net : clusterNetworks) {
        if (net.isVmNetwork() && interfacesByNetworkName.containsKey(net.getName()) && !interfacesByNetworkName.get(net.getName()).isBridged()) {
            networkNames.add(net.getname());
        }
    }
    return StringUtils.join(networkNames, ",");
}
#end_block

#method_before
private static String getMissingOperationalClusterNetworks(VDS vds, List<Network> clusterNetworks) {
    StringBuffer sb = new StringBuffer();
    Map<String, Network> vdsNetworksByName = Entities.entitiesByName(vds.getNetworks());
    for (Network net : clusterNetworks) {
        if (net.getStatus() == Operational && net.isRequired() && !vdsNetworksByName.containsKey(net.getName())) {
            sb.append(net.getName()).append(",");
        }
    }
    return sb.toString();
}
#method_after
private static String getMissingOperationalClusterNetworks(VDS vds, List<Network> clusterNetworks) {
    Map<String, Network> vdsNetworksByName = Entities.entitiesByName(vds.getNetworks());
    List<String> networkNames = new ArrayList<String>();
    for (Network net : clusterNetworks) {
        if (net.getStatus() == Operational && net.isRequired() && !vdsNetworksByName.containsKey(net.getName())) {
            networkNames.add(net.getname());
        }
    }
    return StringUtils.join(networkNames, ",");
}
#end_block

#method_before
public static int GetDiskMaxSize() {
    VdcQueryReturnValue returnValue = GetConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.MaxDiskSize));
    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
        return (Integer) returnValue.getReturnValue();
    }
    return 2047;
}
#method_after
public static int GetDiskMaxSize() {
    VdcQueryReturnValue returnValue = GetConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.MaxBlockDiskSize));
    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
        return (Integer) returnValue.getReturnValue();
    }
    return 2047;
}
#end_block

#method_before
private void New() {
    VM vm = (VM) getEntity();
    if (getWindow() != null) {
        return;
    }
    ArrayList<VmNetworkInterface> interfaces = Linq.<VmNetworkInterface>Cast(getItems());
    String newNicName = DataProvider.GetNewNicName(interfaces);
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms");
    model.setIsNew(true);
    model.getNicType().setItems(DataProvider.GetNicTypeList(vm.getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(vm.getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    if (isActivateSupported) {
        model.getActive().setEntity(true);
    } else {
        model.getActive().setEntity(false);
    }
    model.getPortMirroring().setEntity(false);
    // $NON-NLS-1$
    final UICommand okCommand = new UICommand("OnSave", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // wait for data to fetch
    okCommand.setIsExecutionAllowed(false);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getStatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(null);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
            // fetch completed
            okCommand.setIsExecutionAllowed(true);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
}
#method_after
private void New() {
    VM vm = (VM) getEntity();
    if (getWindow() != null) {
        return;
    }
    ArrayList<VmNetworkInterface> interfaces = Linq.<VmNetworkInterface>Cast(getItems());
    String newNicName = DataProvider.GetNewNicName(interfaces);
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms");
    model.setIsNew(true);
    model.getNicType().setItems(DataProvider.GetNicTypeList(vm.getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(vm.getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    model.getActive().setEntity(true);
    model.getPortMirroring().setEntity(false);
    // $NON-NLS-1$
    final UICommand okCommand = new UICommand("OnSave", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // wait for data to fetch
    okCommand.setIsExecutionAllowed(false);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getStatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(null);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
            // fetch completed
            okCommand.setIsExecutionAllowed(true);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
}
#end_block

#method_before
public static void GetAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParamenters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParamenters(storagePoolId, storageDomainId);
    getAllFromExportDomainQueryParamenters.setGetAll(true);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#method_after
public static void GetAllTemplatesFromExportDomain(AsyncQuery aQuery, Guid storagePoolId, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? source : new HashMap<VmTemplate, ArrayList<DiskImage>>();
        }
    };
    GetAllFromExportDomainQueryParameters getAllFromExportDomainQueryParamenters = new GetAllFromExportDomainQueryParameters(storagePoolId, storageDomainId);
    getAllFromExportDomainQueryParamenters.setGetAll(true);
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, getAllFromExportDomainQueryParamenters, aQuery);
}
#end_block

#method_before
public static void GetDiskMaxSize(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? ((Integer) source).intValue() : 2047;
        }
    };
    GetConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.MaxDiskSize), aQuery);
}
#method_after
public static void GetDiskMaxSize(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? ((Integer) source).intValue() : 0;
        }
    };
    GetConfigFromCache(new GetConfigurationValueParameters(ConfigurationValues.MaxBlockDiskSize), aQuery);
}
#end_block

#method_before
public static void GetVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<DiskImage> list = new ArrayList<DiskImage>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((DiskImage) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(id), aQuery);
}
#method_after
public static void GetVmDiskList(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<Disk> list = new ArrayList<Disk>();
            if (source != null) {
                Iterable listEnumerable = (Iterable) source;
                Iterator listIterator = listEnumerable.iterator();
                while (listIterator.hasNext()) {
                    list.add((Disk) listIterator.next());
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(id), aQuery);
}
#end_block

#method_before
@Provides
@Singleton
public SearchableDetailModelProvider<Network, DataCenterListModel, DataCenterNetworkListModel> getDataCenterNetworkListProvider(ClientGinjector ginjector, final Provider<DataCenterNetworkPopupPresenterWidget> networkPopupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider) {
    return new SearchableDetailTabModelProvider<Network, DataCenterListModel, DataCenterNetworkListModel>(ginjector, DataCenterListModel.class, DataCenterNetworkListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(DataCenterNetworkListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getEditCommand() || lastExecutedCommand == getModel().getNewCommand()) {
                return networkPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(DataCenterNetworkListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand() || lastExecutedCommand.getName().equals("DetachClusters")) {
                // $NON-NLS-1$
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
}
#method_after
@Provides
@Singleton
public SearchableDetailModelProvider<Network, DataCenterListModel, DataCenterNetworkListModel> getDataCenterNetworkListProvider(ClientGinjector ginjector, final Provider<NewDataCenterNetworkPopupPresenterWidget> newNetworkPopupProvider, final Provider<EditDataCenterNetworkPopupPresenterWidget> editNetworkPopupProvider, final Provider<RemoveConfirmationPopupPresenterWidget> removeConfirmPopupProvider) {
    return new SearchableDetailTabModelProvider<Network, DataCenterListModel, DataCenterNetworkListModel>(ginjector, DataCenterListModel.class, DataCenterNetworkListModel.class) {

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends Model, ?> getModelPopup(DataCenterNetworkListModel source, UICommand lastExecutedCommand, Model windowModel) {
            if (lastExecutedCommand == getModel().getNewCommand()) {
                return newNetworkPopupProvider.get();
            } else if (lastExecutedCommand == getModel().getEditCommand()) {
                return editNetworkPopupProvider.get();
            } else {
                return super.getModelPopup(source, lastExecutedCommand, windowModel);
            }
        }

        @Override
        public AbstractModelBoundPopupPresenterWidget<? extends ConfirmationModel, ?> getConfirmModelPopup(DataCenterNetworkListModel source, UICommand lastExecutedCommand) {
            if (lastExecutedCommand == getModel().getRemoveCommand() || lastExecutedCommand.getName().equals("Apply")) {
                // $NON-NLS-1$
                return removeConfirmPopupProvider.get();
            } else {
                return super.getConfirmModelPopup(source, lastExecutedCommand);
            }
        }
    };
}
#end_block

#method_before
private void refreshVdsRunTimeInfo() {
    boolean isVdsUpOrGoingToMaintanance = _vds.getstatus() == VDSStatus.Up || _vds.getstatus() == VDSStatus.PreparingForMaintenance || _vds.getstatus() == VDSStatus.Error || _vds.getstatus() == VDSStatus.NonOperational;
    try {
        if (isVdsUpOrGoingToMaintanance) {
            // check if its time for statistics refresh
            if (_vdsManager.getRefreshStatistics() || _vds.getstatus() == VDSStatus.PreparingForMaintenance) {
                refreshVdsStats();
            } else {
            /**
             * TODO: Omer if vds team will not implement events to 4.2 please call here to refreshVdsStats -
             * refresh dynamic data
             */
            }
        } else {
            // refresh dynamic data
            RefObject<Boolean> tempRefObj = new RefObject<Boolean>(processHardwareCapsNeeded);
            VDSStatus refreshReturnStatus = _vdsManager.refreshCapabilities(tempRefObj, _vds);
            processHardwareCapsNeeded = tempRefObj.argvalue;
            refreshedCapabilities = true;
            if (refreshReturnStatus != VDSStatus.NonOperational) {
                _vdsManager.setStatus(VDSStatus.Up, _vds);
            }
            _saveVdsDynamic = true;
        }
        beforeFirstRefreshTreatment(isVdsUpOrGoingToMaintanance);
        refreshVmStats();
    } catch (VDSRecoveringException e) {
        // move vds to maintenance
        if (_vds.getstatus() != VDSStatus.PreparingForMaintenance) {
            throw e;
        }
    }
    MoveVDSToMaintenanceIfNeeded();
}
#method_after
private void refreshVdsRunTimeInfo() {
    boolean isVdsUpOrGoingToMaintanance = _vds.getstatus() == VDSStatus.Up || _vds.getstatus() == VDSStatus.PreparingForMaintenance || _vds.getstatus() == VDSStatus.Error || _vds.getstatus() == VDSStatus.NonOperational;
    try {
        if (isVdsUpOrGoingToMaintanance) {
            // check if its time for statistics refresh
            if (_vdsManager.getRefreshStatistics() || _vds.getstatus() == VDSStatus.PreparingForMaintenance) {
                refreshVdsStats();
            } else {
            /**
             * TODO: Omer if vds team will not implement events to 4.2 please call here to refreshVdsStats -
             * refresh dynamic data
             */
            }
        } else {
            // refresh dynamic data
            final AtomicBoolean processHardwareNeededAtomic = new AtomicBoolean();
            VDSStatus refreshReturnStatus = _vdsManager.refreshCapabilities(processHardwareNeededAtomic, _vds);
            processHardwareCapsNeeded = processHardwareNeededAtomic.get();
            refreshedCapabilities = true;
            if (refreshReturnStatus != VDSStatus.NonOperational) {
                _vdsManager.setStatus(VDSStatus.Up, _vds);
            }
            _saveVdsDynamic = true;
        }
        beforeFirstRefreshTreatment(isVdsUpOrGoingToMaintanance);
        refreshVmStats();
    } catch (VDSRecoveringException e) {
        // move vds to maintenance
        if (_vds.getstatus() != VDSStatus.PreparingForMaintenance) {
            throw e;
        }
    }
    MoveVDSToMaintenanceIfNeeded();
}
#end_block

#method_before
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintanance) {
    if (_vdsManager.getbeforeFirstRefresh()) {
        boolean flagsChanged = false;
        RefObject<Boolean> tempRefObject = new RefObject<Boolean>(flagsChanged);
        _vdsManager.refreshCapabilities(tempRefObject, _vds);
        flagsChanged = tempRefObject.argvalue;
        _vdsManager.setbeforeFirstRefresh(false);
        refreshedCapabilities = true;
        _saveVdsDynamic = true;
        // change the _cpuFlagsChanged flag only if it was false,
        // because get capabilities is called twice on a new server in same
        // loop!
        processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged;
    } else if (isVdsUpOrGoingToMaintanance || _vds.getstatus() == VDSStatus.Error) {
        return;
    }
    AuditLogableBase logable = new AuditLogableBase(_vds.getId());
    logable.AddCustomValue("VdsStatus", EnumUtils.ConvertToStringWithSpaces(_vds.getstatus().toString()));
    auditLog(logable, AuditLogType.VDS_DETECTED);
}
#method_after
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintanance) {
    if (_vdsManager.getbeforeFirstRefresh()) {
        boolean flagsChanged = false;
        final AtomicBoolean processHardwareCapsNeededTemp = new AtomicBoolean();
        _vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, _vds);
        flagsChanged = processHardwareCapsNeededTemp.get();
        _vdsManager.setbeforeFirstRefresh(false);
        refreshedCapabilities = true;
        _saveVdsDynamic = true;
        // change the _cpuFlagsChanged flag only if it was false,
        // because get capabilities is called twice on a new server in same
        // loop!
        processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged;
    } else if (isVdsUpOrGoingToMaintanance || _vds.getstatus() == VDSStatus.Error) {
        return;
    }
    AuditLogableBase logable = new AuditLogableBase(_vds.getId());
    logable.AddCustomValue("VdsStatus", EnumUtils.ConvertToStringWithSpaces(_vds.getstatus().toString()));
    auditLog(logable, AuditLogType.VDS_DETECTED);
}
#end_block

#method_before
private void handleVmDeviceChange() {
    List<String> vmsToUpdate = new ArrayList<String>();
    for (Entry<VmDynamic, VmStatistics> vmHelper : _runningVms.values()) {
        VmDynamic vmDynamic = vmHelper.getKey();
        if (vmDynamic != null) {
            VM vm = _vmDict.get(vmDynamic.getId());
            if (vm != null) {
                String dbHash = vm.getHash();
                if ((dbHash == null && vmDynamic.getHash() != null) || (dbHash != null) && !dbHash.equals(vmDynamic.getHash())) {
                    vmsToUpdate.add(vmDynamic.getId().toString());
                    // update new hash value
                    if (_vmDynamicToSave.containsKey(vm.getId())) {
                        _vmDynamicToSave.get(vm.getId()).setHash(vmDynamic.getHash());
                    } else {
                        AddVmDynamicToList(vmDynamic);
                    }
                }
            }
        }
    }
    if (vmsToUpdate.size() > 0) {
        updateVmDevices(vmsToUpdate);
    }
}
#method_after
private void handleVmDeviceChange() {
    // Go over all the vms and detemine which ones require updating
    List<String> vmsToUpdateFromVds = new ArrayList<String>();
    for (Entry<VmDynamic, VmStatistics> vmHelper : _runningVms.values()) {
        VmDynamic vmDynamic = vmHelper.getKey();
        if (vmDynamic != null) {
            VM vm = _vmDict.get(vmDynamic.getId());
            if (vm != null) {
                String dbHash = vm.getHash();
                if ((dbHash == null && vmDynamic.getHash() != null) || (dbHash != null) && !dbHash.equals(vmDynamic.getHash())) {
                    vmsToUpdateFromVds.add(vmDynamic.getId().toString());
                    // update new hash value
                    if (_vmDynamicToSave.containsKey(vm.getId())) {
                        _vmDynamicToSave.get(vm.getId()).setHash(vmDynamic.getHash());
                    } else {
                        AddVmDynamicToList(vmDynamic);
                    }
                }
            }
        }
    }
    if (vmsToUpdateFromVds.size() > 0) {
        // If there are vms that require updating,
        // get the new info from VDSM in one call, and then update them all
        updateVmDevices(vmsToUpdateFromVds);
    }
}
#end_block

#method_before
private void updateVmDevices(List<String> vmsToUpdate) {
    XmlRpcStruct[] vms = getVmInfo(vmsToUpdate);
    updateVmDevices(vms);
}
#method_after
protected void updateVmDevices(List<String> vmsToUpdate) {
    XmlRpcStruct[] vms = getVmInfo(vmsToUpdate);
    if (vms != null) {
        for (XmlRpcStruct vm : vms) {
            processVmDevices(vm);
        }
    }
}
#end_block

#method_before
private XmlRpcStruct[] getVmInfo(List<String> vmsToUpdate) {
    return (XmlRpcStruct[]) (new FullListVdsCommand<FullListVDSCommandParameters>(new FullListVDSCommandParameters(_vds.getId(), vmsToUpdate)).ExecuteWithReturnValue());
}
#method_after
protected XmlRpcStruct[] getVmInfo(List<String> vmsToUpdate) {
    return (XmlRpcStruct[]) (new FullListVdsCommand<FullListVDSCommandParameters>(new FullListVDSCommandParameters(_vds.getId(), vmsToUpdate)).ExecuteWithReturnValue());
}
#end_block

#method_before
private void UpdateCanSpecify() {
    Network network = (Network) getNetwork().getSelectedItem();
    boolean isChangable = getIsStaticAddress() && network != null && !network.getId().equals(NGuid.Empty);
    getAddress().setIsChangable(isChangable);
    getSubnet().setIsChangable(isChangable);
}
#method_after
private void UpdateCanSpecify() {
    Network network = (Network) getNetwork().getSelectedItem();
    boolean isChangable = getIsStaticAddress();
    getAddress().setIsChangable(isChangable);
    getSubnet().setIsChangable(isChangable);
}
#end_block

#method_before
public boolean Validate() {
    getNetwork().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getAddress().setIsValid(true);
    getSubnet().setIsValid(true);
    Network net = (Network) getNetwork().getSelectedItem();
    if (getIsStaticAddress() && getNetwork().getSelectedItem() != null && !net.getId().equals(NGuid.Empty)) {
        getAddress().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IpAddressValidation() });
        getSubnet().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new SubnetMaskValidation() });
    }
    return getNetwork().getIsValid() && getAddress().getIsValid() && getSubnet().getIsValid();
}
#method_after
public boolean Validate() {
    getNetwork().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getAddress().setIsValid(true);
    getSubnet().setIsValid(true);
    Network net = (Network) getNetwork().getSelectedItem();
    if (getIsStaticAddress()) {
        getAddress().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IpAddressValidation() });
        getSubnet().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new SubnetMaskValidation() });
    }
    return getNetwork().getIsValid() && getAddress().getIsValid() && getSubnet().getIsValid();
}
#end_block

#method_before
public void Edit() {
    Network network = (Network) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    DataCenterNetworkModel networkModel = new DataCenterNetworkModel();
    setWindow(networkModel);
    networkModel.setTitle(ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle());
    // $NON-NLS-1$
    networkModel.setHashName("edit_logical_network");
    networkModel.getName().setEntity(network.getname());
    networkModel.getDescription().setEntity(network.getdescription());
    networkModel.getIsStpEnabled().setEntity(network.getstp());
    networkModel.getHasVLanTag().setEntity(network.getvlan_id() != null);
    networkModel.getVLanTag().setEntity((network.getvlan_id() == null ? 0 : network.getvlan_id()));
    networkModel.getHasMtu().setEntity(network.getMtu() != 0);
    networkModel.getMtu().setEntity(network.getMtu() != 0 ? String.valueOf(network.getMtu()) : null);
    networkModel.getIsVmNetwork().setEntity(network.isVmNetwork());
    // $NON-NLS-1$
    networkModel.setDetachAllCommand(new UICommand("DetachClusters", this));
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            DataCenterNetworkListModel dcNetworkModel = (DataCenterNetworkListModel) model;
            dcNetworkModel.setClusterList((ArrayList<VDSGroup>) ReturnValue);
            dcNetworkModel.setSelectionNodeList(new ArrayList<SelectionTreeNodeModel>());
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            for (VDSGroup vdsGroup : dcNetworkModel.getClusterList()) {
                queryTypeList.add(VdcQueryType.GetAllNetworksByClusterId);
                parametersList.add(new VdsGroupQueryParamenters(vdsGroup.getId()));
                SelectionTreeNodeModel tempVar = new SelectionTreeNodeModel();
                tempVar.setIsSelectedNullable(false);
                tempVar.setEntity(vdsGroup);
                tempVar.setDescription(vdsGroup.getname());
                dcNetworkModel.getSelectionNodeList().add(tempVar);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, dcNetworkModel);
            DataCenterNetworkModel networkModel1 = (DataCenterNetworkModel) dcNetworkModel.getWindow();
            // cannot detach engine networks from clusters
            Network network1 = (Network) dcNetworkModel.getSelectedItem();
            if (StringHelper.stringsEqual(network1.getname(), ENGINE_NETWORK)) {
                for (SelectionTreeNodeModel nodeModel : dcNetworkModel.getSelectionNodeList()) {
                    nodeModel.setIsChangable(false);
                }
                networkModel1.getDetachAllCommand().setIsAvailable(false);
                networkModel1.getName().setIsChangable(false);
                networkModel1.setMessage(ConstantsManager.getInstance().getConstants().cannotDetachManagementNetworkFromClustersMsg());
            }
        }
    };
    AsyncDataProvider.GetClusterList(_asyncQuery, getEntity().getId());
}
#method_after
public void Edit() {
    Network network = (Network) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    DataCenterNetworkModel networkModel = new DataCenterNetworkModel();
    // $NON-NLS-1$
    networkModel.setApplyCommand(new UICommand("Apply", this));
    setWindow(networkModel);
    networkModel.setTitle(ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle());
    // $NON-NLS-1$
    networkModel.setHashName("edit_logical_network");
    networkModel.getName().setEntity(network.getname());
    networkModel.getDescription().setEntity(network.getdescription());
    networkModel.getIsStpEnabled().setEntity(network.getstp());
    networkModel.getHasVLanTag().setEntity(network.getvlan_id() != null);
    networkModel.getVLanTag().setEntity((network.getvlan_id() == null ? 0 : network.getvlan_id()));
    networkModel.getHasMtu().setEntity(network.getMtu() != 0);
    networkModel.getMtu().setEntity(network.getMtu() != 0 ? String.valueOf(network.getMtu()) : null);
    networkModel.getIsVmNetwork().setEntity(network.isVmNetwork());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            DataCenterNetworkListModel dcNetworkModel = (DataCenterNetworkListModel) model;
            dcNetworkModel.setClusterList((ArrayList<VDSGroup>) ReturnValue);
            dcNetworkModel.setNetworkClusterList(new ListModel());
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            List<NetworkClusterModel> items = new ArrayList<NetworkClusterModel>();
            for (VDSGroup vdsGroup : dcNetworkModel.getClusterList()) {
                queryTypeList.add(VdcQueryType.GetAllNetworksByClusterId);
                parametersList.add(new VdsGroupQueryParamenters(vdsGroup.getId()));
                NetworkClusterModel tempVar = new NetworkClusterModel(vdsGroup);
                tempVar.setAttached(false);
                items.add(tempVar);
            }
            dcNetworkModel.getNetworkClusterList().setItems(items);
            Frontend.RunMultipleQueries(queryTypeList, parametersList, dcNetworkModel);
            DataCenterNetworkModel networkModel1 = (DataCenterNetworkModel) dcNetworkModel.getWindow();
            // cannot detach engine networks from clusters
            Network network1 = (Network) dcNetworkModel.getSelectedItem();
            if (StringHelper.stringsEqual(network1.getname(), ENGINE_NETWORK)) {
                for (Object item : dcNetworkModel.getNetworkClusterList().getItems()) {
                    ((NetworkClusterModel) item).setIsChangable(false);
                }
                networkModel1.getApplyCommand().setIsExecutionAllowed(false);
                networkModel1.getName().setIsChangable(false);
                networkModel1.setMessage(ConstantsManager.getInstance().getConstants().cannotDetachManagementNetworkFromClustersMsg());
            }
        }
    };
    AsyncDataProvider.GetClusterList(_asyncQuery, getEntity().getId());
}
#end_block

#method_before
public void New() {
    if (getWindow() != null) {
        return;
    }
    DataCenterNetworkModel networkModel = new DataCenterNetworkModel();
    setWindow(networkModel);
    networkModel.setTitle(ConstantsManager.getInstance().getConstants().newLogicalNetworkTitle());
    // $NON-NLS-1$
    networkModel.setHashName("new_logical_network");
    networkModel.setIsNew(true);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) model;
            DataCenterNetworkModel networkModel1 = (DataCenterNetworkModel) networkListModel.getWindow();
            // networkModel1.ClusterTreeNodes
            ArrayList<VDSGroup> clusterList = (ArrayList<VDSGroup>) ReturnValue;
            SelectionTreeNodeModel nodeModel;
            ArrayList<SelectionTreeNodeModel> clusterTreeNodes = new ArrayList<SelectionTreeNodeModel>();
            for (VDSGroup selectionTreeNodeModel : clusterList) {
                nodeModel = new SelectionTreeNodeModel();
                nodeModel.setEntity(selectionTreeNodeModel);
                nodeModel.setDescription(selectionTreeNodeModel.getname());
                nodeModel.setIsSelectedNullable(false);
                clusterTreeNodes.add(nodeModel);
            }
            networkModel1.setClusterTreeNodes(clusterTreeNodes);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnSave", networkListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            networkModel1.getCommands().add(tempVar);
            // $NON-NLS-1$
            networkModel1.setDetachAllCommand(new UICommand("DetachClusters", networkListModel));
            networkModel1.getDetachAllAvailable().setEntity(false);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", networkListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            networkModel1.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetClusterList(_asyncQuery, getEntity().getId());
}
#method_after
public void New() {
    if (getWindow() != null) {
        return;
    }
    DataCenterNetworkModel networkModel = new DataCenterNetworkModel();
    // $NON-NLS-1$
    networkModel.setApplyCommand(new UICommand("Apply", this));
    setWindow(networkModel);
    networkModel.setTitle(ConstantsManager.getInstance().getConstants().newLogicalNetworkTitle());
    // $NON-NLS-1$
    networkModel.setHashName("new_logical_network");
    networkModel.setIsNew(true);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) model;
            DataCenterNetworkModel networkModel1 = (DataCenterNetworkModel) networkListModel.getWindow();
            // networkModel1.ClusterTreeNodes
            ArrayList<VDSGroup> clusterList = (ArrayList<VDSGroup>) ReturnValue;
            NetworkClusterModel networkClusterModel;
            ListModel networkClusterList = new ListModel();
            List<NetworkClusterModel> items = new ArrayList<NetworkClusterModel>();
            for (VDSGroup cluster : clusterList) {
                networkClusterModel = new NetworkClusterModel(cluster);
                networkClusterModel.setAttached(false);
                items.add(networkClusterModel);
            }
            networkClusterList.setItems(items);
            networkModel1.setNetworkClusterList(networkClusterList);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnSave", networkListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            networkModel1.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", networkListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            networkModel1.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetClusterList(_asyncQuery, getEntity().getId());
}
#end_block

#method_before
public void OnSave() {
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    if (getEntity() == null || (!model.getIsNew() && getSelectedItem() == null)) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(model.getIsNew() ? new Network(null) : (Network) Cloner.clone(getSelectedItem()));
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getId());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.setnewClusters(new ArrayList<VDSGroup>());
    for (SelectionTreeNodeModel selectionTreeNodeModel : model.getClusterTreeNodes()) {
        if (selectionTreeNodeModel.getIsSelectedNullable() != null && selectionTreeNodeModel.getIsSelectedNullable().equals(true)) {
            model.getnewClusters().add((VDSGroup) selectionTreeNodeModel.getEntity());
        }
    }
    ArrayList<VDSGroup> detachNetworkFromClusters = Linq.Except(model.getOriginalClusters(), model.getnewClusters());
    ArrayList<VdcActionParametersBase> actionParameters = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup detachNetworkFromCluster : detachNetworkFromClusters) {
        actionParameters.add(new AttachNetworkToVdsGroupParameter(detachNetworkFromCluster, model.getcurrentNetwork()));
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.DetachNetworkToVdsGroup, actionParameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) result.getState();
            DataCenterNetworkModel networkModel = (DataCenterNetworkModel) networkListModel.getWindow();
            Network network = networkModel.getcurrentNetwork();
            if (networkModel.getIsNew()) {
                Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result1) {
                        DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                        VdcReturnValueBase retVal = result1.getReturnValue();
                        boolean succeeded = false;
                        if (retVal != null && retVal.getSucceeded()) {
                            succeeded = true;
                        }
                        networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
                    }
                }, networkListModel);
            } else {
                if ((Boolean) networkModel.getIsEnabled().getEntity()) {
                    Frontend.RunAction(VdcActionType.UpdateNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                            DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                            VdcReturnValueBase retVal = result1.getReturnValue();
                            networkListModel1.PostNetworkAction(null, retVal != null && retVal.getSucceeded());
                        }
                    }, networkListModel);
                } else {
                    PostNetworkAction(null, true);
                }
            }
        }
    }, this);
}
#method_after
public void OnSave() {
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    if (getEntity() == null || (!model.getIsNew() && getSelectedItem() == null)) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(model.getIsNew() ? new Network(null) : (Network) Cloner.clone(getSelectedItem()));
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getId());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : model.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            model.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    ArrayList<VDSGroup> detachNetworkFromClusters = Linq.Except(model.getOriginalClusters(), model.getnewClusters());
    ArrayList<VdcActionParametersBase> actionParameters = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup detachNetworkFromCluster : detachNetworkFromClusters) {
        actionParameters.add(new AttachNetworkToVdsGroupParameter(detachNetworkFromCluster, model.getcurrentNetwork()));
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.DetachNetworkToVdsGroup, actionParameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) result.getState();
            DataCenterNetworkModel networkModel = (DataCenterNetworkModel) networkListModel.getWindow();
            Network network = networkModel.getcurrentNetwork();
            if (networkModel.getIsNew()) {
                Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result1) {
                        DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                        VdcReturnValueBase retVal = result1.getReturnValue();
                        boolean succeeded = false;
                        if (retVal != null && retVal.getSucceeded()) {
                            succeeded = true;
                        }
                        networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
                    }
                }, networkListModel);
            } else {
                if ((Boolean) networkModel.getIsEnabled().getEntity()) {
                    Frontend.RunAction(VdcActionType.UpdateNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                            DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                            VdcReturnValueBase retVal = result1.getReturnValue();
                            networkListModel1.PostNetworkAction(null, retVal != null && retVal.getSucceeded());
                        }
                    }, networkListModel);
                } else {
                    PostNetworkAction(null, true);
                }
            }
        }
    }, this);
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewCommand()) {
        New();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "DetachClusters")) {
        DetachClusters();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnDetachClusters")) {
        OnDetachClusters();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewCommand()) {
        New();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Apply")) {
        Apply();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnApply")) {
        OnApply();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    }
}
#end_block

#method_before
@Override
public void Executed(FrontendMultipleQueryAsyncResult result) {
    Network network = (Network) getSelectedItem();
    List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    ArrayList<Network> clusterNetworkList = null;
    boolean networkHasAttachedClusters = false;
    for (int i = 0; i < returnValueList.size(); i++) {
        VdcQueryReturnValue returnValue = returnValueList.get(i);
        if (returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
            clusterNetworkList = (ArrayList<Network>) returnValue.getReturnValue();
            for (Network clusterNetwork : clusterNetworkList) {
                if (clusterNetwork.getId().equals(network.getId())) {
                    model.getOriginalClusters().add((VDSGroup) getSelectionNodeList().get(i).getEntity());
                    getSelectionNodeList().get(i).setIsSelectedNullable(true);
                    networkHasAttachedClusters = true;
                    break;
                }
            }
        }
    }
    if (networkHasAttachedClusters) {
        model.getIsEnabled().setEntity(false);
        if (!StringHelper.stringsEqual(network.getname(), ENGINE_NETWORK)) {
            model.getDetachAllAvailable().setEntity(!(Boolean) model.getIsEnabled().getEntity());
        }
    }
    model.setClusterTreeNodes(getSelectionNodeList());
    if (StringHelper.stringsEqual(network.getname(), ENGINE_NETWORK) && getSelectionNodeList().size() > 0) {
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("Cancel", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
        tempVar.setIsDefault(true);
        tempVar.setIsCancel(true);
        model.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("OnSave", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar2.setIsDefault(true);
        model.getCommands().add(tempVar2);
        // $NON-NLS-1$
        UICommand tempVar3 = new UICommand("Cancel", this);
        tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar3.setIsCancel(true);
        model.getCommands().add(tempVar3);
    }
}
#method_after
@Override
public void Executed(FrontendMultipleQueryAsyncResult result) {
    Network network = (Network) getSelectedItem();
    List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    List<Network> clusterNetworkList = null;
    List<NetworkClusterModel> networkClusterList = (List<NetworkClusterModel>) getNetworkClusterList().getItems();
    boolean networkHasAttachedClusters = false;
    for (int i = 0; i < returnValueList.size(); i++) {
        VdcQueryReturnValue returnValue = returnValueList.get(i);
        if (returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
            clusterNetworkList = (List<Network>) returnValue.getReturnValue();
            for (Network clusterNetwork : clusterNetworkList) {
                if (clusterNetwork.getId().equals(network.getId())) {
                    model.getOriginalClusters().add(networkClusterList.get(i).getEntity());
                    networkClusterList.get(i).setAttached(true);
                    networkHasAttachedClusters = true;
                    break;
                }
            }
        }
    }
    if (networkHasAttachedClusters) {
        model.getIsEnabled().setEntity(false);
    }
    model.setNetworkClusterList(getNetworkClusterList());
    if (StringHelper.stringsEqual(network.getname(), ENGINE_NETWORK) && networkClusterList.size() > 0) {
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("Cancel", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
        tempVar.setIsDefault(true);
        tempVar.setIsCancel(true);
        model.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("OnSave", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar2.setIsDefault(true);
        model.getCommands().add(tempVar2);
        // $NON-NLS-1$
        UICommand tempVar3 = new UICommand("Cancel", this);
        tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        tempVar3.setIsCancel(true);
        model.getCommands().add(tempVar3);
    }
}
#end_block

#method_before
public void OnEditManagementNetworkConfirmation(boolean isBond) {
    if (!isBond) {
        HostManagementNetworkModel model = (HostManagementNetworkModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getCheckConnectivity().getEntity() == true) {
            OnEditManagementNetwork();
            return;
        }
    } else {
        HostBondInterfaceModel model = (HostBondInterfaceModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getCheckConnectivity().getEntity() == true) {
            OnBond();
            return;
        }
    }
    ConfirmationModel confirmModel = new ConfirmationModel();
    setConfirmWindow(confirmModel);
    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().confirmTitle());
    confirmModel.getLatch().setEntity(true);
    if (!isBond) {
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnEditManagementNetwork", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        confirmModel.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("OnBond", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar2.setIsDefault(true);
        confirmModel.getCommands().add(tempVar2);
    }
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("CancelConfirm", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    confirmModel.getCommands().add(tempVar3);
}
#method_after
public void OnEditManagementNetworkConfirmation(boolean isBond) {
    if (!isBond) {
        HostManagementNetworkModel model = (HostManagementNetworkModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getCheckConnectivity().getEntity() == true) {
            OnEditManagementNetwork();
            return;
        }
    } else {
        HostBondInterfaceModel model = (HostBondInterfaceModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getCheckConnectivity().getEntity() == true) {
            OnBond();
            return;
        }
    }
    ConfirmationModel confirmModel = new ConfirmationModel();
    setConfirmWindow(confirmModel);
    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().confirmTitle());
    confirmModel.getLatch().setEntity(true);
    confirmModel.getLatch().setIsAvailable(true);
    confirmModel.getLatch().setIsChangable(true);
    if (!isBond) {
        // $NON-NLS-1$
        UICommand tempVar = new UICommand("OnEditManagementNetwork", this);
        tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar.setIsDefault(true);
        confirmModel.getCommands().add(tempVar);
    } else {
        // $NON-NLS-1$
        UICommand tempVar2 = new UICommand("OnBond", this);
        tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
        tempVar2.setIsDefault(true);
        confirmModel.getCommands().add(tempVar2);
    }
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("CancelConfirm", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    confirmModel.getCommands().add(tempVar3);
}
#end_block

#method_before
public void OnSetupNetworks() {
    final HostSetupNetworksModel model = (HostSetupNetworksModel) getWindow();
    boolean checkConnectivity = true;
    int conectivityTimeout = 60000;
    SetupNetworksParameters params = new SetupNetworksParameters();
    params.setInterfaces(model.getAllNics());
    params.setCheckConnectivity(checkConnectivity);
    params.setConectivityTimeout(conectivityTimeout);
    params.setVdsId(getEntity().getId());
    IFrontendActionAsyncCallback callback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            model.StopProgress();
            VdcReturnValueBase returnValue = result.getReturnValue();
            if (returnValue != null && returnValue.getSucceeded()) {
                Cancel();
                Search();
            }
        }
    };
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.SetupNetworks, params, callback);
}
#method_after
public void OnSetupNetworks() {
    final HostSetupNetworksModel model = (HostSetupNetworksModel) getWindow();
    int conectivityTimeout = 60000;
    SetupNetworksParameters params = new SetupNetworksParameters();
    params.setInterfaces(model.getAllNics());
    params.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
    params.setConectivityTimeout(conectivityTimeout);
    params.setVdsId(getEntity().getId());
    IFrontendActionAsyncCallback callback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = model.getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(getEntity().getId(), HostInterfaceListModel.this);
                } else {
                    model.StopProgress();
                    Cancel();
                    Search();
                }
            } else {
                model.StopProgress();
            }
        }
    };
    setcurrentModel(model);
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.SetupNetworks, params, callback);
}
#end_block

#method_before
private void UpdateActionAvailability() {
    VDS host = getEntity();
    VdsNetworkInterface selectedItem = (VdsNetworkInterface) getSelectedItem();
    ArrayList<VdsNetworkInterface> selectedItems = getSelectedItems();
    getEditCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItem != null && selectedItems.size() == 1 && StringHelper.isNullOrEmpty(selectedItem.getBondName()) && !selectedItem.getIsManagement());
    getBondCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItems.size() >= 2 && !IsAnyBond(selectedItems) && Linq.FindAllInterfaceNetworkNameNotEmpty(Linq.VdsNetworkInterfaceListToBase(selectedItems)).size() <= 1 && Linq.FindAllInterfaceBondNameIsEmpty(selectedItems).size() == selectedItems.size() && Linq.FindAllInterfaceVlanIdIsEmpty(selectedItems).size() == selectedItems.size());
    // to bond, selected lines must not have more that 1 networks (vlan or not)
    if (getItems() != null) {
        ArrayList<HostInterfaceLineModel> itemList = (ArrayList<HostInterfaceLineModel>) getItems();
        // total network count cannot be more than 1
        int totalNetworkCount = 0;
        for (HostInterfaceLineModel lineModel : itemList) {
            if (lineModel.getIsSelected()) {
                int lineNetworkCount = lineModel.getVlanSize() + (lineModel.getNetworkName() != null ? 1 : 0);
                if (lineNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
                totalNetworkCount += lineNetworkCount;
                if (totalNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
            }
        }
    }
    getDetachCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && !StringHelper.isNullOrEmpty(selectedItem.getNetworkName()) && !selectedItem.getIsManagement());
    getSaveNetworkConfigCommand().setIsExecutionAllowed(host != null && (host.getnet_config_dirty() == null ? false : host.getnet_config_dirty()));
    getEditManagementNetworkCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && selectedItem.getIsManagement());
    // Setup Networks is only available on 3.1 Clusters, all the other commands (except save network configuration) available only on less than 3.1 Clusters
    if (host != null) {
        Version v31 = new Version(3, 1);
        boolean isLessThan31 = host.getvds_group_compatibility_version().compareTo(v31) < 0;
        getSetupNetworksCommand().setIsAvailable(!isLessThan31);
        getSaveNetworkConfigCommand().setIsAvailable(true);
        getEditCommand().setIsAvailable(isLessThan31);
        getBondCommand().setIsAvailable(isLessThan31);
        getDetachCommand().setIsAvailable(isLessThan31);
        getEditManagementNetworkCommand().setIsAvailable(isLessThan31);
    }
}
#method_after
private void UpdateActionAvailability() {
    VDS host = getEntity();
    VdsNetworkInterface selectedItem = (VdsNetworkInterface) getSelectedItem();
    ArrayList<VdsNetworkInterface> selectedItems = getSelectedItems();
    getEditCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItem != null && selectedItems.size() == 1 && StringHelper.isNullOrEmpty(selectedItem.getBondName()) && !selectedItem.getIsManagement());
    getBondCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItems.size() >= 2 && !IsAnyBond(selectedItems) && Linq.FindAllInterfaceNetworkNameNotEmpty(Linq.VdsNetworkInterfaceListToBase(selectedItems)).size() <= 1 && Linq.FindAllInterfaceBondNameIsEmpty(selectedItems).size() == selectedItems.size() && Linq.FindAllInterfaceVlanIdIsEmpty(selectedItems).size() == selectedItems.size());
    // to bond, selected lines must not have more that 1 networks (vlan or not)
    if (getItems() != null) {
        ArrayList<HostInterfaceLineModel> itemList = (ArrayList<HostInterfaceLineModel>) getItems();
        // total network count cannot be more than 1
        int totalNetworkCount = 0;
        for (HostInterfaceLineModel lineModel : itemList) {
            if (lineModel.getIsSelected()) {
                int lineNetworkCount = lineModel.getVlanSize() + (lineModel.getNetworkName() != null ? 1 : 0);
                if (lineNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
                totalNetworkCount += lineNetworkCount;
                if (totalNetworkCount > 1) {
                    // bailout
                    getBondCommand().setIsExecutionAllowed(false);
                    break;
                }
            }
        }
    }
    getDetachCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && !StringHelper.isNullOrEmpty(selectedItem.getNetworkName()) && !selectedItem.getIsManagement());
    getSaveNetworkConfigCommand().setIsExecutionAllowed(host != null && (host.getnet_config_dirty() == null ? false : host.getnet_config_dirty()));
    getEditManagementNetworkCommand().setIsExecutionAllowed(host != null && host.getstatus() != VDSStatus.NonResponsive && selectedItems.size() == 1 && selectedItem != null && selectedItem.getIsManagement());
    // Setup Networks is only available on 3.1 Clusters, all the other commands (except save network configuration) available only on less than 3.1 Clusters
    if (host != null) {
        Version v31 = new Version(3, 1);
        boolean isLessThan31 = host.getvds_group_compatibility_version().compareTo(v31) < 0;
        getSetupNetworksCommand().setIsAvailable(!isLessThan31);
        getSaveNetworkConfigCommand().setIsAvailable(isLessThan31);
        getEditCommand().setIsAvailable(isLessThan31);
        getBondCommand().setIsAvailable(isLessThan31);
        getDetachCommand().setIsAvailable(isLessThan31);
        getEditManagementNetworkCommand().setIsAvailable(isLessThan31);
    }
}
#end_block

#method_before
public List<VdsNetworkInterface> getRemovedBonds() {
    return removedBonds;
}
#method_after
public Set<String> getRemovedBonds() {
    return removedBonds;
}
#end_block

#method_before
public void setRemovedBonds(List<VdsNetworkInterface> removedBonds) {
    this.removedBonds = removedBonds;
}
#method_after
public void setRemovedBonds(Set<String> removedBonds) {
    this.removedBonds = removedBonds;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    String address = getParameters().getAddress();
    String subnet = StringHelper.isNullOrEmpty(getParameters().getSubnet()) ? getParameters().getNetwork().getsubnet() : getParameters().getSubnet();
    String gateway = StringHelper.isNullOrEmpty(getParameters().getGateway()) ? getParameters().getNetwork().getgateway() : getParameters().getGateway();
    NetworkVdsmVDSCommandParameters parameters = new NetworkVdsmVDSCommandParameters(getParameters().getVdsId(), getParameters().getNetwork().getname(), getParameters().getNetwork().getvlan_id(), getParameters().getBondName(), getParameters().getNics(), address, subnet, gateway, getParameters().getNetwork().getstp(), getParameters().getBondingOptions(), getParameters().getBootProtocol());
    VDSReturnValue retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddNetwork, parameters);
    if (retVal.getSucceeded()) {
        // update vds network data
        retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new VdsIdAndVdsVDSCommandParametersBase(getParameters().getVdsId()));
        if (retVal.getSucceeded()) {
            // set network status (this can change the network status to
            // operational)
            VdsStatic vdsStatic = DbFacade.getInstance().getVdsStaticDAO().get(getParameters().getVdsId());
            AttachNetworkToVdsGroupCommand.SetNetworkStatus(vdsStatic.getvds_group_id(), getParameters().getNetwork());
            setSucceeded(true);
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    T params = getParameters();
    String address = params.getAddress();
    String subnet = StringUtils.isEmpty(params.getSubnet()) ? params.getNetwork().getsubnet() : params.getSubnet();
    String gateway = StringUtils.isEmpty(params.getGateway()) ? params.getNetwork().getgateway() : params.getGateway();
    NetworkVdsmVDSCommandParameters vdsParams = new NetworkVdsmVDSCommandParameters(params.getVdsId(), params.getNetwork(), params.getBondName(), params.getNics(), address, subnet, gateway, params.getBondingOptions(), params.getBootProtocol());
    VDSReturnValue retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddNetwork, vdsParams);
    if (retVal.getSucceeded()) {
        // update vds network data
        retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new VdsIdAndVdsVDSCommandParametersBase(params.getVdsId()));
        if (retVal.getSucceeded()) {
            // set network status (this can change the network status to
            // operational)
            VdsStatic vdsStatic = DbFacade.getInstance().getVdsStaticDAO().get(params.getVdsId());
            AttachNetworkToVdsGroupCommand.SetNetworkStatus(vdsStatic.getvds_group_id(), params.getNetwork());
            setSucceeded(true);
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // check minimum 2 nics in bond
    if (getParameters().getNics().length < 2) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_BOND_PARAMETERS_INVALID);
        return false;
    }
    if (getParameters().getNetwork() == null) {
        addCanDoActionMessage(VdcBllMessages.NETWROK_NOT_EXISTS);
        return false;
    }
    List<VdsNetworkInterface> interfaces = DbFacade.getInstance().getInterfaceDAO().getAllInterfacesForVds(getParameters().getVdsId());
    // check that bond exists
    VdsNetworkInterface bond = LinqUtils.firstOrNull(interfaces, new Predicate<VdsNetworkInterface>() {

        @Override
        public boolean eval(VdsNetworkInterface anInterface) {
            return anInterface.getName().equals(getParameters().getBondName());
        }
    });
    if (bond == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_BOND_NAME_EXISTS);
        return false;
    }
    // check that each nic is valid
    for (final String nic : getParameters().getNics()) {
        VdsNetworkInterface iface = LinqUtils.firstOrNull(interfaces, new Predicate<VdsNetworkInterface>() {

            @Override
            public boolean eval(VdsNetworkInterface i) {
                return i.getName().equals(nic);
            }
        });
        if (iface == null) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_BOND_NAME_EXISTS);
            return false;
        } else if (!StringHelper.isNullOrEmpty(iface.getBondName())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE);
            return false;
        } else if (!StringHelper.isNullOrEmpty(iface.getNetworkName())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE);
            return false;
        } else if (NetworkUtils.interfaceHasVlan(iface, interfaces)) {
            // check that one of the nics is not connected to vlan
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_IN_USE_BY_VLAN);
            return false;
        }
    }
    // check that the network not in use
    VdsNetworkInterface I = LinqUtils.firstOrNull(interfaces, new Predicate<VdsNetworkInterface>() {

        @Override
        public boolean eval(VdsNetworkInterface i) {
            if (i.getNetworkName() != null) {
                return i.getNetworkName().equals(getParameters().getNetwork().getname());
            }
            return false;
        }
    });
    if (I != null) {
        addCanDoActionMessage(VdcBllMessages.NETWROK_ALREADY_ATTACHED_TO_INTERFACE);
        return false;
    }
    // check that the network exists in current cluster
    List<Network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(getVds().getvds_group_id());
    if (null == LinqUtils.firstOrNull(networks, new Predicate<Network>() {

        @Override
        public boolean eval(Network network) {
            return network.getname().equals(getParameters().getNetwork().getname());
        }
    })) {
        addCanDoActionMessage(VdcBllMessages.NETWROK_NOT_EXISTS_IN_CLUSTER);
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    // check minimum 2 nics in bond
    if (getParameters().getNics().length < 2) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_BOND_PARAMETERS_INVALID);
        return false;
    }
    if (getParameters().getNetwork() == null) {
        addCanDoActionMessage(VdcBllMessages.NETWROK_NOT_EXISTS);
        return false;
    }
    List<VdsNetworkInterface> interfaces = DbFacade.getInstance().getInterfaceDAO().getAllInterfacesForVds(getParameters().getVdsId());
    // check that bond exists
    VdsNetworkInterface bond = LinqUtils.firstOrNull(interfaces, new Predicate<VdsNetworkInterface>() {

        @Override
        public boolean eval(VdsNetworkInterface anInterface) {
            return anInterface.getName().equals(getParameters().getBondName());
        }
    });
    if (bond == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_BOND_NAME_EXISTS);
        return false;
    }
    // check that each nic is valid
    for (final String nic : getParameters().getNics()) {
        VdsNetworkInterface iface = LinqUtils.firstOrNull(interfaces, new Predicate<VdsNetworkInterface>() {

            @Override
            public boolean eval(VdsNetworkInterface i) {
                return i.getName().equals(nic);
            }
        });
        if (iface == null) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_BOND_NAME_EXISTS);
            return false;
        } else if (StringUtils.isNotEmpty(iface.getBondName())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE);
            return false;
        } else if (StringUtils.isNotEmpty(iface.getNetworkName())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE);
            return false;
        } else if (NetworkUtils.interfaceHasVlan(iface, interfaces)) {
            // check that one of the nics is not connected to vlan
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_IN_USE_BY_VLAN);
            return false;
        }
    }
    // check that the network not in use
    VdsNetworkInterface I = LinqUtils.firstOrNull(interfaces, new Predicate<VdsNetworkInterface>() {

        @Override
        public boolean eval(VdsNetworkInterface i) {
            if (i.getNetworkName() != null) {
                return i.getNetworkName().equals(getParameters().getNetwork().getname());
            }
            return false;
        }
    });
    if (I != null) {
        addCanDoActionMessage(VdcBllMessages.NETWROK_ALREADY_ATTACHED_TO_INTERFACE);
        return false;
    }
    // check that the network exists in current cluster
    List<Network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(getVds().getvds_group_id());
    if (null == LinqUtils.firstOrNull(networks, new Predicate<Network>() {

        @Override
        public boolean eval(Network network) {
            return network.getname().equals(getParameters().getNetwork().getname());
        }
    })) {
        addCanDoActionMessage(VdcBllMessages.NETWROK_NOT_EXISTS_IN_CLUSTER);
        return false;
    }
    return true;
}
#end_block

#method_before
private List<VdsNetworkInterface> getRemovedBonds() {
    return helper.getRemovedBonds();
}
#method_after
private Set<String> getRemovedBonds() {
    return helper.getRemovedBonds();
}
#end_block

#method_before
private void pollVds() {
    FutureVDSCall<VDSReturnValue> task = Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new VdsIdVDSCommandParametersBase(getVds().getId()));
    try {
        log.debugFormat("polling host {0}", getVdsName());
        task.get(Config.<Integer>GetValue(ConfigValues.SetupNetworksPollingTimeout), TimeUnit.SECONDS);
    } catch (Exception e) {
    // ignore failure. network can go down due to VDSM changing the network
    }
}
#method_after
private void pollVds() {
    long timeBeforePoll = System.currentTimeMillis();
    FutureVDSCall<VDSReturnValue> task = Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new VdsIdVDSCommandParametersBase(getVds().getId()));
    try {
        task.get(Config.<Integer>GetValue(ConfigValues.SetupNetworksPollingTimeout), TimeUnit.SECONDS);
        if (System.currentTimeMillis() - timeBeforePoll < POLLING_BREAK) {
            Thread.sleep(POLLING_BREAK);
        }
    } catch (Exception e) {
    // ignore failure. network can go down due to VDSM changing the network
    }
}
#end_block

#method_before
private void ResumeVm() {
    mResume = true;
    // Vds = ResourceManager.Instance.getVds(Vm.run_on_vds.Value);
    setVdsId(new Guid(getVm().getrun_on_vds().toString()));
    if (getVds() != null) {
        try {
            IncrementVdsPendingVmsCount();
            VDSReturnValue result = Backend.getInstance().getResourceManager().RunAsyncVdsCommand(VDSCommandType.Resume, new ResumeVDSCommandParameters(getVdsId(), getVm().getId()), this);
            setActionReturnValue(result.getReturnValue());
            setSucceeded(result.getSucceeded());
            ExecutionHandler.setAsyncJob(getExecutionContext(), true);
        } finally {
            DecrementVdsPendingVmsCount();
        }
    } else {
        setActionReturnValue(getVm().getstatus());
    }
}
#method_after
private void ResumeVm() {
    mResume = true;
    // Vds = ResourceManager.Instance.getVds(Vm.run_on_vds.Value);
    setVdsId(new Guid(getVm().getrun_on_vds().toString()));
    if (getVds() != null) {
        try {
            IncrementVdsPendingVmsCount();
            VDSReturnValue result = Backend.getInstance().getResourceManager().RunAsyncVdsCommand(VDSCommandType.Resume, new ResumeVDSCommandParameters(getVdsId(), getVm().getId()), this);
            setActionReturnValue(result.getReturnValue());
            setSucceeded(result.getSucceeded());
            ExecutionHandler.setAsyncJob(getExecutionContext(), true);
        } finally {
            freeLock();
            DecrementVdsPendingVmsCount();
        }
    } else {
        setActionReturnValue(getVm().getstatus());
    }
}
#end_block

#method_before
protected void RunVm() {
    setActionReturnValue(VMStatus.Down);
    if (GetVdsToRunOn()) {
        VMStatus status = null;
        try {
            IncrementVdsPendingVmsCount();
            AttachCd();
            if (connectLunDisks(getVdsId())) {
                status = CreateVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } finally {
            DecrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (VM.isStatusUp(status) || status == VMStatus.RestoringState) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds
            // no need to log the command because it is being logged inside
            // the rerun
            log.infoFormat("Failed to run desktop {0}, rerun", getVm().getvm_name());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            Rerun();
        }
    } else {
        FailedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#method_after
protected void RunVm() {
    setActionReturnValue(VMStatus.Down);
    if (GetVdsToRunOn()) {
        VMStatus status = null;
        try {
            IncrementVdsPendingVmsCount();
            AttachCd();
            if (connectLunDisks(getVdsId())) {
                status = CreateVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } finally {
            freeLock();
            DecrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (VM.isStatusUp(status) || status == VMStatus.RestoringState) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds
            // no need to log the command because it is being logged inside
            // the rerun
            log.infoFormat("Failed to run desktop {0}, rerun", getVm().getvm_name());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            Rerun();
        }
    } else {
        FailedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#end_block

#method_before
public static void updateNetworkData(VDS vds, XmlRpcStruct xmlRpcStruct) {
    List<VdsNetworkInterface> oldInterfaces = DbFacade.getInstance().getInterfaceDAO().getAllInterfacesForVds(vds.getId());
    vds.getInterfaces().clear();
    // Interfaces list
    Map<String, Object> nics = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_nics);
    if (nics != null) {
        for (String key : nics.keySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.NewGuid());
            iface.setId(iStats.getId());
            iface.setName(key);
            iface.setVdsId(vds.getId());
            // name value of nic property, i.e.: speed = 1000
            Map<String, Object> nic = (Map<String, Object>) nics.get(key);
            if (nic != null) {
                if (nic.get("speed") != null) {
                    Object speed = nic.get("speed");
                    iface.setSpeed((Integer) speed);
                }
                iface.setAddress((String) nic.get("addr"));
                iface.setSubnet((String) nic.get("netmask"));
                iface.setMacAddress((String) nic.get("hwaddr"));
                // if we get "permhwaddr", we are a part of a bond and we use that as the mac address
                if (nic.get("permhwaddr") != null) {
                    iface.setMacAddress((String) nic.get("permhwaddr"));
                }
                if (StringUtils.isNotBlank((String) nic.get(VdsProperties.mtu))) {
                    iface.setMtu(Integer.parseInt((String) nic.get(VdsProperties.mtu)));
                }
            }
            iStats.setVdsId(vds.getId());
            vds.getInterfaces().add(iface);
        }
    }
    // interface to vlan map
    Map<String, Integer> currVlans = new HashMap<String, Integer>();
    // vlans
    Map<String, Object> vlans = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_vlans);
    if (vlans != null) {
        for (String key : vlans.keySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.NewGuid());
            iface.setId(iStats.getId());
            iface.setName(key);
            iface.setVdsId(vds.getId());
            if (key.contains(".")) {
                String[] names = key.split("[.]", -1);
                String vlan = names[1];
                iface.setVlanId(Integer.parseInt(vlan));
                currVlans.put(key, iface.getVlanId());
            }
            Map<String, Object> vlan = (Map<String, Object>) vlans.get(key);
            iface.setAddress((String) vlan.get("addr"));
            iface.setSubnet((String) vlan.get("netmask"));
            if (StringUtils.isNotBlank((String) vlan.get(VdsProperties.mtu))) {
                iface.setMtu(Integer.parseInt((String) vlan.get(VdsProperties.mtu)));
            }
            iStats.setVdsId(vds.getId());
            vds.getInterfaces().add(iface);
        }
    }
    // bonds
    Map<String, Object> bonds = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_bondings);
    if (bonds != null) {
        for (String key : bonds.keySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.NewGuid());
            iface.setId(iStats.getId());
            iface.setName(key);
            iface.setVdsId(vds.getId());
            iface.setBonded(true);
            Map<String, Object> bond = (Map<String, Object>) bonds.get(key);
            ;
            if (bond != null) {
                iface.setMacAddress((String) bond.get("hwaddr"));
                iface.setAddress((String) bond.get("addr"));
                iface.setSubnet((String) bond.get("netmask"));
                iface.setGateway((String) bond.get(VdsProperties.GLOBAL_GATEWAY));
                if (bond.get("slaves") != null) {
                    Object[] interfaces = (Object[]) bond.get("slaves");
                    iStats.setVdsId(vds.getId());
                    AddBond(vds, iface, interfaces);
                }
                if (StringUtils.isNotBlank((String) bond.get(VdsProperties.mtu))) {
                    iface.setMtu(Integer.parseInt((String) bond.get(VdsProperties.mtu)));
                }
                XmlRpcStruct config = (bond.get("cfg") instanceof Map) ? new XmlRpcStruct((Map<String, Object>) bond.get("cfg")) : null;
                if (config != null && config.getItem("BONDING_OPTS") != null) {
                    iface.setBondOptions(config.getItem("BONDING_OPTS").toString());
                }
                AddBootProtocol(config, iface);
            }
        }
    }
    // network to vlan map
    Map<String, Integer> networkVlans = new HashMap<String, Integer>();
    // Networks collection (name point to list of nics or bonds)
    Map<String, Object> networks = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_networks);
    if (networks != null) {
        vds.getNetworks().clear();
        for (String key : networks.keySet()) {
            Map<String, Object> network = (Map<String, Object>) networks.get(key);
            if (network != null) {
                Network net = new Network();
                net.setname(key);
                net.setaddr((String) network.get("addr"));
                net.setsubnet((String) network.get("netmask"));
                net.setgateway((String) network.get(VdsProperties.GLOBAL_GATEWAY));
                if (StringUtils.isNotBlank((String) network.get(VdsProperties.mtu))) {
                    net.setMtu(Integer.parseInt((String) network.get(VdsProperties.mtu)));
                }
                // map interface to network
                if (network.get("interface") != null) {
                    updateNetwrokDetailsInInterface(vds, currVlans, networkVlans, network, net, network.get("interface").toString());
                } else {
                    Object[] ports = (Object[]) network.get("ports");
                    if (ports != null) {
                        for (Object port : ports) {
                            updateNetwrokDetailsInInterface(vds, currVlans, networkVlans, network, net, port.toString());
                        }
                    }
                }
                vds.getNetworks().add(net);
            }
        }
    }
    // Check vlans are line with Clusters vlans
    checkClusterVlans(vds, networkVlans);
    // set bonding options
    setBondingOptions(vds, oldInterfaces);
}
#method_after
public static void updateNetworkData(VDS vds, XmlRpcStruct xmlRpcStruct) {
    List<VdsNetworkInterface> oldInterfaces = DbFacade.getInstance().getInterfaceDAO().getAllInterfacesForVds(vds.getId());
    vds.getInterfaces().clear();
    // Interfaces list
    Map<String, Object> nics = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_nics);
    if (nics != null) {
        for (String key : nics.keySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.NewGuid());
            iface.setId(iStats.getId());
            iface.setName(key);
            iface.setVdsId(vds.getId());
            // name value of nic property, i.e.: speed = 1000
            Map<String, Object> nic = (Map<String, Object>) nics.get(key);
            if (nic != null) {
                if (nic.get("speed") != null) {
                    Object speed = nic.get("speed");
                    iface.setSpeed((Integer) speed);
                }
                iface.setAddress((String) nic.get("addr"));
                iface.setSubnet((String) nic.get("netmask"));
                iface.setMacAddress((String) nic.get("hwaddr"));
                // if we get "permhwaddr", we are a part of a bond and we use that as the mac address
                if (nic.get("permhwaddr") != null) {
                    iface.setMacAddress((String) nic.get("permhwaddr"));
                }
                if (StringUtils.isNotBlank((String) nic.get(VdsProperties.mtu))) {
                    iface.setMtu(Integer.parseInt((String) nic.get(VdsProperties.mtu)));
                }
            }
            iStats.setVdsId(vds.getId());
            vds.getInterfaces().add(iface);
        }
    }
    // interface to vlan map
    Map<String, Integer> currVlans = new HashMap<String, Integer>();
    // vlans
    Map<String, Object> vlans = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_vlans);
    if (vlans != null) {
        for (String key : vlans.keySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.NewGuid());
            iface.setId(iStats.getId());
            iface.setName(key);
            iface.setVdsId(vds.getId());
            if (key.contains(".")) {
                String[] names = key.split("[.]", -1);
                String vlan = names[1];
                iface.setVlanId(Integer.parseInt(vlan));
                currVlans.put(key, iface.getVlanId());
            }
            Map<String, Object> vlan = (Map<String, Object>) vlans.get(key);
            iface.setAddress((String) vlan.get("addr"));
            iface.setSubnet((String) vlan.get("netmask"));
            if (StringUtils.isNotBlank((String) vlan.get(VdsProperties.mtu))) {
                iface.setMtu(Integer.parseInt((String) vlan.get(VdsProperties.mtu)));
            }
            iStats.setVdsId(vds.getId());
            vds.getInterfaces().add(iface);
        }
    }
    // bonds
    Map<String, Object> bonds = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_bondings);
    if (bonds != null) {
        for (String key : bonds.keySet()) {
            VdsNetworkInterface iface = new VdsNetworkInterface();
            VdsNetworkStatistics iStats = new VdsNetworkStatistics();
            iface.setStatistics(iStats);
            iStats.setId(Guid.NewGuid());
            iface.setId(iStats.getId());
            iface.setName(key);
            iface.setVdsId(vds.getId());
            iface.setBonded(true);
            Map<String, Object> bond = (Map<String, Object>) bonds.get(key);
            ;
            if (bond != null) {
                iface.setMacAddress((String) bond.get("hwaddr"));
                iface.setAddress((String) bond.get("addr"));
                iface.setSubnet((String) bond.get("netmask"));
                iface.setGateway((String) bond.get(VdsProperties.GLOBAL_GATEWAY));
                if (bond.get("slaves") != null) {
                    Object[] interfaces = (Object[]) bond.get("slaves");
                    iStats.setVdsId(vds.getId());
                    AddBond(vds, iface, interfaces);
                }
                if (StringUtils.isNotBlank((String) bond.get(VdsProperties.mtu))) {
                    iface.setMtu(Integer.parseInt((String) bond.get(VdsProperties.mtu)));
                }
                XmlRpcStruct config = (bond.get("cfg") instanceof Map) ? new XmlRpcStruct((Map<String, Object>) bond.get("cfg")) : null;
                if (config != null && config.getItem("BONDING_OPTS") != null) {
                    iface.setBondOptions(config.getItem("BONDING_OPTS").toString());
                }
                AddBootProtocol(config, iface);
            }
        }
    }
    // network to vlan map
    Map<String, Integer> networkVlans = new HashMap<String, Integer>();
    // Networks collection (name point to list of nics or bonds)
    Map<String, Object> networks = (Map<String, Object>) xmlRpcStruct.getItem(VdsProperties.network_networks);
    if (networks != null) {
        vds.getNetworks().clear();
        for (String key : networks.keySet()) {
            Map<String, Object> network = (Map<String, Object>) networks.get(key);
            if (network != null) {
                Network net = new Network();
                net.setname(key);
                net.setaddr((String) network.get("addr"));
                net.setsubnet((String) network.get("netmask"));
                net.setgateway((String) network.get(VdsProperties.GLOBAL_GATEWAY));
                if (StringUtils.isNotBlank((String) network.get(VdsProperties.mtu))) {
                    net.setMtu(Integer.parseInt((String) network.get(VdsProperties.mtu)));
                }
                // map interface to network
                if (network.get("interface") != null) {
                    updateNetwrokDetailsInInterface(vds, currVlans, networkVlans, network, net, network.get("interface").toString());
                } else {
                    Object[] ports = (Object[]) network.get("ports");
                    if (ports != null) {
                        for (Object port : ports) {
                            updateNetwrokDetailsInInterface(vds, currVlans, networkVlans, network, net, port.toString());
                        }
                    }
                }
                vds.getNetworks().add(net);
            }
        }
    }
    // Check vlans are line with Clusters vlans
    checkClusterVlans(vds, networkVlans);
    // set bonding options
    setBondingOptions(vds, oldInterfaces);
    // This information was added in 3.1, so don't use it if it's not there.
    if (xmlRpcStruct.containsKey(VdsProperties.netConfigDirty)) {
        vds.setnet_config_dirty(AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty));
    }
}
#end_block

#method_before
public void onEdit(NetworkItemModel<?> item) {
    // $NON-NLS-1$
    assert item instanceof NetworkInterfaceModel : "only nics can be edited";
    NetworkInterfaceModel nic = (NetworkInterfaceModel) item;
    // $NON-NLS-1$
    assert nic.getItems().size() > 0 : "must have at least one network to edit";
    final VdsNetworkInterface entity = nic.getEntity();
    Model editPopup;
    BaseCommandTarget okTarget;
    if (nic instanceof BondNetworkInterfaceModel) {
        /**
         * **************
         *  Bond Dialog
         * ***************
         */
        BondNetworkInterfaceModel bondModel = (BondNetworkInterfaceModel) nic;
        editPopup = new HostBondInterfaceModel(true);
        final HostBondInterfaceModel bondDialogModel = (HostBondInterfaceModel) editPopup;
        bondDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editBondInterfaceTitle(entity.getName()));
        bondDialogModel.getBondingOptions().setIsAvailable(true);
        bondDialogModel.getBond().setIsAvailable(false);
        // this dialog has only one selected network, just put the first one
        bondDialogModel.getNetwork().setSelectedItem(nic.getItems().get(0).getEntity());
        bondDialogModel.setBootProtocol(entity.getBootProtocol());
        // bond options
        String bondOptions = entity.getBondOptions();
        List<KeyValuePairCompat<String, EntityModel>> items = (List<KeyValuePairCompat<String, EntityModel>>) bondDialogModel.getBondingOptions().getItems();
        boolean found = false;
        KeyValuePairCompat<String, EntityModel> customKey = null;
        for (KeyValuePairCompat<String, EntityModel> pair : items) {
            String key = pair.getKey();
            if (key.equals(bondOptions)) {
                bondDialogModel.getBondingOptions().setSelectedItem(pair);
                found = true;
                break;
            } else {
                if ("custom".equals(key)) {
                    // $NON-NLS-1$
                    customKey = pair;
                }
            }
        }
        if (!found) {
            EntityModel value = new EntityModel();
            value.setEntity(bondOptions);
            customKey.setValue(value);
            bondDialogModel.getBondingOptions().setSelectedItem(customKey);
        }
        // Addresses
        bondDialogModel.getAddress().setEntity(entity.getAddress());
        bondDialogModel.getSubnet().setEntity(entity.getSubnet());
        bondDialogModel.getGateway().setEntity(entity.getGateway());
        bondDialogModel.getNetwork().setIsAvailable(false);
        bondDialogModel.setNoneBootProtocolAvailable(!entity.getIsManagement());
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                if (!bondDialogModel.Validate()) {
                    return;
                }
                entity.setAddress((String) bondDialogModel.getAddress().getEntity());
                entity.setSubnet((String) bondDialogModel.getSubnet().getEntity());
                entity.setGateway((String) bondDialogModel.getGateway().getEntity());
                entity.setBootProtocol(bondDialogModel.getBootProtocol());
                setBondOptions(entity, bondDialogModel);
                hostInterfaceListModel.CancelConfirm();
            }
        };
    } else if (entity.getIsManagement()) {
        /**
         * **************
         *  Management Network Dialog
         * ***************
         */
        editPopup = new HostManagementNetworkModel(true);
        final HostManagementNetworkModel mgmntDialogModel = (HostManagementNetworkModel) editPopup;
        mgmntDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editManagementInterfaceTitle(entity.getName()));
        mgmntDialogModel.getAddress().setEntity(entity.getAddress());
        mgmntDialogModel.getSubnet().setEntity(entity.getSubnet());
        mgmntDialogModel.getGateway().setEntity(entity.getGateway());
        mgmntDialogModel.setNoneBootProtocolAvailable(false);
        mgmntDialogModel.getBondingOptions().setIsAvailable(false);
        mgmntDialogModel.getInterface().setIsAvailable(false);
        mgmntDialogModel.setBootProtocol(entity.getBootProtocol());
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                if (!mgmntDialogModel.Validate()) {
                    return;
                }
                entity.setBootProtocol(mgmntDialogModel.getBootProtocol());
                entity.setAddress((String) mgmntDialogModel.getAddress().getEntity());
                entity.setSubnet((String) mgmntDialogModel.getSubnet().getEntity());
                entity.setGateway((String) mgmntDialogModel.getGateway().getEntity());
                hostInterfaceListModel.CancelConfirm();
            }
        };
    } else {
        /**
         * **************
         *  Nic Dialog
         * ***************
         */
        editPopup = new HostInterfaceModel(true);
        final HostInterfaceModel interfaceDialogModel = (HostInterfaceModel) editPopup;
        interfaceDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editInterfaceTitle(entity.getName()));
        interfaceDialogModel.getAddress().setEntity(entity.getAddress());
        interfaceDialogModel.getSubnet().setEntity(entity.getSubnet());
        interfaceDialogModel.getName().setIsAvailable(false);
        interfaceDialogModel.getNetwork().setIsAvailable(false);
        // this dialog has only one selected network, just put the first one
        interfaceDialogModel.getNetwork().setSelectedItem(nic.getItems().get(0).getEntity());
        interfaceDialogModel.setBootProtocol(entity.getBootProtocol());
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                if (!interfaceDialogModel.Validate()) {
                    return;
                }
                entity.setBootProtocol(interfaceDialogModel.getBootProtocol());
                entity.setAddress((String) interfaceDialogModel.getAddress().getEntity());
                entity.setSubnet((String) interfaceDialogModel.getSubnet().getEntity());
                hostInterfaceListModel.CancelConfirm();
            }
        };
    }
    // ok command
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OK", okTarget);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // cancel command
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            hostInterfaceListModel.CancelConfirm();
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    editPopup.getCommands().add(okCommand);
    editPopup.getCommands().add(cancelCommand);
    hostInterfaceListModel.setConfirmWindow(editPopup);
}
#method_after
public void onEdit(NetworkItemModel<?> item) {
    Model editPopup = null;
    BaseCommandTarget okTarget = null;
    if (item instanceof BondNetworkInterfaceModel) {
        /**
         * **************
         *  Bond Dialog
         * ***************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        editPopup = new HostBondInterfaceModel(true);
        final HostBondInterfaceModel bondDialogModel = (HostBondInterfaceModel) editPopup;
        bondDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editBondInterfaceTitle(entity.getName()));
        bondDialogModel.getNetwork().setIsAvailable(false);
        bondDialogModel.getCheckConnectivity().setIsAvailable(false);
        bondDialogModel.getAddress().setIsAvailable(false);
        bondDialogModel.getSubnet().setIsAvailable(false);
        bondDialogModel.getGateway().setIsAvailable(false);
        bondDialogModel.setBootProtocolAvailable(false);
        // bond name
        bondDialogModel.getBond().setIsChangable(false);
        List<VdsNetworkInterface> bondName = Arrays.asList(entity);
        bondDialogModel.getBond().setItems(bondName);
        bondDialogModel.getBond().setSelectedItem(entity);
        // bond options
        String bondOptions = entity.getBondOptions();
        List<KeyValuePairCompat<String, EntityModel>> items = (List<KeyValuePairCompat<String, EntityModel>>) bondDialogModel.getBondingOptions().getItems();
        boolean found = false;
        KeyValuePairCompat<String, EntityModel> customKey = null;
        for (KeyValuePairCompat<String, EntityModel> pair : items) {
            String key = pair.getKey();
            if (key.equals(bondOptions)) {
                bondDialogModel.getBondingOptions().setSelectedItem(pair);
                found = true;
                break;
            } else {
                if ("custom".equals(key)) {
                    // $NON-NLS-1$
                    customKey = pair;
                }
            }
        }
        if (!found) {
            EntityModel value = new EntityModel();
            value.setEntity(bondOptions);
            customKey.setValue(value);
            bondDialogModel.getBondingOptions().setSelectedItem(customKey);
        }
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                setBondOptions(entity, bondDialogModel);
                hostInterfaceListModel.CancelConfirm();
            }
        };
    } else if (item instanceof LogicalNetworkModel) {
        LogicalNetworkModel logicalNetwork = (LogicalNetworkModel) item;
        final VdsNetworkInterface entity = logicalNetwork.getAttachedToNic().getEntity();
        if (logicalNetwork.isManagement()) {
            /**
             * **************
             *  Management Network Dialog
             * ***************
             */
            editPopup = new HostManagementNetworkModel(true);
            final HostManagementNetworkModel mgmntDialogModel = (HostManagementNetworkModel) editPopup;
            mgmntDialogModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
            mgmntDialogModel.setEntity(logicalNetwork.getEntity());
            mgmntDialogModel.getAddress().setEntity(entity.getAddress());
            mgmntDialogModel.getSubnet().setEntity(entity.getSubnet());
            mgmntDialogModel.getGateway().setEntity(entity.getGateway());
            mgmntDialogModel.setNoneBootProtocolAvailable(false);
            mgmntDialogModel.getBondingOptions().setIsAvailable(false);
            mgmntDialogModel.getInterface().setIsAvailable(false);
            mgmntDialogModel.setBootProtocol(entity.getBootProtocol());
            // OK Target
            okTarget = new BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand command) {
                    if (!mgmntDialogModel.Validate()) {
                        return;
                    }
                    entity.setBootProtocol(mgmntDialogModel.getBootProtocol());
                    entity.setAddress((String) mgmntDialogModel.getAddress().getEntity());
                    entity.setSubnet((String) mgmntDialogModel.getSubnet().getEntity());
                    entity.setGateway((String) mgmntDialogModel.getGateway().getEntity());
                    hostInterfaceListModel.CancelConfirm();
                }
            };
        } else {
            /**
             * **************
             *  Network Dialog
             * ***************
             */
            editPopup = new HostInterfaceModel(true);
            final HostInterfaceModel networkDialogModel = (HostInterfaceModel) editPopup;
            networkDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editNetworkTitle(logicalNetwork.getName()));
            networkDialogModel.getAddress().setEntity(entity.getAddress());
            networkDialogModel.getSubnet().setEntity(entity.getSubnet());
            networkDialogModel.getName().setIsAvailable(false);
            networkDialogModel.getBondingOptions().setIsAvailable(false);
            networkDialogModel.getNetwork().setIsChangable(false);
            networkDialogModel.getNetwork().setSelectedItem(logicalNetwork.getEntity());
            networkDialogModel.setBootProtocol(entity.getBootProtocol());
            // OK Target
            okTarget = new BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand command) {
                    if (!networkDialogModel.Validate()) {
                        return;
                    }
                    entity.setBootProtocol(networkDialogModel.getBootProtocol());
                    entity.setAddress((String) networkDialogModel.getAddress().getEntity());
                    entity.setSubnet((String) networkDialogModel.getSubnet().getEntity());
                    hostInterfaceListModel.CancelConfirm();
                }
            };
        }
    }
    // ok command
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OK", okTarget);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // cancel command
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            hostInterfaceListModel.CancelConfirm();
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    editPopup.getCommands().add(okCommand);
    editPopup.getCommands().add(cancelCommand);
    hostInterfaceListModel.setConfirmWindow(editPopup);
}
#end_block

#method_before
public void onOperation(NetworkOperation operation, final NetworkCommand networkCommand) {
    Model popupWindow;
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            hostInterfaceListModel.CancelConfirm();
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (operation == NetworkOperation.NULL_OPERATION) {
        return;
    } else if (operation == NetworkOperation.BOND_WITH) {
        final HostBondInterfaceModel bondPopup = new HostBondInterfaceModel(true);
        bondPopup.setTitle(ConstantsManager.getInstance().getConstants().createNewBondTitle());
        bondPopup.getNetwork().setIsAvailable(false);
        bondPopup.getCheckConnectivity().setIsAvailable(false);
        bondPopup.setBootProtocol(NetworkBootProtocol.None);
        bondPopup.getAddress().setIsAvailable(false);
        bondPopup.getSubnet().setIsAvailable(false);
        bondPopup.getGateway().setIsAvailable(false);
        List<VdsNetworkInterface> freeBonds = getFreeBonds();
        if (freeBonds.isEmpty()) {
            popupWindow = new ConfirmationModel();
            popupWindow.setTitle(ConstantsManager.getInstance().getConstants().errorTitle());
            popupWindow.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoAvailableBondsMsg());
            popupWindow.getCommands().add(cancelCommand);
            hostInterfaceListModel.setConfirmWindow(popupWindow);
            return;
        }
        bondPopup.getBond().setItems(freeBonds);
        bondPopup.setBootProtocolAvailable(false);
        bondPopup.getCommands().add(new UICommand("OK", new // $NON-NLS-1$
        BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                hostInterfaceListModel.CancelConfirm();
                VdsNetworkInterface bond = (VdsNetworkInterface) bondPopup.getBond().getSelectedItem();
                setBondOptions(bond, bondPopup);
                networkCommand.Execute(bond);
                redraw();
            }
        }));
        popupWindow = bondPopup;
    } else {
        // just execute the command
        networkCommand.Execute();
        redraw();
        return;
    }
    // add cancel
    popupWindow.getCommands().add(cancelCommand);
    // set window
    hostInterfaceListModel.setConfirmWindow(popupWindow);
}
#method_after
public void onOperation(NetworkOperation operation, final NetworkCommand networkCommand) {
    Model popupWindow;
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            hostInterfaceListModel.CancelConfirm();
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (operation == NetworkOperation.NULL_OPERATION) {
        return;
    } else if (operation == NetworkOperation.BOND_WITH) {
        final HostBondInterfaceModel bondPopup = new HostBondInterfaceModel(true);
        bondPopup.setTitle(ConstantsManager.getInstance().getConstants().createNewBondTitle());
        bondPopup.getNetwork().setIsAvailable(false);
        bondPopup.getCheckConnectivity().setIsAvailable(false);
        bondPopup.setBootProtocol(NetworkBootProtocol.None);
        bondPopup.getAddress().setIsAvailable(false);
        bondPopup.getSubnet().setIsAvailable(false);
        bondPopup.getGateway().setIsAvailable(false);
        bondPopup.setBootProtocolAvailable(false);
        List<VdsNetworkInterface> freeBonds = getFreeBonds();
        if (freeBonds.isEmpty()) {
            popupWindow = new ConfirmationModel();
            popupWindow.setTitle(ConstantsManager.getInstance().getConstants().errorTitle());
            popupWindow.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoAvailableBondsMsg());
            popupWindow.getCommands().add(cancelCommand);
            hostInterfaceListModel.setConfirmWindow(popupWindow);
            return;
        }
        bondPopup.getBond().setItems(freeBonds);
        bondPopup.getCommands().add(new UICommand("OK", new // $NON-NLS-1$
        BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                hostInterfaceListModel.CancelConfirm();
                VdsNetworkInterface bond = (VdsNetworkInterface) bondPopup.getBond().getSelectedItem();
                setBondOptions(bond, bondPopup);
                networkCommand.Execute(bond);
                redraw();
            }
        }));
        popupWindow = bondPopup;
    } else {
        // just execute the command
        networkCommand.Execute();
        redraw();
        return;
    }
    // add cancel
    popupWindow.getCommands().add(cancelCommand);
    // set window
    hostInterfaceListModel.setConfirmWindow(popupWindow);
}
#end_block

#method_before
@Before
public void setup() {
    initVds();
    mockEjbStrategy();
    initConditions();
    updater = new VdsUpdateRunTimeInfo(null, vds) {

        @Override
        public DbFacade getDbFacade() {
            return dbFacade;
        }

        @Override
        protected MonitoringStrategy getMonitoringStrategyForVds(VDS param) {
            return mock(MonitoringStrategy.class);
        }

        @Override
        protected void auditLog(AuditLogableBase auditLogable, AuditLogType logType) {
            AuditLog al = new AuditLog();
            al.setlog_type(logType);
            mockAuditLogDao.save(al);
        }
    };
}
#method_after
@Before
public void setup() {
    initVds();
    mockEjbStrategy();
    initConditions();
    updater = new VdsUpdateRunTimeInfo(null, vds) {

        @Override
        public DbFacade getDbFacade() {
            return dbFacade;
        }

        @Override
        protected MonitoringStrategy getMonitoringStrategyForVds(VDS param) {
            return mock(MonitoringStrategy.class);
        }

        @Override
        protected void auditLog(AuditLogableBase auditLogable, AuditLogType logType) {
            AuditLog al = new AuditLog();
            al.setlog_type(logType);
            mockAuditLogDao.save(al);
        }

        @Override
        protected XmlRpcStruct[] getVmInfo(List<String> vmsToUpdate) {
            return vmInfo;
        }
    };
}
#end_block

#method_before
private void initConditions() {
    when(dbFacade.getVdsGroupDAO()).thenReturn(groupDAO);
    when(dbFacade.getVmDAO()).thenReturn(vmDAO);
    when(dbFacade.getAuditLogDAO()).thenReturn(mockAuditLogDao);
    when(groupDAO.get((Guid) any())).thenReturn(cluster);
    Map<Guid, VM> emptyMap = Collections.emptyMap();
    when(vmDAO.getAllRunningByVds(vds.getId())).thenReturn(emptyMap);
}
#method_after
private void initConditions() {
    when(dbFacade.getVdsGroupDAO()).thenReturn(groupDAO);
    when(dbFacade.getVmDAO()).thenReturn(vmDAO);
    when(dbFacade.getAuditLogDAO()).thenReturn(mockAuditLogDao);
    when(dbFacade.getVmDeviceDAO()).thenReturn(vmDeviceDAO);
    when(groupDAO.get((Guid) any())).thenReturn(cluster);
    Map<Guid, VM> emptyMap = Collections.emptyMap();
    when(vmDAO.getAllRunningByVds(vds.getId())).thenReturn(emptyMap);
}
#end_block

#method_before
public void OnAddDisk() {
    if (getEntity() != null) {
        DiskModel model = (DiskModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        if (!model.Validate()) {
            return;
        }
        // Save changes.
        storage_domains storageDomain = (storage_domains) model.getStorageDomain().getSelectedItem();
        Disk disk;
        if ((Boolean) model.getIsInternal().getEntity()) {
            DiskImage diskImage = new DiskImage();
            diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
            diskImage.setvolume_type((VolumeType) model.getVolumeType().getSelectedItem());
            diskImage.setvolume_format(model.getVolumeFormat());
            if (model.getQuota().getIsAvailable()) {
                diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            disk = diskImage;
        } else {
            LunDisk lunDisk = new LunDisk();
            lunDisk.setLun((LUNs) model.getSanStorageModel().getAddedLuns().get(0).getEntity());
            disk = lunDisk;
        }
        disk.setDiskAlias((String) model.getAlias().getEntity());
        disk.setDiskDescription((String) model.getDescription().getEntity());
        disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
        disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
        disk.setBoot((Boolean) model.getIsBootable().getEntity());
        disk.setShareable((Boolean) model.getIsShareable().getEntity());
        disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
        disk.setPropagateErrors(PropagateErrors.Off);
        model.StartProgress(null);
        AddDiskParameters tempVar2 = new AddDiskParameters(getEntity().getId(), disk);
        tempVar2.setStorageDomainId(storageDomain.getId());
        Frontend.RunAction(VdcActionType.AddDisk, tempVar2, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                VmGuideModel vmGuideModel = (VmGuideModel) result.getState();
                vmGuideModel.getWindow().StopProgress();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    vmGuideModel.Cancel();
                    vmGuideModel.PostAction();
                }
            }
        }, this);
    } else {
        Cancel();
    }
}
#method_after
public void OnAddDisk() {
    if (getEntity() != null) {
        DiskModel model = (DiskModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getAttachDisk().getEntity()) {
            OnAttachDisks();
            return;
        }
        // Save changes.
        storage_domains storageDomain = (storage_domains) model.getStorageDomain().getSelectedItem();
        Disk disk;
        if ((Boolean) model.getIsInternal().getEntity()) {
            DiskImage diskImage = new DiskImage();
            diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
            diskImage.setvolume_type((VolumeType) model.getVolumeType().getSelectedItem());
            diskImage.setvolume_format(model.getVolumeFormat());
            if (model.getQuota().getIsAvailable()) {
                diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            disk = diskImage;
        } else {
            LunDisk lunDisk = new LunDisk();
            lunDisk.setLun((LUNs) model.getSanStorageModel().getAddedLuns().get(0).getEntity());
            disk = lunDisk;
        }
        disk.setDiskAlias((String) model.getAlias().getEntity());
        disk.setDiskDescription((String) model.getDescription().getEntity());
        disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
        disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
        disk.setBoot((Boolean) model.getIsBootable().getEntity());
        disk.setShareable((Boolean) model.getIsShareable().getEntity());
        disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
        disk.setPropagateErrors(PropagateErrors.Off);
        model.StartProgress(null);
        AddDiskParameters tempVar2 = new AddDiskParameters(getEntity().getId(), disk);
        tempVar2.setStorageDomainId(storageDomain.getId());
        Frontend.RunAction(VdcActionType.AddDisk, tempVar2, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                VmGuideModel vmGuideModel = (VmGuideModel) result.getState();
                vmGuideModel.getWindow().StopProgress();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    vmGuideModel.Cancel();
                    vmGuideModel.PostAction();
                }
            }
        }, this);
    } else {
        Cancel();
    }
}
#end_block

#method_before
@Test
public void vlanOverNic() {
    Network net = createNetwork(RandomUtils.instance().nextInt(0, 4000));
    VdsNetworkInterface nic = createNic("eth0", null, NetworkBootProtocol.Dhcp, null);
    VdsNetworkInterface vlan = createVlan(nic, net);
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.singletonList(net), Collections.<String>emptyList(), Collections.singletonList(nic), Collections.<VdsNetworkInterface>emptyList(), Arrays.asList(nic, vlan));
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    Map<String, String> networkStruct = assertNeworkWasSent(net);
    assertEquals(nic.getName(), networkStruct.get("nic"));
}
#method_after
@Test
public void vlanOverNic() {
    Network net = createNetwork(RandomUtils.instance().nextInt(0, 4000));
    VdsNetworkInterface nic = createNic("eth0", null, NetworkBootProtocol.Dhcp, null);
    VdsNetworkInterface vlan = createVlan(nic, net);
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.singletonList(net), Collections.<String>emptyList(), Collections.singletonList(nic), Collections.<String>emptySet(), Arrays.asList(nic, vlan));
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    Map<String, String> networkStruct = assertNeworkWasSent(net);
    assertEquals(nic.getName(), networkStruct.get("nic"));
}
#end_block

#method_before
@Test
public void vlanOverBond() {
    VdsNetworkInterface bond = createBond();
    List<VdsNetworkInterface> slaves = createSlaves(bond);
    Network net = createNetwork(RandomUtils.instance().nextInt(0, 4000));
    VdsNetworkInterface vlan = createVlan(bond, net);
    List<VdsNetworkInterface> ifaces = new ArrayList<VdsNetworkInterface>(slaves);
    ifaces.add(bond);
    ifaces.add(vlan);
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.singletonList(net), Collections.<String>emptyList(), Collections.singletonList(bond), Collections.<VdsNetworkInterface>emptyList(), ifaces);
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    assertBondWasSent(bond, slaves);
    Map<String, String> networkStruct = assertNeworkWasSent(net);
    assertEquals(bond.getName(), networkStruct.get("bonding"));
}
#method_after
@Test
public void vlanOverBond() {
    VdsNetworkInterface bond = createBond();
    List<VdsNetworkInterface> slaves = createSlaves(bond);
    Network net = createNetwork(RandomUtils.instance().nextInt(0, 4000));
    VdsNetworkInterface vlan = createVlan(bond, net);
    List<VdsNetworkInterface> ifaces = new ArrayList<VdsNetworkInterface>(slaves);
    ifaces.add(bond);
    ifaces.add(vlan);
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.singletonList(net), Collections.<String>emptyList(), Collections.singletonList(bond), Collections.<String>emptySet(), ifaces);
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    assertBondWasSent(bond, slaves);
    Map<String, String> networkStruct = assertNeworkWasSent(net);
    assertEquals(bond.getName(), networkStruct.get("bonding"));
}
#end_block

#method_before
@Test
public void networkWithDhcp() {
    Network net = createNetwork(null);
    VdsNetworkInterface nic = createNic("eth0", null, NetworkBootProtocol.Dhcp, net.getName());
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.singletonList(net), Collections.<String>emptyList(), Collections.<VdsNetworkInterface>emptyList(), Collections.<VdsNetworkInterface>emptyList(), Arrays.asList(nic));
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    Map<String, String> networkStruct = assertNeworkWasSent(net);
    assertEquals(nic.getName(), networkStruct.get("nic"));
    assertEquals(SetupNetworksVDSCommand.DHCP_BOOT_PROTOCOL, networkStruct.get(SetupNetworksVDSCommand.BOOT_PROTOCOL));
}
#method_after
@Test
public void networkWithDhcp() {
    Network net = createNetwork(null);
    VdsNetworkInterface nic = createNic("eth0", null, NetworkBootProtocol.Dhcp, net.getName());
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.singletonList(net), Collections.<String>emptyList(), Collections.<VdsNetworkInterface>emptyList(), Collections.<String>emptySet(), Arrays.asList(nic));
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    Map<String, String> networkStruct = assertNeworkWasSent(net);
    assertEquals(nic.getName(), networkStruct.get("nic"));
    assertEquals(SetupNetworksVDSCommand.DHCP_BOOT_PROTOCOL, networkStruct.get(SetupNetworksVDSCommand.BOOT_PROTOCOL));
}
#end_block

#method_before
@Test
public void bondModified() {
    VdsNetworkInterface bond = createBond();
    List<VdsNetworkInterface> slaves = createSlaves(bond);
    List<VdsNetworkInterface> ifaces = new ArrayList<VdsNetworkInterface>(slaves);
    ifaces.add(bond);
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.<Network>emptyList(), Collections.<String>emptyList(), Collections.singletonList(bond), Collections.<VdsNetworkInterface>emptyList(), ifaces);
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    Map<String, Object> bondMap = assertBondWasSent(bond, slaves);
    assertEquals(bond.getBondOptions(), bondMap.get(SetupNetworksVDSCommand.BONDING_OPTIONS));
}
#method_after
@Test
public void bondModified() {
    VdsNetworkInterface bond = createBond();
    List<VdsNetworkInterface> slaves = createSlaves(bond);
    List<VdsNetworkInterface> ifaces = new ArrayList<VdsNetworkInterface>(slaves);
    ifaces.add(bond);
    SetupNetworksVdsCommandParameters parameters = new SetupNetworksVdsCommandParameters(Guid.NewGuid(), Collections.<Network>emptyList(), Collections.<String>emptyList(), Collections.singletonList(bond), Collections.<String>emptySet(), ifaces);
    createCommand(parameters).Execute();
    verifyMethodPassedToHost();
    Map<String, Object> bondMap = assertBondWasSent(bond, slaves);
    assertEquals(bond.getBondOptions(), bondMap.get(SetupNetworksVDSCommand.BONDING_OPTIONS));
}
#end_block

#method_before
@Test
public void bondWithNoNetowrkAttached() {
    VdsNetworkInterface bond = createVdsInterface("bond0", true, null, null, null);
    List<VdsNetworkInterface> ifacesToBond = createInterfacesToBond();
    SetupNetworksParameters parameters = createParametersForBond(bond, ifacesToBond);
    SetupNetworksHelper helper = createHelper(parameters);
    mockDaos(helper);
    mockExistingIfacesWithBond(bond, ifacesToBond);
    when(networkDAO.getAllForCluster(any(Guid.class))).thenReturn(Collections.<Network>emptyList());
    List<VdcBllMessages> violations = helper.validate();
    assertNoViolations(violations);
    assertEquals(1, helper.getBonds().size());
    assertEquals(bond, helper.getBonds().get(0));
    assertEquals(0, helper.getNetworks().size());
}
#method_after
@Test
public void bondWithNoNetowrkAttached() {
    VdsNetworkInterface bond = createBond(BOND_NAME, null);
    List<VdsNetworkInterface> ifacesToBond = createNics(null);
    SetupNetworksParameters parameters = createParametersForBond(bond, ifacesToBond);
    SetupNetworksHelper helper = createHelper(parameters);
    mockExistingIfacesWithBond(bond, ifacesToBond);
    validateAndExpectNoViolations(helper);
    assertBondModified(helper, bond);
    assertNoNetworksModified(helper);
    assertNoBondsRemoved(helper);
    assertNoNetworksRemoved(helper);
}
#end_block

#method_before
@Test
public void vlanOverBond() {
    VdsNetworkInterface bond = createVdsInterface("bond0", true, null, null, null);
    List<VdsNetworkInterface> ifacesToBond = createInterfacesToBond();
    SetupNetworksParameters parameters = createParametersForBond(bond, ifacesToBond);
    String networkName = "net";
    parameters.getInterfaces().add(createVdsInterface(bond.getName() + ".100", false, null, 100, networkName));
    SetupNetworksHelper helper = createHelper(parameters);
    mockDaos(helper);
    mockExistingIfacesWithBond(bond, ifacesToBond);
    Network network = mockExistingNetwork(networkName);
    List<VdcBllMessages> violations = helper.validate();
    assertNoViolations(violations);
    assertEquals(1, helper.getBonds().size());
    assertEquals(bond, helper.getBonds().get(0));
    assertEquals(1, helper.getNetworks().size());
    assertEquals(network, helper.getNetworks().get(0));
}
#method_after
/* --- Tests for VLANs functionality --- */
@Test
public void vlanOverBond() {
    Network network = createNetwork("net");
    VdsNetworkInterface bond = createBond(BOND_NAME, null);
    List<VdsNetworkInterface> ifacesToBond = createNics(null);
    mockExistingNetworks(network);
    mockExistingIfacesWithBond(bond, ifacesToBond);
    SetupNetworksParameters parameters = createParametersForBond(bond, ifacesToBond);
    parameters.getInterfaces().add(createVlan(bond.getName(), 100, network.getName()));
    SetupNetworksHelper helper = createHelper(parameters);
    validateAndExpectNoViolations(helper);
    assertBondModified(helper, bond);
    assertNetworkModified(helper, network);
    assertNoBondsRemoved(helper);
    assertNoNetworksRemoved(helper);
}
#end_block

#method_before
@Test
public void vlanBondNameMismatch() {
    VdsNetworkInterface bond = createVdsInterface("bond0", true, null, null, null);
    List<VdsNetworkInterface> ifacesToBond = createInterfacesToBond();
    SetupNetworksParameters parameters = createParametersForBond(bond, ifacesToBond);
    String networkName = "net";
    parameters.getInterfaces().add(createVdsInterface(bond.getName() + "0.100", false, null, 100, networkName));
    SetupNetworksHelper helper = createHelper(parameters);
    mockDaos(helper);
    mockExistingIfacesWithBond(bond, ifacesToBond);
    mockExistingNetwork(networkName);
    assertTrue(helper.validate().contains(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS));
}
#method_after
@Test
public void vlanBondNameMismatch() {
    VdsNetworkInterface bond = createBond(BOND_NAME, null);
    List<VdsNetworkInterface> ifacesToBond = createNics(null);
    SetupNetworksParameters parameters = createParametersForBond(bond, ifacesToBond);
    parameters.getInterfaces().add(createVlan(bond.getName() + "1", 100, "net"));
    mockExistingIfacesWithBond(bond, ifacesToBond);
    SetupNetworksHelper helper = createHelper(parameters);
    validateAndExpectViolation(helper, VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
}
#end_block

#method_before
private VdsNetworkInterface createVdsInterface(String name, Boolean bonded, String bondName, Integer vlanId, String networkName) {
    VdsNetworkInterface iface = new VdsNetworkInterface();
    iface.setId(Guid.NewGuid());
    iface.setName(name);
    iface.setBonded(bonded);
    iface.setBondName(bondName);
    iface.setVlanId(vlanId);
    iface.setNetworkName(networkName);
    return iface;
}
#method_after
private VdsNetworkInterface createVdsInterface(Guid id, String name, Boolean bonded, String bondName, Integer vlanId, String networkName) {
    VdsNetworkInterface iface = new VdsNetworkInterface();
    iface.setId(id);
    iface.setName(name);
    iface.setBonded(bonded);
    iface.setBondName(bondName);
    iface.setVlanId(vlanId);
    iface.setNetworkName(networkName);
    return iface;
}
#end_block

#method_before
private SetupNetworksParameters createParametersForBond(VdsNetworkInterface bond, List<VdsNetworkInterface> bondedIfaces) {
    SetupNetworksParameters parameters = new SetupNetworksParameters();
    parameters.getInterfaces().add(bond);
    for (VdsNetworkInterface iface : bondedIfaces) {
        parameters.getInterfaces().add(createVdsInterface(iface.getName(), false, bond.getName(), null, null));
    }
    return parameters;
}
#method_after
private SetupNetworksParameters createParametersForBond(VdsNetworkInterface bond, List<VdsNetworkInterface> bondedIfaces) {
    SetupNetworksParameters parameters = new SetupNetworksParameters();
    parameters.getInterfaces().add(bond);
    for (VdsNetworkInterface iface : bondedIfaces) {
        parameters.getInterfaces().add(enslaveOrReleaseNIC(iface, bond.getName()));
    }
    return parameters;
}
#end_block

#method_before
private void mockExistingIfacesWithBond(VdsNetworkInterface bond, List<VdsNetworkInterface> ifacesToBond) {
    List<VdsNetworkInterface> existingIfaces = new ArrayList<VdsNetworkInterface>(ifacesToBond);
    existingIfaces.add(createVdsInterface(bond.getName(), true, null, null, null));
    when(interfaceDAO.getAllInterfacesForVds(any(Guid.class))).thenReturn(existingIfaces);
}
#method_after
private void mockExistingIfacesWithBond(VdsNetworkInterface bond, List<VdsNetworkInterface> ifacesToBond) {
    VdsNetworkInterface[] ifaces = new VdsNetworkInterface[ifacesToBond.size() + 1];
    ifacesToBond.toArray(ifaces);
    ifaces[ifaces.length - 1] = bond;
    mockExistingIfaces(ifaces);
}
#end_block

#method_before
private SetupNetworksHelper createHelper(SetupNetworksParameters params) {
    SetupNetworksHelper validator = new SetupNetworksHelper(params, Guid.Empty);
    return spy(validator);
}
#method_after
private SetupNetworksHelper createHelper(SetupNetworksParameters params) {
    SetupNetworksHelper helper = spy(new SetupNetworksHelper(params, Guid.Empty));
    DbFacade dbFacade = mock(DbFacade.class);
    doReturn(dbFacade).when(helper).getDbFacade();
    doReturn(interfaceDAO).when(dbFacade).getInterfaceDAO();
    doReturn(mock(VdsDAO.class)).when(dbFacade).getVdsDAO();
    doReturn(networkDAO).when(dbFacade).getNetworkDAO();
    return helper;
}
#end_block

#method_before
// Update IsENGINEUser flag.
public void UpdateIsENGINEUser(VdcUser LoggedUser) {
    setENGINEUserActionGroupList(new ArrayList<ActionGroup>());
    this.setLoggedUser(LoggedUser);
    AsyncDataProvider.GetRoleActionGroupsByRoleId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UserPortalLoginModel loginModel = (UserPortalLoginModel) target;
            loginModel.setENGINEUserActionGroupList((ArrayList<ActionGroup>) returnValue);
            loginModel.GetUserRoles(loginModel);
        }
    }), new Guid(ENGINEUserRoleId));
}
#method_after
// Update IsENGINEUser flag.
public void UpdateIsENGINEUser(VdcUser LoggedUser) {
    setENGINEUserActionGroupList(new ArrayList<ActionGroup>());
    this.setLoggedUser(LoggedUser);
    AsyncDataProvider.GetRoleActionGroupsByRoleId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UserPortalLoginModel loginModel = (UserPortalLoginModel) target;
            loginModel.setENGINEUserActionGroupList((ArrayList<ActionGroup>) returnValue);
            loginModel.GetUserRoles(loginModel);
        }
    }), ApplicationGuids.engineUser.asGuid());
}
#end_block

#method_before
// Get logged user's permissions and create a list of roles associated with the user (and proceed to Step3).
public void GetUserRoles(Object targetObject) {
    UserPortalLoginModel loginModel = (UserPortalLoginModel) targetObject;
    AsyncDataProvider.GetPermissionsByAdElementId(new AsyncQuery(targetObject, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            ArrayList<permissions> permissions = (ArrayList<permissions>) returnValue;
            ArrayList<Guid> roleIdList = new ArrayList<Guid>();
            for (permissions permission : permissions) {
                // ALL Everyone/QuotaConsumer persmissions
                if (isEveyoneUserPortalBasedVmPermission(permission) || isEveryoneQuotaConsumerPermission(permission)) {
                    continue;
                }
                if (!roleIdList.contains(permission.getrole_id())) {
                    roleIdList.add(permission.getrole_id());
                }
            }
            UserPortalLoginModel loginModel1 = (UserPortalLoginModel) target;
            loginModel1.setLoggedUserActionGroupList(new ArrayList<ActionGroup>());
            if (roleIdList.size() > 0) {
                loginModel1.setRolesCounter(roleIdList.size());
                loginModel1.UpdateUserActionGroups(loginModel1, roleIdList);
            } else {
                CheckIsENGINEUser(loginModel1);
            }
        }

        private boolean isEveyoneUserPortalBasedVmPermission(permissions permission) {
            return permission.getad_element_id().getValue().equals(Everyone) && permission.getrole_id().getValue().equals(UserTemplateBasedVM);
        }

        private boolean isEveryoneQuotaConsumerPermission(permissions permission) {
            return permission.getad_element_id().getValue().equals(Everyone) && permission.getrole_id().getValue().equals(QuotaConsumer);
        }
    }), loginModel.getLoggedUser().getUserId());
}
#method_after
// Get logged user's permissions and create a list of roles associated with the user (and proceed to Step3).
public void GetUserRoles(Object targetObject) {
    UserPortalLoginModel loginModel = (UserPortalLoginModel) targetObject;
    AsyncDataProvider.GetPermissionsByAdElementId(new AsyncQuery(targetObject, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            ArrayList<permissions> permissions = (ArrayList<permissions>) returnValue;
            ArrayList<Guid> roleIdList = new ArrayList<Guid>();
            for (permissions permission : permissions) {
                // ALL Everyone/QuotaConsumer persmissions
                if (isEveyoneUserPortalBasedVmPermission(permission) || isEveryoneQuotaConsumerPermission(permission)) {
                    continue;
                }
                if (!roleIdList.contains(permission.getrole_id())) {
                    roleIdList.add(permission.getrole_id());
                }
            }
            UserPortalLoginModel loginModel1 = (UserPortalLoginModel) target;
            loginModel1.setLoggedUserActionGroupList(new ArrayList<ActionGroup>());
            if (roleIdList.size() > 0) {
                loginModel1.setRolesCounter(roleIdList.size());
                loginModel1.UpdateUserActionGroups(loginModel1, roleIdList);
            } else {
                CheckIsENGINEUser(loginModel1);
            }
        }

        private boolean isEveyoneUserPortalBasedVmPermission(permissions permission) {
            return permission.getad_element_id().getValue().equals(ApplicationGuids.everyone.asGuid()) && permission.getrole_id().getValue().equals(ApplicationGuids.userTemplateBasedVM.asGuid());
        }

        private boolean isEveryoneQuotaConsumerPermission(permissions permission) {
            return permission.getad_element_id().getValue().equals(ApplicationGuids.everyone.asGuid()) && permission.getrole_id().getValue().equals(ApplicationGuids.quotaConsumer.asGuid());
        }
    }), loginModel.getLoggedUser().getUserId());
}
#end_block

#method_before
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            Class<?> actionType = null;
            String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
            try {
                actionType = Class.forName(formattedClassName);
            } catch (ClassNotFoundException cnfe) {
                if (storageType != StorageType.ALL && storageType != StorageType.UNKNOWN)
                    log.debugFormat("StorageHelperDirector Error:: the lookup for following class has failed: {0}", formattedClassName);
            }
            // if action type not exist - operation invalid
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                _helpers.put(storageType, currentHelper);
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#method_after
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            if (storageType.isConcreteStorageType()) {
                Class<?> actionType = null;
                String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
                try {
                    actionType = Class.forName(formattedClassName);
                } catch (ClassNotFoundException cnfe) {
                    log.debugFormat("StorageHelperDirector Error:: the lookup for following class has failed: {0}", formattedClassName);
                }
                // if action type not exist - operation invalid
                if (actionType != null) {
                    Constructor<?> info = actionType.getConstructors()[0];
                    IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                    _helpers.put(storageType, currentHelper);
                }
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#end_block

#method_before
public void OnSetupNetworks() {
    final HostSetupNetworksModel model = (HostSetupNetworksModel) getWindow();
    int conectivityTimeout = 60000;
    SetupNetworksParameters params = new SetupNetworksParameters();
    params.setInterfaces(model.getAllNics());
    params.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
    params.setConectivityTimeout(conectivityTimeout);
    params.setVdsId(getEntity().getId());
    IFrontendActionAsyncCallback callback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = ((HostSetupNetworksModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                    hostInterfaceListModel.Cancel();
                    hostInterfaceListModel.Search();
                }
            } else {
                hostInterfaceListModel.getcurrentModel().StopProgress();
            }
        }
    };
    model.StartProgress(null);
    setcurrentModel(model);
    Frontend.RunAction(VdcActionType.SetupNetworks, params, callback, this);
}
#method_after
public void OnSetupNetworks() {
    final HostSetupNetworksModel model = (HostSetupNetworksModel) getWindow();
    int conectivityTimeout = 60000;
    SetupNetworksParameters params = new SetupNetworksParameters();
    params.setInterfaces(model.getAllNics());
    params.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
    params.setConectivityTimeout(conectivityTimeout);
    params.setVdsId(getEntity().getId());
    IFrontendActionAsyncCallback callback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = model.getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(getEntity().getId(), HostInterfaceListModel.this);
                } else {
                    model.StopProgress();
                    Cancel();
                    Search();
                }
            } else {
                model.StopProgress();
            }
        }
    };
    setcurrentModel(model);
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.SetupNetworks, params, callback);
}
#end_block

#method_before
@Override
public Response add(GlusterVolume volume) {
    validateParameters(volume, "name", "volumeType", "bricks");
    if (volume.isSetVolumeType()) {
        validateEnum(GlusterVolumeType.class, volume.getVolumeType().toUpperCase());
    }
    if (volume.isSetTransportTypes()) {
        for (String transportType : volume.getTransportTypes().getTransportTypes()) {
            validateEnum(TransportType.class, transportType.toUpperCase());
        }
    }
    if (volume.isSetAccessProtocols()) {
        for (String accessProtocol : volume.getAccessProtocols().getAccessProtocols()) {
            validateEnum(AccessProtocol.class, accessProtocol.toUpperCase());
        }
    }
    GlusterVolumeEntity volumeEntity = getMapper(GlusterVolume.class, GlusterVolumeEntity.class).map(volume, null);
    volumeEntity.setClusterId(asGuid(parent.get().getId()));
    mapBricks(volume, volumeEntity);
    return performCreation(VdcActionType.CreateGlusterVolume, new CreateGlusterVolumeParameters(volumeEntity), new QueryIdResolver(VdcQueryType.GetGlusterVolumeById, IdQueryParameters.class), true);
}
#method_after
@Override
public Response add(GlusterVolume volume) {
    validateParameters(volume, "name", "volumeType", "bricks");
    validateEnumParameters(volume);
    GlusterVolumeEntity volumeEntity = getMapper(GlusterVolume.class, GlusterVolumeEntity.class).map(volume, null);
    volumeEntity.setClusterId(asGuid(parent.get().getId()));
    mapBricks(volume, volumeEntity);
    return performCreation(VdcActionType.CreateGlusterVolume, new CreateGlusterVolumeParameters(volumeEntity), new QueryIdResolver(VdcQueryType.GetGlusterVolumeById, IdQueryParameters.class), true);
}
#end_block

#method_before
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            Class<?> actionType = null;
            String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
            try {
                actionType = Class.forName(formattedClassName);
            } catch (ClassNotFoundException cnfe) {
                log.debug("StorageHelperDirector Error:: the lookup for following class has failed: " + formattedClassName, cnfe);
            }
            // if action type not exist - operation invalid
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                _helpers.put(storageType, currentHelper);
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#method_after
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            Class<?> actionType = null;
            String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
            try {
                actionType = Class.forName(formattedClassName);
            } catch (ClassNotFoundException cnfe) {
                log.debugFormat("StorageHelperDirector Error:: the lookup for following class has failed: {0}", formattedClassName);
            }
            // if action type not exist - operation invalid
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                _helpers.put(storageType, currentHelper);
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#end_block

#method_before
private void addPermission() {
    addTemplateUserPermission(getCurrentUser().getUserId());
    // if the template is for public use, set EVERYONE as a TEMPLATE_USER.
    if (getParameters().isPublicUse()) {
        addTemplateUserPermission(MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID);
    }
}
#method_after
private void addPermission() {
    addPermissionForTempalte(getCurrentUser().getUserId(), PredefinedRoles.TEMPLATE_OWNER);
    // if the template is for public use, set EVERYONE as a TEMPLATE_USER.
    if (getParameters().isPublicUse()) {
        addPermissionForTempalte(MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.TEMPLATE_USER);
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    LockImage();
    VDSReturnValue vdsReturnValue = null;
    if (getParameters().getUseCopyCollapse()) {
        vdsReturnValue = getBackend().getResourceManager().RunVdsCommand(VDSCommandType.CopyImage, new CopyImageVDSCommandParameters(getStorageDomain().getstorage_pool_id().getValue(), getParameters().getSourceDomainId() != null ? getParameters().getSourceDomainId().getValue() : getDiskImage().getstorage_ids().get(0), getParameters().getContainerId(), getParameters().getImageGroupID(), getParameters().getImageId(), getParameters().getDestImageGroupId(), getParameters().getDestinationImageId(), "", getParameters().getStorageDomainId(), getParameters().getCopyVolumeType(), getParameters().getVolumeFormat(), getParameters().getVolumeType(), getParameters().getPostZero(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    } else {
        vdsReturnValue = getBackend().getResourceManager().RunVdsCommand(VDSCommandType.MoveImageGroup, new MoveImageGroupVDSCommandParameters(getDiskImage().getstorage_pool_id().getValue(), getParameters().getSourceDomainId() != null ? getParameters().getSourceDomainId().getValue() : getDiskImage().getstorage_ids().get(0), getDiskImage().getId(), getParameters().getStorageDomainId(), getParameters().getContainerId(), getParameters().getOperation(), getParameters().getPostZero(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    }
    if (vdsReturnValue.getSucceeded()) {
        AsyncTaskCreationInfo taskCreationInfo = vdsReturnValue.getCreationInfo();
        getReturnValue().getInternalTaskIdList().add(CreateTask(taskCreationInfo, getParameters().getParentCommand()));
        // change storage domain in db only if object moved
        if (getParameters().getOperation() == ImageOperation.Move || getParameters().getParentCommand() == VdcActionType.ImportVm || getParameters().getParentCommand() == VdcActionType.ImportVmTemplate) {
            List<DiskImage> snapshots = getDiskImageDao().getAllSnapshotsForImageGroup(getParameters().getDestImageGroupId());
            setSnapshotForShareableDisk(snapshots);
            for (DiskImage snapshot : snapshots) {
                getImageStorageDomainMapDao().remove(new image_storage_domain_map_id(snapshot.getImageId(), snapshot.getstorage_ids().get(0)));
                getImageStorageDomainMapDao().save(new image_storage_domain_map(snapshot.getImageId(), getParameters().getStorageDomainId()));
            }
        } else if (getParameters().getAddImageDomainMapping()) {
            getImageStorageDomainMapDao().save(new image_storage_domain_map(getParameters().getImageId(), getParameters().getStorageDomainId()));
        }
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    LockImage();
    VDSReturnValue vdsReturnValue = null;
    if (getParameters().getUseCopyCollapse()) {
        vdsReturnValue = runVdsCommand(VDSCommandType.CopyImage, new CopyImageVDSCommandParameters(getStorageDomain().getstorage_pool_id().getValue(), getParameters().getSourceDomainId() != null ? getParameters().getSourceDomainId().getValue() : getDiskImage().getstorage_ids().get(0), getParameters().getContainerId(), getParameters().getImageGroupID(), getParameters().getImageId(), getParameters().getDestImageGroupId(), getParameters().getDestinationImageId(), "", getParameters().getStorageDomainId(), getParameters().getCopyVolumeType(), getParameters().getVolumeFormat(), getParameters().getVolumeType(), getParameters().getPostZero(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    } else {
        vdsReturnValue = runVdsCommand(VDSCommandType.MoveImageGroup, new MoveImageGroupVDSCommandParameters(getDiskImage().getstorage_pool_id().getValue(), getParameters().getSourceDomainId() != null ? getParameters().getSourceDomainId().getValue() : getDiskImage().getstorage_ids().get(0), getDiskImage().getId(), getParameters().getStorageDomainId(), getParameters().getContainerId(), getParameters().getOperation(), getParameters().getPostZero(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    }
    if (vdsReturnValue.getSucceeded()) {
        AsyncTaskCreationInfo taskCreationInfo = vdsReturnValue.getCreationInfo();
        getReturnValue().getInternalTaskIdList().add(CreateTask(taskCreationInfo, getParameters().getParentCommand()));
        // change storage domain in db only if object moved
        if (getParameters().getOperation() == ImageOperation.Move || getParameters().getParentCommand() == VdcActionType.ImportVm || getParameters().getParentCommand() == VdcActionType.ImportVmTemplate) {
            List<DiskImage> snapshots = getDiskImageDao().getAllSnapshotsForImageGroup(getParameters().getDestImageGroupId());
            setSnapshotForShareableDisk(snapshots);
            for (DiskImage snapshot : snapshots) {
                getImageStorageDomainMapDao().remove(new image_storage_domain_map_id(snapshot.getImageId(), snapshot.getstorage_ids().get(0)));
                getImageStorageDomainMapDao().save(new image_storage_domain_map(snapshot.getImageId(), getParameters().getStorageDomainId()));
            }
        } else if (getParameters().getAddImageDomainMapping()) {
            getImageStorageDomainMapDao().save(new image_storage_domain_map(getParameters().getImageId(), getParameters().getStorageDomainId()));
        }
        setSucceeded(true);
    }
}
#end_block

#method_before
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    CheckboxHeader assignAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.assignAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(manageModel)) {
                    changeIsAttached(manageModel, value);
                }
                networks.redraw();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(manageModel)) {
                    if (!manageModel.isAttached()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : networks.getVisibleItems()) {
                if (model.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addEntityModelColumn(new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).getName();
        }
    }, constants.nameNetwork());
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
            changeIsAttached(manageModel, value);
            networks.redraw();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ClusterManageNetworkPopupView.this.canEditAssign(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.assign()));
        }
    }, assignAllHeader, // $NON-NLS-1$
    "90px");
    CheckboxHeader requiredAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.requiredAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(manageModel)) {
                    manageModel.setRequired(value);
                }
                networks.redraw();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(manageModel)) {
                    if (!manageModel.isRequired()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : networks.getVisibleItems()) {
                if (model.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ((ClusterNetworkManageModel) model).setRequired(value);
            networks.redraw();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isRequired();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return canEditRequired(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.required()));
        }
    }, requiredAllHeader, // $NON-NLS-1$
    "110px");
    networks.addColumn(new EntityModelCheckboxColumn() {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isVmNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return false;
        }
    }, constants.vmNetwork(), // $NON-NLS-1$
    "90px");
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
            // remove existing display
            if (displayNetwork != null) {
                displayNetwork.setDisplayNetwork(false);
            }
            // set current display
            displayNetwork = value ? manageModel : null;
            manageModel.setDisplayNetwork(value);
            networks.redraw();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isDisplayNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }
    }, constants.displayNetwork(), // $NON-NLS-1$
    "100px");
}
#method_after
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    CheckboxHeader assignAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.assignAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(clusterNetworkManageModel)) {
                    changeIsAttached(clusterNetworkManageModel, value);
                }
            }
            refreshNetworksTable();
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(clusterNetworkManageModel)) {
                    if (!clusterNetworkManageModel.isAttached()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (clusterNetworkManageModel.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addEntityModelColumn(new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).getName();
        }
    }, constants.nameNetwork());
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
            changeIsAttached(clusterNetworkManageModel, value);
            refreshNetworksTable();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ClusterManageNetworkPopupView.this.canEditAssign(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.assign()));
        }
    }, assignAllHeader, // $NON-NLS-1$
    "90px");
    CheckboxHeader requiredAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.requiredAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(clusterNetworkManageModel)) {
                    clusterNetworkManageModel.setRequired(value);
                }
                refreshNetworksTable();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(clusterNetworkManageModel)) {
                    if (!clusterNetworkManageModel.isRequired()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (clusterNetworkManageModel.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ((ClusterNetworkManageModel) model).setRequired(value);
            refreshNetworksTable();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isRequired();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return canEditRequired(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.required()));
        }
    }, requiredAllHeader, // $NON-NLS-1$
    "110px");
    networks.addColumn(new EntityModelCheckboxColumn() {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isVmNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return false;
        }
    }, constants.vmNetwork(), // $NON-NLS-1$
    "90px");
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
            // remove existing display
            if (displayNetwork != null) {
                displayNetwork.setDisplayNetwork(false);
            }
            // set current display
            displayNetwork = value ? clusterNetworkManageModel : null;
            clusterNetworkManageModel.setDisplayNetwork(value);
            refreshNetworksTable();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isDisplayNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }
    }, constants.displayNetwork(), // $NON-NLS-1$
    "100px");
}
#end_block

#method_before
private void changeIsAttached(ClusterNetworkManageModel manageModel, Boolean value) {
    manageModel.setAttached(value);
    if (!value && manageModel.isDisplayNetwork()) {
        manageModel.setDisplayNetwork(false);
    }
}
#method_after
private void changeIsAttached(ClusterNetworkManageModel clusterNetworkManageModel, Boolean value) {
    clusterNetworkManageModel.setAttached(value);
    if (!value && clusterNetworkManageModel.isDisplayNetwork()) {
        clusterNetworkManageModel.setDisplayNetwork(false);
    }
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#end_block

#method_before
@Override
public void setInputFieldsEnabled(boolean enabled) {
    nameEditor.setEnabled(enabled);
    descriptionEditor.setEnabled(enabled);
    isVmNetworkEditor.setEnabled(enabled);
    vlanTagging.setEnabled(enabled);
    vlanTag.setEnabled(enabled);
    hasMtuEditor.setEnabled(enabled);
    mtuEditor.setEnabled(enabled);
    if (enabled) {
        messageLabel.setVisible(false);
    } else {
        messageLabel.setVisible(true);
    }
}
#method_after
@Override
public void setInputFieldsEnabled(boolean enabled) {
    nameEditor.setEnabled(enabled);
    descriptionEditor.setEnabled(enabled);
    isVmNetworkEditor.setEnabled(enabled);
    vlanTagging.setEnabled(enabled);
    vlanTag.setEnabled(enabled);
    hasMtuEditor.setEnabled(enabled);
    mtuEditor.setEnabled(enabled);
    messageLabel.setVisible(!enabled);
}
#end_block

#method_before
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    CheckboxHeader assignAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.attachAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : clustersTable.getVisibleItems()) {
                NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
                if (networkClusterModel.getIsChangable()) {
                    networkClusterModel.setAttached(value);
                }
                clustersTable.redraw();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : clustersTable.getVisibleItems()) {
                NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
                if (networkClusterModel.getIsChangable()) {
                    if (!networkClusterModel.isAttached()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : clustersTable.getVisibleItems()) {
                if (model.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    clustersTable.addEntityModelColumn(new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel model) {
            return ((NetworkClusterModel) model).getName();
        }
    }, constants.nameClusterHeader());
    clustersTable.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
            networkClusterModel.setAttached(value);
            clustersTable.redrawHeaders();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((NetworkClusterModel) model).isAttached();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return model.getIsChangable();
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.attach()));
        }
    }, assignAllHeader, // $NON-NLS-1$
    "80px");
}
#method_after
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    CheckboxHeader assignAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.attachAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            ListModel tableModel = clustersTable.flush();
            for (Object model : tableModel.getItems()) {
                NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
                if (networkClusterModel.getIsChangable()) {
                    networkClusterModel.setAttached(value);
                }
            }
            clustersTable.edit(tableModel);
        }

        @Override
        public Boolean getValue() {
            for (Object model : clustersTable.flush().getItems()) {
                NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
                if (networkClusterModel.getIsChangable()) {
                    if (!networkClusterModel.isAttached()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (Object model : clustersTable.flush().getItems()) {
                NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
                if (networkClusterModel.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    clustersTable.addEntityModelColumn(new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel model) {
            return ((NetworkClusterModel) model).getName();
        }
    }, constants.nameClusterHeader());
    clustersTable.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            NetworkClusterModel networkClusterModel = (NetworkClusterModel) model;
            networkClusterModel.setAttached(value);
            clustersTable.edit(clustersTable.flush());
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((NetworkClusterModel) model).isAttached();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return model.getIsChangable();
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.attach()));
        }
    }, assignAllHeader, // $NON-NLS-1$
    "80px");
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public void edit(M object) {
    this.listModel = object;
    // get items
    List<EntityModel> items = (List<EntityModel>) listModel.getItems();
    setRowData(items == null ? new ArrayList<EntityModel>() : items);
    // Add ItemsChangedEvent Listener
    object.getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            M list = (M) sender;
            List<EntityModel> items = (List<EntityModel>) list.getItems();
            setRowData(items == null ? new ArrayList<EntityModel>() : items);
        }
    });
    object.getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            M list = (M) sender;
            getSelectionModel().setSelected((EntityModel) list.getSelectedItem(), true);
        }
    });
    object.getSelectedItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            M list = (M) sender;
            if (list.getSelectedItems() != null) {
                for (Object item : list.getSelectedItems()) {
                    EntityModel entityModel = (EntityModel) item;
                    getSelectionModel().setSelected(entityModel, true);
                }
            }
        }
    });
}
#method_after
@SuppressWarnings("unchecked")
@Override
public void edit(M object) {
    this.listModel = object;
    // Add ItemsChangedEvent Listener
    object.getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            M list = (M) sender;
            List<EntityModel> items = (List<EntityModel>) list.getItems();
            setRowData(items == null ? new ArrayList<EntityModel>() : items);
        }
    });
    object.getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            M list = (M) sender;
            getSelectionModel().setSelected((EntityModel) list.getSelectedItem(), true);
        }
    });
    object.getSelectedItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            M list = (M) sender;
            if (list.getSelectedItems() != null) {
                for (Object item : list.getSelectedItems()) {
                    EntityModel entityModel = (EntityModel) item;
                    getSelectionModel().setSelected(entityModel, true);
                }
            }
        }
    });
    // Get items from ListModel and update table data
    List<EntityModel> items = (List<EntityModel>) listModel.getItems();
    setRowData(items == null ? new ArrayList<EntityModel>() : items);
}
#end_block

#method_before
private void InitializeHelpers() {
    try {
        for (String helperName : EnumCompat.GetNames(StorageType.class)) {
            Class<?> actionType = null;
            try {
                actionType = java.lang.Class.forName(String.format("%1$s.%2$s%3$s", "org.ovirt.engine.core.bll.storage", helperName, "StorageHelper"));
            } catch (ClassNotFoundException cnfe) {
            // eat it
            }
            /**
             * if action type not exist - operation valid
             */
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                Object tempVar = info.newInstance(null);
                IStorageHelper currentHelper = (IStorageHelper) ((tempVar instanceof IStorageHelper) ? tempVar : null);
                if (currentHelper != null) {
                    _helpers.put(StorageType.valueOf(helperName), currentHelper);
                }
            }
        }
    } catch (Exception ex) {
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#method_after
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            Class<?> actionType = null;
            String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
            try {
                actionType = Class.forName(formattedClassName);
            } catch (ClassNotFoundException cnfe) {
                log.error("StorageHelperDirector Error:: the lookup for following class has failed: " + formattedClassName, cnfe);
            }
            // if action type not exist - operation invalid
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                _helpers.put(storageType, currentHelper);
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#end_block

#method_before
private void InitializeHelpers() {
    try {
        for (String helperName : EnumCompat.GetNames(StorageType.class)) {
            java.lang.Class actionType = null;
            try {
                actionType = java.lang.Class.forName(String.format("%1$s.%2$s%3$s", "org.ovirt.engine.core.bll.storage", helperName, "StorageHelper"));
            } catch (ClassNotFoundException cnfe) {
            // eat it
            }
            /**
             * if action type not exist - operation valid
             */
            if (actionType != null) {
                java.lang.reflect.Constructor<?> info = actionType.getConstructors()[0];
                Object tempVar = info.newInstance(null);
                IStorageHelper currentHelper = (IStorageHelper) ((tempVar instanceof IStorageHelper) ? tempVar : null);
                if (currentHelper != null) {
                    _helpers.put(StorageType.valueOf(helperName), currentHelper);
                }
            }
        }
    } catch (Exception ex) {
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#method_after
private void InitializeHelpers() {
    try {
        for (String helperName : EnumCompat.GetNames(StorageType.class)) {
            java.lang.Class<?> actionType = null;
            try {
                actionType = java.lang.Class.forName(String.format("%1$s.%2$s%3$s", "org.ovirt.engine.core.bll.storage", helperName, "StorageHelper"));
            } catch (ClassNotFoundException cnfe) {
            // eat it
            }
            /**
             * if action type not exist - operation valid
             */
            if (actionType != null) {
                java.lang.reflect.Constructor<?> info = actionType.getConstructors()[0];
                Object tempVar = info.newInstance(null);
                IStorageHelper currentHelper = (IStorageHelper) ((tempVar instanceof IStorageHelper) ? tempVar : null);
                if (currentHelper != null) {
                    _helpers.put(StorageType.valueOf(helperName), currentHelper);
                }
            }
        }
    } catch (Exception ex) {
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#end_block

#method_before
private boolean CanFindVdsToRun(java.util.ArrayList<String> messages, boolean isMigrate, Iterable<VDS> vdss) {
    VdcBllMessages message = VdcBllMessages.Unassigned;
    VdcBllMessages messageToReturn = VdcBllMessages.Unassigned;
    /**
     * save vdsVersion in order to know vds version that was wrong
     */
    VdsVersion vdsVersion = null;
    boolean noVDSs = true;
    for (VDS curVds : vdss) {
        if (isMigrate && getVm().getrun_on_vds() != null && getVm().getrun_on_vds().equals(curVds.getId())) {
            continue;
        }
        noVDSs = false;
        message = isReadyToRun(curVds);
        if (message == null) {
            return true;
        } else {
            if (messageToReturn.getValue() < message.getValue()) {
                messageToReturn = message;
                /**
                 * save version of current vds for later use
                 */
                vdsVersion = curVds.getVersion();
            }
        }
    }
    if (noVDSs) {
        if (messages != null) {
            messageToReturn = VdcBllMessages.ACTION_TYPE_FAILED_NO_VDS_AVAILABLE_IN_CLUSTER;
        }
    }
    if (messages != null) {
        messages.add(messageToReturn.toString());
        /**
         * if error due to versions, add versions information to can do
         * action message
         */
        if (messageToReturn == VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_VERSION && vdsVersion != null) {
            VmHandler.UpdateVmGuestAgentVersion(getVm());
            messages.add("$toolsVersion " + getVm().getPartialVersion());
            messages.add("$serverVersion " + vdsVersion.getPartialVersion());
        }
    }
    return false;
}
#method_after
private boolean CanFindVdsToRun(java.util.ArrayList<String> messages, boolean isMigrate, Iterable<VDS> vdss) {
    VdcBllMessages messageToReturn = VdcBllMessages.Unassigned;
    /**
     * save vdsVersion in order to know vds version that was wrong
     */
    VdsVersion vdsVersion = null;
    boolean noVDSs = true;
    for (VDS curVds : vdss) {
        if (isMigrate && getVm().getrun_on_vds() != null && getVm().getrun_on_vds().equals(curVds.getId())) {
            continue;
        }
        noVDSs = false;
        ValidationResult result = validateHostIsReadyToRun(curVds);
        if (result.isValid()) {
            return true;
        } else {
            if (messageToReturn.getValue() < result.getMessage().getValue()) {
                messageToReturn = result.getMessage();
                /**
                 * save version of current vds for later use
                 */
                vdsVersion = curVds.getVersion();
            }
        }
    }
    if (noVDSs) {
        if (messages != null) {
            messageToReturn = VdcBllMessages.ACTION_TYPE_FAILED_NO_VDS_AVAILABLE_IN_CLUSTER;
        }
    }
    if (messages != null) {
        messages.add(messageToReturn.toString());
        /**
         * if error due to versions, add versions information to can do
         * action message
         */
        if (messageToReturn == VdcBllMessages.ACTION_TYPE_FAILED_VDS_VM_VERSION && vdsVersion != null) {
            VmHandler.UpdateVmGuestAgentVersion(getVm());
            messages.add("$toolsVersion " + getVm().getPartialVersion());
            messages.add("$serverVersion " + vdsVersion.getPartialVersion());
        }
    }
    return false;
}
#end_block

#method_before
protected boolean isUserCanBeAuthenticated() {
    boolean authenticated = false;
    IVdcUser vdcUser = SessionDataContainer.getInstance().getUser();
    if (vdcUser == null) {
        boolean domainFound = false;
        List<String> vdcDomains = LdapBrokerUtils.getDomainsList();
        for (String domain : vdcDomains) {
            if (StringHelper.EqOp(domain.toLowerCase(), getDomain().toLowerCase())) {
                domainFound = true;
                break;
            }
        }
        if (!domainFound) {
            addCanDoActionMessage(VdcBllMessages.USER_CANNOT_LOGIN_DOMAIN_NOT_SUPPORTED);
            return false;
        }
        UserAuthenticationResult result = authenticateUser();
        // error
        if (result == null) {
            result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
        }
        _adUser = result.getUser();
        authenticated = result.isSuccessful();
        if ((!authenticated || _adUser == null)) {
            HandleAuthenticationError(result.getErrorMessages());
            authenticated = false;
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.USER_IS_ALREADY_LOGGED_IN);
    }
    if (authenticated) {
        // After updating the database user, retreive it's MLA admin status
        // This may be redundant in some use-cases, but looking forward to Single Sign On,
        // we will want this info
        VdcUser currentUser = new VdcUser(_adUser);
        boolean isAdmin = MultiLevelAdministrationHandler.isAdminUser(currentUser);
        log.infoFormat("Checking if user {0} is an admin, result {1}", currentUser.getUserName(), isAdmin);
        currentUser.setAdmin(isAdmin);
        setCurrentUser(currentUser);
    }
    return authenticated;
}
#method_after
protected boolean isUserCanBeAuthenticated() {
    boolean authenticated = false;
    IVdcUser vdcUser = SessionDataContainer.getInstance().getUser();
    if (vdcUser == null) {
        boolean domainFound = false;
        List<String> vdcDomains = LdapBrokerUtils.getDomainsList();
        for (String domain : vdcDomains) {
            if (StringHelper.EqOp(domain.toLowerCase(), getDomain().toLowerCase())) {
                domainFound = true;
                break;
            }
        }
        if (!domainFound) {
            addCanDoActionMessage(VdcBllMessages.USER_CANNOT_LOGIN_DOMAIN_NOT_SUPPORTED);
            return false;
        }
        UserAuthenticationResult result = authenticateUser();
        // error
        if (result == null) {
            result = new UserAuthenticationResult(VdcBllMessages.USER_FAILED_TO_AUTHENTICATE);
        }
        _adUser = result.getUser();
        authenticated = result.isSuccessful();
        if ((!authenticated || _adUser == null)) {
            HandleAuthenticationError(result.getErrorMessages());
            authenticated = false;
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.USER_IS_ALREADY_LOGGED_IN);
    }
    if (authenticated) {
        // Retrieve the MLA admin status of the user.
        // This may be redundant in some use-cases, but looking forward to Single Sign On,
        // we will want this info
        VdcUser currentUser = new VdcUser(_adUser);
        boolean isAdmin = MultiLevelAdministrationHandler.isAdminUser(currentUser);
        log.infoFormat("Checking if user {0} is an admin, result {1}", currentUser.getUserName(), isAdmin);
        currentUser.setAdmin(isAdmin);
        setCurrentUser(currentUser);
    }
    return authenticated;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean result = super.canDoAction();
    ApplicationMode appMode = ApplicationMode.from(Config.<Integer>GetValue(ConfigValues.ApplicationMode));
    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VAR__ACTION__CREATE.toString());
    if (DbFacade.getInstance().getVdsGroupDAO().getByName(getVdsGroup().getname()) != null) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
        result = false;
    } else if (appMode != ApplicationMode.GlusterOnly && !CpuFlagsManagerHandler.CheckIfCpusExist(getVdsGroup().getcpu_name(), getVdsGroup().getcompatibility_version())) {
        // cpu check not required in gluster only mode
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
        result = false;
    } else if (!VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    } else if (getVdsGroup().getstorage_pool_id() != null) {
        setStoragePoolId(getVdsGroup().getstorage_pool_id());
        if (getStoragePool() != null && getStoragePool().getcompatibility_version().compareTo(getVdsGroup().getcompatibility_version()) > 0) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL.toString());
            result = false;
        }
    }
    if (result && getVdsGroup().getstorage_pool_id() != null) {
        storage_pool storagePool = DbFacade.getInstance().getStoragePoolDAO().get(getVdsGroup().getstorage_pool_id().getValue());
        // breaking Fk_vds_groups_storage_pool_id
        if (storagePool == null) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST.toString());
            result = false;
        } else if (storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!DbFacade.getInstance().getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getstorage_pool_id().getValue()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else // selection algorithm must be set to none in localfs
            if (getVdsGroup().getselection_algorithm() != VdsSelectionAlgorithm.None) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_SELECTION_ALGORITHM_MUST_BE_SET_TO_NONE_ON_LOCAL_STORAGE.toString());
                result = false;
            }
        }
    }
    if (result) {
        result = validateMetrics();
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        }
    }
    return result;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean result = super.canDoAction();
    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VAR__ACTION__CREATE.toString());
    if (DbFacade.getInstance().getVdsGroupDAO().getByName(getVdsGroup().getname()) != null) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
        result = false;
    } else if (getVdsGroup().supportsVirtService() && !CpuFlagsManagerHandler.CheckIfCpusExist(getVdsGroup().getcpu_name(), getVdsGroup().getcompatibility_version())) {
        // cpu check required only if the cluster supports Virt service
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
        result = false;
    } else if (!VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    } else if (getVdsGroup().getstorage_pool_id() != null) {
        setStoragePoolId(getVdsGroup().getstorage_pool_id());
        if (getStoragePool() != null && getStoragePool().getcompatibility_version().compareTo(getVdsGroup().getcompatibility_version()) > 0) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL.toString());
            result = false;
        }
    }
    if (result && getVdsGroup().getstorage_pool_id() != null) {
        storage_pool storagePool = DbFacade.getInstance().getStoragePoolDAO().get(getVdsGroup().getstorage_pool_id().getValue());
        // breaking Fk_vds_groups_storage_pool_id
        if (storagePool == null) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST.toString());
            result = false;
        } else if (storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!DbFacade.getInstance().getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getstorage_pool_id().getValue()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else // selection algorithm must be set to none in localfs
            if (getVdsGroup().getselection_algorithm() != VdsSelectionAlgorithm.None) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_SELECTION_ALGORITHM_MUST_BE_SET_TO_NONE_ON_LOCAL_STORAGE.toString());
                result = false;
            }
        }
    }
    if (result) {
        result = validateMetrics();
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        }
    }
    return result;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    return updateBrickServerNames(getParameters().getBricks(), true);
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    } else if (getGlusterVolume().getVolumeType() == GlusterVolumeType.STRIPE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return updateBrickServerNames(getParameters().getBricks(), true);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount());
        getReturnValue().setActionReturnValue(getBrickIds(getParameters().getBricks()));
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks());
        getReturnValue().setActionReturnValue(getBrickIds(getParameters().getBricks()));
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
private void addGlusterVolumeBricksInDb(List<GlusterBrickEntity> bricks, int replicaCount, int stripeCount) {
    for (GlusterBrickEntity brick : bricks) {
        if (getGlusterVolume().getStatus() == GlusterVolumeStatus.UP) {
            brick.setStatus(GlusterBrickStatus.UP);
        } else {
            brick.setStatus(GlusterBrickStatus.DOWN);
        }
        getGlusterBrickDao().save(brick);
    }
    if (replicaCount != 0) {
        getGlusterVolumeDao().updateReplicaCount(bricks.get(0).getVolumeId(), replicaCount);
    }
    if (stripeCount != 0) {
        getGlusterVolumeDao().updateStripeCount(bricks.get(0).getVolumeId(), stripeCount);
    }
}
#method_after
private void addGlusterVolumeBricksInDb(List<GlusterBrickEntity> newBricks) {
    // Reorder the volume bricks
    GlusterVolumeEntity volume = getGlusterVolume();
    List<GlusterBrickEntity> volumeBricks = volume.getBricks();
    if (isReplicaCountIncreased() || isStripeCountIncreased()) {
        GlusterBrickEntity brick;
        int brick_num = 0;
        int count = (isReplicaCountIncreased()) ? getParameters().getReplicaCount() : getParameters().getStripeCount();
        // Updating existing brick order
        for (int i = 0; i < volumeBricks.size(); i++) {
            if (((i + 1) % count) == 0) {
                brick_num++;
            }
            brick = volumeBricks.get(i);
            brick.setBrickOrder(brick_num);
            brick_num++;
            getGlusterBrickDao().updateBrickOrder(brick.getId(), brick.getBrickOrder());
        }
        // Adding new bricks
        for (int i = 0; i < newBricks.size(); i++) {
            brick = newBricks.get(i);
            brick.setBrickOrder((i + 1) * count - 1);
            brick.setStatus(getBrickStatus());
            getGlusterBrickDao().save(brick);
        }
    } else {
        // No change in the replica/stripe count
        int brickCount = volumeBricks.get(volumeBricks.size() - 1).getBrickOrder();
        for (GlusterBrickEntity brick : newBricks) {
            brick.setBrickOrder(++brickCount);
            brick.setStatus(getBrickStatus());
            getGlusterBrickDao().save(brick);
        }
    }
    // Update the volume replica/stripe count
    if (isReplicaCountIncreased()) {
        volume.setReplicaCount(getParameters().getReplicaCount());
    }
    if (volume.getVolumeType() == GlusterVolumeType.REPLICATE && getParameters().getReplicaCount() < (volume.getBricks().size() + getParameters().getBricks().size())) {
        volume.setVolumeType(GlusterVolumeType.DISTRIBUTED_REPLICATE);
    }
    if (isStripeCountIncreased()) {
        volume.setStripeCount(getParameters().getStripeCount());
    }
    if (volume.getVolumeType() == GlusterVolumeType.STRIPE && getParameters().getStripeCount() < (volume.getBricks().size() + getParameters().getBricks().size())) {
        volume.setVolumeType(GlusterVolumeType.DISTRIBUTED_STRIPE);
    }
    getGlusterVolumeDao().updateGlusterVolume(volume);
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_ADD_BRICK;
    } else {
        return AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_ADD_BRICK;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED : errorType;
    }
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public GlusterBricks list() {
    try {
        VdcQueryReturnValue returnValue = runQuery(VdcQueryType.GetGlusterVolumeBricks, new IdQueryParameters(asGuid(getVolumeId())));
        if (!returnValue.getSucceeded()) {
            throw new BackendFailureException(localize(returnValue.getExceptionString()));
        }
        List<GlusterBrickEntity> bricks = (List<GlusterBrickEntity>) returnValue.getReturnValue();
        return mapCollection(bricks);
    } catch (Exception e) {
        return handleError(e, false);
    }
}
#method_after
@SuppressWarnings("unchecked")
@Override
public GlusterBricks list() {
    List<GlusterBrickEntity> bricks = getBackendCollection(VdcQueryType.GetGlusterVolumeBricks, new IdQueryParameters(asGuid(getVolumeId())));
    return mapCollection(bricks);
}
#end_block

#method_before
private List<GlusterBrickEntity> mapBricks(Guid volumeId, GlusterBricks glusterBricks) {
    List<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    for (GlusterBrick brick : glusterBricks.getGlusterBricks()) {
        GlusterBrickEntity brickEntity = getMapper(GlusterBrick.class, GlusterBrickEntity.class).map(brick, null);
        brickEntity.setVolumeId(volumeId);
        bricks.add(brickEntity);
    }
    return bricks;
}
#method_after
private List<GlusterBrickEntity> mapBricks(Guid volumeId, GlusterBricks glusterBricks) {
    List<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    if (glusterBricks.getGlusterBricks().size() > 0) {
        for (GlusterBrick brick : glusterBricks.getGlusterBricks()) {
            GlusterBrickEntity brickEntity = getMapper(GlusterBrick.class, GlusterBrickEntity.class).map(brick, null);
            brickEntity.setVolumeId(volumeId);
            bricks.add(brickEntity);
        }
    }
    return bricks;
}
#end_block

#method_before
@Override
public Response add(GlusterBricks bricks) {
    for (GlusterBrick brick : bricks.getGlusterBricks()) {
        validateParameters(brick, "serverId", "brickDir");
    }
    List<GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks);
    int replicaCount = bricks.isSetNewReplicaCount() ? bricks.getNewReplicaCount() : 0;
    int stripeCount = bricks.isSetNewStripeCount() ? bricks.getNewStripeCount() : 0;
    return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, replicaCount, stripeCount), new QueryIdResolver(VdcQueryType.GetGlusterBrickById, IdQueryParameters.class));
}
#method_after
@Override
public Response add(GlusterBricks bricks) {
    for (GlusterBrick brick : bricks.getGlusterBricks()) {
        validateParameters(brick, "serverId", "brickDir");
    }
    List<GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks);
    int replicaCount = bricks.isSetReplicaCount() ? bricks.getReplicaCount() : 0;
    int stripeCount = bricks.isSetStripeCount() ? bricks.getStripeCount() : 0;
    return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, replicaCount, stripeCount), new QueryIdResolver(VdcQueryType.GetGlusterBrickById, IdQueryParameters.class));
}
#end_block

#method_before
@Override
public Response remove(GlusterBricks bricks) {
    for (GlusterBrick brick : bricks.getGlusterBricks()) {
        validateParameters(brick, "id");
    }
    return performAction(VdcActionType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksParameters(asGuid(getVolumeId()), mapBricks(asGuid(getVolumeId()), bricks)));
}
#method_after
@Override
public Response remove(GlusterBricks bricks) {
    if (bricks.getGlusterBricks().size() > 0) {
        for (GlusterBrick brick : bricks.getGlusterBricks()) {
            validateParameters(brick, "id");
        }
    }
    int replicaCount = bricks.isSetReplicaCount() ? bricks.getReplicaCount() : 0;
    return performAction(VdcActionType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksParameters(asGuid(getVolumeId()), mapBricks(asGuid(getVolumeId()), bricks), replicaCount));
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getId().hashCode();
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((serverId == null) ? 0 : serverId.hashCode());
    result = prime * result + ((brickDirectory == null) ? 0 : brickDirectory.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getId().hashCode();
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((serverId == null) ? 0 : serverId.hashCode());
    result = prime * result + ((brickDirectory == null) ? 0 : brickDirectory.hashCode());
    result = prime * result + ((brickOrder == null) ? 0 : brickOrder.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#end_block

#method_before
public void copyFrom(GlusterBrickEntity brick) {
    setId(brick.getId());
    setVolumeId(brick.getVolumeId());
    setServerId(brick.getServerId());
    setServerName(brick.getServerName());
    setBrickDirectory(brick.getBrickDirectory());
    setStatus(brick.getStatus());
}
#method_after
public void copyFrom(GlusterBrickEntity brick) {
    setId(brick.getId());
    setVolumeId(brick.getVolumeId());
    setServerId(brick.getServerId());
    setServerName(brick.getServerName());
    setBrickDirectory(brick.getBrickDirectory());
    setBrickOrder(brick.getBrickOrder());
    setStatus(brick.getStatus());
}
#end_block

#method_before
@Override
public void replaceBrick(GlusterBrickEntity oldBrick, GlusterBrickEntity newBrick) {
    getCallsHandler().executeModification("UpdateGlusterVolumeBrick", getCustomMapSqlParameterSource().addValue("id", oldBrick.getId()).addValue("new_id", newBrick.getId()).addValue("new_server_id", newBrick.getServerId()).addValue("new_brick_dir", newBrick.getBrickDirectory()).addValue("new_brick_order", oldBrick.getBrickOrder()).addValue("new_status", EnumUtils.nameOrNull(newBrick.getStatus())));
}
#method_after
@Override
public void replaceBrick(GlusterBrickEntity oldBrick, GlusterBrickEntity newBrick) {
    getCallsHandler().executeModification("UpdateGlusterVolumeBrick", getCustomMapSqlParameterSource().addValue("id", oldBrick.getId()).addValue("new_id", newBrick.getId()).addValue("new_server_id", newBrick.getServerId()).addValue("new_status", EnumUtils.nameOrNull(newBrick.getStatus())));
}
#end_block

#method_before
@Override
public GlusterBrickEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterBrickEntity brick = new GlusterBrickEntity();
    brick.setId(Guid.createGuidFromString(rs.getString("id")));
    brick.setVolumeId(Guid.createGuidFromString(rs.getString("volume_id")));
    Guid serverId = Guid.createGuidFromString(rs.getString("server_id"));
    brick.setServerId(serverId);
    // Update the brick with server name. This is useful as the brick is typically represented in the form
    // serverName:brickDirectory though the database table (gluster_volume_bricks) stores just the server id
    brick.setServerName(getHostNameOfServer(serverId));
    brick.setBrickDirectory(rs.getString("brick_dir"));
    brick.setBrickOrder(Integer.parseInt(rs.getString("brick_order")));
    brick.setStatus(GlusterBrickStatus.valueOf(rs.getString("status")));
    return brick;
}
#method_after
@Override
public GlusterBrickEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterBrickEntity brick = new GlusterBrickEntity();
    brick.setId(Guid.createGuidFromString(rs.getString("id")));
    brick.setVolumeId(Guid.createGuidFromString(rs.getString("volume_id")));
    Guid serverId = Guid.createGuidFromString(rs.getString("server_id"));
    brick.setServerId(serverId);
    // Update the brick with server name. This is useful as the brick is typically represented in the form
    // serverName:brickDirectory though the database table (gluster_volume_bricks) stores just the server id
    brick.setServerName(getHostNameOfServer(serverId));
    brick.setBrickDirectory(rs.getString("brick_dir"));
    brick.setBrickOrder(rs.getInt("brick_order"));
    brick.setStatus(GlusterBrickStatus.valueOf(rs.getString("status")));
    return brick;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    VDSGroup cluster = getVdsGroup();
    if (cluster == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!cluster.supportsGlusterService()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER);
        return false;
    }
    return validateBricks(volume);
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    VDSGroup cluster = getVdsGroup();
    if (cluster == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!cluster.supportsGlusterService()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER);
        return false;
    }
    if (volumeNameExists(volume.getName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS);
        return false;
    }
    return validateBricks(volume);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    volume = getGlusterVolume();
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks());
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks());
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
private void addGlusterVolumeBricksInDb(List<GlusterBrickEntity> newBricks) {
    // Reorder the volume bricks
    List<GlusterBrickEntity> volumeBricks = volume.getBricks();
    if (isReplicaCountIncreased() || isStripeCountIncreased()) {
        GlusterBrickEntity brick;
        int brick_num = 0;
        int count = (isReplicaCountIncreased()) ? getParameters().getReplicaCount() : getParameters().getStripeCount();
        // Updating existing brick order
        for (int i = 0; i < volumeBricks.size(); i++) {
            if (((i + 1) % count) == 0) {
                brick_num++;
            }
            brick = volumeBricks.get(i);
            brick.setBrickOrder(brick_num);
            brick_num++;
            getGlusterBrickDao().updateBrickOrder(brick.getId(), brick.getBrickOrder());
        }
        // Adding new bricks
        for (int i = 0; i < newBricks.size(); i++) {
            brick = newBricks.get(i);
            brick.setBrickOrder((i + 1) * count - 1);
            brick.setStatus(getBrickStatus());
            getGlusterBrickDao().save(brick);
        }
    } else {
        // No change in the replica/stripe count
        int brickCount = volumeBricks.get(volumeBricks.size() - 1).getBrickOrder();
        for (GlusterBrickEntity brick : newBricks) {
            brick.setBrickOrder(++brickCount);
            brick.setStatus(getBrickStatus());
            getGlusterBrickDao().save(brick);
        }
    }
    // Update the volume replica/stripe count
    if (isReplicaCountIncreased()) {
        volume.setReplicaCount(getParameters().getReplicaCount());
        if (volume.getVolumeType() == GlusterVolumeType.REPLICATE && getParameters().getReplicaCount() < (volume.getBricks().size() + getParameters().getBricks().size())) {
            volume.setVolumeType(GlusterVolumeType.DISTRIBUTED_REPLICATE);
        }
        getGlusterVolumeDao().updateGlusterVolume(volume);
    }
    if (isStripeCountIncreased()) {
        volume.setStripeCount(getParameters().getStripeCount());
        if (volume.getVolumeType() == GlusterVolumeType.STRIPE && getParameters().getStripeCount() < (volume.getBricks().size() + getParameters().getBricks().size())) {
            volume.setVolumeType(GlusterVolumeType.DISTRIBUTED_STRIPE);
        }
        getGlusterVolumeDao().updateGlusterVolume(volume);
    }
}
#method_after
private void addGlusterVolumeBricksInDb(List<GlusterBrickEntity> newBricks) {
    // Reorder the volume bricks
    GlusterVolumeEntity volume = getGlusterVolume();
    List<GlusterBrickEntity> volumeBricks = volume.getBricks();
    if (isReplicaCountIncreased() || isStripeCountIncreased()) {
        GlusterBrickEntity brick;
        int brick_num = 0;
        int count = (isReplicaCountIncreased()) ? getParameters().getReplicaCount() : getParameters().getStripeCount();
        // Updating existing brick order
        for (int i = 0; i < volumeBricks.size(); i++) {
            if (((i + 1) % count) == 0) {
                brick_num++;
            }
            brick = volumeBricks.get(i);
            brick.setBrickOrder(brick_num);
            brick_num++;
            getGlusterBrickDao().updateBrickOrder(brick.getId(), brick.getBrickOrder());
        }
        // Adding new bricks
        for (int i = 0; i < newBricks.size(); i++) {
            brick = newBricks.get(i);
            brick.setBrickOrder((i + 1) * count - 1);
            brick.setStatus(getBrickStatus());
            getGlusterBrickDao().save(brick);
        }
    } else {
        // No change in the replica/stripe count
        int brickCount = volumeBricks.get(volumeBricks.size() - 1).getBrickOrder();
        for (GlusterBrickEntity brick : newBricks) {
            brick.setBrickOrder(++brickCount);
            brick.setStatus(getBrickStatus());
            getGlusterBrickDao().save(brick);
        }
    }
    // Update the volume replica/stripe count
    if (isReplicaCountIncreased()) {
        volume.setReplicaCount(getParameters().getReplicaCount());
    }
    if (volume.getVolumeType() == GlusterVolumeType.REPLICATE && getParameters().getReplicaCount() < (volume.getBricks().size() + getParameters().getBricks().size())) {
        volume.setVolumeType(GlusterVolumeType.DISTRIBUTED_REPLICATE);
    }
    if (isStripeCountIncreased()) {
        volume.setStripeCount(getParameters().getStripeCount());
    }
    if (volume.getVolumeType() == GlusterVolumeType.STRIPE && getParameters().getStripeCount() < (volume.getBricks().size() + getParameters().getBricks().size())) {
        volume.setVolumeType(GlusterVolumeType.DISTRIBUTED_STRIPE);
    }
    getGlusterVolumeDao().updateGlusterVolume(volume);
}
#end_block

#method_before
private boolean isReplicaCountIncreased() {
    if ((volume.getVolumeType() == GlusterVolumeType.REPLICATE || volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) && getParameters().getReplicaCount() > volume.getReplicaCount()) {
        return true;
    } else {
        return false;
    }
}
#method_after
private boolean isReplicaCountIncreased() {
    if ((getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) && getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
        return true;
    } else {
        return false;
    }
}
#end_block

#method_before
private boolean isStripeCountIncreased() {
    if ((volume.getVolumeType() == GlusterVolumeType.STRIPE || volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) && getParameters().getStripeCount() > volume.getStripeCount()) {
        return true;
    } else {
        return false;
    }
}
#method_after
private boolean isStripeCountIncreased() {
    if ((getGlusterVolume().getVolumeType() == GlusterVolumeType.STRIPE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) && getParameters().getStripeCount() > getGlusterVolume().getStripeCount()) {
        return true;
    } else {
        return false;
    }
}
#end_block

#method_before
private GlusterBrickStatus getBrickStatus() {
    return (volume.getStatus() == GlusterVolumeStatus.UP) ? GlusterBrickStatus.UP : GlusterBrickStatus.DOWN;
}
#method_after
private GlusterBrickStatus getBrickStatus() {
    return (getGlusterVolume().getStatus() == GlusterVolumeStatus.UP) ? GlusterBrickStatus.UP : GlusterBrickStatus.DOWN;
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_ADD_BRICK;
    } else {
        return AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_ADD_BRICK;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED : errorType;
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
        }
    }
    return validateBricks(getParameters().getBricks());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
            return false;
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
            return false;
        }
    }
    return validateBricks(getParameters().getBricks());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    int replicaCount = (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) ? getParameters().getReplicaCount() : 0;
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), bricks, replicaCount));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(bricks);
    } else {
        getReturnValue().getExecuteFailedMessages().add(returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    int replicaCount = (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) ? getParameters().getReplicaCount() : 0;
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), bricks, replicaCount));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(bricks);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS;
    } else {
        return AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED : errorType;
    }
}
#end_block

#method_before
private void removeBricksFromVolumeInDb(List<GlusterBrickEntity> brickList) {
    GlusterVolumeEntity volume = getGlusterVolume();
    for (GlusterBrickEntity brick : brickList) {
        getGlusterBrickDao().removeBrick(brick.getId());
    }
    // Update volume type and replica/stripe count
    if (volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE && volume.getReplicaCount() == (volume.getBricks().size() - brickList.size())) {
        volume.setVolumeType(GlusterVolumeType.REPLICATE);
    }
    if (volume.getVolumeType() == GlusterVolumeType.REPLICATE || volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        int replicaCount = (getParameters().getReplicaCount() == 0 || getParameters().getReplicaCount() == volume.getReplicaCount()) ? volume.getReplicaCount() : getParameters().getReplicaCount();
        volume.setReplicaCount(replicaCount);
        getGlusterVolumeDao().updateGlusterVolume(volume);
    }
    if (volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE && volume.getStripeCount() == (volume.getBricks().size() - brickList.size())) {
        volume.setVolumeType(GlusterVolumeType.STRIPE);
        getGlusterVolumeDao().updateGlusterVolume(volume);
    }
}
#method_after
private void removeBricksFromVolumeInDb(List<GlusterBrickEntity> brickList) {
    GlusterVolumeEntity volume = getGlusterVolume();
    for (GlusterBrickEntity brick : brickList) {
        getGlusterBrickDao().removeBrick(brick.getId());
    }
    // Update volume type and replica/stripe count
    if (volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE && volume.getReplicaCount() == (volume.getBricks().size() - brickList.size())) {
        volume.setVolumeType(GlusterVolumeType.REPLICATE);
    }
    if (volume.getVolumeType() == GlusterVolumeType.REPLICATE || volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        int replicaCount = (getParameters().getReplicaCount() == 0) ? volume.getReplicaCount() : getParameters().getReplicaCount();
        volume.setReplicaCount(replicaCount);
        getGlusterVolumeDao().updateGlusterVolume(volume);
    }
    if (volume.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE && volume.getStripeCount() == (volume.getBricks().size() - brickList.size())) {
        volume.setVolumeType(GlusterVolumeType.STRIPE);
        getGlusterVolumeDao().updateGlusterVolume(volume);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    return updateBrickServerNames(getParameters().getBricks(), true);
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    } else if (getGlusterVolume().getVolumeType() == GlusterVolumeType.STRIPE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return updateBrickServerNames(getParameters().getBricks(), true);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (getVdsIdRef() != null && CanBeRemoved(getVdsId())) {
        Guid vdsGroupId = getVds().getvds_group_id();
        glusterHostRemove();
        RemoveVdsStatisticsFromDb();
        RemoveVdsDynamicFromDb();
        RemoveVdsStaticFromDb();
        RemoveVdsFromCollection();
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    if (getVdsIdRef() != null && CanBeRemoved(getVdsId())) {
        glusterHostRemove();
        RemoveVdsStatisticsFromDb();
        RemoveVdsDynamicFromDb();
        RemoveVdsStaticFromDb();
        RemoveVdsFromCollection();
        setSucceeded(true);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = CanRemoveVds(getVdsId(), getReturnValue().getCanDoActionMessages());
    storage_pool storagePool = getStoragePoolDAO().getForVds(getParameters().getVdsId());
    if (returnValue && storagePool != null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!getStorageDomainDAO().getAllForStoragePool(storagePool.getId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_WITH_LOCAL_STORAGE);
            returnValue = false;
        }
    }
    if (isGlusterEnabled() && hasVolumeOnServer()) {
        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
        returnValue = false;
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = CanRemoveVds(getVdsId(), getReturnValue().getCanDoActionMessages());
    storage_pool storagePool = getStoragePoolDAO().getForVds(getParameters().getVdsId());
    if (returnValue && storagePool != null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!getStorageDomainDAO().getAllForStoragePool(storagePool.getId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_WITH_LOCAL_STORAGE);
            returnValue = false;
        }
    }
    if (isGlusterEnabled()) {
        if (hasVolumeOnServer()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
            returnValue = false;
        }
        if (getVdsDAO().getAllForVdsGroup(getVdsGroupId()).size() > 1) {
            try {
                getClusterUtils().getUpServer(getVdsGroupId());
            } catch (VdcBLLException e) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND);
                returnValue = false;
            }
        }
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    return returnValue;
}
#end_block

#method_before
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAll().size() > 1 && !hasVolumeOnServer()) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((ClusterUtils.getInstance().getUpServer(getVdsGroupId())).getId(), getVds().gethost_name(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!returnValue.getSucceeded()) {
            if (!getSucceeded()) {
                VdcFault fault = new VdcFault();
                fault.setError(VdcBllErrors.GlusterAddHostFailed);
                fault.setMessage(returnValue.getVdsError().getMessage());
                getReturnValue().setFault(fault);
            }
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
        }
    }
}
#method_after
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAllForVdsGroup(getVdsGroupId()).size() > 1 && !hasVolumeOnServer()) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((getClusterUtils().getUpServer(getVdsGroupId())).getId(), getVds().gethost_name(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!getSucceeded()) {
            getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
            getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
            return;
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    return validateBricks(getParameters().getBricks());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
            return false;
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
            return false;
        }
    }
    return validateBricks(getParameters().getBricks());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), bricks));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getGlusterVolume(), bricks);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    int replicaCount = (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) ? getParameters().getReplicaCount() : 0;
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), bricks, replicaCount));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getGlusterVolume(), bricks);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getUpServer().getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                VdcFault fault = new VdcFault();
                fault.setError(VdcBllErrors.GlusterAddHostFailed);
                fault.setMessage(returnValue.getVdsError().getMessage());
                getReturnValue().setFault(fault);
            }
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getUpServer().getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                return;
            }
        }
    }
}
#end_block

#method_before
@Override
public boolean Validate() {
    // Revalidate name field.
    // TODO: Make maximum characters value depend on number of desktops in pool.
    // VmOsType os = (VmOsType) getModel().getOSType().getSelectedItem();
    boolean isNew = getModel().getIsNew();
    int maxAllowedVms = configurator.getMaxVmsInPool();
    int assignedVms = getModel().getAssignedVms().AsConvertible().Integer();
    getModel().getNumOfDesktops().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(4), new IntegerValidation(isNew ? 1 : 0, isNew ? maxAllowedVms : maxAllowedVms - assignedVms) });
    getModel().getPrestartedVms().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, assignedVms) });
    getModel().setIsGeneralTabValid(getModel().getIsGeneralTabValid() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid());
    getModel().setIsPoolTabValid(true);
    return super.Validate() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid();
}
#method_after
@Override
public boolean Validate() {
    // Revalidate name field.
    // TODO: Make maximum characters value depend on number of desktops in pool.
    // VmOsType os = (VmOsType) getModel().getOSType().getSelectedItem();
    boolean isNew = getModel().getIsNew();
    int maxAllowedVms = getMaxVmsInPool();
    int assignedVms = getModel().getAssignedVms().AsConvertible().Integer();
    getModel().getNumOfDesktops().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new LengthValidation(4), new IntegerValidation(isNew ? 1 : 0, isNew ? maxAllowedVms : maxAllowedVms - assignedVms) });
    getModel().getPrestartedVms().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IntegerValidation(0, assignedVms) });
    getModel().setIsGeneralTabValid(getModel().getIsGeneralTabValid() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid());
    getModel().setIsPoolTabValid(true);
    return super.Validate() && getModel().getName().getIsValid() && getModel().getNumOfDesktops().getIsValid() && getModel().getPrestartedVms().getIsValid();
}
#end_block

