91
#method_before
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SU_INDICATOR), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_GLOW_TINT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CONFIG), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CAN_MOVE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.MENU_LOCATION), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.MENU_VISIBILITY), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.PIE_CONTROLS), false, this, UserHandle.USER_ALL);
    update();
}
#method_after
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SU_INDICATOR), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_GLOW_TINT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CONFIG), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CAN_MOVE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.MENU_LOCATION), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.MENU_VISIBILITY), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.HEADS_UP_NOTIFCATION_DECAY), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.HEADS_UP_SNOOZE_TIME), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.PIE_CONTROLS), false, this, UserHandle.USER_ALL);
    update();
}
#end_block

#method_before
@Override
public void onChange(boolean selfChange, Uri uri) {
    if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT)) || uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE))) {
        mBatteryView.updateBatteryIconSettings();
        mHeader.updateBatteryIconSettings();
        mKeyguardStatusBar.updateBatteryIconSettings();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.SU_INDICATOR))) {
        mSuController.updateNotification();
        mSuController.fireCallbacks();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.PIE_CONTROLS))) {
        attachPieContainer(isPieEnabled());
    }
    super.onChange(selfChange, uri);
    update();
    if (uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT)) || uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT_MODE)) || uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CONFIG)) || uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_GLOW_TINT)) || uri.equals(Settings.System.getUriFor(Settings.System.MENU_LOCATION)) || uri.equals(Settings.System.getUriFor(Settings.System.MENU_VISIBILITY))) {
        if (mNavigationBarView != null) {
            mNavigationBarView.recreateNavigationBar();
            prepareNavigationBarView();
        }
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CAN_MOVE))) {
        prepareNavigationBarView();
    }
}
#method_after
@Override
public void onChange(boolean selfChange, Uri uri) {
    super.onChange(selfChange, uri);
    if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT)) || uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE))) {
        mBatteryView.updateBatteryIconSettings();
        mHeader.updateBatteryIconSettings();
        mKeyguardStatusBar.updateBatteryIconSettings();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.SU_INDICATOR))) {
        mSuController.updateNotification();
        mSuController.fireCallbacks();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.HEADS_UP_SNOOZE_TIME))) {
        final int snoozeTime = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_SNOOZE_TIME, mContext.getResources().getInteger(R.integer.heads_up_snooze_time), UserHandle.USER_CURRENT);
        setHeadsUpSnoozeTime(snoozeTime);
        if (mHeadsUpNotificationView != null) {
            mHeadsUpNotificationView.setSnoozeVisibility(snoozeTime != 0);
        }
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.HEADS_UP_NOTIFCATION_DECAY))) {
        mHeadsUpNotificationDecay = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_NOTIFCATION_DECAY, mContext.getResources().getInteger(R.integer.heads_up_notification_decay), UserHandle.USER_CURRENT);
        resetHeadsUpDecayTimer();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.PIE_CONTROLS))) {
        attachPieContainer(isPieEnabled());
    }
    update();
    if (uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT)) || uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_BUTTON_TINT_MODE)) || uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CONFIG)) || uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_GLOW_TINT)) || uri.equals(Settings.System.getUriFor(Settings.System.MENU_LOCATION)) || uri.equals(Settings.System.getUriFor(Settings.System.MENU_VISIBILITY))) {
        if (mNavigationBarView != null) {
            mNavigationBarView.recreateNavigationBar();
            prepareNavigationBarView();
        }
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_CAN_MOVE))) {
        prepareNavigationBarView();
    }
}
#end_block

#method_before
@Override
public void start() {
    mDisplay = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    updateDisplaySize();
    mScrimSrcModeEnabled = mContext.getResources().getBoolean(R.bool.config_status_bar_scrim_behind_use_src);
    // calls createAndAddWindows()
    super.start();
    mMediaSessionManager = (MediaSessionManager) mContext.getSystemService(Context.MEDIA_SESSION_SERVICE);
    // TODO: use MediaSessionManager.SessionListener to hook us up to future updates
    // in session state
    addNavigationBar();
    SettingsObserver observer = new SettingsObserver(mHandler);
    observer.observe();
    // Lastly, call to the icon policy to install/update all the icons.
    mIconPolicy = new PhoneStatusBarPolicy(mContext, mCastController, mSuController);
    // set up
    mSettingsObserver.onChange(false);
    // set up
    mHeadsUpObserver.onChange(true);
    if (ENABLE_HEADS_UP) {
        mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.HEADS_UP_NOTIFICATIONS_ENABLED), true, mHeadsUpObserver);
        mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_TICKER), true, mHeadsUpObserver);
    }
    mUnlockMethodCache = UnlockMethodCache.getInstance(mContext);
    startKeyguard();
    mDozeServiceHost = new DozeServiceHost();
    putComponent(DozeHost.class, mDozeServiceHost);
    putComponent(PhoneStatusBar.class, this);
    setControllerUsers();
    notifyUserAboutHiddenNotifications();
    mScreenPinningRequest = new ScreenPinningRequest(mContext);
    mScreenPinningRequest.setCallback(mScreenPinningCallback);
}
#method_after
@Override
public void start() {
    mDisplay = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    updateDisplaySize();
    mScrimSrcModeEnabled = mContext.getResources().getBoolean(R.bool.config_status_bar_scrim_behind_use_src);
    // calls createAndAddWindows()
    super.start();
    mMediaSessionManager = (MediaSessionManager) mContext.getSystemService(Context.MEDIA_SESSION_SERVICE);
    // TODO: use MediaSessionManager.SessionListener to hook us up to future updates
    // in session state
    addNavigationBar();
    SettingsObserver observer = new SettingsObserver(mHandler);
    observer.observe();
    // Lastly, call to the icon policy to install/update all the icons.
    mIconPolicy = new PhoneStatusBarPolicy(mContext, mCastController, mSuController);
    // set up
    mSettingsObserver.onChange(false);
    // when StatusBarManager notifies us that the state has changed.
    if (!mDisableNotificationAlerts) {
        addHeadsUpView();
    }
    mUnlockMethodCache = UnlockMethodCache.getInstance(mContext);
    startKeyguard();
    mDozeServiceHost = new DozeServiceHost();
    putComponent(DozeHost.class, mDozeServiceHost);
    putComponent(PhoneStatusBar.class, this);
    setControllerUsers();
    notifyUserAboutHiddenNotifications();
    mScreenPinningRequest = new ScreenPinningRequest(mContext);
    mScreenPinningRequest.setCallback(mScreenPinningCallback);
}
#end_block

#method_before
// ================================================================================
// Constructing the view
protected PhoneStatusBarView makeStatusBarView() {
    final Context context = mContext;
    Resources res = context.getResources();
    mScreenWidth = (float) context.getResources().getDisplayMetrics().widthPixels;
    mMinBrightness = context.getResources().getInteger(com.android.internal.R.integer.config_screenBrightnessDim);
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    mIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    if (isMSim()) {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.msim_super_status_bar, null);
    } else {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.super_status_bar, null);
    }
    mStatusBarWindow.mService = this;
    mStatusBarWindow.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                if (mExpandedVisible) {
                    animateCollapsePanels();
                }
            }
            return mStatusBarWindow.onTouchEvent(event);
        }
    });
    if (isMSim()) {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.msim_status_bar);
    } else {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
    }
    mStatusBarView.setBar(this);
    PanelHolder holder;
    if (isMSim()) {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.msim_panel_holder);
    } else {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.panel_holder);
    }
    mStatusBarView.setPanelHolder(holder);
    mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel);
    mNotificationPanel.setStatusBar(this);
    if (!ActivityManager.isHighEndGfx()) {
        mStatusBarWindow.setBackground(null);
        mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
    }
    if (ENABLE_HEADS_UP) {
        mHeadsUpNotificationView = (HeadsUpNotificationView) View.inflate(context, R.layout.heads_up, null);
        mHeadsUpNotificationView.setVisibility(View.GONE);
        mHeadsUpNotificationView.setBar(this);
    }
    if (MULTIUSER_DEBUG) {
        mNotificationPanelDebugText = (TextView) mNotificationPanel.findViewById(R.id.header_debug_info);
        mNotificationPanelDebugText.setVisibility(View.VISIBLE);
    }
    updateShowSearchHoldoff();
    // Setup pie container if enabled
    attachPieContainer(isPieEnabled());
    if (mNavigationBarView == null) {
        mNavigationBarView = (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
    }
    mNavigationBarView.setDisabledFlags(mDisabled);
    mNavigationBarView.setBar(this);
    addNavigationBarCallback(mNavigationBarView);
    mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener() {

        @Override
        public void onVerticalChanged(boolean isVertical) {
            if (mSearchPanelView != null) {
                mSearchPanelView.setHorizontal(isVertical);
            }
            mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
    });
    mNavigationBarView.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            return false;
        }
    });
    // figure out which pixel-format to use for the status bar.
    mPixelFormat = PixelFormat.OPAQUE;
    mSystemIconArea = (LinearLayout) mStatusBarView.findViewById(R.id.system_icon_area);
    mSystemIcons = (LinearLayout) mStatusBarView.findViewById(R.id.system_icons);
    mStatusIcons = (LinearLayout) mStatusBarView.findViewById(R.id.statusIcons);
    mNotificationIconArea = mStatusBarView.findViewById(R.id.notification_icon_area_inner);
    mNotificationIcons = (IconMerger) mStatusBarView.findViewById(R.id.notificationIcons);
    mMoreIcon = mStatusBarView.findViewById(R.id.moreIcon);
    mNotificationIcons.setOverflowIndicator(mMoreIcon);
    mStatusBarContents = (LinearLayout) mStatusBarView.findViewById(R.id.status_bar_contents);
    mCenterClockLayout = (LinearLayout) mStatusBarView.findViewById(R.id.center_clock_layout);
    Clock cclock = (Clock) mStatusBarView.findViewById(R.id.center_clock);
    if (cclock != null) {
        cclock.setPhoneStatusBar(this);
    }
    mStackScroller = (NotificationStackScrollLayout) mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
    mStackScroller.setLongPressListener(getNotificationLongClicker());
    mStackScroller.setPhoneStatusBar(this);
    mKeyguardIconOverflowContainer = (NotificationOverflowContainer) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow, mStackScroller, false);
    mKeyguardIconOverflowContainer.setOnActivatedListener(this);
    mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
    mStackScroller.addView(mKeyguardIconOverflowContainer);
    SpeedBumpView speedBump = (SpeedBumpView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump, mStackScroller, false);
    mStackScroller.setSpeedBumpView(speedBump);
    mEmptyShadeView = (EmptyShadeView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications, mStackScroller, false);
    mStackScroller.setEmptyShadeView(mEmptyShadeView);
    mDismissView = (DismissView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all, mStackScroller, false);
    mDismissView.setOnButtonClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            clearAllNotifications();
        }
    });
    mStackScroller.setDismissView(mDismissView);
    mExpandedContents = mStackScroller;
    mBackdrop = (BackDropView) mStatusBarWindow.findViewById(R.id.backdrop);
    mBackdropFront = (ImageView) mBackdrop.findViewById(R.id.backdrop_front);
    mBackdropBack = (ImageView) mBackdrop.findViewById(R.id.backdrop_back);
    ScrimView scrimBehind = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_behind);
    ScrimView scrimInFront = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_in_front);
    mScrimController = new ScrimController(scrimBehind, scrimInFront, mScrimSrcModeEnabled);
    mScrimController.setBackDropView(mBackdrop);
    mStatusBarView.setScrimController(mScrimController);
    mDozeScrimController = new DozeScrimController(mScrimController, context);
    mHeader = (StatusBarHeaderView) mStatusBarWindow.findViewById(R.id.header);
    mHeader.setActivityStarter(this);
    mKeyguardStatusBar = (KeyguardStatusBarView) mStatusBarWindow.findViewById(R.id.keyguard_header);
    mStatusIconsKeyguard = (LinearLayout) mKeyguardStatusBar.findViewById(R.id.statusIcons);
    mKeyguardStatusView = mStatusBarWindow.findViewById(R.id.keyguard_status_view);
    mKeyguardBottomArea = (KeyguardBottomAreaView) mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
    mKeyguardBottomArea.setActivityStarter(this);
    mKeyguardIndicationController = new KeyguardIndicationController(mContext, (KeyguardIndicationTextView) mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
    mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
    mTickerEnabled = res.getBoolean(R.bool.enable_ticker);
    if (mTickerEnabled) {
        final ViewStub tickerStub = (ViewStub) mStatusBarView.findViewById(R.id.ticker_stub);
        if (tickerStub != null) {
            mTickerView = tickerStub.inflate();
            mTicker = new MyTicker(context, mStatusBarView);
            TickerView tickerView = (TickerView) mStatusBarView.findViewById(R.id.tickerText);
            tickerView.mTicker = mTicker;
        }
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    // set the inital view visibility
    setAreThereNotifications();
    // Background thread for any controllers that need it.
    mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    mHandlerThread.start();
    mBatteryLevel = (TextView) mStatusBarView.findViewById(R.id.battery_level_text);
    // Other icons
    // will post a notification
    mLocationController = new LocationControllerImpl(mContext);
    mBatteryController = new BatteryController(mContext);
    mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback() {

        @Override
        public void onPowerSaveChanged() {
            mHandler.post(mCheckBarModes);
            if (mDozeServiceHost != null) {
                mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
            }
        }

        @Override
        public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
            mBatteryIsCharging = charging;
            mBatteryChargeLevel = level;
            loadShowBatteryTextSetting();
            updateBatteryLevelText();
            mHeader.updateBatteryLevel(level, charging);
            mKeyguardStatusBar.updateBatteryLevel(level, charging);
        }
    });
    mHotspotController = new HotspotControllerImpl(mContext);
    mBluetoothController = new BluetoothControllerImpl(mContext, mHandlerThread.getLooper());
    mSecurityController = new SecurityControllerImpl(mContext);
    if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
        mRotationLockController = new RotationLockControllerImpl(mContext);
    }
    mUserInfoController = new UserInfoController(mContext);
    mVolumeComponent = getComponent(VolumeComponent.class);
    mZenModeController = mVolumeComponent.getZenController();
    mCastController = new CastControllerImpl(mContext);
    mSuController = new SuControllerImpl(mContext);
    if (isMSim()) {
        mMSimNetworkController = new MSimNetworkControllerImpl(mContext);
        MSimSignalClusterView signalCluster = (MSimSignalClusterView) mStatusBarView.findViewById(R.id.msim_signal_cluster);
        MSimSignalClusterView signalClusterKeyguard = (MSimSignalClusterView) mKeyguardStatusBar.findViewById(R.id.msim_signal_cluster);
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            mMSimNetworkController.addSignalCluster(signalCluster, i);
            mMSimNetworkController.addSignalCluster(signalClusterKeyguard, i);
        }
        signalCluster.setNetworkController(mMSimNetworkController);
        signalClusterKeyguard.setNetworkController(mMSimNetworkController);
        mMSimNetworkController.addEmergencyLabelView(mHeader);
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mSubsLabel = (TextView) mStatusBarWindow.findViewById(R.id.subs_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel + "operator label=" + mSubsLabel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mMSimNetworkController.hasMobileDataFeature()) {
                mMSimNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mMSimNetworkController.addCombinedLabelView(mCarrierLabel);
            }
            mSubsLabel.setVisibility(View.VISIBLE);
            mMSimNetworkController.addSubsLabelView(mSubsLabel);
        // set up the dynamic hide/show of the label
        // mPile.setOnSizeChangedListener(new OnSizeChangedListener() {
        // @Override
        // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
        // updateCarrierLabelVisibility(false);
        // }
        // });
        }
    } else {
        mNetworkController = new NetworkControllerImpl(mContext);
        final SignalClusterView signalCluster = (SignalClusterView) mStatusBarView.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterKeyguard = (SignalClusterView) mKeyguardStatusBar.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterQs = (SignalClusterView) mHeader.findViewById(R.id.signal_cluster);
        mNetworkController.addSignalCluster(signalCluster);
        mNetworkController.addSignalCluster(signalClusterKeyguard);
        mNetworkController.addSignalCluster(signalClusterQs);
        signalCluster.setSecurityController(mSecurityController);
        signalCluster.setNetworkController(mNetworkController);
        signalClusterKeyguard.setSecurityController(mSecurityController);
        signalClusterKeyguard.setNetworkController(mNetworkController);
        signalClusterQs.setSecurityController(mSecurityController);
        signalClusterQs.setNetworkController(mNetworkController);
        final boolean isAPhone = mNetworkController.hasVoiceCallingFeature();
        if (isAPhone) {
            mNetworkController.addEmergencyLabelView(mHeader);
        }
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mNetworkController.hasMobileDataFeature()) {
                mNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mNetworkController.addCombinedLabelView(mCarrierLabel);
            }
        }
    // set up the dynamic hide/show of the label
    // TODO: uncomment, handle this for the Stack scroller aswell
    // ((NotificationRowLayout) mStackScroller)
    // .setOnSizeChangedListener(new OnSizeChangedListener() {
    // @Override
    // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
    // updateCarrierLabelVisibility(false);
    }
    mKeyguardBottomArea.setPhoneStatusBar(this);
    mAccessibilityController = new AccessibilityController(mContext);
    mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
    mNextAlarmController = new NextAlarmController(mContext);
    mKeyguardMonitor = new KeyguardMonitor();
    mUserSwitcherController = new UserSwitcherController(mContext, mKeyguardMonitor);
    mKeyguardUserSwitcher = new KeyguardUserSwitcher(mContext, (ViewStub) mStatusBarWindow.findViewById(R.id.keyguard_user_switcher), mKeyguardStatusBar, mNotificationPanel, mUserSwitcherController);
    // Set up the quick settings tile panel
    mQSPanel = (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);
    if (mQSPanel != null) {
        final QSTileHost qsh;
        if (isMSim()) {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mMSimNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        } else {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        }
        mQSPanel.setHost(qsh);
        mQSPanel.setTiles(qsh.getTiles());
        mBrightnessMirrorController = new BrightnessMirrorController(mStatusBarWindow);
        mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
        mHeader.setQSPanel(mQSPanel);
        qsh.setCallback(new QSTileHost.Callback() {

            @Override
            public void onTilesChanged() {
                mQSPanel.setTiles(qsh.getTiles());
            }
        });
    }
    // task manager
    if (mContext.getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManagerPanel = (LinearLayout) mStatusBarWindow.findViewById(R.id.task_manager_panel);
        mTaskManager = new TaskManager(mContext, mTaskManagerPanel);
        mTaskManager.setActivityStarter(this);
        mTaskManagerButton = (ImageButton) mHeader.findViewById(R.id.task_manager_button);
        mTaskManagerButton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                showTaskList = !showTaskList;
                mNotificationPanel.setTaskManagerVisibility(showTaskList);
            }
        });
    }
    // User info. Trigger first load.
    mHeader.setUserInfoController(mUserInfoController);
    mKeyguardStatusBar.setUserInfoController(mUserInfoController);
    mUserInfoController.reloadUserInfo();
    mHeader.setBatteryController(mBatteryController);
    mBatteryView = (BatteryMeterView) mStatusBarView.findViewById(R.id.battery);
    mBatteryView.setBatteryController(mBatteryController);
    mKeyguardStatusBar.setBatteryController(mBatteryController);
    mHeader.setNextAlarmController(mNextAlarmController);
    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
    mBroadcastReceiver.onReceive(mContext, new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
    // receive broadcasts
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    filter.addAction(Intent.ACTION_SCREEN_ON);
    if (DEBUG_MEDIA_FAKE_ARTWORK) {
        filter.addAction("fake_artwork");
    }
    filter.addAction(ACTION_DEMO);
    context.registerReceiver(mBroadcastReceiver, filter);
    // listen for USER_SETUP_COMPLETE setting (per-user)
    resetUserSetupObserver();
    startGlyphRasterizeHack();
    return mStatusBarView;
}
#method_after
// ================================================================================
// Constructing the view
protected PhoneStatusBarView makeStatusBarView() {
    final Context context = mContext;
    Resources res = context.getResources();
    mScreenWidth = (float) context.getResources().getDisplayMetrics().widthPixels;
    mMinBrightness = context.getResources().getInteger(com.android.internal.R.integer.config_screenBrightnessDim);
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    mIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    if (isMSim()) {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.msim_super_status_bar, null);
    } else {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.super_status_bar, null);
    }
    mStatusBarWindow.mService = this;
    mStatusBarWindow.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                if (mExpandedVisible) {
                    animateCollapsePanels();
                }
            }
            return mStatusBarWindow.onTouchEvent(event);
        }
    });
    if (isMSim()) {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.msim_status_bar);
    } else {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
    }
    mStatusBarView.setBar(this);
    PanelHolder holder;
    if (isMSim()) {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.msim_panel_holder);
    } else {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.panel_holder);
    }
    mStatusBarView.setPanelHolder(holder);
    mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel);
    mNotificationPanel.setStatusBar(this);
    if (!ActivityManager.isHighEndGfx()) {
        mStatusBarWindow.setBackground(null);
        mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
    }
    mHeadsUpNotificationView = (HeadsUpNotificationView) View.inflate(context, R.layout.heads_up, null);
    mHeadsUpNotificationView.setVisibility(View.GONE);
    mHeadsUpNotificationView.setBar(this);
    mHeadsUpNotificationDecay = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_NOTIFCATION_DECAY, res.getInteger(R.integer.heads_up_notification_decay), UserHandle.USER_CURRENT);
    final int snoozeTime = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_SNOOZE_TIME, res.getInteger(R.integer.heads_up_snooze_time), UserHandle.USER_CURRENT);
    setHeadsUpSnoozeTime(snoozeTime);
    mHeadsUpNotificationView.setSnoozeVisibility(snoozeTime != 0);
    if (MULTIUSER_DEBUG) {
        mNotificationPanelDebugText = (TextView) mNotificationPanel.findViewById(R.id.header_debug_info);
        mNotificationPanelDebugText.setVisibility(View.VISIBLE);
    }
    updateShowSearchHoldoff();
    // Setup pie container if enabled
    attachPieContainer(isPieEnabled());
    if (mNavigationBarView == null) {
        mNavigationBarView = (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
    }
    mNavigationBarView.setDisabledFlags(mDisabled);
    mNavigationBarView.setBar(this);
    addNavigationBarCallback(mNavigationBarView);
    mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener() {

        @Override
        public void onVerticalChanged(boolean isVertical) {
            if (mSearchPanelView != null) {
                mSearchPanelView.setHorizontal(isVertical);
            }
            mNotificationPanel.setQsScrimEnabled(!isVertical);
        }
    });
    mNavigationBarView.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            return false;
        }
    });
    // figure out which pixel-format to use for the status bar.
    mPixelFormat = PixelFormat.OPAQUE;
    mSystemIconArea = (LinearLayout) mStatusBarView.findViewById(R.id.system_icon_area);
    mSystemIcons = (LinearLayout) mStatusBarView.findViewById(R.id.system_icons);
    mStatusIcons = (LinearLayout) mStatusBarView.findViewById(R.id.statusIcons);
    mNotificationIconArea = mStatusBarView.findViewById(R.id.notification_icon_area_inner);
    mNotificationIcons = (IconMerger) mStatusBarView.findViewById(R.id.notificationIcons);
    mMoreIcon = mStatusBarView.findViewById(R.id.moreIcon);
    mNotificationIcons.setOverflowIndicator(mMoreIcon);
    mStatusBarContents = (LinearLayout) mStatusBarView.findViewById(R.id.status_bar_contents);
    mCenterClockLayout = (LinearLayout) mStatusBarView.findViewById(R.id.center_clock_layout);
    Clock cclock = (Clock) mStatusBarView.findViewById(R.id.center_clock);
    if (cclock != null) {
        cclock.setPhoneStatusBar(this);
    }
    mStackScroller = (NotificationStackScrollLayout) mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
    mStackScroller.setLongPressListener(getNotificationLongClicker());
    mStackScroller.setPhoneStatusBar(this);
    mKeyguardIconOverflowContainer = (NotificationOverflowContainer) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow, mStackScroller, false);
    mKeyguardIconOverflowContainer.setOnActivatedListener(this);
    mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
    mStackScroller.addView(mKeyguardIconOverflowContainer);
    SpeedBumpView speedBump = (SpeedBumpView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump, mStackScroller, false);
    mStackScroller.setSpeedBumpView(speedBump);
    mEmptyShadeView = (EmptyShadeView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications, mStackScroller, false);
    mStackScroller.setEmptyShadeView(mEmptyShadeView);
    mDismissView = (DismissView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all, mStackScroller, false);
    mDismissView.setOnButtonClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            clearAllNotifications();
        }
    });
    mStackScroller.setDismissView(mDismissView);
    mExpandedContents = mStackScroller;
    mBackdrop = (BackDropView) mStatusBarWindow.findViewById(R.id.backdrop);
    mBackdropFront = (ImageView) mBackdrop.findViewById(R.id.backdrop_front);
    mBackdropBack = (ImageView) mBackdrop.findViewById(R.id.backdrop_back);
    ScrimView scrimBehind = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_behind);
    ScrimView scrimInFront = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_in_front);
    mScrimController = new ScrimController(scrimBehind, scrimInFront, mScrimSrcModeEnabled);
    mScrimController.setBackDropView(mBackdrop);
    mStatusBarView.setScrimController(mScrimController);
    mDozeScrimController = new DozeScrimController(mScrimController, context);
    mHeader = (StatusBarHeaderView) mStatusBarWindow.findViewById(R.id.header);
    mHeader.setActivityStarter(this);
    mKeyguardStatusBar = (KeyguardStatusBarView) mStatusBarWindow.findViewById(R.id.keyguard_header);
    mStatusIconsKeyguard = (LinearLayout) mKeyguardStatusBar.findViewById(R.id.statusIcons);
    mKeyguardStatusView = mStatusBarWindow.findViewById(R.id.keyguard_status_view);
    mKeyguardBottomArea = (KeyguardBottomAreaView) mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
    mKeyguardBottomArea.setActivityStarter(this);
    mKeyguardIndicationController = new KeyguardIndicationController(mContext, (KeyguardIndicationTextView) mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
    mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
    mTickerEnabled = res.getBoolean(R.bool.enable_ticker);
    if (mTickerEnabled) {
        final ViewStub tickerStub = (ViewStub) mStatusBarView.findViewById(R.id.ticker_stub);
        if (tickerStub != null) {
            mTickerView = tickerStub.inflate();
            mTicker = new MyTicker(context, mStatusBarView);
            TickerView tickerView = (TickerView) mStatusBarView.findViewById(R.id.tickerText);
            tickerView.mTicker = mTicker;
        }
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    // set the inital view visibility
    setAreThereNotifications();
    // Background thread for any controllers that need it.
    mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    mHandlerThread.start();
    mBatteryLevel = (TextView) mStatusBarView.findViewById(R.id.battery_level_text);
    // Other icons
    // will post a notification
    mLocationController = new LocationControllerImpl(mContext);
    mBatteryController = new BatteryController(mContext);
    mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback() {

        @Override
        public void onPowerSaveChanged() {
            mHandler.post(mCheckBarModes);
            if (mDozeServiceHost != null) {
                mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
            }
        }

        @Override
        public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
            mBatteryIsCharging = charging;
            mBatteryChargeLevel = level;
            loadShowBatteryTextSetting();
            updateBatteryLevelText();
            mHeader.updateBatteryLevel(level, charging);
            mKeyguardStatusBar.updateBatteryLevel(level, charging);
        }
    });
    mHotspotController = new HotspotControllerImpl(mContext);
    mBluetoothController = new BluetoothControllerImpl(mContext, mHandlerThread.getLooper());
    mSecurityController = new SecurityControllerImpl(mContext);
    if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
        mRotationLockController = new RotationLockControllerImpl(mContext);
    }
    mUserInfoController = new UserInfoController(mContext);
    mVolumeComponent = getComponent(VolumeComponent.class);
    mZenModeController = mVolumeComponent.getZenController();
    mCastController = new CastControllerImpl(mContext);
    mSuController = new SuControllerImpl(mContext);
    if (isMSim()) {
        mMSimNetworkController = new MSimNetworkControllerImpl(mContext);
        MSimSignalClusterView signalCluster = (MSimSignalClusterView) mStatusBarView.findViewById(R.id.msim_signal_cluster);
        MSimSignalClusterView signalClusterKeyguard = (MSimSignalClusterView) mKeyguardStatusBar.findViewById(R.id.msim_signal_cluster);
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            mMSimNetworkController.addSignalCluster(signalCluster, i);
            mMSimNetworkController.addSignalCluster(signalClusterKeyguard, i);
        }
        signalCluster.setNetworkController(mMSimNetworkController);
        signalClusterKeyguard.setNetworkController(mMSimNetworkController);
        mMSimNetworkController.addEmergencyLabelView(mHeader);
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mSubsLabel = (TextView) mStatusBarWindow.findViewById(R.id.subs_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel + "operator label=" + mSubsLabel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mMSimNetworkController.hasMobileDataFeature()) {
                mMSimNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mMSimNetworkController.addCombinedLabelView(mCarrierLabel);
            }
            mSubsLabel.setVisibility(View.VISIBLE);
            mMSimNetworkController.addSubsLabelView(mSubsLabel);
        // set up the dynamic hide/show of the label
        // mPile.setOnSizeChangedListener(new OnSizeChangedListener() {
        // @Override
        // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
        // updateCarrierLabelVisibility(false);
        // }
        // });
        }
    } else {
        mNetworkController = new NetworkControllerImpl(mContext);
        final SignalClusterView signalCluster = (SignalClusterView) mStatusBarView.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterKeyguard = (SignalClusterView) mKeyguardStatusBar.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterQs = (SignalClusterView) mHeader.findViewById(R.id.signal_cluster);
        mNetworkController.addSignalCluster(signalCluster);
        mNetworkController.addSignalCluster(signalClusterKeyguard);
        mNetworkController.addSignalCluster(signalClusterQs);
        signalCluster.setSecurityController(mSecurityController);
        signalCluster.setNetworkController(mNetworkController);
        signalClusterKeyguard.setSecurityController(mSecurityController);
        signalClusterKeyguard.setNetworkController(mNetworkController);
        signalClusterQs.setSecurityController(mSecurityController);
        signalClusterQs.setNetworkController(mNetworkController);
        final boolean isAPhone = mNetworkController.hasVoiceCallingFeature();
        if (isAPhone) {
            mNetworkController.addEmergencyLabelView(mHeader);
        }
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mNetworkController.hasMobileDataFeature()) {
                mNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mNetworkController.addCombinedLabelView(mCarrierLabel);
            }
        }
    // set up the dynamic hide/show of the label
    // TODO: uncomment, handle this for the Stack scroller aswell
    // ((NotificationRowLayout) mStackScroller)
    // .setOnSizeChangedListener(new OnSizeChangedListener() {
    // @Override
    // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
    // updateCarrierLabelVisibility(false);
    }
    mKeyguardBottomArea.setPhoneStatusBar(this);
    mAccessibilityController = new AccessibilityController(mContext);
    mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
    mNextAlarmController = new NextAlarmController(mContext);
    mKeyguardMonitor = new KeyguardMonitor();
    mUserSwitcherController = new UserSwitcherController(mContext, mKeyguardMonitor);
    mKeyguardUserSwitcher = new KeyguardUserSwitcher(mContext, (ViewStub) mStatusBarWindow.findViewById(R.id.keyguard_user_switcher), mKeyguardStatusBar, mNotificationPanel, mUserSwitcherController);
    // Set up the quick settings tile panel
    mQSPanel = (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);
    if (mQSPanel != null) {
        final QSTileHost qsh;
        if (isMSim()) {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mMSimNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        } else {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        }
        mQSPanel.setHost(qsh);
        mQSPanel.setTiles(qsh.getTiles());
        mBrightnessMirrorController = new BrightnessMirrorController(mStatusBarWindow);
        mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
        mHeader.setQSPanel(mQSPanel);
        qsh.setCallback(new QSTileHost.Callback() {

            @Override
            public void onTilesChanged() {
                mQSPanel.setTiles(qsh.getTiles());
            }
        });
    }
    // task manager
    if (mContext.getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManagerPanel = (LinearLayout) mStatusBarWindow.findViewById(R.id.task_manager_panel);
        mTaskManager = new TaskManager(mContext, mTaskManagerPanel);
        mTaskManager.setActivityStarter(this);
        mTaskManagerButton = (ImageButton) mHeader.findViewById(R.id.task_manager_button);
        mTaskManagerButton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                showTaskList = !showTaskList;
                mNotificationPanel.setTaskManagerVisibility(showTaskList);
            }
        });
    }
    // User info. Trigger first load.
    mHeader.setUserInfoController(mUserInfoController);
    mKeyguardStatusBar.setUserInfoController(mUserInfoController);
    mUserInfoController.reloadUserInfo();
    mHeader.setBatteryController(mBatteryController);
    mBatteryView = (BatteryMeterView) mStatusBarView.findViewById(R.id.battery);
    mBatteryView.setBatteryController(mBatteryController);
    mKeyguardStatusBar.setBatteryController(mBatteryController);
    mHeader.setNextAlarmController(mNextAlarmController);
    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
    mBroadcastReceiver.onReceive(mContext, new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
    // receive broadcasts
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    filter.addAction(Intent.ACTION_SCREEN_ON);
    if (DEBUG_MEDIA_FAKE_ARTWORK) {
        filter.addAction("fake_artwork");
    }
    filter.addAction(ACTION_DEMO);
    context.registerReceiver(mBroadcastReceiver, filter);
    // listen for USER_SETUP_COMPLETE setting (per-user)
    resetUserSetupObserver();
    startGlyphRasterizeHack();
    return mStatusBarView;
}
#end_block

#method_before
private void addHeadsUpView() {
    int headsUpHeight = mContext.getResources().getDimensionPixelSize(R.dimen.heads_up_window_height);
    WindowManager.LayoutParams lp = new WindowManager.LayoutParams(LayoutParams.MATCH_PARENT, headsUpHeight, // above the status bar!
    WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH, PixelFormat.TRANSLUCENT);
    lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
    lp.gravity = Gravity.TOP;
    lp.setTitle("Heads Up");
    lp.packageName = mContext.getPackageName();
    lp.windowAnimations = R.style.Animation_StatusBar_HeadsUp;
    mWindowManager.addView(mHeadsUpNotificationView, lp);
}
#method_after
private void addHeadsUpView() {
    if (!mHeadsUpViewAttached) {
        int headsUpHeight = mContext.getResources().getDimensionPixelSize(R.dimen.heads_up_window_height);
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(LayoutParams.MATCH_PARENT, headsUpHeight, // above the status bar!
        WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH, PixelFormat.TRANSLUCENT);
        lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
        lp.gravity = Gravity.TOP;
        lp.setTitle("Heads Up");
        lp.packageName = mContext.getPackageName();
        lp.windowAnimations = R.style.Animation_StatusBar_HeadsUp;
        mWindowManager.addView(mHeadsUpNotificationView, lp);
        mHeadsUpViewAttached = true;
    }
}
#end_block

#method_before
private void removeHeadsUpView() {
    mWindowManager.removeView(mHeadsUpNotificationView);
}
#method_after
private void removeHeadsUpView() {
    if (mHeadsUpViewAttached) {
        mWindowManager.removeView(mHeadsUpNotificationView);
        mHeadsUpViewAttached = false;
    }
}
#end_block

#method_before
@Override
public void addNotification(StatusBarNotification notification, RankingMap ranking) {
    if (DEBUG)
        Log.d(TAG, "addNotification key=" + notification.getKey());
    if (mUseHeadsUp && shouldInterrupt(notification)) {
        if (DEBUG)
            Log.d(TAG, "launching notification in heads up mode");
        Entry interruptionCandidate = new Entry(notification, null);
        ViewGroup holder = mHeadsUpNotificationView.getHolder();
        if (inflateViewsForHeadsUp(interruptionCandidate, holder)) {
            // 1. Populate mHeadsUpNotificationView
            mHeadsUpNotificationView.showNotification(interruptionCandidate);
            // do not show the notification in the shade, yet.
            return;
        }
    }
    Entry shadeEntry = createNotificationViews(notification);
    if (shadeEntry == null) {
        return;
    }
    if (notification.getNotification().fullScreenIntent != null) {
        // Stop screensaver if the notification has a full-screen intent.
        // (like an incoming phone call)
        awakenDreams();
        // not immersive & a full-screen alert should be shown
        if (DEBUG)
            Log.d(TAG, "Notification has fullScreenIntent; sending fullScreenIntent");
        try {
            notification.getNotification().fullScreenIntent.send();
        } catch (PendingIntent.CanceledException e) {
        }
    } else {
        // show the ticker if there isn't already a heads up
        if (mHeadsUpNotificationView.getEntry() == null) {
            tick(notification, true);
        }
    }
    addNotificationViews(shadeEntry, ranking);
    // Recalculate the position of the sliding windows and the titles.
    setAreThereNotifications();
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
}
#method_after
@Override
public void addNotification(StatusBarNotification notification, RankingMap ranking) {
    if (DEBUG)
        Log.d(TAG, "addNotification key=" + notification.getKey());
    if (!mDisableNotificationAlerts && shouldInterrupt(notification)) {
        if (DEBUG)
            Log.d(TAG, "launching notification in heads up mode");
        Entry interruptionCandidate = new Entry(notification, null);
        ViewGroup holder = mHeadsUpNotificationView.getHolder();
        if (inflateViewsForHeadsUp(interruptionCandidate, holder)) {
            // 1. Populate mHeadsUpNotificationView
            mHeadsUpNotificationView.showNotification(interruptionCandidate);
            // do not show the notification in the shade, yet.
            return;
        }
    }
    Entry shadeEntry = createNotificationViews(notification);
    if (shadeEntry == null) {
        return;
    }
    if (notification.getNotification().fullScreenIntent != null) {
        // Stop screensaver if the notification has a full-screen intent.
        // (like an incoming phone call)
        awakenDreams();
        // not immersive & a full-screen alert should be shown
        if (DEBUG)
            Log.d(TAG, "Notification has fullScreenIntent; sending fullScreenIntent");
        try {
            notification.getNotification().fullScreenIntent.send();
        } catch (PendingIntent.CanceledException e) {
        }
    } else {
        // show the ticker if there isn't already a heads up
        if (mHeadsUpNotificationView.getEntry() == null) {
            tick(notification, true);
        }
    }
    addNotificationViews(shadeEntry, ranking);
    // Recalculate the position of the sliding windows and the titles.
    setAreThereNotifications();
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
}
#end_block

#method_before
@Override
public void resetHeadsUpDecayTimer() {
    mHandler.removeMessages(MSG_DECAY_HEADS_UP);
    if (mUseHeadsUp && mHeadsUpNotificationDecay > 0 && mHeadsUpNotificationView.isClearable()) {
        mHandler.sendEmptyMessageDelayed(MSG_DECAY_HEADS_UP, mHeadsUpNotificationDecay);
    }
}
#method_after
@Override
public void resetHeadsUpDecayTimer() {
    mHandler.removeMessages(MSG_DECAY_HEADS_UP);
    if (!mDisableNotificationAlerts && mHeadsUpNotificationDecay > 0 && mHeadsUpNotificationView.isClearable()) {
        mHandler.sendEmptyMessageDelayed(MSG_DECAY_HEADS_UP, mHeadsUpNotificationDecay);
    }
}
#end_block

#method_before
@Override
public void scheduleHeadsUpClose() {
    mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
}
#method_after
// CommandQueue
@Override
public void scheduleHeadsUpClose() {
    mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
}
#end_block

#method_before
@Override
public void removeNotification(String key, RankingMap ranking) {
    if (ENABLE_HEADS_UP && mHeadsUpNotificationView.getEntry() != null && key.equals(mHeadsUpNotificationView.getEntry().notification.getKey())) {
        mHeadsUpNotificationView.clear();
    }
    StatusBarNotification old = removeNotificationViews(key, ranking);
    if (SPEW)
        Log.d(TAG, "removeNotification key=" + key + " old=" + old);
    if (old != null) {
        // Cancel the ticker if it's still running
        if (mTickerEnabled) {
            mTicker.removeEntry(old);
        }
        // Recalculate the position of the sliding windows and the titles.
        updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
        if (CLOSE_PANEL_WHEN_EMPTIED && !hasActiveNotifications() && !mNotificationPanel.isTracking() && !mNotificationPanel.isQsExpanded()) {
            if (mState == StatusBarState.SHADE) {
                animateCollapsePanels();
            } else if (mState == StatusBarState.SHADE_LOCKED) {
                goToKeyguard();
            }
        }
    }
    setAreThereNotifications();
}
#method_after
@Override
public void removeNotification(String key, RankingMap ranking) {
    if (mHeadsUpNotificationView.getEntry() != null && key.equals(mHeadsUpNotificationView.getEntry().notification.getKey())) {
        mHeadsUpNotificationView.clear();
    }
    StatusBarNotification old = removeNotificationViews(key, ranking);
    if (SPEW)
        Log.d(TAG, "removeNotification key=" + key + " old=" + old);
    if (old != null) {
        // Cancel the ticker if it's still running
        if (mTickerEnabled) {
            mTicker.removeEntry(old);
        }
        // Recalculate the position of the sliding windows and the titles.
        updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
        if (CLOSE_PANEL_WHEN_EMPTIED && !hasActiveNotifications() && !mNotificationPanel.isTracking() && !mNotificationPanel.isQsExpanded()) {
            if (mState == StatusBarState.SHADE) {
                animateCollapsePanels();
            } else if (mState == StatusBarState.SHADE_LOCKED) {
                goToKeyguard();
            }
        }
    }
    setAreThereNotifications();
}
#end_block

#method_before
public void disable(int state, boolean animate) {
    mDisabledUnmodified = state;
    state = adjustDisableFlags(state);
    final int old = mDisabled;
    final int diff = state ^ old;
    mDisabled = state;
    if (DEBUG) {
        Log.d(TAG, String.format("disable: 0x%08x -> 0x%08x (diff: 0x%08x)", old, state, diff));
    }
    StringBuilder flagdbg = new StringBuilder();
    flagdbg.append("disable: < ");
    flagdbg.append(((state & StatusBarManager.DISABLE_EXPAND) != 0) ? "EXPAND" : "expand");
    flagdbg.append(((diff & StatusBarManager.DISABLE_EXPAND) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "ICONS" : "icons");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "ALERTS" : "alerts");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "SYSTEM_INFO" : "system_info");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_BACK) != 0) ? "BACK" : "back");
    flagdbg.append(((diff & StatusBarManager.DISABLE_BACK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_HOME) != 0) ? "HOME" : "home");
    flagdbg.append(((diff & StatusBarManager.DISABLE_HOME) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_RECENT) != 0) ? "RECENT" : "recent");
    flagdbg.append(((diff & StatusBarManager.DISABLE_RECENT) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_CLOCK) != 0) ? "CLOCK" : "clock");
    flagdbg.append(((diff & StatusBarManager.DISABLE_CLOCK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SEARCH) != 0) ? "SEARCH" : "search");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SEARCH) != 0) ? "* " : " ");
    flagdbg.append(">");
    Log.d(TAG, flagdbg.toString());
    if ((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
        mSystemIconArea.animate().cancel();
        mCenterClockLayout.animate().cancel();
        if ((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
            animateStatusBarHide(mSystemIconArea, animate);
            if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
                animateStatusBarHide(mCenterClockLayout, animate);
            }
        } else {
            animateStatusBarShow(mSystemIconArea, animate);
            if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
                animateStatusBarShow(mCenterClockLayout, animate);
            }
        }
    }
    if ((diff & StatusBarManager.DISABLE_CLOCK) != 0) {
        boolean show = (state & StatusBarManager.DISABLE_CLOCK) == 0;
        showClock(show);
    }
    if ((diff & StatusBarManager.DISABLE_EXPAND) != 0) {
        if ((state & StatusBarManager.DISABLE_EXPAND) != 0) {
            animateCollapsePanels();
        }
    }
    if ((diff & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK | StatusBarManager.DISABLE_SEARCH)) != 0) {
        // All navigation bar listeners will take care of these
        propagateDisabledFlags(state);
        if ((state & StatusBarManager.DISABLE_RECENT) != 0) {
            // close recents if it's visible
            mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
            mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
        if ((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
            if (mTicking) {
                haltTicker();
            }
            animateStatusBarHide(mNotificationIconArea, animate);
        } else {
            animateStatusBarShow(mNotificationIconArea, animate);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
        mDisableNotificationAlerts = (state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
        mHeadsUpObserver.onChange(true);
    }
}
#method_after
public void disable(int state, boolean animate) {
    mDisabledUnmodified = state;
    state = adjustDisableFlags(state);
    final int old = mDisabled;
    final int diff = state ^ old;
    mDisabled = state;
    if (DEBUG) {
        Log.d(TAG, String.format("disable: 0x%08x -> 0x%08x (diff: 0x%08x)", old, state, diff));
    }
    StringBuilder flagdbg = new StringBuilder();
    flagdbg.append("disable: < ");
    flagdbg.append(((state & StatusBarManager.DISABLE_EXPAND) != 0) ? "EXPAND" : "expand");
    flagdbg.append(((diff & StatusBarManager.DISABLE_EXPAND) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "ICONS" : "icons");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "ALERTS" : "alerts");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "SYSTEM_INFO" : "system_info");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_BACK) != 0) ? "BACK" : "back");
    flagdbg.append(((diff & StatusBarManager.DISABLE_BACK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_HOME) != 0) ? "HOME" : "home");
    flagdbg.append(((diff & StatusBarManager.DISABLE_HOME) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_RECENT) != 0) ? "RECENT" : "recent");
    flagdbg.append(((diff & StatusBarManager.DISABLE_RECENT) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_CLOCK) != 0) ? "CLOCK" : "clock");
    flagdbg.append(((diff & StatusBarManager.DISABLE_CLOCK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SEARCH) != 0) ? "SEARCH" : "search");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SEARCH) != 0) ? "* " : " ");
    flagdbg.append(">");
    Log.d(TAG, flagdbg.toString());
    if ((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
        mSystemIconArea.animate().cancel();
        mCenterClockLayout.animate().cancel();
        if ((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
            animateStatusBarHide(mSystemIconArea, animate);
            if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
                animateStatusBarHide(mCenterClockLayout, animate);
            }
        } else {
            animateStatusBarShow(mSystemIconArea, animate);
            if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
                animateStatusBarShow(mCenterClockLayout, animate);
            }
        }
    }
    if ((diff & StatusBarManager.DISABLE_CLOCK) != 0) {
        boolean show = (state & StatusBarManager.DISABLE_CLOCK) == 0;
        showClock(show);
    }
    if ((diff & StatusBarManager.DISABLE_EXPAND) != 0) {
        if ((state & StatusBarManager.DISABLE_EXPAND) != 0) {
            animateCollapsePanels();
        }
    }
    if ((diff & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK | StatusBarManager.DISABLE_SEARCH)) != 0) {
        // All navigation bar listeners will take care of these
        propagateDisabledFlags(state);
        if ((state & StatusBarManager.DISABLE_RECENT) != 0) {
            // close recents if it's visible
            mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
            mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
        if ((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
            if (mTicking) {
                haltTicker();
            }
            animateStatusBarHide(mNotificationIconArea, animate);
        } else {
            animateStatusBarShow(mNotificationIconArea, animate);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
        boolean wasDisabled = mDisableNotificationAlerts;
        mDisableNotificationAlerts = (state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
        if (wasDisabled != mDisableNotificationAlerts) {
            if (mDisableNotificationAlerts) {
                if (DEBUG)
                    Log.d(TAG, "dismissing any existing heads" + "up notification on disable event");
                setHeadsUpVisibility(false);
                mHeadsUpNotificationView.release();
                removeHeadsUpView();
            } else {
                addHeadsUpView();
            }
        }
    }
}
#end_block

#method_before
@Override
public void handleMessage(Message msg) {
    switch(msg.what) {
        case MSG_START_DOZING:
            handleStartDozing((Runnable) msg.obj);
            break;
        case MSG_PULSE_WHILE_DOZING:
            handlePulseWhileDozing((PulseCallback) msg.obj, msg.arg1);
            break;
        case MSG_STOP_DOZING:
            handleStopDozing();
            break;
    }
}
#method_after
public void handleMessage(Message m) {
    super.handleMessage(m);
    switch(m.what) {
        case MSG_OPEN_NOTIFICATION_PANEL:
            animateExpandNotificationsPanel();
            break;
        case MSG_OPEN_SETTINGS_PANEL:
            animateExpandSettingsPanel();
            break;
        case MSG_CLOSE_PANELS:
            animateCollapsePanels();
            break;
        case MSG_SHOW_HEADS_UP:
            setHeadsUpVisibility(true);
            break;
        case MSG_DECAY_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_HIDE_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_ESCALATE_HEADS_UP:
            escalateHeadsUp();
            setHeadsUpVisibility(false);
            break;
        case MSG_LAUNCH_TRANSITION_TIMEOUT:
            onLaunchTransitionTimeout();
            break;
        case MSG_UPDATE_NOTIFICATIONS:
            handleUpdateNotifications();
            break;
    }
}
#end_block

#method_before
public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
    synchronized (mQueueLock) {
        pw.println("Current Status Bar state:");
        pw.println("  mExpandedVisible=" + mExpandedVisible + ", mTrackingPosition=" + mTrackingPosition);
        pw.println("  mTickerEnabled=" + mTickerEnabled);
        if (mTickerEnabled) {
            pw.println("  mTicking=" + mTicking);
            pw.println("  mTickerView: " + viewInfo(mTickerView));
        }
        pw.println("  mTracking=" + mTracking);
        pw.println("  mDisplayMetrics=" + mDisplayMetrics);
        pw.println("  mStackScroller: " + viewInfo(mStackScroller));
        pw.println("  mStackScroller: " + viewInfo(mStackScroller) + " scroll " + mStackScroller.getScrollX() + "," + mStackScroller.getScrollY());
    }
    pw.print("  mInteractingWindows=");
    pw.println(mInteractingWindows);
    pw.print("  mStatusBarWindowState=");
    pw.println(windowStateToString(mStatusBarWindowState));
    pw.print("  mStatusBarMode=");
    pw.println(BarTransitions.modeToString(mStatusBarMode));
    pw.print("  mDozing=");
    pw.println(mDozing);
    pw.print("  mZenMode=");
    pw.println(Settings.Global.zenModeToString(mZenMode));
    pw.print("  mUseHeadsUp=");
    pw.println(mUseHeadsUp);
    pw.print("  interrupting package: ");
    pw.println(hunStateToString(mHeadsUpNotificationView.getEntry()));
    dumpBarTransitions(pw, "mStatusBarView", mStatusBarView.getBarTransitions());
    if (mNavigationBarView != null) {
        pw.print("  mNavigationBarWindowState=");
        pw.println(windowStateToString(mNavigationBarWindowState));
        pw.print("  mNavigationBarMode=");
        pw.println(BarTransitions.modeToString(mNavigationBarMode));
        dumpBarTransitions(pw, "mNavigationBarView", mNavigationBarView.getBarTransitions());
    }
    pw.print("  mNavigationBarView=");
    if (mNavigationBarView == null) {
        pw.println("null");
    } else {
        mNavigationBarView.dump(fd, pw, args);
    }
    pw.print("  mMediaSessionManager=");
    pw.println(mMediaSessionManager);
    pw.print("  mMediaNotificationKey=");
    pw.println(mMediaNotificationKey);
    pw.print("  mMediaController=");
    pw.print(mMediaController);
    if (mMediaController != null) {
        pw.print(" state=" + mMediaController.getPlaybackState());
    }
    pw.println();
    pw.print("  mMediaMetadata=");
    pw.print(mMediaMetadata);
    if (mMediaMetadata != null) {
        pw.print(" title=" + mMediaMetadata.getText(MediaMetadata.METADATA_KEY_TITLE));
    }
    pw.println();
    pw.println("  Panels: ");
    if (mNotificationPanel != null) {
        pw.println("    mNotificationPanel=" + mNotificationPanel + " params=" + mNotificationPanel.getLayoutParams().debug(""));
        pw.print("      ");
        mNotificationPanel.dump(fd, pw, args);
    }
    DozeLog.dump(pw);
    if (DUMPTRUCK) {
        synchronized (mNotificationData) {
            mNotificationData.dump(pw, "  ");
        }
        int N = mStatusIcons.getChildCount();
        pw.println("  system icons: " + N);
        for (int i = 0; i < N; i++) {
            StatusBarIconView ic = (StatusBarIconView) mStatusIcons.getChildAt(i);
            pw.println("    [" + i + "] icon=" + ic);
        }
        if (false) {
            pw.println("see the logcat for a dump of the views we have created.");
            // must happen on ui thread
            mHandler.post(new Runnable() {

                public void run() {
                    mStatusBarView.getLocationOnScreen(mAbsPos);
                    Log.d(TAG, "mStatusBarView: ----- (" + mAbsPos[0] + "," + mAbsPos[1] + ") " + mStatusBarView.getWidth() + "x" + getStatusBarHeight());
                    mStatusBarView.debug();
                }
            });
        }
    }
    if (DEBUG_GESTURES) {
        pw.print("  status bar gestures: ");
        mGestureRec.dump(fd, pw, args);
    }
    if (isMSim()) {
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            if (mMSimNetworkController != null) {
                mMSimNetworkController.dump(fd, pw, args, i);
            }
        }
    } else {
        if (mNetworkController != null) {
            mNetworkController.dump(fd, pw, args);
        }
    }
    if (mBluetoothController != null) {
        mBluetoothController.dump(fd, pw, args);
    }
    if (mCastController != null) {
        mCastController.dump(fd, pw, args);
    }
    if (mUserSwitcherController != null) {
        mUserSwitcherController.dump(fd, pw, args);
    }
    if (mBatteryController != null) {
        mBatteryController.dump(fd, pw, args);
    }
    if (mNextAlarmController != null) {
        mNextAlarmController.dump(fd, pw, args);
    }
    if (mSecurityController != null) {
        mSecurityController.dump(fd, pw, args);
    }
}
#method_after
public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
    synchronized (mQueueLock) {
        pw.println("Current Status Bar state:");
        pw.println("  mExpandedVisible=" + mExpandedVisible + ", mTrackingPosition=" + mTrackingPosition);
        pw.println("  mTickerEnabled=" + mTickerEnabled);
        if (mTickerEnabled) {
            pw.println("  mTicking=" + mTicking);
            pw.println("  mTickerView: " + viewInfo(mTickerView));
        }
        pw.println("  mTracking=" + mTracking);
        pw.println("  mDisplayMetrics=" + mDisplayMetrics);
        pw.println("  mStackScroller: " + viewInfo(mStackScroller));
        pw.println("  mStackScroller: " + viewInfo(mStackScroller) + " scroll " + mStackScroller.getScrollX() + "," + mStackScroller.getScrollY());
    }
    pw.print("  mInteractingWindows=");
    pw.println(mInteractingWindows);
    pw.print("  mStatusBarWindowState=");
    pw.println(windowStateToString(mStatusBarWindowState));
    pw.print("  mStatusBarMode=");
    pw.println(BarTransitions.modeToString(mStatusBarMode));
    pw.print("  mDozing=");
    pw.println(mDozing);
    pw.print("  mZenMode=");
    pw.println(Settings.Global.zenModeToString(mZenMode));
    pw.print("  interrupting package: ");
    pw.println(hunStateToString(mHeadsUpNotificationView.getEntry()));
    dumpBarTransitions(pw, "mStatusBarView", mStatusBarView.getBarTransitions());
    if (mNavigationBarView != null) {
        pw.print("  mNavigationBarWindowState=");
        pw.println(windowStateToString(mNavigationBarWindowState));
        pw.print("  mNavigationBarMode=");
        pw.println(BarTransitions.modeToString(mNavigationBarMode));
        dumpBarTransitions(pw, "mNavigationBarView", mNavigationBarView.getBarTransitions());
    }
    pw.print("  mNavigationBarView=");
    if (mNavigationBarView == null) {
        pw.println("null");
    } else {
        mNavigationBarView.dump(fd, pw, args);
    }
    pw.print("  mMediaSessionManager=");
    pw.println(mMediaSessionManager);
    pw.print("  mMediaNotificationKey=");
    pw.println(mMediaNotificationKey);
    pw.print("  mMediaController=");
    pw.print(mMediaController);
    if (mMediaController != null) {
        pw.print(" state=" + mMediaController.getPlaybackState());
    }
    pw.println();
    pw.print("  mMediaMetadata=");
    pw.print(mMediaMetadata);
    if (mMediaMetadata != null) {
        pw.print(" title=" + mMediaMetadata.getText(MediaMetadata.METADATA_KEY_TITLE));
    }
    pw.println();
    pw.println("  Panels: ");
    if (mNotificationPanel != null) {
        pw.println("    mNotificationPanel=" + mNotificationPanel + " params=" + mNotificationPanel.getLayoutParams().debug(""));
        pw.print("      ");
        mNotificationPanel.dump(fd, pw, args);
    }
    DozeLog.dump(pw);
    if (DUMPTRUCK) {
        synchronized (mNotificationData) {
            mNotificationData.dump(pw, "  ");
        }
        int N = mStatusIcons.getChildCount();
        pw.println("  system icons: " + N);
        for (int i = 0; i < N; i++) {
            StatusBarIconView ic = (StatusBarIconView) mStatusIcons.getChildAt(i);
            pw.println("    [" + i + "] icon=" + ic);
        }
        if (false) {
            pw.println("see the logcat for a dump of the views we have created.");
            // must happen on ui thread
            mHandler.post(new Runnable() {

                public void run() {
                    mStatusBarView.getLocationOnScreen(mAbsPos);
                    Log.d(TAG, "mStatusBarView: ----- (" + mAbsPos[0] + "," + mAbsPos[1] + ") " + mStatusBarView.getWidth() + "x" + getStatusBarHeight());
                    mStatusBarView.debug();
                }
            });
        }
    }
    if (DEBUG_GESTURES) {
        pw.print("  status bar gestures: ");
        mGestureRec.dump(fd, pw, args);
    }
    if (isMSim()) {
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            if (mMSimNetworkController != null) {
                mMSimNetworkController.dump(fd, pw, args, i);
            }
        }
    } else {
        if (mNetworkController != null) {
            mNetworkController.dump(fd, pw, args);
        }
    }
    if (mBluetoothController != null) {
        mBluetoothController.dump(fd, pw, args);
    }
    if (mCastController != null) {
        mCastController.dump(fd, pw, args);
    }
    if (mUserSwitcherController != null) {
        mUserSwitcherController.dump(fd, pw, args);
    }
    if (mBatteryController != null) {
        mBatteryController.dump(fd, pw, args);
    }
    if (mNextAlarmController != null) {
        mNextAlarmController.dump(fd, pw, args);
    }
    if (mSecurityController != null) {
        mSecurityController.dump(fd, pw, args);
    }
}
#end_block

#method_before
private void setHeadsUpVisibility(boolean vis) {
    if (!ENABLE_HEADS_UP)
        return;
    if (DEBUG)
        Log.v(TAG, (vis ? "showing" : "hiding") + " heads up window");
    EventLog.writeEvent(EventLogTags.SYSUI_HEADS_UP_STATUS, vis ? mHeadsUpNotificationView.getKey() : "", vis ? 1 : 0);
    mHeadsUpNotificationView.setVisibility(vis ? View.VISIBLE : View.GONE);
}
#method_after
private void setHeadsUpVisibility(boolean vis) {
    if (DEBUG)
        Log.v(TAG, (vis ? "showing" : "hiding") + " heads up window");
    EventLog.writeEvent(EventLogTags.SYSUI_HEADS_UP_STATUS, vis ? mHeadsUpNotificationView.getKey() : "", vis ? 1 : 0);
    mHeadsUpNotificationView.setVisibility(vis ? View.VISIBLE : View.GONE);
    if (!vis) {
        mHeadsUpPackageName = null;
    }
}
#end_block

#method_before
public void onHeadsUpDismissed() {
    mHeadsUpNotificationView.dismiss();
}
#method_after
public void onHeadsUpDismissed(boolean direction) {
    // completely if the notification is clearable.
    if (direction) {
        scheduleHeadsUpClose();
    } else {
        mHeadsUpNotificationView.dismiss();
    }
}
#end_block

#method_before
protected void loadDimens() {
    final Resources res = mContext.getResources();
    mNaturalBarHeight = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
    int newIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    int newIconHPadding = res.getDimensionPixelSize(R.dimen.status_bar_icon_padding);
    if (newIconHPadding != mIconHPadding || newIconSize != mIconSize) {
        // Log.d(TAG, "size=" + newIconSize + " padding=" + newIconHPadding);
        mIconHPadding = newIconHPadding;
        mIconSize = newIconSize;
    // reloadAllNotificationIcons(); // reload the tray
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    mNotificationPanelGravity = res.getInteger(R.integer.notification_panel_layout_gravity);
    if (mNotificationPanelGravity <= 0) {
        mNotificationPanelGravity = Gravity.START | Gravity.TOP;
    }
    mCarrierLabelHeight = res.getDimensionPixelSize(R.dimen.carrier_label_height);
    mStatusBarHeaderHeight = res.getDimensionPixelSize(R.dimen.status_bar_header_height);
    mNotificationPanelMinHeightFrac = res.getFraction(R.dimen.notification_panel_min_height_frac, 1, 1);
    if (mNotificationPanelMinHeightFrac < 0f || mNotificationPanelMinHeightFrac > 1f) {
        mNotificationPanelMinHeightFrac = 0f;
    }
    mHeadsUpNotificationDecay = res.getInteger(R.integer.heads_up_notification_decay);
    mRowMinHeight = res.getDimensionPixelSize(R.dimen.notification_min_height);
    mRowMaxHeight = res.getDimensionPixelSize(R.dimen.notification_max_height);
    mKeyguardMaxNotificationCount = res.getInteger(R.integer.keyguard_max_notification_count);
    if (DEBUG)
        Log.v(TAG, "updateResources");
}
#method_after
protected void loadDimens() {
    final Resources res = mContext.getResources();
    mNaturalBarHeight = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
    int newIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    int newIconHPadding = res.getDimensionPixelSize(R.dimen.status_bar_icon_padding);
    if (newIconHPadding != mIconHPadding || newIconSize != mIconSize) {
        // Log.d(TAG, "size=" + newIconSize + " padding=" + newIconHPadding);
        mIconHPadding = newIconHPadding;
        mIconSize = newIconSize;
    // reloadAllNotificationIcons(); // reload the tray
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    mNotificationPanelGravity = res.getInteger(R.integer.notification_panel_layout_gravity);
    if (mNotificationPanelGravity <= 0) {
        mNotificationPanelGravity = Gravity.START | Gravity.TOP;
    }
    mCarrierLabelHeight = res.getDimensionPixelSize(R.dimen.carrier_label_height);
    mStatusBarHeaderHeight = res.getDimensionPixelSize(R.dimen.status_bar_header_height);
    mNotificationPanelMinHeightFrac = res.getFraction(R.dimen.notification_panel_min_height_frac, 1, 1);
    if (mNotificationPanelMinHeightFrac < 0f || mNotificationPanelMinHeightFrac > 1f) {
        mNotificationPanelMinHeightFrac = 0f;
    }
    mRowMinHeight = res.getDimensionPixelSize(R.dimen.notification_min_height);
    mRowMaxHeight = res.getDimensionPixelSize(R.dimen.notification_max_height);
    mKeyguardMaxNotificationCount = res.getInteger(R.integer.keyguard_max_notification_count);
    if (DEBUG)
        Log.v(TAG, "updateResources");
}
#end_block

#method_before
public void handleMessage(Message msg) {
    final int what = msg.what & MSG_MASK;
    switch(what) {
        case MSG_ICON:
            {
                final int index = msg.what & INDEX_MASK;
                final int viewIndex = mList.getViewIndex(index);
                switch(msg.arg1) {
                    case OP_SET_ICON:
                        {
                            StatusBarIcon icon = (StatusBarIcon) msg.obj;
                            StatusBarIcon old = mList.getIcon(index);
                            if (old == null) {
                                mList.setIcon(index, icon);
                                mCallbacks.addIcon(mList.getSlot(index), index, viewIndex, icon);
                            } else {
                                mList.setIcon(index, icon);
                                mCallbacks.updateIcon(mList.getSlot(index), index, viewIndex, old, icon);
                            }
                            break;
                        }
                    case OP_REMOVE_ICON:
                        if (mList.getIcon(index) != null) {
                            mList.removeIcon(index);
                            mCallbacks.removeIcon(mList.getSlot(index), index, viewIndex);
                        }
                        break;
                }
                break;
            }
        case MSG_DISABLE:
            mCallbacks.disable(msg.arg1, true);
            break;
        case MSG_EXPAND_NOTIFICATIONS:
            mCallbacks.animateExpandNotificationsPanel();
            break;
        case MSG_COLLAPSE_PANELS:
            mCallbacks.animateCollapsePanels(0);
            break;
        case MSG_EXPAND_SETTINGS:
            mCallbacks.animateExpandSettingsPanel();
            break;
        case MSG_SET_SYSTEMUI_VISIBILITY:
            mCallbacks.setSystemUiVisibility(msg.arg1, msg.arg2);
            break;
        case MSG_TOP_APP_WINDOW_CHANGED:
            mCallbacks.topAppWindowChanged(msg.arg1 != 0);
            break;
        case MSG_SHOW_IME_BUTTON:
            mCallbacks.setImeWindowStatus((IBinder) msg.obj, msg.arg1, msg.arg2, msg.getData().getBoolean(SHOW_IME_SWITCHER_KEY, false));
            break;
        case MSG_SHOW_RECENT_APPS:
            mCallbacks.showRecentApps(msg.arg1 != 0);
            break;
        case MSG_HIDE_RECENT_APPS:
            mCallbacks.hideRecentApps(msg.arg1 != 0, msg.arg2 != 0);
            break;
        case MSG_TOGGLE_RECENT_APPS:
            mCallbacks.toggleRecentApps();
            break;
        case MSG_PRELOAD_RECENT_APPS:
            mCallbacks.preloadRecentApps();
            break;
        case MSG_CANCEL_PRELOAD_RECENT_APPS:
            mCallbacks.cancelPreloadRecentApps();
            break;
        case MSG_SET_WINDOW_STATE:
            mCallbacks.setWindowState(msg.arg1, msg.arg2);
            break;
        case MSG_BUZZ_BEEP_BLINKED:
            mCallbacks.buzzBeepBlinked();
            break;
        case MSG_NOTIFICATION_LIGHT_OFF:
            mCallbacks.notificationLightOff();
            break;
        case MSG_NOTIFICATION_LIGHT_PULSE:
            mCallbacks.notificationLightPulse((Integer) msg.obj, msg.arg1, msg.arg2);
            break;
        case MSG_SHOW_SCREEN_PIN_REQUEST:
            mCallbacks.showScreenPinningRequest();
            break;
        case MSG_SET_AUTOROTATE_STATUS:
            mCallbacks.setAutoRotate(msg.arg1 != 0);
            break;
        case MSG_START_CUSTOM_INTENT_AFTER_KEYGUARD:
            mCallbacks.showCustomIntentAfterKeyguard((Intent) msg.obj);
            break;
        case MSG_TOGGLE_LAST_APP:
            mCallbacks.toggleLastApp();
            break;
        case MSG_TOGGLE_KILL_APP:
            mCallbacks.toggleKillApp();
            break;
        case MSG_TOGGLE_SCREENSHOT:
            mCallbacks.toggleScreenshot();
            break;
        case MSG_SET_PIE_TRIGGER_MASK:
            mCallbacks.setPieTriggerMask(msg.arg1, msg.arg2 != 0);
            break;
    }
}
#method_after
public void handleMessage(Message msg) {
    final int what = msg.what & MSG_MASK;
    switch(what) {
        case MSG_ICON:
            {
                final int index = msg.what & INDEX_MASK;
                final int viewIndex = mList.getViewIndex(index);
                switch(msg.arg1) {
                    case OP_SET_ICON:
                        {
                            StatusBarIcon icon = (StatusBarIcon) msg.obj;
                            StatusBarIcon old = mList.getIcon(index);
                            if (old == null) {
                                mList.setIcon(index, icon);
                                mCallbacks.addIcon(mList.getSlot(index), index, viewIndex, icon);
                            } else {
                                mList.setIcon(index, icon);
                                mCallbacks.updateIcon(mList.getSlot(index), index, viewIndex, old, icon);
                            }
                            break;
                        }
                    case OP_REMOVE_ICON:
                        if (mList.getIcon(index) != null) {
                            mList.removeIcon(index);
                            mCallbacks.removeIcon(mList.getSlot(index), index, viewIndex);
                        }
                        break;
                }
                break;
            }
        case MSG_DISABLE:
            mCallbacks.disable(msg.arg1, true);
            break;
        case MSG_EXPAND_NOTIFICATIONS:
            mCallbacks.animateExpandNotificationsPanel();
            break;
        case MSG_COLLAPSE_PANELS:
            mCallbacks.animateCollapsePanels(0);
            break;
        case MSG_EXPAND_SETTINGS:
            mCallbacks.animateExpandSettingsPanel();
            break;
        case MSG_SET_SYSTEMUI_VISIBILITY:
            mCallbacks.setSystemUiVisibility(msg.arg1, msg.arg2);
            break;
        case MSG_TOP_APP_WINDOW_CHANGED:
            mCallbacks.topAppWindowChanged(msg.arg1 != 0);
            break;
        case MSG_SHOW_IME_BUTTON:
            mCallbacks.setImeWindowStatus((IBinder) msg.obj, msg.arg1, msg.arg2, msg.getData().getBoolean(SHOW_IME_SWITCHER_KEY, false));
            break;
        case MSG_SHOW_RECENT_APPS:
            mCallbacks.showRecentApps(msg.arg1 != 0);
            break;
        case MSG_HIDE_RECENT_APPS:
            mCallbacks.hideRecentApps(msg.arg1 != 0, msg.arg2 != 0);
            break;
        case MSG_TOGGLE_RECENT_APPS:
            mCallbacks.toggleRecentApps();
            break;
        case MSG_PRELOAD_RECENT_APPS:
            mCallbacks.preloadRecentApps();
            break;
        case MSG_CANCEL_PRELOAD_RECENT_APPS:
            mCallbacks.cancelPreloadRecentApps();
            break;
        case MSG_SET_WINDOW_STATE:
            mCallbacks.setWindowState(msg.arg1, msg.arg2);
            break;
        case MSG_BUZZ_BEEP_BLINKED:
            mCallbacks.buzzBeepBlinked();
            break;
        case MSG_NOTIFICATION_LIGHT_OFF:
            mCallbacks.notificationLightOff();
            break;
        case MSG_NOTIFICATION_LIGHT_PULSE:
            mCallbacks.notificationLightPulse((Integer) msg.obj, msg.arg1, msg.arg2);
            break;
        case MSG_SHOW_SCREEN_PIN_REQUEST:
            mCallbacks.showScreenPinningRequest();
            break;
        case MSG_SET_AUTOROTATE_STATUS:
            mCallbacks.setAutoRotate(msg.arg1 != 0);
            break;
        case MSG_START_CUSTOM_INTENT_AFTER_KEYGUARD:
            mCallbacks.showCustomIntentAfterKeyguard((Intent) msg.obj);
            break;
        case MSG_TOGGLE_LAST_APP:
            mCallbacks.toggleLastApp();
            break;
        case MSG_TOGGLE_KILL_APP:
            mCallbacks.toggleKillApp();
            break;
        case MSG_TOGGLE_SCREENSHOT:
            mCallbacks.toggleScreenshot();
            break;
        case MSG_HIDE_HEADS_UP_CANDIDATE:
            mCallbacks.hideHeadsUpCandidate((String) msg.obj);
            break;
        case MSG_HIDE_HEADS_UP:
            mCallbacks.scheduleHeadsUpClose();
            break;
        case MSG_SET_PIE_TRIGGER_MASK:
            mCallbacks.setPieTriggerMask(msg.arg1, msg.arg2 != 0);
            break;
    }
}
#end_block

#method_before
@Override
public void scheduleHeadsUpClose() {
}
#method_after
// CommandQueue
@Override
public void scheduleHeadsUpClose() {
}
#end_block

#method_before
private void inflateGuts(ExpandableNotificationRow row) {
    ViewStub stub = (ViewStub) row.findViewById(R.id.notification_guts_stub);
    if (stub != null) {
        stub.inflate();
    }
    final StatusBarNotification sbn = row.getStatusBarNotification();
    PackageManager pmUser = getPackageManagerForUser(sbn.getUser().getIdentifier());
    row.setTag(sbn.getPackageName());
    final View guts = row.findViewById(R.id.notification_guts);
    final String pkg = sbn.getPackageName();
    String appname = pkg;
    Drawable pkgicon = null;
    int appUid = -1;
    try {
        final ApplicationInfo info = pmUser.getApplicationInfo(pkg, PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        if (info != null) {
            appname = String.valueOf(pmUser.getApplicationLabel(info));
            pkgicon = pmUser.getApplicationIcon(info);
            appUid = info.uid;
        }
    } catch (NameNotFoundException e) {
        // app is gone, just show package name and generic icon
        pkgicon = pmUser.getDefaultActivityIcon();
    }
    ((ImageView) row.findViewById(android.R.id.icon)).setImageDrawable(pkgicon);
    ((DateTimeView) row.findViewById(R.id.timestamp)).setTime(sbn.getPostTime());
    ((TextView) row.findViewById(R.id.pkgname)).setText(appname);
    final View settingsButton = guts.findViewById(R.id.notification_inspect_item);
    final View appSettingsButton = guts.findViewById(R.id.notification_inspect_app_provided_settings);
    if (appUid >= 0) {
        final int appUidF = appUid;
        settingsButton.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                startAppNotificationSettingsActivity(pkg, appUidF);
            }
        });
        final Intent appSettingsQueryIntent = new Intent(Intent.ACTION_MAIN).addCategory(Notification.INTENT_CATEGORY_NOTIFICATION_PREFERENCES).setPackage(pkg);
        List<ResolveInfo> infos = pmUser.queryIntentActivities(appSettingsQueryIntent, 0);
        if (infos.size() > 0) {
            appSettingsButton.setVisibility(View.VISIBLE);
            appSettingsButton.setContentDescription(mContext.getResources().getString(R.string.status_bar_notification_app_settings_title, appname));
            final Intent appSettingsLaunchIntent = new Intent(appSettingsQueryIntent).setClassName(pkg, infos.get(0).activityInfo.name);
            appSettingsButton.setOnClickListener(new View.OnClickListener() {

                public void onClick(View v) {
                    startAppOwnNotificationSettingsActivity(appSettingsLaunchIntent, sbn.getId(), sbn.getTag(), appUidF);
                }
            });
        } else {
            appSettingsButton.setVisibility(View.GONE);
        }
    } else {
        settingsButton.setVisibility(View.GONE);
        appSettingsButton.setVisibility(View.GONE);
    }
}
#method_after
private void inflateGuts(ExpandableNotificationRow row) {
    ViewStub stub = (ViewStub) row.findViewById(R.id.notification_guts_stub);
    if (stub != null) {
        stub.inflate();
    }
    final StatusBarNotification sbn = row.getStatusBarNotification();
    PackageManager pmUser = getPackageManagerForUser(sbn.getUser().getIdentifier());
    row.setTag(sbn.getPackageName());
    final View guts = row.findViewById(R.id.notification_guts);
    final String pkg = sbn.getPackageName();
    String appname = pkg;
    Drawable pkgicon = null;
    int appUid = -1;
    try {
        final ApplicationInfo info = pmUser.getApplicationInfo(pkg, PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        if (info != null) {
            appname = String.valueOf(pmUser.getApplicationLabel(info));
            pkgicon = pmUser.getApplicationIcon(info);
            appUid = info.uid;
        }
    } catch (NameNotFoundException e) {
        // app is gone, just show package name and generic icon
        pkgicon = pmUser.getDefaultActivityIcon();
    }
    ((ImageView) row.findViewById(android.R.id.icon)).setImageDrawable(pkgicon);
    ((DateTimeView) row.findViewById(R.id.timestamp)).setTime(sbn.getPostTime());
    ((TextView) row.findViewById(R.id.pkgname)).setText(appname);
    final View settingsButton = guts.findViewById(R.id.notification_inspect_item);
    final View appSettingsButton = guts.findViewById(R.id.notification_inspect_app_provided_settings);
    final View headsUpButton = guts.findViewById(R.id.notification_inspect_heads_up);
    if (appUid >= 0) {
        final int appUidF = appUid;
        settingsButton.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v) {
                startAppNotificationSettingsActivity(pkg, appUidF);
            }
        });
        final Intent appSettingsQueryIntent = new Intent(Intent.ACTION_MAIN).addCategory(Notification.INTENT_CATEGORY_NOTIFICATION_PREFERENCES).setPackage(pkg);
        List<ResolveInfo> infos = pmUser.queryIntentActivities(appSettingsQueryIntent, 0);
        if (infos.size() > 0) {
            appSettingsButton.setVisibility(View.VISIBLE);
            appSettingsButton.setContentDescription(mContext.getResources().getString(R.string.status_bar_notification_app_settings_title, appname));
            final Intent appSettingsLaunchIntent = new Intent(appSettingsQueryIntent).setClassName(pkg, infos.get(0).activityInfo.name);
            appSettingsButton.setOnClickListener(new View.OnClickListener() {

                public void onClick(View v) {
                    startAppOwnNotificationSettingsActivity(appSettingsLaunchIntent, sbn.getId(), sbn.getTag(), appUidF);
                }
            });
        } else {
            appSettingsButton.setVisibility(View.GONE);
        }
        if (isThisASystemPackage(pkg, pmUser)) {
            headsUpButton.setVisibility(View.GONE);
        } else {
            boolean isHeadsUpEnabled = mNoMan.getHeadsUpNotificationsEnabledForPackage(pkg, appUidF) != Notification.HEADS_UP_NEVER;
            headsUpButton.setAlpha(isHeadsUpEnabled ? 1f : 0.5f);
            setHeadsUpButtonContentDescription((View) headsUpButton, isHeadsUpEnabled);
            headsUpButton.setVisibility(View.VISIBLE);
            headsUpButton.setOnClickListener(new View.OnClickListener() {

                public void onClick(View v) {
                    int headsUp = mNoMan.getHeadsUpNotificationsEnabledForPackage(pkg, appUidF);
                    if (headsUp != Notification.HEADS_UP_NEVER) {
                        headsUp = Notification.HEADS_UP_NEVER;
                        ((ImageButton) v).setAlpha(0.5f);
                    } else {
                        headsUp = Notification.HEADS_UP_ALLOWED;
                        ((ImageButton) v).setAlpha(1f);
                    }
                    setHeadsUpButtonContentDescription(v, headsUp != Notification.HEADS_UP_NEVER);
                    mNoMan.setHeadsUpNotificationsEnabledForPackage(pkg, appUidF, headsUp);
                }
            });
        }
    } else {
        settingsButton.setVisibility(View.GONE);
        appSettingsButton.setVisibility(View.GONE);
        headsUpButton.setVisibility(View.GONE);
    }
}
#end_block

#method_before
public void onHeadsUpDismissed() {
}
#method_after
public void onHeadsUpDismissed(boolean direction) {
}
#end_block

#method_before
protected boolean shouldInterrupt(StatusBarNotification sbn) {
    if (mNotificationData.shouldFilterOut(sbn)) {
        if (DEBUG) {
            Log.d(TAG, "Skipping HUN check for " + sbn.getKey() + " since it's filtered out.");
        }
        return false;
    }
    if (mHeadsUpNotificationView.isSnoozed(sbn.getPackageName())) {
        return false;
    }
    Notification notification = sbn.getNotification();
    // some predicates to make the boolean logic legible
    boolean isNoisy = (notification.defaults & Notification.DEFAULT_SOUND) != 0 || (notification.defaults & Notification.DEFAULT_VIBRATE) != 0 || notification.sound != null || notification.vibrate != null;
    boolean isHighPriority = sbn.getScore() >= INTERRUPTION_THRESHOLD;
    boolean isFullscreen = notification.fullScreenIntent != null;
    boolean hasTicker = mHeadsUpTicker && !TextUtils.isEmpty(notification.tickerText);
    boolean isAllowed = notification.extras.getInt(Notification.EXTRA_AS_HEADS_UP, Notification.HEADS_UP_ALLOWED) != Notification.HEADS_UP_NEVER;
    boolean accessibilityForcesLaunch = isFullscreen && mAccessibilityManager.isTouchExplorationEnabled();
    boolean interrupt = (isFullscreen || (isHighPriority && (isNoisy || hasTicker))) && isAllowed && !accessibilityForcesLaunch && mPowerManager.isScreenOn() && (!mStatusBarKeyguardViewManager.isShowing() || mStatusBarKeyguardViewManager.isOccluded()) && !mStatusBarKeyguardViewManager.isInputRestricted();
    try {
        interrupt = interrupt && !mDreamManager.isDreaming();
    } catch (RemoteException e) {
        Log.d(TAG, "failed to query dream manager", e);
    }
    if (DEBUG)
        Log.d(TAG, "interrupt: " + interrupt);
    return interrupt;
}
#method_after
protected boolean shouldInterrupt(StatusBarNotification sbn) {
    if (mNotificationData.shouldFilterOut(sbn)) {
        if (DEBUG) {
            Log.d(TAG, "Skipping HUN check for " + sbn.getKey() + " since it's filtered out.");
        }
        return false;
    }
    if (mHeadsUpNotificationView.isSnoozed(sbn.getPackageName())) {
        return false;
    }
    Notification notification = sbn.getNotification();
    // we are snoozing
    if (isHeadsUpInSnooze()) {
        return false;
    }
    // some predicates to make the boolean logic legible
    boolean isNoisy = (notification.defaults & Notification.DEFAULT_SOUND) != 0 || (notification.defaults & Notification.DEFAULT_VIBRATE) != 0 || notification.sound != null || notification.vibrate != null;
    boolean isHighPriority = sbn.getScore() >= INTERRUPTION_THRESHOLD;
    boolean isFullscreen = notification.fullScreenIntent != null;
    int asHeadsUp = notification.extras.getInt(Notification.EXTRA_AS_HEADS_UP, Notification.HEADS_UP_ALLOWED);
    boolean isAllowed = asHeadsUp != Notification.HEADS_UP_NEVER;
    boolean accessibilityForcesLaunch = isFullscreen && mAccessibilityManager.isTouchExplorationEnabled();
    boolean keyguardIsShowing = (mStatusBarKeyguardViewManager.isShowing() || !mStatusBarKeyguardViewManager.isOccluded()) && mStatusBarKeyguardViewManager.isInputRestricted();
    boolean interrupt = (isFullscreen || (isHighPriority && isNoisy) || asHeadsUp == Notification.HEADS_UP_REQUESTED) && isAllowed && !accessibilityForcesLaunch && mPowerManager.isScreenOn() && !keyguardIsShowing;
    if (!interrupt) {
        boolean isHeadsUpPackage = mNoMan.getHeadsUpNotificationsEnabledForPackage(sbn.getPackageName(), sbn.getUid()) != Notification.HEADS_UP_NEVER;
        boolean isExpanded = false;
        if (mStackScroller != null) {
            isExpanded = mStackScroller.getIsExpanded();
        }
        // Possibly a heads up package set from the user.
        interrupt = isHeadsUpPackage && !sbn.isOngoing() && mPowerManager.isScreenOn() && !accessibilityForcesLaunch && !isExpanded && !keyguardIsShowing;
        if (interrupt) {
            mHeadsUpPackageName = sbn.getPackageName();
        }
    }
    try {
        interrupt = interrupt && !mDreamManager.isDreaming();
    } catch (RemoteException e) {
        Log.d(TAG, "failed to query dream manager", e);
    }
    if (DEBUG)
        Log.d(TAG, "interrupt: " + interrupt);
    return interrupt;
}
#end_block

#method_before
@Override
public void handleMessage(Message msg) {
    switch(msg.what) {
        case MSG_START_DOZING:
            handleStartDozing((Runnable) msg.obj);
            break;
        case MSG_PULSE_WHILE_DOZING:
            handlePulseWhileDozing((PulseCallback) msg.obj, msg.arg1);
            break;
        case MSG_STOP_DOZING:
            handleStopDozing();
            break;
    }
}
#method_after
public void handleMessage(Message m) {
    super.handleMessage(m);
    switch(m.what) {
        case MSG_OPEN_NOTIFICATION_PANEL:
            animateExpandNotificationsPanel();
            break;
        case MSG_OPEN_SETTINGS_PANEL:
            animateExpandSettingsPanel();
            break;
        case MSG_CLOSE_PANELS:
            animateCollapsePanels();
            break;
        case MSG_SHOW_HEADS_UP:
            setHeadsUpVisibility(true);
            break;
        case MSG_DECAY_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_HIDE_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_ESCALATE_HEADS_UP:
            escalateHeadsUp();
            setHeadsUpVisibility(false);
            break;
        case MSG_LAUNCH_TRANSITION_TIMEOUT:
            onLaunchTransitionTimeout();
            break;
        case MSG_UPDATE_NOTIFICATIONS:
            handleUpdateNotifications();
            break;
    }
}
#end_block

#method_before
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY), false, this, UserHandle.USER_ALL);
    mDirectionArrowsEnabled = Settings.System.getIntForUser(resolver, Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 1, UserHandle.USER_CURRENT) == 1 ? true : false;
}
#method_after
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY), false, this, UserHandle.USER_ALL);
    mDirectionArrowsEnabled = Settings.System.getIntForUser(resolver, Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 0, UserHandle.USER_CURRENT) == 1 ? true : false;
}
#end_block

#method_before
@Override
public void onChange(boolean selfChange) {
    mDirectionArrowsEnabled = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 1, UserHandle.USER_CURRENT) == 1 ? true : false;
    refreshViews();
}
#method_after
@Override
public void onChange(boolean selfChange) {
    mDirectionArrowsEnabled = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 0, UserHandle.USER_CURRENT) == 1 ? true : false;
    refreshViews();
}
#end_block

#method_before
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY), false, this, UserHandle.USER_ALL);
    mDirectionArrowsEnabled = Settings.System.getIntForUser(resolver, Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 1, UserHandle.USER_CURRENT) == 1 ? true : false;
}
#method_after
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY), false, this, UserHandle.USER_ALL);
    mDirectionArrowsEnabled = Settings.System.getIntForUser(resolver, Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 0, UserHandle.USER_CURRENT) == 1 ? true : false;
}
#end_block

#method_before
@Override
public void onChange(boolean selfChange) {
    mDirectionArrowsEnabled = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 1, UserHandle.USER_CURRENT) == 1 ? true : false;
    refreshViews();
}
#method_after
@Override
public void onChange(boolean selfChange) {
    mDirectionArrowsEnabled = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.STATUS_BAR_SHOW_NETWORK_ACTIVITY, 0, UserHandle.USER_CURRENT) == 1 ? true : false;
    refreshViews();
}
#end_block

#method_before
private String getActivePackageNames() {
    List<AppOpsManager.PackageOps> packages = mAppOpsManager.getPackagesForOps(mSuOpArray);
    StringBuilder sb = new StringBuilder();
    PackageManager pm = mContext.getPackageManager();
    // AppOpsManager can return null when there is no requested data.
    if (packages != null) {
        final int numPackages = packages.size();
        for (int packageInd = 0; packageInd < numPackages; packageInd++) {
            AppOpsManager.PackageOps packageOp = packages.get(packageInd);
            if (packageOp != null) {
                ApplicationInfo ai;
                try {
                    ai = pm.getApplicationInfo(packageOp.getPackageName(), 0);
                } catch (NameNotFoundException e) {
                    ai = null;
                }
                CharSequence name = (ai == null ? packageOp.getPackageName() : pm.getApplicationLabel(ai));
                if (sb.toString().contains(",")) {
                    sb.append(", " + name);
                } else {
                    sb.append(name);
                }
            }
        }
    }
    return sb.toString();
}
#method_after
private String getActivePackageNames() {
    List<AppOpsManager.PackageOps> packages = mAppOpsManager.getPackagesForOps(mSuOpArray);
    ArrayList<String> pacs = new ArrayList<String>();
    PackageManager pm = mContext.getPackageManager();
    // AppOpsManager can return null when there is no requested data.
    if (packages != null) {
        final int numPackages = packages.size();
        for (int packageInd = 0; packageInd < numPackages; packageInd++) {
            AppOpsManager.PackageOps packageOp = packages.get(packageInd);
            List<AppOpsManager.OpEntry> opEntries = packageOp.getOps();
            if (opEntries != null) {
                final int numOps = opEntries.size();
                for (int opInd = 0; opInd < numOps; opInd++) {
                    AppOpsManager.OpEntry opEntry = opEntries.get(opInd);
                    if (opEntry.getOp() == AppOpsManager.OP_SU) {
                        if (opEntry.isRunning()) {
                            ApplicationInfo ai;
                            try {
                                ai = pm.getApplicationInfo(packageOp.getPackageName(), 0);
                            } catch (NameNotFoundException e) {
                                ai = null;
                            }
                            CharSequence name = (ai == null ? packageOp.getPackageName() : pm.getApplicationLabel(ai));
                            pacs.add((String) name);
                        }
                    }
                }
            }
        }
    }
    return Arrays.toString(pacs.toArray(new String[pacs.size()]));
}
#end_block

#method_before
public void updateNotification() {
    NotificationManager manager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
    if (!hasActiveSuSessions()) {
        manager.cancelAll();
        return;
    }
    if (Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.SU_INDICATOR, 1, UserHandle.USER_CURRENT) != SU_INDICATOR_NOTIFICATION) {
        manager.cancelAll();
        return;
    }
    Notification.Builder mBuilder = new Notification.Builder(mContext).setSmallIcon(R.drawable.stat_sys_su).setContentTitle(mContext.getString(R.string.su_session_active)).setContentText(getActivePackageNames());
    manager.notify(1001, mBuilder.build());
}
#method_after
public void updateNotification() {
    if (!hasActiveSuSessions()) {
        mNotificationManager.cancel(SU_INDICATOR_NOTIFICATION_ID);
        return;
    }
    if (Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.SU_INDICATOR, 1, UserHandle.USER_CURRENT) != SU_INDICATOR_NOTIFICATION) {
        mNotificationManager.cancel(SU_INDICATOR_NOTIFICATION_ID);
        return;
    }
    String content = getActivePackageNames().replace("[", "").replace("]", "");
    mBuilder.setContentText(content);
    mNotificationManager.notify(SU_INDICATOR_NOTIFICATION_ID, mBuilder.build());
}
#end_block

#method_before
private void updateActiveSuSessions() {
    boolean hadActiveSuSessions = mHasActiveSuSessions;
    mHasActiveSuSessions = hasActiveSuSessions();
    if (mHasActiveSuSessions != hadActiveSuSessions) {
        fireCallbacks();
        updateNotification();
    }
}
#method_after
private void updateActiveSuSessions() {
    boolean hadActiveSuSessions = mHasActiveSuSessions;
    mHasActiveSuSessions = hasActiveSuSessions();
    if (mHasActiveSuSessions != hadActiveSuSessions) {
        fireCallbacks();
    }
}
#end_block

#method_before
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SU_INDICATOR), false, this, UserHandle.USER_ALL);
}
#method_after
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SU_INDICATOR), false, this, UserHandle.USER_ALL);
    update();
}
#end_block

#method_before
@Override
public void onChange(boolean selfChange, Uri uri) {
    if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL)) || uri.equals(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE))) {
        updateBrightnessSettings();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.SU_INDICATOR))) {
        mSuController.updateNotification();
        mSuController.fireCallbacks();
    }
}
#method_after
@Override
public void onChange(boolean selfChange, Uri uri) {
    if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT)) || uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE))) {
        mBatteryView.updateBatteryIconSettings();
        mHeader.updateBatteryIconSettings();
        mKeyguardStatusBar.updateBatteryIconSettings();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL)) || uri.equals(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE))) {
        update();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.SU_INDICATOR))) {
        mSuController.updateNotification();
        mSuController.fireCallbacks();
    }
}
#end_block

#method_before
// ================================================================================
// Constructing the view
protected PhoneStatusBarView makeStatusBarView() {
    final Context context = mContext;
    Resources res = context.getResources();
    mScreenWidth = (float) context.getResources().getDisplayMetrics().widthPixels;
    mMinBrightness = context.getResources().getInteger(com.android.internal.R.integer.config_screenBrightnessDim);
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    mIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    if (isMSim()) {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.msim_super_status_bar, null);
    } else {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.super_status_bar, null);
    }
    mStatusBarWindow.mService = this;
    mStatusBarWindow.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                if (mExpandedVisible) {
                    animateCollapsePanels();
                }
            }
            return mStatusBarWindow.onTouchEvent(event);
        }
    });
    if (isMSim()) {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.msim_status_bar);
    } else {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
    }
    mStatusBarView.setBar(this);
    PanelHolder holder;
    if (isMSim()) {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.msim_panel_holder);
    } else {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.panel_holder);
    }
    mStatusBarView.setPanelHolder(holder);
    mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel);
    mNotificationPanel.setStatusBar(this);
    if (!ActivityManager.isHighEndGfx()) {
        mStatusBarWindow.setBackground(null);
        mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
    }
    if (ENABLE_HEADS_UP) {
        mHeadsUpNotificationView = (HeadsUpNotificationView) View.inflate(context, R.layout.heads_up, null);
        mHeadsUpNotificationView.setVisibility(View.GONE);
        mHeadsUpNotificationView.setBar(this);
    }
    if (MULTIUSER_DEBUG) {
        mNotificationPanelDebugText = (TextView) mNotificationPanel.findViewById(R.id.header_debug_info);
        mNotificationPanelDebugText.setVisibility(View.VISIBLE);
    }
    updateShowSearchHoldoff();
    try {
        boolean showNav = mWindowManagerService.hasNavigationBar();
        if (DEBUG)
            Log.v(TAG, "hasNavigationBar=" + showNav);
        if (showNav) {
            mNavigationBarView = (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
            mNavigationBarView.setDisabledFlags(mDisabled);
            mNavigationBarView.setBar(this);
            mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener() {

                @Override
                public void onVerticalChanged(boolean isVertical) {
                    if (mSearchPanelView != null) {
                        mSearchPanelView.setHorizontal(isVertical);
                    }
                    mNotificationPanel.setQsScrimEnabled(!isVertical);
                }
            });
            mNavigationBarView.setOnTouchListener(new View.OnTouchListener() {

                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    checkUserAutohide(v, event);
                    return false;
                }
            });
        }
    } catch (RemoteException ex) {
    // no window manager? good luck with that
    }
    // figure out which pixel-format to use for the status bar.
    mPixelFormat = PixelFormat.OPAQUE;
    mSystemIconArea = (LinearLayout) mStatusBarView.findViewById(R.id.system_icon_area);
    mSystemIcons = (LinearLayout) mStatusBarView.findViewById(R.id.system_icons);
    mStatusIcons = (LinearLayout) mStatusBarView.findViewById(R.id.statusIcons);
    mNotificationIconArea = mStatusBarView.findViewById(R.id.notification_icon_area_inner);
    mNotificationIcons = (IconMerger) mStatusBarView.findViewById(R.id.notificationIcons);
    mMoreIcon = mStatusBarView.findViewById(R.id.moreIcon);
    mNotificationIcons.setOverflowIndicator(mMoreIcon);
    mStatusBarContents = (LinearLayout) mStatusBarView.findViewById(R.id.status_bar_contents);
    mCenterClockLayout = (LinearLayout) mStatusBarView.findViewById(R.id.center_clock_layout);
    mStackScroller = (NotificationStackScrollLayout) mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
    mStackScroller.setLongPressListener(getNotificationLongClicker());
    mStackScroller.setPhoneStatusBar(this);
    mKeyguardIconOverflowContainer = (NotificationOverflowContainer) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow, mStackScroller, false);
    mKeyguardIconOverflowContainer.setOnActivatedListener(this);
    mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
    mStackScroller.addView(mKeyguardIconOverflowContainer);
    SpeedBumpView speedBump = (SpeedBumpView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump, mStackScroller, false);
    mStackScroller.setSpeedBumpView(speedBump);
    mEmptyShadeView = (EmptyShadeView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications, mStackScroller, false);
    mStackScroller.setEmptyShadeView(mEmptyShadeView);
    mDismissView = (DismissView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all, mStackScroller, false);
    mDismissView.setOnButtonClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            clearAllNotifications();
        }
    });
    mStackScroller.setDismissView(mDismissView);
    mExpandedContents = mStackScroller;
    mBackdrop = (BackDropView) mStatusBarWindow.findViewById(R.id.backdrop);
    mBackdropFront = (ImageView) mBackdrop.findViewById(R.id.backdrop_front);
    mBackdropBack = (ImageView) mBackdrop.findViewById(R.id.backdrop_back);
    ScrimView scrimBehind = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_behind);
    ScrimView scrimInFront = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_in_front);
    mScrimController = new ScrimController(scrimBehind, scrimInFront, mScrimSrcModeEnabled);
    mScrimController.setBackDropView(mBackdrop);
    mStatusBarView.setScrimController(mScrimController);
    mDozeScrimController = new DozeScrimController(mScrimController, context);
    mHeader = (StatusBarHeaderView) mStatusBarWindow.findViewById(R.id.header);
    mHeader.setActivityStarter(this);
    mKeyguardStatusBar = (KeyguardStatusBarView) mStatusBarWindow.findViewById(R.id.keyguard_header);
    mStatusIconsKeyguard = (LinearLayout) mKeyguardStatusBar.findViewById(R.id.statusIcons);
    mKeyguardStatusView = mStatusBarWindow.findViewById(R.id.keyguard_status_view);
    mKeyguardBottomArea = (KeyguardBottomAreaView) mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
    mKeyguardBottomArea.setActivityStarter(this);
    mKeyguardIndicationController = new KeyguardIndicationController(mContext, (KeyguardIndicationTextView) mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
    mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
    mTickerEnabled = res.getBoolean(R.bool.enable_ticker);
    if (mTickerEnabled) {
        final ViewStub tickerStub = (ViewStub) mStatusBarView.findViewById(R.id.ticker_stub);
        if (tickerStub != null) {
            mTickerView = tickerStub.inflate();
            mTicker = new MyTicker(context, mStatusBarView);
            TickerView tickerView = (TickerView) mStatusBarView.findViewById(R.id.tickerText);
            tickerView.mTicker = mTicker;
        }
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    // set the inital view visibility
    setAreThereNotifications();
    // Background thread for any controllers that need it.
    mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    mHandlerThread.start();
    // Other icons
    // will post a notification
    mLocationController = new LocationControllerImpl(mContext);
    mBatteryController = new BatteryController(mContext);
    mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback() {

        @Override
        public void onPowerSaveChanged() {
            mHandler.post(mCheckBarModes);
            if (mDozeServiceHost != null) {
                mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
            }
        }

        @Override
        public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
        // noop
        }
    });
    mHotspotController = new HotspotControllerImpl(mContext);
    mBluetoothController = new BluetoothControllerImpl(mContext, mHandlerThread.getLooper());
    mSecurityController = new SecurityControllerImpl(mContext);
    if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
        mRotationLockController = new RotationLockControllerImpl(mContext);
    }
    mUserInfoController = new UserInfoController(mContext);
    mVolumeComponent = getComponent(VolumeComponent.class);
    mZenModeController = mVolumeComponent.getZenController();
    mCastController = new CastControllerImpl(mContext);
    mSuController = new SuControllerImpl(mContext);
    if (isMSim()) {
        mMSimNetworkController = new MSimNetworkControllerImpl(mContext);
        MSimSignalClusterView signalCluster = (MSimSignalClusterView) mStatusBarView.findViewById(R.id.msim_signal_cluster);
        MSimSignalClusterView signalClusterKeyguard = (MSimSignalClusterView) mKeyguardStatusBar.findViewById(R.id.msim_signal_cluster);
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            mMSimNetworkController.addSignalCluster(signalCluster, i);
            mMSimNetworkController.addSignalCluster(signalClusterKeyguard, i);
        }
        signalCluster.setNetworkController(mMSimNetworkController);
        signalClusterKeyguard.setNetworkController(mMSimNetworkController);
        mMSimNetworkController.addEmergencyLabelView(mHeader);
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mSubsLabel = (TextView) mStatusBarWindow.findViewById(R.id.subs_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel + "operator label=" + mSubsLabel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mMSimNetworkController.hasMobileDataFeature()) {
                mMSimNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mMSimNetworkController.addCombinedLabelView(mCarrierLabel);
            }
            mSubsLabel.setVisibility(View.VISIBLE);
            mMSimNetworkController.addSubsLabelView(mSubsLabel);
        // set up the dynamic hide/show of the label
        // mPile.setOnSizeChangedListener(new OnSizeChangedListener() {
        // @Override
        // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
        // updateCarrierLabelVisibility(false);
        // }
        // });
        }
    } else {
        mNetworkController = new NetworkControllerImpl(mContext);
        final SignalClusterView signalCluster = (SignalClusterView) mStatusBarView.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterKeyguard = (SignalClusterView) mKeyguardStatusBar.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterQs = (SignalClusterView) mHeader.findViewById(R.id.signal_cluster);
        mNetworkController.addSignalCluster(signalCluster);
        mNetworkController.addSignalCluster(signalClusterKeyguard);
        mNetworkController.addSignalCluster(signalClusterQs);
        signalCluster.setSecurityController(mSecurityController);
        signalCluster.setNetworkController(mNetworkController);
        signalClusterKeyguard.setSecurityController(mSecurityController);
        signalClusterKeyguard.setNetworkController(mNetworkController);
        signalClusterQs.setSecurityController(mSecurityController);
        signalClusterQs.setNetworkController(mNetworkController);
        final boolean isAPhone = mNetworkController.hasVoiceCallingFeature();
        if (isAPhone) {
            mNetworkController.addEmergencyLabelView(mHeader);
        }
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mNetworkController.hasMobileDataFeature()) {
                mNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mNetworkController.addCombinedLabelView(mCarrierLabel);
            }
        }
    // set up the dynamic hide/show of the label
    // TODO: uncomment, handle this for the Stack scroller aswell
    // ((NotificationRowLayout) mStackScroller)
    // .setOnSizeChangedListener(new OnSizeChangedListener() {
    // @Override
    // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
    // updateCarrierLabelVisibility(false);
    }
    mFlashlightController = new FlashlightController(mContext);
    mKeyguardBottomArea.setFlashlightController(mFlashlightController);
    mKeyguardBottomArea.setPhoneStatusBar(this);
    mAccessibilityController = new AccessibilityController(mContext);
    mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
    mNextAlarmController = new NextAlarmController(mContext);
    mKeyguardMonitor = new KeyguardMonitor();
    mUserSwitcherController = new UserSwitcherController(mContext, mKeyguardMonitor);
    mKeyguardUserSwitcher = new KeyguardUserSwitcher(mContext, (ViewStub) mStatusBarWindow.findViewById(R.id.keyguard_user_switcher), mKeyguardStatusBar, mNotificationPanel, mUserSwitcherController);
    // Set up the quick settings tile panel
    mQSPanel = (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);
    if (mQSPanel != null) {
        final QSTileHost qsh;
        if (isMSim()) {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mMSimNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        } else {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        }
        mQSPanel.setHost(qsh);
        mQSPanel.setTiles(qsh.getTiles());
        mBrightnessMirrorController = new BrightnessMirrorController(mStatusBarWindow);
        mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
        mHeader.setQSPanel(mQSPanel);
        qsh.setCallback(new QSTileHost.Callback() {

            @Override
            public void onTilesChanged() {
                mQSPanel.setTiles(qsh.getTiles());
            }
        });
    }
    // task manager
    if (mContext.getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManagerPanel = (LinearLayout) mStatusBarWindow.findViewById(R.id.task_manager_panel);
        mTaskManager = new TaskManager(mContext, mTaskManagerPanel);
        mTaskManager.setActivityStarter(this);
        mTaskManagerButton = (ImageButton) mHeader.findViewById(R.id.task_manager_button);
        mTaskManagerButton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                showTaskList = !showTaskList;
                mNotificationPanel.setTaskManagerVisibility(showTaskList);
            }
        });
    }
    // User info. Trigger first load.
    mHeader.setUserInfoController(mUserInfoController);
    mKeyguardStatusBar.setUserInfoController(mUserInfoController);
    mUserInfoController.reloadUserInfo();
    mHeader.setBatteryController(mBatteryController);
    ((BatteryMeterView) mStatusBarView.findViewById(R.id.battery)).setBatteryController(mBatteryController);
    mKeyguardStatusBar.setBatteryController(mBatteryController);
    mHeader.setNextAlarmController(mNextAlarmController);
    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
    mBroadcastReceiver.onReceive(mContext, new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
    // receive broadcasts
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    filter.addAction(Intent.ACTION_SCREEN_ON);
    if (DEBUG_MEDIA_FAKE_ARTWORK) {
        filter.addAction("fake_artwork");
    }
    filter.addAction(ACTION_DEMO);
    context.registerReceiver(mBroadcastReceiver, filter);
    // listen for USER_SETUP_COMPLETE setting (per-user)
    resetUserSetupObserver();
    startGlyphRasterizeHack();
    return mStatusBarView;
}
#method_after
// ================================================================================
// Constructing the view
protected PhoneStatusBarView makeStatusBarView() {
    final Context context = mContext;
    Resources res = context.getResources();
    mScreenWidth = (float) context.getResources().getDisplayMetrics().widthPixels;
    mMinBrightness = context.getResources().getInteger(com.android.internal.R.integer.config_screenBrightnessDim);
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    mIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    if (isMSim()) {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.msim_super_status_bar, null);
    } else {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.super_status_bar, null);
    }
    mStatusBarWindow.mService = this;
    mStatusBarWindow.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                if (mExpandedVisible) {
                    animateCollapsePanels();
                }
            }
            return mStatusBarWindow.onTouchEvent(event);
        }
    });
    if (isMSim()) {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.msim_status_bar);
    } else {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
    }
    mStatusBarView.setBar(this);
    PanelHolder holder;
    if (isMSim()) {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.msim_panel_holder);
    } else {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.panel_holder);
    }
    mStatusBarView.setPanelHolder(holder);
    mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel);
    mNotificationPanel.setStatusBar(this);
    if (!ActivityManager.isHighEndGfx()) {
        mStatusBarWindow.setBackground(null);
        mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
    }
    if (ENABLE_HEADS_UP) {
        mHeadsUpNotificationView = (HeadsUpNotificationView) View.inflate(context, R.layout.heads_up, null);
        mHeadsUpNotificationView.setVisibility(View.GONE);
        mHeadsUpNotificationView.setBar(this);
    }
    if (MULTIUSER_DEBUG) {
        mNotificationPanelDebugText = (TextView) mNotificationPanel.findViewById(R.id.header_debug_info);
        mNotificationPanelDebugText.setVisibility(View.VISIBLE);
    }
    updateShowSearchHoldoff();
    try {
        boolean showNav = mWindowManagerService.hasNavigationBar();
        if (DEBUG)
            Log.v(TAG, "hasNavigationBar=" + showNav);
        if (showNav) {
            mNavigationBarView = (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
            mNavigationBarView.setDisabledFlags(mDisabled);
            mNavigationBarView.setBar(this);
            mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener() {

                @Override
                public void onVerticalChanged(boolean isVertical) {
                    if (mSearchPanelView != null) {
                        mSearchPanelView.setHorizontal(isVertical);
                    }
                    mNotificationPanel.setQsScrimEnabled(!isVertical);
                }
            });
            mNavigationBarView.setOnTouchListener(new View.OnTouchListener() {

                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    checkUserAutohide(v, event);
                    return false;
                }
            });
        }
    } catch (RemoteException ex) {
    // no window manager? good luck with that
    }
    // figure out which pixel-format to use for the status bar.
    mPixelFormat = PixelFormat.OPAQUE;
    mSystemIconArea = (LinearLayout) mStatusBarView.findViewById(R.id.system_icon_area);
    mSystemIcons = (LinearLayout) mStatusBarView.findViewById(R.id.system_icons);
    mStatusIcons = (LinearLayout) mStatusBarView.findViewById(R.id.statusIcons);
    mNotificationIconArea = mStatusBarView.findViewById(R.id.notification_icon_area_inner);
    mNotificationIcons = (IconMerger) mStatusBarView.findViewById(R.id.notificationIcons);
    mMoreIcon = mStatusBarView.findViewById(R.id.moreIcon);
    mNotificationIcons.setOverflowIndicator(mMoreIcon);
    mStatusBarContents = (LinearLayout) mStatusBarView.findViewById(R.id.status_bar_contents);
    mCenterClockLayout = (LinearLayout) mStatusBarView.findViewById(R.id.center_clock_layout);
    mStackScroller = (NotificationStackScrollLayout) mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
    mStackScroller.setLongPressListener(getNotificationLongClicker());
    mStackScroller.setPhoneStatusBar(this);
    mKeyguardIconOverflowContainer = (NotificationOverflowContainer) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow, mStackScroller, false);
    mKeyguardIconOverflowContainer.setOnActivatedListener(this);
    mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
    mStackScroller.addView(mKeyguardIconOverflowContainer);
    SpeedBumpView speedBump = (SpeedBumpView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump, mStackScroller, false);
    mStackScroller.setSpeedBumpView(speedBump);
    mEmptyShadeView = (EmptyShadeView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications, mStackScroller, false);
    mStackScroller.setEmptyShadeView(mEmptyShadeView);
    mDismissView = (DismissView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all, mStackScroller, false);
    mDismissView.setOnButtonClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            clearAllNotifications();
        }
    });
    mStackScroller.setDismissView(mDismissView);
    mExpandedContents = mStackScroller;
    mBackdrop = (BackDropView) mStatusBarWindow.findViewById(R.id.backdrop);
    mBackdropFront = (ImageView) mBackdrop.findViewById(R.id.backdrop_front);
    mBackdropBack = (ImageView) mBackdrop.findViewById(R.id.backdrop_back);
    ScrimView scrimBehind = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_behind);
    ScrimView scrimInFront = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_in_front);
    mScrimController = new ScrimController(scrimBehind, scrimInFront, mScrimSrcModeEnabled);
    mScrimController.setBackDropView(mBackdrop);
    mStatusBarView.setScrimController(mScrimController);
    mDozeScrimController = new DozeScrimController(mScrimController, context);
    mHeader = (StatusBarHeaderView) mStatusBarWindow.findViewById(R.id.header);
    mHeader.setActivityStarter(this);
    mKeyguardStatusBar = (KeyguardStatusBarView) mStatusBarWindow.findViewById(R.id.keyguard_header);
    mStatusIconsKeyguard = (LinearLayout) mKeyguardStatusBar.findViewById(R.id.statusIcons);
    mKeyguardStatusView = mStatusBarWindow.findViewById(R.id.keyguard_status_view);
    mKeyguardBottomArea = (KeyguardBottomAreaView) mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
    mKeyguardBottomArea.setActivityStarter(this);
    mKeyguardIndicationController = new KeyguardIndicationController(mContext, (KeyguardIndicationTextView) mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
    mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
    mTickerEnabled = res.getBoolean(R.bool.enable_ticker);
    if (mTickerEnabled) {
        final ViewStub tickerStub = (ViewStub) mStatusBarView.findViewById(R.id.ticker_stub);
        if (tickerStub != null) {
            mTickerView = tickerStub.inflate();
            mTicker = new MyTicker(context, mStatusBarView);
            TickerView tickerView = (TickerView) mStatusBarView.findViewById(R.id.tickerText);
            tickerView.mTicker = mTicker;
        }
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    // set the inital view visibility
    setAreThereNotifications();
    // Background thread for any controllers that need it.
    mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    mHandlerThread.start();
    mBatteryLevel = (TextView) mStatusBarView.findViewById(R.id.battery_level_text);
    // Other icons
    // will post a notification
    mLocationController = new LocationControllerImpl(mContext);
    mBatteryController = new BatteryController(mContext);
    mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback() {

        @Override
        public void onPowerSaveChanged() {
            mHandler.post(mCheckBarModes);
            if (mDozeServiceHost != null) {
                mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
            }
        }

        @Override
        public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
            mBatteryIsCharging = charging;
            mBatteryChargeLevel = level;
            loadShowBatteryTextSetting();
            updateBatteryLevelText();
            mHeader.updateBatteryLevel(level, charging);
            mKeyguardStatusBar.updateBatteryLevel(level, charging);
        }
    });
    mHotspotController = new HotspotControllerImpl(mContext);
    mBluetoothController = new BluetoothControllerImpl(mContext, mHandlerThread.getLooper());
    mSecurityController = new SecurityControllerImpl(mContext);
    if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
        mRotationLockController = new RotationLockControllerImpl(mContext);
    }
    mUserInfoController = new UserInfoController(mContext);
    mVolumeComponent = getComponent(VolumeComponent.class);
    mZenModeController = mVolumeComponent.getZenController();
    mCastController = new CastControllerImpl(mContext);
    mSuController = new SuControllerImpl(mContext);
    if (isMSim()) {
        mMSimNetworkController = new MSimNetworkControllerImpl(mContext);
        MSimSignalClusterView signalCluster = (MSimSignalClusterView) mStatusBarView.findViewById(R.id.msim_signal_cluster);
        MSimSignalClusterView signalClusterKeyguard = (MSimSignalClusterView) mKeyguardStatusBar.findViewById(R.id.msim_signal_cluster);
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            mMSimNetworkController.addSignalCluster(signalCluster, i);
            mMSimNetworkController.addSignalCluster(signalClusterKeyguard, i);
        }
        signalCluster.setNetworkController(mMSimNetworkController);
        signalClusterKeyguard.setNetworkController(mMSimNetworkController);
        mMSimNetworkController.addEmergencyLabelView(mHeader);
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mSubsLabel = (TextView) mStatusBarWindow.findViewById(R.id.subs_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel + "operator label=" + mSubsLabel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mMSimNetworkController.hasMobileDataFeature()) {
                mMSimNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mMSimNetworkController.addCombinedLabelView(mCarrierLabel);
            }
            mSubsLabel.setVisibility(View.VISIBLE);
            mMSimNetworkController.addSubsLabelView(mSubsLabel);
        // set up the dynamic hide/show of the label
        // mPile.setOnSizeChangedListener(new OnSizeChangedListener() {
        // @Override
        // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
        // updateCarrierLabelVisibility(false);
        // }
        // });
        }
    } else {
        mNetworkController = new NetworkControllerImpl(mContext);
        final SignalClusterView signalCluster = (SignalClusterView) mStatusBarView.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterKeyguard = (SignalClusterView) mKeyguardStatusBar.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterQs = (SignalClusterView) mHeader.findViewById(R.id.signal_cluster);
        mNetworkController.addSignalCluster(signalCluster);
        mNetworkController.addSignalCluster(signalClusterKeyguard);
        mNetworkController.addSignalCluster(signalClusterQs);
        signalCluster.setSecurityController(mSecurityController);
        signalCluster.setNetworkController(mNetworkController);
        signalClusterKeyguard.setSecurityController(mSecurityController);
        signalClusterKeyguard.setNetworkController(mNetworkController);
        signalClusterQs.setSecurityController(mSecurityController);
        signalClusterQs.setNetworkController(mNetworkController);
        final boolean isAPhone = mNetworkController.hasVoiceCallingFeature();
        if (isAPhone) {
            mNetworkController.addEmergencyLabelView(mHeader);
        }
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mNetworkController.hasMobileDataFeature()) {
                mNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mNetworkController.addCombinedLabelView(mCarrierLabel);
            }
        }
    // set up the dynamic hide/show of the label
    // TODO: uncomment, handle this for the Stack scroller aswell
    // ((NotificationRowLayout) mStackScroller)
    // .setOnSizeChangedListener(new OnSizeChangedListener() {
    // @Override
    // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
    // updateCarrierLabelVisibility(false);
    }
    mFlashlightController = new FlashlightController(mContext);
    mKeyguardBottomArea.setFlashlightController(mFlashlightController);
    mKeyguardBottomArea.setPhoneStatusBar(this);
    mAccessibilityController = new AccessibilityController(mContext);
    mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
    mNextAlarmController = new NextAlarmController(mContext);
    mKeyguardMonitor = new KeyguardMonitor();
    mUserSwitcherController = new UserSwitcherController(mContext, mKeyguardMonitor);
    mKeyguardUserSwitcher = new KeyguardUserSwitcher(mContext, (ViewStub) mStatusBarWindow.findViewById(R.id.keyguard_user_switcher), mKeyguardStatusBar, mNotificationPanel, mUserSwitcherController);
    // Set up the quick settings tile panel
    mQSPanel = (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);
    if (mQSPanel != null) {
        final QSTileHost qsh;
        if (isMSim()) {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mMSimNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        } else {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        }
        mQSPanel.setHost(qsh);
        mQSPanel.setTiles(qsh.getTiles());
        mBrightnessMirrorController = new BrightnessMirrorController(mStatusBarWindow);
        mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
        mHeader.setQSPanel(mQSPanel);
        qsh.setCallback(new QSTileHost.Callback() {

            @Override
            public void onTilesChanged() {
                mQSPanel.setTiles(qsh.getTiles());
            }
        });
    }
    // task manager
    if (mContext.getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManagerPanel = (LinearLayout) mStatusBarWindow.findViewById(R.id.task_manager_panel);
        mTaskManager = new TaskManager(mContext, mTaskManagerPanel);
        mTaskManager.setActivityStarter(this);
        mTaskManagerButton = (ImageButton) mHeader.findViewById(R.id.task_manager_button);
        mTaskManagerButton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                showTaskList = !showTaskList;
                mNotificationPanel.setTaskManagerVisibility(showTaskList);
            }
        });
    }
    // User info. Trigger first load.
    mHeader.setUserInfoController(mUserInfoController);
    mKeyguardStatusBar.setUserInfoController(mUserInfoController);
    mUserInfoController.reloadUserInfo();
    mHeader.setBatteryController(mBatteryController);
    mBatteryView = (BatteryMeterView) mStatusBarView.findViewById(R.id.battery);
    mBatteryView.setBatteryController(mBatteryController);
    mKeyguardStatusBar.setBatteryController(mBatteryController);
    mHeader.setNextAlarmController(mNextAlarmController);
    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
    mBroadcastReceiver.onReceive(mContext, new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
    // receive broadcasts
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    filter.addAction(Intent.ACTION_SCREEN_ON);
    if (DEBUG_MEDIA_FAKE_ARTWORK) {
        filter.addAction("fake_artwork");
    }
    filter.addAction(ACTION_DEMO);
    context.registerReceiver(mBroadcastReceiver, filter);
    // listen for USER_SETUP_COMPLETE setting (per-user)
    resetUserSetupObserver();
    startGlyphRasterizeHack();
    return mStatusBarView;
}
#end_block

#method_before
@Override
public void handleMessage(Message msg) {
    switch(msg.what) {
        case MSG_START_DOZING:
            handleStartDozing((Runnable) msg.obj);
            break;
        case MSG_PULSE_WHILE_DOZING:
            handlePulseWhileDozing((PulseCallback) msg.obj, msg.arg1);
            break;
        case MSG_STOP_DOZING:
            handleStopDozing();
            break;
    }
}
#method_after
public void handleMessage(Message m) {
    super.handleMessage(m);
    switch(m.what) {
        case MSG_OPEN_NOTIFICATION_PANEL:
            animateExpandNotificationsPanel();
            break;
        case MSG_OPEN_SETTINGS_PANEL:
            animateExpandSettingsPanel();
            break;
        case MSG_CLOSE_PANELS:
            animateCollapsePanels();
            break;
        case MSG_SHOW_HEADS_UP:
            setHeadsUpVisibility(true);
            break;
        case MSG_DECAY_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_HIDE_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_ESCALATE_HEADS_UP:
            escalateHeadsUp();
            setHeadsUpVisibility(false);
            break;
        case MSG_LAUNCH_TRANSITION_TIMEOUT:
            onLaunchTransitionTimeout();
            break;
        case MSG_UPDATE_NOTIFICATIONS:
            handleUpdateNotifications();
            break;
    }
}
#end_block

#method_before
@Override
protected void onConfigurationChanged(Configuration newConfig) {
    // calls refreshLayout
    super.onConfigurationChanged(newConfig);
    if (DEBUG) {
        Log.v(TAG, "configuration changed: " + mContext.getResources().getConfiguration());
    }
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    updateClockSize();
    repositionNavigationBar();
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
    updateShowSearchHoldoff();
    updateRowStates();
    mScreenPinningRequest.onConfigurationChanged();
}
#method_after
@Override
protected void onConfigurationChanged(Configuration newConfig) {
    // calls refreshLayout
    super.onConfigurationChanged(newConfig);
    if (DEBUG) {
        Log.v(TAG, "configuration changed: " + mContext.getResources().getConfiguration());
    }
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    updateClockSize();
    repositionNavigationBar();
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
    updateShowSearchHoldoff();
    updateRowStates();
    mScreenPinningRequest.onConfigurationChanged();
    FontSizeUtils.updateFontSize(mBatteryLevel, R.dimen.battery_level_text_size);
}
#end_block

#method_before
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_TICKER_ENABLED), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.HEADS_UP_NOTIFCATION_DECAY), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.HEADS_UP_SNOOZE_TIME), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.BATTERY_SAVER_MODE_COLOR), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE), false, this, UserHandle.USER_ALL);
    update();
}
#method_after
void observe() {
    ContentResolver resolver = mContext.getContentResolver();
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS_MODE), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT), false, this, UserHandle.USER_ALL);
    resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE), false, this, UserHandle.USER_ALL);
    update();
}
#end_block

#method_before
@Override
public void onChange(boolean selfChange, Uri uri) {
    if (uri.equals(Settings.System.getUriFor(Settings.System.HEADS_UP_SNOOZE_TIME))) {
        final int snoozeTime = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_SNOOZE_TIME, mContext.getResources().getInteger(R.integer.heads_up_snooze_time), UserHandle.USER_CURRENT);
        setHeadsUpSnoozeTime(snoozeTime);
        if (mHeadsUpNotificationView != null) {
            mHeadsUpNotificationView.setSnoozeVisibility(snoozeTime != 0);
        }
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.HEADS_UP_NOTIFCATION_DECAY))) {
        mHeadsUpNotificationDecay = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_NOTIFCATION_DECAY, mContext.getResources().getInteger(R.integer.heads_up_notification_decay), UserHandle.USER_CURRENT);
        resetHeadsUpDecayTimer();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.HEADS_UP_NOTIFCATION_DECAY))) {
        mTickerEnabled = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.STATUS_BAR_TICKER_ENABLED, mContext.getResources().getBoolean(R.bool.enable_ticker) ? 1 : 0, UserHandle.USER_CURRENT) == 1;
        initTickerView();
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.BATTERY_SAVER_MODE_COLOR))) {
        mBatterySaverWarningColor = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.BATTERY_SAVER_MODE_COLOR, -2, UserHandle.USER_CURRENT);
        if (mBatterySaverWarningColor == -2) {
            mBatterySaverWarningColor = mContext.getResources().getColor(com.android.internal.R.color.battery_saver_mode_color);
        }
    } else if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT)) || uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE))) {
        mBatteryView.updateBatteryIconSettings();
        mHeader.updateBatteryIconSettings();
        mKeyguardStatusBar.updateBatteryIconSettings();
    }
    update();
}
#method_after
@Override
public void onChange(boolean selfChange, Uri uri) {
    if (uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW_BATTERY_PERCENT)) || uri.equals(Settings.System.getUriFor(Settings.System.STATUS_BAR_BATTERY_STYLE))) {
        mBatteryView.updateBatteryIconSettings();
        mHeader.updateBatteryIconSettings();
        mKeyguardStatusBar.updateBatteryIconSettings();
    }
    update();
}
#end_block

#method_before
public void update() {
    ContentResolver resolver = mContext.getContentResolver();
    int mode = Settings.System.getIntForUser(resolver, Settings.System.SCREEN_BRIGHTNESS_MODE, Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL, UserHandle.USER_CURRENT);
    mAutomaticBrightness = mode != Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL;
    mBrightnessControl = Settings.System.getInt(resolver, Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL, 0) == 1;
    loadShowBatteryTextSetting();
    updateBatteryLevelText();
    mBatteryLevel.setVisibility(mShowBatteryText ? View.VISIBLE : View.GONE);
}
#method_after
public void update() {
    ContentResolver resolver = mContext.getContentResolver();
    boolean autoBrightness = Settings.System.getIntForUser(resolver, Settings.System.SCREEN_BRIGHTNESS_MODE, 0, UserHandle.USER_CURRENT) == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
    mBrightnessControl = !autoBrightness && Settings.System.getIntForUser(resolver, Settings.System.STATUS_BAR_BRIGHTNESS_CONTROL, 0, UserHandle.USER_CURRENT) == 1;
    loadShowBatteryTextSetting();
    updateBatteryLevelText();
    mBatteryLevel.setVisibility(mShowBatteryText ? View.VISIBLE : View.GONE);
}
#end_block

#method_before
@Override
public void start() {
    mDisplay = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    updateDisplaySize();
    mScrimSrcModeEnabled = mContext.getResources().getBoolean(R.bool.config_status_bar_scrim_behind_use_src);
    // calls createAndAddWindows()
    super.start();
    mMediaSessionManager = (MediaSessionManager) mContext.getSystemService(Context.MEDIA_SESSION_SERVICE);
    // TODO: use MediaSessionManager.SessionListener to hook us up to future updates
    // in session state
    addNavigationBar();
    SettingsObserver observer = new SettingsObserver(mHandler);
    observer.observe();
    // Lastly, call to the icon policy to install/update all the icons.
    mIconPolicy = new PhoneStatusBarPolicy(mContext, mCastController, mHotspotController);
    // set up
    mSettingsObserver.onChange(false);
    // when StatusBarManager notifies us that the state has changed.
    if (!mDisableNotificationAlerts) {
        addHeadsUpView();
    }
    mUnlockMethodCache = UnlockMethodCache.getInstance(mContext);
    mUnlockMethodCache.addListener(this);
    startKeyguard();
    mDozeServiceHost = new DozeServiceHost();
    putComponent(DozeHost.class, mDozeServiceHost);
    putComponent(PhoneStatusBar.class, this);
    setControllerUsers();
    notifyUserAboutHiddenNotifications();
    mScreenPinningRequest = new ScreenPinningRequest(mContext);
}
#method_after
@Override
public void start() {
    mDisplay = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
    updateDisplaySize();
    mScrimSrcModeEnabled = mContext.getResources().getBoolean(R.bool.config_status_bar_scrim_behind_use_src);
    // calls createAndAddWindows()
    super.start();
    mMediaSessionManager = (MediaSessionManager) mContext.getSystemService(Context.MEDIA_SESSION_SERVICE);
    // TODO: use MediaSessionManager.SessionListener to hook us up to future updates
    // in session state
    addNavigationBar();
    SettingsObserver observer = new SettingsObserver(mHandler);
    observer.observe();
    // Lastly, call to the icon policy to install/update all the icons.
    mIconPolicy = new PhoneStatusBarPolicy(mContext, mCastController, mSuController);
    // set up
    mSettingsObserver.onChange(false);
    // set up
    mHeadsUpObserver.onChange(true);
    if (ENABLE_HEADS_UP) {
        mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(Settings.Global.HEADS_UP_NOTIFICATIONS_ENABLED), true, mHeadsUpObserver);
        mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor(SETTING_HEADS_UP_TICKER), true, mHeadsUpObserver);
    }
    mUnlockMethodCache = UnlockMethodCache.getInstance(mContext);
    startKeyguard();
    mDozeServiceHost = new DozeServiceHost();
    putComponent(DozeHost.class, mDozeServiceHost);
    putComponent(PhoneStatusBar.class, this);
    setControllerUsers();
    notifyUserAboutHiddenNotifications();
    mScreenPinningRequest = new ScreenPinningRequest(mContext);
}
#end_block

#method_before
// ================================================================================
// Constructing the view
protected PhoneStatusBarView makeStatusBarView() {
    final Context context = mContext;
    Resources res = context.getResources();
    mScreenWidth = (float) context.getResources().getDisplayMetrics().widthPixels;
    mMinBrightness = context.getResources().getInteger(com.android.internal.R.integer.config_screenBrightnessDim);
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    mIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.super_status_bar, null);
    mStatusBarWindow.mService = this;
    mStatusBarWindow.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                if (mExpandedVisible) {
                    animateCollapsePanels();
                }
            }
            return mStatusBarWindow.onTouchEvent(event);
        }
    });
    mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
    mStatusBarView.setBar(this);
    PanelHolder holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.panel_holder);
    mStatusBarView.setPanelHolder(holder);
    mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel);
    mNotificationPanel.setStatusBar(this);
    if (!ActivityManager.isHighEndGfx()) {
        mStatusBarWindow.setBackground(null);
        mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
    }
    mHeadsUpNotificationView = (HeadsUpNotificationView) View.inflate(context, R.layout.heads_up, null);
    mHeadsUpNotificationView.setVisibility(View.GONE);
    mHeadsUpNotificationView.setBar(this);
    mHeadsUpNotificationDecay = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_NOTIFCATION_DECAY, res.getInteger(R.integer.heads_up_notification_decay), UserHandle.USER_CURRENT);
    final int snoozeTime = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.HEADS_UP_SNOOZE_TIME, res.getInteger(R.integer.heads_up_snooze_time), UserHandle.USER_CURRENT);
    setHeadsUpSnoozeTime(snoozeTime);
    mHeadsUpNotificationView.setSnoozeVisibility(snoozeTime != 0);
    if (MULTIUSER_DEBUG) {
        mNotificationPanelDebugText = (TextView) mNotificationPanel.findViewById(R.id.header_debug_info);
        mNotificationPanelDebugText.setVisibility(View.VISIBLE);
    }
    updateShowSearchHoldoff();
    try {
        boolean showNav = mWindowManagerService.hasNavigationBar();
        if (DEBUG)
            Log.v(TAG, "hasNavigationBar=" + showNav);
        if (showNav) {
            mNavigationBarView = (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
            mNavigationBarView.setDisabledFlags(mDisabled);
            mNavigationBarView.setBar(this);
            mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener() {

                @Override
                public void onVerticalChanged(boolean isVertical) {
                    if (mSearchPanelView != null) {
                        mSearchPanelView.setHorizontal(isVertical);
                    }
                    mNotificationPanel.setQsScrimEnabled(!isVertical);
                }
            });
            mNavigationBarView.setOnTouchListener(new View.OnTouchListener() {

                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    checkUserAutohide(v, event);
                    return false;
                }
            });
        }
    } catch (RemoteException ex) {
    // no window manager? good luck with that
    }
    // figure out which pixel-format to use for the status bar.
    mPixelFormat = PixelFormat.OPAQUE;
    mSystemIconArea = (LinearLayout) mStatusBarView.findViewById(R.id.system_icon_area);
    mSystemIcons = (LinearLayout) mStatusBarView.findViewById(R.id.system_icons);
    mStatusIcons = (LinearLayout) mStatusBarView.findViewById(R.id.statusIcons);
    mNotificationIconArea = mStatusBarView.findViewById(R.id.notification_icon_area_inner);
    mNotificationIcons = (IconMerger) mStatusBarView.findViewById(R.id.notificationIcons);
    mMoreIcon = mStatusBarView.findViewById(R.id.moreIcon);
    mNotificationIcons.setOverflowIndicator(mMoreIcon);
    mStatusBarContents = (LinearLayout) mStatusBarView.findViewById(R.id.status_bar_contents);
    mCenterClockLayout = (LinearLayout) mStatusBarView.findViewById(R.id.center_clock_layout);
    Clock cclock = (Clock) mStatusBarView.findViewById(R.id.center_clock);
    if (cclock != null) {
        cclock.setPhoneStatusBar(this);
    }
    mStackScroller = (NotificationStackScrollLayout) mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
    mStackScroller.setLongPressListener(getNotificationLongClicker());
    mStackScroller.setPhoneStatusBar(this);
    mKeyguardIconOverflowContainer = (NotificationOverflowContainer) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow, mStackScroller, false);
    mKeyguardIconOverflowContainer.setOnActivatedListener(this);
    mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
    mStackScroller.addView(mKeyguardIconOverflowContainer);
    SpeedBumpView speedBump = (SpeedBumpView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump, mStackScroller, false);
    mStackScroller.setSpeedBumpView(speedBump);
    mEmptyShadeView = (EmptyShadeView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications, mStackScroller, false);
    mStackScroller.setEmptyShadeView(mEmptyShadeView);
    mDismissView = (DismissView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all, mStackScroller, false);
    mDismissView.setOnButtonClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            clearAllNotifications();
        }
    });
    mStackScroller.setDismissView(mDismissView);
    mExpandedContents = mStackScroller;
    mBackdrop = (BackDropView) mStatusBarWindow.findViewById(R.id.backdrop);
    mBackdropFront = (ImageView) mBackdrop.findViewById(R.id.backdrop_front);
    mBackdropBack = (ImageView) mBackdrop.findViewById(R.id.backdrop_back);
    ScrimView scrimBehind = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_behind);
    ScrimView scrimInFront = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_in_front);
    mScrimController = new ScrimController(scrimBehind, scrimInFront, mScrimSrcModeEnabled);
    mScrimController.setBackDropView(mBackdrop);
    mStatusBarView.setScrimController(mScrimController);
    mDozeScrimController = new DozeScrimController(mScrimController, context);
    mHeader = (StatusBarHeaderView) mStatusBarWindow.findViewById(R.id.header);
    mHeader.setActivityStarter(this);
    mKeyguardStatusBar = (KeyguardStatusBarView) mStatusBarWindow.findViewById(R.id.keyguard_header);
    mStatusIconsKeyguard = (LinearLayout) mKeyguardStatusBar.findViewById(R.id.statusIcons);
    mKeyguardStatusView = mStatusBarWindow.findViewById(R.id.keyguard_status_view);
    mKeyguardBottomArea = (KeyguardBottomAreaView) mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
    mKeyguardBottomArea.setActivityStarter(this);
    mKeyguardIndicationController = new KeyguardIndicationController(mContext, (KeyguardIndicationTextView) mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
    mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
    mTickerEnabled = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.STATUS_BAR_TICKER_ENABLED, mContext.getResources().getBoolean(R.bool.enable_ticker) ? 1 : 0, UserHandle.USER_CURRENT) == 1;
    initTickerView();
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    mBatterySaverWarningColor = Settings.System.getIntForUser(mContext.getContentResolver(), Settings.System.BATTERY_SAVER_MODE_COLOR, -2, UserHandle.USER_CURRENT);
    if (mBatterySaverWarningColor == -2) {
        mBatterySaverWarningColor = mContext.getResources().getColor(com.android.internal.R.color.battery_saver_mode_color);
    }
    // set the inital view visibility
    setAreThereNotifications();
    // Background thread for any controllers that need it.
    mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    mHandlerThread.start();
    mBatteryLevel = (TextView) mStatusBarView.findViewById(R.id.battery_level_text);
    // Other icons
    // will post a notification
    mLocationController = new LocationControllerImpl(mContext);
    mBatteryController = new BatteryController(mContext);
    mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback() {

        @Override
        public void onPowerSaveChanged() {
            mHandler.post(mCheckBarModes);
            if (mDozeServiceHost != null) {
                mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
            }
        }

        @Override
        public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
            mBatteryIsCharging = charging;
            mBatteryChargeLevel = level;
            loadShowBatteryTextSetting();
            updateBatteryLevelText();
            mHeader.updateBatteryLevel(level, charging);
            mKeyguardStatusBar.updateBatteryLevel(level, charging);
        }
    });
    mNetworkController = new NetworkControllerImpl(mContext);
    mHotspotController = new HotspotControllerImpl(mContext);
    mBluetoothController = new BluetoothControllerImpl(mContext, mHandlerThread.getLooper());
    mSecurityController = new SecurityControllerImpl(mContext);
    if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
        mRotationLockController = new RotationLockControllerImpl(mContext);
    }
    mUserInfoController = new UserInfoController(mContext);
    mVolumeComponent = getComponent(VolumeComponent.class);
    if (mVolumeComponent != null) {
        mZenModeController = mVolumeComponent.getZenController();
    }
    mCastController = new CastControllerImpl(mContext);
    final SignalClusterView signalCluster = (SignalClusterView) mStatusBarView.findViewById(R.id.signal_cluster);
    final SignalClusterView signalClusterKeyguard = (SignalClusterView) mKeyguardStatusBar.findViewById(R.id.signal_cluster);
    final SignalClusterView signalClusterQs = (SignalClusterView) mHeader.findViewById(R.id.signal_cluster);
    mNetworkController.addSignalCluster(signalCluster);
    mNetworkController.addSignalCluster(signalClusterKeyguard);
    mNetworkController.addSignalCluster(signalClusterQs);
    signalCluster.setSecurityController(mSecurityController);
    signalCluster.setNetworkController(mNetworkController);
    signalClusterKeyguard.setSecurityController(mSecurityController);
    signalClusterKeyguard.setNetworkController(mNetworkController);
    signalClusterQs.setSecurityController(mSecurityController);
    signalClusterQs.setNetworkController(mNetworkController);
    final boolean isAPhone = mNetworkController.hasVoiceCallingFeature();
    if (isAPhone) {
        mNetworkController.addEmergencyListener(new NetworkControllerImpl.EmergencyListener() {

            @Override
            public void setEmergencyCallsOnly(boolean emergencyOnly) {
                mHeader.setShowEmergencyCallsOnly(emergencyOnly);
            }
        });
    }
    mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
    mShowCarrierInPanel = (mCarrierLabel != null);
    if (DEBUG)
        Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel);
    if (mShowCarrierInPanel) {
        mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
        mNetworkController.addCarrierLabel(new NetworkControllerImpl.CarrierLabelListener() {

            @Override
            public void setCarrierLabel(String label) {
                mCarrierLabel.setText(label);
                if (mNetworkController.hasMobileDataFeature()) {
                    if (TextUtils.isEmpty(label)) {
                        mCarrierLabel.setVisibility(View.GONE);
                    } else {
                        mCarrierLabel.setVisibility(View.VISIBLE);
                    }
                }
            }
        });
    }
    mFlashlightController = new FlashlightController(mContext);
    mKeyguardBottomArea.setFlashlightController(mFlashlightController);
    mKeyguardBottomArea.setPhoneStatusBar(this);
    mAccessibilityController = new AccessibilityController(mContext);
    mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
    mNextAlarmController = new NextAlarmController(mContext);
    mKeyguardMonitor = new KeyguardMonitor();
    if (UserSwitcherController.isUserSwitcherAvailable(UserManager.get(mContext))) {
        mUserSwitcherController = new UserSwitcherController(mContext, mKeyguardMonitor);
    }
    mKeyguardUserSwitcher = new KeyguardUserSwitcher(mContext, (ViewStub) mStatusBarWindow.findViewById(R.id.keyguard_user_switcher), mKeyguardStatusBar, mNotificationPanel, mUserSwitcherController);
    // Set up the quick settings tile panel
    mQSPanel = (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);
    if (mQSPanel != null) {
        final QSTileHost qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mNetworkController, mZenModeController, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        mQSPanel.setHost(qsh);
        mQSPanel.setTiles(qsh.getTiles());
        mBrightnessMirrorController = new BrightnessMirrorController(mStatusBarWindow);
        mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
        mHeader.setQSPanel(mQSPanel);
        qsh.setCallback(new QSTileHost.Callback() {

            @Override
            public void onTilesChanged() {
                mQSPanel.setTiles(qsh.getTiles());
            }
        });
    }
    // User info. Trigger first load.
    mHeader.setUserInfoController(mUserInfoController);
    mKeyguardStatusBar.setUserInfoController(mUserInfoController);
    mUserInfoController.reloadUserInfo();
    mHeader.setBatteryController(mBatteryController);
    mBatteryView = (BatteryMeterView) mStatusBarView.findViewById(R.id.battery);
    mBatteryView.setBatteryController(mBatteryController);
    mKeyguardStatusBar.setBatteryController(mBatteryController);
    mHeader.setNextAlarmController(mNextAlarmController);
    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
    mBroadcastReceiver.onReceive(mContext, new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
    // receive broadcasts
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    filter.addAction(Intent.ACTION_SCREEN_ON);
    if (DEBUG_MEDIA_FAKE_ARTWORK) {
        filter.addAction("fake_artwork");
    }
    filter.addAction(ACTION_DEMO);
    context.registerReceiverAsUser(mBroadcastReceiver, UserHandle.ALL, filter, null, null);
    // listen for USER_SETUP_COMPLETE setting (per-user)
    resetUserSetupObserver();
    startGlyphRasterizeHack();
    return mStatusBarView;
}
#method_after
// ================================================================================
// Constructing the view
protected PhoneStatusBarView makeStatusBarView() {
    final Context context = mContext;
    Resources res = context.getResources();
    mScreenWidth = (float) context.getResources().getDisplayMetrics().widthPixels;
    mMinBrightness = context.getResources().getInteger(com.android.internal.R.integer.config_screenBrightnessDim);
    // populates mDisplayMetrics
    updateDisplaySize();
    updateResources();
    mIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    if (isMSim()) {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.msim_super_status_bar, null);
    } else {
        mStatusBarWindow = (StatusBarWindowView) View.inflate(context, R.layout.super_status_bar, null);
    }
    mStatusBarWindow.mService = this;
    mStatusBarWindow.setOnTouchListener(new View.OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            checkUserAutohide(v, event);
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                if (mExpandedVisible) {
                    animateCollapsePanels();
                }
            }
            return mStatusBarWindow.onTouchEvent(event);
        }
    });
    if (isMSim()) {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.msim_status_bar);
    } else {
        mStatusBarView = (PhoneStatusBarView) mStatusBarWindow.findViewById(R.id.status_bar);
    }
    mStatusBarView.setBar(this);
    PanelHolder holder;
    if (isMSim()) {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.msim_panel_holder);
    } else {
        holder = (PanelHolder) mStatusBarWindow.findViewById(R.id.panel_holder);
    }
    mStatusBarView.setPanelHolder(holder);
    mNotificationPanel = (NotificationPanelView) mStatusBarWindow.findViewById(R.id.notification_panel);
    mNotificationPanel.setStatusBar(this);
    if (!ActivityManager.isHighEndGfx()) {
        mStatusBarWindow.setBackground(null);
        mNotificationPanel.setBackground(new FastColorDrawable(context.getResources().getColor(R.color.notification_panel_solid_background)));
    }
    if (ENABLE_HEADS_UP) {
        mHeadsUpNotificationView = (HeadsUpNotificationView) View.inflate(context, R.layout.heads_up, null);
        mHeadsUpNotificationView.setVisibility(View.GONE);
        mHeadsUpNotificationView.setBar(this);
    }
    if (MULTIUSER_DEBUG) {
        mNotificationPanelDebugText = (TextView) mNotificationPanel.findViewById(R.id.header_debug_info);
        mNotificationPanelDebugText.setVisibility(View.VISIBLE);
    }
    updateShowSearchHoldoff();
    try {
        boolean showNav = mWindowManagerService.hasNavigationBar();
        if (DEBUG)
            Log.v(TAG, "hasNavigationBar=" + showNav);
        if (showNav) {
            mNavigationBarView = (NavigationBarView) View.inflate(context, R.layout.navigation_bar, null);
            mNavigationBarView.setDisabledFlags(mDisabled);
            mNavigationBarView.setBar(this);
            mNavigationBarView.setOnVerticalChangedListener(new NavigationBarView.OnVerticalChangedListener() {

                @Override
                public void onVerticalChanged(boolean isVertical) {
                    if (mSearchPanelView != null) {
                        mSearchPanelView.setHorizontal(isVertical);
                    }
                    mNotificationPanel.setQsScrimEnabled(!isVertical);
                }
            });
            mNavigationBarView.setOnTouchListener(new View.OnTouchListener() {

                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    checkUserAutohide(v, event);
                    return false;
                }
            });
        }
    } catch (RemoteException ex) {
    // no window manager? good luck with that
    }
    // figure out which pixel-format to use for the status bar.
    mPixelFormat = PixelFormat.OPAQUE;
    mSystemIconArea = (LinearLayout) mStatusBarView.findViewById(R.id.system_icon_area);
    mSystemIcons = (LinearLayout) mStatusBarView.findViewById(R.id.system_icons);
    mStatusIcons = (LinearLayout) mStatusBarView.findViewById(R.id.statusIcons);
    mNotificationIconArea = mStatusBarView.findViewById(R.id.notification_icon_area_inner);
    mNotificationIcons = (IconMerger) mStatusBarView.findViewById(R.id.notificationIcons);
    mMoreIcon = mStatusBarView.findViewById(R.id.moreIcon);
    mNotificationIcons.setOverflowIndicator(mMoreIcon);
    mStatusBarContents = (LinearLayout) mStatusBarView.findViewById(R.id.status_bar_contents);
    mCenterClockLayout = (LinearLayout) mStatusBarView.findViewById(R.id.center_clock_layout);
    mStackScroller = (NotificationStackScrollLayout) mStatusBarWindow.findViewById(R.id.notification_stack_scroller);
    mStackScroller.setLongPressListener(getNotificationLongClicker());
    mStackScroller.setPhoneStatusBar(this);
    mKeyguardIconOverflowContainer = (NotificationOverflowContainer) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_keyguard_overflow, mStackScroller, false);
    mKeyguardIconOverflowContainer.setOnActivatedListener(this);
    mKeyguardIconOverflowContainer.setOnClickListener(mOverflowClickListener);
    mStackScroller.addView(mKeyguardIconOverflowContainer);
    SpeedBumpView speedBump = (SpeedBumpView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_speed_bump, mStackScroller, false);
    mStackScroller.setSpeedBumpView(speedBump);
    mEmptyShadeView = (EmptyShadeView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_no_notifications, mStackScroller, false);
    mStackScroller.setEmptyShadeView(mEmptyShadeView);
    mDismissView = (DismissView) LayoutInflater.from(mContext).inflate(R.layout.status_bar_notification_dismiss_all, mStackScroller, false);
    mDismissView.setOnButtonClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            clearAllNotifications();
        }
    });
    mStackScroller.setDismissView(mDismissView);
    mExpandedContents = mStackScroller;
    mBackdrop = (BackDropView) mStatusBarWindow.findViewById(R.id.backdrop);
    mBackdropFront = (ImageView) mBackdrop.findViewById(R.id.backdrop_front);
    mBackdropBack = (ImageView) mBackdrop.findViewById(R.id.backdrop_back);
    ScrimView scrimBehind = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_behind);
    ScrimView scrimInFront = (ScrimView) mStatusBarWindow.findViewById(R.id.scrim_in_front);
    mScrimController = new ScrimController(scrimBehind, scrimInFront, mScrimSrcModeEnabled);
    mScrimController.setBackDropView(mBackdrop);
    mStatusBarView.setScrimController(mScrimController);
    mDozeScrimController = new DozeScrimController(mScrimController, context);
    mHeader = (StatusBarHeaderView) mStatusBarWindow.findViewById(R.id.header);
    mHeader.setActivityStarter(this);
    mKeyguardStatusBar = (KeyguardStatusBarView) mStatusBarWindow.findViewById(R.id.keyguard_header);
    mStatusIconsKeyguard = (LinearLayout) mKeyguardStatusBar.findViewById(R.id.statusIcons);
    mKeyguardStatusView = mStatusBarWindow.findViewById(R.id.keyguard_status_view);
    mKeyguardBottomArea = (KeyguardBottomAreaView) mStatusBarWindow.findViewById(R.id.keyguard_bottom_area);
    mKeyguardBottomArea.setActivityStarter(this);
    mKeyguardIndicationController = new KeyguardIndicationController(mContext, (KeyguardIndicationTextView) mStatusBarWindow.findViewById(R.id.keyguard_indication_text));
    mKeyguardBottomArea.setKeyguardIndicationController(mKeyguardIndicationController);
    mTickerEnabled = res.getBoolean(R.bool.enable_ticker);
    if (mTickerEnabled) {
        final ViewStub tickerStub = (ViewStub) mStatusBarView.findViewById(R.id.ticker_stub);
        if (tickerStub != null) {
            mTickerView = tickerStub.inflate();
            mTicker = new MyTicker(context, mStatusBarView);
            TickerView tickerView = (TickerView) mStatusBarView.findViewById(R.id.tickerText);
            tickerView.mTicker = mTicker;
        }
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    // set the inital view visibility
    setAreThereNotifications();
    // Background thread for any controllers that need it.
    mHandlerThread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
    mHandlerThread.start();
    mBatteryLevel = (TextView) mStatusBarView.findViewById(R.id.battery_level_text);
    // Other icons
    // will post a notification
    mLocationController = new LocationControllerImpl(mContext);
    mBatteryController = new BatteryController(mContext);
    mBatteryController.addStateChangedCallback(new BatteryStateChangeCallback() {

        @Override
        public void onPowerSaveChanged() {
            mHandler.post(mCheckBarModes);
            if (mDozeServiceHost != null) {
                mDozeServiceHost.firePowerSaveChanged(mBatteryController.isPowerSave());
            }
        }

        @Override
        public void onBatteryLevelChanged(int level, boolean pluggedIn, boolean charging) {
            mBatteryIsCharging = charging;
            mBatteryChargeLevel = level;
            loadShowBatteryTextSetting();
            updateBatteryLevelText();
            mHeader.updateBatteryLevel(level, charging);
            mKeyguardStatusBar.updateBatteryLevel(level, charging);
        }
    });
    mHotspotController = new HotspotControllerImpl(mContext);
    mBluetoothController = new BluetoothControllerImpl(mContext, mHandlerThread.getLooper());
    mSecurityController = new SecurityControllerImpl(mContext);
    if (mContext.getResources().getBoolean(R.bool.config_showRotationLock)) {
        mRotationLockController = new RotationLockControllerImpl(mContext);
    }
    mUserInfoController = new UserInfoController(mContext);
    mVolumeComponent = getComponent(VolumeComponent.class);
    mZenModeController = mVolumeComponent.getZenController();
    mCastController = new CastControllerImpl(mContext);
    mSuController = new SuControllerImpl(mContext);
    if (isMSim()) {
        mMSimNetworkController = new MSimNetworkControllerImpl(mContext);
        MSimSignalClusterView signalCluster = (MSimSignalClusterView) mStatusBarView.findViewById(R.id.msim_signal_cluster);
        MSimSignalClusterView signalClusterKeyguard = (MSimSignalClusterView) mKeyguardStatusBar.findViewById(R.id.msim_signal_cluster);
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            mMSimNetworkController.addSignalCluster(signalCluster, i);
            mMSimNetworkController.addSignalCluster(signalClusterKeyguard, i);
        }
        signalCluster.setNetworkController(mMSimNetworkController);
        signalClusterKeyguard.setNetworkController(mMSimNetworkController);
        mMSimNetworkController.addEmergencyLabelView(mHeader);
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mSubsLabel = (TextView) mStatusBarWindow.findViewById(R.id.subs_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel + "operator label=" + mSubsLabel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mMSimNetworkController.hasMobileDataFeature()) {
                mMSimNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mMSimNetworkController.addCombinedLabelView(mCarrierLabel);
            }
            mSubsLabel.setVisibility(View.VISIBLE);
            mMSimNetworkController.addSubsLabelView(mSubsLabel);
        // set up the dynamic hide/show of the label
        // mPile.setOnSizeChangedListener(new OnSizeChangedListener() {
        // @Override
        // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
        // updateCarrierLabelVisibility(false);
        // }
        // });
        }
    } else {
        mNetworkController = new NetworkControllerImpl(mContext);
        final SignalClusterView signalCluster = (SignalClusterView) mStatusBarView.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterKeyguard = (SignalClusterView) mKeyguardStatusBar.findViewById(R.id.signal_cluster);
        final SignalClusterView signalClusterQs = (SignalClusterView) mHeader.findViewById(R.id.signal_cluster);
        mNetworkController.addSignalCluster(signalCluster);
        mNetworkController.addSignalCluster(signalClusterKeyguard);
        mNetworkController.addSignalCluster(signalClusterQs);
        signalCluster.setSecurityController(mSecurityController);
        signalCluster.setNetworkController(mNetworkController);
        signalClusterKeyguard.setSecurityController(mSecurityController);
        signalClusterKeyguard.setNetworkController(mNetworkController);
        signalClusterQs.setSecurityController(mSecurityController);
        signalClusterQs.setNetworkController(mNetworkController);
        final boolean isAPhone = mNetworkController.hasVoiceCallingFeature();
        if (isAPhone) {
            mNetworkController.addEmergencyLabelView(mHeader);
        }
        mCarrierLabel = (TextView) mStatusBarWindow.findViewById(R.id.carrier_label);
        mShowCarrierInPanel = (mCarrierLabel != null);
        if (DEBUG)
            Log.v(TAG, "carrierlabel=" + mCarrierLabel + " show=" + mShowCarrierInPanel);
        if (mShowCarrierInPanel) {
            mCarrierLabel.setVisibility(mCarrierLabelVisible ? View.VISIBLE : View.INVISIBLE);
            // for other devices, we show whatever network is connected
            if (mNetworkController.hasMobileDataFeature()) {
                mNetworkController.addMobileLabelView(mCarrierLabel);
            } else {
                mNetworkController.addCombinedLabelView(mCarrierLabel);
            }
        }
    // set up the dynamic hide/show of the label
    // TODO: uncomment, handle this for the Stack scroller aswell
    // ((NotificationRowLayout) mStackScroller)
    // .setOnSizeChangedListener(new OnSizeChangedListener() {
    // @Override
    // public void onSizeChanged(View view, int w, int h, int oldw, int oldh) {
    // updateCarrierLabelVisibility(false);
    }
    mFlashlightController = new FlashlightController(mContext);
    mKeyguardBottomArea.setFlashlightController(mFlashlightController);
    mKeyguardBottomArea.setPhoneStatusBar(this);
    mAccessibilityController = new AccessibilityController(mContext);
    mKeyguardBottomArea.setAccessibilityController(mAccessibilityController);
    mNextAlarmController = new NextAlarmController(mContext);
    mKeyguardMonitor = new KeyguardMonitor();
    mUserSwitcherController = new UserSwitcherController(mContext, mKeyguardMonitor);
    mKeyguardUserSwitcher = new KeyguardUserSwitcher(mContext, (ViewStub) mStatusBarWindow.findViewById(R.id.keyguard_user_switcher), mKeyguardStatusBar, mNotificationPanel, mUserSwitcherController);
    // Set up the quick settings tile panel
    mQSPanel = (QSPanel) mStatusBarWindow.findViewById(R.id.quick_settings_panel);
    if (mQSPanel != null) {
        final QSTileHost qsh;
        if (isMSim()) {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mMSimNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        } else {
            qsh = new QSTileHost(mContext, this, mBluetoothController, mLocationController, mRotationLockController, mNetworkController, mZenModeController, mVolumeComponent, mHotspotController, mCastController, mFlashlightController, mUserSwitcherController, mKeyguardMonitor, mSecurityController);
        }
        mQSPanel.setHost(qsh);
        mQSPanel.setTiles(qsh.getTiles());
        mBrightnessMirrorController = new BrightnessMirrorController(mStatusBarWindow);
        mQSPanel.setBrightnessMirror(mBrightnessMirrorController);
        mHeader.setQSPanel(mQSPanel);
        qsh.setCallback(new QSTileHost.Callback() {

            @Override
            public void onTilesChanged() {
                mQSPanel.setTiles(qsh.getTiles());
            }
        });
    }
    // task manager
    if (mContext.getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManagerPanel = (LinearLayout) mStatusBarWindow.findViewById(R.id.task_manager_panel);
        mTaskManager = new TaskManager(mContext, mTaskManagerPanel);
        mTaskManager.setActivityStarter(this);
        mTaskManagerButton = (ImageButton) mHeader.findViewById(R.id.task_manager_button);
        mTaskManagerButton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                showTaskList = !showTaskList;
                mNotificationPanel.setTaskManagerVisibility(showTaskList);
            }
        });
    }
    // User info. Trigger first load.
    mHeader.setUserInfoController(mUserInfoController);
    mKeyguardStatusBar.setUserInfoController(mUserInfoController);
    mUserInfoController.reloadUserInfo();
    mHeader.setBatteryController(mBatteryController);
    mBatteryView = (BatteryMeterView) mStatusBarView.findViewById(R.id.battery);
    mBatteryView.setBatteryController(mBatteryController);
    mKeyguardStatusBar.setBatteryController(mBatteryController);
    mHeader.setNextAlarmController(mNextAlarmController);
    PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
    mBroadcastReceiver.onReceive(mContext, new Intent(pm.isScreenOn() ? Intent.ACTION_SCREEN_ON : Intent.ACTION_SCREEN_OFF));
    // receive broadcasts
    IntentFilter filter = new IntentFilter();
    filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    filter.addAction(Intent.ACTION_SCREEN_ON);
    if (DEBUG_MEDIA_FAKE_ARTWORK) {
        filter.addAction("fake_artwork");
    }
    filter.addAction(ACTION_DEMO);
    context.registerReceiver(mBroadcastReceiver, filter);
    // listen for USER_SETUP_COMPLETE setting (per-user)
    resetUserSetupObserver();
    startGlyphRasterizeHack();
    return mStatusBarView;
}
#end_block

#method_before
private void performDismissAllAnimations(ArrayList<View> hideAnimatedList) {
    Runnable animationFinishAction = new Runnable() {

        @Override
        public void run() {
            mStackScroller.post(new Runnable() {

                @Override
                public void run() {
                    mStackScroller.setDismissAllInProgress(false);
                }
            });
            animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
        }
    };
    // let's disable our normal animations
    mStackScroller.setDismissAllInProgress(true);
    // Decrease the delay for every row we animate to give the sense of
    // accelerating the swipes
    int rowDelayDecrement = 10;
    int currentDelay = 140;
    int totalDelay = 180;
    int numItems = hideAnimatedList.size();
    for (int i = numItems - 1; i >= 0; i--) {
        View view = hideAnimatedList.get(i);
        Runnable endRunnable = null;
        if (i == 0) {
            endRunnable = animationFinishAction;
        }
        mStackScroller.dismissViewAnimated(view, endRunnable, totalDelay, 260);
        currentDelay = Math.max(50, currentDelay - rowDelayDecrement);
        totalDelay += currentDelay;
    }
}
#method_after
private void performDismissAllAnimations(ArrayList<View> hideAnimatedList) {
    Runnable animationFinishAction = new Runnable() {

        @Override
        public void run() {
            mStackScroller.post(new Runnable() {

                @Override
                public void run() {
                    mStackScroller.setDismissAllInProgress(false);
                }
            });
            animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
        }
    };
    // let's disable our normal animations
    mStackScroller.setDismissAllInProgress(true);
    // Decrease the delay for every row we animate to give the sense of
    // accelerating the swipes
    int rowDelayDecrement = 10;
    int currentDelay = 140;
    int totalDelay = 0;
    int numItems = hideAnimatedList.size();
    for (int i = 0; i < numItems; i++) {
        View view = hideAnimatedList.get(i);
        Runnable endRunnable = null;
        if (i == numItems - 1) {
            endRunnable = animationFinishAction;
        }
        mStackScroller.dismissViewAnimated(view, endRunnable, totalDelay, 260);
        currentDelay = Math.max(50, currentDelay - rowDelayDecrement);
        totalDelay += currentDelay;
    }
}
#end_block

#method_before
private void addHeadsUpView() {
    if (!mHeadsUpViewAttached) {
        int headsUpHeight = mContext.getResources().getDimensionPixelSize(R.dimen.heads_up_window_height);
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(LayoutParams.MATCH_PARENT, headsUpHeight, // above the status bar!
        WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH, PixelFormat.TRANSLUCENT);
        lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
        lp.gravity = Gravity.TOP;
        lp.setTitle("Heads Up");
        lp.packageName = mContext.getPackageName();
        lp.windowAnimations = R.style.Animation_StatusBar_HeadsUp;
        mWindowManager.addView(mHeadsUpNotificationView, lp);
        mHeadsUpViewAttached = true;
    }
}
#method_after
private void addHeadsUpView() {
    int headsUpHeight = mContext.getResources().getDimensionPixelSize(R.dimen.heads_up_window_height);
    WindowManager.LayoutParams lp = new WindowManager.LayoutParams(LayoutParams.MATCH_PARENT, headsUpHeight, // above the status bar!
    WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH, PixelFormat.TRANSLUCENT);
    lp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
    lp.gravity = Gravity.TOP;
    lp.setTitle("Heads Up");
    lp.packageName = mContext.getPackageName();
    lp.windowAnimations = R.style.Animation_StatusBar_HeadsUp;
    mWindowManager.addView(mHeadsUpNotificationView, lp);
}
#end_block

#method_before
private void removeHeadsUpView() {
    if (mHeadsUpViewAttached) {
        mWindowManager.removeView(mHeadsUpNotificationView);
        mHeadsUpViewAttached = false;
    }
}
#method_after
private void removeHeadsUpView() {
    mWindowManager.removeView(mHeadsUpNotificationView);
}
#end_block

#method_before
@Override
public void addNotification(StatusBarNotification notification, RankingMap ranking) {
    if (DEBUG)
        Log.d(TAG, "addNotification key=" + notification.getKey());
    if (!mDisableNotificationAlerts && shouldInterrupt(notification)) {
        if (DEBUG)
            Log.d(TAG, "launching notification in heads up mode");
        Entry interruptionCandidate = new Entry(notification, null);
        ViewGroup holder = mHeadsUpNotificationView.getHolder();
        if (inflateViewsForHeadsUp(interruptionCandidate, holder)) {
            // 1. Populate mHeadsUpNotificationView
            mHeadsUpNotificationView.showNotification(interruptionCandidate);
            // do not show the notification in the shade, yet.
            return;
        }
    }
    Entry shadeEntry = createNotificationViews(notification);
    if (shadeEntry == null) {
        return;
    }
    if (notification.getNotification().fullScreenIntent != null) {
        // Stop screensaver if the notification has a full-screen intent.
        // (like an incoming phone call)
        awakenDreams();
        // not immersive & a full-screen alert should be shown
        if (DEBUG)
            Log.d(TAG, "Notification has fullScreenIntent; sending fullScreenIntent");
        try {
            EventLog.writeEvent(EventLogTags.SYSUI_FULLSCREEN_NOTIFICATION, notification.getKey());
            notification.getNotification().fullScreenIntent.send();
        } catch (PendingIntent.CanceledException e) {
        }
    } else {
        // show the ticker if there isn't already a heads up
        if (mHeadsUpNotificationView.getEntry() == null) {
            tick(notification, true);
        }
    }
    addNotificationViews(shadeEntry, ranking);
    // Recalculate the position of the sliding windows and the titles.
    setAreThereNotifications();
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
}
#method_after
@Override
public void addNotification(StatusBarNotification notification, RankingMap ranking) {
    if (DEBUG)
        Log.d(TAG, "addNotification key=" + notification.getKey());
    if (mUseHeadsUp && shouldInterrupt(notification)) {
        if (DEBUG)
            Log.d(TAG, "launching notification in heads up mode");
        Entry interruptionCandidate = new Entry(notification, null);
        ViewGroup holder = mHeadsUpNotificationView.getHolder();
        if (inflateViewsForHeadsUp(interruptionCandidate, holder)) {
            // 1. Populate mHeadsUpNotificationView
            mHeadsUpNotificationView.showNotification(interruptionCandidate);
            // do not show the notification in the shade, yet.
            return;
        }
    }
    Entry shadeEntry = createNotificationViews(notification);
    if (shadeEntry == null) {
        return;
    }
    if (notification.getNotification().fullScreenIntent != null) {
        // Stop screensaver if the notification has a full-screen intent.
        // (like an incoming phone call)
        awakenDreams();
        // not immersive & a full-screen alert should be shown
        if (DEBUG)
            Log.d(TAG, "Notification has fullScreenIntent; sending fullScreenIntent");
        try {
            notification.getNotification().fullScreenIntent.send();
        } catch (PendingIntent.CanceledException e) {
        }
    } else {
        // show the ticker if there isn't already a heads up
        if (mHeadsUpNotificationView.getEntry() == null) {
            tick(notification, true);
        }
    }
    addNotificationViews(shadeEntry, ranking);
    // Recalculate the position of the sliding windows and the titles.
    setAreThereNotifications();
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
}
#end_block

#method_before
@Override
public void resetHeadsUpDecayTimer() {
    mHandler.removeMessages(MSG_DECAY_HEADS_UP);
    if (!mDisableNotificationAlerts && mHeadsUpNotificationDecay > 0 && mHeadsUpNotificationView.isClearable()) {
        mHandler.sendEmptyMessageDelayed(MSG_DECAY_HEADS_UP, mHeadsUpNotificationDecay);
    }
}
#method_after
@Override
public void resetHeadsUpDecayTimer() {
    mHandler.removeMessages(MSG_DECAY_HEADS_UP);
    if (mUseHeadsUp && mHeadsUpNotificationDecay > 0 && mHeadsUpNotificationView.isClearable()) {
        mHandler.sendEmptyMessageDelayed(MSG_DECAY_HEADS_UP, mHeadsUpNotificationDecay);
    }
}
#end_block

#method_before
@Override
public void scheduleHeadsUpOpen() {
    mHandler.removeMessages(MSG_SHOW_HEADS_UP);
    mHandler.sendEmptyMessage(MSG_SHOW_HEADS_UP);
}
#method_after
@Override
public void scheduleHeadsUpOpen() {
    mHandler.sendEmptyMessage(MSG_SHOW_HEADS_UP);
}
#end_block

#method_before
// CommandQueue
@Override
public void scheduleHeadsUpClose() {
    mHandler.removeMessages(MSG_HIDE_HEADS_UP);
    mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
}
#method_after
@Override
public void scheduleHeadsUpClose() {
    mHandler.sendEmptyMessage(MSG_HIDE_HEADS_UP);
}
#end_block

#method_before
@Override
public void scheduleHeadsUpEscalation() {
    mHandler.removeMessages(MSG_ESCALATE_HEADS_UP);
    mHandler.sendEmptyMessage(MSG_ESCALATE_HEADS_UP);
}
#method_after
@Override
public void scheduleHeadsUpEscalation() {
    mHandler.sendEmptyMessage(MSG_ESCALATE_HEADS_UP);
}
#end_block

#method_before
@Override
public void removeNotification(String key, RankingMap ranking) {
    if (mHeadsUpNotificationView.getEntry() != null && key.equals(mHeadsUpNotificationView.getEntry().notification.getKey())) {
        mHeadsUpNotificationView.clear();
    }
    StatusBarNotification old = removeNotificationViews(key, ranking);
    if (SPEW)
        Log.d(TAG, "removeNotification key=" + key + " old=" + old);
    if (old != null) {
        // Cancel the ticker if it's still running
        if (mTickerEnabled) {
            mTicker.removeEntry(old);
        }
        // Recalculate the position of the sliding windows and the titles.
        updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
        if (CLOSE_PANEL_WHEN_EMPTIED && !hasActiveNotifications() && !mNotificationPanel.isTracking() && !mNotificationPanel.isQsExpanded()) {
            if (mState == StatusBarState.SHADE) {
                animateCollapsePanels();
            } else if (mState == StatusBarState.SHADE_LOCKED) {
                goToKeyguard();
            }
        }
    }
    setAreThereNotifications();
}
#method_after
@Override
public void removeNotification(String key, RankingMap ranking) {
    if (ENABLE_HEADS_UP && mHeadsUpNotificationView.getEntry() != null && key.equals(mHeadsUpNotificationView.getEntry().notification.getKey())) {
        mHeadsUpNotificationView.clear();
    }
    StatusBarNotification old = removeNotificationViews(key, ranking);
    if (SPEW)
        Log.d(TAG, "removeNotification key=" + key + " old=" + old);
    if (old != null) {
        // Cancel the ticker if it's still running
        if (mTickerEnabled) {
            mTicker.removeEntry(old);
        }
        // Recalculate the position of the sliding windows and the titles.
        updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
        if (CLOSE_PANEL_WHEN_EMPTIED && !hasActiveNotifications() && !mNotificationPanel.isTracking() && !mNotificationPanel.isQsExpanded()) {
            if (mState == StatusBarState.SHADE) {
                animateCollapsePanels();
            } else if (mState == StatusBarState.SHADE_LOCKED) {
                goToKeyguard();
            }
        }
    }
    setAreThereNotifications();
}
#end_block

#method_before
private void updateNotificationShade() {
    if (mStackScroller == null)
        return;
    // Do not modify the notifications during collapse.
    if (isCollapsing()) {
        addPostCollapseAction(new Runnable() {

            @Override
            public void run() {
                updateNotificationShade();
            }
        });
        return;
    }
    ArrayList<Entry> activeNotifications = mNotificationData.getActiveNotifications();
    ArrayList<ExpandableNotificationRow> toShow = new ArrayList<>(activeNotifications.size());
    final int N = activeNotifications.size();
    for (int i = 0; i < N; i++) {
        Entry ent = activeNotifications.get(i);
        int vis = ent.notification.getNotification().visibility;
        // Display public version of the notification if we need to redact.
        final boolean hideSensitive = !userAllowsPrivateNotificationsInPublic(ent.notification.getUserId());
        boolean sensitiveNote = vis == Notification.VISIBILITY_PRIVATE;
        boolean sensitivePackage = packageHasVisibilityOverride(ent.notification.getKey());
        boolean sensitive = (sensitiveNote && hideSensitive) || sensitivePackage;
        boolean showingPublic = sensitive && isLockscreenPublicMode();
        ent.row.setSensitive(sensitive);
        if (ent.autoRedacted && ent.legacy) {
            // for legacy auto redacted notifications.
            if (showingPublic) {
                ent.row.setShowingLegacyBackground(false);
            } else {
                ent.row.setShowingLegacyBackground(true);
            }
        }
        toShow.add(ent.row);
    }
    ArrayList<View> toRemove = new ArrayList<View>();
    for (int i = 0; i < mStackScroller.getChildCount(); i++) {
        View child = mStackScroller.getChildAt(i);
        if (!toShow.contains(child) && child instanceof ExpandableNotificationRow) {
            toRemove.add(child);
        }
    }
    for (View remove : toRemove) {
        mStackScroller.removeView(remove);
    }
    for (int i = 0; i < toShow.size(); i++) {
        View v = toShow.get(i);
        if (v.getParent() == null) {
            mStackScroller.addView(v);
        }
    }
    // So after all this work notifications still aren't sorted correctly.
    // Let's do that now by advancing through toShow and mStackScroller in
    // lock-step, making sure mStackScroller matches what we see in toShow.
    int j = 0;
    for (int i = 0; i < mStackScroller.getChildCount(); i++) {
        View child = mStackScroller.getChildAt(i);
        if (!(child instanceof ExpandableNotificationRow)) {
            // We don't care about non-notification views.
            continue;
        }
        if (child == toShow.get(j)) {
            // Everything is well, advance both lists.
            j++;
            continue;
        }
        // Oops, wrong notification at this position. Put the right one
        // here and advance both lists.
        mStackScroller.changeViewPosition(toShow.get(j), i);
        j++;
    }
    updateRowStates();
    updateSpeedbump();
    updateClearAll();
    updateEmptyShadeView();
    // Disable QS if device not provisioned.
    // If the user switcher is simple then disable QS during setup because
    // the user intends to use the lock screen user switcher, QS in not needed.
    mNotificationPanel.setQsExpansionEnabled(isDeviceProvisioned() && (mUserSetup || mUserSwitcherController == null || !mUserSwitcherController.isSimpleUserSwitcher()));
    mShadeUpdates.check();
}
#method_after
private void updateNotificationShade() {
    if (mStackScroller == null)
        return;
    // Do not modify the notifications during collapse.
    if (isCollapsing()) {
        addPostCollapseAction(new Runnable() {

            @Override
            public void run() {
                updateNotificationShade();
            }
        });
        return;
    }
    ArrayList<Entry> activeNotifications = mNotificationData.getActiveNotifications();
    ArrayList<ExpandableNotificationRow> toShow = new ArrayList<>(activeNotifications.size());
    final int N = activeNotifications.size();
    for (int i = 0; i < N; i++) {
        Entry ent = activeNotifications.get(i);
        int vis = ent.notification.getNotification().visibility;
        // Display public version of the notification if we need to redact.
        final boolean hideSensitive = !userAllowsPrivateNotificationsInPublic(ent.notification.getUserId());
        boolean sensitiveNote = vis == Notification.VISIBILITY_PRIVATE;
        boolean sensitivePackage = packageHasVisibilityOverride(ent.notification.getKey());
        boolean sensitive = (sensitiveNote && hideSensitive) || sensitivePackage;
        boolean showingPublic = sensitive && isLockscreenPublicMode();
        ent.row.setSensitive(sensitive);
        if (ent.autoRedacted && ent.legacy) {
            // for legacy auto redacted notifications.
            if (showingPublic) {
                ent.row.setShowingLegacyBackground(false);
            } else {
                ent.row.setShowingLegacyBackground(true);
            }
        }
        toShow.add(ent.row);
    }
    ArrayList<View> toRemove = new ArrayList<View>();
    for (int i = 0; i < mStackScroller.getChildCount(); i++) {
        View child = mStackScroller.getChildAt(i);
        if (!toShow.contains(child) && child instanceof ExpandableNotificationRow) {
            toRemove.add(child);
        }
    }
    for (View remove : toRemove) {
        mStackScroller.removeView(remove);
    }
    for (int i = 0; i < toShow.size(); i++) {
        View v = toShow.get(i);
        if (v.getParent() == null) {
            mStackScroller.addView(v);
        }
    }
    // So after all this work notifications still aren't sorted correctly.
    // Let's do that now by advancing through toShow and mStackScroller in
    // lock-step, making sure mStackScroller matches what we see in toShow.
    int j = 0;
    for (int i = 0; i < mStackScroller.getChildCount(); i++) {
        View child = mStackScroller.getChildAt(i);
        if (!(child instanceof ExpandableNotificationRow)) {
            // We don't care about non-notification views.
            continue;
        }
        if (child == toShow.get(j)) {
            // Everything is well, advance both lists.
            j++;
            continue;
        }
        // Oops, wrong notification at this position. Put the right one
        // here and advance both lists.
        mStackScroller.changeViewPosition(toShow.get(j), i);
        j++;
    }
    updateRowStates();
    updateSpeedbump();
    updateClearAll();
    updateEmptyShadeView();
    // Disable QS if device not provisioned.
    // If the user switcher is simple then disable QS during setup because
    // the user intends to use the lock screen user switcher, QS in not needed.
    mNotificationPanel.setQsExpansionEnabled(isDeviceProvisioned() && (!mUserSwitcherController.isSimpleUserSwitcher() || mUserSetup));
    mShadeUpdates.check();
}
#end_block

#method_before
@Override
protected void updateNotifications() {
    // TODO: Move this into updateNotificationIcons()?
    if (mNotificationIcons == null)
        return;
    mNotificationData.filterAndSort();
    updateNotificationShade();
    updateNotificationIcons();
}
#method_after
@Override
protected void updateNotifications() {
    if (!mHandler.hasMessages(MSG_UPDATE_NOTIFICATIONS)) {
        mHandler.sendEmptyMessage(MSG_UPDATE_NOTIFICATIONS);
    }
}
#end_block

#method_before
protected void updateCarrierLabelVisibility(boolean force) {
    // TODO: Handle this for the notification stack scroller as well
    if (!mShowCarrierInPanel)
        return;
    // i.e. when there aren't enough notifications to fill the panel.
    if (SPEW) {
        Log.d(TAG, String.format("stackScrollerh=%d scrollh=%d carrierh=%d", mStackScroller.getHeight(), mStackScroller.getHeight(), mCarrierLabelHeight));
    }
    // Emergency calls only is shown in the expanded header now.
    final boolean emergencyCallsShownElsewhere = true;
    final boolean makeVisible = !(emergencyCallsShownElsewhere && mNetworkController.isEmergencyOnly()) && mStackScroller.getHeight() < (mNotificationPanel.getHeight() - mCarrierLabelHeight - mStatusBarHeaderHeight) && mStackScroller.getVisibility() == View.VISIBLE && mState != StatusBarState.KEYGUARD;
    if (force || mCarrierLabelVisible != makeVisible) {
        mCarrierLabelVisible = makeVisible;
        if (DEBUG) {
            Log.d(TAG, "making carrier label " + (makeVisible ? "visible" : "invisible"));
        }
        mCarrierLabel.animate().cancel();
        if (makeVisible) {
            mCarrierLabel.setVisibility(View.VISIBLE);
        }
        mCarrierLabel.animate().alpha(makeVisible ? 1f : 0f).setDuration(150).setListener(makeVisible ? null : new AnimatorListenerAdapter() {

            @Override
            public void onAnimationEnd(Animator animation) {
                if (!mCarrierLabelVisible) {
                    // race
                    mCarrierLabel.setVisibility(View.INVISIBLE);
                    mCarrierLabel.setAlpha(0f);
                }
            }
        }).start();
    }
}
#method_after
protected void updateCarrierLabelVisibility(boolean force) {
    // TODO: Handle this for the notification stack scroller as well
    if (!mShowCarrierInPanel)
        return;
    // i.e. when there aren't enough notifications to fill the panel.
    if (SPEW) {
        Log.d(TAG, String.format("stackScrollerh=%d scrollh=%d carrierh=%d", mStackScroller.getHeight(), mStackScroller.getHeight(), mCarrierLabelHeight));
    }
    // Emergency calls only is shown in the expanded header now.
    final boolean emergencyCallsShownElsewhere = mContext.getResources().getBoolean(R.bool.config_showEmergencyCallLabelOnly);
    final boolean makeVisible;
    if (isMSim()) {
        makeVisible = !(emergencyCallsShownElsewhere && mMSimNetworkController.isEmergencyOnly()) && mStackScroller.getHeight() < (mNotificationPanel.getHeight() - mCarrierLabelHeight - mStatusBarHeaderHeight) && mStackScroller.getVisibility() == View.VISIBLE && mState != StatusBarState.KEYGUARD;
    } else {
        makeVisible = !(emergencyCallsShownElsewhere && mNetworkController.isEmergencyOnly()) && mStackScroller.getHeight() < (mNotificationPanel.getHeight() - mCarrierLabelHeight - mStatusBarHeaderHeight) && mStackScroller.getVisibility() == View.VISIBLE && mState != StatusBarState.KEYGUARD;
    }
    if (force || mCarrierLabelVisible != makeVisible) {
        mCarrierLabelVisible = makeVisible;
        if (DEBUG) {
            Log.d(TAG, "making carrier label " + (makeVisible ? "visible" : "invisible"));
        }
        mCarrierLabel.animate().cancel();
        if (makeVisible) {
            mCarrierLabel.setVisibility(View.VISIBLE);
        }
        mCarrierLabel.animate().alpha(makeVisible ? 1f : 0f).setDuration(150).setListener(makeVisible ? null : new AnimatorListenerAdapter() {

            @Override
            public void onAnimationEnd(Animator animation) {
                if (!mCarrierLabelVisible) {
                    // race
                    mCarrierLabel.setVisibility(View.INVISIBLE);
                    mCarrierLabel.setAlpha(0f);
                }
            }
        }).start();
    }
}
#end_block

#method_before
public void showClock(boolean show) {
    if (mStatusBarView == null)
        return;
    ContentResolver resolver = mContext.getContentResolver();
    View clock = mStatusBarView.findViewById(R.id.clock);
    View cclock = mStatusBarView.findViewById(R.id.center_clock);
    if (mClockLocation == 0 && clock != null) {
        clock.setVisibility(show ? (mShowClock ? View.VISIBLE : View.GONE) : View.GONE);
    }
    if (mClockLocation == 1 && cclock != null) {
        cclock.setVisibility(show ? (mShowClock ? View.VISIBLE : View.GONE) : View.GONE);
    }
}
#method_after
public void showClock(boolean show) {
    if (mStatusBarView == null)
        return;
    ContentResolver resolver = mContext.getContentResolver();
    View clock = mStatusBarView.findViewById(R.id.clock);
    View cclock = mStatusBarView.findViewById(R.id.center_clock);
    boolean showClock = (Settings.System.getIntForUser(resolver, Settings.System.STATUS_BAR_CLOCK, 1, UserHandle.USER_CURRENT) == 1);
    int clockLocation = Settings.System.getIntForUser(resolver, Settings.System.STATUSBAR_CLOCK_STYLE, 0, UserHandle.USER_CURRENT);
    if (clockLocation == 0 && clock != null) {
        clock.setVisibility(show ? (showClock ? View.VISIBLE : View.GONE) : View.GONE);
    }
    if (clockLocation == 1 && cclock != null) {
        cclock.setVisibility(show ? (showClock ? View.VISIBLE : View.GONE) : View.GONE);
    }
}
#end_block

#method_before
public void disable(int state, boolean animate) {
    mDisabledUnmodified = state;
    state = adjustDisableFlags(state);
    final int old = mDisabled;
    final int diff = state ^ old;
    mDisabled = state;
    if (DEBUG) {
        Log.d(TAG, String.format("disable: 0x%08x -> 0x%08x (diff: 0x%08x)", old, state, diff));
    }
    StringBuilder flagdbg = new StringBuilder();
    flagdbg.append("disable: < ");
    flagdbg.append(((state & StatusBarManager.DISABLE_EXPAND) != 0) ? "EXPAND" : "expand");
    flagdbg.append(((diff & StatusBarManager.DISABLE_EXPAND) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "ICONS" : "icons");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "ALERTS" : "alerts");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "SYSTEM_INFO" : "system_info");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_BACK) != 0) ? "BACK" : "back");
    flagdbg.append(((diff & StatusBarManager.DISABLE_BACK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_HOME) != 0) ? "HOME" : "home");
    flagdbg.append(((diff & StatusBarManager.DISABLE_HOME) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_RECENT) != 0) ? "RECENT" : "recent");
    flagdbg.append(((diff & StatusBarManager.DISABLE_RECENT) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_CLOCK) != 0) ? "CLOCK" : "clock");
    flagdbg.append(((diff & StatusBarManager.DISABLE_CLOCK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SEARCH) != 0) ? "SEARCH" : "search");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SEARCH) != 0) ? "* " : " ");
    flagdbg.append(">");
    Log.d(TAG, flagdbg.toString());
    if ((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
        mSystemIconArea.animate().cancel();
        mCenterClockLayout.animate().cancel();
        if ((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
            animateStatusBarHide(mSystemIconArea, animate);
            if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
                animateStatusBarHide(mCenterClockLayout, animate);
            }
        } else {
            animateStatusBarShow(mSystemIconArea, animate);
            if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
                animateStatusBarShow(mCenterClockLayout, animate);
            }
        }
    }
    if ((diff & StatusBarManager.DISABLE_CLOCK) != 0) {
        boolean show = (state & StatusBarManager.DISABLE_CLOCK) == 0;
        showClock(show);
    }
    if ((diff & StatusBarManager.DISABLE_EXPAND) != 0) {
        if ((state & StatusBarManager.DISABLE_EXPAND) != 0) {
            animateCollapsePanels();
        }
    }
    if ((diff & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK | StatusBarManager.DISABLE_SEARCH)) != 0) {
        // the nav bar will take care of these
        if (mNavigationBarView != null)
            mNavigationBarView.setDisabledFlags(state);
        if ((state & StatusBarManager.DISABLE_RECENT) != 0) {
            // close recents if it's visible
            mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
            mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
        if ((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
            if (mTicking) {
                haltTicker();
            }
            animateStatusBarHide(mNotificationIconArea, animate);
        } else {
            animateStatusBarShow(mNotificationIconArea, animate);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
        boolean wasDisabled = mDisableNotificationAlerts;
        mDisableNotificationAlerts = (state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
        if (wasDisabled != mDisableNotificationAlerts) {
            if (mDisableNotificationAlerts) {
                if (DEBUG)
                    Log.d(TAG, "dismissing any existing heads" + "up notification on disable event");
                setHeadsUpVisibility(false);
                mHeadsUpNotificationView.release();
                removeHeadsUpView();
            } else {
                addHeadsUpView();
            }
        }
    }
}
#method_after
public void disable(int state, boolean animate) {
    mDisabledUnmodified = state;
    state = adjustDisableFlags(state);
    final int old = mDisabled;
    final int diff = state ^ old;
    mDisabled = state;
    if (DEBUG) {
        Log.d(TAG, String.format("disable: 0x%08x -> 0x%08x (diff: 0x%08x)", old, state, diff));
    }
    StringBuilder flagdbg = new StringBuilder();
    flagdbg.append("disable: < ");
    flagdbg.append(((state & StatusBarManager.DISABLE_EXPAND) != 0) ? "EXPAND" : "expand");
    flagdbg.append(((diff & StatusBarManager.DISABLE_EXPAND) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "ICONS" : "icons");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "ALERTS" : "alerts");
    flagdbg.append(((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "SYSTEM_INFO" : "system_info");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_BACK) != 0) ? "BACK" : "back");
    flagdbg.append(((diff & StatusBarManager.DISABLE_BACK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_HOME) != 0) ? "HOME" : "home");
    flagdbg.append(((diff & StatusBarManager.DISABLE_HOME) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_RECENT) != 0) ? "RECENT" : "recent");
    flagdbg.append(((diff & StatusBarManager.DISABLE_RECENT) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_CLOCK) != 0) ? "CLOCK" : "clock");
    flagdbg.append(((diff & StatusBarManager.DISABLE_CLOCK) != 0) ? "* " : " ");
    flagdbg.append(((state & StatusBarManager.DISABLE_SEARCH) != 0) ? "SEARCH" : "search");
    flagdbg.append(((diff & StatusBarManager.DISABLE_SEARCH) != 0) ? "* " : " ");
    flagdbg.append(">");
    Log.d(TAG, flagdbg.toString());
    if ((diff & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
        mSystemIconArea.animate().cancel();
        mCenterClockLayout.animate().cancel();
        if ((state & StatusBarManager.DISABLE_SYSTEM_INFO) != 0) {
            animateStatusBarHide(mSystemIconArea, animate);
            animateStatusBarHide(mCenterClockLayout, animate);
        } else {
            animateStatusBarShow(mSystemIconArea, animate);
            animateStatusBarShow(mCenterClockLayout, animate);
        }
    }
    if ((diff & StatusBarManager.DISABLE_CLOCK) != 0) {
        boolean show = (state & StatusBarManager.DISABLE_CLOCK) == 0;
        showClock(show);
    }
    if ((diff & StatusBarManager.DISABLE_EXPAND) != 0) {
        if ((state & StatusBarManager.DISABLE_EXPAND) != 0) {
            animateCollapsePanels();
        }
    }
    if ((diff & (StatusBarManager.DISABLE_HOME | StatusBarManager.DISABLE_RECENT | StatusBarManager.DISABLE_BACK | StatusBarManager.DISABLE_SEARCH)) != 0) {
        // the nav bar will take care of these
        if (mNavigationBarView != null)
            mNavigationBarView.setDisabledFlags(state);
        if ((state & StatusBarManager.DISABLE_RECENT) != 0) {
            // close recents if it's visible
            mHandler.removeMessages(MSG_HIDE_RECENT_APPS);
            mHandler.sendEmptyMessage(MSG_HIDE_RECENT_APPS);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
        if ((state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0) {
            if (mTicking) {
                haltTicker();
            }
            animateStatusBarHide(mNotificationIconArea, animate);
        } else {
            animateStatusBarShow(mNotificationIconArea, animate);
        }
    }
    if ((diff & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0) {
        mDisableNotificationAlerts = (state & StatusBarManager.DISABLE_NOTIFICATION_ALERTS) != 0;
        mHeadsUpObserver.onChange(true);
    }
}
#end_block

#method_before
public boolean isFalsingThresholdNeeded() {
    boolean onKeyguard = getBarState() == StatusBarState.KEYGUARD;
    boolean isCurrentlyInsecure = mUnlockMethodCache.isCurrentlyInsecure();
    return onKeyguard && (isCurrentlyInsecure || mDozing || mScreenOnComingFromTouch);
}
#method_after
public boolean isFalsingThresholdNeeded() {
    boolean onKeyguard = getBarState() == StatusBarState.KEYGUARD;
    // boolean isMethodInsecure = mUnlockMethodCache.isMethodInsecure();
    return onKeyguard && (/*isMethodInsecure ||*/
    mDozing || mScreenOnComingFromTouch);
}
#end_block

#method_before
@Override
public void handleMessage(Message msg) {
    switch(msg.what) {
        case MSG_START_DOZING:
            handleStartDozing((Runnable) msg.obj);
            break;
        case MSG_PULSE_WHILE_DOZING:
            handlePulseWhileDozing((PulseCallback) msg.obj, msg.arg1);
            break;
        case MSG_STOP_DOZING:
            handleStopDozing();
            break;
    }
}
#method_after
public void handleMessage(Message m) {
    super.handleMessage(m);
    switch(m.what) {
        case MSG_OPEN_NOTIFICATION_PANEL:
            animateExpandNotificationsPanel();
            break;
        case MSG_OPEN_SETTINGS_PANEL:
            animateExpandSettingsPanel();
            break;
        case MSG_CLOSE_PANELS:
            animateCollapsePanels();
            break;
        case MSG_SHOW_HEADS_UP:
            setHeadsUpVisibility(true);
            break;
        case MSG_DECAY_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_HIDE_HEADS_UP:
            mHeadsUpNotificationView.release();
            setHeadsUpVisibility(false);
            break;
        case MSG_ESCALATE_HEADS_UP:
            escalateHeadsUp();
            setHeadsUpVisibility(false);
            break;
        case MSG_LAUNCH_TRANSITION_TIMEOUT:
            onLaunchTransitionTimeout();
            break;
        case MSG_UPDATE_NOTIFICATIONS:
            handleUpdateNotifications();
            break;
    }
}
#end_block

#method_before
private void escalateHeadsUp() {
    if (mHeadsUpNotificationView.getEntry() != null) {
        final StatusBarNotification sbn = mHeadsUpNotificationView.getEntry().notification;
        mHeadsUpNotificationView.release();
        final Notification notification = sbn.getNotification();
        if (notification.fullScreenIntent != null) {
            if (DEBUG)
                Log.d(TAG, "converting a heads up to fullScreen");
            try {
                EventLog.writeEvent(EventLogTags.SYSUI_HEADS_UP_ESCALATION, sbn.getKey());
                notification.fullScreenIntent.send();
            } catch (PendingIntent.CanceledException e) {
            }
        }
    }
}
#method_after
private void escalateHeadsUp() {
    if (mHeadsUpNotificationView.getEntry() != null) {
        final StatusBarNotification sbn = mHeadsUpNotificationView.getEntry().notification;
        mHeadsUpNotificationView.release();
        final Notification notification = sbn.getNotification();
        if (notification.fullScreenIntent != null) {
            if (DEBUG)
                Log.d(TAG, "converting a heads up to fullScreen");
            try {
                notification.fullScreenIntent.send();
            } catch (PendingIntent.CanceledException e) {
            }
        }
    }
}
#end_block

#method_before
void makeExpandedVisible(boolean force) {
    if (SPEW)
        Log.d(TAG, "Make expanded visible: expanded visible=" + mExpandedVisible);
    if (!force && (mExpandedVisible || !panelsEnabled())) {
        return;
    }
    mExpandedVisible = true;
    if (mNavigationBarView != null)
        mNavigationBarView.setSlippery(true);
    updateCarrierLabelVisibility(true);
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
    // Expand the window to encompass the full screen in anticipation of the drag.
    // This is only possible to do atomically because the status bar is at the top of the screen!
    mStatusBarWindowManager.setStatusBarExpanded(true);
    mStatusBarView.setFocusable(false);
    visibilityChanged(true);
    mWaitingForKeyguardExit = false;
    disable(mDisabledUnmodified, !force);
    setInteracting(StatusBarManager.WINDOW_STATUS_BAR, true);
}
#method_after
void makeExpandedVisible(boolean force) {
    if (SPEW)
        Log.d(TAG, "Make expanded visible: expanded visible=" + mExpandedVisible);
    if (!force && (mExpandedVisible || !panelsEnabled())) {
        return;
    }
    mExpandedVisible = true;
    if (mNavigationBarView != null)
        mNavigationBarView.setSlippery(true);
    updateCarrierLabelVisibility(true);
    updateExpandedViewPos(EXPANDED_LEAVE_ALONE);
    // Expand the window to encompass the full screen in anticipation of the drag.
    // This is only possible to do atomically because the status bar is at the top of the screen!
    mStatusBarWindowManager.setStatusBarExpanded(true);
    mStatusBarView.setFocusable(false);
    visibilityChanged(true);
    mWaitingForKeyguardExit = false;
    disable(mDisabledUnmodified, !force);
    setInteracting(StatusBarManager.WINDOW_STATUS_BAR, true);
    if (mContext.getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManager.refreshTaskManagerView();
    }
}
#end_block

#method_before
@Override
public void animateExpandSettingsPanel() {
    if (SPEW)
        Log.d(TAG, "animateExpand: mExpandedVisible=" + mExpandedVisible);
    if (!panelsEnabled()) {
        return;
    }
    // Settings are not available in setup
    if (!mUserSetup)
        return;
    mNotificationPanel.expandWithQs();
    if (false)
        postStartTracing();
}
#method_after
@Override
public void animateExpandSettingsPanel() {
    if (SPEW)
        Log.d(TAG, "animateExpand: mExpandedVisible=" + mExpandedVisible);
    if (!panelsEnabled()) {
        return;
    }
    // Settings are not available in setup
    if (!mUserSetup)
        return;
    mNotificationPanel.expand();
    mNotificationPanel.openQs();
    if (false)
        postStartTracing();
}
#end_block

#method_before
void makeExpandedInvisible() {
    if (SPEW)
        Log.d(TAG, "makeExpandedInvisible: mExpandedVisible=" + mExpandedVisible + " mExpandedVisible=" + mExpandedVisible);
    if (!mExpandedVisible || mStatusBarWindow == null) {
        return;
    }
    // Ensure the panel is fully collapsed (just in case; bug 6765842, 7260868)
    mStatusBarView.collapseAllPanels(/*animate=*/
    false);
    // reset things to their proper state
    if (mScrollViewAnim != null)
        mScrollViewAnim.cancel();
    if (mClearButtonAnim != null)
        mClearButtonAnim.cancel();
    mStackScroller.setVisibility(View.VISIBLE);
    mNotificationPanel.setVisibility(View.GONE);
    mNotificationPanel.closeQs();
    mExpandedVisible = false;
    if (mNavigationBarView != null)
        mNavigationBarView.setSlippery(false);
    visibilityChanged(false);
    // Shrink the window to the size of the status bar only
    mStatusBarWindowManager.setStatusBarExpanded(false);
    mStatusBarView.setFocusable(true);
    // Close any "App info" popups that might have snuck on-screen
    dismissPopups();
    runPostCollapseRunnables();
    setInteracting(StatusBarManager.WINDOW_STATUS_BAR, false);
    showBouncer();
    disable(mDisabledUnmodified, true);
    // the bouncer appear animation.
    if (!mStatusBarKeyguardViewManager.isShowing()) {
        WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
    }
}
#method_after
void makeExpandedInvisible() {
    if (SPEW)
        Log.d(TAG, "makeExpandedInvisible: mExpandedVisible=" + mExpandedVisible + " mExpandedVisible=" + mExpandedVisible);
    if (!mExpandedVisible || mStatusBarWindow == null) {
        return;
    }
    // Ensure the panel is fully collapsed (just in case; bug 6765842, 7260868)
    mStatusBarView.collapseAllPanels(/*animate=*/
    false);
    // reset things to their proper state
    if (mScrollViewAnim != null)
        mScrollViewAnim.cancel();
    if (mClearButtonAnim != null)
        mClearButtonAnim.cancel();
    mStackScroller.setVisibility(View.VISIBLE);
    mNotificationPanel.setVisibility(View.GONE);
    mNotificationPanel.closeQs();
    mExpandedVisible = false;
    if (mNavigationBarView != null)
        mNavigationBarView.setSlippery(false);
    visibilityChanged(false);
    // Shrink the window to the size of the status bar only
    mStatusBarWindowManager.setStatusBarExpanded(false);
    mStatusBarView.setFocusable(true);
    // Close any "App info" popups that might have snuck on-screen
    dismissPopups();
    runPostCollapseRunnables();
    setInteracting(StatusBarManager.WINDOW_STATUS_BAR, false);
    showBouncer();
    disable(mDisabledUnmodified, true);
}
#end_block

#method_before
private void adjustBrightness(int x) {
    mBrightnessChanged = true;
    float raw = ((float) x) / mScreenWidth;
    // Add a padding to the brightness control on both sides to
    // make it easier to reach min/max brightness
    float padded = Math.min(1.0f - BRIGHTNESS_CONTROL_PADDING, Math.max(BRIGHTNESS_CONTROL_PADDING, raw));
    float value = (padded - BRIGHTNESS_CONTROL_PADDING) / (1 - (2.0f * BRIGHTNESS_CONTROL_PADDING));
    try {
        IPowerManager power = IPowerManager.Stub.asInterface(ServiceManager.getService("power"));
        if (power != null) {
            if (mAutomaticBrightness) {
                float adj = (value * 100) / (BRIGHTNESS_ADJ_RESOLUTION / 2f) - 1;
                adj = Math.max(adj, -1);
                adj = Math.min(adj, 1);
                final float val = adj;
                power.setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(val);
                AsyncTask.execute(new Runnable() {

                    public void run() {
                        Settings.System.putFloatForUser(mContext.getContentResolver(), Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ, val, UserHandle.USER_CURRENT);
                    }
                });
            } else {
                int newBrightness = mMinBrightness + (int) Math.round(value * (android.os.PowerManager.BRIGHTNESS_ON - mMinBrightness));
                newBrightness = Math.min(newBrightness, android.os.PowerManager.BRIGHTNESS_ON);
                newBrightness = Math.max(newBrightness, mMinBrightness);
                final int val = newBrightness;
                power.setTemporaryScreenBrightnessSettingOverride(val);
                AsyncTask.execute(new Runnable() {

                    @Override
                    public void run() {
                        Settings.System.putFloatForUser(mContext.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS, val, UserHandle.USER_CURRENT);
                    }
                });
            }
        }
    } catch (RemoteException e) {
        Log.w(TAG, "Setting Brightness failed: " + e);
    }
}
#method_after
private void adjustBrightness(int x) {
    mBrightnessChanged = true;
    float raw = ((float) x) / mScreenWidth;
    // Add a padding to the brightness control on both sides to
    // make it easier to reach min/max brightness
    float padded = Math.min(1.0f - BRIGHTNESS_CONTROL_PADDING, Math.max(BRIGHTNESS_CONTROL_PADDING, raw));
    float value = (padded - BRIGHTNESS_CONTROL_PADDING) / (1 - (2.0f * BRIGHTNESS_CONTROL_PADDING));
    int newBrightness = mMinBrightness + (int) Math.round(value * (android.os.PowerManager.BRIGHTNESS_ON - mMinBrightness));
    newBrightness = Math.min(newBrightness, android.os.PowerManager.BRIGHTNESS_ON);
    newBrightness = Math.max(newBrightness, mMinBrightness);
    try {
        IPowerManager power = IPowerManager.Stub.asInterface(ServiceManager.getService("power"));
        if (power != null) {
            power.setTemporaryScreenBrightnessSettingOverride(newBrightness);
            Settings.System.putInt(mContext.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS, newBrightness);
        }
    } catch (RemoteException e) {
        Log.w(TAG, "Setting Brightness failed: " + e);
    }
}
#end_block

#method_before
private int barMode(int vis, int transientFlag, int translucentFlag) {
    int lightsOutTransparent = View.SYSTEM_UI_FLAG_LOW_PROFILE | View.SYSTEM_UI_TRANSPARENT;
    return (vis & transientFlag) != 0 ? MODE_SEMI_TRANSPARENT : (vis & translucentFlag) != 0 ? MODE_TRANSLUCENT : (vis & lightsOutTransparent) == lightsOutTransparent ? MODE_LIGHTS_OUT_TRANSPARENT : (vis & View.SYSTEM_UI_TRANSPARENT) != 0 ? MODE_TRANSPARENT : (vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0 ? MODE_LIGHTS_OUT : MODE_OPAQUE;
}
#method_after
private int barMode(int vis, int transientFlag, int translucentFlag) {
    return (vis & transientFlag) != 0 ? MODE_SEMI_TRANSPARENT : (vis & translucentFlag) != 0 ? MODE_TRANSLUCENT : (vis & View.SYSTEM_UI_TRANSPARENT) != 0 ? MODE_TRANSPARENT : (vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0 ? MODE_LIGHTS_OUT : MODE_OPAQUE;
}
#end_block

#method_before
private void checkBarMode(int mode, int windowState, BarTransitions transitions) {
    final boolean powerSave = mBatteryController.isPowerSave();
    final boolean anim = (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
    if (powerSave && getBarState() == StatusBarState.SHADE) {
        mode = MODE_WARNING;
    }
    if (mode == MODE_WARNING) {
        transitions.setWarningColor(mBatterySaverWarningColor);
    }
    transitions.transitionTo(mode, anim);
}
#method_after
private void checkBarMode(int mode, int windowState, BarTransitions transitions) {
    final boolean powerSave = mBatteryController.isPowerSave();
    final boolean anim = (mScreenOn == null || mScreenOn) && windowState != WINDOW_STATE_HIDDEN && !powerSave;
    if (powerSave && getBarState() == StatusBarState.SHADE) {
        mode = MODE_WARNING;
    }
    transitions.transitionTo(mode, anim);
}
#end_block

#method_before
@Override
public void setInteracting(int barWindow, boolean interacting) {
    final boolean changing = ((mInteractingWindows & barWindow) != 0) != interacting;
    mInteractingWindows = interacting ? (mInteractingWindows | barWindow) : (mInteractingWindows & ~barWindow);
    if (mInteractingWindows != 0) {
        suspendAutohide();
    } else {
        resumeSuspendedAutohide();
    }
    // manually dismiss the volume panel when interacting with the nav bar
    if (changing && interacting && barWindow == StatusBarManager.WINDOW_NAVIGATION_BAR) {
        if (mVolumeComponent != null) {
            mVolumeComponent.dismissNow();
        }
    }
    checkBarModes();
}
#method_after
@Override
public void setInteracting(int barWindow, boolean interacting) {
    mInteractingWindows = interacting ? (mInteractingWindows | barWindow) : (mInteractingWindows & ~barWindow);
    if (mInteractingWindows != 0) {
        suspendAutohide();
    } else {
        resumeSuspendedAutohide();
    }
    checkBarModes();
}
#end_block

#method_before
@Override
public void tickerStarting() {
    if (!mTickerEnabled)
        return;
    mTicking = true;
    mStatusBarContents.setVisibility(View.GONE);
    mTickerView.setVisibility(View.VISIBLE);
    mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.push_up_in, null));
    mStatusBarContents.startAnimation(loadAnim(com.android.internal.R.anim.push_up_out, null));
    if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
        mCenterClockLayout.setVisibility(View.GONE);
        mCenterClockLayout.startAnimation(loadAnim(com.android.internal.R.anim.push_up_out, null));
    }
}
#method_after
@Override
public void tickerStarting() {
    if (!mTickerEnabled)
        return;
    mTicking = true;
    mStatusBarContents.setVisibility(View.GONE);
    mCenterClockLayout.setVisibility(View.GONE);
    mTickerView.setVisibility(View.VISIBLE);
    mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.push_up_in, null));
    mStatusBarContents.startAnimation(loadAnim(com.android.internal.R.anim.push_up_out, null));
    mCenterClockLayout.startAnimation(loadAnim(com.android.internal.R.anim.push_up_out, null));
}
#end_block

#method_before
@Override
public void tickerDone() {
    if (!mTickerEnabled)
        return;
    mStatusBarContents.setVisibility(View.VISIBLE);
    mTickerView.setVisibility(View.GONE);
    mStatusBarContents.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
    if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
        mCenterClockLayout.setVisibility(View.VISIBLE);
        mCenterClockLayout.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
    }
    mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.push_down_out, mTickingDoneListener));
}
#method_after
@Override
public void tickerDone() {
    if (!mTickerEnabled)
        return;
    mStatusBarContents.setVisibility(View.VISIBLE);
    mCenterClockLayout.setVisibility(View.VISIBLE);
    mTickerView.setVisibility(View.GONE);
    mStatusBarContents.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
    mCenterClockLayout.startAnimation(loadAnim(com.android.internal.R.anim.push_down_in, null));
    mTickerView.startAnimation(loadAnim(com.android.internal.R.anim.push_down_out, mTickingDoneListener));
}
#end_block

#method_before
public void tickerHalting() {
    if (!mTickerEnabled)
        return;
    if (mStatusBarContents.getVisibility() != View.VISIBLE) {
        mStatusBarContents.setVisibility(View.VISIBLE);
        mStatusBarContents.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
        if (mShowClock && mClockLocation == Clock.STYLE_CLOCK_CENTER) {
            mCenterClockLayout.setVisibility(View.VISIBLE);
            mCenterClockLayout.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
        }
    }
    mTickerView.setVisibility(View.GONE);
// we do not animate the ticker away at this point, just get rid of it (b/6992707)
}
#method_after
public void tickerHalting() {
    if (!mTickerEnabled)
        return;
    if (mStatusBarContents.getVisibility() != View.VISIBLE) {
        mStatusBarContents.setVisibility(View.VISIBLE);
        mCenterClockLayout.setVisibility(View.VISIBLE);
        mStatusBarContents.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
        mCenterClockLayout.startAnimation(loadAnim(com.android.internal.R.anim.fade_in, null));
    }
    mTickerView.setVisibility(View.GONE);
// we do not animate the ticker away at this point, just get rid of it (b/6992707)
}
#end_block

#method_before
public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
    synchronized (mQueueLock) {
        pw.println("Current Status Bar state:");
        pw.println("  mExpandedVisible=" + mExpandedVisible + ", mTrackingPosition=" + mTrackingPosition);
        pw.println("  mTickerEnabled=" + mTickerEnabled);
        if (mTickerEnabled) {
            pw.println("  mTicking=" + mTicking);
            pw.println("  mTickerView: " + viewInfo(mTickerView));
        }
        pw.println("  mTracking=" + mTracking);
        pw.println("  mDisplayMetrics=" + mDisplayMetrics);
        pw.println("  mStackScroller: " + viewInfo(mStackScroller));
        pw.println("  mStackScroller: " + viewInfo(mStackScroller) + " scroll " + mStackScroller.getScrollX() + "," + mStackScroller.getScrollY());
    }
    pw.print("  mInteractingWindows=");
    pw.println(mInteractingWindows);
    pw.print("  mStatusBarWindowState=");
    pw.println(windowStateToString(mStatusBarWindowState));
    pw.print("  mStatusBarMode=");
    pw.println(BarTransitions.modeToString(mStatusBarMode));
    pw.print("  mDozing=");
    pw.println(mDozing);
    pw.print("  mZenMode=");
    pw.println(Settings.Global.zenModeToString(mZenMode));
    pw.print("  interrupting package: ");
    pw.println(hunStateToString(mHeadsUpNotificationView.getEntry()));
    dumpBarTransitions(pw, "mStatusBarView", mStatusBarView.getBarTransitions());
    if (mNavigationBarView != null) {
        pw.print("  mNavigationBarWindowState=");
        pw.println(windowStateToString(mNavigationBarWindowState));
        pw.print("  mNavigationBarMode=");
        pw.println(BarTransitions.modeToString(mNavigationBarMode));
        dumpBarTransitions(pw, "mNavigationBarView", mNavigationBarView.getBarTransitions());
    }
    pw.print("  mNavigationBarView=");
    if (mNavigationBarView == null) {
        pw.println("null");
    } else {
        mNavigationBarView.dump(fd, pw, args);
    }
    pw.print("  mMediaSessionManager=");
    pw.println(mMediaSessionManager);
    pw.print("  mMediaNotificationKey=");
    pw.println(mMediaNotificationKey);
    pw.print("  mMediaController=");
    pw.print(mMediaController);
    if (mMediaController != null) {
        pw.print(" state=" + mMediaController.getPlaybackState());
    }
    pw.println();
    pw.print("  mMediaMetadata=");
    pw.print(mMediaMetadata);
    if (mMediaMetadata != null) {
        pw.print(" title=" + mMediaMetadata.getText(MediaMetadata.METADATA_KEY_TITLE));
    }
    pw.println();
    pw.println("  Panels: ");
    if (mNotificationPanel != null) {
        pw.println("    mNotificationPanel=" + mNotificationPanel + " params=" + mNotificationPanel.getLayoutParams().debug(""));
        pw.print("      ");
        mNotificationPanel.dump(fd, pw, args);
    }
    DozeLog.dump(pw);
    if (DUMPTRUCK) {
        synchronized (mNotificationData) {
            mNotificationData.dump(pw, "  ");
        }
        int N = mStatusIcons.getChildCount();
        pw.println("  system icons: " + N);
        for (int i = 0; i < N; i++) {
            StatusBarIconView ic = (StatusBarIconView) mStatusIcons.getChildAt(i);
            pw.println("    [" + i + "] icon=" + ic);
        }
        if (false) {
            pw.println("see the logcat for a dump of the views we have created.");
            // must happen on ui thread
            mHandler.post(new Runnable() {

                public void run() {
                    mStatusBarView.getLocationOnScreen(mAbsPos);
                    Log.d(TAG, "mStatusBarView: ----- (" + mAbsPos[0] + "," + mAbsPos[1] + ") " + mStatusBarView.getWidth() + "x" + getStatusBarHeight());
                    mStatusBarView.debug();
                }
            });
        }
    }
    if (DEBUG_GESTURES) {
        pw.print("  status bar gestures: ");
        mGestureRec.dump(fd, pw, args);
    }
    if (mNetworkController != null) {
        mNetworkController.dump(fd, pw, args);
    }
    if (mBluetoothController != null) {
        mBluetoothController.dump(fd, pw, args);
    }
    if (mCastController != null) {
        mCastController.dump(fd, pw, args);
    }
    if (mUserSwitcherController != null) {
        mUserSwitcherController.dump(fd, pw, args);
    }
    if (mBatteryController != null) {
        mBatteryController.dump(fd, pw, args);
    }
    if (mNextAlarmController != null) {
        mNextAlarmController.dump(fd, pw, args);
    }
    if (mSecurityController != null) {
        mSecurityController.dump(fd, pw, args);
    }
    pw.println("SharedPreferences:");
    for (Map.Entry<String, ?> entry : mContext.getSharedPreferences(mContext.getPackageName(), Context.MODE_PRIVATE).getAll().entrySet()) {
        pw.print("  ");
        pw.print(entry.getKey());
        pw.print("=");
        pw.println(entry.getValue());
    }
}
#method_after
public void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
    synchronized (mQueueLock) {
        pw.println("Current Status Bar state:");
        pw.println("  mExpandedVisible=" + mExpandedVisible + ", mTrackingPosition=" + mTrackingPosition);
        pw.println("  mTickerEnabled=" + mTickerEnabled);
        if (mTickerEnabled) {
            pw.println("  mTicking=" + mTicking);
            pw.println("  mTickerView: " + viewInfo(mTickerView));
        }
        pw.println("  mTracking=" + mTracking);
        pw.println("  mDisplayMetrics=" + mDisplayMetrics);
        pw.println("  mStackScroller: " + viewInfo(mStackScroller));
        pw.println("  mStackScroller: " + viewInfo(mStackScroller) + " scroll " + mStackScroller.getScrollX() + "," + mStackScroller.getScrollY());
    }
    pw.print("  mInteractingWindows=");
    pw.println(mInteractingWindows);
    pw.print("  mStatusBarWindowState=");
    pw.println(windowStateToString(mStatusBarWindowState));
    pw.print("  mStatusBarMode=");
    pw.println(BarTransitions.modeToString(mStatusBarMode));
    pw.print("  mDozing=");
    pw.println(mDozing);
    pw.print("  mZenMode=");
    pw.println(Settings.Global.zenModeToString(mZenMode));
    pw.print("  mUseHeadsUp=");
    pw.println(mUseHeadsUp);
    pw.print("  interrupting package: ");
    pw.println(hunStateToString(mHeadsUpNotificationView.getEntry()));
    dumpBarTransitions(pw, "mStatusBarView", mStatusBarView.getBarTransitions());
    if (mNavigationBarView != null) {
        pw.print("  mNavigationBarWindowState=");
        pw.println(windowStateToString(mNavigationBarWindowState));
        pw.print("  mNavigationBarMode=");
        pw.println(BarTransitions.modeToString(mNavigationBarMode));
        dumpBarTransitions(pw, "mNavigationBarView", mNavigationBarView.getBarTransitions());
    }
    pw.print("  mNavigationBarView=");
    if (mNavigationBarView == null) {
        pw.println("null");
    } else {
        mNavigationBarView.dump(fd, pw, args);
    }
    pw.print("  mMediaSessionManager=");
    pw.println(mMediaSessionManager);
    pw.print("  mMediaNotificationKey=");
    pw.println(mMediaNotificationKey);
    pw.print("  mMediaController=");
    pw.print(mMediaController);
    if (mMediaController != null) {
        pw.print(" state=" + mMediaController.getPlaybackState());
    }
    pw.println();
    pw.print("  mMediaMetadata=");
    pw.print(mMediaMetadata);
    if (mMediaMetadata != null) {
        pw.print(" title=" + mMediaMetadata.getText(MediaMetadata.METADATA_KEY_TITLE));
    }
    pw.println();
    pw.println("  Panels: ");
    if (mNotificationPanel != null) {
        pw.println("    mNotificationPanel=" + mNotificationPanel + " params=" + mNotificationPanel.getLayoutParams().debug(""));
        pw.print("      ");
        mNotificationPanel.dump(fd, pw, args);
    }
    DozeLog.dump(pw);
    if (DUMPTRUCK) {
        synchronized (mNotificationData) {
            mNotificationData.dump(pw, "  ");
        }
        int N = mStatusIcons.getChildCount();
        pw.println("  system icons: " + N);
        for (int i = 0; i < N; i++) {
            StatusBarIconView ic = (StatusBarIconView) mStatusIcons.getChildAt(i);
            pw.println("    [" + i + "] icon=" + ic);
        }
        if (false) {
            pw.println("see the logcat for a dump of the views we have created.");
            // must happen on ui thread
            mHandler.post(new Runnable() {

                public void run() {
                    mStatusBarView.getLocationOnScreen(mAbsPos);
                    Log.d(TAG, "mStatusBarView: ----- (" + mAbsPos[0] + "," + mAbsPos[1] + ") " + mStatusBarView.getWidth() + "x" + getStatusBarHeight());
                    mStatusBarView.debug();
                }
            });
        }
    }
    if (DEBUG_GESTURES) {
        pw.print("  status bar gestures: ");
        mGestureRec.dump(fd, pw, args);
    }
    if (isMSim()) {
        for (int i = 0; i < TelephonyManager.getDefault().getPhoneCount(); i++) {
            if (mMSimNetworkController != null) {
                mMSimNetworkController.dump(fd, pw, args, i);
            }
        }
    } else {
        if (mNetworkController != null) {
            mNetworkController.dump(fd, pw, args);
        }
    }
    if (mBluetoothController != null) {
        mBluetoothController.dump(fd, pw, args);
    }
    if (mCastController != null) {
        mCastController.dump(fd, pw, args);
    }
    if (mUserSwitcherController != null) {
        mUserSwitcherController.dump(fd, pw, args);
    }
    if (mBatteryController != null) {
        mBatteryController.dump(fd, pw, args);
    }
    if (mNextAlarmController != null) {
        mNextAlarmController.dump(fd, pw, args);
    }
    if (mSecurityController != null) {
        mSecurityController.dump(fd, pw, args);
    }
}
#end_block

#method_before
public void startActivityDismissingKeyguard(final Intent intent, boolean onlyProvisioned, final boolean dismissShade) {
    if (onlyProvisioned && !isDeviceProvisioned())
        return;
    final boolean afterKeyguardGone = PreviewInflater.wouldLaunchResolverActivity(mContext, intent, mCurrentUserId);
    final boolean keyguardShowing = mStatusBarKeyguardViewManager.isShowing();
    dismissKeyguardThenExecute(new OnDismissAction() {

        @Override
        public boolean onDismiss() {
            AsyncTask.execute(new Runnable() {

                public void run() {
                    try {
                        if (keyguardShowing && !afterKeyguardGone) {
                            ActivityManagerNative.getDefault().keyguardWaitingForActivityDrawn();
                        }
                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
                        mContext.startActivityAsUser(intent, new UserHandle(UserHandle.USER_CURRENT));
                        overrideActivityPendingAppTransition(keyguardShowing && !afterKeyguardGone);
                    } catch (RemoteException e) {
                    }
                }
            });
            if (dismissShade) {
                animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_RECENTS_PANEL, true);
            }
            return true;
        }
    }, afterKeyguardGone);
}
#method_after
public void startActivityDismissingKeyguard(final Intent intent, boolean onlyProvisioned, final boolean dismissShade) {
    if (onlyProvisioned && !isDeviceProvisioned())
        return;
    final boolean afterKeyguardGone = PreviewInflater.wouldLaunchResolverActivity(mContext, intent, mCurrentUserId);
    final boolean keyguardShowing = mStatusBarKeyguardViewManager.isShowing();
    dismissKeyguardThenExecute(new OnDismissAction() {

        @Override
        public boolean onDismiss() {
            AsyncTask.execute(new Runnable() {

                public void run() {
                    try {
                        if (keyguardShowing && !afterKeyguardGone) {
                            ActivityManagerNative.getDefault().keyguardWaitingForActivityDrawn();
                        }
                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
                        mContext.startActivityAsUser(intent, new UserHandle(UserHandle.USER_CURRENT));
                        overrideActivityPendingAppTransition(keyguardShowing && !afterKeyguardGone);
                    } catch (RemoteException e) {
                    }
                }
            });
            if (dismissShade) {
                animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE, true);
            }
            return true;
        }
    }, afterKeyguardGone);
}
#end_block

#method_before
@Override
protected void dismissKeyguardThenExecute(final OnDismissAction action, boolean afterKeyguardGone) {
    if (mStatusBarKeyguardViewManager.isShowing()) {
        mStatusBarKeyguardViewManager.dismissWithAction(action, afterKeyguardGone);
    } else {
        action.onDismiss();
    }
}
#method_after
@Override
protected void dismissKeyguardThenExecute(final OnDismissAction action, boolean afterKeyguardGone) {
    if (mStatusBarKeyguardViewManager.isShowing()) {
        if (/*UnlockMethodCache.getInstance(mContext).isMethodInsecure()
                    &&*/
        mNotificationPanel.isLaunchTransitionRunning() && !afterKeyguardGone) {
            action.onDismiss();
            mNotificationPanel.setLaunchTransitionEndRunnable(new Runnable() {

                @Override
                public void run() {
                    mStatusBarKeyguardViewManager.dismiss();
                }
            });
        } else {
            mStatusBarKeyguardViewManager.dismissWithAction(action, afterKeyguardGone);
        }
    } else {
        action.onDismiss();
    }
}
#end_block

#method_before
@Override
public void userSwitched(int newUserId) {
    super.userSwitched(newUserId);
    if (MULTIUSER_DEBUG)
        mNotificationPanelDebugText.setText("USER " + newUserId);
    animateCollapsePanels();
    updatePublicMode();
    updateNotifications();
    resetUserSetupObserver();
    setControllerUsers();
}
#method_after
@Override
public void userSwitched(int newUserId) {
    if (MULTIUSER_DEBUG)
        mNotificationPanelDebugText.setText("USER " + newUserId);
    animateCollapsePanels();
    updateNotifications();
    resetUserSetupObserver();
    setControllerUsers();
}
#end_block

#method_before
private void setHeadsUpVisibility(boolean vis) {
    if (DEBUG)
        Log.v(TAG, (vis ? "showing" : "hiding") + " heads up window");
    EventLog.writeEvent(EventLogTags.SYSUI_HEADS_UP_STATUS, vis ? mHeadsUpNotificationView.getKey() : "", vis ? 1 : 0);
    mHeadsUpNotificationView.setVisibility(vis ? View.VISIBLE : View.GONE);
    if (!vis) {
        mHeadsUpPackageName = null;
    }
}
#method_after
private void setHeadsUpVisibility(boolean vis) {
    if (!ENABLE_HEADS_UP)
        return;
    if (DEBUG)
        Log.v(TAG, (vis ? "showing" : "hiding") + " heads up window");
    EventLog.writeEvent(EventLogTags.SYSUI_HEADS_UP_STATUS, vis ? mHeadsUpNotificationView.getKey() : "", vis ? 1 : 0);
    mHeadsUpNotificationView.setVisibility(vis ? View.VISIBLE : View.GONE);
}
#end_block

#method_before
public void onHeadsUpDismissed(boolean direction) {
    // completely if the notification is clearable.
    if (direction) {
        scheduleHeadsUpClose();
    } else {
        mHeadsUpNotificationView.dismiss();
    }
}
#method_after
public void onHeadsUpDismissed() {
    mHeadsUpNotificationView.dismiss();
}
#end_block

#method_before
protected void loadDimens() {
    final Resources res = mContext.getResources();
    mNaturalBarHeight = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
    int newIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    int newIconHPadding = res.getDimensionPixelSize(R.dimen.status_bar_icon_padding);
    if (newIconHPadding != mIconHPadding || newIconSize != mIconSize) {
        // Log.d(TAG, "size=" + newIconSize + " padding=" + newIconHPadding);
        mIconHPadding = newIconHPadding;
        mIconSize = newIconSize;
    // reloadAllNotificationIcons(); // reload the tray
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    mNotificationPanelGravity = res.getInteger(R.integer.notification_panel_layout_gravity);
    if (mNotificationPanelGravity <= 0) {
        mNotificationPanelGravity = Gravity.START | Gravity.TOP;
    }
    mCarrierLabelHeight = res.getDimensionPixelSize(R.dimen.carrier_label_height);
    mStatusBarHeaderHeight = res.getDimensionPixelSize(R.dimen.status_bar_header_height);
    mNotificationPanelMinHeightFrac = res.getFraction(R.dimen.notification_panel_min_height_frac, 1, 1);
    if (mNotificationPanelMinHeightFrac < 0f || mNotificationPanelMinHeightFrac > 1f) {
        mNotificationPanelMinHeightFrac = 0f;
    }
    mRowMinHeight = res.getDimensionPixelSize(R.dimen.notification_min_height);
    mRowMaxHeight = res.getDimensionPixelSize(R.dimen.notification_max_height);
    mKeyguardMaxNotificationCount = res.getInteger(R.integer.keyguard_max_notification_count);
    if (DEBUG)
        Log.v(TAG, "updateResources");
}
#method_after
protected void loadDimens() {
    final Resources res = mContext.getResources();
    mNaturalBarHeight = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
    int newIconSize = res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_icon_size);
    int newIconHPadding = res.getDimensionPixelSize(R.dimen.status_bar_icon_padding);
    if (newIconHPadding != mIconHPadding || newIconSize != mIconSize) {
        // Log.d(TAG, "size=" + newIconSize + " padding=" + newIconHPadding);
        mIconHPadding = newIconHPadding;
        mIconSize = newIconSize;
    // reloadAllNotificationIcons(); // reload the tray
    }
    mEdgeBorder = res.getDimensionPixelSize(R.dimen.status_bar_edge_ignore);
    mNotificationPanelGravity = res.getInteger(R.integer.notification_panel_layout_gravity);
    if (mNotificationPanelGravity <= 0) {
        mNotificationPanelGravity = Gravity.START | Gravity.TOP;
    }
    mCarrierLabelHeight = res.getDimensionPixelSize(R.dimen.carrier_label_height);
    mStatusBarHeaderHeight = res.getDimensionPixelSize(R.dimen.status_bar_header_height);
    mNotificationPanelMinHeightFrac = res.getFraction(R.dimen.notification_panel_min_height_frac, 1, 1);
    if (mNotificationPanelMinHeightFrac < 0f || mNotificationPanelMinHeightFrac > 1f) {
        mNotificationPanelMinHeightFrac = 0f;
    }
    mHeadsUpNotificationDecay = res.getInteger(R.integer.heads_up_notification_decay);
    mRowMinHeight = res.getDimensionPixelSize(R.dimen.notification_min_height);
    mRowMaxHeight = res.getDimensionPixelSize(R.dimen.notification_max_height);
    mKeyguardMaxNotificationCount = res.getInteger(R.integer.keyguard_max_notification_count);
    if (DEBUG)
        Log.v(TAG, "updateResources");
}
#end_block

#method_before
@Override
public void destroy() {
    super.destroy();
    if (mStatusBarWindow != null) {
        mWindowManager.removeViewImmediate(mStatusBarWindow);
        mStatusBarWindow = null;
    }
    if (mNavigationBarView != null) {
        mWindowManager.removeViewImmediate(mNavigationBarView);
        mNavigationBarView = null;
    }
    if (mHandlerThread != null) {
        mHandlerThread.quitSafely();
        mHandlerThread = null;
    }
    mContext.unregisterReceiver(mBroadcastReceiver);
}
#method_after
@Override
public void destroy() {
    super.destroy();
    if (mStatusBarWindow != null) {
        mWindowManager.removeViewImmediate(mStatusBarWindow);
        mStatusBarWindow = null;
    }
    if (mNavigationBarView != null) {
        mWindowManager.removeViewImmediate(mNavigationBarView);
        mNavigationBarView = null;
    }
    mContext.unregisterReceiver(mBroadcastReceiver);
}
#end_block

#method_before
@Override
public void dispatchDemoCommand(String command, Bundle args) {
    if (!mDemoModeAllowed) {
        mDemoModeAllowed = Settings.Global.getInt(mContext.getContentResolver(), "sysui_demo_allowed", 0) != 0;
    }
    if (!mDemoModeAllowed)
        return;
    if (command.equals(COMMAND_ENTER)) {
        mDemoMode = true;
    } else if (command.equals(COMMAND_EXIT)) {
        mDemoMode = false;
        checkBarModes();
    } else if (!mDemoMode) {
        // automatically enter demo mode on first demo command
        dispatchDemoCommand(COMMAND_ENTER, new Bundle());
    }
    boolean modeChange = command.equals(COMMAND_ENTER) || command.equals(COMMAND_EXIT);
    if ((modeChange || command.equals(COMMAND_VOLUME)) && mVolumeComponent != null) {
        mVolumeComponent.dispatchDemoCommand(command, args);
    }
    if (modeChange || command.equals(COMMAND_CLOCK)) {
        dispatchDemoCommandToView(command, args, R.id.clock);
    }
    if (modeChange || command.equals(COMMAND_BATTERY)) {
        dispatchDemoCommandToView(command, args, R.id.battery);
    }
    if (modeChange || command.equals(COMMAND_STATUS)) {
        if (mDemoStatusIcons == null) {
            mDemoStatusIcons = new DemoStatusIcons(mStatusIcons, mIconSize);
        }
        mDemoStatusIcons.dispatchDemoCommand(command, args);
    }
    if (mNetworkController != null && (modeChange || command.equals(COMMAND_NETWORK))) {
        mNetworkController.dispatchDemoCommand(command, args);
    }
    if (modeChange || command.equals(COMMAND_NOTIFICATIONS)) {
        View notifications = mStatusBarView == null ? null : mStatusBarView.findViewById(R.id.notification_icon_area);
        if (notifications != null) {
            String visible = args.getString("visible");
            int vis = mDemoMode && "false".equals(visible) ? View.INVISIBLE : View.VISIBLE;
            notifications.setVisibility(vis);
        }
    }
    if (command.equals(COMMAND_BARS)) {
        String mode = args.getString("mode");
        int barMode = "opaque".equals(mode) ? MODE_OPAQUE : "translucent".equals(mode) ? MODE_TRANSLUCENT : "semi-transparent".equals(mode) ? MODE_SEMI_TRANSPARENT : "transparent".equals(mode) ? MODE_TRANSPARENT : "warning".equals(mode) ? MODE_WARNING : -1;
        if (barMode != -1) {
            boolean animate = true;
            if (mStatusBarView != null) {
                mStatusBarView.getBarTransitions().transitionTo(barMode, animate);
            }
            if (mNavigationBarView != null) {
                mNavigationBarView.getBarTransitions().transitionTo(barMode, animate);
            }
        }
    }
}
#method_after
@Override
public void dispatchDemoCommand(String command, Bundle args) {
    if (!mDemoModeAllowed) {
        mDemoModeAllowed = Settings.Global.getInt(mContext.getContentResolver(), "sysui_demo_allowed", 0) != 0;
    }
    if (!mDemoModeAllowed)
        return;
    if (command.equals(COMMAND_ENTER)) {
        mDemoMode = true;
    } else if (command.equals(COMMAND_EXIT)) {
        mDemoMode = false;
        checkBarModes();
    } else if (!mDemoMode) {
        // automatically enter demo mode on first demo command
        dispatchDemoCommand(COMMAND_ENTER, new Bundle());
    }
    boolean modeChange = command.equals(COMMAND_ENTER) || command.equals(COMMAND_EXIT);
    if (modeChange || command.equals(COMMAND_CLOCK)) {
        dispatchDemoCommandToView(command, args, R.id.clock);
    }
    if (modeChange || command.equals(COMMAND_BATTERY)) {
        dispatchDemoCommandToView(command, args, R.id.battery);
    }
    if (modeChange || command.equals(COMMAND_STATUS)) {
        if (mDemoStatusIcons == null) {
            mDemoStatusIcons = new DemoStatusIcons(mStatusIcons, mIconSize);
        }
        mDemoStatusIcons.dispatchDemoCommand(command, args);
    }
    if (mNetworkController != null && (modeChange || command.equals(COMMAND_NETWORK))) {
        mNetworkController.dispatchDemoCommand(command, args);
    }
    if (modeChange || command.equals(COMMAND_NOTIFICATIONS)) {
        View notifications = mStatusBarView == null ? null : mStatusBarView.findViewById(R.id.notification_icon_area);
        if (notifications != null) {
            String visible = args.getString("visible");
            int vis = mDemoMode && "false".equals(visible) ? View.INVISIBLE : View.VISIBLE;
            notifications.setVisibility(vis);
        }
    }
    if (command.equals(COMMAND_BARS)) {
        String mode = args.getString("mode");
        int barMode = "opaque".equals(mode) ? MODE_OPAQUE : "translucent".equals(mode) ? MODE_TRANSLUCENT : "semi-transparent".equals(mode) ? MODE_SEMI_TRANSPARENT : "transparent".equals(mode) ? MODE_TRANSPARENT : "warning".equals(mode) ? MODE_WARNING : -1;
        if (barMode != -1) {
            boolean animate = true;
            if (mStatusBarView != null) {
                mStatusBarView.getBarTransitions().transitionTo(barMode, animate);
            }
            if (mNavigationBarView != null) {
                mNavigationBarView.getBarTransitions().transitionTo(barMode, animate);
            }
        }
    }
}
#end_block

#method_before
private void updatePublicMode() {
    setLockscreenPublicMode(mStatusBarKeyguardViewManager.isShowing() && mStatusBarKeyguardViewManager.isSecure(mCurrentUserId));
}
#method_after
private void updatePublicMode() {
    setLockscreenPublicMode((mStatusBarKeyguardViewManager.isShowing() || mStatusBarKeyguardViewManager.isOccluded()) && mStatusBarKeyguardViewManager.isSecure());
}
#end_block

#method_before
public boolean onSpacePressed() {
    if (mScreenOn != null && mScreenOn && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
        animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_RECENTS_PANEL, /* flags */
        true);
        return true;
    }
    return false;
}
#method_after
public boolean onSpacePressed() {
    if (mScreenOn != null && mScreenOn && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
        animateCollapsePanels(0, /* flags */
        true);
        return true;
    }
    return false;
}
#end_block

#method_before
@Override
public void onActivated(ActivatableNotificationView view) {
    EventLogTags.writeSysuiLockscreenGesture(EventLogConstants.SYSUI_LOCKSCREEN_GESTURE_TAP_NOTIFICATION_ACTIVATE, 0, /* lengthDp - N/A */
    0);
    mKeyguardIndicationController.showTransientIndication(R.string.notification_tap_again);
    ActivatableNotificationView previousView = mStackScroller.getActivatedChild();
    if (previousView != null) {
        previousView.makeInactive(true);
    }
    mStackScroller.setActivatedChild(view);
}
#method_after
@Override
public void onActivated(ActivatableNotificationView view) {
    mKeyguardIndicationController.showTransientIndication(R.string.notification_tap_again);
    ActivatableNotificationView previousView = mStackScroller.getActivatedChild();
    if (previousView != null) {
        previousView.makeInactive(true);
    }
    mStackScroller.setActivatedChild(view);
}
#end_block

#method_before
public void setBarState(int state) {
    // Other transitions are covered in handleVisibleToUserChanged().
    if (state != mState && mVisible && state == StatusBarState.SHADE_LOCKED) {
        try {
            mBarService.clearNotificationEffects();
        } catch (RemoteException e) {
        // Ignore.
        }
    }
    mState = state;
    mStatusBarWindowManager.setStatusBarState(state);
}
#method_after
public void setBarState(int state) {
    mState = state;
    mStatusBarWindowManager.setStatusBarState(state);
}
#end_block

#method_before
public void onTrackingStopped(boolean expand) {
    if (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) {
        if (!expand && !mUnlockMethodCache.isCurrentlyInsecure()) {
            showBouncer();
        }
    }
}
#method_after
public void onTrackingStopped(boolean expand) {
    if (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) {
        if (!expand) /*&& !mUnlockMethodCache.isMethodInsecure()*/
        {
            showBouncer();
        }
    }
}
#end_block

#method_before
// ---------------------- DragDownHelper.OnDragDownListener ------------------------------------
@Override
public boolean onDraggedDown(View startingChild, int dragLengthY) {
    if (hasActiveNotifications()) {
        EventLogTags.writeSysuiLockscreenGesture(EventLogConstants.SYSUI_LOCKSCREEN_GESTURE_SWIPE_DOWN_FULL_SHADE, (int) (dragLengthY / mDisplayMetrics.density), 0);
        // We have notifications, go to locked shade.
        goToLockedShade(startingChild);
        return true;
    } else {
        // No notifications - abort gesture.
        return false;
    }
}
#method_after
// ---------------------- DragDownHelper.OnDragDownListener ------------------------------------
@Override
public boolean onDraggedDown(View startingChild) {
    if (hasActiveNotifications()) {
        // We have notifications, go to locked shade.
        goToLockedShade(startingChild);
        return true;
    } else {
        // No notifications - abort gesture.
        return false;
    }
}
#end_block

#method_before
private void handleLongPressBackRecents(View v) {
    try {
        boolean sendBackLongPress = false;
        IActivityManager activityManager = ActivityManagerNative.getDefault();
        boolean isAccessiblityEnabled = mAccessibilityManager.isEnabled();
        if (activityManager.isInLockTaskMode() && !isAccessiblityEnabled) {
            long time = System.currentTimeMillis();
            // long-pressed 'together'
            if ((time - mLastLockToAppLongPress) < LOCK_TO_APP_GESTURE_TOLERENCE) {
                activityManager.stopLockTaskModeOnCurrent();
                // When exiting refresh disabled flags.
                mNavigationBarView.setDisabledFlags(mDisabled, true);
            } else if ((v.getId() == R.id.back) && !mNavigationBarView.getRecentsButton().isPressed()) {
                // If we aren't pressing recents right now then they presses
                // won't be together, so send the standard long-press action.
                sendBackLongPress = true;
            }
            mLastLockToAppLongPress = time;
        } else {
            // If this is back still need to handle sending the long-press event.
            if (v.getId() == R.id.back) {
                sendBackLongPress = true;
            } else if (isAccessiblityEnabled && activityManager.isInLockTaskMode()) {
                // When in accessibility mode a long press that is recents (not back)
                // should stop lock task.
                activityManager.stopLockTaskModeOnCurrent();
                // When exiting refresh disabled flags.
                mNavigationBarView.setDisabledFlags(mDisabled, true);
            }
        }
        if (sendBackLongPress) {
            KeyButtonView keyButtonView = (KeyButtonView) v;
            keyButtonView.sendEvent(KeyEvent.ACTION_DOWN, KeyEvent.FLAG_LONG_PRESS);
            keyButtonView.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);
        }
    } catch (RemoteException e) {
        Log.d(TAG, "Unable to reach activity manager", e);
    }
}
#method_after
private void handleLongPressBackRecents(View v) {
    try {
        boolean sendBackLongPress = false;
        IActivityManager activityManager = ActivityManagerNative.getDefault();
        boolean isAccessiblityEnabled = mAccessibilityManager.isEnabled();
        if (activityManager.isInLockTaskMode() && !isAccessiblityEnabled) {
            long time = System.currentTimeMillis();
            // long-pressed 'together'
            if ((time - mLastLockToAppLongPress) < LOCK_TO_APP_GESTURE_TOLERENCE) {
                activityManager.stopLockTaskModeOnCurrent();
            } else if ((v.getId() == R.id.back) && !mNavigationBarView.getRecentsButton().isPressed()) {
                // If we aren't pressing recents right now then they presses
                // won't be together, so send the standard long-press action.
                sendBackLongPress = true;
            }
            mLastLockToAppLongPress = time;
        } else {
            // If this is back still need to handle sending the long-press event.
            if (v.getId() == R.id.back) {
                sendBackLongPress = true;
            } else if (isAccessiblityEnabled && activityManager.isInLockTaskMode()) {
                // When in accessibility mode a long press that is recents (not back)
                // should stop lock task.
                activityManager.stopLockTaskModeOnCurrent();
            }
        }
        if (sendBackLongPress) {
            KeyButtonView keyButtonView = (KeyButtonView) v;
            keyButtonView.sendEvent(KeyEvent.ACTION_DOWN, KeyEvent.FLAG_LONG_PRESS);
            keyButtonView.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_LONG_CLICKED);
        }
    } catch (RemoteException e) {
        Log.d(TAG, "Unable to reach activity manager", e);
    }
}
#end_block

#method_before
@Override
protected void onFinishInflate() {
    super.onFinishInflate();
    mSystemIconsSuperContainer = findViewById(R.id.system_icons_super_container);
    mMultiUserSwitch = (MultiUserSwitch) findViewById(R.id.multi_user_switch);
    mMultiUserAvatar = (ImageView) findViewById(R.id.multi_user_avatar);
    mBatteryView = (BatteryMeterView) findViewById(R.id.battery);
    mBatteryLevel = (TextView) findViewById(R.id.battery_level_text);
    mCarrierLabel = (TextView) findViewById(R.id.keyguard_carrier_text);
    loadDimens();
    mFastOutSlowInInterpolator = AnimationUtils.loadInterpolator(getContext(), android.R.interpolator.fast_out_slow_in);
    updateUserSwitcher();
    updateVisibilities();
}
#method_after
@Override
protected void onFinishInflate() {
    super.onFinishInflate();
    mSystemIconsSuperContainer = findViewById(R.id.system_icons_super_container);
    mMultiUserSwitch = (MultiUserSwitch) findViewById(R.id.multi_user_switch);
    mMultiUserAvatar = (ImageView) findViewById(R.id.multi_user_avatar);
    mBatteryView = (BatteryMeterView) findViewById(R.id.battery);
    mBatteryLevel = (TextView) findViewById(R.id.battery_level_text);
    loadDimens();
    mFastOutSlowInInterpolator = AnimationUtils.loadInterpolator(getContext(), android.R.interpolator.fast_out_slow_in);
    updateUserSwitcher();
    updateVisibilities();
}
#end_block

#method_before
@Override
protected void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
    // Respect font size setting.
    mCarrierLabel.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimensionPixelSize(com.android.internal.R.dimen.text_size_small_material));
    mBatteryLevel.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimensionPixelSize(R.dimen.battery_level_text_size));
}
#method_after
@Override
protected void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
    // Respect font size setting.
    mBatteryLevel.setTextSize(TypedValue.COMPLEX_UNIT_PX, getResources().getDimensionPixelSize(R.dimen.battery_level_text_size));
}
#end_block

#method_before
@Override
protected void onFinishInflate() {
    super.onFinishInflate();
    mSystemIconsSuperContainer = findViewById(R.id.system_icons_super_container);
    mSystemIconsContainer = (ViewGroup) findViewById(R.id.system_icons_container);
    mSystemIconsSuperContainer.setOnClickListener(this);
    mDateGroup = findViewById(R.id.date_group);
    mDateGroup.setOnClickListener(this);
    mClock = findViewById(R.id.clock);
    mClock.setOnClickListener(this);
    mTime = (TextView) findViewById(R.id.time_view);
    mAmPm = (TextView) findViewById(R.id.am_pm_view);
    mMultiUserSwitch = (MultiUserSwitch) findViewById(R.id.multi_user_switch);
    mMultiUserAvatar = (ImageView) findViewById(R.id.multi_user_avatar);
    mDateCollapsed = (TextView) findViewById(R.id.date_collapsed);
    mDateExpanded = (TextView) findViewById(R.id.date_expanded);
    mSettingsButton = findViewById(R.id.settings_button);
    mSettingsButton.setOnClickListener(this);
    mQsDetailHeader = findViewById(R.id.qs_detail_header);
    mQsDetailHeader.setAlpha(0);
    mQsDetailHeaderTitle = (TextView) mQsDetailHeader.findViewById(android.R.id.title);
    mQsDetailHeaderSwitch = (Switch) mQsDetailHeader.findViewById(android.R.id.toggle);
    mQsDetailHeaderProgress = (ImageView) findViewById(R.id.qs_detail_header_progress);
    mEmergencyCallsOnly = (TextView) findViewById(R.id.header_emergency_calls_only);
    mBatteryView = (BatteryMeterView) findViewById(R.id.battery);
    mBatteryLevel = (TextView) findViewById(R.id.battery_level);
    mAlarmStatus = (TextView) findViewById(R.id.alarm_status);
    mAlarmStatus.setOnClickListener(this);
    mSignalCluster = findViewById(R.id.signal_cluster);
    mSystemIcons = (LinearLayout) findViewById(R.id.system_icons);
    loadDimens();
    updateVisibilities();
    updateClockScale();
    updateAvatarScale();
    addOnLayoutChangeListener(new View.OnLayoutChangeListener() {

        @Override
        public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
            if ((right - left) != (oldRight - oldLeft)) {
                // width changed, update clipping
                setClipping(getHeight());
            }
            boolean rtl = getLayoutDirection() == LAYOUT_DIRECTION_RTL;
            mTime.setPivotX(rtl ? mTime.getWidth() : 0);
            mTime.setPivotY(mTime.getBaseline());
            updateAmPmTranslation();
        }
    });
    setOutlineProvider(new ViewOutlineProvider() {

        @Override
        public void getOutline(View view, Outline outline) {
            outline.setRect(mClipBounds);
        }
    });
    requestCaptureValues();
}
#method_after
@Override
protected void onFinishInflate() {
    super.onFinishInflate();
    mSystemIconsSuperContainer = findViewById(R.id.system_icons_super_container);
    mSystemIconsContainer = (ViewGroup) findViewById(R.id.system_icons_container);
    mSystemIconsSuperContainer.setOnClickListener(this);
    mDateGroup = findViewById(R.id.date_group);
    mDateGroup.setOnClickListener(this);
    mClock = findViewById(R.id.clock);
    mClock.setOnClickListener(this);
    mTime = (TextView) findViewById(R.id.time_view);
    mAmPm = (TextView) findViewById(R.id.am_pm_view);
    mMultiUserSwitch = (MultiUserSwitch) findViewById(R.id.multi_user_switch);
    mMultiUserAvatar = (ImageView) findViewById(R.id.multi_user_avatar);
    mDateCollapsed = (TextView) findViewById(R.id.date_collapsed);
    mDateExpanded = (TextView) findViewById(R.id.date_expanded);
    mSettingsButton = findViewById(R.id.settings_button);
    mSettingsButton.setOnClickListener(this);
    if (getResources().getBoolean(R.bool.config_showTaskManagerSwitcher)) {
        mTaskManagerButton = findViewById(R.id.task_manager_button);
    }
    mQsDetailHeader = findViewById(R.id.qs_detail_header);
    mQsDetailHeader.setAlpha(0);
    mQsDetailHeaderTitle = (TextView) mQsDetailHeader.findViewById(android.R.id.title);
    mQsDetailHeaderSwitch = (Switch) mQsDetailHeader.findViewById(android.R.id.toggle);
    mQsDetailHeaderProgress = (ImageView) findViewById(R.id.qs_detail_header_progress);
    mEmergencyCallsOnly = (TextView) findViewById(R.id.header_emergency_calls_only);
    mBatteryView = (BatteryMeterView) findViewById(R.id.battery);
    mBatteryLevel = (TextView) findViewById(R.id.battery_level);
    mAlarmStatus = (TextView) findViewById(R.id.alarm_status);
    mAlarmStatus.setOnClickListener(this);
    mSignalCluster = findViewById(R.id.signal_cluster);
    mSystemIcons = (LinearLayout) findViewById(R.id.system_icons);
    loadDimens();
    updateVisibilities();
    updateClockScale();
    updateAvatarScale();
    addOnLayoutChangeListener(new View.OnLayoutChangeListener() {

        @Override
        public void onLayoutChange(View v, int left, int top, int right, int bottom, int oldLeft, int oldTop, int oldRight, int oldBottom) {
            if ((right - left) != (oldRight - oldLeft)) {
                // width changed, update clipping
                setClipping(getHeight());
            }
            boolean rtl = getLayoutDirection() == LAYOUT_DIRECTION_RTL;
            mTime.setPivotX(rtl ? mTime.getWidth() : 0);
            mTime.setPivotY(mTime.getBaseline());
            updateAmPmTranslation();
        }
    });
    setOutlineProvider(new ViewOutlineProvider() {

        @Override
        public void getOutline(View view, Outline outline) {
            outline.setRect(mClipBounds);
        }
    });
    requestCaptureValues();
}
#end_block

#method_before
public void updateEverything() {
    updateHeights();
    updateVisibilities();
    updateSystemIconsLayoutParams();
    updateClickTargets();
    updateMultiUserSwitch();
    updateClockScale();
    updateAvatarScale();
    updateClockLp();
    requestCaptureValues();
}
#method_after
public void updateEverything() {
    updateHeights();
    updateVisibilities();
    updateSystemIconsLayoutParams();
    updateClickTargets();
    updateMultiUserSwitch();
    if (mQSPanel != null) {
        mQSPanel.setExpanded(mExpanded);
    }
    updateClockScale();
    updateAvatarScale();
    updateClockLp();
    requestCaptureValues();
}
#end_block

#method_before
private void updateVisibilities() {
    mDateCollapsed.setVisibility(mExpanded && mAlarmShowing ? View.VISIBLE : View.INVISIBLE);
    mDateExpanded.setVisibility(mExpanded && mAlarmShowing ? View.INVISIBLE : View.VISIBLE);
    mAlarmStatus.setVisibility(mExpanded && mAlarmShowing ? View.VISIBLE : View.INVISIBLE);
    mSettingsButton.setVisibility(mExpanded ? View.VISIBLE : View.INVISIBLE);
    mQsDetailHeader.setVisibility(mExpanded && mShowingDetail ? View.VISIBLE : View.INVISIBLE);
    if (mSignalCluster != null) {
        updateSignalClusterDetachment();
    }
    mEmergencyCallsOnly.setVisibility(mExpanded && mShowEmergencyCallsOnly ? VISIBLE : GONE);
    loadShowBatteryTextSetting();
    updateBatteryLevelText();
    mBatteryLevel.setVisibility(mExpanded ? (mShowBatteryTextExpanded ? View.VISIBLE : View.GONE) : (mShowBatteryText ? View.VISIBLE : View.GONE));
}
#method_after
private void updateVisibilities() {
    mDateCollapsed.setVisibility(mExpanded && mAlarmShowing ? View.VISIBLE : View.INVISIBLE);
    mDateExpanded.setVisibility(mExpanded && mAlarmShowing ? View.INVISIBLE : View.VISIBLE);
    mAlarmStatus.setVisibility(mExpanded && mAlarmShowing ? View.VISIBLE : View.INVISIBLE);
    mSettingsButton.setVisibility(mExpanded ? View.VISIBLE : View.INVISIBLE);
    if (mTaskManagerButton != null) {
        mTaskManagerButton.setVisibility(mExpanded ? View.VISIBLE : View.GONE);
    }
    mQsDetailHeader.setVisibility(mExpanded && mShowingDetail ? View.VISIBLE : View.INVISIBLE);
    if (mSignalCluster != null) {
        updateSignalClusterDetachment();
    }
    mEmergencyCallsOnly.setVisibility(mExpanded && mShowEmergencyCallsOnly ? VISIBLE : GONE);
    loadShowBatteryTextSetting();
    updateBatteryLevelText();
    mBatteryLevel.setVisibility(mExpanded ? (mShowBatteryTextExpanded ? View.VISIBLE : View.GONE) : (mShowBatteryText ? View.VISIBLE : View.GONE));
}
#end_block

#method_before
private void updateSystemIconsLayoutParams() {
    RelativeLayout.LayoutParams lp = (LayoutParams) mSystemIconsSuperContainer.getLayoutParams();
    int rule = mExpanded ? mSettingsButton.getId() : mMultiUserSwitch.getId();
    if (rule != lp.getRules()[RelativeLayout.START_OF]) {
        lp.addRule(RelativeLayout.START_OF, rule);
        mSystemIconsSuperContainer.setLayoutParams(lp);
    }
}
#method_after
private void updateSystemIconsLayoutParams() {
    RelativeLayout.LayoutParams lp = (LayoutParams) mSystemIconsSuperContainer.getLayoutParams();
    int baseId = mTaskManagerButton != null ? mTaskManagerButton.getId() : mSettingsButton.getId();
    int rule = mExpanded ? baseId : mMultiUserSwitch.getId();
    if (rule != lp.getRules()[RelativeLayout.START_OF]) {
        lp.addRule(RelativeLayout.START_OF, rule);
        mSystemIconsSuperContainer.setLayoutParams(lp);
    }
}
#end_block

#method_before
private void captureLayoutValues(LayoutValues target) {
    target.timeScale = mExpanded ? 1f : mClockCollapsedScaleFactor;
    target.clockY = mClock.getBottom();
    target.dateY = mDateGroup.getTop();
    target.emergencyCallsOnlyAlpha = getAlphaForVisibility(mEmergencyCallsOnly);
    target.alarmStatusAlpha = getAlphaForVisibility(mAlarmStatus);
    target.dateCollapsedAlpha = getAlphaForVisibility(mDateCollapsed);
    target.dateExpandedAlpha = getAlphaForVisibility(mDateExpanded);
    target.avatarScale = mMultiUserAvatar.getScaleX();
    target.avatarX = mMultiUserSwitch.getLeft() + mMultiUserAvatar.getLeft();
    target.avatarY = mMultiUserSwitch.getTop() + mMultiUserAvatar.getTop();
    if (getLayoutDirection() == LAYOUT_DIRECTION_LTR) {
        target.batteryX = mSystemIconsSuperContainer.getLeft() + mSystemIconsContainer.getRight();
    } else {
        target.batteryX = mSystemIconsSuperContainer.getLeft() + mSystemIconsContainer.getLeft();
    }
    target.batteryY = mSystemIconsSuperContainer.getTop() + mSystemIconsContainer.getTop();
    target.batteryLevelAlpha = getAlphaForVisibility(mBatteryLevel);
    target.settingsAlpha = getAlphaForVisibility(mSettingsButton);
    target.settingsTranslation = mExpanded ? 0 : mMultiUserSwitch.getLeft() - mSettingsButton.getLeft();
    target.signalClusterAlpha = mSignalClusterDetached ? 0f : 1f;
    target.settingsRotation = !mExpanded ? 90f : 0f;
}
#method_after
private void captureLayoutValues(LayoutValues target) {
    target.timeScale = mExpanded ? 1f : mClockCollapsedScaleFactor;
    target.clockY = mClock.getBottom();
    target.dateY = mDateGroup.getTop();
    target.emergencyCallsOnlyAlpha = getAlphaForVisibility(mEmergencyCallsOnly);
    target.alarmStatusAlpha = getAlphaForVisibility(mAlarmStatus);
    target.dateCollapsedAlpha = getAlphaForVisibility(mDateCollapsed);
    target.dateExpandedAlpha = getAlphaForVisibility(mDateExpanded);
    target.avatarScale = mMultiUserAvatar.getScaleX();
    target.avatarX = mMultiUserSwitch.getLeft() + mMultiUserAvatar.getLeft();
    target.avatarY = mMultiUserSwitch.getTop() + mMultiUserAvatar.getTop();
    if (getLayoutDirection() == LAYOUT_DIRECTION_LTR) {
        target.batteryX = mSystemIconsSuperContainer.getLeft() + mSystemIconsContainer.getRight();
    } else {
        target.batteryX = mSystemIconsSuperContainer.getLeft() + mSystemIconsContainer.getLeft();
    }
    target.batteryY = mSystemIconsSuperContainer.getTop() + mSystemIconsContainer.getTop();
    target.batteryLevelAlpha = getAlphaForVisibility(mBatteryLevel);
    target.taskManagerAlpha = getAlphaForVisibility(mTaskManagerButton);
    target.settingsAlpha = getAlphaForVisibility(mSettingsButton);
    target.settingsTranslation = mExpanded ? 0 : mMultiUserSwitch.getLeft() - mSettingsButton.getLeft();
    if (mTaskManagerButton != null) {
        target.taskManagerTranslation = mExpanded ? 0 : mSettingsButton.getLeft() - mTaskManagerButton.getLeft();
    }
    target.signalClusterAlpha = mSignalClusterDetached ? 0f : 1f;
    target.settingsRotation = !mExpanded ? 90f : 0f;
}
#end_block

#method_before
private void applyLayoutValues(LayoutValues values) {
    mTime.setScaleX(values.timeScale);
    mTime.setScaleY(values.timeScale);
    mClock.setY(values.clockY - mClock.getHeight());
    mDateGroup.setY(values.dateY);
    mAlarmStatus.setY(values.dateY - mAlarmStatus.getPaddingTop());
    mMultiUserAvatar.setScaleX(values.avatarScale);
    mMultiUserAvatar.setScaleY(values.avatarScale);
    mMultiUserAvatar.setX(values.avatarX - mMultiUserSwitch.getLeft());
    mMultiUserAvatar.setY(values.avatarY - mMultiUserSwitch.getTop());
    if (getLayoutDirection() == LAYOUT_DIRECTION_LTR) {
        mSystemIconsSuperContainer.setX(values.batteryX - mSystemIconsContainer.getRight());
    } else {
        mSystemIconsSuperContainer.setX(values.batteryX - mSystemIconsContainer.getLeft());
    }
    mSystemIconsSuperContainer.setY(values.batteryY - mSystemIconsContainer.getTop());
    if (mSignalCluster != null && mExpanded) {
        if (getLayoutDirection() == LAYOUT_DIRECTION_LTR) {
            mSignalCluster.setX(mSystemIconsSuperContainer.getX() - mSignalCluster.getWidth());
        } else {
            mSignalCluster.setX(mSystemIconsSuperContainer.getX() + mSystemIconsSuperContainer.getWidth());
        }
        mSignalCluster.setY(mSystemIconsSuperContainer.getY() + mSystemIconsSuperContainer.getHeight() / 2 - mSignalCluster.getHeight() / 2);
    } else if (mSignalCluster != null) {
        mSignalCluster.setTranslationX(0f);
        mSignalCluster.setTranslationY(0f);
    }
    mSettingsButton.setTranslationY(mSystemIconsSuperContainer.getTranslationY());
    mSettingsButton.setTranslationX(values.settingsTranslation);
    mSettingsButton.setRotation(values.settingsRotation);
    applyAlpha(mEmergencyCallsOnly, values.emergencyCallsOnlyAlpha);
    if (!mShowingDetail) {
        // Otherwise it needs to stay invisible
        applyAlpha(mAlarmStatus, values.alarmStatusAlpha);
    }
    applyAlpha(mDateCollapsed, values.dateCollapsedAlpha);
    applyAlpha(mDateExpanded, values.dateExpandedAlpha);
    applyAlpha(mBatteryLevel, values.batteryLevelAlpha);
    applyAlpha(mSettingsButton, values.settingsAlpha);
    applyAlpha(mSignalCluster, values.signalClusterAlpha);
    if (!mExpanded) {
        mTime.setScaleX(1f);
        mTime.setScaleY(1f);
    }
    updateAmPmTranslation();
}
#method_after
private void applyLayoutValues(LayoutValues values) {
    mTime.setScaleX(values.timeScale);
    mTime.setScaleY(values.timeScale);
    mClock.setY(values.clockY - mClock.getHeight());
    mDateGroup.setY(values.dateY);
    mAlarmStatus.setY(values.dateY - mAlarmStatus.getPaddingTop());
    mMultiUserAvatar.setScaleX(values.avatarScale);
    mMultiUserAvatar.setScaleY(values.avatarScale);
    mMultiUserAvatar.setX(values.avatarX - mMultiUserSwitch.getLeft());
    mMultiUserAvatar.setY(values.avatarY - mMultiUserSwitch.getTop());
    if (getLayoutDirection() == LAYOUT_DIRECTION_LTR) {
        mSystemIconsSuperContainer.setX(values.batteryX - mSystemIconsContainer.getRight());
    } else {
        mSystemIconsSuperContainer.setX(values.batteryX - mSystemIconsContainer.getLeft());
    }
    mSystemIconsSuperContainer.setY(values.batteryY - mSystemIconsContainer.getTop());
    if (mSignalCluster != null && mExpanded) {
        if (getLayoutDirection() == LAYOUT_DIRECTION_LTR) {
            mSignalCluster.setX(mSystemIconsSuperContainer.getX() - mSignalCluster.getWidth());
        } else {
            mSignalCluster.setX(mSystemIconsSuperContainer.getX() + mSystemIconsSuperContainer.getWidth());
        }
        mSignalCluster.setY(mSystemIconsSuperContainer.getY() + mSystemIconsSuperContainer.getHeight() / 2 - mSignalCluster.getHeight() / 2);
    } else if (mSignalCluster != null) {
        mSignalCluster.setTranslationX(0f);
        mSignalCluster.setTranslationY(0f);
    }
    mSettingsButton.setTranslationY(mSystemIconsSuperContainer.getTranslationY());
    mSettingsButton.setTranslationX(values.settingsTranslation);
    mSettingsButton.setRotation(values.settingsRotation);
    if (mTaskManagerButton != null) {
        mTaskManagerButton.setTranslationX(values.taskManagerTranslation);
    }
    applyAlpha(mEmergencyCallsOnly, values.emergencyCallsOnlyAlpha);
    if (!mShowingDetail) {
        // Otherwise it needs to stay invisible
        applyAlpha(mAlarmStatus, values.alarmStatusAlpha);
    }
    applyAlpha(mDateCollapsed, values.dateCollapsedAlpha);
    applyAlpha(mDateExpanded, values.dateExpandedAlpha);
    applyAlpha(mBatteryLevel, values.batteryLevelAlpha);
    applyAlpha(mTaskManagerButton, values.taskManagerAlpha);
    applyAlpha(mSettingsButton, values.settingsAlpha);
    applyAlpha(mSignalCluster, values.signalClusterAlpha);
    if (!mExpanded) {
        mTime.setScaleX(1f);
        mTime.setScaleY(1f);
    }
    updateAmPmTranslation();
}
#end_block

#method_before
public void interpoloate(LayoutValues v1, LayoutValues v2, float t) {
    timeScale = v1.timeScale * (1 - t) + v2.timeScale * t;
    clockY = v1.clockY * (1 - t) + v2.clockY * t;
    dateY = v1.dateY * (1 - t) + v2.dateY * t;
    avatarScale = v1.avatarScale * (1 - t) + v2.avatarScale * t;
    avatarX = v1.avatarX * (1 - t) + v2.avatarX * t;
    avatarY = v1.avatarY * (1 - t) + v2.avatarY * t;
    batteryX = v1.batteryX * (1 - t) + v2.batteryX * t;
    batteryY = v1.batteryY * (1 - t) + v2.batteryY * t;
    settingsTranslation = v1.settingsTranslation * (1 - t) + v2.settingsTranslation * t;
    float t1 = Math.max(0, t - 0.5f) * 2;
    settingsRotation = v1.settingsRotation * (1 - t1) + v2.settingsRotation * t1;
    emergencyCallsOnlyAlpha = v1.emergencyCallsOnlyAlpha * (1 - t1) + v2.emergencyCallsOnlyAlpha * t1;
    float t2 = Math.min(1, 2 * t);
    signalClusterAlpha = v1.signalClusterAlpha * (1 - t2) + v2.signalClusterAlpha * t2;
    float t3 = Math.max(0, t - 0.7f) / 0.3f;
    batteryLevelAlpha = v1.batteryLevelAlpha * (1 - t3) + v2.batteryLevelAlpha * t3;
    settingsAlpha = v1.settingsAlpha * (1 - t3) + v2.settingsAlpha * t3;
    dateExpandedAlpha = v1.dateExpandedAlpha * (1 - t3) + v2.dateExpandedAlpha * t3;
    dateCollapsedAlpha = v1.dateCollapsedAlpha * (1 - t3) + v2.dateCollapsedAlpha * t3;
    alarmStatusAlpha = v1.alarmStatusAlpha * (1 - t3) + v2.alarmStatusAlpha * t3;
}
#method_after
public void interpoloate(LayoutValues v1, LayoutValues v2, float t) {
    timeScale = v1.timeScale * (1 - t) + v2.timeScale * t;
    clockY = v1.clockY * (1 - t) + v2.clockY * t;
    dateY = v1.dateY * (1 - t) + v2.dateY * t;
    avatarScale = v1.avatarScale * (1 - t) + v2.avatarScale * t;
    avatarX = v1.avatarX * (1 - t) + v2.avatarX * t;
    avatarY = v1.avatarY * (1 - t) + v2.avatarY * t;
    batteryX = v1.batteryX * (1 - t) + v2.batteryX * t;
    batteryY = v1.batteryY * (1 - t) + v2.batteryY * t;
    taskManagerTranslation = v1.taskManagerTranslation * (1 - t) + v2.taskManagerTranslation * t;
    settingsTranslation = v1.settingsTranslation * (1 - t) + v2.settingsTranslation * t;
    float t1 = Math.max(0, t - 0.5f) * 2;
    settingsRotation = v1.settingsRotation * (1 - t1) + v2.settingsRotation * t1;
    emergencyCallsOnlyAlpha = v1.emergencyCallsOnlyAlpha * (1 - t1) + v2.emergencyCallsOnlyAlpha * t1;
    float t2 = Math.min(1, 2 * t);
    signalClusterAlpha = v1.signalClusterAlpha * (1 - t2) + v2.signalClusterAlpha * t2;
    float t3 = Math.max(0, t - 0.7f) / 0.3f;
    batteryLevelAlpha = v1.batteryLevelAlpha * (1 - t3) + v2.batteryLevelAlpha * t3;
    taskManagerAlpha = v1.taskManagerAlpha * (1 - t3) + v2.taskManagerAlpha * t3;
    settingsAlpha = v1.settingsAlpha * (1 - t3) + v2.settingsAlpha * t3;
    dateExpandedAlpha = v1.dateExpandedAlpha * (1 - t3) + v2.dateExpandedAlpha * t3;
    dateCollapsedAlpha = v1.dateCollapsedAlpha * (1 - t3) + v2.dateCollapsedAlpha * t3;
    alarmStatusAlpha = v1.alarmStatusAlpha * (1 - t3) + v2.alarmStatusAlpha * t3;
}
#end_block

