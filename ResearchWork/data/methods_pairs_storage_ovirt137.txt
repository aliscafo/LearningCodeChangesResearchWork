1052
#method_before
public void OnInstall() {
    InstallModel model = (InstallModel) getWindow();
    boolean isOVirt = getEntity().getVdsType() == VDSType.oVirtNode;
    if (!model.Validate(isOVirt)) {
        return;
    }
    UpdateVdsActionParameters param = new UpdateVdsActionParameters();
    param.setvds(getEntity());
    param.setVdsId(getEntity().getId());
    param.setRootPassword((String) model.getRootPassword().getEntity());
    param.setIsReinstallOrUpgrade(true);
    param.setInstallVds(true);
    param.setoVirtIsoFile(isOVirt ? ((RpmVersion) model.getOVirtISO().getSelectedItem()).getRpmName() : null);
    param.setOverrideFirewall((Boolean) model.getOverrideIpTables().getEntity());
    param.setRebootAfterInstallation(isOVirt);
    Frontend.RunAction(VdcActionType.UpdateVds, param, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            if (returnValue != null && returnValue.getSucceeded()) {
                Cancel();
            }
        }
    });
}
#method_after
public void OnInstall() {
    InstallModel model = (InstallModel) getWindow();
    final boolean isOVirt = getEntity().getVdsType() == VDSType.oVirtNode;
    if (!model.Validate(isOVirt)) {
        return;
    }
    UpdateVdsActionParameters param = new UpdateVdsActionParameters();
    param.setvds(getEntity());
    param.setVdsId(getEntity().getId());
    param.setRootPassword((String) model.getRootPassword().getEntity());
    param.setIsReinstallOrUpgrade(true);
    param.setInstallVds(true);
    param.setoVirtIsoFile(isOVirt ? ((RpmVersion) model.getOVirtISO().getSelectedItem()).getRpmName() : null);
    param.setOverrideFirewall((Boolean) model.getOverrideIpTables().getEntity());
    AsyncDataProvider.GetClusterById(new AsyncQuery(param, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            VDSGroup cluster = (VDSGroup) returnValue;
            UpdateVdsActionParameters internalParam = (UpdateVdsActionParameters) model;
            internalParam.setRebootAfterInstallation(cluster.supportsVirtService());
            Frontend.RunAction(VdcActionType.UpdateVds, internalParam, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VdcReturnValueBase returnValue = result.getReturnValue();
                    if (returnValue != null && returnValue.getSucceeded()) {
                        Cancel();
                    }
                }
            });
        }
    }), getEntity().getVdsGroupId());
}
#end_block

#method_before
public void OnSaveInternal(boolean approveInitiated) {
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VDS host = model.getIsNew() ? new VDS() : (VDS) Cloner.clone(getSelectedItem());
    // Save changes.
    host.setVdsName((String) model.getName().getEntity());
    host.setHostName((String) model.getHost().getEntity());
    host.setPort(Integer.parseInt(model.getPort().getEntity().toString()));
    host.setSSHKeyFingerprint(host.getSSHKeyFingerprint());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    boolean consoleAddressSet = (Boolean) model.getConsoleAddressEnabled().getEntity();
    host.setConsoleAddress(!consoleAddressSet ? null : (String) model.getConsoleAddress().getEntity());
    Guid oldClusterId = host.getVdsGroupId();
    Guid newClusterId = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    host.setVdsGroupId(newClusterId);
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    host.setPmProxyPreferences(model.getPmProxyPreferences());
    // Save primary PM parameters.
    host.setManagementIp((String) model.getManagementIp().getEntity());
    host.setPmUser((String) model.getPmUserName().getEntity());
    host.setPmPassword((String) model.getPmPassword().getEntity());
    host.setPmType((String) model.getPmType().getSelectedItem());
    host.setPmOptionsMap(new ValueObjectMap(model.getPmOptionsMap(), false));
    // Save secondary PM parameters.
    host.setPmSecondaryIp((String) model.getPmSecondaryIp().getEntity());
    host.setPmSecondaryUser((String) model.getPmSecondaryUserName().getEntity());
    host.setPmSecondaryPassword((String) model.getPmSecondaryPassword().getEntity());
    host.setPmSecondaryType((String) model.getPmSecondaryType().getSelectedItem());
    host.setPmSecondaryOptionsMap(new ValueObjectMap(model.getPmSecondaryOptionsMap(), false));
    // Save other PM parameters.
    host.setpm_enabled((Boolean) model.getIsPm().getEntity());
    host.setPmSecondaryConcurrent((Boolean) model.getPmSecondaryConcurrent().getEntity());
    CancelConfirm();
    model.StartProgress(null);
    boolean isVirt = ((VDSGroup) model.getCluster().getSelectedItem()).supportsVirtService();
    if (model.getIsNew()) {
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setRootPassword((String) model.getRootPassword().getEntity());
        parameters.setOverrideFirewall((Boolean) model.getOverrideIpTables().getEntity());
        parameters.setRebootAfterInstallation(isVirt);
        Frontend.RunAction(VdcActionType.AddVds, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                Object[] array = (Object[]) result.getState();
                HostListModel localModel = (HostListModel) array[0];
                boolean localApproveInitiated = (Boolean) array[1];
                localModel.PostOnSaveInternal(result.getReturnValue(), localApproveInitiated);
            }
        }, new Object[] { this, approveInitiated });
    } else // Update VDS -> consists of changing VDS cluster first and then updating rest of VDS properties:
    {
        UpdateVdsActionParameters parameters = new UpdateVdsActionParameters();
        parameters.setvds(host);
        parameters.setVdsId(host.getId());
        // $NON-NLS-1$
        parameters.setRootPassword("");
        parameters.setInstallVds(false);
        parameters.setRebootAfterInstallation(isVirt);
        if (!oldClusterId.equals(newClusterId)) {
            Frontend.RunAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(newClusterId, host.getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Object[] array = (Object[]) result.getState();
                    HostListModel localModel = (HostListModel) array[0];
                    UpdateVdsActionParameters localParameters = (UpdateVdsActionParameters) array[1];
                    boolean localApproveInitiated = (Boolean) array[2];
                    VdcReturnValueBase localReturnValue = result.getReturnValue();
                    if (localReturnValue != null && localReturnValue.getSucceeded()) {
                        localModel.PostOnSaveInternalChangeCluster(localParameters, localApproveInitiated);
                    } else {
                        localModel.getWindow().StopProgress();
                    }
                }
            }, new Object[] { this, parameters, approveInitiated });
        } else {
            PostOnSaveInternalChangeCluster(parameters, approveInitiated);
        }
    }
}
#method_after
public void OnSaveInternal(boolean approveInitiated) {
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VDS host = model.getIsNew() ? new VDS() : (VDS) Cloner.clone(getSelectedItem());
    // Save changes.
    host.setVdsName((String) model.getName().getEntity());
    host.setHostName((String) model.getHost().getEntity());
    host.setPort(Integer.parseInt(model.getPort().getEntity().toString()));
    host.setSSHKeyFingerprint(host.getSSHKeyFingerprint());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    boolean consoleAddressSet = (Boolean) model.getConsoleAddressEnabled().getEntity();
    host.setConsoleAddress(!consoleAddressSet ? null : (String) model.getConsoleAddress().getEntity());
    Guid oldClusterId = host.getVdsGroupId();
    Guid newClusterId = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    host.setVdsGroupId(newClusterId);
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    host.setPmProxyPreferences(model.getPmProxyPreferences());
    // Save primary PM parameters.
    host.setManagementIp((String) model.getManagementIp().getEntity());
    host.setPmUser((String) model.getPmUserName().getEntity());
    host.setPmPassword((String) model.getPmPassword().getEntity());
    host.setPmType((String) model.getPmType().getSelectedItem());
    host.setPmOptionsMap(new ValueObjectMap(model.getPmOptionsMap(), false));
    // Save secondary PM parameters.
    host.setPmSecondaryIp((String) model.getPmSecondaryIp().getEntity());
    host.setPmSecondaryUser((String) model.getPmSecondaryUserName().getEntity());
    host.setPmSecondaryPassword((String) model.getPmSecondaryPassword().getEntity());
    host.setPmSecondaryType((String) model.getPmSecondaryType().getSelectedItem());
    host.setPmSecondaryOptionsMap(new ValueObjectMap(model.getPmSecondaryOptionsMap(), false));
    // Save other PM parameters.
    host.setpm_enabled((Boolean) model.getIsPm().getEntity());
    host.setPmSecondaryConcurrent((Boolean) model.getPmSecondaryConcurrent().getEntity());
    CancelConfirm();
    model.StartProgress(null);
    final boolean isVirt = ((VDSGroup) model.getCluster().getSelectedItem()).supportsVirtService();
    if (model.getIsNew()) {
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setRootPassword((String) model.getRootPassword().getEntity());
        parameters.setOverrideFirewall((Boolean) model.getOverrideIpTables().getEntity());
        parameters.setRebootAfterInstallation(isVirt);
        Frontend.RunAction(VdcActionType.AddVds, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                Object[] array = (Object[]) result.getState();
                HostListModel localModel = (HostListModel) array[0];
                boolean localApproveInitiated = (Boolean) array[1];
                localModel.PostOnSaveInternal(result.getReturnValue(), localApproveInitiated);
            }
        }, new Object[] { this, approveInitiated });
    } else // Update VDS -> consists of changing VDS cluster first and then updating rest of VDS properties:
    {
        UpdateVdsActionParameters parameters = new UpdateVdsActionParameters();
        parameters.setvds(host);
        parameters.setVdsId(host.getId());
        // $NON-NLS-1$
        parameters.setRootPassword("");
        parameters.setInstallVds(false);
        parameters.setRebootAfterInstallation(isVirt);
        if (!oldClusterId.equals(newClusterId)) {
            Frontend.RunAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(newClusterId, host.getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Object[] array = (Object[]) result.getState();
                    HostListModel localModel = (HostListModel) array[0];
                    UpdateVdsActionParameters localParameters = (UpdateVdsActionParameters) array[1];
                    boolean localApproveInitiated = (Boolean) array[2];
                    VdcReturnValueBase localReturnValue = result.getReturnValue();
                    if (localReturnValue != null && localReturnValue.getSucceeded()) {
                        localModel.PostOnSaveInternalChangeCluster(localParameters, localApproveInitiated);
                    } else {
                        localModel.getWindow().StopProgress();
                    }
                }
            }, new Object[] { this, parameters, approveInitiated });
        } else {
            PostOnSaveInternalChangeCluster(parameters, approveInitiated);
        }
    }
}
#end_block

#method_before
public void Restart() {
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().restartHostsTitle());
    // $NON-NLS-1$
    model.setHashName("restart_host");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToRestartTheFollowingHostsMsg());
    // model.Items = SelectedItems.Cast<VDS>().Select(a => a.vds_name);
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        items.add(vds.getName());
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRestart", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void Restart() {
    final Constants constants = ConstantsManager.getInstance().getConstants();
    final Messages messages = ConstantsManager.getInstance().getMessages();
    ConfirmationModel model = new ConfirmationModel();
    setConfirmWindow(model);
    model.setTitle(constants.restartHostsTitle());
    // $NON-NLS-1$
    model.setHashName("restart_host");
    model.setMessage(constants.areYouSureYouWantToRestartTheFollowingHostsMsg());
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        int runningVms = vds.getVmCount();
        if (runningVms > 0) {
            items.add(messages.hostNumberOfRunningVms(vds.getName(), runningVms));
        } else {
            items.add(vds.getName());
        }
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRestart", this);
    tempVar.setTitle(constants.ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(constants.cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((storage_pool) object).getname();
        }
    });
    clusterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDSGroup) object).getname();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    templateEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VmTemplate) object).getName();
        }
    });
    oSTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    timeZoneEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Entry<String, String>) object).getValue();
        }
    });
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    usbSupportEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    // $NON-NLS-1$
    isAutoAssignEditor = new EntityModelRadioButtonEditor("runVmOnHostGroup");
    defaultHostEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getName();
        }
    });
    migrationModeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Resource Allocation
    // $NON-NLS-1$
    provisioningThinEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // $NON-NLS-1$
    provisioningCloneEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    secondBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    cdImageEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return (String) object;
        }
    });
}
#method_after
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((storage_pool) object).getname();
        }
    });
    clusterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDSGroup) object).getname();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    templateEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VmTemplate) object).getName();
        }
    });
    oSTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    timeZoneEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Entry<String, String>) object).getValue();
        }
    });
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    usbSupportEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    vncKeyboardLayoutEditor = new ListModelListBoxEditor<Object>(new AbstractRenderer<Object>() {

        final String globalLayout = (String) AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.VncKeyboardLayout);

        @Override
        public String render(Object object) {
            if (object == null) {
                return messages.globalVncKeyboardLayoutCaption(globalLayout);
            } else {
                return object.toString();
            }
        }
    });
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    // $NON-NLS-1$
    isAutoAssignEditor = new EntityModelRadioButtonEditor("runVmOnHostGroup");
    defaultHostEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getName();
        }
    });
    migrationModeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Resource Allocation
    // $NON-NLS-1$
    provisioningThinEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // $NON-NLS-1$
    provisioningCloneEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    secondBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    cdImageEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return (String) object;
        }
    });
}
#end_block

#method_before
protected void localize(CommonApplicationConstants constants) {
    // Tabs
    highAvailabilityTab.setLabel(constants.highAvailVmPopup());
    resourceAllocationTab.setLabel(constants.resourceAllocVmPopup());
    bootOptionsTab.setLabel(constants.bootOptionsVmPopup());
    customPropertiesTab.setLabel(constants.customPropsVmPopup());
    // General Tab
    generalTab.setLabel(constants.GeneralVmPopup());
    dataCenterEditor.setLabel(constants.dcVmPopup());
    clusterEditor.setLabel(constants.hostClusterVmPopup());
    quotaEditor.setLabel(constants.quotaVmPopup());
    nameLabel.setText(constants.nameVmPopup());
    descriptionEditor.setLabel(constants.descriptionVmPopup());
    templateEditor.setLabel(constants.basedOnTemplateVmPopup());
    memSizeEditor.setLabel(constants.memSizeVmPopup());
    totalvCPUsEditor.setLabel(constants.numOfVCPUs());
    corePerSocketEditor.setLabel(constants.coresPerSocket());
    numOfSocketsEditor.setLabel(constants.numOfSockets());
    oSTypeEditor.setLabel(constants.osVmPopup());
    isStatelessEditor.setLabel(constants.statelessVmPopup());
    isRunAndPauseEditor.setLabel(constants.runAndPauseVmPopup());
    isDeleteProtectedEditor.setLabel(constants.deleteProtectionPopup());
    isSmartcardEnabledEditor.setLabel(constants.smartcardVmPopup());
    // Pools Tab
    poolTab.setLabel(constants.poolVmPopup());
    poolTypeEditor.setLabel(constants.poolTypeVmPopup());
    editPrestartedVmsLabel.setText(constants.prestartedVms());
    prestartedLabel.setText(constants.prestartedPoolPopup());
    numOfVmsEditor.setLabel(constants.numOfVmsPoolPopup());
    // initial run Tab
    initialRunTab.setLabel(constants.initialRunVmPopup());
    domainEditor.setLabel(constants.domainVmPopup());
    timeZoneEditor.setLabel(constants.tzVmPopup());
    // Console Tab
    consoleTab.setLabel(constants.consoleVmPopup());
    displayProtocolEditor.setLabel(constants.protocolVmPopup());
    usbSupportEditor.setLabel(constants.usbPolicyVmPopup());
    numOfMonitorsEditor.setLabel(constants.monitorsVmPopup());
    allowConsoleReconnectEditor.setLabel(constants.allowConsoleReconnect());
    // Host Tab
    hostTab.setLabel(constants.hostVmPopup());
    isAutoAssignEditor.setLabel(constants.anyHostInClusterVmPopup());
    // specificHostEditor.setLabel("Specific");
    hostCpuEditor.setLabel(constants.useHostCpu());
    cpuPinning.setLabel(constants.cpuPinningLabel());
    cpuPinningLabel.setHTML(constants.cpuPinningLabelExplanation());
    // High Availability Tab
    isHighlyAvailableEditor.setLabel(constants.highlyAvailableVmPopup());
    // Resource Allocation Tab
    provisioningEditor.setLabel(constants.templateProvisVmPopup());
    provisioningThinEditor.setLabel(constants.thinVmPopup());
    provisioningCloneEditor.setLabel(constants.cloneVmPopup());
    minAllocatedMemoryEditor.setLabel(constants.physMemGuarVmPopup());
    // Boot Options
    firstBootDeviceEditor.setLabel(constants.firstDeviceVmPopup());
    secondBootDeviceEditor.setLabel(constants.secondDeviceVmPopup());
    kernel_pathEditor.setLabel(constants.kernelPathVmPopup());
    initrd_pathEditor.setLabel(constants.initrdPathVmPopup());
    kernel_parametersEditor.setLabel(constants.kernelParamsVmPopup());
}
#method_after
protected void localize(CommonApplicationConstants constants) {
    // Tabs
    highAvailabilityTab.setLabel(constants.highAvailVmPopup());
    resourceAllocationTab.setLabel(constants.resourceAllocVmPopup());
    bootOptionsTab.setLabel(constants.bootOptionsVmPopup());
    customPropertiesTab.setLabel(constants.customPropsVmPopup());
    // General Tab
    generalTab.setLabel(constants.GeneralVmPopup());
    dataCenterEditor.setLabel(constants.dcVmPopup());
    clusterEditor.setLabel(constants.hostClusterVmPopup());
    quotaEditor.setLabel(constants.quotaVmPopup());
    nameLabel.setText(constants.nameVmPopup());
    descriptionEditor.setLabel(constants.descriptionVmPopup());
    templateEditor.setLabel(constants.basedOnTemplateVmPopup());
    memSizeEditor.setLabel(constants.memSizeVmPopup());
    totalvCPUsEditor.setLabel(constants.numOfVCPUs());
    corePerSocketEditor.setLabel(constants.coresPerSocket());
    numOfSocketsEditor.setLabel(constants.numOfSockets());
    oSTypeEditor.setLabel(constants.osVmPopup());
    isStatelessEditor.setLabel(constants.statelessVmPopup());
    isRunAndPauseEditor.setLabel(constants.runAndPauseVmPopup());
    isDeleteProtectedEditor.setLabel(constants.deleteProtectionPopup());
    isSmartcardEnabledEditor.setLabel(constants.smartcardVmPopup());
    // Pools Tab
    poolTab.setLabel(constants.poolVmPopup());
    poolTypeEditor.setLabel(constants.poolTypeVmPopup());
    editPrestartedVmsLabel.setText(constants.prestartedVms());
    prestartedLabel.setText(constants.prestartedPoolPopup());
    numOfVmsEditor.setLabel(constants.numOfVmsPoolPopup());
    // initial run Tab
    initialRunTab.setLabel(constants.initialRunVmPopup());
    domainEditor.setLabel(constants.domainVmPopup());
    timeZoneEditor.setLabel(constants.tzVmPopup());
    // Console Tab
    consoleTab.setLabel(constants.consoleVmPopup());
    displayProtocolEditor.setLabel(constants.protocolVmPopup());
    vncKeyboardLayoutEditor.setLabel(constants.vncKeyboardLayoutVmPopup());
    usbSupportEditor.setLabel(constants.usbPolicyVmPopup());
    numOfMonitorsEditor.setLabel(constants.monitorsVmPopup());
    allowConsoleReconnectEditor.setLabel(constants.allowConsoleReconnect());
    // Host Tab
    hostTab.setLabel(constants.hostVmPopup());
    isAutoAssignEditor.setLabel(constants.anyHostInClusterVmPopup());
    // specificHostEditor.setLabel("Specific");
    hostCpuEditor.setLabel(constants.useHostCpu());
    cpuPinning.setLabel(constants.cpuPinningLabel());
    cpuPinningLabel.setHTML(constants.cpuPinningLabelExplanation());
    // High Availability Tab
    isHighlyAvailableEditor.setLabel(constants.highlyAvailableVmPopup());
    // Resource Allocation Tab
    provisioningEditor.setLabel(constants.templateProvisVmPopup());
    provisioningThinEditor.setLabel(constants.thinVmPopup());
    provisioningCloneEditor.setLabel(constants.cloneVmPopup());
    minAllocatedMemoryEditor.setLabel(constants.physMemGuarVmPopup());
    // Boot Options
    firstBootDeviceEditor.setLabel(constants.firstDeviceVmPopup());
    secondBootDeviceEditor.setLabel(constants.secondDeviceVmPopup());
    kernel_pathEditor.setLabel(constants.kernelPathVmPopup());
    initrd_pathEditor.setLabel(constants.initrdPathVmPopup());
    kernel_parametersEditor.setLabel(constants.kernelParamsVmPopup());
}
#end_block

#method_before
private void initListeners(final UnitVmModel object) {
    // TODO should be handled by the core framework
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsHostAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupHostTabAvailability(object);
            } else if ("IsHostTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (object.getIsHostTabValid()) {
                    hostTab.markAsValid();
                } else {
                    hostTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupCustomPropertiesAvailability(object);
            }
        }
    });
    object.getIsAutoAssign().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isAutoAssign = (Boolean) object.getIsAutoAssign().getEntity();
            defaultHostEditor.setEnabled(!isAutoAssign);
            // only this is not bind to the model, so needs to listen to the change explicitly
            specificHost.setValue(!isAutoAssign);
        }
    });
    // only for non local storage available
    setupHostTabAvailability(object);
    object.getStorageDomain().getItemsChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            addDiskAllocation(object);
        }
    });
    object.getProvisioning().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isProvisioningChangable = object.getProvisioning().getIsChangable();
            provisioningThinEditor.setEnabled(isProvisioningChangable);
            provisioningCloneEditor.setEnabled(isProvisioningChangable);
            boolean isProvisioningAvailable = object.getProvisioning().getIsAvailable();
            provisionSelectionPanel.setVisible(isProvisioningAvailable);
            boolean isDisksAvailable = object.getIsDisksAvailable();
            disksAllocationPanel.setVisible(isDisksAvailable);
            storageAllocationPanel.setVisible(isProvisioningAvailable || isDisksAvailable);
        }
    });
    object.getUsbPolicy().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName == "SelectedItem") {
                // $NON-NLS-1$
                updateUsbNativeMessageVisibility(object);
            }
        }
    });
    updateUsbNativeMessageVisibility(object);
}
#method_after
private void initListeners(final UnitVmModel object) {
    // TODO should be handled by the core framework
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsHostAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupHostTabAvailability(object);
            } else if ("IsHostTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (object.getIsHostTabValid()) {
                    hostTab.markAsValid();
                } else {
                    hostTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabAvailable".equals(propName)) {
                // $NON-NLS-1$
                setupCustomPropertiesAvailability(object);
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                addDiskAllocation(object);
            }
        }
    });
    object.getIsAutoAssign().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isAutoAssign = (Boolean) object.getIsAutoAssign().getEntity();
            defaultHostEditor.setEnabled(!isAutoAssign);
            // only this is not bind to the model, so needs to listen to the change explicitly
            specificHost.setValue(!isAutoAssign);
        }
    });
    // only for non local storage available
    setupHostTabAvailability(object);
    object.getProvisioning().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            boolean isProvisioningChangable = object.getProvisioning().getIsChangable();
            provisioningThinEditor.setEnabled(isProvisioningChangable);
            provisioningCloneEditor.setEnabled(isProvisioningChangable);
            boolean isProvisioningAvailable = object.getProvisioning().getIsAvailable();
            provisionSelectionPanel.setVisible(isProvisioningAvailable);
            boolean isDisksAvailable = object.getIsDisksAvailable();
            disksAllocationPanel.setVisible(isDisksAvailable);
            storageAllocationPanel.setVisible(isProvisioningAvailable || isDisksAvailable);
        }
    });
    object.getUsbPolicy().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            PropertyChangedEventArgs e = (PropertyChangedEventArgs) args;
            if (e.PropertyName == "SelectedItem") {
                // $NON-NLS-1$
                updateUsbNativeMessageVisibility(object);
            }
        }
    });
    updateUsbNativeMessageVisibility(object);
}
#end_block

#method_before
private void initTabAvailabilityListeners(final UnitVmModel vm) {
    // TODO should be handled by the core framework
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsWindowsOS".equals(propName)) {
                // $NON-NLS-1$
                domainEditor.setEnabled(vm.getIsWindowsOS());
            } else if ("IsGeneralTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsGeneralTabValid()) {
                    generalTab.markAsValid();
                } else {
                    generalTab.markAsInvalid(null);
                }
            } else if ("IsDisplayTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsDisplayTabValid()) {
                    consoleTab.markAsValid();
                } else {
                    consoleTab.markAsInvalid(null);
                }
            } else if ("IsAllocationTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsAllocationTabValid()) {
                    resourceAllocationTab.markAsValid();
                } else {
                    resourceAllocationTab.markAsInvalid(null);
                }
            } else if ("IsHighlyAvailable".equals(propName)) {
                // $NON-NLS-1$
                highAvailabilityTab.setVisible((Boolean) vm.getIsHighlyAvailable().getEntity());
            } else if ("IsBootSequenceTabValid".equals(propName)) {
                // $NON-NLS-1$
                if ((Boolean) vm.getIsHighlyAvailable().getEntity()) {
                    bootOptionsTab.markAsValid();
                } else {
                    bootOptionsTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsCustomPropertiesTabValid()) {
                    customPropertiesTab.markAsValid();
                } else {
                    customPropertiesTab.markAsInvalid(null);
                }
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                boolean isDisksAvailable = vm.getIsDisksAvailable();
                disksAllocationPanel.setVisible(isDisksAvailable);
                boolean isProvisioningAvailable = vm.getProvisioning().getIsAvailable();
                storageAllocationPanel.setVisible(isProvisioningAvailable || isDisksAvailable);
                if (isDisksAvailable) {
                    // Update warning message by disks status
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.ILLEGAL);
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.LOCKED);
                } else {
                    // Clear warning message
                    // $NON-NLS-1$
                    generalWarningMessage.setText("");
                }
            }
        }
    });
    // High Availability only avail in server mode
    highAvailabilityTab.setVisible(vm.getVmType().equals(VmType.Server));
    // TODO: Move to a more appropriate method
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsLinuxOS".equals(propName)) {
                // $NON-NLS-1$
                linuxBootOptionsPanel.setVisible(vm.getIsLinuxOS());
            }
        }
    });
    // only avail for desktop mode
    isStatelessEditor.setVisible(vm.getVmType().equals(VmType.Desktop));
    numOfMonitorsEditor.setVisible(vm.getVmType().equals(VmType.Desktop));
    defaultHostEditor.setEnabled(false);
    specificHost.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            defaultHostEditor.setEnabled(specificHost.getValue());
            ValueChangeEvent.fire(isAutoAssignEditor.asRadioButton(), false);
        }
    });
    // TODO: This is a hack and should be handled cleanly via model property availability
    isAutoAssignEditor.addDomHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            defaultHostEditor.setEnabled(false);
        }
    }, ClickEvent.getType());
    vm.getIsAutoAssign().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!isAutoAssignEditor.asRadioButton().getValue())
                specificHost.setValue(true, true);
        }
    });
    cpuPinningLabel.setVisible(vm.getCpuPinning().getIsAvailable());
    vm.getCpuPinning().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            cpuPinningLabel.setVisible(vm.getCpuPinning().getIsAvailable());
        }
    });
}
#method_after
private void initTabAvailabilityListeners(final UnitVmModel vm) {
    // TODO should be handled by the core framework
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsWindowsOS".equals(propName)) {
                // $NON-NLS-1$
                domainEditor.setEnabled(vm.getIsWindowsOS());
            } else if ("IsGeneralTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsGeneralTabValid()) {
                    generalTab.markAsValid();
                } else {
                    generalTab.markAsInvalid(null);
                }
            } else if ("IsDisplayTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsDisplayTabValid()) {
                    consoleTab.markAsValid();
                } else {
                    consoleTab.markAsInvalid(null);
                }
            } else if ("IsAllocationTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsAllocationTabValid()) {
                    resourceAllocationTab.markAsValid();
                } else {
                    resourceAllocationTab.markAsInvalid(null);
                }
            } else if ("IsHighlyAvailable".equals(propName)) {
                // $NON-NLS-1$
                highAvailabilityTab.setVisible((Boolean) vm.getIsHighlyAvailable().getEntity());
            } else if ("IsBootSequenceTabValid".equals(propName)) {
                // $NON-NLS-1$
                if ((Boolean) vm.getIsHighlyAvailable().getEntity()) {
                    bootOptionsTab.markAsValid();
                } else {
                    bootOptionsTab.markAsInvalid(null);
                }
            } else if ("IsCustomPropertiesTabValid".equals(propName)) {
                // $NON-NLS-1$
                if (vm.getIsCustomPropertiesTabValid()) {
                    customPropertiesTab.markAsValid();
                } else {
                    customPropertiesTab.markAsInvalid(null);
                }
            } else if ("IsDisksAvailable".equals(propName)) {
                // $NON-NLS-1$
                boolean isDisksAvailable = vm.getIsDisksAvailable();
                disksAllocationPanel.setVisible(isDisksAvailable);
                boolean isProvisioningAvailable = vm.getProvisioning().getIsAvailable();
                storageAllocationPanel.setVisible(isProvisioningAvailable || isDisksAvailable);
                if (isDisksAvailable) {
                    // Update warning message by disks status
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.ILLEGAL);
                    updateDisksWarningByImageStatus(vm.getDisks(), ImageStatus.LOCKED);
                } else {
                    // Clear warning message
                    // $NON-NLS-1$
                    generalWarningMessage.setText("");
                }
            }
        }
    });
    // High Availability only avail in server mode
    highAvailabilityTab.setVisible(vm.getVmType().equals(VmType.Server));
    // TODO: Move to a more appropriate method
    vm.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            String propName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("IsLinuxOS".equals(propName)) {
                // $NON-NLS-1$
                linuxBootOptionsPanel.setVisible(vm.getIsLinuxOS());
            }
        }
    });
    // only avail for desktop mode
    isStatelessEditor.setVisible(vm.getVmType().equals(VmType.Desktop));
    numOfMonitorsEditor.setVisible(vm.getVmType().equals(VmType.Desktop));
    defaultHostEditor.setEnabled(false);
    specificHost.addValueChangeHandler(new ValueChangeHandler<Boolean>() {

        @Override
        public void onValueChange(ValueChangeEvent<Boolean> event) {
            defaultHostEditor.setEnabled(specificHost.getValue());
            ValueChangeEvent.fire(isAutoAssignEditor.asRadioButton(), false);
        }
    });
    // TODO: This is a hack and should be handled cleanly via model property availability
    isAutoAssignEditor.addDomHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            defaultHostEditor.setEnabled(false);
        }
    }, ClickEvent.getType());
    vm.getIsAutoAssign().getEntityChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            if (!isAutoAssignEditor.asRadioButton().getValue())
                specificHost.setValue(true, true);
        }
    });
    cpuPinningLabel.setVisible(vm.getCpuPinning().getIsChangable());
    vm.getCpuPinning().getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            cpuPinningLabel.setVisible(vm.getCpuPinning().getIsChangable());
        }
    });
}
#end_block

#method_before
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    dataCenterEditor.setTabIndex(nextTabIndex++);
    clusterEditor.setTabIndex(nextTabIndex++);
    quotaEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    incraseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    templateEditor.setTabIndex(nextTabIndex++);
    memSizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = generalAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    domainEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    displayProtocolEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    provisioningEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#method_after
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    dataCenterEditor.setTabIndex(nextTabIndex++);
    clusterEditor.setTabIndex(nextTabIndex++);
    quotaEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    incraseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    templateEditor.setTabIndex(nextTabIndex++);
    memSizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = generalAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    domainEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    displayProtocolEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    provisioningEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#end_block

#method_before
private static VmTemplate CloneVmTemplate(VmTemplate instance) {
    VmTemplate obj = new VmTemplate();
    obj.setstorage_pool_id(instance.getstorage_pool_id());
    obj.setstorage_pool_name(instance.getstorage_pool_name());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setSizeGB(instance.getSizeGB());
    // TODO: see comments above on DiskImageMap
    obj.setDiskImageMap(instance.getDiskImageMap());
    obj.setInterfaces(instance.getInterfaces());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setchild_count(instance.getchild_count());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setDescription(instance.getDescription());
    obj.setDomain(instance.getDomain());
    obj.setFailBack(instance.isFailBack());
    obj.setAutoSuspend(instance.isAutoSuspend());
    obj.setStateless(instance.isStateless());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setName(instance.getName());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setstatus(instance.getstatus());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setvds_group_name(instance.getvds_group_name());
    obj.setVmType(instance.getVmType());
    obj.setId(instance.getId());
    obj.setDiskList(instance.getDiskList());
    return obj;
}
#method_after
private static VmTemplate CloneVmTemplate(VmTemplate instance) {
    VmTemplate obj = new VmTemplate();
    obj.setStoragePoolId(instance.getStoragePoolId());
    obj.setStoragePoolName(instance.getStoragePoolName());
    obj.setDefaultDisplayType(instance.getDefaultDisplayType());
    obj.setPriority(instance.getPriority());
    obj.setIsoPath(instance.getIsoPath());
    obj.setOrigin(instance.getOrigin());
    obj.setSizeGB(instance.getSizeGB());
    // TODO: see comments above on DiskImageMap
    obj.setDiskImageMap(instance.getDiskImageMap());
    obj.setInterfaces(instance.getInterfaces());
    obj.setAutoStartup(instance.isAutoStartup());
    obj.setChildCount(instance.getChildCount());
    obj.setCpuPerSocket(instance.getCpuPerSocket());
    obj.setCreationDate(instance.getCreationDate());
    obj.setDefaultBootSequence(instance.getDefaultBootSequence());
    obj.setDescription(instance.getDescription());
    obj.setDomain(instance.getDomain());
    obj.setFailBack(instance.isFailBack());
    obj.setAutoSuspend(instance.isAutoSuspend());
    obj.setStateless(instance.isStateless());
    obj.setMemSizeMb(instance.getMemSizeMb());
    obj.setName(instance.getName());
    obj.setNiceLevel(instance.getNiceLevel());
    obj.setNumOfMonitors(instance.getNumOfMonitors());
    obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect());
    obj.setNumOfSockets(instance.getNumOfSockets());
    obj.setStatus(instance.getStatus());
    obj.setTimeZone(instance.getTimeZone());
    obj.setUsbPolicy(instance.getUsbPolicy());
    obj.setVdsGroupId(instance.getVdsGroupId());
    obj.setVdsGroupName(instance.getVdsGroupName());
    obj.setVmType(instance.getVmType());
    obj.setId(instance.getId());
    obj.setDiskList(instance.getDiskList());
    obj.setRunAndPause(instance.isRunAndPause());
    return obj;
}
#end_block

#method_before
protected void runVm() {
    setActionReturnValue(VMStatus.Down);
    if (getVdsToRunOn()) {
        VMStatus status = null;
        try {
            incrementVdsPendingVmsCount();
            attachCd();
            if (connectLunDisks(getVdsId())) {
                status = createVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } catch (VdcBLLException e) {
            VdcBllErrors errorCode = e.getErrorCode();
            // re-throw it. otherwise, continue (the vm will be down and a re-run will be triggered)
            switch(errorCode) {
                // should never get here with errorCode = 'Done' though
                case Done:
                case exist:
                case // probably wrong xml format sent.
                PROTOCOL_ERROR:
                    throw e;
                default:
            }
        } finally {
            freeLock();
            decrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (status != null && (status.isRunning() || status == VMStatus.RestoringState)) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds
            // no need to log the command because it is being logged inside
            // the rerun
            log.infoFormat("Failed to run desktop {0}, rerun", getVm().getName());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            rerun();
        }
    } else {
        failedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#method_after
protected void runVm() {
    setActionReturnValue(VMStatus.Down);
    if (getVdsToRunOn()) {
        VMStatus status = null;
        try {
            VmHandler.UpdateVmGuestAgentVersion(getVm());
            incrementVdsPendingVmsCount();
            attachCd();
            if (connectLunDisks(getVdsId())) {
                status = createVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } catch (VdcBLLException e) {
            VdcBllErrors errorCode = e.getErrorCode();
            // re-throw it. otherwise, continue (the vm will be down and a re-run will be triggered)
            switch(errorCode) {
                // should never get here with errorCode = 'Done' though
                case Done:
                case exist:
                case // probably wrong xml format sent.
                PROTOCOL_ERROR:
                    throw e;
                default:
            }
        } finally {
            freeLock();
            decrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (status != null && (status.isRunning() || status == VMStatus.RestoringState)) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds
            // no need to log the command because it is being logged inside
            // the rerun
            log.infoFormat("Failed to run desktop {0}, rerun", getVm().getName());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            rerun();
        }
    } else {
        failedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#end_block

#method_before
private void guestToolsVersionTreatment() {
    boolean attachCd = false;
    String selectedToolsVersion = "";
    String selectedToolsClusterVersion = "";
    VmHandler.UpdateVmGuestAgentVersion(getVm());
    StorageDomain isoDomain = null;
    if (getVm().getVmOs().isWindows() && (null != (isoDomain = LinqUtils.firstOrNull(getStorageDomainDAO().getAllForStoragePool(getVm().getStoragePoolId()), new Predicate<StorageDomain>() {

        @Override
        public boolean eval(StorageDomain domain) {
            return domain.getStorageDomainType() == StorageDomainType.ISO;
        }
    })) && isoDomain.getStatus() == StorageDomainStatus.Active && StringUtils.isEmpty(_cdImagePath))) {
        // get cluster version of the vm tools
        Version vmToolsClusterVersion = null;
        if (getVm().getHasAgent()) {
            Version clusterVer = getVm().getPartialVersion();
            if (Version.OpEquality(clusterVer, new Version("4.4"))) {
                vmToolsClusterVersion = new Version("2.1");
            } else {
                vmToolsClusterVersion = clusterVer;
            }
        }
        // Fetch cached Iso files from active Iso domain.
        List<RepoFileMetaData> repoFilesMap = IsoDomainListSyncronizer.getInstance().getCachedIsoListByDomainId(isoDomain.getId(), ImageType.ISO);
        Version bestClusterVer = null;
        int bestToolVer = 0;
        for (RepoFileMetaData map : repoFilesMap) {
            String fileName = map.getRepoFileName() != null ? map.getRepoFileName() : "";
            Matcher matchToolPattern = Pattern.compile(IsoDomainListSyncronizer.getRegexToolPattern()).matcher(fileName);
            if (matchToolPattern.find()) {
                // Get cluster version and tool version of Iso tool.
                // TODO: Should be group name string support in java7.
                Version clusterVer = new Version(matchToolPattern.group(1));
                int toolVersion = Integer.parseInt(matchToolPattern.group(3));
                if (clusterVer.compareTo(getVm().getVdsGroupCompatibilityVersion()) <= 0) {
                    if ((bestClusterVer == null) || (clusterVer.compareTo(bestClusterVer) > 0)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    } else if ((Version.OpEquality(clusterVer, bestClusterVer)) && (toolVersion > bestToolVer)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    }
                }
            }
        }
        if (bestClusterVer != null && (vmToolsClusterVersion == null || vmToolsClusterVersion.compareTo(bestClusterVer) < 0 || (Version.OpEquality(vmToolsClusterVersion, bestClusterVer) && getVm().getHasAgent() && getVm().getGuestAgentVersion().getBuild() < bestToolVer))) {
            // Vm has no tools or there are new tools
            selectedToolsVersion = (Integer.toString(bestToolVer));
            selectedToolsClusterVersion = bestClusterVer.toString();
            attachCd = true;
        }
    }
    if (attachCd) {
        String rhevToolsPath = String.format("%1$s%2$s_%3$s.iso", IsoDomainListSyncronizer.getGuestToolsSetupIsoPrefix(), selectedToolsClusterVersion, selectedToolsVersion);
        String isoDir = (String) runVdsCommand(VDSCommandType.IsoDirectory, new IrsBaseVDSCommandParameters(getVm().getStoragePoolId())).getReturnValue();
        rhevToolsPath = isoDir + File.separator + rhevToolsPath;
        getVm().setCdPath(ImagesHandler.cdPathWindowsToLinux(rhevToolsPath, getVm().getStoragePoolId()));
    }
}
#method_after
private void guestToolsVersionTreatment() {
    boolean attachCd = false;
    String selectedToolsVersion = "";
    String selectedToolsClusterVersion = "";
    StorageDomain isoDomain = null;
    if (getVm().getVmOs().isWindows() && (null != (isoDomain = LinqUtils.firstOrNull(getStorageDomainDAO().getAllForStoragePool(getVm().getStoragePoolId()), new Predicate<StorageDomain>() {

        @Override
        public boolean eval(StorageDomain domain) {
            return domain.getStorageDomainType() == StorageDomainType.ISO;
        }
    })) && isoDomain.getStatus() == StorageDomainStatus.Active && StringUtils.isEmpty(_cdImagePath))) {
        // get cluster version of the vm tools
        Version vmToolsClusterVersion = null;
        if (getVm().getHasAgent()) {
            Version clusterVer = getVm().getPartialVersion();
            if (Version.OpEquality(clusterVer, new Version("4.4"))) {
                vmToolsClusterVersion = new Version("2.1");
            } else {
                vmToolsClusterVersion = clusterVer;
            }
        }
        // Fetch cached Iso files from active Iso domain.
        List<RepoFileMetaData> repoFilesMap = IsoDomainListSyncronizer.getInstance().getCachedIsoListByDomainId(isoDomain.getId(), ImageFileType.ISO);
        Version bestClusterVer = null;
        int bestToolVer = 0;
        for (RepoFileMetaData map : repoFilesMap) {
            String fileName = map.getRepoFileName() != null ? map.getRepoFileName() : "";
            Matcher matchToolPattern = Pattern.compile(IsoDomainListSyncronizer.getRegexToolPattern()).matcher(fileName);
            if (matchToolPattern.find()) {
                // Get cluster version and tool version of Iso tool.
                // TODO: Should be group name string support in java7.
                Version clusterVer = new Version(matchToolPattern.group(1));
                int toolVersion = Integer.parseInt(matchToolPattern.group(3));
                if (clusterVer.compareTo(getVm().getVdsGroupCompatibilityVersion()) <= 0) {
                    if ((bestClusterVer == null) || (clusterVer.compareTo(bestClusterVer) > 0)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    } else if ((Version.OpEquality(clusterVer, bestClusterVer)) && (toolVersion > bestToolVer)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    }
                }
            }
        }
        if (bestClusterVer != null && (vmToolsClusterVersion == null || vmToolsClusterVersion.compareTo(bestClusterVer) < 0 || (Version.OpEquality(vmToolsClusterVersion, bestClusterVer) && getVm().getHasAgent() && getVm().getGuestAgentVersion().getBuild() < bestToolVer))) {
            // Vm has no tools or there are new tools
            selectedToolsVersion = (Integer.toString(bestToolVer));
            selectedToolsClusterVersion = bestClusterVer.toString();
            attachCd = true;
        }
    }
    if (attachCd) {
        String rhevToolsPath = String.format("%1$s%2$s_%3$s.iso", IsoDomainListSyncronizer.getGuestToolsSetupIsoPrefix(), selectedToolsClusterVersion, selectedToolsVersion);
        String isoDir = (String) runVdsCommand(VDSCommandType.IsoDirectory, new IrsBaseVDSCommandParameters(getVm().getStoragePoolId())).getReturnValue();
        rhevToolsPath = isoDir + File.separator + rhevToolsPath;
        getVm().setCdPath(ImagesHandler.cdPathWindowsToLinux(rhevToolsPath, getVm().getStoragePoolId()));
    }
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = super.getPermissionCheckSubjects();
    // special permission is needed to use custom properties
    if (!StringUtils.isEmpty(getParameters().getCustomProperties())) {
        permissionList.add(new PermissionSubject(getParameters().getVmId(), VdcObjectType.VM, ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES));
    }
    return permissionList;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    final List<PermissionSubject> permissionList = super.getPermissionCheckSubjects();
    // special permission is needed to use custom properties
    if (!StringUtils.isEmpty(getParameters().getCustomProperties())) {
        permissionList.add(new PermissionSubject(getParameters().getVmId(), VdcObjectType.VM, ActionGroup.CHANGE_VM_CUSTOM_PROPERTIES));
    }
    // check, if user can override default target host for VM
    if (getVm() != null) {
        final Guid destinationVdsId = getParameters().getDestinationVdsId();
        if (destinationVdsId != null && !destinationVdsId.equals(getVm().getDedicatedVmForVds())) {
            permissionList.add(new PermissionSubject(getParameters().getVmId(), VdcObjectType.VM, ActionGroup.EDIT_ADMIN_VM_PROPERTIES));
        }
    }
    return permissionList;
}
#end_block

#method_before
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenter().setIsChangable(false);
        getCluster().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#method_after
public void setVmAttachedToPool(boolean value) {
    if (value) {
        // ==General Tab==
        getDataCenter().setIsChangable(false);
        getCluster().setIsChangable(!value);
        getQuota().setIsChangable(false);
        getDescription().setIsChangable(false);
        getNumOfDesktops().setIsChangable(false);
        getPrestartedVms().setIsChangable(false);
        getTemplate().setIsChangable(false);
        getMemSize().setIsChangable(false);
        getTotalCPUCores().setIsChangable(false);
        getCoresPerSocket().setIsChangable(false);
        getNumOfSockets().setIsChangable(false);
        getOSType().setIsChangable(false);
        getIsStateless().setIsChangable(false);
        getIsRunAndPause().setIsChangable(false);
        getIsDeleteProtected().setIsChangable(false);
        // ==Initial run Tab==
        getTimeZone().setIsChangable(false);
        getDomain().setIsChangable(false);
        // ==Console Tab==
        getDisplayProtocol().setIsChangable(false);
        getUsbPolicy().setIsChangable(false);
        getNumOfMonitors().setIsChangable(false);
        getIsSmartcardEnabled().setIsChangable(false);
        getAllowConsoleReconnect().setIsChangable(false);
        getVncKeyboardLayout().setIsChangable(false);
        // ==Host Tab==
        getIsAutoAssign().setIsChangable(false);
        getDefaultHost().setIsChangable(false);
        getHostCpu().setIsChangable(false);
        getMigrationMode().setIsChangable(false);
        getCpuPinning().setIsChangable(false);
        // ==Resource Allocation Tab==
        getMinAllocatedMemory().setIsChangable(false);
        getProvisioning().setIsChangable(false);
        getProvisioningThin_IsSelected().setIsChangable(false);
        getProvisioningClone_IsSelected().setIsChangable(false);
        getDisksAllocationModel().setIsChangable(false);
        // ==Boot Options Tab==
        getFirstBootDevice().setIsChangable(false);
        getSecondBootDevice().setIsChangable(false);
        getCdAttached().setIsChangable(false);
        getCdImage().setIsChangable(false);
        getKernel_path().setIsChangable(false);
        getInitrd_path().setIsChangable(false);
        getKernel_parameters().setIsChangable(false);
        // ==Custom Properties Tab==
        getCustomProperties().setIsChangable(false);
        vmAttachedToPool = true;
    }
}
#end_block

#method_before
public void Initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.Initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    InitOSType();
    InitDisplayProtocol();
    InitFirstBootDevice();
    InitNumOfMonitors();
    InitAllowConsoleReconnect();
    InitMinimalVmMemSize();
    InitMaximalVmMemSize32OS();
    initMigrationMode();
    behavior.Initialize(SystemTreeSelectedItem);
}
#method_after
public void Initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.Initialize();
    setHash(getHashName() + new Date());
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangable(true);
    getCdImage().setIsChangable(false);
    InitOSType();
    InitDisplayProtocol();
    InitFirstBootDevice();
    InitNumOfMonitors();
    InitAllowConsoleReconnect();
    InitMinimalVmMemSize();
    InitMaximalVmMemSize32OS();
    initMigrationMode();
    initVncKeyboardLayout();
    behavior.Initialize(SystemTreeSelectedItem);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) {
        if (sender == getDataCenter()) {
            DataCenter_SelectedItemChanged(sender, args);
        } else if (sender == getTemplate()) {
            Template_SelectedItemChanged(sender, args);
        } else if (sender == getCluster()) {
            Cluster_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getTimeZone()) {
            TimeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            DefaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            OSType_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            FirstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            DisplayProtocol_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            NumOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            CoresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            MigrationMode_EntityChanged(sender, args);
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            MemSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            TotalCPUCores_EntityChanged(sender, args);
        } else if (sender == getHostCpu()) {
            behavior.updateCpuPinningVisibility();
        } else if (sender == getProvisioning()) {
            Provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) {
        if (sender == getDataCenter()) {
            DataCenter_SelectedItemChanged(sender, args);
        } else if (sender == getTemplate()) {
            Template_SelectedItemChanged(sender, args);
        } else if (sender == getCluster()) {
            Cluster_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getTimeZone()) {
            TimeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            DefaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            OSType_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            FirstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            DisplayProtocol_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            NumOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            CoresPerSocket_EntityChanged(sender, args);
        } else if (sender == getMigrationMode()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            MemSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            TotalCPUCores_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            behavior.updateUseHostCpuAvailability();
            behavior.updateCpuPinningVisibility();
        } else if (sender == getProvisioning()) {
            Provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        }
    }
}
#end_block

#method_before
private void DisplayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getDisplayProtocol().getSelectedItem();
    if (entityModel == null) {
        return;
    }
    DisplayType type = (DisplayType) entityModel.getEntity();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    UpdateNumOfMonitors();
}
#method_after
private void DisplayProtocol_SelectedItemChanged(Object sender, EventArgs args) {
    EntityModel entityModel = (EntityModel) getDisplayProtocol().getSelectedItem();
    if (entityModel == null) {
        return;
    }
    DisplayType type = (DisplayType) entityModel.getEntity();
    if (type == DisplayType.vnc) {
        getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED);
        getIsSmartcardEnabled().setEntity(false);
    }
    getUsbPolicy().setIsChangable(type == DisplayType.qxl);
    getIsSmartcardEnabled().setIsChangable(type == DisplayType.qxl);
    getVncKeyboardLayout().setIsAvailable(type == DisplayType.vnc);
    UpdateNumOfMonitors();
}
#end_block

#method_before
private void UpdateNumOfMonitors() {
    boolean isVnc = false;
    if (getDisplayProtocol().getSelectedItem() != null) {
        DisplayType displayType = (DisplayType) ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity();
        isVnc = displayType == DisplayType.vnc;
    }
    if (isVnc) {
        getNumOfMonitors().setSelectedItem(1);
        getNumOfMonitors().setIsChangable(false);
    } else {
        getNumOfMonitors().setIsChangable(true);
    }
}
#method_after
private void UpdateNumOfMonitors() {
    if (isVncSelected()) {
        getNumOfMonitors().setSelectedItem(1);
        getNumOfMonitors().setIsChangable(false);
    } else {
        getNumOfMonitors().setIsChangable(true);
    }
}
#end_block

#method_before
private void editConsole() {
    if (getWindow() != null) {
        return;
    }
    ConsolePopupModel model = new ConsolePopupModel();
    model.setModel(this);
    // $NON-NLS-1$
    model.setHashName("editConsole");
    setWindow(model);
    // $NON-NLS-1$
    UICommand saveCommand = new UICommand("OnEditConsoleSave", this);
    saveCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    saveCommand.setIsDefault(true);
    model.getCommands().add(saveCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void editConsole() {
    if (getWindow() != null) {
        return;
    }
    final HasConsoleModel hasConsoleModel = getSelectedHasConsoleModel();
    if (hasConsoleModel == null) {
        return;
    }
    final ConsolePopupModel model = new ConsolePopupModel();
    model.setConsoleContext(ConsoleContext.WA);
    model.setModel(hasConsoleModel);
    // $NON-NLS-1$
    model.setHashName("editConsole");
    setWindow(model);
    // $NON-NLS-1$
    final UICommand saveCommand = new UICommand("OnEditConsoleSave", this);
    saveCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    saveCommand.setIsDefault(true);
    model.getCommands().add(saveCommand);
    // $NON-NLS-1$
    final UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
public void PostNameUniqueCheck() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = (VM) getSelectedItem();
    VM tempVar = new VM();
    tempVar.setId(vm.getId());
    tempVar.setVmType(model.getVmType());
    if (model.getQuota().getSelectedItem() != null) {
        tempVar.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    tempVar.setVmOs((VmOsType) model.getOSType().getSelectedItem());
    tempVar.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    tempVar.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    // $NON-NLS-1$
    tempVar.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    tempVar.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    tempVar.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    tempVar.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    tempVar.setTimeZone(model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    tempVar.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setAutoSuspend(false);
    tempVar.setStateless((Boolean) model.getIsStateless().getEntity());
    tempVar.setRunAndPause(((Boolean) model.getIsRunAndPause().getEntity()));
    tempVar.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    tempVar.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    tempVar.setDefaultBootSequence(model.getBootSequence());
    tempVar.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    // $NON-NLS-1$
    tempVar.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    tempVar.setUsbPolicy(vm.getUsbPolicy());
    tempVar.setInitrdUrl(vm.getInitrdUrl());
    tempVar.setKernelUrl(vm.getKernelUrl());
    tempVar.setKernelParams(vm.getKernelParams());
    tempVar.setDedicatedVmForVds(vm.getDedicatedVmForVds());
    tempVar.setMigrationSupport(vm.getMigrationSupport());
    VM newvm = tempVar;
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    newvm.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    newvm.setPriority((Integer) prioritySelectedItem.getEntity());
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newvm, (String) model.getName().getEntity(), (String) model.getDescription().getEntity());
    addVmTemplateParameters.setPublicUse((Boolean) model.getIsTemplatePublic().getEntity());
    addVmTemplateParameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmListModel vmListModel = (VmListModel) result.getState();
            vmListModel.getWindow().StopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmListModel.Cancel();
            }
        }
    }, this);
}
#method_after
public void PostNameUniqueCheck() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = (VM) getSelectedItem();
    VM tempVar = new VM();
    tempVar.setId(vm.getId());
    tempVar.setVmType(model.getVmType());
    if (model.getQuota().getSelectedItem() != null) {
        tempVar.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    tempVar.setVmOs((VmOsType) model.getOSType().getSelectedItem());
    tempVar.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    tempVar.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    // $NON-NLS-1$
    tempVar.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    tempVar.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    tempVar.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    tempVar.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    tempVar.setTimeZone(model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    tempVar.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setAutoSuspend(false);
    tempVar.setStateless((Boolean) model.getIsStateless().getEntity());
    tempVar.setRunAndPause(((Boolean) model.getIsRunAndPause().getEntity()));
    tempVar.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    tempVar.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    tempVar.setDefaultBootSequence(model.getBootSequence());
    tempVar.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    // $NON-NLS-1$
    tempVar.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    tempVar.setUsbPolicy(vm.getUsbPolicy());
    tempVar.setInitrdUrl(vm.getInitrdUrl());
    tempVar.setKernelUrl(vm.getKernelUrl());
    tempVar.setKernelParams(vm.getKernelParams());
    tempVar.setDedicatedVmForVds(vm.getDedicatedVmForVds());
    tempVar.setMigrationSupport(vm.getMigrationSupport());
    tempVar.setVncKeyboardLayout(vm.getVncKeyboardLayout());
    VM newvm = tempVar;
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    newvm.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    newvm.setPriority((Integer) prioritySelectedItem.getEntity());
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newvm, (String) model.getName().getEntity(), (String) model.getDescription().getEntity());
    addVmTemplateParameters.setPublicUse((Boolean) model.getIsTemplatePublic().getEntity());
    addVmTemplateParameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmListModel vmListModel = (VmListModel) result.getState();
            vmListModel.getWindow().StopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmListModel.Cancel();
            }
        }
    }, this);
}
#end_block

#method_before
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setRunAndPause((Boolean) model.getIsRunAndPause().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                if (retVal != null && retVal.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#method_after
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setRunAndPause((Boolean) model.getIsRunAndPause().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    getcurrentVm().setVncKeyboardLayout((String) model.getVncKeyboardLayout().getSelectedItem());
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                if (retVal != null && retVal.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#end_block

#method_before
@Override
protected void OnSelectedItemChanged() {
    super.OnSelectedItemChanged();
    UpdateActionAvailability();
    UpdateConsoleModels();
}
#method_after
@Override
protected void OnSelectedItemChanged() {
    super.OnSelectedItemChanged();
    updateConsoleModels();
    UpdateActionAvailability();
}
#end_block

#method_before
@Override
protected void SelectedItemsChanged() {
    super.SelectedItemsChanged();
    UpdateActionAvailability();
    UpdateConsoleModels();
}
#method_after
@Override
protected void SelectedItemsChanged() {
    super.SelectedItemsChanged();
    updateConsoleModels();
    UpdateActionAvailability();
}
#end_block

#method_before
@Override
protected void SelectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.SelectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.PropertyName.equals("status")) {
        UpdateActionAvailability();
    } else if (// $NON-NLS-1$
    e.PropertyName.equals("display_type")) {
        UpdateConsoleModels();
    }
}
#method_after
@Override
protected void SelectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.SelectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.PropertyName.equals("status")) {
        UpdateActionAvailability();
    } else if (// $NON-NLS-1$
    e.PropertyName.equals("display_type")) {
        updateConsoleModels();
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getEditConsoleCommand().setIsExecutionAllowed(items.size() == 1);
    getFireConsoleConnectEventCommand().setIsExecutionAllowed(items.size() == 1);
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#method_after
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
    getConsoleConnectCommand().setIsExecutionAllowed(isConsoleCommandsExecutionAllowed());
    getEditConsoleCommand().setIsExecutionAllowed(isConsoleCommandsExecutionAllowed());
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditConsoleCommand()) {
        editConsole();
    } else if (command == getFireConsoleConnectEventCommand()) {
        fireConsoleConnectEvent();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (// $NON-NLS-1$
    command.getName().equals("closeVncInfo") || "OnEditConsoleSave".equals(command.getName())) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditConsoleCommand()) {
        editConsole();
    } else if (command == getConsoleConnectCommand()) {
        connectToConsoles();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (// $NON-NLS-1$
    command.getName().equals("closeVncInfo") || "OnEditConsoleSave".equals(command.getName())) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
@Override
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    return consoleModelsCache.resolveSelectedProtocol(item);
}
#method_after
@Override
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    return consoleModelsCache.resolveUserSelectedProtocol(item);
}
#end_block

#method_before
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setName(rs.getString("vm_name"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    entity.setRunAndPause(rs.getBoolean("is_run_and_pause"));
    return entity;
}
#method_after
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setName(rs.getString("vm_name"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    return entity;
}
#end_block

#method_before
@Override
public void Template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOs());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().setEntity(vm.getCustomProperties());
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    if (vm.isInitialized()) {
        getModel().getTimeZone().setChangeProhibitionReason(// $NON-NLS-1$
        "Time Zone cannot be change since the Virtual Machine was booted at the first time.");
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    UpdateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    InitPriority(vm.getPriority());
}
#method_after
@Override
public void Template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOs());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsRunAndPause().setEntity(vm.isRunAndPause());
    getModel().getIsRunAndPause().setIsChangable(!vm.isRunning());
    getModel().getIsRunAndPause().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getCoresPerSocket().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().setEntity(vm.getCustomProperties());
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    getModel().getVncKeyboardLayout().setSelectedItem(vm.getVncKeyboardLayout());
    if (vm.isInitialized()) {
        getModel().getTimeZone().setChangeProhibitionReason(// $NON-NLS-1$
        "Time Zone cannot be change since the Virtual Machine was booted at the first time.");
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    UpdateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    InitPriority(vm.getPriority());
}
#end_block

#method_before
public void updateRunTimeStatisticsData(VmStatistics vmStatistics, VM vm) {
    setElapsedTime(vmStatistics.getelapsed_time());
    setUsageNetworkPercent(vmStatistics.getusage_network_percent());
    vm.getStatisticsData().setDisksUsage(vmStatistics.getDisksUsage());
    // -------- cpu --------------
    setCpuSys(vmStatistics.getcpu_sys());
    setCpuUser(vmStatistics.getcpu_user());
    if ((getCpuSys() != null) && (getCpuUser() != null)) {
        Double percent = (getCpuSys() + getCpuUser()) / new Double(vm.getNumOfCpus());
        setUsageCpuPercent(percent.intValue());
        if (getUsageCpuPercent() != null && getUsageCpuPercent() > 100) {
            setUsageCpuPercent(100);
        }
    }
    // -------- memory --------------
    setUsageMemPercent(vmStatistics.getusage_mem_percent());
}
#method_after
public void updateRunTimeStatisticsData(VmStatistics vmStatistics, VM vm) {
    setElapsedTime(vmStatistics.getelapsed_time());
    setUsageNetworkPercent(vmStatistics.getusage_network_percent());
    vm.getStatisticsData().setDisksUsage(vmStatistics.getDisksUsage());
    // -------- cpu --------------
    setCpuSys(vmStatistics.getcpu_sys());
    setCpuUser(vmStatistics.getcpu_user());
    if ((getCpuSys() != null) && (getCpuUser() != null)) {
        Double percent = (getCpuSys() + getCpuUser()) / vm.getNumOfCpus();
        setUsageCpuPercent(percent.intValue());
        if (getUsageCpuPercent() != null && getUsageCpuPercent() > 100) {
            setUsageCpuPercent(100);
        }
    }
    // -------- memory --------------
    setUsageMemPercent(vmStatistics.getusage_mem_percent());
}
#end_block

#method_before
public void PostNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) userPortalListModel.getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    VM vm = (VM) selectedItem.getEntity();
    VM tempVar = new VM();
    tempVar.setId(vm.getId());
    tempVar.setVmType(model.getVmType());
    tempVar.setVmOs((VmOsType) model.getOSType().getSelectedItem());
    tempVar.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    tempVar.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    // $NON-NLS-1$
    tempVar.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    tempVar.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    tempVar.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    tempVar.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    tempVar.setTimeZone(model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    tempVar.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    tempVar.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    tempVar.setAutoSuspend(false);
    tempVar.setStateless((Boolean) model.getIsStateless().getEntity());
    tempVar.setRunAndPause(((Boolean) model.getIsRunAndPause().getEntity()));
    tempVar.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    tempVar.setDefaultBootSequence(model.getBootSequence());
    tempVar.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    // $NON-NLS-1$
    tempVar.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    tempVar.setInitrdUrl(vm.getInitrdUrl());
    tempVar.setKernelUrl(vm.getKernelUrl());
    tempVar.setKernelParams(vm.getKernelParams());
    VM newvm = tempVar;
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    newvm.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    newvm.setPriority((Integer) prioritySelectedItem.getEntity());
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newvm, (String) model.getName().getEntity(), (String) model.getDescription().getEntity());
    addVmTemplateParameters.setPublicUse((Boolean) model.getIsTemplatePublic().getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        newvm.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    addVmTemplateParameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    Frontend.RunAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            stopProgress(result.getState());
            cancel();
        }
    }, this);
}
#method_after
public void PostNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) userPortalListModel.getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    VM vm = (VM) selectedItem.getEntity();
    VM tempVar = new VM();
    tempVar.setId(vm.getId());
    tempVar.setVmType(model.getVmType());
    tempVar.setVmOs((VmOsType) model.getOSType().getSelectedItem());
    tempVar.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    tempVar.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    // $NON-NLS-1$
    tempVar.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    tempVar.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    tempVar.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    tempVar.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    tempVar.setTimeZone(model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    tempVar.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    tempVar.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    tempVar.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    tempVar.setAutoSuspend(false);
    tempVar.setStateless((Boolean) model.getIsStateless().getEntity());
    tempVar.setRunAndPause(((Boolean) model.getIsRunAndPause().getEntity()));
    tempVar.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    tempVar.setDefaultBootSequence(model.getBootSequence());
    tempVar.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    // $NON-NLS-1$
    tempVar.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    tempVar.setInitrdUrl(vm.getInitrdUrl());
    tempVar.setKernelUrl(vm.getKernelUrl());
    tempVar.setKernelParams(vm.getKernelParams());
    tempVar.setVncKeyboardLayout(vm.getVncKeyboardLayout());
    VM newvm = tempVar;
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    newvm.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    newvm.setPriority((Integer) prioritySelectedItem.getEntity());
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newvm, (String) model.getName().getEntity(), (String) model.getDescription().getEntity());
    addVmTemplateParameters.setPublicUse((Boolean) model.getIsTemplatePublic().getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        newvm.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    addVmTemplateParameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    Frontend.RunAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            stopProgress(result.getState());
            cancel();
        }
    }, this);
}
#end_block

#method_before
public void PostVmNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    gettempVm().setVmType(model.getVmType());
    gettempVm().setVmtGuid(template.getId());
    gettempVm().setName(name);
    gettempVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    gettempVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    gettempVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    gettempVm().setVmDescription((String) model.getDescription().getEntity());
    gettempVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    gettempVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    gettempVm().setVdsGroupId(newClusterID);
    gettempVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    gettempVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    gettempVm().setAutoSuspend(false);
    gettempVm().setStateless((Boolean) model.getIsStateless().getEntity());
    gettempVm().setRunAndPause(((Boolean) model.getIsRunAndPause().getEntity()));
    gettempVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    gettempVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    gettempVm().setDefaultBootSequence(model.getBootSequence());
    gettempVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    gettempVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    gettempVm().setKernelUrl((String) model.getKernel_path().getEntity());
    gettempVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    gettempVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    gettempVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    gettempVm().setPriority((Integer) prioritySelectedItem.getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        gettempVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    gettempVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        gettempVm().setDedicatedVmForVds(null);
    } else {
        gettempVm().setDedicatedVmForVds(defaultHost.getId());
    }
    gettempVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    if (model.getIsNew()) {
        if (gettempVm().getVmtGuid().equals(NGuid.Empty)) {
            AddVmFromScratchParameters parameters = new AddVmFromScratchParameters(gettempVm(), new ArrayList<DiskImage>(), NGuid.Empty);
            parameters.setMakeCreatorExplicitOwner(true);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    stopProgress(result.getState());
                    cancel();
                }
            }, this);
        } else {
            setstorageDomain((StorageDomain) model.getStorageDomain().getSelectedItem());
            if ((Boolean) model.getProvisioning().getEntity()) {
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model, Object result) {
                        UserPortalListModel userPortalListModel1 = (UserPortalListModel) model;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result;
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : ((UnitVmModel) userPortalListModel1.getWindow()).getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            if (disk != null) {
                                templateDisk.setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                templateDisk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), getstorageDomain().getStorageType()));
                            }
                        }
                        HashMap<Guid, DiskImage> dict = new HashMap<Guid, DiskImage>();
                        for (DiskImage a : templateDisks) {
                            dict.put(a.getId(), a);
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(gettempVm(), dict, getstorageDomain().getId());
                        param.setMakeCreatorExplicitOwner(true);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult a) {
                                stopProgress(a.getState());
                                cancel();
                            }
                        }, this);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                VmManagementParametersBase param = new VmManagementParametersBase(gettempVm());
                param.setStorageDomainId(getstorageDomain().getId());
                param.setMakeCreatorExplicitOwner(true);
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(param);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult a) {
                        stopProgress(a.getState());
                        cancel();
                    }
                }, this);
            }
        }
    } else {
        Guid oldClusterID = ((VM) selectedItem.getEntity()).getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            Frontend.RunAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(newClusterID, gettempVm().getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult a) {
                            stopProgress(a.getState());
                            cancel();
                        }
                    }, this);
                }
            }, this);
        } else {
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult a) {
                    stopProgress(a.getState());
                    cancel();
                }
            }, this);
        }
    }
}
#method_after
public void PostVmNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    gettempVm().setVmType(model.getVmType());
    gettempVm().setVmtGuid(template.getId());
    gettempVm().setName(name);
    gettempVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    gettempVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    gettempVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    gettempVm().setVmDescription((String) model.getDescription().getEntity());
    gettempVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    gettempVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    gettempVm().setVdsGroupId(newClusterID);
    gettempVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    gettempVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    gettempVm().setAutoSuspend(false);
    gettempVm().setStateless((Boolean) model.getIsStateless().getEntity());
    gettempVm().setRunAndPause(((Boolean) model.getIsRunAndPause().getEntity()));
    gettempVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    gettempVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    gettempVm().setDefaultBootSequence(model.getBootSequence());
    gettempVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    gettempVm().setVncKeyboardLayout((String) model.getVncKeyboardLayout().getSelectedItem());
    gettempVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    gettempVm().setKernelUrl((String) model.getKernel_path().getEntity());
    gettempVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    gettempVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    gettempVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    gettempVm().setPriority((Integer) prioritySelectedItem.getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        gettempVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    gettempVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        gettempVm().setDedicatedVmForVds(null);
    } else {
        gettempVm().setDedicatedVmForVds(defaultHost.getId());
    }
    gettempVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    if (model.getIsNew()) {
        if (gettempVm().getVmtGuid().equals(NGuid.Empty)) {
            AddVmFromScratchParameters parameters = new AddVmFromScratchParameters(gettempVm(), new ArrayList<DiskImage>(), NGuid.Empty);
            parameters.setMakeCreatorExplicitOwner(true);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    stopProgress(result.getState());
                    cancel();
                }
            }, this);
        } else {
            setstorageDomain((StorageDomain) model.getStorageDomain().getSelectedItem());
            if ((Boolean) model.getProvisioning().getEntity()) {
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model, Object result) {
                        UserPortalListModel userPortalListModel1 = (UserPortalListModel) model;
                        UnitVmModel unitVmModel = (UnitVmModel) userPortalListModel1.getWindow();
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(gettempVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), Guid.Empty);
                        param.setMakeCreatorExplicitOwner(true);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult a) {
                                stopProgress(a.getState());
                                cancel();
                            }
                        }, this);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                VmManagementParametersBase param = new VmManagementParametersBase(gettempVm());
                param.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                param.setMakeCreatorExplicitOwner(true);
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(param);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult a) {
                        stopProgress(a.getState());
                        cancel();
                    }
                }, this);
            }
        }
    } else {
        Guid oldClusterID = ((VM) selectedItem.getEntity()).getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            Frontend.RunAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(newClusterID, gettempVm().getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult a) {
                            stopProgress(a.getState());
                            cancel();
                        }
                    }, this);
                }
            }, this);
        } else {
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult a) {
                    stopProgress(a.getState());
                    cancel();
                }
            }, this);
        }
    }
}
#end_block

#method_before
@Override
public void OnVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            boolean found = false;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.Concat(getvms(), filteredPools);
        Linq.Sort(all, new Linq.VmAndPoolByNameComparer());
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            UserPortalItemModel model = new UserPortalItemModel(this, this);
            model.setEntity(item);
            items.add(model);
            updateConsoleModel(model);
        }
        // In userportal 'Extended View': Set 'CanConnectAutomatically' to true if there's one and only one up VM.
        setCanConnectAutomatically(GetUpVms(items).size() == 1 && GetUpVms(items).get(0).getDefaultConsoleModel().getConnectCommand().getIsExecutionAllowed());
        setItems(items);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.Empty);
    }
}
#method_after
@Override
public void OnVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            boolean found = false;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.Concat(getvms(), filteredPools);
        Linq.Sort(all, new Linq.VmAndPoolByNameComparer());
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            UserPortalItemModel model = new UserPortalItemModel(this, this, ConsoleContext.UP_EXTENDED);
            model.setEntity(item);
            items.add(model);
            updateConsoleModel(model);
        }
        // In userportal 'Extended View': Set 'CanConnectAutomatically' to true if there's one and only one up VM.
        setCanConnectAutomatically(GetUpVms(items).size() == 1);
        setItems(items);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.Empty);
    }
}
#end_block

#method_before
public static Pair<List<String>, List<String>> determineProblematicNics(List<VdsNetworkInterface> interfaces, List<Network> clusterNetworks) {
    Map<String, Boolean> bondsWithStatus = new HashMap<String, Boolean>();
    List<String> networks = new ArrayList<String>();
    List<String> brokenNics = new ArrayList<String>();
    Map<String, List<String>> bondsWithListOfNics = new HashMap<String, List<String>>();
    Map<String, Network> networksByName = NetworkUtils.networksByName(clusterNetworks);
    for (VdsNetworkInterface iface : interfaces) {
        // Handle nics that are non bonded and not vlan over bond
        if (isRequiredInterfaceDown(networksByName, interfaces, iface)) {
            brokenNics.add(iface.getName());
            networks.add(iface.getNetworkName());
        }
        // Handle bond nics
        if (iface.getBondName() != null) {
            populate(bondsWithStatus, interfaces, clusterNetworks, networks, bondsWithListOfNics, iface);
        }
    }
    // only if we didn't already set the host to down
    if (brokenNics.isEmpty()) {
        for (String key : bondsWithStatus.keySet()) {
            if (!bondsWithStatus.get(key)) {
                // add the nics name for audit log
                for (String name : bondsWithListOfNics.get(key)) {
                    brokenNics.add(name);
                }
            }
        }
    }
    return new Pair<List<String>, List<String>>(brokenNics, networks);
}
#method_after
public static Pair<List<String>, List<String>> determineProblematicNics(List<VdsNetworkInterface> interfaces, List<Network> clusterNetworks) {
    Map<String, Boolean> bondsWithStatus = new HashMap<String, Boolean>();
    List<String> networks = new ArrayList<String>();
    List<String> brokenNics = new ArrayList<String>();
    Map<String, List<String>> bondsWithListOfNics = new HashMap<String, List<String>>();
    Map<String, Network> networksByName = NetworkUtils.networksByName(clusterNetworks);
    for (VdsNetworkInterface iface : interfaces) {
        // Handle nics that are non bonded and not vlan over bond
        if (isRequiredInterfaceDown(networksByName, interfaces, iface)) {
            brokenNics.add(iface.getName());
            networks.add(iface.getNetworkName());
        }
        // Handle bond nics
        if (iface.getBondName() != null) {
            populate(bondsWithStatus, interfaces, clusterNetworks, networks, bondsWithListOfNics, iface);
        }
    }
    // only if we didn't already mark a NIC as broken
    if (brokenNics.isEmpty()) {
        for (String key : bondsWithStatus.keySet()) {
            if (!bondsWithStatus.get(key)) {
                // add the nics name for audit log
                for (String name : bondsWithListOfNics.get(key)) {
                    brokenNics.add(name);
                }
            }
        }
    }
    return new Pair<List<String>, List<String>>(brokenNics, networks);
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#method_after
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_SECONDARY_AGENT_USED_FOR_FENCE_OPERATION, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#method_after
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.INVALID_INTERFACE_FOR_MANAGEMENT_NETWORK_CONFIGURATION, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SETUP_NETWORK_FAILED_FOR_MANAGEMENT_NETWORK_CONFIGURATION, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.PERSIST_NETWORK_FAILED_FOR_MANAGEMENT_NETWORK, AuditLogSeverity.WARNING);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#end_block

#method_before
private boolean canRemoveTemplateDisk() {
    boolean retValue = true;
    DiskImage diskImage = getDiskImage();
    if (getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (retValue && diskImage.getStorageIds().size() == 1) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN);
    }
    if (retValue) {
        List<String> problematicVmNames = new ArrayList<String>();
        List<VM> vms = DbFacade.getInstance().getVmDao().getAllWithTemplate(getVmTemplateId());
        for (VM vm : vms) {
            List<Disk> vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
            for (Disk vmDisk : vmDisks) {
                if (vmDisk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage vmDiskImage = (DiskImage) vmDisk;
                    if (vmDiskImage.getImageTemplateId().equals(diskImage.getImageId())) {
                        if (vmDiskImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
                            retValue = false;
                            problematicVmNames.add(vm.getName());
                        }
                        break;
                    }
                }
            }
        }
        if (!retValue) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
            addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        }
    }
    return retValue;
}
#method_after
private boolean canRemoveTemplateDisk() {
    boolean retValue = true;
    DiskImage diskImage = getDiskImage();
    if (getVmTemplate().getStatus() == VmTemplateStatus.Locked) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (retValue && diskImage.getStorageIds().size() == 1) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN);
    }
    if (retValue) {
        List<String> problematicVmNames = new ArrayList<String>();
        List<VM> vms = DbFacade.getInstance().getVmDao().getAllWithTemplate(getVmTemplateId());
        for (VM vm : vms) {
            List<Disk> vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
            for (Disk vmDisk : vmDisks) {
                if (vmDisk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage vmDiskImage = (DiskImage) vmDisk;
                    if (vmDiskImage.getImageTemplateId().equals(diskImage.getImageId())) {
                        if (vmDiskImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
                            retValue = false;
                            problematicVmNames.add(vm.getName());
                        }
                        break;
                    }
                }
            }
        }
        if (!retValue) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
            addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        }
    }
    return retValue;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (getDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
        DiskImage diskImage = getDiskImage();
        RemoveImageParameters p = new RemoveImageParameters(diskImage.getImageId());
        p.setTransactionScopeOption(TransactionScopeOption.Suppress);
        p.setDiskImage(diskImage);
        p.setParentCommand(VdcActionType.RemoveDisk);
        p.setEntityId(getParameters().getEntityId());
        p.setParentParameters(getParameters());
        p.setRemoveFromSnapshots(true);
        p.setStorageDomainId(getParameters().getStorageDomainId());
        p.setForceDelete(getParameters().getForceDelete());
        if (diskImage.getStorageIds().size() == 1) {
            p.setRemoveFromDB(true);
        }
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.RemoveImage, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            setSucceeded(true);
        }
    } else {
        removeLunDisk();
    }
}
#method_after
@Override
protected void executeCommand() {
    if (getDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.RemoveImage, buildRemoveImageParameters(getDiskImage()), ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (vdcReturnValue.getSucceeded()) {
            incrementVmsGeneration();
            getReturnValue().getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            setSucceeded(true);
        }
    } else {
        removeLunDisk();
    }
}
#end_block

#method_before
@Override
protected void endSuccessfully() {
    incrementVmsGeneration();
    setSucceeded(true);
}
#method_after
@Override
protected void endSuccessfully() {
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (getDiskImage() != null) {
        try {
            VDSReturnValue vdsReturnValue = performImageVdsmOperation();
            getReturnValue().getInternalTaskIdList().add(createTask(vdsReturnValue.getCreationInfo(), getParameters().getParentCommand(), VdcObjectType.Storage, getParameters().getStorageDomainId()));
        } catch (VdcBLLException e) {
            if (e.getErrorCode() != VdcBllErrors.ImageDoesNotExistInDomainError) {
                throw e;
            }
        }
        if (getParameters().getParentCommand() != VdcActionType.RemoveVmFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveVmTemplateFromImportExport) {
            performImageDbOperations();
        }
    } else {
        log.warn("DiskImage is null, nothing to remove");
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    if (getDiskImage() != null) {
        try {
            VDSReturnValue vdsReturnValue = performImageVdsmOperation();
            getReturnValue().getInternalTaskIdList().add(createTask(vdsReturnValue.getCreationInfo(), getParameters().getParentCommand(), VdcObjectType.Storage, getParameters().getStorageDomainId()));
        } catch (VdcBLLException e) {
            if (e.getErrorCode() != VdcBllErrors.ImageDoesNotExistInDomainError) {
                throw e;
            }
            log.warnFormat("The image group with id {0} wasn't actually deleted from the storage domain {1} because it didn't exist in it", getDiskImage().getId(), getStorageDomainId());
        }
        if (getParameters().getParentCommand() != VdcActionType.RemoveVmFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveVmTemplateFromImportExport) {
            performImageDbOperations();
        }
    } else {
        log.warn("DiskImage is null, nothing to remove");
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = validate(templateExists());
    if (retVal) {
        DiskImageList images = templatesFromExport.get(LinqUtils.firstOrNull(templatesFromExport.keySet(), new Predicate<VmTemplate>() {

            @Override
            public boolean eval(VmTemplate t) {
                return t.getId().equals(getParameters().getVmTemplateId());
            }
        }));
        if (images != null) {
            getParameters().setImages(Arrays.asList(images.getDiskImages()));
        } else {
            retVal = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
        }
    }
    if (retVal) {
        StorageDomainValidator validator = new StorageDomainValidator(getStorageDomain());
        retVal = validate(validator.isDomainExistAndActive());
    }
    if (retVal && getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // we fectch from db and not using VmTmplate property becase
        // VmTemplate is the one from export domain and not from database
        VmTemplate tmpl = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplateId());
        if (tmpl != null) {
            retVal = (tmpl.getstatus() != VmTemplateStatus.Locked);
            if (!retVal) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED.toString());
            }
        }
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retVal = validate(templateExists());
    if (retVal) {
        DiskImageList images = templatesFromExport.get(LinqUtils.firstOrNull(templatesFromExport.keySet(), new Predicate<VmTemplate>() {

            @Override
            public boolean eval(VmTemplate t) {
                return t.getId().equals(getParameters().getVmTemplateId());
            }
        }));
        if (images != null) {
            getParameters().setImages(Arrays.asList(images.getDiskImages()));
        } else {
            retVal = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
        }
    }
    if (retVal) {
        StorageDomainValidator validator = new StorageDomainValidator(getStorageDomain());
        retVal = validate(validator.isDomainExistAndActive());
    }
    if (retVal && getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // we fectch from db and not using VmTmplate property becase
        // VmTemplate is the one from export domain and not from database
        VmTemplate tmpl = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplateId());
        if (tmpl != null) {
            retVal = (tmpl.getStatus() != VmTemplateStatus.Locked);
            if (!retVal) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED.toString());
            }
        }
    }
    return retVal;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    getParameters().setEntityId(getVmTemplateId());
    RemoveVMVDSCommandParameters tempVar = new RemoveVMVDSCommandParameters(getParameters().getStoragePoolId(), getVmTemplateId());
    tempVar.setStorageDomainId(getParameters().getStorageDomainId());
    Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RemoveVM, tempVar);
    List<DiskImage> images = getParameters().getImages();
    if (!images.isEmpty()) {
        for (DiskImage image : images) {
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(getParameters().getStorageDomainId());
            image.setStorageIds(storageIds);
            image.setStoragePoolId(getParameters().getStoragePoolId());
        }
        RemoveAllVmImagesParameters tempVar2 = new RemoveAllVmImagesParameters(getVmId(), images);
        tempVar2.setParentCommand(getActionType());
        tempVar2.setEntityId(getParameters().getEntityId());
        tempVar2.setForceDelete(true);
        tempVar2.setParentParameters(getParameters());
        VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.RemoveAllVmImages, tempVar2, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (vdcRetValue.getSucceeded()) {
            getReturnValue().getTaskIdList().addAll(vdcRetValue.getInternalTaskIdList());
            setSucceeded(true);
        } else {
            getReturnValue().setFault(vdcRetValue.getFault());
        }
    }
    EndRemoveTemplate();
}
#method_after
@Override
protected void executeCommand() {
    getParameters().setEntityId(getVmTemplateId());
    RemoveVMVDSCommandParameters tempVar = new RemoveVMVDSCommandParameters(getParameters().getStoragePoolId(), getVmTemplateId());
    tempVar.setStorageDomainId(getParameters().getStorageDomainId());
    Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RemoveVM, tempVar);
    List<DiskImage> images = getParameters().getImages();
    if (!images.isEmpty()) {
        for (DiskImage image : images) {
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(getParameters().getStorageDomainId());
            image.setStorageIds(storageIds);
            image.setStoragePoolId(getParameters().getStoragePoolId());
        }
        RemoveAllVmImagesParameters tempVar2 = new RemoveAllVmImagesParameters(getVmId(), images);
        tempVar2.setParentCommand(getActionType());
        tempVar2.setEntityId(getParameters().getEntityId());
        tempVar2.setForceDelete(true);
        tempVar2.setParentParameters(getParameters());
        VdcReturnValueBase vdcRetValue = Backend.getInstance().runInternalAction(VdcActionType.RemoveAllVmImages, tempVar2, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (vdcRetValue.getSucceeded()) {
            getReturnValue().getTaskIdList().addAll(vdcRetValue.getInternalTaskIdList());
            setSucceeded(true);
        } else {
            getReturnValue().setFault(vdcRetValue.getFault());
        }
    }
    setCommandShouldBeLogged(false);
    setSucceeded(true);
}
#end_block

#method_before
private boolean removeVm() {
    VM vm = getVm();
    hasImages = vm.getDiskList().size() > 0;
    if (getParameters().isRemoveDisks() && hasImages) {
        if (!removeVmImages(null)) {
            processUnremovedDisks(false);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            removeVmFromDb();
            return null;
        }
    });
    return true;
}
#method_after
private boolean removeVm() {
    VM vm = getVm();
    hasImages = vm.getDiskList().size() > 0;
    if (getParameters().isRemoveDisks() && hasImages) {
        if (!removeVmImages(null)) {
            return false;
        }
        processUnremovedDisks(false);
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            removeVmFromDb();
            return null;
        }
    });
    return true;
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            return getSucceeded() ? AuditLogType.USER_REMOVE_VM_FINISHED : (hasImages ? AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS : AuditLogType.USER_FAILED_REMOVE_VM);
        case END_FAILURE:
        case END_SUCCESS:
        default:
            return disksLeftInVm.isEmpty() ? AuditLogType.USER_REMOVE_VM_FINISHED : AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            return getSucceeded() ? (disksLeftInVm.isEmpty() ? AuditLogType.USER_REMOVE_VM_FINISHED : AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS) : AuditLogType.USER_FAILED_REMOVE_VM;
        case END_FAILURE:
        case END_SUCCESS:
        default:
            return disksLeftInVm.isEmpty() ? AuditLogType.UNASSIGNED : AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS;
    }
}
#end_block

#method_before
private RSDL addSystemVersion(RSDL rsdl) {
    rsdl.setVersion(VersionHelper.parseVersion(getConfigurationValueDefault(String.class, ConfigurationValues.ProductRPMVersion)));
    return rsdl;
}
#method_after
private RSDL addSystemVersion(RSDL rsdl) {
    rsdl.setVersion(VersionHelper.parseVersion(getConfigurationValueDefault(String.class, ConfigurationValues.VdcVersion)));
    return rsdl;
}
#end_block

#method_before
private API addSystemVersion(API api) {
    String ProductVersion = getConfigurationValue(String.class, ConfigurationValues.ProductRPMVersion, null);
    api.setProductInfo(new ProductInfo());
    api.getProductInfo().setName("oVirt Engine");
    api.getProductInfo().setVendor("ovirt.org");
    api.getProductInfo().setVersion(VersionHelper.parseVersion(ProductVersion));
    return api;
}
#method_after
private API addSystemVersion(API api) {
    String productVersion = getConfigurationValueDefault(String.class, ConfigurationValues.ProductRPMVersion);
    api.setProductInfo(new ProductInfo());
    api.getProductInfo().setName("oVirt Engine");
    api.getProductInfo().setVendor("ovirt.org");
    api.getProductInfo().setFullVersion(productVersion);
    api.getProductInfo().setVersion(VersionHelper.parseVersion(getConfigurationValueDefault(String.class, ConfigurationValues.VdcVersion)));
    return api;
}
#end_block

#method_before
private void rollBackVdsGroupConsumptionParameters(List<QuotaVdsGroupConsumptionParameter> executed) {
    for (QuotaVdsGroupConsumptionParameter parameter : executed) {
        long requestedMemory = parameter.getQuotaAction() == QuotaConsumptionParameter.QuotaAction.CONSUME ? -parameter.getRequestedMemory() : parameter.getRequestedMemory();
        int requestedCpu = parameter.getQuotaAction() == QuotaConsumptionParameter.QuotaAction.CONSUME ? -parameter.getRequestedCpu() : parameter.getRequestedCpu();
        QuotaVdsGroup quotaVdsGroup = null;
        Quota quota = parameter.getQuota();
        if (quota.getGlobalQuotaVdsGroup() != null) {
            // global cluster quota
            quotaVdsGroup = quota.getGlobalQuotaVdsGroup();
        } else {
            for (QuotaVdsGroup vdsGroup : quota.getQuotaVdsGroups()) {
                if (vdsGroup.getVdsGroupId().equals(parameter.getVdsGroupId())) {
                    quotaVdsGroup = vdsGroup;
                    break;
                }
            }
        }
        // quotaVdsGroup cannot be null - otherwise the parameter could not have been executed
        long newMemory = requestedMemory + quotaVdsGroup.getMemSizeMBUsage();
        int newVcpu = requestedCpu + quotaVdsGroup.getVirtualCpuUsage();
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    }
}
#method_after
private void rollBackVdsGroupConsumptionParameters(List<QuotaVdsGroupConsumptionParameter> executed) {
    for (QuotaVdsGroupConsumptionParameter parameter : executed) {
        long requestedMemory = parameter.getQuotaAction() == QuotaConsumptionParameter.QuotaAction.CONSUME ? -parameter.getRequestedMemory() : parameter.getRequestedMemory();
        int requestedCpu = parameter.getQuotaAction() == QuotaConsumptionParameter.QuotaAction.CONSUME ? -parameter.getRequestedCpu() : parameter.getRequestedCpu();
        QuotaVdsGroup quotaVdsGroup = null;
        Quota quota = parameter.getQuota();
        if (quota.getGlobalQuotaVdsGroup() != null) {
            // global cluster quota
            quotaVdsGroup = quota.getGlobalQuotaVdsGroup();
        } else {
            for (QuotaVdsGroup vdsGroup : quota.getQuotaVdsGroups()) {
                if (vdsGroup.getVdsGroupId().equals(parameter.getVdsGroupId())) {
                    quotaVdsGroup = vdsGroup;
                    break;
                }
            }
        }
        if (quotaVdsGroup != null) {
            long newMemory = requestedMemory + quotaVdsGroup.getMemSizeMBUsage();
            int newVcpu = requestedCpu + quotaVdsGroup.getVirtualCpuUsage();
            cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    disk = getDiskDao().get(getParameters().getDiskId());
    return isVmExist() && isVmUpOrDown() && isDiskExist(disk) && checkCanPerformPlugUnPlugDisk() && validate(getSnapshotsValidator().vmNotDuringSnapshot(getVmId())) && validate(getSnapshotsValidator().vmNotInPreview(getVmId())) && validate(new VmValidator(getVm()).vmNotLocked());
}
#method_after
@Override
protected boolean canDoAction() {
    disk = getDiskDao().get(getParameters().getDiskId());
    return isVmExist() && isVmInUpPausedDownStatus() && isDiskExist(disk) && checkCanPerformPlugUnPlugDisk() && isVmNotInPreviewSnapshot();
}
#end_block

#method_before
private boolean checkCanPerformPlugUnPlugDisk() {
    boolean returnValue = true;
    if (getVm().getStatus() == VMStatus.Up) {
        setVdsId(getVm().getRunOnVds().getValue());
        returnValue = isHotPlugSupported() && isOsSupportingHotPlug() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    if (returnValue) {
        oldVmDevice = getVmDeviceDao().get(new VmDeviceId(disk.getId(), getVmId()));
        if (getPlugAction() == VDSCommandType.HotPlugDisk && oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED);
        }
        if (getPlugAction() == VDSCommandType.HotUnPlugDisk && !oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED);
        }
    }
    return returnValue;
}
#method_after
private boolean checkCanPerformPlugUnPlugDisk() {
    boolean returnValue = true;
    if (getVm().getStatus().isUpOrPaused()) {
        setVdsId(getVm().getRunOnVds().getValue());
        returnValue = isHotPlugSupported() && isOsSupportingHotPlug() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    if (returnValue) {
        oldVmDevice = getVmDeviceDao().get(new VmDeviceId(disk.getId(), getVmId()));
        if (getPlugAction() == VDSCommandType.HotPlugDisk && oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED);
        }
        if (getPlugAction() == VDSCommandType.HotUnPlugDisk && !oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED);
        }
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    if (getVm().getStatus() == VMStatus.Up) {
        performPlugCommand(getPlugAction(), disk, oldVmDevice);
    }
    // Update boot order and isPlugged fields
    final List<VmDevice> devices = VmDeviceUtils.updateBootOrderInVmDevice(getVm().getStaticData());
    for (VmDevice device : devices) {
        if (device.getDeviceId().equals(oldVmDevice.getDeviceId())) {
            device.setIsPlugged(!oldVmDevice.getIsPlugged());
            break;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            getVmStaticDAO().incrementDbGeneration(getVm().getId());
            getVmDeviceDao().updateAll("UpdateVmDeviceForHotPlugDisk", devices);
            VmHandler.updateDisksFromDb(getVm());
            return null;
        }
    });
    setSucceeded(true);
}
#method_after
@Override
protected void executeVmCommand() {
    if (getVm().getStatus().isUpOrPaused()) {
        performPlugCommand(getPlugAction(), disk, oldVmDevice);
    }
    // Update boot order and isPlugged fields
    final List<VmDevice> devices = VmDeviceUtils.updateBootOrderInVmDevice(getVm().getStaticData());
    for (VmDevice device : devices) {
        if (device.getDeviceId().equals(oldVmDevice.getDeviceId())) {
            device.setIsPlugged(!oldVmDevice.getIsPlugged());
            break;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            getVmStaticDAO().incrementDbGeneration(getVm().getId());
            getVmDeviceDao().updateAll("UpdateVmDeviceForHotPlugDisk", devices);
            VmHandler.updateDisksFromDb(getVm());
            return null;
        }
    });
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    return Collections.singletonMap(getVmId().toString(), LockMessagesMatchUtil.VM);
}
#method_after
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    return Collections.singletonMap(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
}
#end_block

#method_before
protected boolean checkIfLunDiskCanBeAdded() {
    LUNs lun = ((LunDisk) getParameters().getDiskInfo()).getLun();
    switch(lun.getLunType()) {
        case UNKNOWN:
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_HAS_NO_VALID_TYPE);
        case ISCSI:
            if (lun.getLunConnections() == null || lun.getLunConnections().isEmpty()) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS);
            }
            for (StorageServerConnections conn : lun.getLunConnections()) {
                if (StringUtils.isEmpty(conn.getiqn()) || StringUtils.isEmpty(conn.getconnection()) || StringUtils.isEmpty(conn.getport())) {
                    return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS);
                }
            }
            break;
    }
    if (getDiskLunMapDao().getDiskIdByLunId(lun.getLUN_id()) != null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_IS_ALREADY_IN_USE);
    }
    return validate(getSnapshotValidator().vmNotDuringSnapshot(getVmId())) && validate(getSnapshotValidator().vmNotInPreview(getVmId())) && validate(new VmValidator(getVm()).vmNotLocked());
}
#method_after
protected boolean checkIfLunDiskCanBeAdded() {
    LUNs lun = ((LunDisk) getParameters().getDiskInfo()).getLun();
    switch(lun.getLunType()) {
        case UNKNOWN:
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_HAS_NO_VALID_TYPE);
        case ISCSI:
            if (lun.getLunConnections() == null || lun.getLunConnections().isEmpty()) {
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS);
            }
            for (StorageServerConnections conn : lun.getLunConnections()) {
                if (StringUtils.isEmpty(conn.getiqn()) || StringUtils.isEmpty(conn.getconnection()) || StringUtils.isEmpty(conn.getport())) {
                    return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS);
                }
            }
            break;
    }
    if (getDiskLunMapDao().getDiskIdByLunId(lun.getLUN_id()) != null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_LUN_IS_ALREADY_IN_USE);
    }
    if (getVm() != null && !(isVmNotLocked() && isVmNotInPreviewSnapshot())) {
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean checkIfImageDiskCanBeAdded(VM vm) {
    boolean returnValue;
    // vm agnostic checks
    returnValue = validate(new StorageDomainValidator(getStorageDomain()).isDomainExistAndActive()) && checkImageConfiguration() && hasFreeSpace(getStorageDomain()) && checkExceedingMaxBlockDiskSize() && canAddShareableDisk();
    if (returnValue && vm != null) {
        // Note this is done according to the VM's spId.
        storage_pool sp = getStoragePool();
        returnValue = validate(new StoragePoolValidator(sp).isUp()) && isStoragePoolMatching(vm) && performImagesChecks(vm.getStoragePoolId()) && validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId())) && validate(getSnapshotValidator().vmNotInPreview(vm.getId())) && validate(new VmValidator(vm).vmNotLocked());
    }
    return returnValue;
}
#method_after
private boolean checkIfImageDiskCanBeAdded(VM vm) {
    boolean returnValue;
    // vm agnostic checks
    returnValue = validate(new StorageDomainValidator(getStorageDomain()).isDomainExistAndActive()) && checkImageConfiguration() && hasFreeSpace(getStorageDomain()) && checkExceedingMaxBlockDiskSize() && canAddShareableDisk();
    if (returnValue && vm != null) {
        // Note this is done according to the VM's spId.
        storage_pool sp = getStoragePool();
        returnValue = validate(new StoragePoolValidator(sp).isUp()) && isStoragePoolMatching(vm) && performImagesChecks(vm.getStoragePoolId()) && isVmNotLocked() && isVmNotInPreviewSnapshot();
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    if (getParameters().getDiskInfo().isBoot() && getParameters().getVmId() != null && !Guid.Empty.equals(getParameters().getVmId())) {
        return Collections.singletonMap(getParameters().getVmId().toString(), LockMessagesMatchUtil.VM_DISK_BOOT);
    }
    return null;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    if (getParameters().getDiskInfo().isBoot() && getParameters().getVmId() != null && !Guid.Empty.equals(getParameters().getVmId())) {
        return Collections.singletonMap(getParameters().getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return null;
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    if (getParameters().getVmId() != null && !Guid.Empty.equals(getParameters().getVmId())) {
        return Collections.singletonMap(getParameters().getVmId().toString(), LockMessagesMatchUtil.VM);
    }
    return null;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    if (getParameters().getVmId() != null && !Guid.Empty.equals(getParameters().getVmId())) {
        return Collections.singletonMap(getParameters().getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return null;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (disk == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.ILLEGAL) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
    }
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
        addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", disk.getDiskAlias()));
        return false;
    }
    if (!isVmExist() || !isVmUpOrDown()) {
        return false;
    }
    updateDisksFromDb();
    if (!isDiskCanBeAddedToVm(disk, getVm()) || !isDiskPassPciAndIdeLimit(disk)) {
        return false;
    }
    if (getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
        return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (!disk.isShareable() && disk.getNumberOfVms() > 0) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getStorageIds().get(0), getVm().getStoragePoolId())) == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    final boolean isNotDuringSnapshot = validate(getSnapshotsValidator().vmNotDuringSnapshot(getVmId())) && validate(getSnapshotsValidator().vmNotInPreview(getVmId()));
    if (isImageDisk && !isNotDuringSnapshot) {
        return false;
    }
    if (getParameters().isPlugUnPlug() && getVm().getStatus() != VMStatus.Down) {
        return isOsSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (disk == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.ILLEGAL) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
    }
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
        addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", disk.getDiskAlias()));
        return false;
    }
    if (!isVmExist() || !isVmInUpPausedDownStatus()) {
        return false;
    }
    updateDisksFromDb();
    if (!isDiskCanBeAddedToVm(disk, getVm()) || !isDiskPassPciAndIdeLimit(disk)) {
        return false;
    }
    if (getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
        return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (!disk.isShareable() && disk.getNumberOfVms() > 0) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getStorageIds().get(0), getVm().getStoragePoolId())) == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (!isVmNotInPreviewSnapshot()) {
        return false;
    }
    if (getParameters().isPlugUnPlug() && getVm().getStatus() != VMStatus.Down) {
        return isOsSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return true;
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> locks = new HashMap<String, Pair<String, String>>();
    if (!disk.isShareable()) {
        locks.put(disk.getId().toString(), LockMessagesMatchUtil.DISK);
    }
    if (disk.isBoot()) {
        locks.put(getParameters().getVmId().toString(), LockMessagesMatchUtil.VM_DISK_BOOT);
    }
    return locks;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> locks = new HashMap<String, Pair<String, String>>();
    if (!disk.isShareable()) {
        locks.put(disk.getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    if (disk.isBoot()) {
        locks.put(getParameters().getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return locks;
}
#end_block

#method_before
@Test
public void testGetValue() {
    // Verify that values for 3.0 and 3.2 are from DB (since the entries are present in fixtures.xml)
    // and for 3.1, it's the default value from annotation in ConfigValues.
    // 3.0 -> false, 3.1 -> true, 3.2 -> true
    Assert.assertFalse((Boolean) config.GetValue(ConfigValues.NonVmNetworkSupported, "3.0"));
    Assert.assertFalse(Config.<Boolean>GetValue(ConfigValues.NonVmNetworkSupported, "3.0"));
    Assert.assertTrue((Boolean) config.GetValue(ConfigValues.NonVmNetworkSupported, "3.1"));
    Assert.assertTrue(Config.<Boolean>GetValue(ConfigValues.NonVmNetworkSupported, "3.1"));
    Assert.assertTrue((Boolean) config.GetValue(ConfigValues.NonVmNetworkSupported, "3.2"));
    Assert.assertTrue(Config.<Boolean>GetValue(ConfigValues.NonVmNetworkSupported, "3.2"));
}
#method_after
@Test
public void testGetValue() {
    // Verify that values for 3.0 and 3.2 are from DB (since the entries are present in fixtures.xml)
    // and for 3.1, it's the default value from annotation in ConfigValues.
    // 3.0 -> false, 3.1 -> true, 3.2 -> true
    Assert.assertFalse(Config.<Boolean>GetValue(ConfigValues.NonVmNetworkSupported, "3.0"));
    Assert.assertTrue(Config.<Boolean>GetValue(ConfigValues.NonVmNetworkSupported, "3.1"));
    Assert.assertTrue(Config.<Boolean>GetValue(ConfigValues.NonVmNetworkSupported, "3.2"));
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__DISABLE_GLUSTER_HOOK);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_HOOK);
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__DISABLE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_HOOK);
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_HOOK_DISABLE;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_HOOK_DISABLE_FAILED : errorType;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        if (errors.isEmpty()) {
            return AuditLogType.GLUSTER_HOOK_DISABLE;
        } else {
            return AuditLogType.GLUSTER_HOOK_DISABLE_PARTIAL;
        }
    } else {
        return errorType == null ? AuditLogType.GLUSTER_HOOK_DISABLE_FAILED : errorType;
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getClusterId() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (Guid.isNullOrEmpty(getParameters().getHookId())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED);
        return false;
    }
    List<VDS> servers = getAllUpServers(getParameters().getClusterId());
    if (servers == null || servers.size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND);
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getClusterId() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (Guid.isNullOrEmpty(getParameters().getHookId())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED);
        return false;
    }
    if (getGlusterHooksDao().getById(getParameters().getHookId()) == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST);
        return false;
    }
    List<VDS> servers = getAllUpServers(getParameters().getClusterId());
    if (servers == null || servers.isEmpty()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND);
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    List<String> errors = new ArrayList<String>();
    entity = getGlusterHooksDao().getById(getParameters().getHookId(), true);
    List<VDS> servers = getAllUpServers(getParameters().getClusterId());
    List<GlusterServerHook> serverHooks = entity.getServerHooks();
    if (servers.size() < getClusterUtils().getServerCount(getParameters().getClusterId())) {
        errors.add(VdcBllMessages.CLUSTER_ALL_SERVERS_NOT_UP.toString());
    }
    List<Callable<Pair<VDS, VDSReturnValue>>> taskList = new ArrayList<Callable<Pair<VDS, VDSReturnValue>>>();
    for (final VDS upServer : servers) {
        taskList.add(new Callable<Pair<VDS, VDSReturnValue>>() {

            @Override
            public Pair<VDS, VDSReturnValue> call() throws Exception {
                VDSReturnValue returnValue = runVdsCommand(getStatusChangeVDSCommand(), new GlusterHookVDSParameters(upServer.getId(), entity.getGlusterCommand(), entity.getStage(), entity.getName()));
                return new Pair<VDS, VDSReturnValue>(upServer, returnValue);
            }
        });
    }
    boolean atLeastOneSuccess = false;
    List<Pair<VDS, VDSReturnValue>> pairResults = ThreadPoolUtil.invokeAll(taskList);
    for (Pair<VDS, VDSReturnValue> pairResult : pairResults) {
        VDSReturnValue retValue = pairResult.getSecond();
        if (retValue.getSucceeded()) {
            atLeastOneSuccess = true;
            // if a new server has been detected, the hook entry needs to be added
            if (getServerHookFromList(serverHooks, pairResult.getFirst().getId()) == null) {
                addServerHook(pairResult.getFirst().getId());
            } else {
                updateServerHookStatusInDb(entity.getId(), pairResult.getFirst().getId(), getNewStatus());
            }
        } else {
            // ignore already enabled/disabled errors.
            if (VdcBllErrors.GlusterHookAlreadyEnabled.equals(retValue.getVdsError().getCode()) || VdcBllErrors.GlusterHookAlreadyDisabled.equals(retValue.getVdsError().getCode())) {
                // making sure the status in DB is updated (in case sync job has not yet updated these)
                atLeastOneSuccess = true;
                updateServerHookStatusInDb(entity.getId(), pairResult.getFirst().getId(), getNewStatus());
            } else {
                errors.add(retValue.getVdsError().getMessage());
            }
        }
    }
    if (errors.size() > 0) {
        // conflict in status
        entity.addStatusConflict();
    }
    setSucceeded(atLeastOneSuccess);
    // The intention was to enable/disable hook. So we update the entity with new status if command succeeded
    if (getSucceeded()) {
        entity.setStatus(getNewStatus());
        updateHookInDb(entity);
    }
}
#method_after
@Override
protected void executeCommand() {
    entity = getGlusterHook();
    addCustomValue(GlusterConstants.HOOK_NAME, entity.getName());
    List<VDS> servers = getAllUpServers(getParameters().getClusterId());
    List<GlusterServerHook> serverHooks = entity.getServerHooks();
    if (servers.size() < getClusterUtils().getServerCount(getParameters().getClusterId())) {
        errors.add(VdcBllMessages.CLUSTER_ALL_SERVERS_NOT_UP.toString());
    }
    List<Callable<Pair<VDS, VDSReturnValue>>> taskList = new ArrayList<Callable<Pair<VDS, VDSReturnValue>>>();
    for (final VDS upServer : servers) {
        taskList.add(new Callable<Pair<VDS, VDSReturnValue>>() {

            @Override
            public Pair<VDS, VDSReturnValue> call() throws Exception {
                VDSReturnValue returnValue = runVdsCommand(getStatusChangeVDSCommand(), new GlusterHookVDSParameters(upServer.getId(), entity.getGlusterCommand(), entity.getStage(), entity.getName()));
                return new Pair<VDS, VDSReturnValue>(upServer, returnValue);
            }
        });
    }
    boolean atLeastOneSuccess = false;
    List<Pair<VDS, VDSReturnValue>> pairResults = ThreadPoolUtil.invokeAll(taskList);
    for (Pair<VDS, VDSReturnValue> pairResult : pairResults) {
        VDSReturnValue retValue = pairResult.getSecond();
        // ignore already enabled/disabled errors.
        if (retValue.getSucceeded() || VdcBllErrors.GlusterHookAlreadyEnabled.equals(retValue.getVdsError().getCode()) || VdcBllErrors.GlusterHookAlreadyDisabled.equals(retValue.getVdsError().getCode())) {
            atLeastOneSuccess = true;
            // update status in database
            addOrUpdateServerHook(serverHooks, pairResult);
        } else {
            errors.add(retValue.getVdsError().getMessage());
        }
    }
    setSucceeded(atLeastOneSuccess);
    if (errors.size() > 0) {
        // conflict in status
        entity.addStatusConflict();
        handleVdsErrors(getAuditLogTypeValue(), errors);
        addCustomValue(GlusterConstants.FAILURE_MESSAGE, StringUtils.join(errors, SystemUtils.LINE_SEPARATOR));
    }
    // The intention was to enable/disable hook. So we update the entity with new status if command succeeded
    if (getSucceeded()) {
        entity.setStatus(getNewStatus());
        updateHookInDb(entity);
    }
}
#end_block

#method_before
private void addServerHook(Guid serverId) {
    GlusterServerHook newServerHook = new GlusterServerHook();
    newServerHook.setHookId(entity.getId());
    newServerHook.setStatus(getNewStatus());
    newServerHook.setServerId(serverId);
    addServerHookInDb(newServerHook);
}
#method_after
private void addServerHook(Guid serverId) {
    GlusterServerHook newServerHook = new GlusterServerHook();
    newServerHook.setHookId(getGlusterHook().getId());
    newServerHook.setStatus(getNewStatus());
    newServerHook.setServerId(serverId);
    addServerHookInDb(newServerHook);
}
#end_block

#method_before
public void setupMocks(T cmd) {
    when(clusterUtils.getAllUpServers(CLUSTER_ID)).thenReturn(getGlusterServers());
    doReturn(clusterUtils).when(cmd).getClusterUtils();
    when(hooksDao.getById(HOOK_ID, true)).thenReturn(getHookEntity());
    doReturn(hooksDao).when(cmd).getGlusterHooksDao();
    when(vdsGroupDao.get(CLUSTER_ID)).thenReturn(getVdsGroup());
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    doReturn(getGlusterServers().get(0)).when(cmd).getUpServer();
}
#method_after
public void setupMocks(T cmd) {
    setupMocks(cmd, true);
}
#end_block

#method_before
public void setupMocks(T cmd) {
    when(clusterUtils.getAllUpServers(CLUSTER_ID)).thenReturn(getGlusterServers());
    doReturn(clusterUtils).when(cmd).getClusterUtils();
    when(hooksDao.getById(HOOK_ID, true)).thenReturn(getHookEntity());
    doReturn(hooksDao).when(cmd).getGlusterHooksDao();
    when(vdsGroupDao.get(CLUSTER_ID)).thenReturn(getVdsGroup());
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    doReturn(getGlusterServers().get(0)).when(cmd).getUpServer();
}
#method_after
public void setupMocks(T cmd, boolean hookFound) {
    when(clusterUtils.getAllUpServers(CLUSTER_ID)).thenReturn(getGlusterServers());
    doReturn(clusterUtils).when(cmd).getClusterUtils();
    if (hookFound) {
        when(hooksDao.getById(HOOK_ID)).thenReturn(getHookEntity());
        when(hooksDao.getById(HOOK_ID, true)).thenReturn(getHookEntity());
    }
    doReturn(hooksDao).when(cmd).getGlusterHooksDao();
    when(vdsGroupDao.get(CLUSTER_ID)).thenReturn(getVdsGroup());
    doReturn(vdsGroupDao).when(cmd).getVdsGroupDAO();
    doReturn(getGlusterServers().get(0)).when(cmd).getUpServer();
}
#end_block

#method_before
private List<GlusterServerHook> getGlusterServerHooks() {
    List<GlusterServerHook> serverHooks = new ArrayList<GlusterServerHook>();
    serverHooks.add(getGlusterServerHook(0));
    serverHooks.add(getGlusterServerHook(1));
    serverHooks.add(getGlusterServerHook(2));
    serverHooks.add(getGlusterServerHook(3));
    return serverHooks;
}
#method_after
private List<GlusterServerHook> getGlusterServerHooks() {
    List<GlusterServerHook> serverHooks = new ArrayList<GlusterServerHook>();
    serverHooks.add(getGlusterServerHook(0));
    serverHooks.add(getGlusterServerHook(1));
    serverHooks.add(getGlusterServerHook(2));
    return serverHooks;
}
#end_block

#method_before
@Test
public void executeCommand() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockConfig();
    mockBackend(cmd, true);
    cmd.executeCommand();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE);
}
#method_after
@Test
public void executeCommand() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockBackend(cmd, true);
    cmd.executeCommand();
    verify(cmd, atLeast(1)).addServerHookInDb(any(GlusterServerHook.class));
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE);
}
#end_block

#method_before
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockConfig();
    mockBackend(cmd, false);
    cmd.executeCommand();
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE_FAILED);
}
#method_after
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockBackend(cmd, false);
    cmd.executeCommand();
    verify(cmd, never()).addServerHookInDb(any(GlusterServerHook.class));
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE_FAILED);
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNullCluster() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(null, HOOK_ID)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNullCluster() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(null, HOOK_ID)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID.toString()));
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNullHookId() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, null)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNullHookId() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, null)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString()));
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNullCluster() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(null, HOOK_ID)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNullCluster() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(null, HOOK_ID)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID.toString()));
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNullHookId() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, null)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNullHookId() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, null)));
    setupMocks(cmd);
    assertFalse(cmd.canDoAction());
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString()));
}
#end_block

#method_before
@Test
public void executeCommand() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockConfig();
    mockBackend(cmd, true);
    cmd.executeCommand();
    assertTrue(cmd.getReturnValue().getSucceeded());
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_DISABLE);
}
#method_after
@Test
public void executeCommand() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockBackend(cmd, true);
    cmd.executeCommand();
    assertTrue(cmd.getReturnValue().getSucceeded());
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_DISABLE);
}
#end_block

#method_before
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockConfig();
    mockBackend(cmd, false);
    cmd.executeCommand();
    assertFalse(cmd.getReturnValue().getSucceeded());
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_DISABLE_FAILED);
}
#method_after
@Test
public void executeCommandWhenFailed() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockBackend(cmd, false);
    cmd.executeCommand();
    assertFalse(cmd.getReturnValue().getSucceeded());
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_DISABLE_FAILED);
}
#end_block

#method_before
@Test
public void executeCommandWhenAlreadyDisabled() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockConfig();
    mockBackend(cmd, false, VdcBllErrors.GlusterHookAlreadyDisabled);
    cmd.executeCommand();
    assertTrue(cmd.getReturnValue().getSucceeded());
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_DISABLE);
}
#method_after
@Test
public void executeCommandWhenAlreadyDisabled() {
    cmd = spy(new DisableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(cmd);
    mockBackend(cmd, false, VdcBllErrors.GlusterHookAlreadyDisabled);
    cmd.executeCommand();
    assertTrue(cmd.getReturnValue().getSucceeded());
    assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_DISABLE);
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_DISABLE_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#method_after
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_SECONDARY_AGENT_USED_FOR_FENCE_OPERATION, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#method_after
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.INVALID_INTERFACE_FOR_MANAGEMENT_NETWORK_CONFIGURATION, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SETUP_NETWORK_FAILED_FOR_MANAGEMENT_NETWORK_CONFIGURATION, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.PERSIST_NETWORK_FAILED_FOR_MANAGEMENT_NETWORK, AuditLogSeverity.WARNING);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#end_block

#method_before
private static Map<String, String> getAvailableValues(String message, AuditLogableBase logable) {
    Map<String, String> returnValue = new HashMap<String, String>(logable.getCustomValues());
    Set<String> attributes = resolvePlaceHolders(message);
    attributes = AuditLogHelper.merge(attributes, AuditLogHelper.getCustomLogFields(logable.getClass(), true));
    if (attributes != null && attributes.size() > 0) {
        TypeCompat.getPropertyValues(logable, attributes, returnValue);
    }
    return returnValue;
}
#method_after
private static Map<String, String> getAvailableValues(String message, AuditLogableBase logable) {
    Map<String, String> returnValue = new HashMap<String, String>(logable.getCustomValues());
    Set<String> attributes = resolvePlaceHolders(message);
    if (attributes != null && attributes.size() > 0) {
        TypeCompat.getPropertyValues(logable, attributes, returnValue);
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    VDS vds = getDbFacade().getVdsDao().get(getParameters().getName());
    getQueryReturnValue().setReturnValue(vds);
}
#method_after
@Override
protected void executeQueryCommand() {
    VDS vds = getDbFacade().getVdsDao().getByName(getParameters().getName());
    getQueryReturnValue().setReturnValue(vds);
}
#end_block

#method_before
private boolean HandleOldVdssWithSameName(VDS hostToRegister) {
    log.debugFormat("Entering");
    boolean returnValue = true;
    VdsDAO vdsDAO = DbFacade.getInstance().getVdsDao();
    VDS storedHost = vdsDAO.get(getParameters().getVdsName());
    List<String> allHostNames = getAllHostNames(vdsDAO.getAll());
    boolean hostExistInDB = hostToRegister != null;
    if (storedHost != null) {
        log.debugFormat("found VDS with the same name {0}.  Will try to register with a new name", getParameters().getVdsName());
        String nameToRegister = getParameters().getVdsName();
        String uniqueIdToRegister = getParameters().getVdsUniqueId();
        String newName;
        // check different uniqueIds but same name
        if (!uniqueIdToRegister.equals(storedHost.getUniqueId()) && nameToRegister.equals(storedHost.getName())) {
            if (hostExistInDB) {
                // update the registered host if exist in db
                allHostNames.remove(hostToRegister.getName());
                newName = generateUniqueName(nameToRegister, allHostNames);
                hostToRegister.setVdsName(newName);
                UpdateVdsActionParameters parameters = new UpdateVdsActionParameters(hostToRegister.getStaticData(), "", false);
                VdcReturnValueBase ret = Backend.getInstance().runInternalAction(VdcActionType.UpdateVds, parameters);
                if (ret == null || !ret.getSucceeded()) {
                    error = AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME;
                    logable.addCustomValue("VdsName2", newName);
                    log.errorFormat("could not update VDS {0}", nameToRegister);
                    CaptureCommandErrorsToLogger(ret, "RegisterVdsQuery::HandleOldVdssWithSameName");
                    return false;
                } else {
                    log.infoFormat("Another VDS was using this name with IP {0}. Changed to {1}", nameToRegister, newName);
                }
            } else {
                // host doesn't exist in db yet. not persisting changes just object values.
                newName = generateUniqueName(nameToRegister, allHostNames);
                getParameters().setVdsName(newName);
            }
        }
    }
    log.debugFormat("Leaving with value {0}", returnValue);
    return returnValue;
}
#method_after
private boolean HandleOldVdssWithSameName(VDS hostToRegister) {
    log.debugFormat("Entering");
    boolean returnValue = true;
    VdsDAO vdsDAO = DbFacade.getInstance().getVdsDao();
    VDS storedHost = vdsDAO.getByName(getParameters().getVdsName());
    List<String> allHostNames = getAllHostNames(vdsDAO.getAll());
    boolean hostExistInDB = hostToRegister != null;
    if (storedHost != null) {
        log.debugFormat("found VDS with the same name {0}.  Will try to register with a new name", getParameters().getVdsName());
        String nameToRegister = getParameters().getVdsName();
        String uniqueIdToRegister = getParameters().getVdsUniqueId();
        String newName;
        // check different uniqueIds but same name
        if (!uniqueIdToRegister.equals(storedHost.getUniqueId()) && nameToRegister.equals(storedHost.getName())) {
            if (hostExistInDB) {
                // update the registered host if exist in db
                allHostNames.remove(hostToRegister.getName());
                newName = generateUniqueName(nameToRegister, allHostNames);
                hostToRegister.setVdsName(newName);
                UpdateVdsActionParameters parameters = new UpdateVdsActionParameters(hostToRegister.getStaticData(), "", false);
                VdcReturnValueBase ret = Backend.getInstance().runInternalAction(VdcActionType.UpdateVds, parameters);
                if (ret == null || !ret.getSucceeded()) {
                    error = AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME;
                    logable.addCustomValue("VdsName2", newName);
                    log.errorFormat("could not update VDS {0}", nameToRegister);
                    CaptureCommandErrorsToLogger(ret, "RegisterVdsQuery::HandleOldVdssWithSameName");
                    return false;
                } else {
                    log.infoFormat("Another VDS was using this name with IP {0}. Changed to {1}", nameToRegister, newName);
                }
            } else {
                // host doesn't exist in db yet. not persisting changes just object values.
                newName = generateUniqueName(nameToRegister, allHostNames);
                getParameters().setVdsName(newName);
            }
        }
    }
    log.debugFormat("Leaving with value {0}", returnValue);
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    setVdsGroupId(getParameters().getVdsStaticData().getVdsGroupId());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        returnValue = false;
    } else {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getName();
        String hostName = vds.getHostName();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
            returnValue = false;
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
            returnValue = false;
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
            returnValue = false;
        } else if (getVdsDAO().get(vdsName) != null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            returnValue = false;
        } else if (getVdsDAO().getAllForHostname(hostName).size() != 0) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            returnValue = false;
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.UseSecureConnectionWithServers) && !new File(Config.resolveCertificatePath()).exists()) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
                returnValue = false;
            } else if (!getParameters().getAddPending() && StringUtils.isEmpty(getParameters().getRootPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
                returnValue = false;
            } else if (!IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())) {
                returnValue = false;
            } else {
                returnValue = returnValue && canConnect(vds);
            }
        }
    }
    if (isGlusterSupportEnabled()) {
        if (clusterHasServers()) {
            upServer = ClusterUtils.getInstance().getUpServer(getVdsGroupId());
            if (upServer == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
                returnValue = false;
            }
        }
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    setVdsGroupId(getParameters().getVdsStaticData().getVdsGroupId());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        returnValue = false;
    } else {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getName();
        String hostName = vds.getHostName();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
            returnValue = false;
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
            returnValue = false;
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
            returnValue = false;
        } else if (getVdsDAO().getByName(vdsName) != null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            returnValue = false;
        } else if (getVdsDAO().getAllForHostname(hostName).size() != 0) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            returnValue = false;
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.UseSecureConnectionWithServers) && !new File(Config.resolveCertificatePath()).exists()) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
                returnValue = false;
            } else if (!getParameters().getAddPending() && StringUtils.isEmpty(getParameters().getRootPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
                returnValue = false;
            } else if (!IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())) {
                returnValue = false;
            } else {
                returnValue = returnValue && canConnect(vds);
            }
        }
    }
    if (isGlusterSupportEnabled()) {
        if (clusterHasServers()) {
            upServer = ClusterUtils.getInstance().getUpServer(getVdsGroupId());
            if (upServer == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
                returnValue = false;
            }
        }
    }
    return returnValue;
}
#end_block

#method_before
@Test
public void testGetUsingInvalidName() {
    VDS result = dao.get("farkle");
    assertNull(result);
}
#method_after
@Test
public void testGetUsingInvalidName() {
    VDS result = dao.getByName("farkle");
    assertNull(result);
}
#end_block

#method_before
@Test
public void testGetWithName() {
    VDS result = dao.get(existingVds.getName());
    assertNotNull(result);
    assertEquals(existingVds.getName(), result.getName());
}
#method_after
@Test
public void testGetWithName() {
    VDS result = dao.getByName(existingVds.getName());
    assertNotNull(result);
    assertEquals(existingVds.getName(), result.getName());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = false;
    _oldVds = getVdsDAO().get(getVdsId());
    if (_oldVds != null && getParameters().getVdsStaticData() != null) {
        String compatibilityVersion = _oldVds.getVdsGroupCompatibilityVersion().toString();
        if (VdsHandler.IsUpdateValid(getParameters().getVdsStaticData(), _oldVds.getStaticData(), _oldVds.getStatus())) {
            if ("".equals(getParameters().getVdsStaticData().getName())) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            }
            String vdsName = getParameters().getvds().getName();
            String hostName = getParameters().getvds().getHostName();
            int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
            // check that VDS name is not null or empty
            if (vdsName == null || vdsName.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
                returnValue = false;
            // check that VDS name is not too long
            } else if (vdsName.length() > maxVdsNameLength) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
                returnValue = false;
            } else if (_oldVds.getStatus() != VDSStatus.InstallFailed && !_oldVds.getHostName().equals(hostName)) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOSNAME_CANNOT_CHANGE);
                returnValue = false;
            } else // check if a name is updated to an existing vds name
            if (!StringUtils.equalsIgnoreCase(_oldVds.getName(), getParameters().getVdsStaticData().getName()) && getVdsDAO().get(vdsName) != null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            } else if (!StringUtils.equalsIgnoreCase(_oldVds.getHostName(), getParameters().getVdsStaticData().getHostName()) && getVdsDAO().getAllForHostname(hostName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else if (getParameters().getInstallVds() && _oldVds.getStatus() != VDSStatus.Maintenance && _oldVds.getStatus() != VDSStatus.NonOperational && _oldVds.getStatus() != VDSStatus.InstallFailed) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL);
            } else if (getParameters().getInstallVds() && StringUtils.isEmpty(getParameters().getRootPassword()) && getParameters().getVdsStaticData().getVdsType() == VDSType.VDS) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!getParameters().getInstallVds() && _oldVds.getPort() != getParameters().getVdsStaticData().getPort()) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_CHANGE_REQUIRE_INSTALL);
            } else if (!_oldVds.getVdsGroupId().equals(getParameters().getVdsStaticData().getVdsGroupId())) {
                // Forbid updating group id - this must be done through
                // ChangeVDSClusterCommand
                // This is due to permission check that must be done both on
                // the VDS and on the VDSGroup
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER);
            } else {
                returnValue = true;
            }
            // if all ok check PM is legal
            returnValue = returnValue && IsPowerManagementLegal(getParameters().getVdsStaticData(), compatibilityVersion);
        } else {
            addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.toString());
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = false;
    _oldVds = getVdsDAO().get(getVdsId());
    if (_oldVds != null && getParameters().getVdsStaticData() != null) {
        String compatibilityVersion = _oldVds.getVdsGroupCompatibilityVersion().toString();
        if (VdsHandler.IsUpdateValid(getParameters().getVdsStaticData(), _oldVds.getStaticData(), _oldVds.getStatus())) {
            if ("".equals(getParameters().getVdsStaticData().getName())) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            }
            String vdsName = getParameters().getvds().getName();
            String hostName = getParameters().getvds().getHostName();
            int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
            // check that VDS name is not null or empty
            if (vdsName == null || vdsName.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
                returnValue = false;
            // check that VDS name is not too long
            } else if (vdsName.length() > maxVdsNameLength) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
                returnValue = false;
            } else if (_oldVds.getStatus() != VDSStatus.InstallFailed && !_oldVds.getHostName().equals(hostName)) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOSNAME_CANNOT_CHANGE);
                returnValue = false;
            } else // check if a name is updated to an existing vds name
            if (!StringUtils.equalsIgnoreCase(_oldVds.getName(), getParameters().getVdsStaticData().getName()) && getVdsDAO().getByName(vdsName) != null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
            } else if (!StringUtils.equalsIgnoreCase(_oldVds.getHostName(), getParameters().getVdsStaticData().getHostName()) && getVdsDAO().getAllForHostname(hostName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else if (getParameters().getInstallVds() && _oldVds.getStatus() != VDSStatus.Maintenance && _oldVds.getStatus() != VDSStatus.NonOperational && _oldVds.getStatus() != VDSStatus.InstallFailed) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL);
            } else if (getParameters().getInstallVds() && StringUtils.isEmpty(getParameters().getRootPassword()) && getParameters().getVdsStaticData().getVdsType() == VDSType.VDS) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!getParameters().getInstallVds() && _oldVds.getPort() != getParameters().getVdsStaticData().getPort()) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_CHANGE_REQUIRE_INSTALL);
            } else if (!_oldVds.getVdsGroupId().equals(getParameters().getVdsStaticData().getVdsGroupId())) {
                // Forbid updating group id - this must be done through
                // ChangeVDSClusterCommand
                // This is due to permission check that must be done both on
                // the VDS and on the VDSGroup
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER);
            } else {
                returnValue = true;
            }
            // if all ok check PM is legal
            returnValue = returnValue && IsPowerManagementLegal(getParameters().getVdsStaticData(), compatibilityVersion);
        } else {
            addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.toString());
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
    }
    return returnValue;
}
#end_block

#method_before
@Before
public void setUp() throws Exception {
    testServlet = new FileServlet();
    testConfig = mock(ServletConfig.class);
    mockRequest = mock(HttpServletRequest.class);
    mockResponse = mock(HttpServletResponse.class);
}
#method_after
@Before
public void setUp() throws Exception {
    testServlet = new FileServlet();
    ServletContext mockContext = mock(ServletContext.class);
    when(mockConfig.getServletContext()).thenReturn(mockContext);
}
#end_block

#method_before
@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // Locate the requested file:
    File file = ServletUtils.getFileFromString(request.getPathInfo(), base);
    file = checkForIndex(request, response, file, request.getPathInfo());
    if (null == file) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND);
    } else {
        // Send the content of the file:
        // type is the default MIME type of the Servlet.
        ServletUtils.sendFile(request, response, file, type);
    }
}
#method_after
@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // Locate the requested file:
    File file = ServletUtils.makeFileFromSanePath(request.getPathInfo(), base);
    file = checkForIndex(request, response, file, request.getPathInfo());
    if (file == null) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND);
    } else {
        // Send the content of the file:
        // type is the default MIME type of the Servlet.
        ServletUtils.sendFile(request, response, file, type);
    }
}
#end_block

#method_before
protected File checkForIndex(HttpServletRequest request, HttpServletResponse response, File file, String path) throws IOException {
    // corresponding index page (if it exists):
    if (null != file && file.isDirectory()) {
        File index = new File(file, INDEX);
        log.info("Index is \"" + index.getAbsolutePath() + "\".");
        if (index.isFile()) {
            String redirect = null;
            if (path == null) {
                redirect = request.getServletPath() + "/" + INDEX;
            } else {
                redirect = request.getServletPath() + path + "/" + INDEX;
            }
            response.sendRedirect(redirect);
            file = new File(file, INDEX);
        } else {
            log.error("There is no index page for directory \"" + file.getAbsolutePath() + "\", will send a 404 error response.");
            file = null;
        }
    } else if (!ServletUtils.canReadFile(file)) {
        file = null;
    }
    return file;
}
#method_after
protected File checkForIndex(HttpServletRequest request, HttpServletResponse response, File file, String path) throws IOException {
    // corresponding index page (if it exists):
    if (file != null && file.isDirectory()) {
        File index = new File(file, INDEX);
        log.info("Index is \"" + index.getAbsolutePath() + "\".");
        if (index.isFile()) {
            String redirect = null;
            if (path == null) {
                redirect = request.getServletPath() + "/" + INDEX;
            } else {
                redirect = request.getServletPath() + path + "/" + INDEX;
            }
            response.sendRedirect(redirect);
            file = new File(file, INDEX);
        } else {
            log.error("There is no index page for directory \"" + file.getAbsolutePath() + "\", will send a 404 error response.");
            file = null;
        }
    } else if (!ServletUtils.canReadFile(file)) {
        file = null;
    }
    return file;
}
#end_block

#method_before
@Override
protected /**
 */
void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // Locate the requested file:
    File originalFile = ServletUtils.getFileFromString(request.getPathInfo(), base);
    Locale locale = getLocaleFromRequest(request);
    File file = determineActualFile(request, locale);
    file = checkForIndex(request, response, file, request.getPathInfo());
    if (null == file) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND);
    } else if (!response.isCommitted()) {
        // If the response is committed, we have already redirected.
        Object languagePageShown = request.getSession(true).getAttribute(LANG_PAGE_SHOWN);
        if (!file.equals(originalFile)) {
            // We determined that we are going to redirect the user to the english version URI.
            String redirect = request.getServletPath() + replaceLocaleWithUSLocale(request.getPathInfo(), locale);
            if ((null == languagePageShown || !Boolean.parseBoolean(languagePageShown.toString()))) {
                request.getSession(true).setAttribute(LANG_PAGE_SHOWN, true);
                request.setAttribute(LOCALE, locale);
                request.setAttribute(ENGLISH_HREF, redirect);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher("/help/no_lang.jsp");
                if (dispatcher != null) {
                    dispatcher.include(request, response);
                }
            } else {
                // Redirect to English version of the document
                response.sendRedirect(redirect);
            }
        } else {
            // Send the content of the file:
            // type is the default MIME type of the Servlet(passed in through webinit parameter).
            ServletUtils.sendFile(request, response, file, type);
        }
    }
}
#method_after
@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // Locate the requested file:
    File originalFile = ServletUtils.makeFileFromSanePath(request.getPathInfo(), base);
    Locale locale = getLocaleFromRequest(request);
    File file = determineActualFile(request, locale);
    file = checkForIndex(request, response, file, request.getPathInfo());
    if (file == null) {
        response.sendError(HttpServletResponse.SC_NOT_FOUND);
    } else if (!response.isCommitted()) {
        // If the response is committed, we have already redirected.
        Object languagePageShown = request.getSession(true).getAttribute(LANG_PAGE_SHOWN);
        if (!file.equals(originalFile)) {
            // We determined that we are going to redirect the user to the English version URI.
            String redirect = request.getServletPath() + replaceLocaleWithUSLocale(request.getPathInfo(), locale);
            if ((languagePageShown == null || !Boolean.parseBoolean(languagePageShown.toString()))) {
                request.getSession(true).setAttribute(LANG_PAGE_SHOWN, true);
                request.setAttribute(LOCALE, locale);
                request.setAttribute(ENGLISH_HREF, redirect);
                RequestDispatcher dispatcher = request.getRequestDispatcher(LANG_JSP);
                if (dispatcher != null) {
                    dispatcher.include(request, response);
                }
            } else {
                // Redirect to English version of the document
                response.sendRedirect(redirect);
            }
        } else {
            // Send the content of the file:
            // type is the default MIME type of the Servlet(passed in through WebInit parameter).
            ServletUtils.sendFile(request, response, file, type);
        }
    }
}
#end_block

#method_before
protected File determineActualFile(final HttpServletRequest request, Locale locale) {
    File file = ServletUtils.getFileFromString(request.getPathInfo(), base);
    // Check if file is found. If not found go ahead and try and look up the English US locale version.
    if (null != file && !ServletUtils.canReadFile(file)) {
        file = ServletUtils.getFileFromString(replaceLocaleWithUSLocale(request.getPathInfo(), locale), base);
    }
    return file;
}
#method_after
protected File determineActualFile(final HttpServletRequest request, Locale locale) {
    File file = ServletUtils.makeFileFromSanePath(request.getPathInfo(), base);
    // Check if file is found. If not found go ahead and try and look up the English US locale version.
    if (file != null && !ServletUtils.canReadFile(file)) {
        file = ServletUtils.makeFileFromSanePath(replaceLocaleWithUSLocale(request.getPathInfo(), locale), base);
    }
    return file;
}
#end_block

#method_before
private String replaceLocaleWithUSLocale(String originalString, Locale locale) {
    // Have to check against both the _ and - versions of the locale to replace, as they might not be consistent.
    return originalString.replaceAll("/" + locale.toLanguageTag().replaceAll("-", "\\\\-") + "|/" + locale.toString(), "/" + Locale.US.toLanguageTag());
}
#method_after
private String replaceLocaleWithUSLocale(String originalString, Locale locale) {
    // Create regex to match either the toString() or toLanguageTag() version of the locale
    // For US Locale this means: /en\-US|/en_US
    // For Brazil this means: /pt\-BR|/pt_BR
    // For Japan this means: /ja|/ja (yes I know its the same).
    String regex = "/" + locale.toLanguageTag().replaceAll("-", "\\\\-") + "|/" + locale.toString();
    // it will also match '/pt_BR/something' and turn it into /'en-US/something'
    return originalString.replaceAll(regex, "/" + Locale.US.toLanguageTag());
}
#end_block

#method_before
protected Locale getLocaleFromRequest(final HttpServletRequest request) {
    String localeString = getLocaleStringFromReferer(request);
    // Unable to determine locale string from referer (preferred way)
    if (null == localeString) {
        // Note this fails if the is something like /menu.css
        localeString = getLocaleStringFromPath(request.getPathInfo());
    }
    // Validate that the locale string is valid.
    Locale locale = localeFromString(localeString);
    return locale;
}
#method_after
protected Locale getLocaleFromRequest(final HttpServletRequest request) {
    String localeString = getLocaleStringFromReferer(request);
    // Unable to determine locale string from referer (preferred way)
    if (localeString == null) {
        // Note this fails if the is something like /menu.css
        localeString = getLocaleStringFromPath(request.getPathInfo());
    }
    // Validate that the locale string is valid.
    Locale locale = LocaleUtils.getLocaleFromString(localeString, true);
    return locale;
}
#end_block

#method_before
protected String getLocaleStringFromPath(final String path) {
    String result = null;
    if (null != path) {
        if (!path.startsWith("/")) {
            throw new IllegalArgumentException("Path should start with a '/'");
        }
        // Attempt to determine locale from path info.
        String[] pathElements = path.substring(1).split("/");
        File localeFile = new File(base, pathElements[0]);
        // This excludes anything like /docs/menu.css
        if (!localeFile.exists() || localeFile.isDirectory()) {
            result = pathElements[0];
        }
    }
    return result;
}
#method_after
protected String getLocaleStringFromPath(final String path) {
    String result = null;
    if (path != null) {
        if (!path.startsWith("/")) {
            log.warn("Path should start with a '/'");
            return null;
        }
        // Attempt to determine locale from path info.
        String[] pathElements = path.substring(1).split("/");
        File localeFile = new File(base, pathElements[0]);
        // This excludes anything like /docs/menu.css
        if (!localeFile.exists() || localeFile.isDirectory()) {
            result = pathElements[0];
        }
    }
    return result;
}
#end_block

#method_before
protected String getLocaleStringFromReferer(final HttpServletRequest request) {
    // Determine the local passed in. To do this check the referer
    final URI refererURL;
    String result = null;
    try {
        String referer = request.getHeader(REFERER);
        if (null != referer) {
            refererURL = new URI(referer);
            String query = refererURL.getQuery();
            if (null != query) {
                String[] parameters = query.split("&");
                for (int i = 0; i < parameters.length; i++) {
                    String[] keyValues = parameters[i].split("=");
                    if (LOCALE.equalsIgnoreCase(keyValues[0])) {
                        result = keyValues[1];
                        break;
                    }
                }
            }
        }
    } catch (URISyntaxException e) {
        log.error("Unable to determine referer URI", e);
    }
    return result;
}
#method_after
protected String getLocaleStringFromReferer(final HttpServletRequest request) {
    // Determine the local passed in. To do this check the referer
    final URI refererURL;
    String result = null;
    try {
        String referer = request.getHeader(REFERER);
        if (referer != null) {
            refererURL = new URI(referer);
            String query = refererURL.getQuery();
            if (query != null) {
                String[] parameters = query.split("&");
                for (int i = 0; i < parameters.length; i++) {
                    String[] keyValues = parameters[i].split("=");
                    if (LOCALE.equalsIgnoreCase(keyValues[0])) {
                        result = keyValues[1];
                        break;
                    }
                }
            }
        }
    } catch (URISyntaxException e) {
        log.error("Unable to determine referer URI", e);
    }
    return result;
}
#end_block

#method_before
public static boolean canReadFile(final File file) {
    return null != file && file.exists() && file.canRead();
}
#method_after
public static boolean canReadFile(final File file) {
    return file != null && file.exists() && file.canRead();
}
#end_block

#method_before
@Before
public void setUp() throws Exception {
    testServlet = new DocsServlet();
    mockConfig = mock(ServletConfig.class);
    when(mockConfig.getInitParameter("file")).thenReturn(this.getClass().getResource("filetest").toURI().toASCIIString().replaceAll("file:", ""));
    testServlet.init(mockConfig);
    mockRequest = mock(HttpServletRequest.class);
    mockResponse = mock(HttpServletResponse.class);
    mockSession = mock(HttpSession.class);
    when(mockRequest.getSession(true)).thenReturn(mockSession);
}
#method_after
@Before
public void setUp() throws Exception {
    testServlet = new DocsServlet();
    when(mockConfig.getInitParameter("file")).thenReturn(this.getClass().getResource("filetest").toURI().toASCIIString().replaceAll("file:", ""));
    ServletContext mockContext = mock(ServletContext.class);
    when(mockConfig.getServletContext()).thenReturn(mockContext);
    testServlet.init(mockConfig);
    when(mockRequest.getSession(true)).thenReturn(mockSession);
}
#end_block

#method_before
public void onEdit(NetworkItemModel<?> item) {
    Model editPopup = null;
    BaseCommandTarget okTarget = null;
    if (item instanceof BondNetworkInterfaceModel) {
        /**
         * **************
         *  Bond Dialog
         * ***************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        editPopup = new HostBondInterfaceModel(true);
        final HostBondInterfaceModel bondDialogModel = (HostBondInterfaceModel) editPopup;
        bondDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editBondInterfaceTitle(entity.getName()));
        bondDialogModel.getNetwork().setIsAvailable(false);
        bondDialogModel.getCheckConnectivity().setIsAvailable(false);
        bondDialogModel.getAddress().setIsAvailable(false);
        bondDialogModel.getSubnet().setIsAvailable(false);
        bondDialogModel.getGateway().setIsAvailable(false);
        bondDialogModel.setBootProtocolAvailable(false);
        // bond name
        bondDialogModel.getBond().setIsChangable(false);
        List<String> bondName = Arrays.asList(entity.getName());
        bondDialogModel.getBond().setItems(bondName);
        bondDialogModel.getBond().setSelectedItem(entity.getName());
        // bond options
        String bondOptions = entity.getBondOptions();
        List<KeyValuePairCompat<String, EntityModel>> items = (List<KeyValuePairCompat<String, EntityModel>>) bondDialogModel.getBondingOptions().getItems();
        boolean found = false;
        KeyValuePairCompat<String, EntityModel> customKey = null;
        for (KeyValuePairCompat<String, EntityModel> pair : items) {
            String key = pair.getKey();
            if (key.equals(bondOptions)) {
                bondDialogModel.getBondingOptions().setSelectedItem(pair);
                found = true;
                break;
            } else {
                if ("custom".equals(key)) {
                    // $NON-NLS-1$
                    customKey = pair;
                }
            }
        }
        if (!found) {
            EntityModel value = new EntityModel();
            value.setEntity(bondOptions);
            customKey.setValue(value);
            bondDialogModel.getBondingOptions().setSelectedItem(customKey);
        }
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                setBondOptions(entity, bondDialogModel);
                sourceListModel.setConfirmWindow(null);
            }
        };
    } else if (item instanceof LogicalNetworkModel) {
        final LogicalNetworkModel logicalNetwork = (LogicalNetworkModel) item;
        final VdsNetworkInterface entity = logicalNetwork.hasVlan() ? logicalNetwork.getVlanNic().getEntity() : logicalNetwork.getAttachedToNic().getEntity();
        if (logicalNetwork.isManagement()) {
            /**
             * **************
             *  Management Network Dialog
             * ***************
             */
            editPopup = new HostManagementNetworkModel(true);
            final HostManagementNetworkModel mgmntDialogModel = (HostManagementNetworkModel) editPopup;
            mgmntDialogModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
            mgmntDialogModel.setOriginalNetParams(netToBeforeSyncParams.get(logicalNetwork.getName()));
            mgmntDialogModel.setEntity(logicalNetwork.getEntity());
            mgmntDialogModel.getAddress().setEntity(entity.getAddress());
            mgmntDialogModel.getSubnet().setEntity(entity.getSubnet());
            mgmntDialogModel.getGateway().setEntity(entity.getGateway());
            mgmntDialogModel.setNoneBootProtocolAvailable(false);
            mgmntDialogModel.getBondingOptions().setIsAvailable(false);
            mgmntDialogModel.getInterface().setIsAvailable(false);
            mgmntDialogModel.setBootProtocol(entity.getBootProtocol());
            mgmntDialogModel.getIsToSync().setIsChangable(!logicalNetwork.isInSync());
            mgmntDialogModel.getIsToSync().setEntity(HostSetupNetworksModel.this.networksToSync.contains(logicalNetwork.getName()));
            // OK Target
            okTarget = new BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand command) {
                    if (!mgmntDialogModel.Validate()) {
                        return;
                    }
                    entity.setBootProtocol(mgmntDialogModel.getBootProtocol());
                    entity.setAddress((String) mgmntDialogModel.getAddress().getEntity());
                    entity.setSubnet((String) mgmntDialogModel.getSubnet().getEntity());
                    entity.setGateway((String) mgmntDialogModel.getGateway().getEntity());
                    if ((Boolean) mgmntDialogModel.getIsToSync().getEntity()) {
                        HostSetupNetworksModel.this.networksToSync.add(logicalNetwork.getName());
                    } else {
                        HostSetupNetworksModel.this.networksToSync.remove(logicalNetwork.getName());
                    }
                    sourceListModel.setConfirmWindow(null);
                }
            };
        } else {
            /**
             * **************
             *  Network Dialog
             * ***************
             */
            editPopup = new HostInterfaceModel(true);
            final HostInterfaceModel networkDialogModel = (HostInterfaceModel) editPopup;
            networkDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editNetworkTitle(logicalNetwork.getName()));
            networkDialogModel.setOriginalNetParams(netToBeforeSyncParams.get(logicalNetwork.getName()));
            networkDialogModel.getAddress().setEntity(entity.getAddress());
            networkDialogModel.getSubnet().setEntity(entity.getSubnet());
            networkDialogModel.getName().setIsAvailable(false);
            networkDialogModel.getBondingOptions().setIsAvailable(false);
            networkDialogModel.getNetwork().setIsChangable(false);
            networkDialogModel.getNetwork().setSelectedItem(logicalNetwork.getEntity());
            networkDialogModel.setBootProtocol(entity.getBootProtocol());
            networkDialogModel.getIsToSync().setIsChangable(!logicalNetwork.isInSync());
            networkDialogModel.getIsToSync().setEntity(HostSetupNetworksModel.this.networksToSync.contains(logicalNetwork.getName()));
            // OK Target
            okTarget = new BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand command) {
                    if (!networkDialogModel.Validate()) {
                        return;
                    }
                    entity.setBootProtocol(networkDialogModel.getBootProtocol());
                    entity.setAddress((String) networkDialogModel.getAddress().getEntity());
                    entity.setSubnet((String) networkDialogModel.getSubnet().getEntity());
                    if ((Boolean) networkDialogModel.getIsToSync().getEntity()) {
                        HostSetupNetworksModel.this.networksToSync.add(logicalNetwork.getName());
                    } else {
                        HostSetupNetworksModel.this.networksToSync.remove(logicalNetwork.getName());
                    }
                    sourceListModel.setConfirmWindow(null);
                }
            };
        }
    }
    // ok command
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OK", okTarget);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // cancel command
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            sourceListModel.setConfirmWindow(null);
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (editPopup != null) {
        editPopup.getCommands().add(okCommand);
        editPopup.getCommands().add(cancelCommand);
    }
    sourceListModel.setConfirmWindow(editPopup);
}
#method_after
public void onEdit(NetworkItemModel<?> item) {
    Model editPopup = null;
    BaseCommandTarget okTarget = null;
    if (item instanceof BondNetworkInterfaceModel) {
        /**
         * **************
         *  Bond Dialog
         * ***************
         */
        final VdsNetworkInterface entity = ((NetworkInterfaceModel) item).getEntity();
        editPopup = new SetupNetworksEditBondModel(entity);
        final SetupNetworksBondModel bondDialogModel = (SetupNetworksBondModel) editPopup;
        // OK Target
        okTarget = new BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                setBondOptions(entity, bondDialogModel);
                sourceListModel.setConfirmWindow(null);
            }
        };
    } else if (item instanceof LogicalNetworkModel) {
        final LogicalNetworkModel logicalNetwork = (LogicalNetworkModel) item;
        final VdsNetworkInterface entity = logicalNetwork.hasVlan() ? logicalNetwork.getVlanNic().getEntity() : logicalNetwork.getAttachedToNic().getEntity();
        if (logicalNetwork.isManagement()) {
            /**
             * **************
             *  Management Network Dialog
             * ***************
             */
            editPopup = new HostManagementNetworkModel(true);
            final HostManagementNetworkModel mgmntDialogModel = (HostManagementNetworkModel) editPopup;
            mgmntDialogModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
            mgmntDialogModel.setOriginalNetParams(netToBeforeSyncParams.get(logicalNetwork.getName()));
            mgmntDialogModel.setEntity(logicalNetwork.getEntity());
            mgmntDialogModel.getAddress().setEntity(entity.getAddress());
            mgmntDialogModel.getSubnet().setEntity(entity.getSubnet());
            mgmntDialogModel.getGateway().setEntity(entity.getGateway());
            mgmntDialogModel.setNoneBootProtocolAvailable(false);
            mgmntDialogModel.getBondingOptions().setIsAvailable(false);
            mgmntDialogModel.getInterface().setIsAvailable(false);
            mgmntDialogModel.setBootProtocol(entity.getBootProtocol());
            mgmntDialogModel.getIsToSync().setIsChangable(!logicalNetwork.isInSync());
            mgmntDialogModel.getIsToSync().setEntity(HostSetupNetworksModel.this.networksToSync.contains(logicalNetwork.getName()));
            // OK Target
            okTarget = new BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand command) {
                    if (!mgmntDialogModel.Validate()) {
                        return;
                    }
                    entity.setBootProtocol(mgmntDialogModel.getBootProtocol());
                    entity.setAddress((String) mgmntDialogModel.getAddress().getEntity());
                    entity.setSubnet((String) mgmntDialogModel.getSubnet().getEntity());
                    entity.setGateway((String) mgmntDialogModel.getGateway().getEntity());
                    if ((Boolean) mgmntDialogModel.getIsToSync().getEntity()) {
                        HostSetupNetworksModel.this.networksToSync.add(logicalNetwork.getName());
                    } else {
                        HostSetupNetworksModel.this.networksToSync.remove(logicalNetwork.getName());
                    }
                    sourceListModel.setConfirmWindow(null);
                }
            };
        } else {
            /**
             * **************
             *  Network Dialog
             * ***************
             */
            editPopup = new HostInterfaceModel(true);
            final HostInterfaceModel networkDialogModel = (HostInterfaceModel) editPopup;
            networkDialogModel.setTitle(ConstantsManager.getInstance().getMessages().editNetworkTitle(logicalNetwork.getName()));
            networkDialogModel.setOriginalNetParams(netToBeforeSyncParams.get(logicalNetwork.getName()));
            networkDialogModel.getAddress().setEntity(entity.getAddress());
            networkDialogModel.getSubnet().setEntity(entity.getSubnet());
            networkDialogModel.getName().setIsAvailable(false);
            networkDialogModel.getBondingOptions().setIsAvailable(false);
            networkDialogModel.getNetwork().setIsChangable(false);
            networkDialogModel.getNetwork().setSelectedItem(logicalNetwork.getEntity());
            networkDialogModel.setBootProtocol(entity.getBootProtocol());
            networkDialogModel.getIsToSync().setIsChangable(!logicalNetwork.isInSync());
            networkDialogModel.getIsToSync().setEntity(HostSetupNetworksModel.this.networksToSync.contains(logicalNetwork.getName()));
            // OK Target
            okTarget = new BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand command) {
                    if (!networkDialogModel.Validate()) {
                        return;
                    }
                    entity.setBootProtocol(networkDialogModel.getBootProtocol());
                    entity.setAddress((String) networkDialogModel.getAddress().getEntity());
                    entity.setSubnet((String) networkDialogModel.getSubnet().getEntity());
                    if ((Boolean) networkDialogModel.getIsToSync().getEntity()) {
                        HostSetupNetworksModel.this.networksToSync.add(logicalNetwork.getName());
                    } else {
                        HostSetupNetworksModel.this.networksToSync.remove(logicalNetwork.getName());
                    }
                    sourceListModel.setConfirmWindow(null);
                }
            };
        }
    }
    // ok command
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OK", okTarget);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // cancel command
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            sourceListModel.setConfirmWindow(null);
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (editPopup != null) {
        editPopup.getCommands().add(okCommand);
        editPopup.getCommands().add(cancelCommand);
    }
    sourceListModel.setConfirmWindow(editPopup);
}
#end_block

#method_before
public void onOperation(NetworkOperation operation, final NetworkCommand networkCommand) {
    Model popupWindow;
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            sourceListModel.setConfirmWindow(null);
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (operation.isNullOperation()) {
        return;
    } else if (operation == NetworkOperation.BOND_WITH) {
        final HostBondInterfaceModel bondPopup = new HostBondInterfaceModel(true);
        bondPopup.setTitle(ConstantsManager.getInstance().getConstants().createNewBondTitle());
        bondPopup.getNetwork().setIsAvailable(false);
        bondPopup.getCheckConnectivity().setIsAvailable(false);
        bondPopup.setBootProtocol(NetworkBootProtocol.NONE);
        bondPopup.getAddress().setIsAvailable(false);
        bondPopup.getSubnet().setIsAvailable(false);
        bondPopup.getGateway().setIsAvailable(false);
        bondPopup.setBootProtocolAvailable(false);
        bondPopup.getBond().setItems(getFreeBonds());
        bondPopup.getBond().setSelectedItem(BondNameValidation.BOND_PREFIX);
        bondPopup.getCommands().add(new UICommand("OK", new // $NON-NLS-1$
        BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                if (!bondPopup.Validate()) {
                    return;
                }
                sourceListModel.setConfirmWindow(null);
                VdsNetworkInterface bond = new Bond((String) bondPopup.getBond().getSelectedItem());
                setBondOptions(bond, bondPopup);
                NetworkInterfaceModel nic1 = (NetworkInterfaceModel) networkCommand.getOp1();
                NetworkInterfaceModel nic2 = (NetworkInterfaceModel) networkCommand.getOp2();
                List<LogicalNetworkModel> networks = nic1.getItems().size() != 0 ? new ArrayList<LogicalNetworkModel>(nic1.getItems()) : new ArrayList<LogicalNetworkModel>(nic2.getItems());
                networkCommand.Execute(bond);
                redraw();
                // Attach the previous networks
                for (NetworkInterfaceModel nic : getNics()) {
                    if (nic.getName().equals(bond.getName())) {
                        NetworkOperation.attachNetworks(nic, networks, allNics);
                        redraw();
                        return;
                    }
                }
            }
        }));
        popupWindow = bondPopup;
    } else {
        // just execute the command
        networkCommand.Execute();
        redraw();
        return;
    }
    // add cancel
    popupWindow.getCommands().add(cancelCommand);
    // set window
    sourceListModel.setConfirmWindow(popupWindow);
}
#method_after
public void onOperation(NetworkOperation operation, final NetworkCommand networkCommand) {
    Model popupWindow;
    UICommand cancelCommand = new UICommand("Cancel", new // $NON-NLS-1$
    BaseCommandTarget() {

        @Override
        public void ExecuteCommand(UICommand command) {
            sourceListModel.setConfirmWindow(null);
        }
    });
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    if (operation.isNullOperation()) {
        return;
    } else if (operation == NetworkOperation.BOND_WITH) {
        final SetupNetworksBondModel bondPopup = new SetupNetworksAddBondModel(getFreeBonds());
        bondPopup.getCommands().add(new UICommand("OK", new // $NON-NLS-1$
        BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand command) {
                if (!bondPopup.Validate()) {
                    return;
                }
                sourceListModel.setConfirmWindow(null);
                VdsNetworkInterface bond = new Bond((String) bondPopup.getBond().getSelectedItem());
                setBondOptions(bond, bondPopup);
                NetworkInterfaceModel nic1 = (NetworkInterfaceModel) networkCommand.getOp1();
                NetworkInterfaceModel nic2 = (NetworkInterfaceModel) networkCommand.getOp2();
                List<LogicalNetworkModel> networks = nic1.getItems().size() != 0 ? new ArrayList<LogicalNetworkModel>(nic1.getItems()) : new ArrayList<LogicalNetworkModel>(nic2.getItems());
                networkCommand.Execute(bond);
                redraw();
                // Attach the previous networks
                for (NetworkInterfaceModel nic : getNics()) {
                    if (nic.getName().equals(bond.getName())) {
                        NetworkOperation.attachNetworks(nic, networks, allNics);
                        redraw();
                        return;
                    }
                }
            }
        }));
        popupWindow = bondPopup;
    } else {
        // just execute the command
        networkCommand.Execute();
        redraw();
        return;
    }
    // add cancel
    popupWindow.getCommands().add(cancelCommand);
    // set window
    sourceListModel.setConfirmWindow(popupWindow);
}
#end_block

#method_before
private void setBondOptions(VdsNetworkInterface entity, HostBondInterfaceModel bondDialogModel) {
    KeyValuePairCompat<String, EntityModel> BondPair = (KeyValuePairCompat<String, EntityModel>) bondDialogModel.getBondingOptions().getSelectedItem();
    String key = BondPair.getKey();
    // $NON-NLS-1$
    entity.setBondOptions((String) ("custom".equals(key) ? BondPair.getValue().getEntity() : key));
}
#method_after
private void setBondOptions(VdsNetworkInterface entity, SetupNetworksBondModel bondDialogModel) {
    KeyValuePairCompat<String, EntityModel> BondPair = (KeyValuePairCompat<String, EntityModel>) bondDialogModel.getBondingOptions().getSelectedItem();
    String key = BondPair.getKey();
    // $NON-NLS-1$
    entity.setBondOptions((String) ("custom".equals(key) ? BondPair.getValue().getEntity() : key));
}
#end_block

#method_before
public ListModel getBond() {
    return privateBond;
}
#method_after
public SortedListModel getBond() {
    return privateBond;
}
#end_block

#method_before
private void setBond(ListModel value) {
    privateBond = value;
}
#method_after
protected void setBond(SortedListModel value) {
    privateBond = value;
}
#end_block

#method_before
public boolean Validate() {
    getNetwork().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getBond().ValidateSelectedItem(new IValidation[] { new BondNameValidation() });
    getAddress().setIsValid(true);
    getSubnet().setIsValid(true);
    getGateway().setIsValid(true);
    if (getIsStaticAddress()) {
        getAddress().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IpAddressValidation() });
        getSubnet().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new SubnetMaskValidation() });
        getGateway().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IpAddressValidation() });
    }
    return getBond().getIsValid() && getNetwork().getIsValid() && getAddress().getIsValid() && getSubnet().getIsValid() && getGateway().getIsValid();
}
#method_after
public boolean Validate() {
    getNetwork().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getBond().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation(), new LengthValidation(BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH), new BondNameValidation() });
    getAddress().setIsValid(true);
    getSubnet().setIsValid(true);
    getGateway().setIsValid(true);
    if (getIsStaticAddress()) {
        getAddress().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IpAddressValidation() });
        getSubnet().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new SubnetMaskValidation() });
        getGateway().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new IpAddressValidation() });
    }
    return getBond().getIsValid() && getNetwork().getIsValid() && getAddress().getIsValid() && getSubnet().getIsValid() && getGateway().getIsValid();
}
#end_block

#method_before
@Override
public void setAcceptableValues(Collection<Object> values) {
    Collection<String> stringValues = new ArrayList<String>();
    for (Object value : values) {
        stringValues.add((String) value);
    }
    suggestOracle.clear();
    suggestOracle.addAll(stringValues);
    suggestOracle.setDefaultSuggestionsFromText(stringValues);
}
#method_after
@Override
public void setAcceptableValues(Collection<Object> values) {
    Collection<String> stringValues = Linq.Cast(values);
    suggestOracle.clear();
    suggestOracle.addAll(stringValues);
    suggestOracle.setDefaultSuggestionsFromText(stringValues);
}
#end_block

#method_before
private void setBond(SortedListModel value) {
    privateBond = value;
}
#method_after
protected void setBond(SortedListModel value) {
    privateBond = value;
}
#end_block

#method_before
@Override
public void edit(final HostBondInterfaceModel object) {
    Driver.driver.edit(object);
    if (!object.getBootProtocolAvailable()) {
        bootProtocol.asWidget().setVisible(false);
        bootProtocolLabel.setVisible(false);
    }
    bootProtocol.setEnabled(NetworkBootProtocol.NONE, object.getNoneBootProtocolAvailable());
    updateBondOptions(object.getBondingOptions());
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            HostBondInterfaceModel model = (HostBondInterfaceModel) sender;
            String propertyName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("NoneBootProtocolAvailable".equals(propertyName)) {
                // $NON-NLS-1$
                bootProtocol.setEnabled(NetworkBootProtocol.NONE, model.getNoneBootProtocolAvailable());
            } else if ("Message".equals(propertyName)) {
                // $NON-NLS-1$
                message.setText(model.getMessage());
            }
        }
    });
    object.getBondingOptions().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            ListModel list = (ListModel) sender;
            updateBondOptions(list);
        }
    });
    customEditor.asValueBox().addValueChangeHandler(new ValueChangeHandler<Object>() {

        @SuppressWarnings("unchecked")
        @Override
        public void onValueChange(ValueChangeEvent<Object> event) {
            for (Object item : object.getBondingOptions().getItems()) {
                KeyValuePairCompat<String, EntityModel> pair = (KeyValuePairCompat<String, EntityModel>) item;
                if ("custom".equals(pair.getKey())) {
                    // $NON-NLS-1$
                    pair.getValue().setEntity(event.getValue());
                }
            }
        }
    });
    bondingModeEditor.setVisible(true);
    bondingModeEditor.asWidget().setVisible(true);
    if (object.isCompactMode()) {
        // hide widgets
        info.setVisible(false);
        message.setVisible(false);
        checkConnectivity.setVisible(false);
        commitChanges.setVisible(false);
        // resize
        layoutPanel.remove(infoPanel);
        layoutPanel.setWidgetSize(mainPanel, 300);
        asPopupPanel().setPixelSize(400, 400);
    }
}
#method_after
@Override
public void edit(final HostBondInterfaceModel object) {
    driver.edit(object);
    bondSuggestEditor.setVisible(false);
    if (!object.getBootProtocolAvailable()) {
        bootProtocol.asWidget().setVisible(false);
        bootProtocolLabel.setVisible(false);
    }
    bootProtocol.setEnabled(NetworkBootProtocol.NONE, object.getNoneBootProtocolAvailable());
    updateBondOptions(object.getBondingOptions());
    object.getPropertyChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            HostBondInterfaceModel model = (HostBondInterfaceModel) sender;
            String propertyName = ((PropertyChangedEventArgs) args).PropertyName;
            if ("NoneBootProtocolAvailable".equals(propertyName)) {
                // $NON-NLS-1$
                bootProtocol.setEnabled(NetworkBootProtocol.NONE, model.getNoneBootProtocolAvailable());
            } else if ("Message".equals(propertyName)) {
                // $NON-NLS-1$
                message.setText(model.getMessage());
            }
        }
    });
    object.getBondingOptions().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            ListModel list = (ListModel) sender;
            updateBondOptions(list);
        }
    });
    customEditor.asValueBox().addValueChangeHandler(new ValueChangeHandler<Object>() {

        @SuppressWarnings("unchecked")
        @Override
        public void onValueChange(ValueChangeEvent<Object> event) {
            for (Object item : object.getBondingOptions().getItems()) {
                KeyValuePairCompat<String, EntityModel> pair = (KeyValuePairCompat<String, EntityModel>) item;
                if ("custom".equals(pair.getKey())) {
                    // $NON-NLS-1$
                    pair.getValue().setEntity(event.getValue());
                }
            }
        }
    });
    bondingModeEditor.setVisible(true);
    bondingModeEditor.asWidget().setVisible(true);
}
#end_block

#method_before
@Override
public HostBondInterfaceModel flush() {
    return Driver.driver.flush();
}
#method_after
@Override
public HostBondInterfaceModel flush() {
    return driver.flush();
}
#end_block

#method_before
@Override
public void edit(final HostBondInterfaceModel object) {
    super.edit(object);
    // hide widgets
    info.setVisible(false);
    message.setVisible(false);
    checkConnectivity.setVisible(false);
    commitChanges.setVisible(false);
    // resize
    layoutPanel.remove(infoPanel);
    layoutPanel.setWidgetSize(mainPanel, 300);
    asPopupPanel().setPixelSize(400, 400);
}
#method_after
@Override
public void edit(final HostBondInterfaceModel object) {
    super.edit(object);
    // hide widgets
    info.setVisible(false);
    message.setVisible(false);
    // resize
    layoutPanel.remove(infoPanel);
    layoutPanel.setWidgetSize(mainPanel, 300);
    asPopupPanel().setPixelSize(400, 400);
}
#end_block

#method_before
public void detach() {
    boolean syncNetworkValues = false;
    if (!isInSync() && isManaged()) {
        getSetupModel().getNetworksToSync().add(getName());
        syncNetworkValues = true;
    }
    assert attachedToNic != null;
    NetworkInterfaceModel attachingNic = attachedToNic;
    // this needs to be null before the NIC items are changed, because they trigger an event
    attachedToNic = null;
    List<LogicalNetworkModel> nicNetworks = attachingNic.getItems();
    nicNetworks.remove(this);
    // clear network name
    VdsNetworkInterface nicEntity = attachingNic.getEntity();
    NetworkParameters netParams = new NetworkParameters();
    if (!hasVlan()) {
        netParams.setBootProtocol(nicEntity.getBootProtocol());
        netParams.setAddress(nicEntity.getAddress());
        netParams.setSubnet(nicEntity.getSubnet());
    } else {
        netParams.setBootProtocol(vlanNic.getEntity().getBootProtocol());
        netParams.setAddress(vlanNic.getEntity().getAddress());
        netParams.setSubnet(vlanNic.getEntity().getSubnet());
    }
    if (isManagement()) {
        if (!hasVlan()) {
            netParams.setGateway(nicEntity.getGateway());
        } else {
            netParams.setGateway(vlanNic.getEntity().getGateway());
        }
    }
    getSetupModel().getNetworkToLastDetachParams().put(getName(), netParams);
    if (!hasVlan()) {
        nicEntity.setNetworkName(null);
        nicEntity.setBootProtocol(null);
        nicEntity.setAddress(null);
        nicEntity.setSubnet(null);
        nicEntity.setGateway(null);
        nicEntity.setNetworkImplementationDetails(null);
    }
    setBridge(null);
    // is this a management nic?
    if (nicEntity.getIsManagement()) {
        nicEntity.setType(0);
    }
    if (syncNetworkValues) {
        syncNetworkValues();
    }
}
#method_after
public void detach() {
    boolean syncNetworkValues = false;
    if (!isInSync() && isManaged()) {
        getSetupModel().getNetworksToSync().add(getName());
        syncNetworkValues = true;
    }
    assert attachedToNic != null;
    NetworkInterfaceModel attachingNic = attachedToNic;
    // this needs to be null before the NIC items are changed, because they trigger an event
    attachedToNic = null;
    List<LogicalNetworkModel> nicNetworks = attachingNic.getItems();
    nicNetworks.remove(this);
    // clear network name
    VdsNetworkInterface nicEntity = attachingNic.getEntity();
    NetworkParameters netParams = new NetworkParameters();
    if (!hasVlan()) {
        netParams.setBootProtocol(nicEntity.getBootProtocol());
        netParams.setAddress(nicEntity.getAddress());
        netParams.setSubnet(nicEntity.getSubnet());
    } else {
        netParams.setBootProtocol(vlanNic.getEntity().getBootProtocol());
        netParams.setAddress(vlanNic.getEntity().getAddress());
        netParams.setSubnet(vlanNic.getEntity().getSubnet());
    }
    if (isManagement()) {
        netParams.setGateway(!hasVlan() ? nicEntity.getGateway() : vlanNic.getEntity().getGateway());
    }
    getSetupModel().getNetworkToLastDetachParams().put(getName(), netParams);
    if (!hasVlan()) {
        nicEntity.setNetworkName(null);
        nicEntity.setBootProtocol(null);
        nicEntity.setAddress(null);
        nicEntity.setSubnet(null);
        nicEntity.setGateway(null);
        nicEntity.setNetworkImplementationDetails(null);
    }
    setBridge(null);
    // is this a management nic?
    if (nicEntity.getIsManagement()) {
        nicEntity.setType(0);
    }
    if (syncNetworkValues) {
        syncNetworkValues();
    }
}
#end_block

#method_before
private List<Guid> getGlusterServers() {
    List<Guid> servers = new ArrayList<Guid>();
    servers.add(Guid.createGuidFromString("afce7a39-8e8c-4819-ba9c-796d316592e6"));
    servers.add(Guid.createGuidFromString("afce7a39-8e8c-4819-ba9c-796d316592e7"));
    servers.add(Guid.createGuidFromString("23f6d691-5dfb-472b-86dc-9e1d2d3c18f3"));
    servers.add(Guid.createGuidFromString("2001751e-549b-4e7a-aff6-32d36856c125"));
    return servers;
}
#method_after
private List<VDS> getGlusterServers() {
    List<VDS> servers = new ArrayList<VDS>();
    servers.add(getServer(GUIDS[0], "gfs1", CLUSTER_ID));
    servers.add(getServer(GUIDS[1], "gfs2", CLUSTER_ID));
    servers.add(getServer(GUIDS[2], "gfs3", CLUSTER_ID));
    servers.add(getServer(GUIDS[3], "gfs4", CLUSTER_ID));
    return servers;
}
#end_block

#method_before
@Test
public void canDoActionSucceeds() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_NAME, GLUSTER_COMMAND, LEVEL)));
    prepareMocks(cmd, getGlusterServers());
    assertTrue(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionSucceeds() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(CLUSTER_ID, HOOK_ID)));
    setupMocks(true);
    assertTrue(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionFailsOnNullCluster() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(null, HOOK_NAME, GLUSTER_COMMAND, LEVEL)));
    prepareMocks(cmd, getGlusterServers());
    assertFalse(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionFailsOnNullCluster() {
    cmd = spy(new EnableGlusterHookCommand(new GlusterHookParameters(null, HOOK_ID)));
    setupMocks(true);
    assertFalse(cmd.canDoAction());
    assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID.toString()));
}
#end_block

#method_before
@Override
protected Map<String, String> getExclusiveLocks() {
    if (!isInternalExecution()) {
        return Collections.singletonMap(getVdsGroupId().toString(), LockingGroup.GLUSTER.name());
    }
    return super.getExclusiveLocks();
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    if (!isInternalExecution()) {
        return Collections.singletonMap(getVdsGroupId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return super.getExclusiveLocks();
}
#end_block

#method_before
private ClusterUtils getClusterUtils() {
    return ClusterUtils.getInstance();
}
#method_after
protected ClusterUtils getClusterUtils() {
    return ClusterUtils.getInstance();
}
#end_block

#method_before
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) {
    VdsStatic server = getVdsStaticDao().get(brick.getServerId());
    if ((server == null || !server.getvds_group_id().equals(getVdsGroupId()))) {
        if (addCanDoActionMessage) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID);
        }
        return false;
    }
    brick.setServerName(server.gethost_name());
    return true;
}
#method_after
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) {
    VdsStatic server = getVdsStaticDao().get(brick.getServerId());
    if ((server == null || !server.getVdsGroupId().equals(getVdsGroupId()))) {
        if (addCanDoActionMessage) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID);
        }
        return false;
    }
    brick.setServerName(server.getHostName());
    return true;
}
#end_block

#method_before
public String getVmTemplateName() {
    if (mVmTemplateName == null && getVmTemplate() != null) {
        mVmTemplateName = getVmTemplate().getname();
    }
    return mVmTemplateName;
}
#method_after
public String getVmTemplateName() {
    if (mVmTemplateName == null && getVmTemplate() != null) {
        mVmTemplateName = getVmTemplate().getName();
    }
    return mVmTemplateName;
}
#end_block

#method_before
public String getVmName() {
    if (mVmName == null && getVm() != null) {
        mVmName = getVm().getVmName();
    }
    return mVmName;
}
#method_after
public String getVmName() {
    if (mVmName == null && getVm() != null) {
        mVmName = getVm().getName();
    }
    return mVmName;
}
#end_block

#method_before
public String getVdsName() {
    if (mVdsName == null && getVds() != null) {
        mVdsName = getVds().getvds_name();
    }
    return mVdsName;
}
#method_after
public String getVdsName() {
    if (mVdsName == null && getVds() != null) {
        mVdsName = getVds().getName();
    }
    return mVdsName;
}
#end_block

#method_before
public storage_domains getStorageDomain() {
    if (_storageDomain == null && getStorageDomainId() != null) {
        if (_storagePoolId != null && getStoragePool() != null) {
            _storageDomain = getStorageDomainDAO().getForStoragePool(getStorageDomainId().getValue(), getStoragePool().getId());
        }
        if (_storageDomain == null) {
            final List<storage_domains> storageDomainList = getStorageDomainDAO().getAllForStorageDomain(getStorageDomainId().getValue());
            if (storageDomainList.size() != 0) {
                _storageDomain = storageDomainList.get(0);
                for (final storage_domains storageDomainFromList : storageDomainList) {
                    if (storageDomainFromList.getstatus() == StorageDomainStatus.Active) {
                        _storageDomain = storageDomainFromList;
                        break;
                    }
                }
            }
        }
    }
    return _storageDomain;
}
#method_after
public StorageDomain getStorageDomain() {
    if (_storageDomain == null && getStorageDomainId() != null) {
        if (_storagePoolId != null && getStoragePool() != null) {
            _storageDomain = getStorageDomainDAO().getForStoragePool(getStorageDomainId().getValue(), getStoragePool().getId());
        }
        if (_storageDomain == null) {
            final List<StorageDomain> storageDomainList = getStorageDomainDAO().getAllForStorageDomain(getStorageDomainId().getValue());
            if (storageDomainList.size() != 0) {
                _storageDomain = storageDomainList.get(0);
                for (final StorageDomain storageDomainFromList : storageDomainList) {
                    if (storageDomainFromList.getStatus() == StorageDomainStatus.Active) {
                        _storageDomain = storageDomainFromList;
                        break;
                    }
                }
            }
        }
    }
    return _storageDomain;
}
#end_block

#method_before
public void setStorageDomain(final storage_domains value) {
    _storageDomain = value;
}
#method_after
public void setStorageDomain(final StorageDomain value) {
    _storageDomain = value;
}
#end_block

#method_before
public String getStorageDomainName() {
    if (getStorageDomain() != null) {
        return getStorageDomain().getstorage_name();
    }
    return "";
}
#method_after
public String getStorageDomainName() {
    if (getStorageDomain() != null) {
        return getStorageDomain().getStorageName();
    }
    return "";
}
#end_block

#method_before
public NGuid getStoragePoolId() {
    if (_storagePoolId == null) {
        if (_storagePool != null) {
            _storagePoolId = _storagePool.getId();
        } else if (getStorageDomain() != null) {
            _storagePoolId = getStorageDomain().getstorage_pool_id();
        }
    }
    return _storagePoolId;
}
#method_after
public NGuid getStoragePoolId() {
    if (_storagePoolId == null) {
        if (_storagePool != null) {
            _storagePoolId = _storagePool.getId();
        } else if (getStorageDomain() != null) {
            _storagePoolId = getStorageDomain().getStoragePoolId();
        }
    }
    return _storagePoolId;
}
#end_block

#method_before
protected void setVds(final VDS value) {
    mVds = value;
    mVdsName = null;
}
#method_after
public void setVds(final VDS value) {
    mVds = value;
    mVdsName = null;
    if (value != null) {
        mVdsId = value.getId();
    }
}
#end_block

#method_before
protected VDSGroup getVdsGroup() {
    if (mVdsGroup == null) {
        if (mVdsGroupId != null) {
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        } else if (getVds() != null) {
            mVdsGroupId = getVds().getvds_group_id();
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        } else if (getVm() != null) {
            mVdsGroupId = getVm().getVdsGroupId();
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        } else if (getVmTemplate() != null) {
            mVdsGroupId = getVmTemplate().getVdsGroupId();
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        }
    }
    return mVdsGroup;
}
#method_after
protected VDSGroup getVdsGroup() {
    if (mVdsGroup == null) {
        if (mVdsGroupId != null) {
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        } else if (getVds() != null) {
            mVdsGroupId = getVds().getVdsGroupId();
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        } else if (getVm() != null) {
            mVdsGroupId = getVm().getVdsGroupId();
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        } else if (getVmTemplate() != null) {
            mVdsGroupId = getVmTemplate().getVdsGroupId();
            mVdsGroup = getVdsGroupDAO().get(mVdsGroupId);
        }
    }
    return mVdsGroup;
}
#end_block

#method_before
public NGuid getGlusterVolumeId() {
    return glusterVolumeId;
}
#method_after
public NGuid getGlusterVolumeId() {
    return glusterVolumeId != null ? glusterVolumeId : Guid.Empty;
}
#end_block

#method_before
protected VmDAO getVmDAO() {
    return getDbFacade().getVmDao();
}
#method_after
public VmDAO getVmDAO() {
    return getDbFacade().getVmDao();
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ENABLE_GLUSTER_HOOK);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_HOOK);
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ENABLE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_HOOK);
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        return AuditLogType.GLUSTER_HOOK_ENABLE;
    } else {
        return errorType == null ? AuditLogType.GLUSTER_HOOK_ENABLE_FAILED : errorType;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    if (getSucceeded()) {
        if (errors.isEmpty()) {
            return AuditLogType.GLUSTER_HOOK_ENABLE;
        } else {
            return AuditLogType.GLUSTER_HOOK_ENABLE_PARTIAL;
        }
    } else {
        return errorType == null ? AuditLogType.GLUSTER_HOOK_ENABLE_FAILED : errorType;
    }
}
#end_block

#method_before
private int getServerCount(Guid clusterId) {
    return getVdsDao().getAllForVdsGroup(clusterId).size();
}
#method_after
public int getServerCount(Guid clusterId) {
    return getVdsDao().getAllForVdsGroup(clusterId).size();
}
#end_block

#method_before
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    initConfigSeverities();
    initUserAccountSeverities();
    checkSeverities();
}
#method_after
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    initConfigSeverities();
    initUserAccountSeverities();
    initCommonSeverities();
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_PARTIAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_HOOK_ENABLE_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initDefaultSeverities() {
    mSeverities.put(AuditLogType.UNASSIGNED, AuditLogSeverity.NORMAL);
}
#method_after
private static void initDefaultSeverities() {
    severities.put(AuditLogType.UNASSIGNED, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initTaskSeverities() {
    mSeverities.put(AuditLogType.TASK_CLEARING_ASYNC_TASK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TASK_STOPPING_ASYNC_TASK, AuditLogSeverity.NORMAL);
}
#method_after
private static void initTaskSeverities() {
    severities.put(AuditLogType.TASK_CLEARING_ASYNC_TASK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TASK_STOPPING_ASYNC_TASK, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initEngineSeverities() {
    mSeverities.put(AuditLogType.VDC_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDC_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CERTIFICATE_FILE_NOT_FOUND, AuditLogSeverity.ERROR);
}
#method_after
private static void initEngineSeverities() {
    severities.put(AuditLogType.VDC_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDC_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CERTIFICATE_FILE_NOT_FOUND, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initBookmarkSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_BOOKMARK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_BOOKMARK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_BOOKMARK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initBookmarkSeverities() {
    severities.put(AuditLogType.USER_ADD_BOOKMARK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_BOOKMARK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_BOOKMARK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initVMsPoolSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_ADD_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED, AuditLogSeverity.WARNING);
}
#method_after
private static void initVMsPoolSeverities() {
    severities.put(AuditLogType.USER_ADD_VM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_ADD_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initMLASeverities() {
    mSeverities.put(AuditLogType.USER_VDC_LOGIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_VDC_LOGIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDC_LOGOUT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_VDC_LOGOUT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AD_COMPUTER_ACCOUNT_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AD_COMPUTER_ACCOUNT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_PERMISSION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_PERMISSION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_ADUSER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_ADUSER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_ADUSER, AuditLogSeverity.WARNING);
}
#method_after
private static void initMLASeverities() {
    severities.put(AuditLogType.USER_VDC_LOGIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_VDC_LOGIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDC_LOGOUT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_VDC_LOGOUT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AD_COMPUTER_ACCOUNT_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AD_COMPUTER_ACCOUNT_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_PERMISSION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_PERMISSION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_ADUSER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_ADUSER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_ADUSER, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initHostSeverities() {
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#method_after
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_SECONDARY_AGENT_USED_FOR_FENCE_OPERATION, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_TASKS_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.UPDATE_OVF_FOR_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
}
#method_after
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    severities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.STORAGE_DOMAIN_TASKS_ERROR, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.UPDATE_OVF_FOR_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initQuotaSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DELETE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DELETE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.QUOTA_STORAGE_RESIZE_LOWER_THEN_CONSUMPTION, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MISSING_QUOTA_STORAGE_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MISSING_QUOTA_CLUSTER_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
}
#method_after
private static void initQuotaSeverities() {
    severities.put(AuditLogType.USER_ADD_QUOTA, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_QUOTA, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_QUOTA, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_QUOTA, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DELETE_QUOTA, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DELETE_QUOTA, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.QUOTA_STORAGE_RESIZE_LOWER_THEN_CONSUMPTION, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MISSING_QUOTA_STORAGE_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MISSING_QUOTA_CLUSTER_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
}
#method_after
private static void initVMSeverities() {
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTENANCE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initClusterSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_CLUSTER_DEFAULT_HOST_CLEARED, AuditLogSeverity.NORMAL);
}
#method_after
private static void initClusterSeverities() {
    severities.put(AuditLogType.USER_ADD_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_CLUSTER_DEFAULT_HOST_CLEARED, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initTagSeverities() {
    mSeverities.put(AuditLogType.USER_UPDATE_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_MOVE_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE_FAILED, AuditLogSeverity.NORMAL);
}
#method_after
private static void initTagSeverities() {
    severities.put(AuditLogType.USER_UPDATE_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_MOVE_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE_FAILED, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initImportExportSeverities() {
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_VM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_TEMPLATE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_INVALID_INTERFACES, AuditLogSeverity.NORMAL);
}
#method_after
private static void initImportExportSeverities() {
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_VM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_TEMPLATE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_INVALID_INTERFACES, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initNetworkSeverities() {
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    mSeverities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#method_after
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#end_block

#method_before
private static void initConfigSeverities() {
    mSeverities.put(AuditLogType.RELOAD_CONFIGURATIONS_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RELOAD_CONFIGURATIONS_FAILURE, AuditLogSeverity.ERROR);
}
#method_after
private static void initConfigSeverities() {
    severities.put(AuditLogType.RELOAD_CONFIGURATIONS_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RELOAD_CONFIGURATIONS_FAILURE, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initUserAccountSeverities() {
    mSeverities.put(AuditLogType.USER_ACCOUNT_DISABLED_OR_LOCKED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACCOUNT_PASSWORD_EXPIRED, AuditLogSeverity.ERROR);
}
#method_after
private static void initUserAccountSeverities() {
    severities.put(AuditLogType.USER_ACCOUNT_DISABLED_OR_LOCKED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ACCOUNT_PASSWORD_EXPIRED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initDwhSeverities() {
    mSeverities.put(AuditLogType.DWH_STOPPED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.DWH_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.DWH_ERROR, AuditLogSeverity.ERROR);
}
#method_after
private static void initDwhSeverities() {
    severities.put(AuditLogType.DWH_STOPPED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.DWH_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.DWH_ERROR, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initMessages() {
    ResXResourceReader reader = new ResXResourceReader("bundles/AuditLogMessages");
    for (DictionaryEntry entry : reader) {
        try {
            AuditLogType type = AuditLogType.valueOf(entry.getKey());
            if (!mMessages.containsKey(type)) {
                mMessages.put(type, (String) entry.getValue());
            } else {
                String secondPart = String.format(" First value : %1$s", mMessages.get(type));
                String thirdPart = String.format("Second value : %1$s", entry.getValue());
                log.errorFormat("Type {0} appears more then once in string table.{0}{1}", secondPart, thirdPart);
            }
        } catch (Exception e) {
            log.errorFormat("Cannot convert string {0} to AuditLogType", entry.getKey());
        }
    }
    checkMessages();
}
#method_after
private static void initMessages() {
    ResourceBundle bundle = readMessagesFromBundle();
    for (String key : bundle.keySet()) {
        try {
            AuditLogType type = AuditLogType.valueOf(key);
            if (!messages.containsKey(type)) {
                messages.put(type, bundle.getString(key));
            } else {
                log.errorFormat("The type {0} appears more then once in audit log messages bundle with the values '{1}' and '{2}'", type, messages.get(type), bundle.getString(key));
            }
        } catch (Exception e) {
            log.errorFormat("Cannot convert the string {0} to AuditLogType, the key does not exist in the AuditLogType declared types", bundle.getString(key));
        }
    }
    checkMessages();
}
#end_block

#method_before
static void checkMessages() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != mMessages.size()) {
        for (AuditLogType value : values) {
            if (!mMessages.containsKey(value)) {
                log.infoFormat("AuditLogType: {0} not exist in string table", value.toString());
            }
        }
    }
}
#method_after
private static void checkMessages() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != messages.size()) {
        for (AuditLogType value : values) {
            if (!messages.containsKey(value)) {
                log.infoFormat("AuditLogType: {0} not exist in string table", value.toString());
            }
        }
    }
}
#end_block

#method_before
static void checkSeverities() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != mSeverities.size()) {
        for (AuditLogType value : values) {
            if (!mSeverities.containsKey(value)) {
                log.warnFormat("AuditLogType: {0} not have severity. Assumed Normal", value.toString());
            }
        }
    }
}
#method_after
private static void checkSeverities() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != severities.size()) {
        for (AuditLogType value : values) {
            if (!severities.containsKey(value)) {
                log.warnFormat("AuditLogType: {0} not have severity. Assumed Normal", value.toString());
            }
        }
    }
}
#end_block

#method_before
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = mSeverities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        if (auditLogable != null) {
            AuditLog tempVar = null;
            // handle external log messages invoked by plugins via the API
            if (auditLogable.isExternal()) {
                // message is sent as an argument, no need to resolve.
                resolvedMessage = message = loggerString;
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
            } else if ((message = mMessages.get(logType)) != null) {
                // Application log message from AuditLogMessages
                resolvedMessage = resolveMessage(message, auditLogable);
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
            }
            if (tempVar != null) {
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                tempVar.setExternal(auditLogable.isExternal());
                auditLog = tempVar;
            }
        } else {
            auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
        }
        if (auditLog != null) {
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    } else if (auditLogable != null) {
        log.infoFormat("No string for {0} type. Use default Log", auditLogable.getAuditLogTypeValue());
        defaultLog(auditLogable);
    }
}
#method_after
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = severities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        // handle external log messages invoked by plugins via the API
        if (auditLogable.isExternal()) {
            // message is sent as an argument, no need to resolve.
            resolvedMessage = message = loggerString;
            auditLog = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
        } else if ((message = messages.get(logType)) != null) {
            // Application log message from AuditLogMessages
            resolvedMessage = resolveMessage(message, auditLogable);
            auditLog = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
        }
        if (auditLog != null) {
            auditLog.setstorage_domain_id(auditLogable.getStorageDomainId());
            auditLog.setstorage_domain_name(auditLogable.getStorageDomainName());
            auditLog.setstorage_pool_id(auditLogable.getStoragePoolId());
            auditLog.setstorage_pool_name(auditLogable.getStoragePoolName());
            auditLog.setvds_group_id(auditLogable.getVdsGroupId());
            auditLog.setvds_group_name(auditLogable.getVdsGroupName());
            auditLog.setCorrelationId(auditLogable.getCorrelationId());
            auditLog.setJobId(auditLogable.getJobId());
            auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
            auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
            auditLog.setExternal(auditLogable.isExternal());
            auditLog.setQuotaId(auditLogable.getQuotaIdForLog());
            auditLog.setQuotaName(auditLogable.getQuotaNameForLog());
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    }
}
#end_block

#method_before
private static void updateTimeoutLogableObject(AuditLogableBase auditLogable, AuditLogType logType) {
    int duplicateEventsIntrvalValue = (auditLogable.isExternal()) ? // Min duration for External Events is 30 sec
    Math.max(auditLogable.getEventFloodInSec(), 30) : logType.getDuplicateEventsIntervalValue();
    if (duplicateEventsIntrvalValue > 0) {
        auditLogable.setEndTime(DateTime.getNow().AddSeconds(logType.getDuplicateEventsIntervalValue()));
        auditLogable.setTimeoutObjectId(ComposeObjectId(auditLogable, logType));
    }
}
#method_after
private static void updateTimeoutLogableObject(AuditLogableBase auditLogable, AuditLogType logType) {
    int duplicateEventsIntrvalValue = (auditLogable.isExternal()) ? // Min duration for External Events is 30 sec
    Math.max(auditLogable.getEventFloodInSec(), 30) : logType.getDuplicateEventsIntervalValue();
    if (duplicateEventsIntrvalValue > 0) {
        auditLogable.setEndTime(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(duplicateEventsIntrvalValue));
        auditLogable.setTimeoutObjectId(composeObjectId(auditLogable, logType));
    }
}
#end_block

#method_before
static String resolveMessage(String message, AuditLogableBase logable) {
    String returnValue = message;
    if (logable != null) {
        Map<String, String> map = getAvailableValues(logable);
        returnValue = resolveMessage(message, map);
    }
    return returnValue;
}
#method_after
static String resolveMessage(String message, AuditLogableBase logable) {
    String returnValue = message;
    if (logable != null) {
        Map<String, String> map = getAvailableValues(message, logable);
        returnValue = resolveMessage(message, map);
    }
    return returnValue;
}
#end_block

#method_before
static Map<String, String> getAvailableValues(AuditLogableBase logable) {
    Map<String, String> returnValue = new HashMap<String, String>(logable.getCustomValues());
    Class<?> type = AuditLogableBase.class;
    for (PropertyInfo propertyInfo : TypeCompat.GetProperties(type)) {
        Object value = propertyInfo.GetValue(logable, null);
        String stringValue = value != null ? value.toString() : null;
        if (!returnValue.containsKey(propertyInfo.getName().toLowerCase())) {
            returnValue.put(propertyInfo.getName().toLowerCase(), stringValue);
        } else {
            log.errorFormat("Try to add duplicate audit log values with the same name. Type: {0}. Value: {1}", logable.getAuditLogTypeValue(), propertyInfo.getName().toLowerCase());
        }
    }
    List<String> attributes = AuditLogHelper.getCustomLogFields(logable.getClass(), true);
    if (attributes != null && attributes.size() > 0) {
        TypeCompat.getPropertyValues(logable, new HashSet<String>(attributes), returnValue);
    }
    return returnValue;
}
#method_after
private static Map<String, String> getAvailableValues(String message, AuditLogableBase logable) {
    Map<String, String> returnValue = new HashMap<String, String>(logable.getCustomValues());
    Set<String> attributes = resolvePlaceHolders(message);
    if (attributes != null && attributes.size() > 0) {
        TypeCompat.getPropertyValues(logable, attributes, returnValue);
    }
    return returnValue;
}
#end_block

#method_before
private void savePosixStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = (String) posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        connection = new StorageServerConnections();
        connection.setid(selectedItem.getStorage());
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#method_after
private void savePosixStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = (String) posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void saveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        connection = new StorageServerConnections();
        connection.setid(storageDomain.getStorage());
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#method_after
private void saveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isPathEditable(storageDomain)) {
            updatePath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void updatePath() {
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    Guid hostId = Guid.Empty;
    Guid storagePoolId = Guid.Empty;
    if (host != null) {
        hostId = host.getId();
        storagePoolId = host.getStoragePoolId();
    }
    IStorageModel storageModel = model.getSelectedItem();
    connection.setconnection(path);
    connection.setstorage_type(storageModel.getType());
    if (storageModel.getType().equals(StorageType.NFS)) {
        updateNFSProperties(storageModel);
    } else if (storageModel.getType().equals(StorageType.POSIXFS)) {
        updatePosixProperties(storageModel);
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, hostId);
    parameters.setStoragePoolId(storagePoolId);
    Frontend.RunAction(VdcActionType.UpdateStorageServerConnection, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#method_after
private void updatePath() {
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    Guid hostId = Guid.Empty;
    Guid storagePoolId = Guid.Empty;
    if (host != null) {
        hostId = host.getId();
        storagePoolId = host.getStoragePoolId();
    }
    IStorageModel storageModel = model.getSelectedItem();
    connection = new StorageServerConnections();
    connection.setid(storageDomain.getStorage());
    connection.setconnection(path);
    connection.setstorage_type(storageModel.getType());
    if (storageModel.getType().equals(StorageType.NFS)) {
        updateNFSProperties(storageModel);
    } else if (storageModel.getType().equals(StorageType.POSIXFS)) {
        updatePosixProperties(storageModel);
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, hostId);
    parameters.setStoragePoolId(storagePoolId);
    Frontend.RunAction(VdcActionType.UpdateStorageServerConnection, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    StorageServerConnections newConnectionDetails = getParameters().getStorageServerConnection();
    if (newConnectionDetails.getstorage_type() != StorageType.NFS && newConnectionDetails.getstorage_type() != StorageType.POSIXFS) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
    }
    // Check if the NFS path has a valid format
    if (newConnectionDetails.getstorage_type() == StorageType.NFS && !new NfsMountPointConstraint().isValid(newConnectionDetails.getconnection(), null)) {
        return failCanDoAction(VdcBllMessages.VALIDATION_STORAGE_CONNECTION_INVALID);
    }
    if (newConnectionDetails.getstorage_type() == StorageType.POSIXFS && (newConnectionDetails.getVfsType() == null || newConnectionDetails.getVfsType().isEmpty())) {
        return failCanDoAction(VdcBllMessages.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE);
    }
    Guid vdsmId = getParameters().getVdsId();
    if (vdsmId == null || vdsmId.equals(Guid.Empty)) {
        return failCanDoAction(VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
    }
    // Check if connection exists by id - otherwise there's nothing to update
    String connectionId = newConnectionDetails.getid();
    StorageServerConnections oldConnection = getStorageConnDao().get(connectionId);
    if (oldConnection == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST);
    }
    if (!newConnectionDetails.getstorage_type().equals(oldConnection.getstorage_type())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE);
    }
    if (!oldConnection.getconnection().equals(newConnectionDetails.getconnection())) {
        // Check that there is no other connection with the new suggested path
        List<StorageServerConnections> connections = getStorageConnDao().getAllForStorage(newConnectionDetails.getconnection());
        if (!connections.isEmpty()) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
        }
    }
    if (domains == null) {
        domains = getStorageDomainsByConnId(newConnectionDetails.getid());
    }
    if (domains.isEmpty()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    } else if (domains.size() == 1) {
        setStorageDomain(domains.get(0));
    } else {
        String domainNames = createDomainNamesList(domains);
        addCanDoActionMessage(String.format("$domainNames %1$s", domainNames));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS);
    }
    // Check that the storage domain is in proper state to be edited
    if (!isConnectionEditable(getStorageDomain())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
    }
    return super.canDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    StorageServerConnections newConnectionDetails = getParameters().getStorageServerConnection();
    if (newConnectionDetails.getstorage_type() != StorageType.NFS && newConnectionDetails.getstorage_type() != StorageType.POSIXFS) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
    }
    // Check if the NFS path has a valid format
    if (newConnectionDetails.getstorage_type() == StorageType.NFS && !new NfsMountPointConstraint().isValid(newConnectionDetails.getconnection(), null)) {
        return failCanDoAction(VdcBllMessages.VALIDATION_STORAGE_CONNECTION_INVALID);
    }
    if (newConnectionDetails.getstorage_type() == StorageType.POSIXFS && (StringUtils.isEmpty(newConnectionDetails.getVfsType()))) {
        return failCanDoAction(VdcBllMessages.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE);
    }
    Guid vdsmId = getParameters().getVdsId();
    if (vdsmId == null || vdsmId.equals(Guid.Empty)) {
        return failCanDoAction(VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
    }
    // Check if connection exists by id - otherwise there's nothing to update
    String connectionId = newConnectionDetails.getid();
    StorageServerConnections oldConnection = getStorageConnDao().get(connectionId);
    if (oldConnection == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST);
    }
    if (!newConnectionDetails.getstorage_type().equals(oldConnection.getstorage_type())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE);
    }
    if (!oldConnection.getconnection().equals(newConnectionDetails.getconnection())) {
        // Check that there is no other connection with the new suggested path
        List<StorageServerConnections> connections = getStorageConnDao().getAllForStorage(newConnectionDetails.getconnection());
        if (!connections.isEmpty()) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
        }
    }
    if (domains == null) {
        domains = getStorageDomainsByConnId(newConnectionDetails.getid());
    }
    if (domains.isEmpty()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    } else if (domains.size() == 1) {
        setStorageDomain(domains.get(0));
    } else {
        String domainNames = createDomainNamesList(domains);
        addCanDoActionMessage(String.format("$domainNames %1$s", domainNames));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS);
    }
    // Check that the storage domain is in proper state to be edited
    if (!isConnectionEditable(getStorageDomain())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
    }
    return super.canDoAction();
}
#end_block

#method_before
@Before
public void prepareParams() {
    Guid id = Guid.NewGuid();
    Guid id2 = Guid.NewGuid();
    newNFSConnection = createNFSConnection(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    newPosixConnection = createPosixConnection(id2, "multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    oldNFSConnection = createNFSConnection(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0);
    oldPosixConnection = createPosixConnection(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    prepareCommand(newNFSConnection);
}
#method_after
@Before
public void prepareParams() {
    oldNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0);
    oldPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    prepareCommand();
}
#end_block

#method_before
private void prepareCommand(StorageServerConnections connection) {
    parameters = new StorageServerConnectionParametersBase();
    parameters.setStorageServerConnection(connection);
    parameters.setVdsId(Guid.NewGuid());
    parameters.setStoragePoolId(Guid.NewGuid());
    command = spy(new UpdateStorageServerConnectionCommand<StorageServerConnectionParametersBase>(parameters));
    doReturn(storageConnDao).when(command).getStorageConnDao();
    doReturn(storageDomainDynamicDao).when(command).getStorageDomainDynamicDao();
    doReturn(storagePoolIsoMapDAO).when(command).getStoragePoolIsoMapDao();
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    when(storageConnDao.get(newPosixConnection.getid())).thenReturn(oldPosixConnection);
}
#method_after
private void prepareCommand() {
    parameters = new StorageServerConnectionParametersBase();
    parameters.setVdsId(Guid.NewGuid());
    parameters.setStoragePoolId(Guid.NewGuid());
    command = spy(new UpdateStorageServerConnectionCommand<StorageServerConnectionParametersBase>(parameters));
    doReturn(storageConnDao).when(command).getStorageConnDao();
    doReturn(storageDomainDynamicDao).when(command).getStorageDomainDynamicDao();
    doReturn(storagePoolIsoMapDAO).when(command).getStoragePoolIsoMapDao();
}
#end_block

#method_before
private StorageServerConnections createNFSConnection(Guid id, String connection, StorageType type, NfsVersion version, int timeout, int retrans) {
    StorageServerConnections connectionDetails = populateBasicConnectionDetails(id, connection, type);
    connectionDetails.setNfsVersion(version);
    connectionDetails.setNfsTimeo((short) timeout);
    connectionDetails.setNfsRetrans((short) retrans);
    return connectionDetails;
}
#method_after
private StorageServerConnections createNFSConnection(String connection, StorageType type, NfsVersion version, int timeout, int retrans) {
    Guid id = Guid.NewGuid();
    StorageServerConnections connectionDetails = populateBasicConnectionDetails(id, connection, type);
    connectionDetails.setNfsVersion(version);
    connectionDetails.setNfsTimeo((short) timeout);
    connectionDetails.setNfsRetrans((short) retrans);
    return connectionDetails;
}
#end_block

#method_before
private StorageServerConnections createPosixConnection(Guid id, String connection, StorageType type, String vfsType, String mountOptions) {
    StorageServerConnections connectionDetails = populateBasicConnectionDetails(id, connection, type);
    connectionDetails.setVfsType(vfsType);
    connectionDetails.setMountOptions(mountOptions);
    return connectionDetails;
}
#method_after
private StorageServerConnections createPosixConnection(String connection, StorageType type, String vfsType, String mountOptions) {
    Guid id = Guid.NewGuid();
    StorageServerConnections connectionDetails = populateBasicConnectionDetails(id, connection, type);
    connectionDetails.setVfsType(vfsType);
    connectionDetails.setMountOptions(mountOptions);
    return connectionDetails;
}
#end_block

#method_before
@Test
public void checkNoHost() {
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase();
    parameters.setStorageServerConnection(newNFSConnection);
    parameters.setVdsId(null);
    parameters.setStoragePoolId(Guid.NewGuid());
    UpdateStorageServerConnectionCommand command = spy(new UpdateStorageServerConnectionCommand<StorageServerConnectionParametersBase>(parameters));
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
}
#method_after
@Test
public void checkNoHost() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    parameters.setVdsId(null);
    parameters.setStorageServerConnection(newNFSConnection);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
}
#end_block

#method_before
@Test
public void checkEmptyIdHost() {
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase();
    parameters.setStorageServerConnection(newNFSConnection);
    parameters.setVdsId(Guid.Empty);
    parameters.setStoragePoolId(Guid.NewGuid());
    UpdateStorageServerConnectionCommand command = spy(new UpdateStorageServerConnectionCommand<StorageServerConnectionParametersBase>(parameters));
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
}
#method_after
@Test
public void checkEmptyIdHost() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    parameters.setVdsId(Guid.Empty);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
}
#end_block

#method_before
@Test
public void updateIScsiConnection() {
    newNFSConnection.setstorage_type(StorageType.ISCSI);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
}
#method_after
@Test
public void updateIScsiConnection() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.ISCSI, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
}
#end_block

#method_before
@Test
public void updateChangeConnectionType() {
    oldNFSConnection.setstorage_type(StorageType.ISCSI);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE);
}
#method_after
@Test
public void updateChangeConnectionType() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    oldNFSConnection.setstorage_type(StorageType.ISCSI);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE);
}
#end_block

#method_before
@Test
public void updateNonExistingConnection() {
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(null);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST);
}
#method_after
@Test
public void updateNonExistingConnection() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(null);
    parameters.setStorageServerConnection(newNFSConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST);
}
#end_block

#method_before
@Test
public void updateBadFormatPath() {
    newNFSConnection.setconnection("host/mydir");
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VALIDATION_STORAGE_CONNECTION_INVALID);
}
#method_after
@Test
public void updateBadFormatPath() {
    StorageServerConnections newNFSConnection = createNFSConnection("host/mydir", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VALIDATION_STORAGE_CONNECTION_INVALID);
}
#end_block

#method_before
@Test
public void updatePosixEmptyVFSType() {
    newPosixConnection.setVfsType(null);
    parameters.setStorageServerConnection(newPosixConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE);
}
#method_after
@Test
public void updatePosixEmptyVFSType() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, null, "timeo=30");
    parameters.setStorageServerConnection(newPosixConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE);
}
#end_block

#method_before
@Test
public void updateSeveralConnectionsWithSamePath() {
    List<StorageServerConnections> connections = new ArrayList<StorageServerConnections>();
    StorageServerConnections conn1 = new StorageServerConnections();
    conn1.setconnection(newNFSConnection.getconnection());
    conn1.setid(newNFSConnection.getid());
    StorageServerConnections conn2 = new StorageServerConnections();
    conn2.setconnection(newNFSConnection.getconnection());
    conn2.setid(Guid.NewGuid().toString());
    connections.add(conn1);
    connections.add(conn2);
    when(storageConnDao.getAllForStorage(newNFSConnection.getconnection())).thenReturn(connections);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
}
#method_after
@Test
public void updateSeveralConnectionsWithSamePath() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    List<StorageServerConnections> connections = new ArrayList<StorageServerConnections>();
    StorageServerConnections conn1 = new StorageServerConnections();
    conn1.setconnection(newNFSConnection.getconnection());
    conn1.setid(newNFSConnection.getid());
    StorageServerConnections conn2 = new StorageServerConnections();
    conn2.setconnection(newNFSConnection.getconnection());
    conn2.setid(Guid.NewGuid().toString());
    connections.add(conn1);
    connections.add(conn2);
    when(storageConnDao.getAllForStorage(newNFSConnection.getconnection())).thenReturn(connections);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
}
#end_block

#method_before
@Test
public void updateConnectionOfSeveralDomains() {
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newNFSConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Active);
    domain1.setStorageName("domain1");
    StorageDomain domain2 = new StorageDomain();
    domain2.setStorage(newNFSConnection.getconnection());
    domain2.setStatus(StorageDomainStatus.Maintenance);
    domain2.setStorageName("domain2");
    domains.add(domain1);
    domains.add(domain2);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    List<String> messages = CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS);
    assertTrue(messages.contains("$domainNames domain1,domain2"));
}
#method_after
@Test
public void updateConnectionOfSeveralDomains() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newNFSConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Active);
    domain1.setStorageName("domain1");
    StorageDomain domain2 = new StorageDomain();
    domain2.setStorage(newNFSConnection.getconnection());
    domain2.setStatus(StorageDomainStatus.Maintenance);
    domain2.setStorageName("domain2");
    domains.add(domain1);
    domains.add(domain2);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    List<String> messages = CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS);
    assertTrue(messages.contains("$domainNames domain1,domain2"));
}
#end_block

#method_before
@Test
public void updateConnectionOfActiveDomain() {
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newNFSConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Active);
    domains.add(domain1);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
}
#method_after
@Test
public void updateConnectionOfActiveDomain() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newNFSConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Active);
    domains.add(domain1);
    parameters.setStorageServerConnection(newNFSConnection);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
}
#end_block

#method_before
@Test
public void updateConnectionNoDomain() {
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
}
#method_after
@Test
public void updateConnectionNoDomain() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
}
#end_block

#method_before
@Test
public void succeedCanDoActionNFS() {
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newNFSConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Maintenance);
    domains.add(domain1);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#method_after
@Test
public void succeedCanDoActionNFS() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    parameters.setStorageServerConnection(newNFSConnection);
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newNFSConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Maintenance);
    domains.add(domain1);
    when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection);
    doReturn(domains).when(command).getStorageDomainsByConnId(newNFSConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#end_block

#method_before
@Test
public void succeedCanDoActionPosix() {
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newPosixConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Maintenance);
    domains.add(domain1);
    parameters.setStorageServerConnection(newPosixConnection);
    doReturn(domains).when(command).getStorageDomainsByConnId(newPosixConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#method_after
@Test
public void succeedCanDoActionPosix() {
    StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30");
    parameters.setStorageServerConnection(newPosixConnection);
    List<StorageDomain> domains = new ArrayList<StorageDomain>();
    StorageDomain domain1 = new StorageDomain();
    domain1.setStorage(newPosixConnection.getconnection());
    domain1.setStatus(StorageDomainStatus.Maintenance);
    domains.add(domain1);
    parameters.setStorageServerConnection(newPosixConnection);
    when(storageConnDao.get(newPosixConnection.getid())).thenReturn(oldPosixConnection);
    doReturn(domains).when(command).getStorageDomainsByConnId(newPosixConnection.getid());
    CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command);
}
#end_block

#method_before
@Test
public void succeedUpdateNFSCommand() {
    VDSReturnValue returnValueConnectSuccess = new VDSReturnValue();
    StoragePoolIsoMap map = new StoragePoolIsoMap();
    doReturn(map).when(command).getStoragePoolIsoMap();
    returnValueConnectSuccess.setSucceeded(true);
    StorageDomain domain = new StorageDomain();
    StorageDomainDynamic domainDynamic = new StorageDomainDynamic();
    domain.setStorageDynamicData(domainDynamic);
    returnValueConnectSuccess.setReturnValue(domain);
    doReturn(returnValueConnectSuccess).when(command).getStatsForDomain();
    doReturn(true).when(command).connectToStorage();
    doNothing().when(storageConnDao).update(newNFSConnection);
    doNothing().when(storageDomainDynamicDao).update(domainDynamic);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance);
    doNothing().when(command).disconnectFromStorage();
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#method_after
@Test
public void succeedUpdateNFSCommand() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    VDSReturnValue returnValueConnectSuccess = new VDSReturnValue();
    StoragePoolIsoMap map = new StoragePoolIsoMap();
    doReturn(map).when(command).getStoragePoolIsoMap();
    returnValueConnectSuccess.setSucceeded(true);
    StorageDomain domain = new StorageDomain();
    StorageDomainDynamic domainDynamic = new StorageDomainDynamic();
    domain.setStorageDynamicData(domainDynamic);
    returnValueConnectSuccess.setReturnValue(domain);
    doReturn(returnValueConnectSuccess).when(command).getStatsForDomain();
    doReturn(true).when(command).connectToStorage();
    doNothing().when(storageConnDao).update(newNFSConnection);
    doNothing().when(storageDomainDynamicDao).update(domainDynamic);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance);
    doNothing().when(command).disconnectFromStorage();
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, true);
}
#end_block

#method_before
@Test
public void failUpdateStats() {
    VDSReturnValue returnValueUpdate = new VDSReturnValue();
    returnValueUpdate.setSucceeded(false);
    StoragePoolIsoMap map = new StoragePoolIsoMap();
    doReturn(map).when(command).getStoragePoolIsoMap();
    doReturn(returnValueUpdate).when(command).getStatsForDomain();
    doReturn(true).when(command).connectToStorage();
    StorageDomainDynamic domainDynamic = new StorageDomainDynamic();
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance);
    doNothing().when(command).disconnectFromStorage();
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, false);
    verify(storageDomainDynamicDao, never()).update(domainDynamic);
    verify(storageConnDao, never()).update(newNFSConnection);
}
#method_after
@Test
public void failUpdateStats() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    VDSReturnValue returnValueUpdate = new VDSReturnValue();
    returnValueUpdate.setSucceeded(false);
    StoragePoolIsoMap map = new StoragePoolIsoMap();
    doReturn(map).when(command).getStoragePoolIsoMap();
    doReturn(returnValueUpdate).when(command).getStatsForDomain();
    doReturn(true).when(command).connectToStorage();
    StorageDomainDynamic domainDynamic = new StorageDomainDynamic();
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance);
    doNothing().when(command).disconnectFromStorage();
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, false);
    verify(storageDomainDynamicDao, never()).update(domainDynamic);
    verify(storageConnDao, never()).update(newNFSConnection);
}
#end_block

#method_before
@Test
public void failUpdateConnectToStorage() {
    VDSReturnValue returnValueUpdate = new VDSReturnValue();
    returnValueUpdate.setSucceeded(true);
    StoragePoolIsoMap map = new StoragePoolIsoMap();
    doReturn(map).when(command).getStoragePoolIsoMap();
    doReturn(returnValueUpdate).when(command).getStatsForDomain();
    doReturn(false).when(command).connectToStorage();
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, false);
    StorageDomainDynamic domainDynamic = new StorageDomainDynamic();
    verify(storageDomainDynamicDao, never()).update(domainDynamic);
    verify(storageConnDao, never()).update(newNFSConnection);
}
#method_after
@Test
public void failUpdateConnectToStorage() {
    StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0);
    VDSReturnValue returnValueUpdate = new VDSReturnValue();
    returnValueUpdate.setSucceeded(true);
    StoragePoolIsoMap map = new StoragePoolIsoMap();
    doReturn(map).when(command).getStoragePoolIsoMap();
    doReturn(returnValueUpdate).when(command).getStatsForDomain();
    doReturn(false).when(command).connectToStorage();
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance);
    command.executeCommand();
    CommandAssertUtils.checkSucceeded(command, false);
    StorageDomainDynamic domainDynamic = new StorageDomainDynamic();
    verify(storageDomainDynamicDao, never()).update(domainDynamic);
    verify(storageConnDao, never()).update(newNFSConnection);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    String bond = null;
    T params = getParameters();
    String address = params.getAddress();
    String subnet = StringUtils.isEmpty(params.getSubnet()) ? params.getNetwork().getSubnet() : params.getSubnet();
    String gateway = StringUtils.isEmpty(params.getGateway()) ? "" : params.getGateway();
    java.util.ArrayList<String> nics = new java.util.ArrayList<String>();
    nics.add(params.getInterface().getName());
    // check if bond...
    if (params.getInterface().getBonded() != null && params.getInterface().getBonded()) {
        nics.clear();
        bond = params.getInterface().getName();
        List<VdsNetworkInterface> interfaces = getDbFacade().getInterfaceDao().getAllInterfacesForVds(params.getVdsId());
        for (VdsNetworkInterface i : interfaces) {
            if (StringUtils.equals(i.getBondName(), params.getInterface().getName())) {
                nics.add(i.getName());
            }
        }
    }
    NetworkVdsmVDSCommandParameters parameters = new NetworkVdsmVDSCommandParameters(params.getVdsId(), logicalNetwork, bond, nics.toArray(new String[] {}), address, subnet, gateway, params.getBondingOptions(), params.getBootProtocol());
    VDSReturnValue retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddNetwork, parameters);
    if (retVal.getSucceeded()) {
        // update vds network data
        retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new VdsIdAndVdsVDSCommandParametersBase(params.getVdsId()));
        if (retVal.getSucceeded()) {
            Guid groupId = getVdsDAO().get(params.getVdsId()).getVdsGroupId();
            NetworkClusterHelper.setStatus(groupId, params.getNetwork());
            setSucceeded(true);
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    String bond = null;
    T params = getParameters();
    String address = params.getAddress();
    String subnet = StringUtils.isEmpty(params.getSubnet()) ? logicalNetwork.getSubnet() : params.getSubnet();
    String gateway = StringUtils.isEmpty(params.getGateway()) ? "" : params.getGateway();
    java.util.ArrayList<String> nics = new java.util.ArrayList<String>();
    nics.add(params.getInterface().getName());
    // check if bond...
    if (params.getInterface().getBonded() != null && params.getInterface().getBonded()) {
        nics.clear();
        bond = params.getInterface().getName();
        List<VdsNetworkInterface> interfaces = getDbFacade().getInterfaceDao().getAllInterfacesForVds(params.getVdsId());
        for (VdsNetworkInterface i : interfaces) {
            if (StringUtils.equals(i.getBondName(), params.getInterface().getName())) {
                nics.add(i.getName());
            }
        }
    }
    NetworkVdsmVDSCommandParameters parameters = new NetworkVdsmVDSCommandParameters(params.getVdsId(), logicalNetwork, bond, nics.toArray(new String[] {}), address, subnet, gateway, params.getBondingOptions(), params.getBootProtocol());
    VDSReturnValue retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddNetwork, parameters);
    if (retVal.getSucceeded()) {
        // update vds network data
        retVal = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new VdsIdAndVdsVDSCommandParametersBase(params.getVdsId()));
        if (retVal.getSucceeded()) {
            Guid groupId = getVdsDAO().get(params.getVdsId()).getVdsGroupId();
            NetworkClusterHelper.setStatus(groupId, logicalNetwork);
            setSucceeded(true);
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    T params = getParameters();
    List<VdsNetworkInterface> interfaces = getDbFacade().getInterfaceDao().getAllInterfacesForVds(params.getVdsId());
    // check that interface exists
    VdsNetworkInterface iface = Entities.entitiesByName(interfaces).get(params.getInterface().getName());
    if (iface == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
        return false;
    }
    // check if the parameters interface is part of a bond
    if (!StringUtils.isEmpty(params.getInterface().getBondName())) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_ALREADY_IN_BOND);
        return false;
    }
    Map<String, Network> networksByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVds().getVdsGroupId()));
    // check that the network exists in current cluster
    if (!networksByName.containsKey(params.getNetwork().getName())) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CLUSTER);
        return false;
    } else {
        logicalNetwork = networksByName.get(params.getNetwork().getName());
    }
    if (!networkConfigurationSupported(iface, networksByName)) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_ALREADY_HAVE_NETWORK);
        return false;
    }
    if (!NetworkUtils.getEngineNetwork().equals(params.getNetwork().getName()) && !StringUtils.isEmpty(params.getGateway())) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_ATTACH_ILLEGAL_GATEWAY);
        return false;
    }
    // check that the required not attached to other interface
    iface = Entities.interfacesByNetworkName(interfaces).get(params.getNetwork().getName());
    if (iface != null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_ALREADY_ATTACHED_TO_INTERFACE);
        return false;
    }
    // check address exists in static ip
    if (params.getBootProtocol() == NetworkBootProtocol.STATIC_IP) {
        if (StringUtils.isEmpty(params.getAddress())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_ADDR_MANDATORY_IN_STATIC_IP);
            return false;
        }
    }
    // check that nic have no vlans
    if (vmNetworkNonVlan(params.getNetwork())) {
        VdcQueryReturnValue ret = Backend.getInstance().runInternalQuery(VdcQueryType.GetAllChildVlanInterfaces, new InterfaceAndIdQueryParameters(params.getVdsId(), params.getInterface()));
        @SuppressWarnings("unchecked")
        ArrayList<VdsNetworkInterface> vlanIfaces = (ArrayList<VdsNetworkInterface>) ret.getReturnValue();
        if (vlanIfaces.size() > 0) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_CONNECT_TO_VLAN);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    T params = getParameters();
    List<VdsNetworkInterface> interfaces = getDbFacade().getInterfaceDao().getAllInterfacesForVds(params.getVdsId());
    // check that interface exists
    VdsNetworkInterface iface = Entities.entitiesByName(interfaces).get(params.getInterface().getName());
    if (iface == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS);
        return false;
    }
    // check if the parameters interface is part of a bond
    if (!StringUtils.isEmpty(params.getInterface().getBondName())) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_ALREADY_IN_BOND);
        return false;
    }
    Map<String, Network> networksByName = Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVds().getVdsGroupId()));
    // check that the network exists in current cluster
    if (!networksByName.containsKey(params.getNetwork().getName())) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CLUSTER);
        return false;
    } else {
        logicalNetwork = networksByName.get(params.getNetwork().getName());
    }
    if (!networkConfigurationSupported(iface, networksByName)) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_ALREADY_HAVE_NETWORK);
        return false;
    }
    if (!NetworkUtils.getEngineNetwork().equals(logicalNetwork.getName()) && !StringUtils.isEmpty(params.getGateway())) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_ATTACH_ILLEGAL_GATEWAY);
        return false;
    }
    // check that the required not attached to other interface
    iface = Entities.interfacesByNetworkName(interfaces).get(logicalNetwork.getName());
    if (iface != null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_ALREADY_ATTACHED_TO_INTERFACE);
        return false;
    }
    // check address exists in static ip
    if (params.getBootProtocol() == NetworkBootProtocol.STATIC_IP) {
        if (StringUtils.isEmpty(params.getAddress())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_ADDR_MANDATORY_IN_STATIC_IP);
            return false;
        }
    }
    // check that nic have no vlans
    if (vmNetworkNonVlan(logicalNetwork)) {
        VdcQueryReturnValue ret = Backend.getInstance().runInternalQuery(VdcQueryType.GetAllChildVlanInterfaces, new InterfaceAndIdQueryParameters(params.getVdsId(), params.getInterface()));
        @SuppressWarnings("unchecked")
        ArrayList<VdsNetworkInterface> vlanIfaces = (ArrayList<VdsNetworkInterface>) ret.getReturnValue();
        if (vlanIfaces.size() > 0) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_CONNECT_TO_VLAN);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private boolean networkConfigurationSupported(VdsNetworkInterface iface, Map<String, Network> networksByName) {
    if (StringUtils.isEmpty(iface.getNetworkName())) {
        return true;
    }
    Network attachedNetwork = networksByName.get(iface.getNetworkName());
    // Prevent attaching a VM network when a VM network is already attached
    if (vmNetworkNonVlan(attachedNetwork) || vmNetworkNonVlan(logicalNetwork)) {
        return false;
    }
    // Verify Non-VM networks are supported
    if (!FeatureSupported.nonVmNetwork(getVds().getVdsGroupCompatibilityVersion()) && (!attachedNetwork.isVmNetwork() || !logicalNetwork.isVmNetwork())) {
        return false;
    }
    // Prevent attaching non-VM network to a nic which already has an attached non-VM network
    if (NetworkUtils.isNonVmNonVlanNetwork(attachedNetwork) && NetworkUtils.isNonVmNonVlanNetwork(logicalNetwork)) {
        return false;
    }
    return true;
}
#method_after
private boolean networkConfigurationSupported(VdsNetworkInterface iface, Map<String, Network> networksByName) {
    if (StringUtils.isEmpty(iface.getNetworkName())) {
        return true;
    }
    Network attachedNetwork = networksByName.get(iface.getNetworkName());
    // Prevent attaching a network if unmanaged network is already attached to the nic
    if (attachedNetwork == null) {
        return false;
    }
    // Prevent attaching a VM network when a VM network is already attached
    if (vmNetworkNonVlan(attachedNetwork) || vmNetworkNonVlan(logicalNetwork)) {
        return false;
    }
    // Verify that only VM networks exists on the nic if the non-Vm network feature isn't supported by the cluster
    if (!FeatureSupported.nonVmNetwork(getVds().getVdsGroupCompatibilityVersion()) && (!iface.isBridged())) {
        return false;
    }
    // Prevent attaching non-VM network to a nic which already has an attached non-VM network
    if (NetworkUtils.isNonVmNonVlanNetwork(attachedNetwork) && NetworkUtils.isNonVmNonVlanNetwork(logicalNetwork)) {
        return false;
    }
    return true;
}
#end_block

#method_before
public static void getPropertyValues(Object obj, Set<String> properties, Map<String, String> values) {
    try {
        PropertyDescriptor[] pds = Introspector.getBeanInfo(obj.getClass()).getPropertyDescriptors();
        int hitCount = 0;
        for (PropertyDescriptor pd : pds) {
            String propertyName = pd.getName().toLowerCase();
            if (properties.contains(propertyName) && !values.containsKey(propertyName)) {
                Object value = null;
                hitCount++;
                try {
                    value = pd.getReadMethod().invoke(obj);
                    String stringValue = value != null ? value.toString() : null;
                    values.put(propertyName, stringValue);
                } catch (Exception e) {
                    log.warn("Unable to get value of property: " + pd.getDisplayName() + " for class " + obj.getClass().getName());
                }
                if (hitCount == properties.size()) {
                    break;
                }
            }
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
#method_after
public static void getPropertyValues(Object obj, Set<String> properties, Map<String, String> values) {
    try {
        PropertyDescriptor[] pds = Introspector.getBeanInfo(obj.getClass()).getPropertyDescriptors();
        int hitCount = 0;
        for (PropertyDescriptor pd : pds) {
            String propertyName = pd.getName().toLowerCase();
            if (properties.contains(propertyName)) {
                Object value = null;
                hitCount++;
                if (!values.containsKey(propertyName)) {
                    try {
                        value = pd.getReadMethod().invoke(obj);
                        String stringValue = value != null ? value.toString() : null;
                        values.put(propertyName, stringValue);
                    } catch (Exception e) {
                        log.warn("Unable to get value of property: " + pd.getDisplayName() + " for class " + obj.getClass().getName());
                    }
                }
                if (hitCount == properties.size()) {
                    break;
                }
            }
        }
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    updateVdsData();
    if (NeedToUpdateVdsBroker()) {
        InitializeVds();
    }
    if (getParameters().getInstallVds()) {
        InstallVdsParameters tempVar = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        tempVar.setIsReinstallOrUpgrade(getParameters().getIsReinstallOrUpgrade());
        tempVar.setoVirtIsoFile(getParameters().getoVirtIsoFile());
        tempVar.setOverrideFirewall(getParameters().getOverrideFirewall());
        tempVar.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        ArrayList<VdcReturnValueBase> resultList = Backend.getInstance().runInternalMultipleActions(VdcActionType.InstallVds, new ArrayList<VdcActionParametersBase>(Arrays.asList(tempVar)));
        // status, therefore needed to fail the command to revert the status.
        if (!resultList.isEmpty()) {
            VdcReturnValueBase vdcReturnValueBase = resultList.get(0);
            if (vdcReturnValueBase != null && !vdcReturnValueBase.getCanDoAction()) {
                ArrayList<String> canDoActionMessages = vdcReturnValueBase.getCanDoActionMessages();
                if (!canDoActionMessages.isEmpty()) {
                    // add can do action messages to return value so error messages
                    // are returned back to the client
                    getReturnValue().getCanDoActionMessages().addAll(canDoActionMessages);
                    log.errorFormat("Installation/upgrade of Host {0},{1} failed due to: {2} ", getVdsId(), getVdsName(), StringUtils.join(Backend.getInstance().getErrorsTranslator().TranslateErrorText(canDoActionMessages), ","));
                }
                // set can do action to false so can do action messages are
                // returned back to client
                getReturnValue().setCanDoAction(false);
                setSucceeded(false);
                // add old vds dynamic data to compensation context. This
                // way the status will revert back to what it was before
                // starting installation process
                getCompensationContext().snapshotEntity(_oldVds.getDynamicData());
                getCompensationContext().stateChanged();
                return;
            }
        }
    }
    // set clusters network to be operational (if needed)
    if (_oldVds.getStatus() == VDSStatus.Up) {
        List<NetworkCluster> networkClusters = DbFacade.getInstance().getNetworkClusterDao().getAllForCluster(_oldVds.getVdsGroupId());
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(_oldVds.getVdsGroupId());
        for (NetworkCluster item : networkClusters) {
            for (Network net : networks) {
                if (net.getId().equals(item.getNetworkId())) {
                    NetworkClusterHelper.setStatus(_oldVds.getVdsGroupId(), net);
                }
            }
        }
    }
    AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
    TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    updateVdsData();
    if (NeedToUpdateVdsBroker()) {
        InitializeVds();
    }
    if (getParameters().getInstallVds()) {
        InstallVdsParameters tempVar = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        tempVar.setIsReinstallOrUpgrade(getParameters().getIsReinstallOrUpgrade());
        tempVar.setoVirtIsoFile(getParameters().getoVirtIsoFile());
        tempVar.setOverrideFirewall(getParameters().getOverrideFirewall());
        tempVar.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        ArrayList<VdcReturnValueBase> resultList = Backend.getInstance().runInternalMultipleActions(VdcActionType.InstallVds, new ArrayList<VdcActionParametersBase>(Arrays.asList(tempVar)));
        // status, therefore needed to fail the command to revert the status.
        if (!resultList.isEmpty()) {
            VdcReturnValueBase vdcReturnValueBase = resultList.get(0);
            if (vdcReturnValueBase != null && !vdcReturnValueBase.getCanDoAction()) {
                ArrayList<String> canDoActionMessages = vdcReturnValueBase.getCanDoActionMessages();
                if (!canDoActionMessages.isEmpty()) {
                    // add can do action messages to return value so error messages
                    // are returned back to the client
                    getReturnValue().getCanDoActionMessages().addAll(canDoActionMessages);
                    log.errorFormat("Installation/upgrade of Host {0},{1} failed due to: {2} ", getVdsId(), getVdsName(), StringUtils.join(Backend.getInstance().getErrorsTranslator().TranslateErrorText(canDoActionMessages), ","));
                }
                // set can do action to false so can do action messages are
                // returned back to client
                getReturnValue().setCanDoAction(false);
                setSucceeded(false);
                // add old vds dynamic data to compensation context. This
                // way the status will revert back to what it was before
                // starting installation process
                getCompensationContext().snapshotEntityStatus(_oldVds.getDynamicData(), _oldVds.getDynamicData().getstatus());
                getCompensationContext().stateChanged();
                return;
            }
        }
    }
    // set clusters network to be operational (if needed)
    if (_oldVds.getStatus() == VDSStatus.Up) {
        List<NetworkCluster> networkClusters = DbFacade.getInstance().getNetworkClusterDao().getAllForCluster(_oldVds.getVdsGroupId());
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(_oldVds.getVdsGroupId());
        for (NetworkCluster item : networkClusters) {
            for (Network net : networks) {
                if (net.getId().equals(item.getNetworkId())) {
                    NetworkClusterHelper.setStatus(_oldVds.getVdsGroupId(), net);
                }
            }
        }
    }
    AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
    TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
    setSucceeded(true);
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmIdFromSnapshot(), VdcObjectType.VM, getActionType().getActionGroup()));
    addPermissionSubjectForCustomProperties(permissionList);
    return permissionList;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmIdFromSnapshot(), VdcObjectType.VM, getActionType().getActionGroup()));
    addPermissionSubjectForAdminLevelProperties(permissionList);
    return permissionList;
}
#end_block

#method_before
@Override
protected void copyVmDevices() {
    ArrayList<VmDevice> devices = new ArrayList<VmDevice>(vmFromConfiguration.getVmUnamagedDeviceList());
    devices.addAll(vmFromConfiguration.getManagedVmDeviceMap().values());
    VmDeviceUtils.copyVmDevices(getVmIdFromSnapshot(), getVmId(), vmFromConfiguration, vmFromConfiguration.getStaticData(), true, devices, newDiskImages, _vmInterfaces);
}
#method_after
@Override
protected void copyVmDevices() {
    List<VmDevice> devices = new ArrayList<VmDevice>(vmFromConfiguration.getVmUnamagedDeviceList());
    devices.addAll(vmFromConfiguration.getManagedVmDeviceMap().values());
    VmDeviceUtils.copyVmDevices(getVmIdFromSnapshot(), getVmId(), vmFromConfiguration, vmFromConfiguration.getStaticData(), true, devices, newDiskImages, _vmInterfaces);
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    if (getSourceVmFromDb() == null) {
        return null;
    }
    return Collections.singletonMap(getSourceVmFromDb().getId().toString(), LockMessagesMatchUtil.VM);
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    if (getSourceVmFromDb() == null) {
        return null;
    }
    return Collections.singletonMap(getSourceVmFromDb().getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
}
#end_block

#method_before
public static void copyVmDevices(Guid srcId, Guid dstId, VM vm, VmBase vmBase, boolean isVm, List<VmDevice> devices, List<DiskImage> disks, List<VmNetworkInterface> ifaces) {
    Guid id;
    int diskCount = 0;
    int ifaceCount = 0;
    String isoPath = vmBase.getIsoPath();
    // indicates that VM should have CD either from its own (iso_path) or from the snapshot it was cloned from.
    boolean shouldHaveCD = StringUtils.isNotEmpty(isoPath);
    // indicates if VM has already a non empty CD in DB
    boolean hasAlreadyCD = (!(DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vmBase.getId(), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName())).isEmpty());
    boolean addCD = (!hasAlreadyCD && shouldHaveCD);
    for (VmDevice device : devices) {
        id = Guid.NewGuid();
        Map<String, Object> specParams = new HashMap<String, Object>();
        if (srcId.equals(Guid.Empty)) {
            // add CD if not exists
            if (addCD) {
                setCdPath(specParams, "", isoPath);
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), dstId), VmDeviceType.DISK, VmDeviceType.CDROM, specParams, true, true);
            }
            // updating USB slots
            updateUSBSlots(null, vmBase);
            // add mem balloon if defined
            updateMemoryBalloon(null, vmBase, vm.isBalloonEnabled());
        }
        if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.DISK.getName().equals(device.getDevice())) {
            if (diskCount < disks.size()) {
                id = (disks.get(diskCount++)).getId();
            }
        } else if (VmDeviceType.INTERFACE.getName().equals(device.getType())) {
            if (ifaceCount < ifaces.size()) {
                id = ifaces.get(ifaceCount++).getId();
            }
        } else if (VmDeviceType.CONTROLLER.getName().equals(device.getType()) && VmDeviceType.USB.getName().equals(device.getDevice())) {
            specParams = device.getSpecParams();
        } else if (VmDeviceType.VIDEO.getName().equals(device.getType())) {
            if (isVm) {
                // to the new VMStatic params
                continue;
            } else {
                specParams.putAll(getMemExpr(vmBase.getNumOfMonitors()));
            }
        } else if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.CDROM.getName().equals(device.getDevice())) {
            // check here is source VM had CD (Vm from snapshot)
            String srcCdPath = (String) device.getSpecParams().get(VdsProperties.Path);
            shouldHaveCD = (!StringUtils.isEmpty(srcCdPath) || shouldHaveCD);
            if (!hasAlreadyCD && shouldHaveCD) {
                setCdPath(specParams, srcCdPath, isoPath);
            } else {
                // CD already exists
                continue;
            }
        } else if (VmDeviceType.BALLOON.getName().equals(device.getType())) {
            specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        } else if (VmDeviceType.SMARTCARD.getName().equals(device.getType())) {
            specParams = new SmartcardSpecParams();
        }
        device.setId(new VmDeviceId(id, dstId));
        device.setSpecParams(specParams);
        dao.save(device);
    }
    // if VM does not has CD, add an empty CD
    if (!shouldHaveCD) {
        addEmptyCD(dstId);
    }
    if (isVm) {
        // update devices boot order
        updateBootOrderInVmDeviceAndStoreToDB(vmBase);
        // create sound card for a desktop VM if not exists
        if (vmBase.getVmType() == VmType.Desktop) {
            List<VmDevice> list = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vmBase.getId(), VmDeviceType.SOUND.getName());
            if (list.size() == 0) {
                String soundDevice = VmInfoBuilderBase.getSoundDevice(vm.getStaticData(), vm.getVdsGroupCompatibilityVersion());
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), vmBase.getId()), VmDeviceType.SOUND, VmDeviceType.getSoundDeviceType(soundDevice), new HashMap<String, Object>(), true, true);
            }
        }
        int numOfMonitors = (vm.getDisplayType() == DisplayType.vnc) ? Math.max(1, vm.getNumOfMonitors()) : vm.getNumOfMonitors();
        // create Video device. Multiple if display type is spice
        for (int i = 0; i < numOfMonitors; i++) {
            addVideoDevice(vm);
        }
    }
}
#method_after
public static void copyVmDevices(Guid srcId, Guid dstId, VM vm, VmBase vmBase, boolean isVm, List<VmDevice> devicesDataToUse, List<DiskImage> disks, List<VmNetworkInterface> ifaces) {
    Guid id;
    int diskCount = 0;
    int ifaceCount = 0;
    String isoPath = vmBase.getIsoPath();
    // indicates that VM should have CD either from its own (iso_path) or from the snapshot it was cloned from.
    boolean shouldHaveCD = StringUtils.isNotEmpty(isoPath);
    // indicates if VM has already a non empty CD in DB
    boolean hasAlreadyCD = (!(DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vmBase.getId(), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName())).isEmpty());
    boolean addCD = (!hasAlreadyCD && shouldHaveCD);
    for (VmDevice device : devicesDataToUse) {
        id = Guid.NewGuid();
        Map<String, Object> specParams = new HashMap<String, Object>();
        if (srcId.equals(Guid.Empty)) {
            // add CD if not exists
            if (addCD) {
                setCdPath(specParams, "", isoPath);
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), dstId), VmDeviceType.DISK, VmDeviceType.CDROM, specParams, true, true);
            }
            // updating USB slots
            updateUSBSlots(null, vmBase);
            // add mem balloon if defined
            updateMemoryBalloon(null, vmBase, vm.isBalloonEnabled());
        }
        if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.DISK.getName().equals(device.getDevice())) {
            if (diskCount < disks.size()) {
                id = (disks.get(diskCount++)).getId();
            }
        } else if (VmDeviceType.INTERFACE.getName().equals(device.getType())) {
            if (ifaceCount < ifaces.size()) {
                id = ifaces.get(ifaceCount++).getId();
            }
        } else if (VmDeviceType.CONTROLLER.getName().equals(device.getType()) && VmDeviceType.USB.getName().equals(device.getDevice())) {
            specParams = device.getSpecParams();
        } else if (VmDeviceType.VIDEO.getName().equals(device.getType())) {
            if (isVm) {
                // to the new VMStatic params
                continue;
            } else {
                specParams.putAll(getMemExpr(vmBase.getNumOfMonitors()));
            }
        } else if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.CDROM.getName().equals(device.getDevice())) {
            // check here is source VM had CD (Vm from snapshot)
            String srcCdPath = (String) device.getSpecParams().get(VdsProperties.Path);
            shouldHaveCD = (!StringUtils.isEmpty(srcCdPath) || shouldHaveCD);
            if (!hasAlreadyCD && shouldHaveCD) {
                setCdPath(specParams, srcCdPath, isoPath);
            } else {
                // CD already exists
                continue;
            }
        } else if (VmDeviceType.BALLOON.getName().equals(device.getType())) {
            specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        } else if (VmDeviceType.SMARTCARD.getName().equals(device.getType())) {
            specParams = new SmartcardSpecParams();
        }
        device.setId(new VmDeviceId(id, dstId));
        device.setSpecParams(specParams);
        dao.save(device);
    }
    // if VM does not has CD, add an empty CD
    if (!shouldHaveCD) {
        addEmptyCD(dstId);
    }
    if (isVm) {
        // update devices boot order
        updateBootOrderInVmDeviceAndStoreToDB(vmBase);
        // create sound card for a desktop VM if not exists
        if (vmBase.getVmType() == VmType.Desktop) {
            List<VmDevice> list = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vmBase.getId(), VmDeviceType.SOUND.getName());
            if (list.size() == 0) {
                String soundDevice = VmInfoBuilderBase.getSoundDevice(vm.getStaticData(), vm.getVdsGroupCompatibilityVersion());
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), vmBase.getId()), VmDeviceType.SOUND, VmDeviceType.getSoundDeviceType(soundDevice), new HashMap<String, Object>(), true, true);
            }
        }
        int numOfMonitors = (vm.getDisplayType() == DisplayType.vnc) ? Math.max(1, vm.getNumOfMonitors()) : vm.getNumOfMonitors();
        // create Video device. Multiple if display type is spice
        for (int i = 0; i < numOfMonitors; i++) {
            addVideoDevice(vm);
        }
    }
}
#end_block

#method_before
private static <T extends VmBase> void addImportedInterfaces(T entity, List<VmDevice> vmDeviceToUpdate) {
    final Guid id = entity.getId();
    for (VmNetworkInterface iface : entity.getInterfaces()) {
        Guid deviceId = iface.getId();
        VmDevice vmDevice = addManagedDevice(new VmDeviceId(deviceId, id), VmDeviceType.INTERFACE, VmDeviceType.BRIDGE, null, true, false, getAddress(entity, id));
        updateVmDevice(entity, vmDevice, deviceId, vmDeviceToUpdate);
    }
}
#method_after
private static <T extends VmBase> void addImportedInterfaces(T entity, List<VmDevice> vmDeviceToUpdate) {
    final Guid id = entity.getId();
    for (VmNetworkInterface iface : entity.getInterfaces()) {
        Guid deviceId = iface.getId();
        VmDevice vmDevice = addManagedDevice(new VmDeviceId(deviceId, id), VmDeviceType.INTERFACE, VmDeviceType.BRIDGE, null, true, false, getAddress(entity, id));
        VmDevice exportedDevice = entity.getManagedDeviceMap().get(deviceId);
        if (exportedDevice == null) {
            entity.getManagedDeviceMap().put(deviceId, vmDevice);
            exportedDevice = vmDevice;
        }
        exportedDevice.setIsPlugged(exportedDevice.getIsPlugged() && canPlugInterface(iface));
        updateVmDevice(entity, vmDevice, deviceId, vmDeviceToUpdate);
    }
}
#end_block

#method_before
private boolean checkCanPerformPlugUnPlugDisk() {
    boolean returnValue = true;
    if (getVm().getStatus() == VMStatus.Up || getVm().getStatus() == VMStatus.Paused) {
        setVdsId(getVm().getRunOnVds().getValue());
        returnValue = isHotPlugSupported() && isOsSupportingHotPlug() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    if (returnValue) {
        oldVmDevice = getVmDeviceDao().get(new VmDeviceId(disk.getId(), getVmId()));
        if (getPlugAction() == VDSCommandType.HotPlugDisk && oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED);
        }
        if (getPlugAction() == VDSCommandType.HotUnPlugDisk && !oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED);
        }
    }
    return returnValue;
}
#method_after
private boolean checkCanPerformPlugUnPlugDisk() {
    boolean returnValue = true;
    if (getVm().getStatus().isUpOrPaused()) {
        setVdsId(getVm().getRunOnVds().getValue());
        returnValue = isHotPlugSupported() && isOsSupportingHotPlug() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    if (returnValue) {
        oldVmDevice = getVmDeviceDao().get(new VmDeviceId(disk.getId(), getVmId()));
        if (getPlugAction() == VDSCommandType.HotPlugDisk && oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED);
        }
        if (getPlugAction() == VDSCommandType.HotUnPlugDisk && !oldVmDevice.getIsPlugged()) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED);
        }
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    if (getVm().getStatus() == VMStatus.Up || getVm().getStatus() == VMStatus.Paused) {
        performPlugCommand(getPlugAction(), disk, oldVmDevice);
    }
    // Update boot order and isPlugged fields
    final List<VmDevice> devices = VmDeviceUtils.updateBootOrderInVmDevice(getVm().getStaticData());
    for (VmDevice device : devices) {
        if (device.getDeviceId().equals(oldVmDevice.getDeviceId())) {
            device.setIsPlugged(!oldVmDevice.getIsPlugged());
            break;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            getVmStaticDAO().incrementDbGeneration(getVm().getId());
            getVmDeviceDao().updateAll("UpdateVmDeviceForHotPlugDisk", devices);
            VmHandler.updateDisksFromDb(getVm());
            return null;
        }
    });
    setSucceeded(true);
}
#method_after
@Override
protected void executeVmCommand() {
    if (getVm().getStatus().isUpOrPaused()) {
        performPlugCommand(getPlugAction(), disk, oldVmDevice);
    }
    // Update boot order and isPlugged fields
    final List<VmDevice> devices = VmDeviceUtils.updateBootOrderInVmDevice(getVm().getStaticData());
    for (VmDevice device : devices) {
        if (device.getDeviceId().equals(oldVmDevice.getDeviceId())) {
            device.setIsPlugged(!oldVmDevice.getIsPlugged());
            break;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            getVmStaticDAO().incrementDbGeneration(getVm().getId());
            getVmDeviceDao().updateAll("UpdateVmDeviceForHotPlugDisk", devices);
            VmHandler.updateDisksFromDb(getVm());
            return null;
        }
    });
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    return Collections.singletonMap(getVmId().toString(), LockMessagesMatchUtil.VM);
}
#method_after
@Override
protected Map<String, Pair<String, String>> getSharedLocks() {
    return Collections.singletonMap(getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
}
#end_block

#method_before
protected boolean isDiskCanBeAddedToVm(Disk diskInfo) {
    boolean returnValue = true;
    updateDisksFromDb();
    if (returnValue && diskInfo.isBoot()) {
        for (Disk disk : getVm().getDiskMap().values()) {
            if (disk.isBoot()) {
                returnValue = false;
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_BOOT_IN_USE);
                getReturnValue().getCanDoActionMessages().add(String.format("$DiskName %1$s", disk.getDiskAlias()));
                break;
            }
        }
    }
    return returnValue;
}
#method_after
protected boolean isDiskCanBeAddedToVm(Disk diskInfo, VM vm) {
    if (diskInfo.isBoot()) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.isBoot()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_BOOT_IN_USE);
                getReturnValue().getCanDoActionMessages().add(String.format("$DiskName %1$s", disk.getDiskAlias()));
                getReturnValue().getCanDoActionMessages().add(String.format("$VmName %1$s", vm.getName()));
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue = true;
    if (disk == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
        return false;
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.ILLEGAL) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
        return false;
    }
    retValue = acquireLockInternal();
    if (retValue && isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
        addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", disk.getDiskAlias()));
        return false;
    }
    retValue = retValue && isVmExist() && isVmInUpPausedDownStatus() && isDiskCanBeAddedToVm(disk) && isDiskPassPciAndIdeLimit(disk);
    if (retValue && getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (retValue && disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (retValue && !disk.isShareable() && disk.getNumberOfVms() > 0) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (retValue && isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getStorageIds().get(0), getVm().getStoragePoolId())) == null) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (retValue && isImageDisk) {
        retValue = validate(new SnapshotsValidator().vmNotDuringSnapshot(getVm().getId()));
    }
    if (retValue && getParameters().isPlugUnPlug() && getVm().getStatus() != VMStatus.Down) {
        retValue = isOsSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    if (disk == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.ILLEGAL) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
    }
    if (isImageDisk && ((DiskImage) disk).getImageStatus() == ImageStatus.LOCKED) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
        addCanDoActionMessage(String.format("$%1$s %2$s", "diskAliases", disk.getDiskAlias()));
        return false;
    }
    if (!isVmExist() || !isVmInUpPausedDownStatus()) {
        return false;
    }
    updateDisksFromDb();
    if (!isDiskCanBeAddedToVm(disk, getVm()) || !isDiskPassPciAndIdeLimit(disk)) {
        return false;
    }
    if (getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
        return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (!disk.isShareable() && disk.getNumberOfVms() > 0) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getStorageIds().get(0), getVm().getStoragePoolId())) == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (isImageDisk && !validate(new SnapshotsValidator().vmNotDuringSnapshot(getVm().getId()))) {
        return false;
    }
    if (getParameters().isPlugUnPlug() && getVm().getStatus() != VMStatus.Down) {
        return isOsSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return true;
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> locks = new HashMap<String, Pair<String, String>>();
    if (!disk.isShareable()) {
        locks.put(disk.getId().toString(), LockMessagesMatchUtil.DISK);
    }
    if (disk.isBoot()) {
        locks.put(getParameters().getVmId().toString(), LockMessagesMatchUtil.VM_DISK_BOOT);
    }
    return locks;
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> locks = new HashMap<String, Pair<String, String>>();
    if (!disk.isShareable()) {
        locks.put(disk.getId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    if (disk.isBoot()) {
        locks.put(getParameters().getVmId().toString(), LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_BOOT, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED));
    }
    return locks;
}
#end_block

#method_before
private void editConsole() {
    if (getWindow() != null) {
        return;
    }
    ConsolePopupModel model = new ConsolePopupModel();
    model.setModel(this);
    // $NON-NLS-1$
    model.setHashName("editConsole");
    setWindow(model);
    // $NON-NLS-1$
    UICommand saveCommand = new UICommand("OnEditConsoleSave", this);
    saveCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    saveCommand.setIsDefault(true);
    model.getCommands().add(saveCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#method_after
private void editConsole() {
    if (getWindow() != null) {
        return;
    }
    ConsolePopupModel model = new ConsolePopupModel();
    model.setConsoleContext(ConsoleContext.WA);
    model.setModel(this);
    // $NON-NLS-1$
    model.setHashName("editConsole");
    setWindow(model);
    // $NON-NLS-1$
    UICommand saveCommand = new UICommand("OnEditConsoleSave", this);
    saveCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    saveCommand.setIsDefault(true);
    model.getCommands().add(saveCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
}
#end_block

#method_before
@Override
protected void OnSelectedItemChanged() {
    super.OnSelectedItemChanged();
    UpdateActionAvailability();
    UpdateConsoleModels();
}
#method_after
@Override
protected void OnSelectedItemChanged() {
    super.OnSelectedItemChanged();
    updateConsoleModels();
    UpdateActionAvailability();
}
#end_block

#method_before
@Override
protected void SelectedItemsChanged() {
    super.SelectedItemsChanged();
    UpdateActionAvailability();
    UpdateConsoleModels();
}
#method_after
@Override
protected void SelectedItemsChanged() {
    super.SelectedItemsChanged();
    updateConsoleModels();
    UpdateActionAvailability();
}
#end_block

#method_before
@Override
protected void SelectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.SelectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.PropertyName.equals("status")) {
        UpdateActionAvailability();
    } else if (// $NON-NLS-1$
    e.PropertyName.equals("display_type")) {
        UpdateConsoleModels();
    }
}
#method_after
@Override
protected void SelectedItemPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.SelectedItemPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.PropertyName.equals("status")) {
        UpdateActionAvailability();
    } else if (// $NON-NLS-1$
    e.PropertyName.equals("display_type")) {
        updateConsoleModels();
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getFireConsoleConnectEventCommand().setIsExecutionAllowed(items.size() == 1);
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
    this.checkConsoleAvailabilityEvent.raise(this, EventArgs.Empty);
}
#method_after
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
    getConsoleConnectCommand().setIsExecutionAllowed(isConsoleCommandsExecutionAllowed());
    getEditConsoleCommand().setIsExecutionAllowed(isConsoleCommandsExecutionAllowed());
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditConsoleCommand()) {
        editConsole();
    } else if (command == getFireConsoleConnectEventCommand()) {
        fireConsoleConnectEvent();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (// $NON-NLS-1$
    command.getName().equals("closeVncInfo") || "OnEditConsoleSave".equals(command.getName())) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditConsoleCommand()) {
        editConsole();
    } else if (command == getConsoleConnectCommand()) {
        connectToConsole();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (// $NON-NLS-1$
    command.getName().equals("closeVncInfo") || "OnEditConsoleSave".equals(command.getName())) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
@Override
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    return consoleModelsCache.resolveSelectedProtocol(item);
}
#method_after
@Override
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    return consoleModelsCache.resolveUserSelectedProtocol(item);
}
#end_block

#method_before
private void updateDefaultSelectedConsoleProtocol(VM vm) {
    // for wind8+ guests the RDP is selected, for all other OS the spice
    if (vm.getId() == null) {
        return;
    }
    ArrayList<ConsoleModel> cachedModels = cachedConsoleModels.get(vm.getId());
    if (cachedModels == null) {
        return;
    }
    deselectUserSelectedProtocol(vm.getId());
    boolean isWindowsExplorer = parentModel.getConfigurator().isClientWindownsExplorer();
    if (vmOsTypeWithoutSpiceDriverSupport.contains(vm.getOs()) && isWindowsExplorer) {
        cachedModels.get(RDP_INDEX).setUserSelected(true);
    } else {
        determineConsoleModelFromVm(vm, cachedModels).setUserSelected(true);
    }
    setupSelectionContext(vm);
}
#method_after
private void updateDefaultSelectedConsoleProtocol(VM vm) {
    // for wind8+ guests the RDP is selected, for all other OS the spice
    if (vm.getId() == null) {
        return;
    }
    ArrayList<ConsoleModel> cachedModels = cachedConsoleModels.get(vm.getId());
    if (cachedModels == null) {
        return;
    }
    deselectUserSelectedProtocol(vm.getId());
    boolean isWindowsExplorer = parentModel.getConfigurator().isClientWindowsExplorer();
    if (vmOsTypeWithoutSpiceDriverSupport.contains(vm.getOs()) && isWindowsExplorer) {
        cachedModels.get(RDP_INDEX).setUserSelected(true);
    } else {
        determineConsoleModelFromVm(vm, cachedModels).setUserSelected(true);
    }
    setupSelectionContext(vm);
}
#end_block

#method_before
private void setupSelectionContext(VM vm) {
    for (ConsoleModel model : cachedConsoleModels.get(vm.getId())) {
        model.setSelectionContext(new ConsoleSelectionContext(vm.getVmOs(), vm.getDefaultDisplayType()));
    }
}
#method_after
private void setupSelectionContext(VM vm) {
    for (ConsoleModel model : cachedConsoleModels.get(vm.getId())) {
        DisplayType vmDisplay = vm.isRunningOrPaused() ? vm.getDisplayType() : vm.getDefaultDisplayType();
        model.setSelectionContext(new ConsoleSelectionContext(vm.getVmOs(), vmDisplay));
    }
}
#end_block

#method_before
private boolean selectionContextChanged(VM vm) {
    ConsoleSelectionContext newContext = new ConsoleSelectionContext(vm.getVmOs(), vm.getDefaultDisplayType());
    ConsoleModel selectedConsole = resolveSelectedConsoleModel(vm.getId());
    if (selectedConsole == null) {
        return true;
    }
    return !newContext.equals(selectedConsole.getSelectionContext());
}
#method_after
private boolean selectionContextChanged(VM vm) {
    DisplayType vmDisplay = vm.isRunningOrPaused() ? vm.getDisplayType() : vm.getDefaultDisplayType();
    ConsoleSelectionContext newContext = new ConsoleSelectionContext(vm.getVmOs(), vmDisplay);
    ConsoleModel selectedConsole = resolveUserSelectedConsoleModel(vm.getId());
    if (selectedConsole == null) {
        return true;
    }
    return !newContext.equals(selectedConsole.getSelectionContext());
}
#end_block

#method_before
private ConsoleModel determineConsoleModelFromVm(VM vm, ArrayList<ConsoleModel> cachedModels) {
    return vm.getDefaultDisplayType() == DisplayType.vnc ? cachedModels.get(VNC_INDEX) : cachedModels.get(SPICE_INDEX);
}
#method_after
private ConsoleModel determineConsoleModelFromVm(VM vm, ArrayList<ConsoleModel> cachedModels) {
    DisplayType vmDisplayType = vm.isRunningOrPaused() ? vm.getDisplayType() : vm.getDefaultDisplayType();
    return cachedModels.get(vmDisplayType == DisplayType.vnc ? VNC_INDEX : SPICE_INDEX);
}
#end_block

#method_before
public void updateUseHostCpuAvailability() {
    if (MigrationSupport.PINNED_TO_HOST == getModel().getMigrationMode().getSelectedItem() || (MigrationSupport.IMPLICITLY_NON_MIGRATABLE == getModel().getMigrationMode().getSelectedItem() && Boolean.TRUE.equals(getModel().getIsAutoAssign().getEntity()))) {
        getModel().getHostCpu().setIsChangable(true);
    } else {
        getModel().getHostCpu().setEntity(false);
        getModel().getHostCpu().setIsChangable(false);
    }
}
#method_after
public void updateUseHostCpuAvailability() {
    boolean clusterSupportsHostCpu = getModel().getCluster().getSelectedItem() != null && ((VDSGroup) (getModel().getCluster().getSelectedItem())).getcompatibility_version().compareTo(Version.v3_2) >= 0;
    boolean nonMigratable = MigrationSupport.PINNED_TO_HOST == getModel().getMigrationMode().getSelectedItem();
    boolean manuallyMigratableAndAnyHostInCluster = MigrationSupport.IMPLICITLY_NON_MIGRATABLE == getModel().getMigrationMode().getSelectedItem() && Boolean.TRUE.equals(getModel().getIsAutoAssign().getEntity());
    if (clusterSupportsHostCpu && (nonMigratable || manuallyMigratableAndAnyHostInCluster)) {
        getModel().getHostCpu().setIsChangable(true);
    } else {
        getModel().getHostCpu().setEntity(false);
        getModel().getHostCpu().setChangeProhibitionReason(constants.hosCPUUnavailable());
        getModel().getHostCpu().setIsChangable(false);
    }
}
#end_block

#method_before
@Override
public String render(final Integer seconds) {
    StringBuilder builder = new StringBuilder();
    builder.append(seconds / MILLI_SECOND_DIVISION);
    // $NON-NLS-1$
    builder.append(' ');
    builder.append(CONSTANTS.refreshRateSeconds());
    return builder.toString();
}
#method_after
@Override
public String render(final Integer milliSeconds) {
    return MESSAGES.refreshRateSeconds(milliSeconds / MILLI_SECOND_DIVISION);
}
#end_block

#method_before
@Override
public String toString() {
    StringBuilder builder = new StringBuilder(50);
    // $NON-NLS-1$
    builder.append("commandId: ");
    builder.append(getCommandId());
    // $NON-NLS-1$
    builder.append(", user: ");
    builder.append(getParametersCurrentUser().getUserName());
    // $NON-NLS-1$
    builder.append(", commandType: ");
    builder.append(getCommandType());
    return builder.toString();
}
#method_after
@Override
public String toString() {
    StringBuilder builder = new StringBuilder(50);
    // $NON-NLS-1$
    builder.append("commandId: ");
    builder.append(getCommandId());
    // $NON-NLS-1$
    builder.append(", user: ");
    if (getParametersCurrentUser() != null) {
        builder.append(getParametersCurrentUser().getUserName());
    }
    // $NON-NLS-1$
    builder.append(", commandType: ");
    builder.append(getCommandType());
    return builder.toString();
}
#end_block

#method_before
@Override
public String toString() {
    StringBuilder builder = new StringBuilder(25);
    builder.append("Is refresh? ");
    builder.append(refresh);
    builder.append(", Is filtered? ");
    builder.append(isFiltered);
    return builder.toString();
}
#method_after
@Override
public String toString() {
    StringBuilder builder = new StringBuilder(25);
    builder.append("refresh: ");
    builder.append(refresh);
    builder.append(", filtered: ");
    builder.append(isFiltered);
    return builder.toString();
}
#end_block

#method_before
private void debugQuery(VdcQueryType queryType, VdcQueryParametersBase parameters) {
    if (log.isDebugEnabled()) {
        StringBuilder builder = new StringBuilder(50);
        // $NON-NLS-1$
        builder.append("Query type: ");
        builder.append(queryType);
        // $NON-NLS-1$
        builder.append(", Parameters: ");
        builder.append(parameters);
        log.debug(builder.toString());
    }
}
#method_after
private void debugQuery(VdcQueryType queryType, VdcQueryParametersBase parameters) {
    if (log.isDebugEnabled()) {
        StringBuilder builder = new StringBuilder();
        // $NON-NLS-1$
        builder.append("Query type: ");
        builder.append(queryType);
        // $NON-NLS-1$
        builder.append(", Parameters: ");
        builder.append(parameters);
        log.debug(builder.toString());
    }
}
#end_block

#method_before
private void debugAction(VdcActionType actionType, VdcActionParametersBase params) {
    if (log.isDebugEnabled()) {
        StringBuilder builder = new StringBuilder(50);
        // $NON-NLS-1$
        builder.append("Action type: ");
        builder.append(actionType);
        // $NON-NLS-1$
        builder.append(", Parameters: ");
        builder.append(params);
    }
}
#method_after
private void debugAction(VdcActionType actionType, VdcActionParametersBase params) {
    if (log.isDebugEnabled()) {
        StringBuilder builder = new StringBuilder();
        // $NON-NLS-1$
        builder.append("Action type: ");
        builder.append(actionType);
        // $NON-NLS-1$
        builder.append(", Parameters: ");
        builder.append(params);
        log.debug(builder.toString());
    }
}
#end_block

#method_before
@Override
public String toString() {
    StringBuilder builder = new StringBuilder(50);
    builder.append("search type: ");
    builder.append(getSearchTypeValue());
    builder.append(", search pattern: [");
    builder.append(getSearchPattern());
    builder.append("], case sensitive? ");
    builder.append(getCaseSensitive());
    builder.append(" [from: ");
    builder.append(getSearchFrom());
    builder.append(", max: ");
    builder.append(getMaxCount());
    builder.append("] ");
    builder.append(super.toString());
    return builder.toString();
}
#method_after
@Override
public String toString() {
    StringBuilder builder = new StringBuilder(50);
    builder.append("search type: ");
    builder.append(getSearchTypeValue());
    builder.append(", search pattern: [");
    builder.append(getSearchPattern());
    builder.append("], case sensitive: ");
    builder.append(getCaseSensitive());
    builder.append(" [from: ");
    builder.append(getSearchFrom());
    builder.append(", max: ");
    builder.append(getMaxCount());
    builder.append("] ");
    builder.append(super.toString());
    return builder.toString();
}
#end_block

#method_before
private void saveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    connection = new StorageServerConnections();
    connection.setid(storageDomain.getStorage());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isNfsPathEditable(storageDomain)) {
            updateNfsPath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#method_after
private void saveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        connection = new StorageServerConnections();
        connection.setid(storageDomain.getStorage());
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isNfsPathEditable(storageDomain)) {
            updateNfsPath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void setSpiceImplementation() {
    consoleMode = ClientConsoleMode.valueOf((String) AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.ClientConsoleModeDefault));
    switch(consoleMode) {
        case Native:
            setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
            break;
        case Plugin:
            setspice((ISpice) TypeResolver.getInstance().Resolve(ISpicePlugin.class));
            break;
        default:
            ISpicePlugin pluginSpice = (ISpicePlugin) TypeResolver.getInstance().Resolve(ISpicePlugin.class);
            if (pluginSpice.detectBrowserPlugin()) {
                setspice(pluginSpice);
            } else {
                setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
            }
            break;
    }
}
#method_after
private void setSpiceImplementation() {
    consoleMode = ClientConsoleMode.valueOf((String) AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.ClientConsoleModeDefault));
    switch(consoleMode) {
        case Native:
            setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
            break;
        case Plugin:
            setspice((ISpice) TypeResolver.getInstance().Resolve(ISpicePlugin.class));
            break;
        default:
            ISpicePlugin pluginSpice = (ISpicePlugin) TypeResolver.getInstance().Resolve(ISpicePlugin.class);
            setspice(pluginSpice.detectBrowserPlugin() ? pluginSpice : (ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
            break;
    }
}
#end_block

#method_before
@Override
public void Connect() {
    // $NON-NLS-1$
    logger.warning("Connecting via spice...");
    if (isLinuxAndFirefox()) {
        connectNativelyViaXPI();
    } else if (isWindowsAndIE()) {
        connectNativelyViaActiveX();
    }
}
#method_after
@Override
public void Connect() {
    // $NON-NLS-1$
    logger.warning("Connecting via spice...");
    if (configurator.isClientLinuxFirefox()) {
        connectNativelyViaXPI();
    } else if (configurator.isClientWindownsExplorer()) {
        connectNativelyViaActiveX();
    }
}
#end_block

#method_before
@Override
public boolean detectBrowserPlugin() {
    if (isLinuxAndFirefox()) {
        return detectXpiPlugin();
    } else if (isWindowsAndIE()) {
        return detectActiveXPlugin();
    }
    return false;
}
#method_after
@Override
public boolean detectBrowserPlugin() {
    if (configurator.isClientLinuxFirefox()) {
        return detectXpiPlugin();
    } else if (configurator.isClientWindownsExplorer()) {
        return detectActiveXPlugin();
    }
    return false;
}
#end_block

#method_before
@Override
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    request.setCharacterEncoding("UTF-8");
    String contentType = request.getParameter("contenttype");
    String fileName = request.getParameter("filename");
    Boolean cache = Boolean.parseBoolean(request.getParameter("cache"));
    String encodingType = request.getParameter("encodingtype");
    String content = request.getParameter("content");
    if (contentType != null) {
        response.setContentType(contentType);
    }
    if (fileName == null) {
        fileName = "attachment";
    }
    response.setHeader("Content-Disposition", "attachment; filename*='UTF-8'" + URLEncoder.encode(StringEscapeUtils.unescapeHtml(fileName), "UTF-8"));
    if (!cache) {
        // disable caching HTTP/1.1
        response.setHeader("Cache-Control", "max-age=0, must-revalidate");
        // disable caching HTTP/1.0
        response.setHeader("Expires", "Sat, 26 Jul 1997 05:00:00 GMT");
    }
    if (content == null) {
        return;
    }
    if ("binary".equals(encodingType)) {
        response.getOutputStream().write(Base64.decodeBase64(content));
    } else if ("plain".equals(encodingType)) {
        content = StringEscapeUtils.unescapeHtml(content);
        response.getWriter().write(content);
        if (response.getWriter().checkError()) {
            throw new IOException("Error when writing to response stream");
        }
    } else {
        throw new ServletException(String.format("Unsupported encoding type %s", encodingType));
    }
}
#method_after
@Override
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    request.setCharacterEncoding("UTF-8");
    String contentType = request.getParameter("contenttype");
    Boolean cache = Boolean.parseBoolean(request.getParameter("cache"));
    String encodingType = request.getParameter("encodingtype");
    String content = request.getParameter("content");
    if (StringUtils.isNotBlank(contentType)) {
        response.setContentType(contentType);
    }
    if (!cache) {
        // disable caching HTTP/1.1
        response.setHeader("Cache-Control", "max-age=0, must-revalidate");
        // disable caching HTTP/1.0
        response.setHeader("Expires", "Sat, 26 Jul 1997 05:00:00 GMT");
    }
    if (content == null) {
        return;
    }
    if (ENCODINGTYPE_BINARY.equals(encodingType)) {
        response.getOutputStream().write(Base64.decodeBase64(content));
    } else if (ENCODINGTYPE_PLAIN.equals(encodingType)) {
        content = StringEscapeUtils.unescapeHtml(content);
        response.getWriter().write(content);
        if (response.getWriter().checkError()) {
            throw new IOException("Error when writing to response stream");
        }
    } else {
        throw new ServletException(String.format("Unsupported encoding type %s", encodingType));
    }
}
#end_block

#method_before
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#method_after
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initVMSeverities() {
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTENANCE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
}
#method_after
private static void initVMSeverities() {
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTENANCE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
}
#end_block

#method_before
static void checkMessages() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != messages.size()) {
        for (AuditLogType value : values) {
            if (!messages.containsKey(value)) {
                log.infoFormat("AuditLogType: {0} not exist in string table", value.toString());
            }
        }
    }
}
#method_after
private static void checkMessages() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != messages.size()) {
        for (AuditLogType value : values) {
            if (!messages.containsKey(value)) {
                log.infoFormat("AuditLogType: {0} not exist in string table", value.toString());
            }
        }
    }
}
#end_block

#method_before
static void checkSeverities() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != severities.size()) {
        for (AuditLogType value : values) {
            if (!severities.containsKey(value)) {
                log.warnFormat("AuditLogType: {0} not have severity. Assumed Normal", value.toString());
            }
        }
    }
}
#method_after
private static void checkSeverities() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != severities.size()) {
        for (AuditLogType value : values) {
            if (!severities.containsKey(value)) {
                log.warnFormat("AuditLogType: {0} not have severity. Assumed Normal", value.toString());
            }
        }
    }
}
#end_block

#method_before
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = severities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        if (auditLogable != null) {
            AuditLog tempVar = null;
            // handle external log messages invoked by plugins via the API
            if (auditLogable.isExternal()) {
                // message is sent as an argument, no need to resolve.
                resolvedMessage = message = loggerString;
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
            } else if ((message = messages.get(logType)) != null) {
                // Application log message from AuditLogMessages
                resolvedMessage = resolveMessage(message, auditLogable);
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
            }
            if (tempVar != null) {
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                tempVar.setExternal(auditLogable.isExternal());
                auditLog = tempVar;
            }
        } else {
            auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
        }
        if (auditLog != null) {
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    }
}
#method_after
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = severities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        // handle external log messages invoked by plugins via the API
        if (auditLogable.isExternal()) {
            // message is sent as an argument, no need to resolve.
            resolvedMessage = message = loggerString;
            auditLog = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
        } else if ((message = messages.get(logType)) != null) {
            // Application log message from AuditLogMessages
            resolvedMessage = resolveMessage(message, auditLogable);
            auditLog = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
        }
        if (auditLog != null) {
            auditLog.setstorage_domain_id(auditLogable.getStorageDomainId());
            auditLog.setstorage_domain_name(auditLogable.getStorageDomainName());
            auditLog.setstorage_pool_id(auditLogable.getStoragePoolId());
            auditLog.setstorage_pool_name(auditLogable.getStoragePoolName());
            auditLog.setvds_group_id(auditLogable.getVdsGroupId());
            auditLog.setvds_group_name(auditLogable.getVdsGroupName());
            auditLog.setCorrelationId(auditLogable.getCorrelationId());
            auditLog.setJobId(auditLogable.getJobId());
            auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
            auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
            auditLog.setExternal(auditLogable.isExternal());
            auditLog.setQuotaId(auditLogable.getQuotaIdForLog());
            auditLog.setQuotaName(auditLogable.getQuotaNameForLog());
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    }
}
#end_block

#method_before
static String resolveMessage(String message, AuditLogableBase logable) {
    String returnValue = message;
    if (logable != null) {
        Map<String, String> map = getAvailableValues(logable);
        returnValue = resolveMessage(message, map);
    }
    return returnValue;
}
#method_after
static String resolveMessage(String message, AuditLogableBase logable) {
    String returnValue = message;
    if (logable != null) {
        Map<String, String> map = getAvailableValues(message, logable);
        returnValue = resolveMessage(message, map);
    }
    return returnValue;
}
#end_block

#method_before
static Map<String, String> getAvailableValues(AuditLogableBase logable) {
    Map<String, String> returnValue = new HashMap<String, String>(logable.getCustomValues());
    Class<?> type = AuditLogableBase.class;
    for (PropertyInfo propertyInfo : TypeCompat.GetProperties(type)) {
        Object value = propertyInfo.getValue(logable, null);
        String stringValue = value != null ? value.toString() : null;
        if (!returnValue.containsKey(propertyInfo.getName().toLowerCase())) {
            returnValue.put(propertyInfo.getName().toLowerCase(), stringValue);
        } else {
            log.errorFormat("Try to add duplicate audit log values with the same name. Type: {0}. Value: {1}", logable.getAuditLogTypeValue(), propertyInfo.getName().toLowerCase());
        }
    }
    List<String> attributes = AuditLogHelper.getCustomLogFields(logable.getClass(), true);
    if (attributes != null && attributes.size() > 0) {
        TypeCompat.getPropertyValues(logable, new HashSet<String>(attributes), returnValue);
    }
    return returnValue;
}
#method_after
private static Map<String, String> getAvailableValues(String message, AuditLogableBase logable) {
    Map<String, String> returnValue = new HashMap<String, String>(logable.getCustomValues());
    Set<String> attributes = resolvePlaceHolders(message);
    if (attributes != null && attributes.size() > 0) {
        TypeCompat.getPropertyValues(logable, attributes, returnValue);
    }
    return returnValue;
}
#end_block

#method_before
private void updateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditQuotaCommand().setIsExecutionAllowed(items.size() == 1);
    getRemoveQuotaCommand().setIsExecutionAllowed(items.size() > 0);
    getCloneQuotaCommand().setIsExecutionAllowed(items.size() == 1);
}
#method_after
private void updateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(items.size() == 1);
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0);
    getCloneCommand().setIsExecutionAllowed(items.size() == 1);
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command.equals(getCreateQuotaCommand())) {
        createQuota();
    } else if (command.equals(getEditQuotaCommand())) {
        editQuota(false);
    } else if (command.getName().equals("OnCreateQuota")) {
        // $NON-NLS-1$
        onCreateQuota();
    } else if (command.getName().equals("Cancel")) {
        // $NON-NLS-1$
        cancel();
    } else if (command.equals(getRemoveQuotaCommand())) {
        remove();
    } else if (command.getName().equals("OnRemove")) {
        // $NON-NLS-1$
        onRemove();
    } else if (command.equals(getCloneQuotaCommand())) {
        editQuota(true);
    } else if (command.getName().equals("onCloneQuota")) {
        // $NON-NLS-1$
        onCreateQuotaInternal(true);
    } else if (command.getName().equals("OnCreateQuotaInternal")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
        onCreateQuotaInternal(false);
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        cancelConfirmation();
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command.equals(getCreateCommand())) {
        createQuota();
    } else if (command.equals(getEditCommand())) {
        editQuota(false);
    } else if (command.getName().equals("OnCreateQuota")) {
        // $NON-NLS-1$
        onCreateQuota();
    } else if (command.getName().equals("Cancel")) {
        // $NON-NLS-1$
        cancel();
    } else if (command.equals(getRemoveCommand())) {
        remove();
    } else if (command.getName().equals("OnRemove")) {
        // $NON-NLS-1$
        onRemove();
    } else if (command.equals(getCloneCommand())) {
        editQuota(true);
    } else if (command.getName().equals("onCloneQuota")) {
        // $NON-NLS-1$
        onCreateQuotaInternal(true);
    } else if (command.getName().equals("OnCreateQuotaInternal")) {
        // $NON-NLS-1$
        setConfirmWindow(null);
        onCreateQuotaInternal(false);
    } else if (command.getName().equals("CancelConfirmation")) {
        // $NON-NLS-1$
        cancelConfirmation();
    }
}
#end_block

#method_before
private boolean checkQuotaStorageLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, double limit, double storageUsagePercentage, double storageRequestPercentage, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> log) {
    double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage;
    boolean requestIsApproved;
    if (limit == QuotaStorage.UNLIMITED || storageTotalPercentage <= quota.getThresholdStoragePercentage() || storageRequestPercentage <= 0) {
        requestIsApproved = true;
    } else if (storageTotalPercentage <= 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else if (storageTotalPercentage <= quota.getGraceStoragePercentage() + 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), storageUsagePercentage, storageRequestPercentage);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    return requestIsApproved;
}
#method_after
private boolean checkQuotaStorageLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, double limit, double storageUsagePercentage, double storageRequestPercentage, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> log) {
    double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage;
    boolean requestIsApproved;
    if (limit == QuotaStorage.UNLIMITED || storageTotalPercentage <= quota.getThresholdStoragePercentage() || storageRequestPercentage <= 0) {
        requestIsApproved = true;
    } else if (storageTotalPercentage <= 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), quota.getId(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else if (storageTotalPercentage <= quota.getGraceStoragePercentage() + 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), quota.getId(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), quota.getId(), storageUsagePercentage, storageRequestPercentage);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    if (!requestIsApproved) {
        log.getSecond().setQuotaIdForLog(quota.getId());
    }
    return requestIsApproved;
}
#end_block

#method_before
private boolean checkQuotaClusterLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, QuotaVdsGroup quotaVdsGroup, long memToAdd, int vcpuToAdd, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> auditLogPair) {
    if (quotaVdsGroup.getVirtualCpu() == 0 || quotaVdsGroup.getMemSizeMB() == 0) {
        return false;
    }
    double vcpuToAddPercentage = (double) vcpuToAdd / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double vcpuCurrentPercentage = (double) quotaVdsGroup.getVirtualCpuUsage() / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double newVcpuPercent = vcpuToAddPercentage + vcpuCurrentPercentage;
    double memToAddPercentage = (double) memToAdd / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double memCurrentPercentage = (double) quotaVdsGroup.getMemSizeMBUsage() / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double newMemoryPercent = memToAddPercentage + memCurrentPercentage;
    long newMemory = memToAdd + quotaVdsGroup.getMemSizeMBUsage();
    int newVcpu = vcpuToAdd + quotaVdsGroup.getVirtualCpuUsage();
    long memLimit = quotaVdsGroup.getMemSizeMB();
    int cpuLimit = quotaVdsGroup.getVirtualCpu();
    boolean requestIsApproved;
    if (memLimit == QuotaVdsGroup.UNLIMITED_MEM && cpuLimit == QuotaVdsGroup.UNLIMITED_VCPU) {
        // if both cpu and
        // mem are unlimited
        requestIsApproved = true;
    } else if ((// if cpu and mem usages are under the limit
    newVcpuPercent <= quota.getThresholdVdsGroupPercentage() && newMemoryPercent <= quota.getThresholdVdsGroupPercentage()) || (vcpuToAdd <= 0 && memToAdd <= 0)) {
        requestIsApproved = true;
    } else if (newVcpuPercent <= 100 && newMemoryPercent <= 100) {
        // passed the threshold (not the quota limit)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > quota.getThresholdVdsGroupPercentage(), newMemoryPercent > quota.getThresholdVdsGroupPercentage());
        requestIsApproved = true;
    } else if (newVcpuPercent <= quota.getGraceVdsGroupPercentage() + 100 && newMemoryPercent <= quota.getGraceVdsGroupPercentage() + 100) {
        // passed the quota limit (not the
        // grace)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > 100, newMemoryPercent > 100);
        requestIsApproved = true;
    } else {
        // passed the grace
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), vcpuCurrentPercentage, vcpuToAddPercentage, memCurrentPercentage, memToAddPercentage, newVcpuPercent > quota.getGraceVdsGroupPercentage() + 100, newMemoryPercent > quota.getGraceVdsGroupPercentage() + 100);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_VDS_GROUP_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    // cache
    if (requestIsApproved) {
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    }
    return requestIsApproved;
}
#method_after
private boolean checkQuotaClusterLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, QuotaVdsGroup quotaVdsGroup, long memToAdd, int vcpuToAdd, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> auditLogPair) {
    if (quotaVdsGroup.getVirtualCpu() == 0 || quotaVdsGroup.getMemSizeMB() == 0) {
        return false;
    }
    double vcpuToAddPercentage = (double) vcpuToAdd / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double vcpuCurrentPercentage = (double) quotaVdsGroup.getVirtualCpuUsage() / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double newVcpuPercent = vcpuToAddPercentage + vcpuCurrentPercentage;
    double memToAddPercentage = (double) memToAdd / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double memCurrentPercentage = (double) quotaVdsGroup.getMemSizeMBUsage() / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double newMemoryPercent = memToAddPercentage + memCurrentPercentage;
    long newMemory = memToAdd + quotaVdsGroup.getMemSizeMBUsage();
    int newVcpu = vcpuToAdd + quotaVdsGroup.getVirtualCpuUsage();
    long memLimit = quotaVdsGroup.getMemSizeMB();
    int cpuLimit = quotaVdsGroup.getVirtualCpu();
    boolean requestIsApproved;
    if (memLimit == QuotaVdsGroup.UNLIMITED_MEM && cpuLimit == QuotaVdsGroup.UNLIMITED_VCPU) {
        // if both cpu and
        // mem are unlimited
        requestIsApproved = true;
    } else if ((// if cpu and mem usages are under the limit
    newVcpuPercent <= quota.getThresholdVdsGroupPercentage() && newMemoryPercent <= quota.getThresholdVdsGroupPercentage()) || (vcpuToAdd <= 0 && memToAdd <= 0)) {
        requestIsApproved = true;
    } else if (newVcpuPercent <= 100 && newMemoryPercent <= 100) {
        // passed the threshold (not the quota limit)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), quota.getId(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > quota.getThresholdVdsGroupPercentage(), newMemoryPercent > quota.getThresholdVdsGroupPercentage());
        requestIsApproved = true;
    } else if (newVcpuPercent <= quota.getGraceVdsGroupPercentage() + 100 && newMemoryPercent <= quota.getGraceVdsGroupPercentage() + 100) {
        // passed the quota limit (not the
        // grace)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), quota.getId(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > 100, newMemoryPercent > 100);
        requestIsApproved = true;
    } else {
        // passed the grace
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), quota.getId(), vcpuCurrentPercentage, vcpuToAddPercentage, memCurrentPercentage, memToAddPercentage, newVcpuPercent > quota.getGraceVdsGroupPercentage() + 100, newMemoryPercent > quota.getGraceVdsGroupPercentage() + 100);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_VDS_GROUP_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    // cache
    if (requestIsApproved) {
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    } else {
        auditLogPair.getSecond().setQuotaIdForLog(quota.getId());
    }
    return requestIsApproved;
}
#end_block

#method_before
// In case this param is a QuotaStorageConsumptionParameter - check that it has a valid
private boolean checkStoragePoolMatchQuota(QuotaConsumptionParametersWrapper parameters, QuotaConsumptionParameter param) {
    Quota quota = param.getQuota();
    QuotaStorageConsumptionParameter paramStorage = (QuotaStorageConsumptionParameter) param;
    if (paramStorage.getStorageDomainId() == null) {
        parameters.getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString());
        log.errorFormat("Quota storage parameters from command: {0} are missing storage domain id", parameters.getAuditLogable().getClass().getName());
        return false;
    }
    boolean storageDomainInQuota = false;
    if (quota.getGlobalQuotaStorage() != null) {
        storageDomainInQuota = true;
    } else {
        for (QuotaStorage quotaStorage : quota.getQuotaStorages()) {
            if (quotaStorage.getStorageId().equals(paramStorage.getStorageDomainId())) {
                storageDomainInQuota = true;
                break;
            }
        }
    }
    if (!storageDomainInQuota) {
        parameters.getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString());
        log.errorFormat("Quota storage parameters from command: {0}. Storage domain does not match quota", parameters.getAuditLogable().getClass().getName());
        return false;
    }
    return true;
}
#method_after
// In case this param is a QuotaStorageConsumptionParameter - check that it has a valid
private boolean checkStoragePoolMatchQuota(QuotaConsumptionParametersWrapper parameters, QuotaConsumptionParameter param) {
    Quota quota = param.getQuota();
    QuotaStorageConsumptionParameter paramStorage = (QuotaStorageConsumptionParameter) param;
    if (paramStorage.getStorageDomainId() == null) {
        parameters.getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString());
        log.errorFormat("Quota storage parameters from command: {0} are missing storage domain id", parameters.getAuditLogable().getClass().getName());
        return false;
    }
    boolean storageDomainInQuota = false;
    if (quota.getGlobalQuotaStorage() != null) {
        storageDomainInQuota = true;
    } else {
        for (QuotaStorage quotaStorage : quota.getQuotaStorages()) {
            if (quotaStorage.getStorageId().equals(paramStorage.getStorageDomainId())) {
                storageDomainInQuota = true;
                break;
            }
        }
    }
    if (!storageDomainInQuota) {
        parameters.getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_NO_QUOTA_SET_FOR_DOMAIN.toString());
        log.errorFormat("Quota storage parameters from command: {0}. Storage domain does not match quota", parameters.getAuditLogable().getClass().getName());
        return false;
    }
    return true;
}
#end_block

#method_before
private QuotaUsagePerUser addQuotaEntry(Quota quota) {
    // if quota is not null (found in cache or DB) - add entry to quotaPerUserUsageEntityMap
    if (quota != null) {
        double storageLimit = 0;
        double storageUsage = 0;
        int cpuLimit = 0;
        int cpuUsage = 0;
        long memLimit = 0;
        long memUsage = 0;
        // calc storage
        if (quota.getGlobalQuotaStorage() != null) {
            storageLimit = quota.getGlobalQuotaStorage().getStorageSizeGB();
            storageUsage = quota.getGlobalQuotaStorage().getStorageSizeGBUsage();
        } else {
            for (QuotaStorage quotaStorage : quota.getQuotaStorages()) {
                if (storageLimit == QuotaStorage.UNLIMITED || QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB())) {
                    storageLimit = QuotaStorage.UNLIMITED;
                } else {
                    storageLimit += quotaStorage.getStorageSizeGB();
                }
                storageUsage += quotaStorage.getStorageSizeGBUsage();
            }
        }
        // calc cpu and mem
        if (quota.getGlobalQuotaVdsGroup() != null) {
            memLimit = quota.getGlobalQuotaVdsGroup().getMemSizeMB();
            memUsage = quota.getGlobalQuotaVdsGroup().getMemSizeMBUsage();
            cpuLimit = quota.getGlobalQuotaVdsGroup().getVirtualCpu();
            cpuUsage = quota.getGlobalQuotaVdsGroup().getVirtualCpuUsage();
        } else {
            for (QuotaVdsGroup quotaVdsGroup : quota.getQuotaVdsGroups()) {
                if (memLimit == QuotaVdsGroup.UNLIMITED_MEM || QuotaVdsGroup.UNLIMITED_MEM.equals(quotaVdsGroup.getMemSizeMB())) {
                    memLimit = QuotaVdsGroup.UNLIMITED_MEM;
                } else {
                    memLimit += quotaVdsGroup.getMemSizeMB();
                }
                memUsage += quotaVdsGroup.getMemSizeMBUsage();
                if (cpuLimit == QuotaVdsGroup.UNLIMITED_VCPU || QuotaVdsGroup.UNLIMITED_VCPU.equals(quotaVdsGroup.getVirtualCpu())) {
                    cpuLimit = QuotaVdsGroup.UNLIMITED_VCPU;
                } else {
                    cpuLimit += quotaVdsGroup.getVirtualCpu();
                }
                cpuUsage += quotaVdsGroup.getVirtualCpuUsage();
            }
        }
        return new QuotaUsagePerUser(quota.getId(), quota.getQuotaName(), storageLimit, storageUsage, cpuLimit, cpuUsage, memLimit, memUsage);
    }
    return null;
}
#method_after
private QuotaUsagePerUser addQuotaEntry(Quota quota) {
    // if quota is not null (found in cache or DB) - add entry to quotaPerUserUsageEntityMap
    if (quota != null) {
        double storageLimit = 0;
        double storageUsage = 0;
        int cpuLimit = 0;
        int cpuUsage = 0;
        long memLimit = 0;
        long memUsage = 0;
        // calc storage
        if (quota.getGlobalQuotaStorage() != null) {
            storageLimit = quota.getGlobalQuotaStorage().getStorageSizeGB();
            storageUsage = quota.getGlobalQuotaStorage().getStorageSizeGBUsage();
        } else {
            for (QuotaStorage quotaStorage : quota.getQuotaStorages()) {
                // once storage was set unlimited it will remain so
                if (QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB())) {
                    // Do not break because usage is still counting
                    storageLimit = QuotaStorage.UNLIMITED;
                }
                if (storageLimit != QuotaStorage.UNLIMITED) {
                    storageLimit += quotaStorage.getStorageSizeGB();
                }
                storageUsage += quotaStorage.getStorageSizeGBUsage();
            }
        }
        // calc cpu and mem
        if (quota.getGlobalQuotaVdsGroup() != null) {
            memLimit = quota.getGlobalQuotaVdsGroup().getMemSizeMB();
            memUsage = quota.getGlobalQuotaVdsGroup().getMemSizeMBUsage();
            cpuLimit = quota.getGlobalQuotaVdsGroup().getVirtualCpu();
            cpuUsage = quota.getGlobalQuotaVdsGroup().getVirtualCpuUsage();
        } else {
            for (QuotaVdsGroup quotaVdsGroup : quota.getQuotaVdsGroups()) {
                // once mem was set unlimited it will remain so
                if (QuotaVdsGroup.UNLIMITED_MEM.equals(quotaVdsGroup.getMemSizeMB())) {
                    // Do not break because usage is still counting
                    memLimit = QuotaVdsGroup.UNLIMITED_MEM;
                }
                if (memLimit != QuotaVdsGroup.UNLIMITED_MEM) {
                    memLimit += quotaVdsGroup.getMemSizeMB();
                }
                // once cpu was set unlimited it will remain so
                if (QuotaVdsGroup.UNLIMITED_VCPU.equals(quotaVdsGroup.getVirtualCpu())) {
                    // Do not break because usage is still counting
                    cpuLimit = QuotaVdsGroup.UNLIMITED_VCPU;
                }
                if (cpuLimit != QuotaVdsGroup.UNLIMITED_VCPU) {
                    cpuLimit += quotaVdsGroup.getVirtualCpu();
                }
                memUsage += quotaVdsGroup.getMemSizeMBUsage();
                cpuUsage += quotaVdsGroup.getVirtualCpuUsage();
            }
        }
        return new QuotaUsagePerUser(quota.getId(), quota.getQuotaName(), storageLimit, storageUsage, cpuLimit, cpuUsage, memLimit, memUsage);
    }
    return null;
}
#end_block

#method_before
void initTable(final ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new QuotaDcStatusColumn(), constants.empty(), "30px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            // $NON-NLS-1$
            return object.getQuotaName() == null ? "" : object.getQuotaName();
        }
    }, constants.nameQuota(), // $NON-NLS-1$
    "120px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            // $NON-NLS-1$
            return object.getDescription() == null ? "" : object.getDescription();
        }
    }, constants.descriptionQuota(), // $NON-NLS-1$
    "120px");
    getTable().addColumn(new QuotaPercentColumn<Quota>() {

        @Override
        protected Integer getProgressValue(Quota object) {
            int value;
            long allocated = 0;
            long used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getMemSizeMB();
                used = object.getGlobalQuotaVdsGroup().getMemSizeMBUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_MEM.equals(quotaVdsGroup.getMemSizeMB())) {
                        allocated += quotaVdsGroup.getMemSizeMB();
                        used += quotaVdsGroup.getMemSizeMBUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_MEM;
                        break;
                    }
                }
            }
            if (allocated == 0) {
                return 0;
            }
            value = (int) (((double) used / allocated) * 100);
            return allocated < 0 ? -1 : value > 100 ? 100 : value;
        }

        @Override
        public ApplicationConstants getaApplicationConstants() {
            return constants;
        }
    }, constants.usedMemoryQuota(), // $NON-NLS-1$
    "100px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            int value;
            long allocated = 0;
            long used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getMemSizeMB();
                used = object.getGlobalQuotaVdsGroup().getMemSizeMBUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_MEM.equals(quotaVdsGroup.getMemSizeMB())) {
                        allocated += quotaVdsGroup.getMemSizeMB();
                        used += quotaVdsGroup.getMemSizeMBUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_MEM;
                        break;
                    }
                }
            }
            value = (int) (allocated - used);
            String returnVal;
            if (allocated < 0) {
                returnVal = constants.unlimited();
            } else if (value <= 0) {
                // $NON-NLS-1$
                returnVal = "0 MB";
            } else if (value <= 5 * 1024) {
                // $NON-NLS-1$
                returnVal = value + "MB";
            } else {
                // $NON-NLS-1$
                returnVal = decimalFormat.format((double) value / 1024) + "GB";
            }
            return returnVal;
        }
    }, constants.freeMemory(), // $NON-NLS-1$
    "80px");
    getTable().addColumn(new QuotaPercentColumn<Quota>() {

        @Override
        protected Integer getProgressValue(Quota object) {
            int value;
            int allocated = 0;
            int used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getVirtualCpu();
                used = object.getGlobalQuotaVdsGroup().getVirtualCpuUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_VCPU.equals(quotaVdsGroup.getVirtualCpu())) {
                        allocated += quotaVdsGroup.getVirtualCpu();
                        used += quotaVdsGroup.getVirtualCpuUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_VCPU;
                        break;
                    }
                }
            }
            if (allocated == 0) {
                return 0;
            }
            value = (int) (((double) used / allocated) * 100);
            return allocated < 0 ? -1 : value > 100 ? 100 : value;
        }

        @Override
        public ApplicationConstants getaApplicationConstants() {
            return constants;
        }
    }, constants.runningCpuQuota(), // $NON-NLS-1$
    "100px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            int value;
            int allocated = 0;
            int used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getVirtualCpu();
                used = object.getGlobalQuotaVdsGroup().getVirtualCpuUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_VCPU.equals(quotaVdsGroup.getVirtualCpu())) {
                        allocated += quotaVdsGroup.getVirtualCpu();
                        used += quotaVdsGroup.getVirtualCpuUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_VCPU;
                        break;
                    }
                }
            }
            value = allocated - used;
            String returnVal;
            if (allocated < 0) {
                returnVal = constants.unlimited();
            } else if (value <= 0) {
                // $NON-NLS-1$
                returnVal = "0";
            } else {
                // $NON-NLS-1$
                returnVal = value + "";
            }
            return returnVal;
        }
    }, constants.freeVcpu(), // $NON-NLS-1$
    "80px");
    getTable().addColumn(new QuotaPercentColumn<Quota>() {

        @Override
        protected Integer getProgressValue(Quota object) {
            int value;
            double allocated = 0;
            double used = 0;
            if (object.getGlobalQuotaStorage() != null) {
                allocated = object.getGlobalQuotaStorage().getStorageSizeGB();
                used = object.getGlobalQuotaStorage().getStorageSizeGBUsage();
            } else {
                for (QuotaStorage quotaStorage : object.getQuotaStorages()) {
                    if (!QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB())) {
                        allocated += quotaStorage.getStorageSizeGB();
                        used += quotaStorage.getStorageSizeGBUsage();
                    } else {
                        allocated = QuotaStorage.UNLIMITED;
                        break;
                    }
                }
            }
            if (allocated == 0) {
                return 0;
            }
            value = (int) ((used / allocated) * 100);
            return allocated < 0 ? -1 : value > 100 ? 100 : value;
        }

        @Override
        public ApplicationConstants getaApplicationConstants() {
            return constants;
        }
    }, constants.usedStorageQuota(), // $NON-NLS-1$
    "100px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            double value;
            double allocated = 0;
            double used = 0;
            if (object.getGlobalQuotaStorage() != null) {
                allocated = object.getGlobalQuotaStorage().getStorageSizeGB();
                used = object.getGlobalQuotaStorage().getStorageSizeGBUsage();
            } else {
                for (QuotaStorage quotaStorage : object.getQuotaStorages()) {
                    if (!QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB())) {
                        allocated += quotaStorage.getStorageSizeGB();
                        used += quotaStorage.getStorageSizeGBUsage();
                    } else {
                        allocated = QuotaStorage.UNLIMITED;
                        break;
                    }
                }
            }
            value = allocated - used;
            String returnVal;
            if (allocated < 0) {
                returnVal = constants.unlimited();
            } else if (value <= 0) {
                // $NON-NLS-1$
                returnVal = "0 GB";
            } else {
                returnVal = diskSizeRenderer.render(value);
            }
            return returnVal;
        }
    }, constants.freeStorage(), // $NON-NLS-1$
    "80px");
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.addQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateQuotaCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.editQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditQuotaCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.copyQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCloneQuotaCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.removeQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveQuotaCommand();
        }
    });
}
#method_after
void initTable(final ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new QuotaDcStatusColumn(), constants.empty(), "30px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            // $NON-NLS-1$
            return object.getQuotaName() == null ? "" : object.getQuotaName();
        }
    }, constants.nameQuota(), // $NON-NLS-1$
    "120px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            // $NON-NLS-1$
            return object.getDescription() == null ? "" : object.getDescription();
        }
    }, constants.descriptionQuota(), // $NON-NLS-1$
    "120px");
    getTable().addColumn(new QuotaPercentColumn<Quota>() {

        @Override
        protected Integer getProgressValue(Quota object) {
            int value;
            long allocated = 0;
            long used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getMemSizeMB();
                used = object.getGlobalQuotaVdsGroup().getMemSizeMBUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_MEM.equals(quotaVdsGroup.getMemSizeMB())) {
                        allocated += quotaVdsGroup.getMemSizeMB();
                        used += quotaVdsGroup.getMemSizeMBUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_MEM;
                        break;
                    }
                }
            }
            if (allocated == 0) {
                return 0;
            }
            value = (int) (((double) used / allocated) * 100);
            return allocated < 0 ? -1 : value > 100 ? 100 : value;
        }

        @Override
        public ApplicationConstants getaApplicationConstants() {
            return constants;
        }
    }, constants.usedMemoryQuota(), // $NON-NLS-1$
    "100px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            int value;
            long allocated = 0;
            long used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getMemSizeMB();
                used = object.getGlobalQuotaVdsGroup().getMemSizeMBUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_MEM.equals(quotaVdsGroup.getMemSizeMB())) {
                        allocated += quotaVdsGroup.getMemSizeMB();
                        used += quotaVdsGroup.getMemSizeMBUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_MEM;
                        break;
                    }
                }
            }
            value = (int) (allocated - used);
            String returnVal;
            if (allocated < 0) {
                returnVal = constants.unlimited();
            } else if (value <= 0) {
                // $NON-NLS-1$
                returnVal = "0 MB";
            } else if (value <= 5 * 1024) {
                // $NON-NLS-1$
                returnVal = value + "MB";
            } else {
                // $NON-NLS-1$
                returnVal = decimalFormat.format((double) value / 1024) + "GB";
            }
            return returnVal;
        }
    }, constants.freeMemory(), // $NON-NLS-1$
    "80px");
    getTable().addColumn(new QuotaPercentColumn<Quota>() {

        @Override
        protected Integer getProgressValue(Quota object) {
            int value;
            int allocated = 0;
            int used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getVirtualCpu();
                used = object.getGlobalQuotaVdsGroup().getVirtualCpuUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_VCPU.equals(quotaVdsGroup.getVirtualCpu())) {
                        allocated += quotaVdsGroup.getVirtualCpu();
                        used += quotaVdsGroup.getVirtualCpuUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_VCPU;
                        break;
                    }
                }
            }
            if (allocated == 0) {
                return 0;
            }
            value = (int) (((double) used / allocated) * 100);
            return allocated < 0 ? -1 : value > 100 ? 100 : value;
        }

        @Override
        public ApplicationConstants getaApplicationConstants() {
            return constants;
        }
    }, constants.runningCpuQuota(), // $NON-NLS-1$
    "100px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            int value;
            int allocated = 0;
            int used = 0;
            if (object.getGlobalQuotaVdsGroup() != null) {
                allocated = object.getGlobalQuotaVdsGroup().getVirtualCpu();
                used = object.getGlobalQuotaVdsGroup().getVirtualCpuUsage();
            } else {
                for (QuotaVdsGroup quotaVdsGroup : object.getQuotaVdsGroups()) {
                    if (!QuotaVdsGroup.UNLIMITED_VCPU.equals(quotaVdsGroup.getVirtualCpu())) {
                        allocated += quotaVdsGroup.getVirtualCpu();
                        used += quotaVdsGroup.getVirtualCpuUsage();
                    } else {
                        allocated = QuotaVdsGroup.UNLIMITED_VCPU;
                        break;
                    }
                }
            }
            value = allocated - used;
            String returnVal;
            if (allocated < 0) {
                returnVal = constants.unlimited();
            } else if (value <= 0) {
                // $NON-NLS-1$
                returnVal = "0";
            } else {
                // $NON-NLS-1$
                returnVal = value + "";
            }
            return returnVal;
        }
    }, constants.freeVcpu(), // $NON-NLS-1$
    "80px");
    getTable().addColumn(new QuotaPercentColumn<Quota>() {

        @Override
        protected Integer getProgressValue(Quota object) {
            int value;
            double allocated = 0;
            double used = 0;
            if (object.getGlobalQuotaStorage() != null) {
                allocated = object.getGlobalQuotaStorage().getStorageSizeGB();
                used = object.getGlobalQuotaStorage().getStorageSizeGBUsage();
            } else {
                for (QuotaStorage quotaStorage : object.getQuotaStorages()) {
                    if (!QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB())) {
                        allocated += quotaStorage.getStorageSizeGB();
                        used += quotaStorage.getStorageSizeGBUsage();
                    } else {
                        allocated = QuotaStorage.UNLIMITED;
                        break;
                    }
                }
            }
            if (allocated == 0) {
                return 0;
            }
            value = (int) ((used / allocated) * 100);
            return allocated < 0 ? -1 : value > 100 ? 100 : value;
        }

        @Override
        public ApplicationConstants getaApplicationConstants() {
            return constants;
        }
    }, constants.usedStorageQuota(), // $NON-NLS-1$
    "100px");
    getTable().addColumn(new TextColumnWithTooltip<Quota>() {

        @Override
        public String getValue(Quota object) {
            double value;
            double allocated = 0;
            double used = 0;
            if (object.getGlobalQuotaStorage() != null) {
                allocated = object.getGlobalQuotaStorage().getStorageSizeGB();
                used = object.getGlobalQuotaStorage().getStorageSizeGBUsage();
            } else {
                for (QuotaStorage quotaStorage : object.getQuotaStorages()) {
                    if (!QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB())) {
                        allocated += quotaStorage.getStorageSizeGB();
                        used += quotaStorage.getStorageSizeGBUsage();
                    } else {
                        allocated = QuotaStorage.UNLIMITED;
                        break;
                    }
                }
            }
            value = allocated - used;
            String returnVal;
            if (allocated < 0) {
                returnVal = constants.unlimited();
            } else if (value <= 0) {
                // $NON-NLS-1$
                returnVal = "0 GB";
            } else {
                returnVal = diskSizeRenderer.render(value);
            }
            return returnVal;
        }
    }, constants.freeStorage(), // $NON-NLS-1$
    "80px");
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.addQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.editQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.copyQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCloneCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Quota>(constants.removeQuota()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
}
#end_block

#method_before
private void SystemTree_ItemChanged(Object sender, EventArgs args) {
    // Reset tags tree to the root item.
    getTagList().getSelectedItemsChangedEvent().removeListener(this);
    getTagList().getResetCommand().Execute();
    UpdateHasSelectedTags();
    getTagList().getSelectedItemsChangedEvent().addListener(this);
    SystemTreeItemModel model = (SystemTreeItemModel) getSystemTree().getSelectedItem();
    if (model == null) {
        return;
    }
    // Update items availability depending on system tree selection.
    dataCenterList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.System);
    clusterList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Clusters || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.Network || model.getType() == SystemTreeItemType.System);
    hostList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Hosts || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.Network || model.getType() == SystemTreeItemType.System);
    volumeList.setIsAvailable(model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Volume || model.getType() == SystemTreeItemType.Volumes || model.getType() == SystemTreeItemType.System);
    if (model.getType() == SystemTreeItemType.Cluster) {
        volumeList.setIsAvailable(false);
    }
    storageList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Storages || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.System);
    quotaList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter);
    boolean isDataStorage = false;
    if (model.getType() == SystemTreeItemType.Storage) {
        storage_domains storage = (storage_domains) model.getEntity();
        isDataStorage = storage.getstorage_domain_type() == StorageDomainType.Data || storage.getstorage_domain_type() == StorageDomainType.Master;
    }
    diskList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || isDataStorage || model.getType() == SystemTreeItemType.System);
    vmList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Network || isDataStorage || model.getType() == SystemTreeItemType.VMs || model.getType() == SystemTreeItemType.System);
    if (poolList != null) {
        poolList.setIsAvailable(model.getType() == SystemTreeItemType.System);
    }
    templateList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Network || isDataStorage || model.getType() == SystemTreeItemType.Templates || model.getType() == SystemTreeItemType.System);
    if (model.getType() == SystemTreeItemType.Cluster_Gluster) {
        VDSGroup cluster = (VDSGroup) model.getEntity();
        if (!cluster.supportsVirtService()) {
            vmList.setIsAvailable(false);
            templateList.setIsAvailable(false);
        }
    }
    userList.setIsAvailable(model.getType() == SystemTreeItemType.System);
    eventList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.System);
    reportsList.setIsAvailable(ReportInit.getInstance().isReportsEnabled() && ReportInit.getInstance().getDashboard(model.getType().toString()) != null);
    networkList.setIsAvailable(model.getType() == SystemTreeItemType.Network || model.getType() == SystemTreeItemType.Networks || model.getType() == SystemTreeItemType.System || model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Host);
    // Select a default item depending on system tree selection.
    ListModel oldSelectedItem = getSelectedItem();
    // Do not Change Tab if the Selection is the Reports
    if (!reportsList.getIsAvailable() || getSelectedItem() != reportsList) {
        switch(model.getType()) {
            case DataCenter:
                setSelectedItem(dataCenterList);
                break;
            case Clusters:
            case Cluster:
            case Cluster_Gluster:
                setSelectedItem(clusterList);
                break;
            case Hosts:
            case Host:
                setSelectedItem(hostList);
                break;
            case Volumes:
            case Volume:
                setSelectedItem(volumeList);
                break;
            case Storages:
            case Storage:
                setSelectedItem(storageList);
                break;
            case Templates:
                setSelectedItem(templateList);
                break;
            case VMs:
                setSelectedItem(vmList);
                break;
            case Disk:
                setSelectedItem(diskList);
                break;
            case Networks:
            case Network:
                setSelectedItem(networkList);
                break;
            default:
                // webadmin: redirect to default tab in case no tab is selected.
                if (getSelectedItem() == null) {
                    setSelectedItem(getDefaultItem());
                }
                break;
        }
    } else {
        reportsList.refreshReportModel();
    }
    // search string will be updated in OnSelectedItemChanged method.
    if (getSelectedItem() == oldSelectedItem) {
        // $NON-NLS-1$
        String prefix = "";
        // $NON-NLS-1$
        String search = "";
        RefObject<String> tempRef_prefix = new RefObject<String>(prefix);
        RefObject<String> tempRef_search = new RefObject<String>(search);
        SplitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search);
        prefix = tempRef_prefix.argvalue;
        search = tempRef_search.argvalue;
        setSearchStringPrefix(prefix);
        setSearchString(search);
        getSearchCommand().Execute();
        if (getSelectedItem() instanceof ISupportSystemTreeContext) {
            ISupportSystemTreeContext treeContext = (ISupportSystemTreeContext) getSelectedItem();
            treeContext.setSystemTreeSelectedItem((SystemTreeItemModel) getSystemTree().getSelectedItem());
        }
    }
}
#method_after
private void SystemTree_ItemChanged(Object sender, EventArgs args) {
    // Reset tags tree to the root item.
    getTagList().getSelectedItemsChangedEvent().removeListener(this);
    getTagList().getResetCommand().Execute();
    UpdateHasSelectedTags();
    getTagList().getSelectedItemsChangedEvent().addListener(this);
    SystemTreeItemModel model = (SystemTreeItemModel) getSystemTree().getSelectedItem();
    if (model == null) {
        return;
    }
    // Update items availability depending on system tree selection.
    dataCenterList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.System);
    clusterList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Clusters || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.Network || model.getType() == SystemTreeItemType.System);
    hostList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Hosts || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.Network || model.getType() == SystemTreeItemType.System);
    volumeList.setIsAvailable(model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Volume || model.getType() == SystemTreeItemType.Volumes || model.getType() == SystemTreeItemType.System);
    if (model.getType() == SystemTreeItemType.Cluster) {
        volumeList.setIsAvailable(false);
    }
    storageList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Storages || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.System);
    quotaList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter);
    boolean isDataStorage = false;
    if (model.getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) model.getEntity();
        isDataStorage = storage.getStorageDomainType() == StorageDomainType.Data || storage.getStorageDomainType() == StorageDomainType.Master;
    }
    diskList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || isDataStorage || model.getType() == SystemTreeItemType.System);
    vmList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Network || isDataStorage || model.getType() == SystemTreeItemType.VMs || model.getType() == SystemTreeItemType.System);
    if (poolList != null) {
        poolList.setIsAvailable(model.getType() == SystemTreeItemType.System);
    }
    templateList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Network || isDataStorage || model.getType() == SystemTreeItemType.Templates || model.getType() == SystemTreeItemType.System);
    if (model.getType() == SystemTreeItemType.Cluster_Gluster) {
        VDSGroup cluster = (VDSGroup) model.getEntity();
        if (!cluster.supportsVirtService()) {
            vmList.setIsAvailable(false);
            templateList.setIsAvailable(false);
            storageList.setIsAvailable(false);
        }
    }
    userList.setIsAvailable(model.getType() == SystemTreeItemType.System);
    eventList.setIsAvailable(model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Cluster_Gluster || model.getType() == SystemTreeItemType.Host || model.getType() == SystemTreeItemType.Storage || model.getType() == SystemTreeItemType.System);
    reportsList.setIsAvailable(ReportInit.getInstance().isReportsEnabled() && ReportInit.getInstance().getDashboard(model.getType().toString()) != null);
    networkList.setIsAvailable(model.getType() == SystemTreeItemType.Network || model.getType() == SystemTreeItemType.Networks || model.getType() == SystemTreeItemType.System || model.getType() == SystemTreeItemType.DataCenter || model.getType() == SystemTreeItemType.Cluster || model.getType() == SystemTreeItemType.Host);
    // Select a default item depending on system tree selection.
    ListModel oldSelectedItem = getSelectedItem();
    // Do not Change Tab if the Selection is the Reports
    if (!reportsList.getIsAvailable() || getSelectedItem() != reportsList) {
        switch(model.getType()) {
            case DataCenter:
                setSelectedItem(dataCenterList);
                break;
            case Clusters:
            case Cluster:
            case Cluster_Gluster:
                setSelectedItem(clusterList);
                break;
            case Hosts:
            case Host:
                setSelectedItem(hostList);
                break;
            case Volumes:
            case Volume:
                setSelectedItem(volumeList);
                break;
            case Storages:
            case Storage:
                setSelectedItem(storageList);
                break;
            case Templates:
                setSelectedItem(templateList);
                break;
            case VMs:
                setSelectedItem(vmList);
                break;
            case Disk:
                setSelectedItem(diskList);
                break;
            case Networks:
            case Network:
                setSelectedItem(networkList);
                break;
            default:
                // webadmin: redirect to default tab in case no tab is selected.
                if (getSelectedItem() == null) {
                    setSelectedItem(getDefaultItem());
                }
                break;
        }
    } else {
        reportsList.refreshReportModel();
    }
    // search string will be updated in OnSelectedItemChanged method.
    if (getSelectedItem() == oldSelectedItem) {
        // $NON-NLS-1$
        String prefix = "";
        // $NON-NLS-1$
        String search = "";
        RefObject<String> tempRef_prefix = new RefObject<String>(prefix);
        RefObject<String> tempRef_search = new RefObject<String>(search);
        SplitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search);
        prefix = tempRef_prefix.argvalue;
        search = tempRef_search.argvalue;
        setSearchStringPrefix(prefix);
        setSearchString(search);
        getSearchCommand().Execute();
        if (getSelectedItem() instanceof ISupportSystemTreeContext) {
            ISupportSystemTreeContext treeContext = (ISupportSystemTreeContext) getSelectedItem();
            treeContext.setSystemTreeSelectedItem((SystemTreeItemModel) getSystemTree().getSelectedItem());
        }
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.equals(SelectedItemsChangedEventDefinition) && sender == getTagList()) {
        TagListModel_SelectedItemsChanged(sender, args);
    } else if (ev.equals(BookmarkListModel.NavigatedEventDefinition) && sender == getBookmarkList()) {
        BookmarkListModel_Navigated(sender, (BookmarkEventArgs) args);
    } else if (ev.equals(SelectedItemChangedEventDefinition) && sender == getSystemTree()) {
        SystemTree_ItemChanged(sender, args);
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(SelectedItemsChangedEventDefinition) && sender == getTagList()) {
        TagListModel_SelectedItemsChanged(sender, args);
    } else if (ev.matchesDefinition(BookmarkListModel.NavigatedEventDefinition) && sender == getBookmarkList()) {
        BookmarkListModel_Navigated(sender, (BookmarkEventArgs) args);
    } else if (ev.matchesDefinition(SelectedItemChangedEventDefinition) && sender == getSystemTree()) {
        SystemTree_ItemChanged(sender, args);
    }
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getSearchCommand()) {
        Search();
    } else if (command == getAboutCommand()) {
        About();
    } else if (command == getSignOutCommand()) {
        SignOut();
    } else if (command == getConfigureCommand()) {
        Configure();
    } else if (command == getClearSearchStringCommand()) {
        ClearSearchString();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getSearchCommand()) {
        Search();
    } else if (command == getSignOutCommand()) {
        SignOut();
    } else if (command == getConfigureCommand()) {
        Configure();
    } else if (command == getClearSearchStringCommand()) {
        ClearSearchString();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    FrontendFailureEventArgs failureArgs = (FrontendFailureEventArgs) args;
    if (failureArgs.getMessage() != null) {
        errorPopupManager.show(MESSAGES.uiCommonFrontendFailure(ErrorMessageFormatter.formatMessage(failureArgs.getMessage())));
    } else if (failureArgs.getMessages() != null) {
        errorPopupManager.show(MESSAGES.uiCommonFrontendFailure(ErrorMessageFormatter.formatMessages(failureArgs.getMessages())));
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    FrontendFailureEventArgs failureArgs = (FrontendFailureEventArgs) args;
    if (failureArgs.getMessage() != null) {
        errorPopupManager.show(messages.uiCommonRunActionFailed(ErrorMessageFormatter.formatMessage(failureArgs.getMessage())));
    } else if (failureArgs.getMessages() != null) {
        errorPopupManager.show(messages.uiCommonRunActionFailed(ErrorMessageFormatter.formatMessages(failureArgs.getMessages())));
    }
}
#end_block

#method_before
private void NewDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newDomainTitle());
    // $NON-NLS-1$
    model.setHashName("new_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    // putting all Data domains at the beginning on purpose (so when choosing the
    // first selectable storage type/function, it will be a Data one, if relevant).
    NfsStorageModel nfsDataModel = new NfsStorageModel();
    nfsDataModel.setRole(StorageDomainType.Data);
    items.add(nfsDataModel);
    IscsiStorageModel iscsiDataModel = new IscsiStorageModel();
    iscsiDataModel.setRole(StorageDomainType.Data);
    iscsiDataModel.setIsGrouppedByTarget(true);
    items.add(iscsiDataModel);
    FcpStorageModel fcpDataModel = new FcpStorageModel();
    fcpDataModel.setRole(StorageDomainType.Data);
    items.add(fcpDataModel);
    LocalStorageModel localDataModel = new LocalStorageModel();
    localDataModel.setRole(StorageDomainType.Data);
    items.add(localDataModel);
    PosixStorageModel posixDataModel = new PosixStorageModel();
    posixDataModel.setRole(StorageDomainType.Data);
    items.add(posixDataModel);
    NfsStorageModel nfsIsoModel = new NfsStorageModel();
    nfsIsoModel.setRole(StorageDomainType.ISO);
    items.add(nfsIsoModel);
    NfsStorageModel nfsExportModel = new NfsStorageModel();
    nfsExportModel.setRole(StorageDomainType.ImportExport);
    items.add(nfsExportModel);
    IscsiStorageModel iscsiExportModel = new IscsiStorageModel();
    iscsiExportModel.setRole(StorageDomainType.ImportExport);
    iscsiExportModel.setIsGrouppedByTarget(true);
    items.add(iscsiExportModel);
    FcpStorageModel fcpExportModel = new FcpStorageModel();
    fcpExportModel.setRole(StorageDomainType.ImportExport);
    items.add(fcpExportModel);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnSave", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#method_after
private void NewDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newDomainTitle());
    // $NON-NLS-1$
    model.setHashName("new_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    // putting all Data domains at the beginning on purpose (so when choosing the
    // first selectable storage type/function, it will be a Data one, if relevant).
    NfsStorageModel nfsDataModel = new NfsStorageModel();
    nfsDataModel.setRole(StorageDomainType.Data);
    items.add(nfsDataModel);
    IscsiStorageModel iscsiDataModel = new IscsiStorageModel();
    iscsiDataModel.setRole(StorageDomainType.Data);
    iscsiDataModel.setIsGrouppedByTarget(true);
    items.add(iscsiDataModel);
    FcpStorageModel fcpDataModel = new FcpStorageModel();
    fcpDataModel.setRole(StorageDomainType.Data);
    items.add(fcpDataModel);
    LocalStorageModel localDataModel = new LocalStorageModel();
    localDataModel.setRole(StorageDomainType.Data);
    items.add(localDataModel);
    PosixStorageModel posixDataModel = new PosixStorageModel();
    posixDataModel.setRole(StorageDomainType.Data);
    items.add(posixDataModel);
    NfsStorageModel nfsIsoModel = new NfsStorageModel();
    nfsIsoModel.setRole(StorageDomainType.ISO);
    items.add(nfsIsoModel);
    NfsStorageModel nfsExportModel = new NfsStorageModel();
    nfsExportModel.setRole(StorageDomainType.ImportExport);
    items.add(nfsExportModel);
    IscsiStorageModel iscsiExportModel = new IscsiStorageModel();
    iscsiExportModel.setRole(StorageDomainType.ImportExport);
    iscsiExportModel.setIsGrouppedByTarget(true);
    items.add(iscsiExportModel);
    FcpStorageModel fcpExportModel = new FcpStorageModel();
    fcpExportModel.setRole(StorageDomainType.ImportExport);
    items.add(fcpExportModel);
    GlusterStorageModel GlusterDataModel = new GlusterStorageModel();
    GlusterDataModel.setRole(StorageDomainType.Data);
    items.add(GlusterDataModel);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnSave", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#end_block

#method_before
private void Edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageEditable = model.isStorageActive() || model.isNewStorage();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageEditable);
    model.getDescription().setIsChangable(isStorageEditable);
    model.getAvailableStorageItems().setIsChangable(isStorageEditable);
    model.setIsChangable(isStorageEditable);
    IStorageModel item = null;
    switch(storage.getStorageType()) {
        case NFS:
            item = prepareNfsStorageForEdit(storage);
            boolean isNfsPathEditable = isNfsPathEditable(storage);
            isStorageEditable = isStorageEditable || isNfsPathEditable;
            break;
        case FCP:
            item = prepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = prepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = prepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = preparePosixStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageEditable) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#method_after
private void Edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageEditable = model.isStorageActive() || model.isNewStorage();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageEditable);
    model.getDescription().setIsChangable(isStorageEditable);
    model.getAvailableStorageItems().setIsChangable(isStorageEditable);
    model.setIsChangable(isStorageEditable);
    IStorageModel item = null;
    switch(storage.getStorageType()) {
        case NFS:
            item = prepareNfsStorageForEdit(storage);
            boolean isNfsPathEditable = isNfsPathEditable(storage);
            isStorageEditable = isStorageEditable || isNfsPathEditable;
            // when storage is active, only SPM can perform actions on it, thus it is set above that host is not changeable.
            // If storage is editable but not active (maintenance) - any host can perform the edit so the changeable here is set based on that
            model.getHost().setIsChangable(isNfsPathEditable);
            break;
        case FCP:
            item = prepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = prepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = prepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = preparePosixStorageForEdit(storage);
            break;
        case GLUSTERFS:
            item = prepareGlusterStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageEditable) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#end_block

#method_before
private void OnSavePostNameValidation() {
    StorageModel model = (StorageModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    if (model.getSelectedItem() instanceof NfsStorageModel) {
        saveNfsStorage();
    } else if (model.getSelectedItem() instanceof LocalStorageModel) {
        saveLocalStorage();
    } else if (model.getSelectedItem() instanceof PosixStorageModel) {
        savePosixStorage();
    } else {
        saveSanStorage();
    }
}
#method_after
private void OnSavePostNameValidation() {
    StorageModel model = (StorageModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    if (model.getSelectedItem() instanceof NfsStorageModel) {
        saveNfsStorage();
    } else if (model.getSelectedItem() instanceof LocalStorageModel) {
        saveLocalStorage();
    } else if (model.getSelectedItem() instanceof PosixStorageModel) {
        savePosixStorage();
    } else if (model.getSelectedItem() instanceof GlusterStorageModel) {
        saveGlusterStorage();
    } else {
        saveSanStorage();
    }
}
#end_block

#method_before
private void updateNfsPath() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    connection.setconnection(path);
    connection.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        connection.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        connection.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        connection.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, host.getId());
    parameters.setStoragePoolId(host.getStoragePoolId());
    Frontend.RunAction(VdcActionType.UpdateStorageServerConnection, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#method_after
private void updateNfsPath() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    Guid hostId = Guid.Empty;
    Guid storagePoolId = Guid.Empty;
    if (host != null) {
        hostId = host.getId();
        storagePoolId = host.getStoragePoolId();
    }
    connection.setconnection(path);
    connection.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        connection.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        connection.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        connection.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, hostId);
    parameters.setStoragePoolId(storagePoolId);
    Frontend.RunAction(VdcActionType.UpdateStorageServerConnection, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#end_block

#method_before
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        saveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        saveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        savePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        saveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#method_after
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        saveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        saveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        savePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveGluster")) {
        saveGlusterStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        saveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#end_block

#method_before
private void UpdateGrayedOut(LunModel lunModel) {
    Constants constants = ConstantsManager.getInstance().getConstants();
    Messages messages = ConstantsManager.getInstance().getMessages();
    LUNs lun = (LUNs) lunModel.getEntity();
    boolean nonEmpty = lun.getStorageDomainId() != null || lun.getDiskId() != null || lun.getStatus() == LunStatus.Unusable;
    // Graying out LUNs
    lunModel.setIsGrayedOut(isIgnoreGrayedOut() ? lun.getDiskId() != null : nonEmpty);
    // Adding 'GrayedOutReasons'
    if (lun.getStorageDomainId() != null) {
        lunModel.getGrayedOutReasons().add(messages.lunAlreadyPartOfStorageDomainWarning(lun.getStorageDomainName()));
    } else if (lun.getDiskId() != null) {
        lunModel.getGrayedOutReasons().add(messages.lunUsedByDiskWarning(lun.getDiskAlias()));
    } else if (lun.getStatus() == LunStatus.Unusable) {
        lunModel.getGrayedOutReasons().add(constants.lunUnusable());
    }
}
#method_after
private void UpdateGrayedOut(LunModel lunModel) {
    Constants constants = ConstantsManager.getInstance().getConstants();
    Messages messages = ConstantsManager.getInstance().getMessages();
    LUNs lun = (LUNs) lunModel.getEntity();
    boolean nonEmpty = lun.getStorageDomainId() != null || lun.getDiskId() != null || lun.getStatus() == LunStatus.Unusable;
    // Graying out LUNs
    lunModel.setIsGrayedOut(isIgnoreGrayedOut() ? lun.getDiskId() != null : nonEmpty);
    // Adding 'GrayedOutReasons'
    if (lun.getDiskId() != null) {
        lunModel.getGrayedOutReasons().add(messages.lunUsedByDiskWarning(lun.getDiskAlias()));
    } else if (lun.getStorageDomainId() != null) {
        lunModel.getGrayedOutReasons().add(messages.lunAlreadyPartOfStorageDomainWarning(lun.getStorageDomainName()));
    } else if (lun.getStatus() == LunStatus.Unusable) {
        lunModel.getGrayedOutReasons().add(constants.lunUnusable());
    }
}
#end_block

#method_before
private void InitializeItems(List<LunModel> newLuns, List<SanTargetModel> newTargets) {
    if (getIsGrouppedByTarget()) {
        if (getItems() == null) {
            setItems(new ObservableCollection<SanTargetModel>());
            isTargetModelList = true;
        } else {
            // Convert to list of another type as neccessary.
            if (!isTargetModelList) {
                setItems(ToTargetModelList((List<LunModel>) getItems()));
            }
        }
        ArrayList<SanTargetModel> items = new ArrayList<SanTargetModel>();
        items.addAll((List<SanTargetModel>) getItems());
        // Add new targets.
        if (newTargets != null) {
            for (SanTargetModel newItem : newTargets) {
                if (Linq.FirstOrDefault(items, new Linq.TargetPredicate(newItem)) == null) {
                    items.add(newItem);
                }
            }
        }
        // Merge luns into targets.
        if (newLuns != null) {
            MergeLunsToTargets(newLuns, items);
        }
        setItems(items);
        UpdateLoginAllAvailability();
    } else {
        if (getItems() == null) {
            setItems(new ObservableCollection<LunModel>());
            isTargetModelList = false;
        } else {
            // Convert to list of another type as neccessary.
            if (isTargetModelList) {
                setItems(ToLunModelList((List<SanTargetModel>) getItems()));
            }
        }
        ArrayList<LunModel> items = new ArrayList<LunModel>();
        items.addAll((List<LunModel>) getItems());
        // Add new LUNs.
        if (newLuns != null) {
            for (LunModel newItem : newLuns) {
                LunModel existingItem = Linq.FirstOrDefault(items, new Linq.LunPredicate(newItem));
                if (existingItem == null) {
                    items.add(newItem);
                } else {
                    existingItem.setIsIncluded(existingItem.getIsIncluded() || newItem.getIsIncluded());
                }
            }
        }
        setItems(items);
    }
}
#method_after
private void InitializeItems(List<LunModel> newLuns, List<SanTargetModel> newTargets) {
    if (getIsGrouppedByTarget()) {
        if (getItems() == null) {
            setItems(new ObservableCollection<SanTargetModel>());
            isTargetModelList = true;
        } else {
            // Convert to list of another type as neccessary.
            if (!isTargetModelList) {
                setItems(ToTargetModelList((List<LunModel>) getItems()));
            }
        }
        ArrayList<SanTargetModel> items = new ArrayList<SanTargetModel>();
        items.addAll((List<SanTargetModel>) getItems());
        // Add new targets.
        if (newTargets != null) {
            for (SanTargetModel newItem : newTargets) {
                if (Linq.FirstOrDefault(items, new Linq.TargetPredicate(newItem)) == null) {
                    items.add(newItem);
                }
            }
        }
        // Merge luns into targets.
        if (newLuns != null) {
            MergeLunsToTargets(newLuns, items);
        }
        setItems(items);
        UpdateLoginAllAvailability();
    } else {
        if (getItems() == null) {
            setItems(new ObservableCollection<LunModel>());
            isTargetModelList = false;
        } else {
            // Convert to list of another type as neccessary.
            if (isTargetModelList) {
                setItems(ToLunModelList((List<SanTargetModel>) getItems()));
            }
        }
        ArrayList<LunModel> items = new ArrayList<LunModel>();
        items.addAll((List<LunModel>) getItems());
        // Add new LUNs.
        if (newLuns != null) {
            for (LunModel newItem : newLuns) {
                LunModel existingItem = Linq.FirstOrDefault(items, new Linq.LunPredicate(newItem));
                if (existingItem == null) {
                    items.add(newItem);
                } else {
                    existingItem.setIsIncluded(existingItem.getIsIncluded() || newItem.getIsIncluded());
                }
            }
        }
        setItems(items);
    }
    if (!isMultiSelection() && newLuns != null) {
        addLunModelSelectionEventListeners(newLuns);
    }
}
#end_block

#method_before
private void MergeLunsToTargets(List<LunModel> newLuns, List<SanTargetModel> targets) {
    for (LunModel lun : newLuns) {
        for (SanTargetModel target : lun.getTargets()) {
            SanTargetModel item = Linq.FirstOrDefault(targets, new Linq.TargetPredicate(target));
            if (item == null) {
                item = target;
                targets.add(item);
            }
            LunModel currLun = Linq.FirstOrDefault(item.getLuns(), new Linq.LunPredicate(lun));
            if (currLun == null) {
                item.getLuns().add(lun);
            } else {
                currLun.setLunId(lun.getLunId());
                currLun.setVendorId(lun.getVendorId());
                currLun.setProductId(lun.getProductId());
                currLun.setSerial(lun.getSerial());
                currLun.setMultipathing(lun.getMultipathing());
                currLun.setTargets((ArrayList) targets);
                currLun.setSize(lun.getSize());
                currLun.setIsAccessible(lun.getIsAccessible());
                currLun.setStatus(lun.getStatus());
                currLun.setIsIncluded(lun.getIsIncluded());
                currLun.setIsSelected(lun.getIsSelected());
                currLun.setEntity(lun.getEntity());
            }
        }
        // Adding PropertyEventListener to LunModel
        if (!isMultiSelection()) {
            lun.getPropertyChangedEvent().removeListener(lunModelEventListener);
            lun.getPropertyChangedEvent().addListener(lunModelEventListener);
        }
    }
}
#method_after
private void MergeLunsToTargets(List<LunModel> newLuns, List<SanTargetModel> targets) {
    for (LunModel lun : newLuns) {
        for (SanTargetModel target : lun.getTargets()) {
            SanTargetModel item = Linq.FirstOrDefault(targets, new Linq.TargetPredicate(target));
            if (item == null) {
                item = target;
                targets.add(item);
            }
            LunModel currLun = Linq.FirstOrDefault(item.getLuns(), new Linq.LunPredicate(lun));
            if (currLun == null) {
                item.getLuns().add(lun);
            } else {
                currLun.setLunId(lun.getLunId());
                currLun.setVendorId(lun.getVendorId());
                currLun.setProductId(lun.getProductId());
                currLun.setSerial(lun.getSerial());
                currLun.setMultipathing(lun.getMultipathing());
                currLun.setTargets((ArrayList) targets);
                currLun.setSize(lun.getSize());
                currLun.setIsAccessible(lun.getIsAccessible());
                currLun.setStatus(lun.getStatus());
                currLun.setIsIncluded(lun.getIsIncluded());
                currLun.setIsSelected(lun.getIsSelected());
                currLun.setEntity(lun.getEntity());
            }
        }
    }
}
#end_block

#method_before
private void NewDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newDomainTitle());
    // $NON-NLS-1$
    model.setHashName("new_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    // putting all Data domains at the beginning on purpose (so when choosing the
    // first selectable storage type/function, it will be a Data one, if relevant).
    NfsStorageModel nfsDataModel = new NfsStorageModel();
    nfsDataModel.setRole(StorageDomainType.Data);
    items.add(nfsDataModel);
    IscsiStorageModel iscsiDataModel = new IscsiStorageModel();
    iscsiDataModel.setRole(StorageDomainType.Data);
    iscsiDataModel.setIsGrouppedByTarget(true);
    items.add(iscsiDataModel);
    FcpStorageModel fcpDataModel = new FcpStorageModel();
    fcpDataModel.setRole(StorageDomainType.Data);
    items.add(fcpDataModel);
    LocalStorageModel localDataModel = new LocalStorageModel();
    localDataModel.setRole(StorageDomainType.Data);
    items.add(localDataModel);
    PosixStorageModel posixDataModel = new PosixStorageModel();
    posixDataModel.setRole(StorageDomainType.Data);
    items.add(posixDataModel);
    NfsStorageModel nfsIsoModel = new NfsStorageModel();
    nfsIsoModel.setRole(StorageDomainType.ISO);
    items.add(nfsIsoModel);
    NfsStorageModel nfsExportModel = new NfsStorageModel();
    nfsExportModel.setRole(StorageDomainType.ImportExport);
    items.add(nfsExportModel);
    IscsiStorageModel iscsiExportModel = new IscsiStorageModel();
    iscsiExportModel.setRole(StorageDomainType.ImportExport);
    iscsiExportModel.setIsGrouppedByTarget(true);
    items.add(iscsiExportModel);
    FcpStorageModel fcpExportModel = new FcpStorageModel();
    fcpExportModel.setRole(StorageDomainType.ImportExport);
    items.add(fcpExportModel);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnSave", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#method_after
private void NewDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newDomainTitle());
    // $NON-NLS-1$
    model.setHashName("new_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    // putting all Data domains at the beginning on purpose (so when choosing the
    // first selectable storage type/function, it will be a Data one, if relevant).
    NfsStorageModel nfsDataModel = new NfsStorageModel();
    nfsDataModel.setRole(StorageDomainType.Data);
    items.add(nfsDataModel);
    IscsiStorageModel iscsiDataModel = new IscsiStorageModel();
    iscsiDataModel.setRole(StorageDomainType.Data);
    iscsiDataModel.setIsGrouppedByTarget(true);
    items.add(iscsiDataModel);
    FcpStorageModel fcpDataModel = new FcpStorageModel();
    fcpDataModel.setRole(StorageDomainType.Data);
    items.add(fcpDataModel);
    LocalStorageModel localDataModel = new LocalStorageModel();
    localDataModel.setRole(StorageDomainType.Data);
    items.add(localDataModel);
    PosixStorageModel posixDataModel = new PosixStorageModel();
    posixDataModel.setRole(StorageDomainType.Data);
    items.add(posixDataModel);
    NfsStorageModel nfsIsoModel = new NfsStorageModel();
    nfsIsoModel.setRole(StorageDomainType.ISO);
    items.add(nfsIsoModel);
    NfsStorageModel nfsExportModel = new NfsStorageModel();
    nfsExportModel.setRole(StorageDomainType.ImportExport);
    items.add(nfsExportModel);
    IscsiStorageModel iscsiExportModel = new IscsiStorageModel();
    iscsiExportModel.setRole(StorageDomainType.ImportExport);
    iscsiExportModel.setIsGrouppedByTarget(true);
    items.add(iscsiExportModel);
    FcpStorageModel fcpExportModel = new FcpStorageModel();
    fcpExportModel.setRole(StorageDomainType.ImportExport);
    items.add(fcpExportModel);
    GlusterStorageModel GlusterDataModel = new GlusterStorageModel();
    GlusterDataModel.setRole(StorageDomainType.Data);
    items.add(GlusterDataModel);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnSave", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#end_block

#method_before
private void Edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageEditable = model.isStorageActive() || model.isNewStorage();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageEditable);
    model.getDescription().setIsChangable(isStorageEditable);
    model.getAvailableStorageItems().setIsChangable(isStorageEditable);
    model.setIsChangable(isStorageEditable);
    IStorageModel item = null;
    switch(storage.getStorageType()) {
        case NFS:
            item = PrepareNfsStorageForEdit(storage);
            boolean isPathAndOverrideOptsEditable = isNfsPathEditable(storage);
            isStorageEditable = isStorageEditable || isPathAndOverrideOptsEditable;
            break;
        case FCP:
            item = PrepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = PrepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = PrepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = PreparePosixStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageEditable) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#method_after
private void Edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageEditable = model.isStorageActive() || model.isNewStorage();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageEditable);
    model.getDescription().setIsChangable(isStorageEditable);
    model.getAvailableStorageItems().setIsChangable(isStorageEditable);
    model.setIsChangable(isStorageEditable);
    IStorageModel item = null;
    switch(storage.getStorageType()) {
        case NFS:
            item = PrepareNfsStorageForEdit(storage);
            boolean isNfsPathEditable = isNfsPathEditable(storage);
            isStorageEditable = isStorageEditable || isNfsPathEditable;
            // when storage is active, only SPM can perform actions on it, thus it is set above that host is not changeable.
            // If storage is editable but not active (maintenance) - any host can perform the edit so the changeable here is set based on that
            model.getHost().setIsChangable(isNfsPathEditable);
            break;
        case FCP:
            item = PrepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = PrepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = PrepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = PreparePosixStorageForEdit(storage);
            break;
        case GLUSTERFS:
            item = prepareGlusterStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageEditable) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#end_block

#method_before
private IStorageModel PrepareNfsStorageForEdit(StorageDomain storage) {
    final NfsStorageModel model = new NfsStorageModel();
    model.setRole(storage.getStorageDomainType());
    boolean isPathAndOverrideOptsEditable = isNfsPathEditable(storage);
    model.getPath().setIsChangable(isPathAndOverrideOptsEditable);
    model.getOverride().setIsChangable(isPathAndOverrideOptsEditable);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getRetransmissions().setEntity(connection.getNfsRetrans());
            model.getTimeout().setEntity(connection.getNfsTimeo());
            for (Object item : model.getVersion().getItems()) {
                EntityModel itemModel = (EntityModel) item;
                boolean noNfsVersion = itemModel.getEntity() == null && connection.getNfsVersion() == null;
                boolean foundNfsVersion = itemModel.getEntity() != null && itemModel.getEntity().equals(connection.getNfsVersion());
                if (noNfsVersion || foundNfsVersion) {
                    model.getVersion().setSelectedItem(item);
                    break;
                }
            }
            // If any settings were overridden, reflect this in the override checkbox
            model.getOverride().setEntity(connection.getNfsVersion() != null || connection.getNfsRetrans() != null || connection.getNfsTimeo() != null);
        }
    }), storage.getStorage(), true);
    return model;
}
#method_after
private IStorageModel PrepareNfsStorageForEdit(StorageDomain storage) {
    final NfsStorageModel model = new NfsStorageModel();
    model.setRole(storage.getStorageDomainType());
    boolean isNfsPathEditable = isNfsPathEditable(storage);
    model.getPath().setIsChangable(isNfsPathEditable);
    model.getOverride().setIsChangable(isNfsPathEditable);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getRetransmissions().setEntity(connection.getNfsRetrans());
            model.getTimeout().setEntity(connection.getNfsTimeo());
            for (Object item : model.getVersion().getItems()) {
                EntityModel itemModel = (EntityModel) item;
                boolean noNfsVersion = itemModel.getEntity() == null && connection.getNfsVersion() == null;
                boolean foundNfsVersion = itemModel.getEntity() != null && itemModel.getEntity().equals(connection.getNfsVersion());
                if (noNfsVersion || foundNfsVersion) {
                    model.getVersion().setSelectedItem(item);
                    break;
                }
            }
            // If any settings were overridden, reflect this in the override checkbox
            model.getOverride().setEntity(connection.getNfsVersion() != null || connection.getNfsRetrans() != null || connection.getNfsTimeo() != null);
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private void CleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.RunAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId), null, this);
}
#method_after
private void CleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.RunAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId), null, this);
}
#end_block

#method_before
private void OnSavePostNameValidation() {
    StorageModel model = (StorageModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    if (model.getSelectedItem() instanceof NfsStorageModel) {
        SaveNfsStorage();
    } else if (model.getSelectedItem() instanceof LocalStorageModel) {
        SaveLocalStorage();
    } else if (model.getSelectedItem() instanceof PosixStorageModel) {
        SavePosixStorage();
    } else {
        SaveSanStorage();
    }
}
#method_after
private void OnSavePostNameValidation() {
    StorageModel model = (StorageModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    if (model.getSelectedItem() instanceof NfsStorageModel) {
        SaveNfsStorage();
    } else if (model.getSelectedItem() instanceof LocalStorageModel) {
        SaveLocalStorage();
    } else if (model.getSelectedItem() instanceof PosixStorageModel) {
        SavePosixStorage();
    } else if (model.getSelectedItem() instanceof GlusterStorageModel) {
        saveGlusterStorage();
    } else {
        SaveSanStorage();
    }
}
#end_block

#method_before
private void Cancel() {
    setWindow(null);
}
#method_after
private void Cancel() {
    setWindow(null);
    Frontend.Unsubscribe();
}
#end_block

#method_before
public void SaveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType((String) posixModel.getVfsType().getEntity());
    connection.setMountOptions((String) posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddPosixFsStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType((String) posixModel.getVfsType().getEntity());
    connection.setMountOptions((String) posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddPosixFsStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    connection = new StorageServerConnections();
    connection.setid(selectedItem.getStorage());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        if (isNfsPathEditable(storage)) {
            updateNfsPath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#method_after
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    connection = new StorageServerConnections();
    connection.setid(selectedItem.getStorage());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        StorageDomain storageDomain = (StorageDomain) getSelectedItem();
        if (isNfsPathEditable(storageDomain)) {
            updateNfsPath();
        } else {
            Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    StorageListModel storageListModel = (StorageListModel) result.getState();
                    storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void updateNfsPath() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    connection.setconnection(path);
    connection.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        connection.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        connection.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        connection.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    Frontend.RunAction(VdcActionType.UpdateStorageServerConnection, new StorageServerConnectionParametersBase(connection, host.getId()), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#method_after
private void updateNfsPath() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    Guid hostId = Guid.Empty;
    Guid storagePoolId = Guid.Empty;
    if (host != null) {
        hostId = host.getId();
        storagePoolId = host.getStoragePoolId();
    }
    connection.setconnection(path);
    connection.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        connection.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        connection.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        connection.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, hostId);
    parameters.setStoragePoolId(storagePoolId);
    Frontend.RunAction(VdcActionType.UpdateStorageServerConnection, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#end_block

#method_before
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#method_after
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#end_block

#method_before
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = false;
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            if (storageListModel.removeConnection) {
                storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
                storageListModel.removeConnection = false;
            }
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = false;
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            if (storageListModel.removeConnection) {
                storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
                storageListModel.removeConnection = false;
            }
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        SaveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        SaveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        SavePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        SaveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#method_after
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        SaveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        SaveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        SavePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveGluster")) {
        saveGlusterStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        SaveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#end_block

#method_before
@Override
public void edit(NfsStorageModel object) {
    Driver.driver.edit(object);
    EntityModel version = (EntityModel) object.getVersion().getSelectedItem();
    versionReadOnlyEditor.asValueBox().setValue(version != null ? version.getTitle() : null);
    pathHintLabel.setVisible(object.getPath().getIsChangable());
    styleTextBoxEditor(pathEditor, object.getPath().getIsChangable());
    styleTextBoxEditor(timeoutEditor, object.getOverride().getIsChangable());
    styleTextBoxEditor(retransmissionsEditor, object.getOverride().getIsChangable());
    styleTextBoxEditor(versionReadOnlyEditor, object.getOverride().getIsChangable());
    setElementVisibility(versionEditor, object.getOverride().getIsChangable());
    setElementVisibility(versionReadOnlyEditor, !object.getOverride().getIsChangable());
    setElementVisibility(versionLabel, object.getVersion().getIsAvailable());
    setElementVisibility(retransmissionsLabel, object.getRetransmissions().getIsAvailable());
    setElementVisibility(timeoutLabel, object.getTimeout().getIsAvailable());
    // When all advanced fields are unavailable - hide the expander.
    boolean anyField = object.getVersion().getIsAvailable() || object.getRetransmissions().getIsAvailable() || object.getTimeout().getIsAvailable();
    expander.getElement().getStyle().setVisibility(anyField ? Style.Visibility.VISIBLE : Style.Visibility.HIDDEN);
}
#method_after
@Override
public void edit(NfsStorageModel object) {
    driver.edit(object);
    EntityModel version = (EntityModel) object.getVersion().getSelectedItem();
    versionReadOnlyEditor.asValueBox().setValue(version != null ? version.getTitle() : null);
    pathHintLabel.setVisible(object.getPath().getIsChangable());
    styleTextBoxEditor(pathEditor, object.getPath().getIsChangable());
    styleTextBoxEditor(timeoutEditor, object.getOverride().getIsChangable());
    styleTextBoxEditor(retransmissionsEditor, object.getOverride().getIsChangable());
    styleTextBoxEditor(versionReadOnlyEditor, object.getOverride().getIsChangable());
    setElementVisibility(versionEditor, object.getOverride().getIsChangable());
    setElementVisibility(versionReadOnlyEditor, !object.getOverride().getIsChangable());
    setElementVisibility(versionLabel, object.getVersion().getIsAvailable());
    setElementVisibility(retransmissionsLabel, object.getRetransmissions().getIsAvailable());
    setElementVisibility(timeoutLabel, object.getTimeout().getIsAvailable());
    // When all advanced fields are unavailable - hide the expander.
    boolean anyField = object.getVersion().getIsAvailable() || object.getRetransmissions().getIsAvailable() || object.getTimeout().getIsAvailable();
    expander.getElement().getStyle().setVisibility(anyField ? Style.Visibility.VISIBLE : Style.Visibility.HIDDEN);
}
#end_block

#method_before
@Override
public NfsStorageModel flush() {
    return Driver.driver.flush();
}
#method_after
@Override
public NfsStorageModel flush() {
    return driver.flush();
}
#end_block

#method_before
public void PostUpdateHost(Iterable<VDS> hosts) {
    // Filter hosts
    hosts = Linq.Where(hosts, new Linq.HostStatusPredicate(VDSStatus.Up));
    // Allow only hosts with version above 2.2 for export storage.
    ArrayList<VDS> list = new ArrayList<VDS>();
    if (getSelectedItem() != null && getSelectedItem().getRole() == StorageDomainType.ImportExport) {
        for (VDS host : hosts) {
            if (// $NON-NLS-1$
            host.getVdsGroupCompatibilityVersion().compareTo(new Version("2.2")) >= 0) {
                list.add(host);
            }
        }
        hosts = list;
    }
    VDS oldSelectedItem = (VDS) getHost().getSelectedItem();
    VDS selectedItem = null;
    // On Edit - only SPM is available.
    if (getStorage() != null) {
        hosts = Collections.singletonList(getSPM(hosts));
    }
    // Try to select previously selected host.
    if (oldSelectedItem != null) {
        selectedItem = Linq.FirstOrDefault(hosts, new Linq.HostPredicate(oldSelectedItem.getId()));
    }
    // Select a default - first host in the list.
    if (selectedItem == null) {
        selectedItem = Linq.FirstOrDefault(hosts);
    }
    getHost().setItems(hosts);
    getHost().setSelectedItem(selectedItem);
}
#method_after
public void PostUpdateHost(Iterable<VDS> hosts) {
    // Filter hosts
    hosts = Linq.Where(hosts, new Linq.HostStatusPredicate(VDSStatus.Up));
    // Allow only hosts with version above 2.2 for export storage.
    ArrayList<VDS> list = new ArrayList<VDS>();
    if (getSelectedItem() != null && getSelectedItem().getRole() == StorageDomainType.ImportExport) {
        for (VDS host : hosts) {
            if (// $NON-NLS-1$
            host.getVdsGroupCompatibilityVersion().compareTo(new Version("2.2")) >= 0) {
                list.add(host);
            }
        }
        hosts = list;
    }
    VDS oldSelectedItem = (VDS) getHost().getSelectedItem();
    VDS selectedItem = null;
    // any host can perform the operation, thus no need to filter to use just the SPM
    if (getStorage() != null && getStorage().getStatus() != StorageDomainStatus.Maintenance) {
        hosts = Collections.singletonList(getSPM(hosts));
    }
    // Try to select previously selected host.
    if (oldSelectedItem != null) {
        selectedItem = Linq.FirstOrDefault(hosts, new Linq.HostPredicate(oldSelectedItem.getId()));
    }
    // Select a default - first host in the list.
    if (selectedItem == null) {
        selectedItem = Linq.FirstOrDefault(hosts);
    }
    getHost().setItems(hosts);
    getHost().setSelectedItem(selectedItem);
}
#end_block

#method_before
public boolean Validate() {
    getHost().ValidateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    ValidateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    getDescription().ValidateEntity(new IValidation[] { new LengthValidation(BusinessEntitiesDefinitions.GENERAL_MAX_SIZE), new SpecialAsciiI18NOrNoneValidation() });
    return getName().getIsValid() && getHost().getIsValid() && getIsValid() && getSelectedItem().Validate() && getDescription().getIsValid();
}
#method_after
public boolean Validate() {
    ValidationResult result = new NotEmptyValidation().validate(getHost().getSelectedItem());
    if (!result.getSuccess()) {
        getHost().setIsValid(false);
        for (String reason : result.getReasons()) {
            getHost().getInvalidityReasons().add(reason);
        }
    } else {
        getHost().setIsValid(true);
    }
    ValidateSelectedItem(new NotEmptyValidation[] { new NotEmptyValidation() });
    getDescription().ValidateEntity(new IValidation[] { new LengthValidation(BusinessEntitiesDefinitions.GENERAL_MAX_SIZE), new SpecialAsciiI18NOrNoneValidation() });
    return getName().getIsValid() && getHost().getIsValid() && getIsValid() && getSelectedItem().Validate() && getDescription().getIsValid();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    StorageServerConnections connection = getParameters().getStorageServerConnection();
    // Check if the NFS path has a valid format
    if (connection.getstorage_type() == StorageType.NFS && !new NfsMountPointConstraint().isValid(connection.getconnection(), null)) {
        return failCanDoAction(VdcBllMessages.VALIDATION_STORAGE_CONNECTION_INVALID);
    }
    // Check if connection exists by id - otherwise there's nothing to update
    String connectionId = connection.getid();
    oldConnection = getDbFacade().getStorageServerConnectionDao().get(connectionId);
    if (oldConnection == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST);
    }
    return super.canDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    StorageServerConnections newConnectionDetails = getParameters().getStorageServerConnection();
    if (newConnectionDetails.getstorage_type() != StorageType.NFS) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
    }
    // Check if the NFS path has a valid format
    if (!new NfsMountPointConstraint().isValid(newConnectionDetails.getconnection(), null)) {
        return failCanDoAction(VdcBllMessages.VALIDATION_STORAGE_CONNECTION_INVALID);
    }
    Guid vdsmId = getParameters().getVdsId();
    if (vdsmId == null || vdsmId.equals(Guid.Empty)) {
        return failCanDoAction(VdcBllMessages.VDS_EMPTY_NAME_OR_ID);
    }
    // Check if connection exists by id - otherwise there's nothing to update
    String connectionId = newConnectionDetails.getid();
    StorageServerConnections oldConnection = getStorageConnDao().get(connectionId);
    if (oldConnection == null) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST);
    }
    if (!newConnectionDetails.getstorage_type().equals(oldConnection.getstorage_type())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE);
    }
    if (!oldConnection.getconnection().equals(newConnectionDetails.getconnection())) {
        // Check that there is no other connection with the new suggested path
        List<StorageServerConnections> connections = getStorageConnDao().getAllForStorage(newConnectionDetails.getconnection());
        if (!connections.isEmpty()) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS);
        }
    }
    if (domains == null) {
        domains = getStorageDomainsByConnId(newConnectionDetails.getid());
    }
    if (domains.isEmpty()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    } else if (domains.size() == 1) {
        setStorageDomain(domains.get(0));
    } else {
        String domainNames = createDomainNamesList(domains);
        addCanDoActionMessage(String.format("$domainNames %1$s", domainNames));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS);
    }
    // Check that the storage domain is in proper state to be edited
    if (!isConnectionEditable(getStorageDomain())) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE);
    }
    return super.canDoAction();
}
#end_block

#method_before
@Override
protected void executeCommand() {
    ConnectStorageServerVDSCommandParameters newConnectionParametersForVdsm = new ConnectStorageServerVDSCommandParameters(getParameters().getVdsId(), getParameters().getStoragePoolId(), getParameters().getStorageServerConnection().getstorage_type(), new ArrayList<StorageServerConnections>(Arrays.asList(getParameters().getStorageServerConnection())));
    VDSReturnValue returnValueConnect = runVdsCommand(VDSCommandType.ConnectStorageServer, newConnectionParametersForVdsm);
    if (returnValueConnect.getSucceeded()) {
        getDbFacade().getStorageServerConnectionDao().update(getParameters().getStorageServerConnection());
        // Disconnect the old storage server connection via vdsm - only after update in db to a new connection succeeds
        ConnectStorageServerVDSCommandParameters oldConnectionParametersForVdsm = new ConnectStorageServerVDSCommandParameters(getParameters().getVdsId(), getParameters().getStoragePoolId(), oldConnection.getstorage_type(), new ArrayList<StorageServerConnections>(Arrays.asList(oldConnection)));
        runVdsCommand(VDSCommandType.DisconnectStorageServer, oldConnectionParametersForVdsm);
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    StoragePoolIsoMap map = getStoragePoolIsoMap();
    changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked);
    // connect to the new path
    boolean hasConnectStorageSucceeded = connectToStorage();
    VDSReturnValue returnValueUpdatedStorageDomain = null;
    if (!hasConnectStorageSucceeded) {
        setSucceeded(false);
        VdcFault f = new VdcFault();
        f.setError(VdcBllErrors.StorageServerConnectionError);
        getReturnValue().setFault(f);
        return;
    }
    // update info such as free space - because we switched to a different server
    returnValueUpdatedStorageDomain = getStatsForDomain();
    if (returnValueUpdatedStorageDomain.getSucceeded()) {
        final StorageDomain updatedStorageDomain = (StorageDomain) returnValueUpdatedStorageDomain.getReturnValue();
        executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getStorageConnDao().update(getParameters().getStorageServerConnection());
                getStorageDomainDynamicDao().update(updatedStorageDomain.getStorageDynamicData());
                return null;
            }
        });
        setSucceeded(true);
    }
    updateStatus(map, StorageDomainStatus.Maintenance);
    disconnectFromStorage();
}
#end_block

#method_before
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    return Collections.singletonMap(getParameters().getStorageServerConnection().getid(), LockMessagesMatchUtil.STORAGE);
}
#method_after
@Override
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    Map<String, Pair<String, String>> locks = new HashMap<String, Pair<String, String>>();
    domains = getStorageDomainsByConnId(getParameters().getStorageServerConnection().getid());
    if (!domains.isEmpty() && domains.size() == 1) {
        setStorageDomain(domains.get(0));
        locks.put(getStorageDomain().getId().toString(), LockMessagesMatchUtil.STORAGE);
    }
    // lock the path to NFS to avoid at the same time if some other user tries to:
    // add new storage domain to same path or edit another storage server connection to point to same path
    locks.put(getParameters().getStorageServerConnection().getconnection(), LockMessagesMatchUtil.STORAGE_CONNECTION);
    return locks;
}
#end_block

#method_before
public static String getCACertificate() throws Exception {
    InputStream in = null;
    try {
        in = new FileInputStream(Config.resolveCACertificatePath());
        final CertificateFactory cf = CertificateFactory.getInstance("X.509");
        final Certificate certificate = cf.generateCertificate(in);
        return String.format(("-----BEGIN CERTIFICATE-----\n" + "%1$s" + "-----END CERTIFICATE-----\n"), new Base64(76, new byte[] { (byte) '\n' }).encodeToString(certificate.getEncoded()));
    } finally {
        if (in != null) {
            in.close();
        }
    }
}
#method_after
public static String getCACertificate() throws Exception {
    InputStream in = null;
    try {
        in = new FileInputStream(Config.resolveCACertificatePath());
        final CertificateFactory cf = CertificateFactory.getInstance("X.509");
        final Certificate certificate = cf.generateCertificate(in);
        return String.format(("-----BEGIN CERTIFICATE-----%1$c" + "%2$s" + "-----END CERTIFICATE-----%1$c"), '\n', new Base64(76, new byte[] { (byte) '\n' }).encodeToString(certificate.getEncoded()));
    } finally {
        if (in != null) {
            in.close();
        }
    }
}
#end_block

#method_before
void initTable() {
    // Set up table data provider
    getDataProvider().addDataDisplay(table);
    // Add default sort handler that delegates to the data provider
    AsyncHandler columnSortHandler = new AsyncHandler(table);
    table.addColumnSortHandler(columnSortHandler);
    // Set up table selection model
    table.setSelectionModel(selectionModel);
    // Enable keyboard selection
    table.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.ENABLED);
    // Add arrow key handler
    table.addDomHandler(new KeyDownHandler() {

        @Override
        public void onKeyDown(KeyDownEvent event) {
            boolean shiftPageDown = event.isShiftKeyDown() && KeyCodes.KEY_PAGEDOWN == event.getNativeKeyCode();
            boolean shiftPageUp = event.isShiftKeyDown() && KeyCodes.KEY_PAGEUP == event.getNativeKeyCode();
            boolean ctrlA = event.isControlKeyDown() && ('a' == event.getNativeKeyCode() || 'A' == event.getNativeKeyCode());
            boolean arrow = KeyDownEvent.isArrow(event.getNativeKeyCode());
            if (shiftPageUp || shiftPageDown || ctrlA || arrow) {
                event.preventDefault();
                event.stopPropagation();
            } else {
                return;
            }
            if (shiftPageDown) {
                selectionModel.selectAllNext();
            } else if (shiftPageUp) {
                selectionModel.selectAllPrev();
            } else if (ctrlA) {
                selectionModel.selectAll();
            } else if (arrow) {
                selectionModel.setMultiSelectEnabled(event.isControlKeyDown() && !multiSelectionDisabled);
                selectionModel.setMultiRangeSelectEnabled(event.isShiftKeyDown() && !multiSelectionDisabled);
                if (event.isDownArrow()) {
                    selectionModel.selectNext();
                } else if (event.isUpArrow()) {
                    selectionModel.selectPrev();
                }
            }
        }
    }, KeyDownEvent.getType());
    // Add context menu handler for table widget
    addContextMenuHandler(tableContainer);
    // Use fixed table layout
    // $NON-NLS-1$
    setWidth("100%", true);
    // Attach table widget to the corresponding panel
    tableContainer.setWidget(table);
    tableHeaderContainer.setWidget(tableHeader);
    tableHeaderContainer.setVisible(!showDefaultHeader);
    // Use relative positioning for tableHeader, in order to align it with main table
    tableHeader.getElement().getStyle().setPosition(Position.RELATIVE);
    // Attach scroll event handler to main table container, so that the tableHeader widget
    // can have its position aligned with main table container's current scroll position
    tableContainer.addDomHandler(new ScrollHandler() {

        @Override
        public void onScroll(ScrollEvent event) {
            tableContainerVerticalScrollPosition = tableContainer.getElement().getScrollTop();
            tableContainerHorizontalScrollPosition = tableContainer.getElement().getScrollLeft();
            updateTableHeaderPosition();
        }
    }, ScrollEvent.getType());
    // Reset main table container's scroll position
    enforceScrollPosition();
}
#method_after
void initTable() {
    // Set up table data provider
    getDataProvider().addDataDisplay(table);
    // Add default sort handler that delegates to the data provider
    AsyncHandler columnSortHandler = new AsyncHandler(table);
    table.addColumnSortHandler(columnSortHandler);
    // Set up table selection model
    table.setSelectionModel(selectionModel);
    // Enable keyboard selection
    table.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.ENABLED);
    // Add arrow key handler
    table.addDomHandler(new KeyDownHandler() {

        @Override
        public void onKeyDown(KeyDownEvent event) {
            boolean shiftPageDown = event.isShiftKeyDown() && KeyCodes.KEY_PAGEDOWN == event.getNativeKeyCode();
            boolean shiftPageUp = event.isShiftKeyDown() && KeyCodes.KEY_PAGEUP == event.getNativeKeyCode();
            boolean ctrlA = event.isControlKeyDown() && ('a' == event.getNativeKeyCode() || 'A' == event.getNativeKeyCode());
            boolean arrow = KeyDownEvent.isArrow(event.getNativeKeyCode());
            if (shiftPageUp || shiftPageDown || ctrlA || arrow) {
                event.preventDefault();
                event.stopPropagation();
            } else {
                return;
            }
            if (shiftPageDown) {
                selectionModel.selectAllNext();
            } else if (shiftPageUp) {
                selectionModel.selectAllPrev();
            } else if (ctrlA) {
                selectionModel.selectAll();
            } else if (arrow) {
                selectionModel.setMultiSelectEnabled(event.isControlKeyDown() && !multiSelectionDisabled);
                selectionModel.setMultiRangeSelectEnabled(event.isShiftKeyDown() && !multiSelectionDisabled);
                if (event.isDownArrow()) {
                    selectionModel.selectNext();
                } else if (event.isUpArrow()) {
                    selectionModel.selectPrev();
                }
            }
        }
    }, KeyDownEvent.getType());
    // Add context menu handler for table widget
    addContextMenuHandler(tableContainer);
    // Use fixed table layout
    // $NON-NLS-1$
    setWidth("100%", true);
    // Attach table widget to the corresponding panel
    tableContainer.setWidget(table);
    tableHeaderContainer.setWidget(tableHeader);
    tableHeaderContainer.setVisible(!showDefaultHeader);
    // Use relative positioning for tableHeader, in order to align it with main table
    tableHeader.getElement().getStyle().setPosition(Position.RELATIVE);
    // Attach scroll event handler to main table container, so that the tableHeader widget
    // can have its position aligned with main table container's current scroll position
    tableContainer.addDomHandler(new ScrollHandler() {

        @Override
        public void onScroll(ScrollEvent event) {
            tableContainerHorizontalScrollPosition = tableContainer.getElement().getScrollLeft();
            tableContainerVerticalScrollPosition = tableContainer.getElement().getScrollTop();
            updateTableHeaderPosition();
        }
    }, ScrollEvent.getType());
    // Reset main table container's scroll position
    enforceScrollPosition();
}
#end_block

#method_before
List<TableCellElement> getTableHeaderCells(int columnIndex) {
    Element tableHeaderElement = showDefaultHeader ? table.getElement() : tableHeader.getElement();
    TableSectionElement tHeadElement = ((TableElement) tableHeaderElement).getTHead();
    return tHeadElement != null ? getCells(tHeadElement.getRows(), columnIndex) : Collections.<TableCellElement>emptyList();
}
#method_after
List<TableCellElement> getTableHeaderCells(int columnIndex) {
    Element tableHeaderElement = showDefaultHeader ? table.getElement() : tableHeader.getElement();
    TableElement tableHeaderElementCast = tableHeaderElement.cast();
    TableSectionElement tHeadElement = tableHeaderElementCast.getTHead();
    return tHeadElement != null ? getCells(tHeadElement.getRows(), columnIndex) : Collections.<TableCellElement>emptyList();
}
#end_block

#method_before
private void initLocalizationEditor() {
    localeBox = new ListBox();
    selectedLocale = new Label();
    // Add the option to change the locale
    String currentLocale = LocaleInfo.getCurrentLocale().getLocaleName();
    String[] localeNames = LocaleInfo.getAvailableLocaleNames();
    for (String localeName : localeNames) {
        if (!DEFAULT.equals(localeName)) {
            String nativeName = LocaleInfo.getLocaleNativeDisplayName(localeName);
            localeBox.addItem(nativeName, localeName);
            if (localeName.equals(currentLocale)) {
                localeBox.setSelectedIndex(localeBox.getItemCount() - 1);
                selectedLocale.setText(localeBox.getItemText(localeBox.getSelectedIndex()));
            }
        }
    }
    if (clientAgentType.isIE8OrBelow()) {
        selectedLocale.getElement().getStyle().setOpacity(0);
    }
    localeBox.addChangeHandler(new ChangeHandler() {

        @Override
        public void onChange(ChangeEvent event) {
            String localeName = localeBox.getValue(localeBox.getSelectedIndex());
            // $NON-NLS-1$
            String localeString = "";
            if (!DEFAULT.equals(localeName)) {
                // $NON-NLS-1$
                localeString = "?locale=" + localeName;
            }
            // $NON-NLS-1$ //$NON-NLS-2$
            Window.open(FrontendUrlUtils.getCurrentPageURL() + localeString, "_self", "");
        }
    });
}
#method_after
private void initLocalizationEditor() {
    localeBox = new ListBox();
    selectedLocale = new Label();
    // Add the option to change the locale
    String currentLocale = LocaleInfo.getCurrentLocale().getLocaleName();
    String[] localeNames = LocaleInfo.getAvailableLocaleNames();
    // Populate the locale list box with available locales
    boolean foundDefaultLocale = false;
    for (String localeName : localeNames) {
        if (!DEFAULT_LOCALE.equals(localeName)) {
            String nativeName = LocaleInfo.getLocaleNativeDisplayName(localeName);
            localeBox.addItem(nativeName, localeName);
            if (localeName.equals(currentLocale)) {
                setSelectedLocale(localeBox.getItemCount() - 1);
                foundDefaultLocale = true;
            }
        }
    }
    // When no available locale matches the current locale, select the first available locale
    if (!foundDefaultLocale && localeNames.length > 0) {
        setSelectedLocale(0);
    }
    if (clientAgentType.isIE8OrBelow()) {
        selectedLocale.getElement().getStyle().setOpacity(0);
    }
    localeBox.addChangeHandler(new ChangeHandler() {

        @Override
        public void onChange(ChangeEvent event) {
            String localeQueryParam = LocaleInfo.getLocaleQueryParam();
            // $NON-NLS-1$ //$NON-NLS-2$
            String localeString = "?" + localeQueryParam + "=" + localeBox.getValue(localeBox.getSelectedIndex());
            // $NON-NLS-1$ //$NON-NLS-2$
            Window.open(FrontendUrlUtils.getCurrentPageURL() + localeString, "_self", "");
        }
    });
}
#end_block

#method_before
@Test
public void testAddNamedVmFiltered() throws Exception {
    setUpFilteredQueryExpectations();
    setUriInfo(setUpBasicUriExpectations());
    setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, GetVdsGroupByVdsGroupIdParameters.class, new String[] { "VdsGroupId" }, new Object[] { GUIDS[2] }, getVdsGroupEntity());
    setUpHttpHeaderExpectations("Expect", "201-created");
    setUpGetEntityExpectations(VdcQueryType.GetVmByVmName, GetVmByVmNameParameters.class, new String[] { "Name" }, new Object[] { NAMES[1] }, setUpVm(GUIDS[1]));
    setUpGetEntityExpectations();
    setUpCreationExpectations(VdcActionType.AddVmTemplate, AddVmTemplateParameters.class, new String[] { "Name", "Description" }, new Object[] { NAMES[0], DESCRIPTIONS[0] }, true, true, GUIDS[0], asList(GUIDS[2]), asList(new AsyncTaskStatus(AsyncTaskStatusEnum.finished)), VdcQueryType.GetVmTemplate, GetVmTemplateParameters.class, new String[] { "Id" }, new Object[] { GUIDS[0] }, getEntity(0));
    Template model = getModel(0);
    model.getVm().setId(null);
    model.getVm().setName(NAMES[1]);
    Response response = collection.add(model);
    assertEquals(201, response.getStatus());
    assertTrue(response.getEntity() instanceof Template);
    verifyModel((Template) response.getEntity(), 0);
    assertNull(((Template) response.getEntity()).getCreationStatus());
}
#method_after
@Test
public void testAddNamedVmFiltered() throws Exception {
    setUpFilteredQueryExpectations();
    setUriInfo(setUpBasicUriExpectations());
    setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, GetVdsGroupByVdsGroupIdParameters.class, new String[] { "VdsGroupId" }, new Object[] { GUIDS[2] }, getVdsGroupEntity());
    setUpHttpHeaderExpectations("Expect", "201-created");
    setUpGetEntityExpectations(VdcQueryType.GetVmByVmNameForDataCenter, GetVmByVmNameForDataCenterParameters.class, new String[] { "Name" }, new Object[] { NAMES[1] }, setUpVm(GUIDS[1]));
    setUpGetEntityExpectations();
    setUpCreationExpectations(VdcActionType.AddVmTemplate, AddVmTemplateParameters.class, new String[] { "Name", "Description" }, new Object[] { NAMES[0], DESCRIPTIONS[0] }, true, true, GUIDS[0], asList(GUIDS[2]), asList(new AsyncTaskStatus(AsyncTaskStatusEnum.finished)), VdcQueryType.GetVmTemplate, GetVmTemplateParameters.class, new String[] { "Id" }, new Object[] { GUIDS[0] }, getEntity(0));
    Template model = getModel(0);
    model.getVm().setId(null);
    model.getVm().setName(NAMES[1]);
    Response response = collection.add(model);
    assertEquals(201, response.getStatus());
    assertTrue(response.getEntity() instanceof Template);
    verifyModel((Template) response.getEntity(), 0);
    assertNull(((Template) response.getEntity()).getCreationStatus());
}
#end_block

#method_before
@Override
public List<VM> getAllUsingQuery(String query) {
    return new SimpleJdbcTemplate(jdbcTemplate).query(query, VMRowMapper.instance);
}
#method_after
@Override
public List<VM> getAllUsingQuery(String query) {
    return jdbcTemplate.query(query, VMRowMapper.instance);
}
#end_block

#method_before
@Test
public void testGetByNameFilteredWithPermissions() {
    VM result = dao.getByName(existingVm.getName(), PRIVILEGED_USER_ID, true);
    assertGetResult(result);
}
#method_after
@Test
public void testGetByNameFilteredWithPermissions() {
    VM result = dao.getByNameForDataCenter(null, existingVm.getName(), PRIVILEGED_USER_ID, true);
    assertGetResult(result);
}
#end_block

#method_before
@Test
public void testGetByNameFilteredWithPermissionsNoPermissions() {
    VM result = dao.getByName(existingVm.getName(), UNPRIVILEGED_USER_ID, true);
    assertNull(result);
}
#method_after
@Test
public void testGetByNameFilteredWithPermissionsNoPermissions() {
    VM result = dao.getByNameForDataCenter(null, existingVm.getName(), UNPRIVILEGED_USER_ID, true);
    assertNull(result);
}
#end_block

#method_before
@Override
public Response add(Template template) {
    validateParameters(template, "name", "vm.id|name");
    validateEnums(Template.class, template);
    VmStatic staticVm = getMapper(Template.class, VmStatic.class).map(template, getVm(template));
    if (namedCluster(template)) {
        staticVm.setVdsGroupId(getClusterId(template));
    }
    staticVm.setUsbPolicy(VmMapper.getUsbPolicyOnCreate(template.getUsb(), lookupCluster(staticVm.getVdsGroupId())));
    // REVISIT: powershell has a IsVmTemlateWithSameNameExist safety check
    AddVmTemplateParameters params = new AddVmTemplateParameters(staticVm, template.getName(), template.getDescription());
    boolean isDomainSet = false;
    if (template.isSetStorageDomain() && template.getStorageDomain().isSetId()) {
        params.setDestinationStorageDomainId(asGuid(template.getStorageDomain().getId()));
        isDomainSet = true;
    }
    params.setDiskInfoDestinationMap(getDiskToDestinationMap(template.getVm(), params.getDestinationStorageDomainId(), isDomainSet));
    return performCreate(VdcActionType.AddVmTemplate, params, new QueryIdResolver<Guid>(VdcQueryType.GetVmTemplate, GetVmTemplateParameters.class));
}
#method_after
@Override
public Response add(Template template) {
    validateParameters(template, "name", "vm.id|name");
    validateEnums(Template.class, template);
    Guid clusterId = null;
    VDSGroup cluster = null;
    if (namedCluster(template)) {
        clusterId = getClusterId(template);
        cluster = lookupCluster(clusterId);
    }
    VmStatic staticVm = getMapper(Template.class, VmStatic.class).map(template, getVm(cluster, template));
    if (namedCluster(template)) {
        staticVm.setVdsGroupId(clusterId);
    }
    staticVm.setUsbPolicy(VmMapper.getUsbPolicyOnCreate(template.getUsb(), cluster != null ? cluster : lookupCluster(staticVm.getVdsGroupId())));
    // REVISIT: powershell has a IsVmTemlateWithSameNameExist safety check
    AddVmTemplateParameters params = new AddVmTemplateParameters(staticVm, template.getName(), template.getDescription());
    boolean isDomainSet = false;
    if (template.isSetStorageDomain() && template.getStorageDomain().isSetId()) {
        params.setDestinationStorageDomainId(asGuid(template.getStorageDomain().getId()));
        isDomainSet = true;
    }
    params.setDiskInfoDestinationMap(getDiskToDestinationMap(template.getVm(), params.getDestinationStorageDomainId(), isDomainSet));
    return performCreate(VdcActionType.AddVmTemplate, params, new QueryIdResolver<Guid>(VdcQueryType.GetVmTemplate, GetVmTemplateParameters.class));
}
#end_block

#method_before
protected VmStatic getVm(Template template) {
    org.ovirt.engine.core.common.businessentities.VM vm;
    if (template.getVm().isSetId()) {
        vm = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmByVmId, new GetVmByVmIdParameters(asGuid(template.getVm().getId())), template.getVm().getId());
    } else if (isFiltered()) {
        vm = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmByVmName, new GetVmByVmNameParameters(template.getVm().getName()), template.getVm().getName());
    } else {
        vm = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, SearchType.VM, "VM: name=" + template.getVm().getName());
    }
    return vm.getStaticData();
}
#method_after
protected VmStatic getVm(VDSGroup cluster, Template template) {
    org.ovirt.engine.core.common.businessentities.VM vm;
    if (template.getVm().isSetId()) {
        vm = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmByVmId, new GetVmByVmIdParameters(asGuid(template.getVm().getId())), template.getVm().getId());
    } else if (isFiltered()) {
        Guid dataCenterId = null;
        if (cluster != null && cluster.getStoragePoolId() != null) {
            dataCenterId = asGuid(cluster.getStoragePoolId());
        }
        vm = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmByVmNameForDataCenter, new GetVmByVmNameForDataCenterParameters(dataCenterId, template.getVm().getName()), template.getVm().getName());
    } else {
        vm = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, SearchType.VM, "VM: name=" + template.getVm().getName());
    }
    return vm.getStaticData();
}
#end_block

#method_before
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = severities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        if (auditLogable != null) {
            AuditLog tempVar = null;
            // handle external log messages invoked by plugins via the API
            if (auditLogable.isExternal()) {
                // message is sent as an argument, no need to resolve.
                resolvedMessage = message = loggerString;
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
            } else if ((message = messages.get(logType)) != null) {
                // Application log message from AuditLogMessages
                resolvedMessage = resolveMessage(message, auditLogable);
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
            }
            if (tempVar != null) {
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                tempVar.setExternal(auditLogable.isExternal());
                auditLog = tempVar;
            }
        } else {
            auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
        }
        if (auditLog != null) {
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    }
}
#method_after
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = severities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        if (auditLogable != null) {
            AuditLog tempVar = null;
            // handle external log messages invoked by plugins via the API
            if (auditLogable.isExternal()) {
                // message is sent as an argument, no need to resolve.
                resolvedMessage = message = loggerString;
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
            } else if ((message = messages.get(logType)) != null) {
                // Application log message from AuditLogMessages
                resolvedMessage = resolveMessage(message, auditLogable);
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
            }
            if (tempVar != null) {
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                tempVar.setExternal(auditLogable.isExternal());
                tempVar.setQuotaId(auditLogable.getQuotaIdForLog());
                tempVar.setQuotaName(auditLogable.getQuotaNameForLog());
                auditLog = tempVar;
            }
        } else {
            auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
        }
        if (auditLog != null) {
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    }
}
#end_block

#method_before
protected <T> T performAction(VdcActionType task, VdcActionParametersBase params, Class<T> resultType) {
    try {
        return resultType.cast(doAction(task, params).getActionReturnValue());
    } catch (Exception e) {
        return handleError(resultType, e, false);
    }
}
#method_after
protected Response performAction(VdcActionType task, VdcActionParametersBase params, Action action) {
    return performAction(task, params, action, false);
}
#end_block

#method_before
protected Response performAction(VdcActionType task, VdcActionParametersBase params) {
    return performAction(task, params, false);
}
#method_after
protected Response performAction(VdcActionType task, VdcActionParametersBase params) {
    return performAction(task, params, (Action) null, false);
}
#end_block

#method_before
protected Response performNonBlockingAction(VdcActionType task, VdcActionParametersBase params) {
    try {
        doNonBlockingAction(task, params);
        Action action = new Action();
        action.setStatus(StatusUtils.create(CreationStatus.IN_PROGRESS));
        return Response.status(Response.Status.ACCEPTED).entity(action).build();
    } catch (Exception e) {
        return handleError(Response.class, e, false);
    }
}
#method_after
protected Response performNonBlockingAction(VdcActionType task, VdcActionParametersBase params, Action action) {
    try {
        doNonBlockingAction(task, params);
        if (action != null) {
            action.setStatus(StatusUtils.create(CreationStatus.IN_PROGRESS));
            return Response.status(Response.Status.ACCEPTED).entity(action).build();
        } else {
            return Response.status(Response.Status.ACCEPTED).build();
        }
    } catch (Exception e) {
        return handleError(Response.class, e, false);
    }
}
#end_block

#method_before
protected Object getEntity() {
    try {
        Method m = resolveGet();
        Object entity = m.invoke(this);
        return removeUnnecessaryInfo(entity);
    } catch (Exception e) {
        LOG.error("Getting resource after action failed.", e);
        return null;
    }
}
#method_after
protected Object getEntity() {
    try {
        Method m = resolveGet();
        if (m == null) {
            return null;
        }
        Object entity = m.invoke(this);
        return getEntityWithIdAndHref(entity);
    } catch (Exception e) {
        LOG.error("Getting resource after action failed.", e);
        return null;
    }
}
#end_block

#method_before
private Method resolveGet() throws NoSuchMethodException, SecurityException {
    Method methodSignature = findGetSignature(this.getClass());
    Method methodImplementation = this.getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());
    return methodImplementation;
}
#method_after
private Method resolveGet() throws NoSuchMethodException, SecurityException {
    Method methodSignature = findGetSignature(this.getClass());
    if (methodSignature == null) {
        return null;
    }
    Method methodImplementation = this.getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes());
    return methodImplementation;
}
#end_block

#method_before
protected void setActionItem(Action action, Object result) {
    String name = result.getClass().getSimpleName().toLowerCase();
    for (Method m : action.getClass().getMethods()) {
        if (m.getName().startsWith("set") && m.getName().replace("set", "").toLowerCase().equals(name)) {
            try {
                m.invoke(action, result);
                break;
            } catch (Exception e) {
                // should not happen
                LOG.error("Resource to action asignment failure.", e);
                e.printStackTrace();
                break;
            }
        }
    }
}
#method_after
protected void setActionItem(Action action, Object result) {
    if (result == null) {
        return;
    }
    String name = result.getClass().getSimpleName().toLowerCase();
    for (Method m : action.getClass().getMethods()) {
        if (m.getName().startsWith("set") && m.getName().replace("set", "").toLowerCase().equals(name)) {
            try {
                m.invoke(action, result);
                break;
            } catch (Exception e) {
                // should not happen
                LOG.error("Resource to action asignment failure.", e);
                break;
            }
        }
    }
}
#end_block

#method_before
protected Object resolveCreated(VdcReturnValueBase result, EntityResolver entityResolver, Class<? extends BaseResource> suggestedParentType) {
    try {
        return entityResolver.resolve((Guid) result.getActionReturnValue());
    } catch (Exception e) {
        // we tolerate a failure in the entity resolution
        // as the substantive action (entity creation) has
        // already succeeded
        e.printStackTrace();
        return null;
    }
}
#method_after
protected Object resolveCreated(VdcReturnValueBase result, EntityResolver entityResolver, Class<? extends BaseResource> suggestedParentType) {
    try {
        return entityResolver.resolve((Guid) result.getActionReturnValue());
    } catch (Exception e) {
        // already succeeded
        return null;
    }
}
#end_block

#method_before
protected Response doAction(final VdcActionType task, final VdcActionParametersBase params, final Action action, AbstractBackendResource.PollingType pollingType) {
    awaitGrace(action);
    try {
        VdcReturnValueBase actionResult = doAction(task, params);
        if (actionResult.getHasAsyncTasks()) {
            if (expectBlocking(action)) {
                CreationStatus status = awaitCompletion(actionResult, pollingType);
                return actionStatus(status, action, addLinks(newModel(id)));
            } else {
                return actionAsync(actionResult, action);
            }
        } else {
            return actionSuccess(action, addLinks(newModel(id)));
        }
    } catch (Exception e) {
        e.printStackTrace();
        return handleError(e, action);
    }
}
#method_after
protected Response doAction(final VdcActionType task, final VdcActionParametersBase params, final Action action, AbstractBackendResource.PollingType pollingType) {
    awaitGrace(action);
    try {
        VdcReturnValueBase actionResult = doAction(task, params);
        if (actionResult.getHasAsyncTasks()) {
            if (expectBlocking(action)) {
                CreationStatus status = awaitCompletion(actionResult, pollingType);
                return actionStatus(status, action, addLinks(newModel(id)));
            } else {
                return actionAsync(actionResult, action);
            }
        } else {
            return actionSuccess(action, addLinks(newModel(id)));
        }
    } catch (Exception e) {
        return handleError(e, action);
    }
}
#end_block

#method_before
private void setupParentExpectations() {
    Cluster cluster = new Cluster();
    cluster.setName(defaultClusterName);
    cluster.setId(clusterId.toString());
    clusterResourceMock = control.createMock(ClusterResource.class);
    expect(clusterResourceMock.get()).andReturn(cluster).anyTimes();
    volumesResourceMock = control.createMock(BackendGlusterVolumesResource.class);
    expect(volumesResourceMock.getParent()).andReturn(clusterResourceMock).anyTimes();
}
#method_after
private void setupParentExpectations() {
    Cluster cluster = new Cluster();
    cluster.setName(defaultClusterName);
    cluster.setId(clusterId.toString());
    clusterResourceMock = control.createMock(ClusterResource.class);
    expect(clusterResourceMock.get()).andReturn(cluster).anyTimes();
    volumesResourceMock = control.createMock(BackendGlusterVolumesResource.class);
    expect(volumesResourceMock.getParent()).andReturn(clusterResourceMock).anyTimes();
    expect(volumesResourceMock.addParents(isA(GlusterVolume.class))).andDelegateTo(new BackendGlusterVolumesResource() {

        @Override
        protected GlusterVolume addParents(GlusterVolume model) {
            Cluster cluster = new Cluster();
            cluster.setId(clusterId.toString());
            model.setCluster(cluster);
            return model;
        }
    }).anyTimes();
}
#end_block

#method_before
@Override
public boolean validate(Principal principal, String sessionId) {
    if (principal == null) {
        return loginFailureNoPrincipal();
    }
    if (principal.getDomain() == null) {
        return loginFailure(principal, NO_DOMAIN);
    }
    LoginUserParameters params = new LoginUserParameters(principal.getUser(), principal.getSecret(), principal.getDomain(), null, null, null);
    params.setActionType(VdcActionType.LoginUser);
    sessionHelper.setSessionId(sessionId);
    VdcReturnValueBase ret = backend.Login(sessionHelper.sessionize(params));
    if (ret.getCanDoAction() && ret.getSucceeded()) {
        return loginSuccess(principal, ret);
    } else {
        return loginFailure(principal, reasons(ret));
    }
}
#method_after
@Override
public boolean validate(Principal principal, String sessionId) {
    if (principal == null) {
        return loginFailureNoAuthType();
    }
    if (principal.getDomain() == null) {
        return loginFailure(principal, NO_DOMAIN);
    }
    LoginUserParameters params = new LoginUserParameters(principal.getUser(), principal.getSecret(), principal.getDomain(), null, null, null);
    params.setActionType(VdcActionType.LoginUser);
    sessionHelper.setSessionId(sessionId);
    VdcReturnValueBase ret = backend.Login(sessionHelper.sessionize(params));
    if (ret.getCanDoAction() && ret.getSucceeded()) {
        return loginSuccess(principal, ret);
    } else {
        return loginFailure(principal, reasons(ret));
    }
}
#end_block

#method_before
private boolean checkQuotaStorageLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, double limit, double storageUsagePercentage, double storageRequestPercentage, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> log) {
    double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage;
    boolean requestIsApproved;
    if (limit == QuotaStorage.UNLIMITED || storageTotalPercentage <= quota.getThresholdStoragePercentage() || storageRequestPercentage <= 0) {
        requestIsApproved = true;
    } else if (storageTotalPercentage <= 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else if (storageTotalPercentage <= quota.getGraceStoragePercentage() + 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), storageUsagePercentage, storageRequestPercentage);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    if (!requestIsApproved) {
        log.getSecond().setQuotaIdForLog(quota.getId());
    }
    return requestIsApproved;
}
#method_after
private boolean checkQuotaStorageLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, double limit, double storageUsagePercentage, double storageRequestPercentage, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> log) {
    double storageTotalPercentage = storageUsagePercentage + storageRequestPercentage;
    boolean requestIsApproved;
    if (limit == QuotaStorage.UNLIMITED || storageTotalPercentage <= quota.getThresholdStoragePercentage() || storageRequestPercentage <= 0) {
        requestIsApproved = true;
    } else if (storageTotalPercentage <= 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), quota.getId(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else if (storageTotalPercentage <= quota.getGraceStoragePercentage() + 100) {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), quota.getId(), storageUsagePercentage + storageRequestPercentage, storageRequestPercentage);
        requestIsApproved = true;
    } else {
        log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesStorage(log.getSecond(), quota.getQuotaName(), quota.getId(), storageUsagePercentage, storageRequestPercentage);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    if (!requestIsApproved) {
        log.getSecond().setQuotaIdForLog(quota.getId());
    }
    return requestIsApproved;
}
#end_block

#method_before
private boolean checkQuotaClusterLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, QuotaVdsGroup quotaVdsGroup, long memToAdd, int vcpuToAdd, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> auditLogPair) {
    if (quotaVdsGroup.getVirtualCpu() == 0 || quotaVdsGroup.getMemSizeMB() == 0) {
        return false;
    }
    double vcpuToAddPercentage = (double) vcpuToAdd / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double vcpuCurrentPercentage = (double) quotaVdsGroup.getVirtualCpuUsage() / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double newVcpuPercent = vcpuToAddPercentage + vcpuCurrentPercentage;
    double memToAddPercentage = (double) memToAdd / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double memCurrentPercentage = (double) quotaVdsGroup.getMemSizeMBUsage() / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double newMemoryPercent = memToAddPercentage + memCurrentPercentage;
    long newMemory = memToAdd + quotaVdsGroup.getMemSizeMBUsage();
    int newVcpu = vcpuToAdd + quotaVdsGroup.getVirtualCpuUsage();
    long memLimit = quotaVdsGroup.getMemSizeMB();
    int cpuLimit = quotaVdsGroup.getVirtualCpu();
    boolean requestIsApproved;
    if (memLimit == QuotaVdsGroup.UNLIMITED_MEM && cpuLimit == QuotaVdsGroup.UNLIMITED_VCPU) {
        // if both cpu and
        // mem are unlimited
        requestIsApproved = true;
    } else if ((// if cpu and mem usages are under the limit
    newVcpuPercent <= quota.getThresholdVdsGroupPercentage() && newMemoryPercent <= quota.getThresholdVdsGroupPercentage()) || (vcpuToAdd <= 0 && memToAdd <= 0)) {
        requestIsApproved = true;
    } else if (newVcpuPercent <= 100 && newMemoryPercent <= 100) {
        // passed the threshold (not the quota limit)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > quota.getThresholdVdsGroupPercentage(), newMemoryPercent > quota.getThresholdVdsGroupPercentage());
        requestIsApproved = true;
    } else if (newVcpuPercent <= quota.getGraceVdsGroupPercentage() + 100 && newMemoryPercent <= quota.getGraceVdsGroupPercentage() + 100) {
        // passed the quota limit (not the
        // grace)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > 100, newMemoryPercent > 100);
        requestIsApproved = true;
    } else {
        // passed the grace
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), vcpuCurrentPercentage, vcpuToAddPercentage, memCurrentPercentage, memToAddPercentage, newVcpuPercent > quota.getGraceVdsGroupPercentage() + 100, newMemoryPercent > quota.getGraceVdsGroupPercentage() + 100);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_VDS_GROUP_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    // cache
    if (requestIsApproved) {
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    } else {
        auditLogPair.getSecond().setQuotaIdForLog(quota.getId());
    }
    return requestIsApproved;
}
#method_after
private boolean checkQuotaClusterLimits(QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, Quota quota, QuotaVdsGroup quotaVdsGroup, long memToAdd, int vcpuToAdd, List<String> canDoActionMessages, Pair<AuditLogType, AuditLogableBase> auditLogPair) {
    if (quotaVdsGroup.getVirtualCpu() == 0 || quotaVdsGroup.getMemSizeMB() == 0) {
        return false;
    }
    double vcpuToAddPercentage = (double) vcpuToAdd / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double vcpuCurrentPercentage = (double) quotaVdsGroup.getVirtualCpuUsage() / (double) quotaVdsGroup.getVirtualCpu() * 100;
    double newVcpuPercent = vcpuToAddPercentage + vcpuCurrentPercentage;
    double memToAddPercentage = (double) memToAdd / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double memCurrentPercentage = (double) quotaVdsGroup.getMemSizeMBUsage() / (double) quotaVdsGroup.getMemSizeMB() * 100;
    double newMemoryPercent = memToAddPercentage + memCurrentPercentage;
    long newMemory = memToAdd + quotaVdsGroup.getMemSizeMBUsage();
    int newVcpu = vcpuToAdd + quotaVdsGroup.getVirtualCpuUsage();
    long memLimit = quotaVdsGroup.getMemSizeMB();
    int cpuLimit = quotaVdsGroup.getVirtualCpu();
    boolean requestIsApproved;
    if (memLimit == QuotaVdsGroup.UNLIMITED_MEM && cpuLimit == QuotaVdsGroup.UNLIMITED_VCPU) {
        // if both cpu and
        // mem are unlimited
        requestIsApproved = true;
    } else if ((// if cpu and mem usages are under the limit
    newVcpuPercent <= quota.getThresholdVdsGroupPercentage() && newMemoryPercent <= quota.getThresholdVdsGroupPercentage()) || (vcpuToAdd <= 0 && memToAdd <= 0)) {
        requestIsApproved = true;
    } else if (newVcpuPercent <= 100 && newMemoryPercent <= 100) {
        // passed the threshold (not the quota limit)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), quota.getId(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > quota.getThresholdVdsGroupPercentage(), newMemoryPercent > quota.getThresholdVdsGroupPercentage());
        requestIsApproved = true;
    } else if (newVcpuPercent <= quota.getGraceVdsGroupPercentage() + 100 && newMemoryPercent <= quota.getGraceVdsGroupPercentage() + 100) {
        // passed the quota limit (not the
        // grace)
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), quota.getId(), vcpuCurrentPercentage + vcpuToAddPercentage, vcpuToAddPercentage, memCurrentPercentage + memToAddPercentage, memToAddPercentage, newVcpuPercent > 100, newMemoryPercent > 100);
        requestIsApproved = true;
    } else {
        // passed the grace
        auditLogPair.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT);
        quotaManagerAuditLogger.addCustomValuesVdsGroup(auditLogPair.getSecond(), quota.getQuotaName(), quota.getId(), vcpuCurrentPercentage, vcpuToAddPercentage, memCurrentPercentage, memToAddPercentage, newVcpuPercent > quota.getGraceVdsGroupPercentage() + 100, newMemoryPercent > quota.getGraceVdsGroupPercentage() + 100);
        if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT == quotaEnforcementTypeEnum) {
            canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_VDS_GROUP_LIMIT_EXCEEDED.toString());
            requestIsApproved = false;
        } else {
            requestIsApproved = true;
        }
    }
    // cache
    if (requestIsApproved) {
        cacheNewValues(quotaVdsGroup, newMemory, newVcpu);
    } else {
        auditLogPair.getSecond().setQuotaIdForLog(quota.getId());
    }
    return requestIsApproved;
}
#end_block

#method_before
protected void setVds(final VDS value) {
    mVds = value;
    mVdsName = null;
}
#method_after
public void setVds(final VDS value) {
    mVds = value;
    mVdsName = null;
    if (value != null) {
        mVdsId = value.getId();
    }
}
#end_block

#method_before
public NGuid getGlusterVolumeId() {
    return glusterVolumeId;
}
#method_after
public NGuid getGlusterVolumeId() {
    return glusterVolumeId != null ? glusterVolumeId : Guid.Empty;
}
#end_block

#method_before
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#method_after
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.PROXY_HOST_SELECTION, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#method_after
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE_UNPLUG, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#end_block

#method_before
protected void addCustomValuesStorage(AuditLogableBase auditLogableBase, String quotaName, double storageUsagePercentage, double storageRequestedPercentage) {
    auditLogableBase.addCustomValue("QuotaName", quotaName);
    auditLogableBase.addCustomValue("CurrentStorage", percentageFormatter.format(storageUsagePercentage));
    auditLogableBase.addCustomValue("Requested", percentageFormatter.format(storageRequestedPercentage));
    auditLogableBase.setQuotaNameForLog(quotaName);
}
#method_after
protected void addCustomValuesStorage(AuditLogableBase auditLogableBase, String quotaName, Guid quotaId, double storageUsagePercentage, double storageRequestedPercentage) {
    auditLogableBase.addCustomValue("QuotaName", quotaName);
    auditLogableBase.addCustomValue("CurrentStorage", percentageFormatter.format(storageUsagePercentage));
    auditLogableBase.addCustomValue("Requested", percentageFormatter.format(storageRequestedPercentage));
    auditLogableBase.setQuotaNameForLog(quotaName);
    auditLogableBase.setQuotaIdForLog(quotaId);
}
#end_block

#method_before
protected void addCustomValuesVdsGroup(AuditLogableBase auditLogableBase, String quotaName, double cpuCurrentPercentage, double cpuRequestPercentage, double memCurrentPercentage, double memRequestPercentage, boolean cpuOverLimit, boolean memOverLimit) {
    auditLogableBase.addCustomValue("QuotaName", quotaName);
    StringBuilder currentUtilization = new StringBuilder();
    if (cpuOverLimit) {
        currentUtilization.append("vcpu:").append(percentageFormatter.format(cpuCurrentPercentage)).append("% ");
    }
    if (memOverLimit) {
        currentUtilization.append("mem:").append(percentageFormatter.format(memCurrentPercentage)).append("%");
    }
    StringBuilder request = new StringBuilder();
    if (cpuOverLimit) {
        request.append("vcpu:").append(percentageFormatter.format(cpuRequestPercentage)).append("% ");
    }
    if (memOverLimit) {
        request.append("mem:").append(percentageFormatter.format(memRequestPercentage)).append("%");
    }
    auditLogableBase.addCustomValue("Utilization", currentUtilization.toString());
    auditLogableBase.addCustomValue("Requested", request.toString());
    auditLogableBase.setQuotaNameForLog(quotaName);
}
#method_after
protected void addCustomValuesVdsGroup(AuditLogableBase auditLogableBase, String quotaName, Guid quotaId, double cpuCurrentPercentage, double cpuRequestPercentage, double memCurrentPercentage, double memRequestPercentage, boolean cpuOverLimit, boolean memOverLimit) {
    auditLogableBase.addCustomValue("QuotaName", quotaName);
    StringBuilder currentUtilization = new StringBuilder();
    if (cpuOverLimit) {
        currentUtilization.append("vcpu:").append(percentageFormatter.format(cpuCurrentPercentage)).append("% ");
    }
    if (memOverLimit) {
        currentUtilization.append("mem:").append(percentageFormatter.format(memCurrentPercentage)).append("%");
    }
    StringBuilder request = new StringBuilder();
    if (cpuOverLimit) {
        request.append("vcpu:").append(percentageFormatter.format(cpuRequestPercentage)).append("% ");
    }
    if (memOverLimit) {
        request.append("mem:").append(percentageFormatter.format(memRequestPercentage)).append("%");
    }
    auditLogableBase.addCustomValue("Utilization", currentUtilization.toString());
    auditLogableBase.addCustomValue("Requested", request.toString());
    auditLogableBase.setQuotaNameForLog(quotaName);
    auditLogableBase.setQuotaIdForLog(quotaId);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // get vm status from db to check its really down before locking
    VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(getVmId());
    if (vmDynamic.getstatus() != VMStatus.Down) {
        throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
    }
    VmHandler.LockVm(vmDynamic, getCompensationContext());
    setActionReturnValue(Guid.Empty);
    setVmTemplateId(Guid.NewGuid());
    getParameters().setVmTemplateId(getVmTemplateId());
    getParameters().setEntityId(getVmTemplateId());
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVmTemplateToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addPermission();
            AddVmTemplateImages();
            List<VmNetworkInterface> vmInterfaces = addVmInterfaces();
            VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces);
            setSucceeded(true);
            return null;
        }
    });
    // means that there are no asynchronous tasks to execute and that we can
    // end the command synchronously
    boolean pendingAsyncTasks = !getReturnValue().getTaskIdList().isEmpty();
    if (!pendingAsyncTasks) {
        endSuccessfullySynchronous();
    }
}
#method_after
@Override
protected void executeCommand() {
    // get vm status from db to check its really down before locking
    VmDynamic vmDynamic = DbFacade.getInstance().getVmDynamicDao().get(getVmId());
    if (vmDynamic.getStatus() != VMStatus.Down) {
        throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
    }
    VmHandler.LockVm(vmDynamic, getCompensationContext());
    setActionReturnValue(Guid.Empty);
    setVmTemplateId(Guid.NewGuid());
    getParameters().setVmTemplateId(getVmTemplateId());
    getParameters().setEntityId(getVmTemplateId());
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVmTemplateToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            addPermission();
            AddVmTemplateImages();
            List<VmNetworkInterface> vmInterfaces = addVmInterfaces();
            VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces);
            setSucceeded(true);
            return null;
        }
    });
    // means that there are no asynchronous tasks to execute and that we can
    // end the command synchronously
    boolean pendingAsyncTasks = !getReturnValue().getTaskIdList().isEmpty();
    if (!pendingAsyncTasks) {
        endSuccessfullySynchronous();
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    mImages.addAll(ImagesHandler.filterImageDisks(getVm().getDiskList(), false, false, false));
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validateVmNotDuringSnapshot()) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getStorageIds().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getStorageIds().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setStorageIds(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validateVmNotDuringSnapshot()) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getStorageIds().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getStorageIds().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setStorageIds(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    if (!ImagesHandler.checkImagesIllegal(getReturnValue().getCanDoActionMessages(), mImages)) {
        return false;
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
public static boolean PerformImagesChecks(List<String> messages, Guid storagePoolId, Guid storageDomainId, boolean diskSpaceCheck, boolean checkImagesLocked, boolean checkImagesIllegal, boolean checkImagesExist, boolean checkStorageDomain, boolean checkIsValid, Collection<? extends Disk> diskImageList) {
    boolean returnValue = true;
    List<DiskImage> images = filterImageDisks(diskImageList, true, false);
    if (returnValue && checkImagesLocked) {
        returnValue = checkImagesLocked(messages, images);
    }
    if (returnValue && checkIsValid) {
        if (images.size() > 0) {
            returnValue = returnValue && checkDiskImages(messages, storagePoolId, storageDomainId, diskSpaceCheck, checkImagesIllegal, checkImagesExist, checkStorageDomain, images);
        } else if (checkImagesExist) {
            returnValue = false;
            ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_VM_HAS_NO_DISKS.toString());
        }
    }
    return returnValue;
}
#method_after
public static boolean PerformImagesChecks(List<String> messages, Guid storagePoolId, Guid storageDomainId, boolean diskSpaceCheck, boolean checkImagesLocked, boolean checkImagesIllegalInVdsm, boolean checkImagesExist, boolean checkStorageDomain, boolean checkIsValid, Collection<? extends Disk> diskImageList) {
    boolean returnValue = true;
    List<DiskImage> images = filterImageDisks(diskImageList, true, false);
    if (returnValue && checkImagesLocked) {
        returnValue = checkImagesLocked(messages, images);
    }
    if (returnValue && checkIsValid) {
        if (images.size() > 0) {
            returnValue = returnValue && checkDiskImages(messages, storagePoolId, storageDomainId, diskSpaceCheck, checkImagesIllegalInVdsm, checkImagesExist, checkStorageDomain, images);
        } else if (checkImagesExist) {
            returnValue = false;
            ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_VM_HAS_NO_DISKS.toString());
        }
    }
    return returnValue;
}
#end_block

#method_before
private static boolean checkImagesLocked(List<String> messages, List<DiskImage> images) {
    boolean returnValue = true;
    List<String> lockedDisksAliases = new ArrayList<String>();
    for (DiskImage diskImage : images) {
        if (diskImage.getImageStatus() == ImageStatus.LOCKED) {
            lockedDisksAliases.add(diskImage.getDiskAlias());
            returnValue = false;
        }
    }
    if (lockedDisksAliases.size() > 0) {
        ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.toString());
        ListUtils.nullSafeAdd(messages, String.format("$%1$s %2$s", "diskAliases", StringUtils.join(lockedDisksAliases, ", ")));
    }
    return returnValue;
}
#method_after
private static boolean checkImagesLocked(List<String> messages, List<DiskImage> images) {
    return checkImagesNotInStatus(messages, images, ImageStatus.LOCKED, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED);
}
#end_block

#method_before
private static boolean checkDiskImages(List<String> messages, Guid storagePoolId, Guid storageDomainId, boolean diskSpaceCheck, boolean checkImagesIllegal, boolean checkImagesExist, boolean checkStorageDomain, List<DiskImage> images) {
    boolean returnValue = true;
    ArrayList<DiskImage> irsImages = new ArrayList<DiskImage>();
    if (diskSpaceCheck || checkStorageDomain) {
        Set<Guid> domainsIds;
        if (!Guid.Empty.equals(storageDomainId)) {
            domainsIds = Collections.singleton(storageDomainId);
        } else {
            domainsIds = getAllStorageIdsForImageIds(images);
        }
        for (Guid domainId : domainsIds) {
            StorageDomain domain = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(domainId, storagePoolId);
            if (checkStorageDomain) {
                StorageDomainValidator storageDomainValidator = new StorageDomainValidator(domain);
                ValidationResult res = storageDomainValidator.isDomainExistAndActive();
                returnValue = res.isValid();
                if (!returnValue) {
                    messages.add(res.getMessage().toString());
                }
            }
            if (diskSpaceCheck && returnValue && !isStorageDomainWithinThresholds(domain, messages, true)) {
                return false;
            }
        }
    }
    if (returnValue && checkImagesExist) {
        boolean isImagesExist = isImagesExists(images, storagePoolId, storageDomainId, irsImages);
        if (!isImagesExist) {
            returnValue = false;
            ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST.toString());
        }
    }
    if (returnValue && checkImagesIllegal) {
        returnValue = CheckImagesLegality(messages, images, irsImages);
    }
    return returnValue;
}
#method_after
private static boolean checkDiskImages(List<String> messages, Guid storagePoolId, Guid storageDomainId, boolean diskSpaceCheck, boolean checkImagesIllegalInVdsm, boolean checkImagesExist, boolean checkStorageDomain, List<DiskImage> images) {
    boolean returnValue = true;
    ArrayList<DiskImage> irsImages = new ArrayList<DiskImage>();
    if (diskSpaceCheck || checkStorageDomain) {
        Set<Guid> domainsIds;
        if (!Guid.Empty.equals(storageDomainId)) {
            domainsIds = Collections.singleton(storageDomainId);
        } else {
            domainsIds = getAllStorageIdsForImageIds(images);
        }
        for (Guid domainId : domainsIds) {
            StorageDomain domain = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(domainId, storagePoolId);
            if (checkStorageDomain) {
                StorageDomainValidator storageDomainValidator = new StorageDomainValidator(domain);
                ValidationResult res = storageDomainValidator.isDomainExistAndActive();
                returnValue = res.isValid();
                if (!returnValue) {
                    messages.add(res.getMessage().toString());
                }
            }
            if (diskSpaceCheck && returnValue && !isStorageDomainWithinThresholds(domain, messages, true)) {
                return false;
            }
        }
    }
    if (returnValue && checkImagesExist) {
        boolean isImagesExist = isImagesExists(images, storagePoolId, storageDomainId, irsImages);
        if (!isImagesExist) {
            returnValue = false;
            ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST.toString());
        }
    }
    if (returnValue && checkImagesIllegalInVdsm) {
        returnValue = checkImagesLegalityInVdsm(messages, images, irsImages);
    }
    return returnValue;
}
#end_block

#method_before
public static List<DiskImage> filterImageDisks(Collection<? extends Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks) {
    return filterImageDisks(listOfDisks, allowOnlyNotShareableDisks, allowOnlySnapableDisks, true);
}
#method_after
public static List<DiskImage> filterImageDisks(Collection<? extends Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks) {
    List<DiskImage> diskImages = new ArrayList<DiskImage>();
    for (Disk disk : listOfDisks) {
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE && (!allowOnlyNotShareableDisks || !disk.isShareable()) && (!allowOnlySnapableDisks || disk.isAllowSnapshot())) {
            diskImages.add((DiskImage) disk);
        }
    }
    return diskImages;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
        return false;
    }
    setDescription(getVmName());
    setStoragePoolId(getVm().getStoragePoolId());
    // check that target domain exists
    StorageDomainValidator targetstorageDomainValidator = new StorageDomainValidator(getStorageDomain());
    if (!validate(targetstorageDomainValidator.isDomainExistAndActive())) {
        return false;
    }
    // load the disks of vm from database
    VmHandler.updateDisksFromDb(getVm());
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    // check that the target and source domain are in the same storage_pool
    if (DbFacade.getInstance().getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(getStorageDomain().getId(), getVm().getStoragePoolId())) == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
        return false;
    }
    // check if template exists only if asked for
    if (getParameters().getTemplateMustExists()) {
        if (!CheckTemplateInStorageDomain(getVm().getStoragePoolId(), getParameters().getStorageDomainId(), getVm().getVmtGuid())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_EXPORT_DOMAIN);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", getVm().getVmtName()));
            return false;
        }
    }
    // check that the images requested format are valid (COW+Sparse)
    if (!ImagesHandler.CheckImagesConfiguration(getParameters().getStorageDomainId(), new ArrayList<Disk>(getDisksBasedOnImage()), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, ? extends Disk> images = getVm().getDiskMap();
    if (getParameters().getCopyCollapse()) {
        for (DiskImage img : getDisksBasedOnImage()) {
            if (images.containsKey(img.getId())) {
                // mode)
                if (((DiskImage) images.get(img.getId())).getVolumeFormat() == VolumeFormat.RAW && img.getVolumeFormat() != VolumeFormat.RAW) {
                    addCanDoActionMessage(VdcBllMessages.VM_CANNOT_EXPORT_RAW_FORMAT);
                    return false;
                }
            }
        }
    }
    // check destination storage is Export domain
    if (getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(String.format("$storageDomainName %1$s", getStorageDomainName()));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
    }
    // check destination storage have free space
    int sizeInGB = (int) getVm().getActualDiskWithSnapshotsSize();
    if (!doesStorageDomainhaveSpaceForRequest(getStorageDomain(), sizeInGB)) {
        return false;
    }
    SnapshotsValidator snapshotValidator = new SnapshotsValidator();
    if (!(checkVmInStorageDomain() && validate(new StoragePoolValidator(getStoragePool()).isUp()) && validate(snapshotValidator.vmNotDuringSnapshot(getVmId())) && validate(snapshotValidator.vmNotInPreview(getVmId())) && validate(new VmValidator(getVm()).vmDown()) && ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), Guid.Empty, false, true, false, false, true, true, getDisksBasedOnImage()))) {
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
        return false;
    }
    setDescription(getVmName());
    setStoragePoolId(getVm().getStoragePoolId());
    // check that target domain exists
    StorageDomainValidator targetstorageDomainValidator = new StorageDomainValidator(getStorageDomain());
    if (!validate(targetstorageDomainValidator.isDomainExistAndActive())) {
        return false;
    }
    // load the disks of vm from database
    VmHandler.updateDisksFromDb(getVm());
    if (!ImagesHandler.checkImagesIllegal(getReturnValue().getCanDoActionMessages(), getVm().getDiskList())) {
        return false;
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    // check that the target and source domain are in the same storage_pool
    if (DbFacade.getInstance().getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(getStorageDomain().getId(), getVm().getStoragePoolId())) == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
        return false;
    }
    // check if template exists only if asked for
    if (getParameters().getTemplateMustExists()) {
        if (!CheckTemplateInStorageDomain(getVm().getStoragePoolId(), getParameters().getStorageDomainId(), getVm().getVmtGuid())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_EXPORT_DOMAIN);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", getVm().getVmtName()));
            return false;
        }
    }
    Map<Guid, ? extends Disk> images = getVm().getDiskMap();
    // check that the images requested format are valid (COW+Sparse)
    if (!ImagesHandler.CheckImagesConfiguration(getParameters().getStorageDomainId(), new ArrayList<Disk>(images.values()), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getCopyCollapse()) {
        for (DiskImage img : getDisksBasedOnImage()) {
            if (images.containsKey(img.getId())) {
                // mode)
                if (((DiskImage) images.get(img.getId())).getVolumeFormat() == VolumeFormat.RAW && img.getVolumeFormat() != VolumeFormat.RAW) {
                    addCanDoActionMessage(VdcBllMessages.VM_CANNOT_EXPORT_RAW_FORMAT);
                    return false;
                }
            }
        }
    }
    // check destination storage is Export domain
    if (getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(String.format("$storageDomainName %1$s", getStorageDomainName()));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
    }
    // check destination storage have free space
    int sizeInGB = (int) getVm().getActualDiskWithSnapshotsSize();
    if (!doesStorageDomainhaveSpaceForRequest(getStorageDomain(), sizeInGB)) {
        return false;
    }
    SnapshotsValidator snapshotValidator = new SnapshotsValidator();
    if (!(checkVmInStorageDomain() && validate(new StoragePoolValidator(getStoragePool()).isUp()) && validate(snapshotValidator.vmNotDuringSnapshot(getVmId())) && validate(snapshotValidator.vmNotInPreview(getVmId())) && validate(new VmValidator(getVm()).vmDown()) && ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), Guid.Empty, false, true, false, false, true, true, getDisksBasedOnImage()))) {
        return false;
    }
    return true;
}
#end_block

#method_before
private Collection<DiskImage> getDisksBasedOnImage() {
    if (disksImages == null) {
        disksImages = ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false, false);
    }
    return disksImages;
}
#method_after
private Collection<DiskImage> getDisksBasedOnImage() {
    if (disksImages == null) {
        disksImages = ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false);
    }
    return disksImages;
}
#end_block

#method_before
@Override
public void Search() {
    // on destination host (Migrating To)
    if (getEntity() != null) {
        AsyncDataProvider.GetVmsRunningOnOrMigratingToVds(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                @SuppressWarnings("unchecked")
                ArrayList<VM> list = (ArrayList<VM>) returnValue;
                HostVmListModel model = (HostVmListModel) target;
                model.setItems(list);
            }
        }), getEntity().getId());
    } else {
        setItems(new ArrayList<VM>());
    }
}
#method_after
@Override
public void Search() {
    // on destination host (Migrating To)
    if (getEntity() != null) {
        AsyncDataProvider.GetVmsRunningOnOrMigratingToVds(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                @SuppressWarnings("unchecked")
                final ArrayList<VM> list = (ArrayList<VM>) returnValue;
                final HostVmListModel model = (HostVmListModel) target;
                model.setItems(list);
            }
        }), getEntity().getId());
    } else {
        setItems(new ArrayList<VM>());
    }
}
#end_block

#method_before
void initTable(ApplicationResources resources, ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    getTable().addColumn(nameColumn, constants.nameVm());
    // $NON-NLS-1$
    getTable().addColumn(new VmTypeColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> clusterColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVdsGroupName();
        }
    };
    getTable().addColumn(clusterColumn, constants.clusterVm());
    TextColumnWithTooltip<VM> ipColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVmIp();
        }
    };
    getTable().addColumn(ipColumn, constants.ipVm());
    PercentColumn<VM> memColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageMemPercent();
        }
    };
    getTable().addColumn(memColumn, constants.memoryVm());
    PercentColumn<VM> cpuColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageCpuPercent();
        }
    };
    getTable().addColumn(cpuColumn, constants.cpuVm());
    PercentColumn<VM> netColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageNetworkPercent();
        }
    };
    getTable().addColumn(netColumn, constants.networkVm());
    TextColumnWithTooltip<VM> statusColumn = new EnumColumn<VM, VMStatus>() {

        @Override
        protected VMStatus getRawValue(VM object) {
            // check, if the current host is a target for the migration, then override status
            final VDS vds = getDetailModel().getEntity();
            if (object.getStatus().equals(VMStatus.MigratingFrom) && vds.getId().equals(object.getmigrating_to_vds())) {
                return VMStatus.MigratingTo;
            }
            return object.getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusVm());
    TextColumnWithTooltip<VM> hostColumn = new UptimeColumn<VM>() {

        @Override
        protected Double getRawValue(VM object) {
            return object.getRoundedElapsedTime();
        }
    };
    getTable().addColumn(hostColumn, constants.uptimeVm());
    // add action buttons
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.suspendVm(), resources.pauseVmImage(), resources.pauseVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getPauseCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.shutDownVm(), resources.stopVmImage(), resources.stopVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getShutdownCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.powerOffVm(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.consoleVm(), resources.consoleImage(), resources.consoleDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            ConsoleModel defaultConsoleModel = getDetailModel().getDefaultConsoleModel();
            return defaultConsoleModel != null ? defaultConsoleModel.getConnectCommand() : null;
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.migrateVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getMigrateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.cancelMigrationVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getCancelMigrateCommand();
        }
    });
}
#method_after
void initTable(ApplicationResources resources, ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    getTable().addColumn(nameColumn, constants.nameVm());
    // $NON-NLS-1$
    getTable().addColumn(new VmTypeColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> clusterColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVdsGroupName();
        }
    };
    getTable().addColumn(clusterColumn, constants.clusterVm());
    TextColumnWithTooltip<VM> ipColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVmIp();
        }
    };
    getTable().addColumn(ipColumn, constants.ipVm());
    PercentColumn<VM> memColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageMemPercent();
        }
    };
    getTable().addColumn(memColumn, constants.memoryVm());
    PercentColumn<VM> cpuColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageCpuPercent();
        }
    };
    getTable().addColumn(cpuColumn, constants.cpuVm());
    PercentColumn<VM> netColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageNetworkPercent();
        }
    };
    getTable().addColumn(netColumn, constants.networkVm());
    TextColumnWithTooltip<VM> statusColumn = new EnumColumn<VM, VMStatus>() {

        @Override
        protected VMStatus getRawValue(VM object) {
            // check, if the current host is a target for the migration, then override status
            final VDS vds = getDetailModel().getEntity();
            if (object.getStatus().equals(VMStatus.MigratingFrom) && vds.getId().equals(object.getMigratingToVds())) {
                return VMStatus.MigratingTo;
            }
            return object.getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusVm());
    TextColumnWithTooltip<VM> hostColumn = new UptimeColumn<VM>() {

        @Override
        protected Double getRawValue(VM object) {
            return object.getRoundedElapsedTime();
        }
    };
    getTable().addColumn(hostColumn, constants.uptimeVm());
    // add action buttons
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.suspendVm(), resources.pauseVmImage(), resources.pauseVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getPauseCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.shutDownVm(), resources.stopVmImage(), resources.stopVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getShutdownCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.powerOffVm(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.consoleVm(), resources.consoleImage(), resources.consoleDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            ConsoleModel defaultConsoleModel = getDetailModel().getDefaultConsoleModel();
            return defaultConsoleModel != null ? defaultConsoleModel.getConnectCommand() : null;
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.migrateVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getMigrateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.cancelMigrationVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getCancelMigrateCommand();
        }
    });
}
#end_block

#method_before
public static void GetIrsImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoFileMetaData> repoList = (ArrayList<RepoFileMetaData>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoFileMetaData RepoFileMetaData : repoList) {
                    fileNameList.add(RepoFileMetaData.getRepoFileName());
                }
                Collections.sort(fileNameList, new Linq.CaseInsensitiveComparer());
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetAllImagesListByStoragePoolIdParameters parameters = new GetAllImagesListByStoragePoolIdParameters(storagePoolId);
    Frontend.RunQuery(VdcQueryType.GetAllIsoImagesListByStoragePoolId, parameters, aQuery);
}
#method_after
public static void GetIrsImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoFileMetaData> repoList = (ArrayList<RepoFileMetaData>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoFileMetaData RepoFileMetaData : repoList) {
                    fileNameList.add(RepoFileMetaData.getRepoFileName());
                }
                Collections.sort(fileNameList, new Linq.CaseInsensitiveComparer());
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    GetImagesListByStoragePoolIdParameters parameters = new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageType.ISO);
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, parameters, aQuery);
}
#end_block

#method_before
public static void GetFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoFileMetaData> repoList = (ArrayList<RepoFileMetaData>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoFileMetaData RepoFileMetaData : repoList) {
                    fileNameList.add(RepoFileMetaData.getRepoFileName());
                }
                Collections.sort(fileNameList, new Linq.CaseInsensitiveComparer());
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllFloppyImagesListByStoragePoolId, new GetAllImagesListByStoragePoolIdParameters(storagePoolId), aQuery);
}
#method_after
public static void GetFloppyImageList(AsyncQuery aQuery, Guid storagePoolId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<RepoFileMetaData> repoList = (ArrayList<RepoFileMetaData>) source;
                ArrayList<String> fileNameList = new ArrayList<String>();
                for (RepoFileMetaData RepoFileMetaData : repoList) {
                    fileNameList.add(RepoFileMetaData.getRepoFileName());
                }
                Collections.sort(fileNameList, new Linq.CaseInsensitiveComparer());
                return fileNameList;
            }
            return new ArrayList<String>();
        }
    };
    Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new GetImagesListByStoragePoolIdParameters(storagePoolId, ImageType.Floppy), aQuery);
}
#end_block

#method_before
public static VolumeFormat GetDiskVolumeFormat(VolumeType volumeType, StorageType storageType) {
    switch(storageType) {
        case NFS:
        case LOCALFS:
        case POSIXFS:
            return VolumeFormat.RAW;
        case ISCSI:
        case FCP:
            switch(volumeType) {
                case Sparse:
                    return VolumeFormat.COW;
                case Preallocated:
                    return VolumeFormat.RAW;
                default:
                    return VolumeFormat.Unassigned;
            }
        default:
            return VolumeFormat.Unassigned;
    }
}
#method_after
public static VolumeFormat GetDiskVolumeFormat(VolumeType volumeType, StorageType storageType) {
    switch(storageType) {
        case NFS:
        case LOCALFS:
        case POSIXFS:
        case GLUSTERFS:
            return VolumeFormat.RAW;
        case ISCSI:
        case FCP:
            switch(volumeType) {
                case Sparse:
                    return VolumeFormat.COW;
                case Preallocated:
                    return VolumeFormat.RAW;
                default:
                    return VolumeFormat.Unassigned;
            }
        default:
            return VolumeFormat.Unassigned;
    }
}
#end_block

#method_before
public static void GetClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, "", "", false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void GetClusterGlusterServices(AsyncQuery aQuery, Guid clusterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source;
        }
    };
    // Passing empty values for Volume and Brick to get the services of all the volumes/hosts in the cluster
    GlusterVolumeAdvancedDetailsParameters parameters = // $NON-NLS-1$ //$NON-NLS-2$
    new GlusterVolumeAdvancedDetailsParameters(clusterId, null, null, false);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void GetGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, String volume, String brick) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volume, brick, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#method_after
public static void GetGlusterVolumeBrickDetails(AsyncQuery aQuery, Guid clusterId, Guid volumeId, Guid brickId) {
    GlusterVolumeAdvancedDetailsParameters parameters = new GlusterVolumeAdvancedDetailsParameters(clusterId, volumeId, brickId, true);
    Frontend.RunQuery(VdcQueryType.GetGlusterVolumeAdvancedDetails, parameters, aQuery);
}
#end_block

#method_before
public static void GetVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VM> vms = (ArrayList<VM>) source;
            return vms;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new GetVmsRunningOnOrMigratingToVdsParameters(id), aQuery);
}
#method_after
public static void GetVmsRunningOnOrMigratingToVds(AsyncQuery aQuery, Guid id) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<VM>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new GetVmsRunningOnOrMigratingToVdsParameters(id), aQuery);
}
#end_block

#method_before
public static ArrayList<StorageType> GetStoragePoolTypeList() {
    return new ArrayList<StorageType>(Arrays.asList(new StorageType[] { StorageType.NFS, StorageType.ISCSI, StorageType.FCP, StorageType.LOCALFS, StorageType.POSIXFS }));
}
#method_after
public static ArrayList<StorageType> GetStoragePoolTypeList() {
    return new ArrayList<StorageType>(Arrays.asList(new StorageType[] { StorageType.NFS, StorageType.ISCSI, StorageType.FCP, StorageType.LOCALFS, StorageType.POSIXFS, StorageType.GLUSTERFS }));
}
#end_block

#method_before
public static boolean IsVersionMatchStorageType(Version version, StorageType type) {
    return !((type == StorageType.LOCALFS && version.compareTo(new Version(2, 2)) <= 0) || (type == StorageType.POSIXFS && version.compareTo(new Version(3, 0)) <= 0));
}
#method_after
public static boolean IsVersionMatchStorageType(Version version, StorageType type) {
    return !((type == StorageType.LOCALFS && version.compareTo(new Version(2, 2)) <= 0) || (type == StorageType.POSIXFS && version.compareTo(new Version(3, 0)) <= 0) || (type == StorageType.GLUSTERFS && version.compareTo(new Version(3, 2)) <= 0));
}
#end_block

#method_before
// get { return SelectedItems == null ? new object[0] : SelectedItems.Cast<storage_domains>().Select(a =>
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object item : getSelectedItems()) {
            storage_domains i = (storage_domains) item;
            items.add(i.getId());
        }
        return items.toArray(new Object[] {});
    }
}
#method_after
// get { return SelectedItems == null ? new object[0] : SelectedItems.Cast<storage_domains>().Select(a =>
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object item : getSelectedItems()) {
            StorageDomain i = (StorageDomain) item;
            items.add(i.getId());
        }
        return items.toArray(new Object[] {});
    }
}
#end_block

#method_before
@Override
protected void InitDetailModels() {
    super.InitDetailModels();
    vmBackupModel = new VmBackupModel();
    vmBackupModel.setIsAvailable(false);
    templateBackupModel = new TemplateBackupModel();
    templateBackupModel.setIsAvailable(false);
    vmListModel = new StorageVmListModel();
    vmListModel.setIsAvailable(false);
    templateListModel = new StorageTemplateListModel();
    templateListModel.setIsAvailable(false);
    isoListModel = new StorageIsoListModel();
    isoListModel.setIsAvailable(false);
    ObservableCollection<EntityModel> list = new ObservableCollection<EntityModel>();
    list.add(new StorageGeneralModel());
    list.add(new StorageDataCenterListModel());
    list.add(vmBackupModel);
    list.add(templateBackupModel);
    list.add(vmListModel);
    list.add(templateListModel);
    list.add(isoListModel);
    list.add(new StorageEventListModel());
    list.add(new PermissionListModel());
    setDetailModels(list);
}
#method_after
@Override
protected void InitDetailModels() {
    super.InitDetailModels();
    vmBackupModel = new VmBackupModel();
    vmBackupModel.setIsAvailable(false);
    templateBackupModel = new TemplateBackupModel();
    templateBackupModel.setIsAvailable(false);
    vmListModel = new StorageVmListModel();
    vmListModel.setIsAvailable(false);
    templateListModel = new StorageTemplateListModel();
    templateListModel.setIsAvailable(false);
    isoListModel = new StorageIsoListModel();
    isoListModel.setIsAvailable(false);
    diskListModel = new StorageDiskListModel();
    diskListModel.setIsAvailable(false);
    ObservableCollection<EntityModel> list = new ObservableCollection<EntityModel>();
    list.add(new StorageGeneralModel());
    list.add(new StorageDataCenterListModel());
    list.add(vmBackupModel);
    list.add(templateBackupModel);
    list.add(vmListModel);
    list.add(templateListModel);
    list.add(isoListModel);
    list.add(diskListModel);
    list.add(new StorageEventListModel());
    list.add(new PermissionListModel());
    setDetailModels(list);
}
#end_block

#method_before
private void Edit() {
    storage_domains storage = (storage_domains) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getstorage_name());
    model.setOriginalName(storage.getstorage_name());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageActive = model.isStorageActive();
    boolean isNew = storage == null;
    model.getHost().setIsChangable(isNew);
    model.getName().setIsChangable(isStorageActive);
    model.getAvailableStorageItems().setIsChangable(isStorageActive);
    model.setIsChangable(isStorageActive);
    IStorageModel item = null;
    switch(storage.getstorage_type()) {
        case NFS:
            item = PrepareNfsStorageForEdit(storage);
            break;
        case FCP:
            item = PrepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = PrepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = PrepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = PreparePosixStorageForEdit(storage);
            break;
        case GLUSTERFS:
            item = PrepareGlusterStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageActive) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#method_after
private void Edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageActive = model.isStorageActive();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageActive);
    model.getAvailableStorageItems().setIsChangable(isStorageActive);
    model.setIsChangable(isStorageActive);
    IStorageModel item = null;
    switch(storage.getStorageType()) {
        case NFS:
            item = PrepareNfsStorageForEdit(storage);
            break;
        case FCP:
            item = PrepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = PrepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = PrepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = PreparePosixStorageForEdit(storage);
            break;
        case GLUSTERFS:
            item = prepareGlusterStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageActive) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#end_block

#method_before
private IStorageModel PrepareNfsStorageForEdit(storage_domains storage) {
    final NfsStorageModel model = new NfsStorageModel();
    model.setRole(storage.getstorage_domain_type());
    model.setIsEditMode(true);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            storage_server_connections connection = (storage_server_connections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getRetransmissions().setEntity(connection.getNfsRetrans());
            model.getTimeout().setEntity(connection.getNfsTimeo());
            for (Object item : model.getVersion().getItems()) {
                EntityModel itemModel = (EntityModel) item;
                boolean noNfsVersion = itemModel.getEntity() == null && connection.getNfsVersion() == null;
                boolean foundNfsVersion = itemModel.getEntity() != null && itemModel.getEntity().equals(connection.getNfsVersion());
                if (noNfsVersion || foundNfsVersion) {
                    model.getVersion().setSelectedItem(item);
                    break;
                }
            }
            // If any settings were overridden, reflect this in the override checkbox
            model.getOverride().setEntity(connection.getNfsVersion() != null || connection.getNfsRetrans() != null || connection.getNfsTimeo() != null);
        }
    }), storage.getstorage(), true);
    return model;
}
#method_after
private IStorageModel PrepareNfsStorageForEdit(StorageDomain storage) {
    final NfsStorageModel model = new NfsStorageModel();
    model.setRole(storage.getStorageDomainType());
    model.setIsEditMode(true);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getRetransmissions().setEntity(connection.getNfsRetrans());
            model.getTimeout().setEntity(connection.getNfsTimeo());
            for (Object item : model.getVersion().getItems()) {
                EntityModel itemModel = (EntityModel) item;
                boolean noNfsVersion = itemModel.getEntity() == null && connection.getNfsVersion() == null;
                boolean foundNfsVersion = itemModel.getEntity() != null && itemModel.getEntity().equals(connection.getNfsVersion());
                if (noNfsVersion || foundNfsVersion) {
                    model.getVersion().setSelectedItem(item);
                    break;
                }
            }
            // If any settings were overridden, reflect this in the override checkbox
            model.getOverride().setEntity(connection.getNfsVersion() != null || connection.getNfsRetrans() != null || connection.getNfsTimeo() != null);
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel PrepareLocalStorageForEdit(storage_domains storage) {
    LocalStorageModel model = new LocalStorageModel();
    model.setRole(storage.getstorage_domain_type());
    model.getPath().setIsAvailable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            LocalStorageModel localStorageModel = (LocalStorageModel) target;
            storage_server_connections connection = (storage_server_connections) returnValue;
            localStorageModel.getPath().setEntity(connection.getconnection());
        }
    }), storage.getstorage(), true);
    return model;
}
#method_after
private IStorageModel PrepareLocalStorageForEdit(StorageDomain storage) {
    LocalStorageModel model = new LocalStorageModel();
    model.setRole(storage.getStorageDomainType());
    model.getPath().setIsAvailable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            LocalStorageModel localStorageModel = (LocalStorageModel) target;
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            localStorageModel.getPath().setEntity(connection.getconnection());
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel PreparePosixStorageForEdit(storage_domains storage) {
    final PosixStorageModel model = new PosixStorageModel();
    model.setRole(storage.getstorage_domain_type());
    model.getPath().setIsChangable(false);
    model.getVfsType().setIsChangable(false);
    model.getMountOptions().setIsChangable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            storage_server_connections connection = (storage_server_connections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getstorage(), true);
    return model;
}
#method_after
private IStorageModel PreparePosixStorageForEdit(StorageDomain storage) {
    final PosixStorageModel model = new PosixStorageModel();
    model.setRole(storage.getStorageDomainType());
    model.getPath().setIsChangable(false);
    model.getVfsType().setIsChangable(false);
    model.getMountOptions().setIsChangable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel PrepareIscsiStorageForEdit(storage_domains storage) {
    IscsiStorageModel model = new IscsiStorageModel();
    model.setRole(storage.getstorage_domain_type());
    PrepareSanStorageForEdit(model);
    return model;
}
#method_after
private IStorageModel PrepareIscsiStorageForEdit(StorageDomain storage) {
    IscsiStorageModel model = new IscsiStorageModel();
    model.setRole(storage.getStorageDomainType());
    PrepareSanStorageForEdit(model);
    return model;
}
#end_block

#method_before
private IStorageModel PrepareFcpStorageForEdit(storage_domains storage) {
    FcpStorageModel model = new FcpStorageModel();
    model.setRole(storage.getstorage_domain_type());
    PrepareSanStorageForEdit(model);
    return model;
}
#method_after
private IStorageModel PrepareFcpStorageForEdit(StorageDomain storage) {
    FcpStorageModel model = new FcpStorageModel();
    model.setRole(storage.getStorageDomainType());
    PrepareSanStorageForEdit(model);
    return model;
}
#end_block

#method_before
private void PrepareSanStorageForEdit(final SanStorageModel model) {
    StorageModel storageModel = (StorageModel) getWindow();
    storage_domains storage = (storage_domains) getSelectedItem();
    boolean isStorageActive = storageModel.isStorageActive();
    if (isStorageActive) {
        storageModel.getHost().getSelectedItemChangedEvent().addListener(new IEventListener() {

            @Override
            public void eventRaised(Event ev, Object sender, EventArgs args) {
                PostPrepareSanStorageForEdit(model, true);
            }
        });
    } else {
        PostPrepareSanStorageForEdit(model, false);
    }
}
#method_after
private void PrepareSanStorageForEdit(final SanStorageModel model) {
    StorageModel storageModel = (StorageModel) getWindow();
    boolean isStorageActive = storageModel.isStorageActive();
    if (isStorageActive) {
        storageModel.getHost().getSelectedItemChangedEvent().addListener(new IEventListener() {

            @Override
            public void eventRaised(Event ev, Object sender, EventArgs args) {
                PostPrepareSanStorageForEdit(model, true);
            }
        });
    } else {
        PostPrepareSanStorageForEdit(model, false);
    }
}
#end_block

#method_before
private void PostPrepareSanStorageForEdit(SanStorageModel model, boolean isStorageActive) {
    StorageModel storageModel = (StorageModel) getWindow();
    storage_domains storage = (storage_domains) getSelectedItem();
    model.setStorageDomain(storage);
    VDS host = (VDS) storageModel.getHost().getSelectedItem();
    Guid hostId = host != null && isStorageActive ? host.getId() : null;
    AsyncDataProvider.GetLunsByVgId(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            SanStorageModel sanStorageModel = (SanStorageModel) target;
            ArrayList<LUNs> lunList = (ArrayList<LUNs>) returnValue;
            sanStorageModel.ApplyData(lunList, true);
        }
    }, storageModel.getHash()), storage.getstorage(), hostId);
}
#method_after
private void PostPrepareSanStorageForEdit(SanStorageModel model, boolean isStorageActive) {
    StorageModel storageModel = (StorageModel) getWindow();
    StorageDomain storage = (StorageDomain) getSelectedItem();
    model.setStorageDomain(storage);
    VDS host = (VDS) storageModel.getHost().getSelectedItem();
    Guid hostId = host != null && isStorageActive ? host.getId() : null;
    AsyncDataProvider.GetLunsByVgId(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            SanStorageModel sanStorageModel = (SanStorageModel) target;
            ArrayList<LUNs> lunList = (ArrayList<LUNs>) returnValue;
            sanStorageModel.ApplyData(lunList, true);
        }
    }, storageModel.getHash()), storage.getStorage(), hostId);
}
#end_block

#method_before
private void ImportDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new ImportStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().importPreConfiguredDomainTitle());
    // $NON-NLS-1$
    model.setHashName("import_pre-configured_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.getName().setIsAvailable(false);
    model.getFormat().setIsAvailable(false);
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    NfsStorageModel tempVar = new NfsStorageModel();
    tempVar.setRole(StorageDomainType.ISO);
    items.add(tempVar);
    NfsStorageModel tempVar2 = new NfsStorageModel();
    tempVar2.setRole(StorageDomainType.ImportExport);
    items.add(tempVar2);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnImport", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#method_after
private void ImportDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new ImportStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().importPreConfiguredDomainTitle());
    // $NON-NLS-1$
    model.setHashName("import_pre-configured_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.getName().setIsAvailable(false);
    model.getDescription().setIsAvailable(false);
    model.getFormat().setIsAvailable(false);
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    NfsStorageModel tempVar = new NfsStorageModel();
    tempVar.setRole(StorageDomainType.ISO);
    items.add(tempVar);
    NfsStorageModel tempVar2 = new NfsStorageModel();
    tempVar2.setRole(StorageDomainType.ImportExport);
    items.add(tempVar2);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnImport", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#end_block

#method_before
private void CleanConnection(storage_server_connections connection, Guid hostId) {
    Frontend.RunAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
        }
    }, this);
}
#method_after
private void CleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.RunAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId), null, this);
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    RemoveStorageModel model = new RemoveStorageModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeStoragesTitle());
    // $NON-NLS-1$
    model.setHashName("remove_storage");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToRemoveTheStorageDomainMsg());
    model.getFormat().setIsAvailable(false);
    AsyncDataProvider.GetHostListByStatus(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            StorageListModel storageListModel = (StorageListModel) array[0];
            RemoveStorageModel removeStorageModel = (RemoveStorageModel) array[1];
            storage_domains storage = (storage_domains) storageListModel.getSelectedItem();
            ArrayList<VDS> hosts = (ArrayList<VDS>) returnValue;
            removeStorageModel.getHostList().setItems(hosts);
            removeStorageModel.getHostList().setSelectedItem(Linq.FirstOrDefault(hosts));
            removeStorageModel.getFormat().setIsAvailable(storage.getstorage_domain_type() == StorageDomainType.ISO || storage.getstorage_domain_type() == StorageDomainType.ImportExport);
            if (hosts.isEmpty()) {
                // $NON-NLS-1$
                UICommand tempVar = new UICommand("Cancel", storageListModel);
                tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar.setIsDefault(true);
                tempVar.setIsCancel(true);
                removeStorageModel.getCommands().add(tempVar);
            } else {
                UICommand command;
                // $NON-NLS-1$
                command = new UICommand("OnRemove", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().ok());
                command.setIsDefault(true);
                removeStorageModel.getCommands().add(command);
                // $NON-NLS-1$
                command = new UICommand("Cancel", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                command.setIsCancel(true);
                removeStorageModel.getCommands().add(command);
            }
        }
    }), VDSStatus.Up);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    RemoveStorageModel model = new RemoveStorageModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeStoragesTitle());
    // $NON-NLS-1$
    model.setHashName("remove_storage");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToRemoveTheStorageDomainMsg());
    model.getFormat().setIsAvailable(false);
    AsyncDataProvider.GetHostListByStatus(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            StorageListModel storageListModel = (StorageListModel) array[0];
            RemoveStorageModel removeStorageModel = (RemoveStorageModel) array[1];
            StorageDomain storage = (StorageDomain) storageListModel.getSelectedItem();
            ArrayList<VDS> hosts = (ArrayList<VDS>) returnValue;
            removeStorageModel.getHostList().setItems(hosts);
            removeStorageModel.getHostList().setSelectedItem(Linq.FirstOrDefault(hosts));
            removeStorageModel.getFormat().setIsAvailable(storage.getStorageDomainType() == StorageDomainType.ISO || storage.getStorageDomainType() == StorageDomainType.ImportExport);
            if (hosts.isEmpty()) {
                // $NON-NLS-1$
                UICommand tempVar = new UICommand("Cancel", storageListModel);
                tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar.setIsDefault(true);
                tempVar.setIsCancel(true);
                removeStorageModel.getCommands().add(tempVar);
            } else {
                UICommand command;
                // $NON-NLS-1$
                command = new UICommand("OnRemove", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().ok());
                command.setIsDefault(true);
                removeStorageModel.getCommands().add(command);
                // $NON-NLS-1$
                command = new UICommand("Cancel", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                command.setIsCancel(true);
                removeStorageModel.getCommands().add(command);
            }
        }
    }), VDSStatus.Up);
}
#end_block

#method_before
private void OnRemove() {
    if (getSelectedItem() != null) {
        storage_domains storage = (storage_domains) getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        VDS host = (VDS) model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat((storage.getstorage_domain_type() == StorageDomainType.Data || storage.getstorage_domain_type() == StorageDomainType.Master) ? true : (Boolean) model.getFormat().getEntity());
        Frontend.RunAction(VdcActionType.RemoveStorageDomain, tempVar, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
            }
        }, this);
    }
    Cancel();
}
#method_after
private void OnRemove() {
    if (getSelectedItem() != null) {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        VDS host = (VDS) model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat((storage.getStorageDomainType() == StorageDomainType.Data || storage.getStorageDomainType() == StorageDomainType.Master) ? true : (Boolean) model.getFormat().getEntity());
        Frontend.RunAction(VdcActionType.RemoveStorageDomain, tempVar, null, this);
    }
    Cancel();
}
#end_block

#method_before
private void Destroy() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().destroyStorageDomainTitle());
    // $NON-NLS-1$
    model.setHashName("destroy_storage_domain");
    ArrayList<String> items = new ArrayList<String>();
    items.add(((storage_domains) getSelectedItem()).getstorage_name());
    model.setItems(items);
    model.getLatch().setIsAvailable(true);
    model.getLatch().setIsChangable(true);
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnDestroy", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#method_after
private void Destroy() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().destroyStorageDomainTitle());
    // $NON-NLS-1$
    model.setHashName("destroy_storage_domain");
    ArrayList<String> items = new ArrayList<String>();
    items.add(((StorageDomain) getSelectedItem()).getStorageName());
    model.setItems(items);
    model.getLatch().setIsAvailable(true);
    model.getLatch().setIsChangable(true);
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnDestroy", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#end_block

#method_before
private void OnDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    storage_domains storageDomain = (storage_domains) getSelectedItem();
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#method_after
private void OnDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    StorageDomain storageDomain = (StorageDomain) getSelectedItem();
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#end_block

#method_before
private void OnSavePostNameValidation() {
    StorageModel model = (StorageModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    if (model.getSelectedItem() instanceof NfsStorageModel) {
        SaveNfsStorage();
    } else if (model.getSelectedItem() instanceof LocalStorageModel) {
        SaveLocalStorage();
    } else if (model.getSelectedItem() instanceof PosixStorageModel) {
        SavePosixStorage();
    } else if (model.getSelectedItem() instanceof GlusterStorageModel) {
        SaveGlusterStorage();
    } else {
        SaveSanStorage();
    }
}
#method_after
private void OnSavePostNameValidation() {
    StorageModel model = (StorageModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    if (model.getSelectedItem() instanceof NfsStorageModel) {
        SaveNfsStorage();
    } else if (model.getSelectedItem() instanceof LocalStorageModel) {
        SaveLocalStorage();
    } else if (model.getSelectedItem() instanceof PosixStorageModel) {
        SavePosixStorage();
    } else if (model.getSelectedItem() instanceof GlusterStorageModel) {
        saveGlusterStorage();
    } else {
        SaveSanStorage();
    }
}
#end_block

#method_before
private void Cancel() {
    setWindow(null);
}
#method_after
private void Cancel() {
    setWindow(null);
    Frontend.Unsubscribe();
}
#end_block

#method_before
@Override
protected void ItemsCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e) {
    super.ItemsCollectionChanged(sender, e);
    // Try to select an item corresponding to the system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        storage_domains storage = (storage_domains) getSystemTreeSelectedItem().getEntity();
        setSelectedItem(Linq.FirstOrDefault(Linq.<storage_domains>Cast(getItems()), new Linq.StoragePredicate(storage.getId())));
    }
}
#method_after
@Override
protected void ItemsCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e) {
    super.ItemsCollectionChanged(sender, e);
    // Try to select an item corresponding to the system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        setSelectedItem(Linq.FirstOrDefault(Linq.<StorageDomain>Cast(getItems()), new Linq.StoragePredicate(storage.getId())));
    }
}
#end_block

#method_before
@Override
protected void UpdateDetailsAvailability() {
    if (getSelectedItem() != null) {
        storage_domains storage = (storage_domains) getSelectedItem();
        boolean isBackupStorage = storage.getstorage_domain_type() == StorageDomainType.ImportExport;
        boolean isDataStorage = storage.getstorage_domain_type() == StorageDomainType.Data || storage.getstorage_domain_type() == StorageDomainType.Master;
        boolean isIsoStorage = storage.getstorage_domain_type() == StorageDomainType.ISO;
        vmBackupModel.setIsAvailable(isBackupStorage);
        templateBackupModel.setIsAvailable(isBackupStorage);
        vmListModel.setIsAvailable(isDataStorage);
        templateListModel.setIsAvailable(isDataStorage);
        isoListModel.setIsAvailable(isIsoStorage);
    }
}
#method_after
@Override
protected void UpdateDetailsAvailability() {
    if (getSelectedItem() != null) {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        boolean isBackupStorage = storage.getStorageDomainType() == StorageDomainType.ImportExport;
        boolean isDataStorage = storage.getStorageDomainType() == StorageDomainType.Data || storage.getStorageDomainType() == StorageDomainType.Master;
        boolean isIsoStorage = storage.getStorageDomainType() == StorageDomainType.ISO;
        vmBackupModel.setIsAvailable(isBackupStorage);
        templateBackupModel.setIsAvailable(isBackupStorage);
        vmListModel.setIsAvailable(isDataStorage);
        templateListModel.setIsAvailable(isDataStorage);
        diskListModel.setIsAvailable(isDataStorage);
        isoListModel.setIsAvailable(isIsoStorage);
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    ArrayList<storage_domains> items = getSelectedItems() != null ? Linq.<storage_domains>Cast(getSelectedItems()) : new ArrayList<storage_domains>();
    storage_domains item = (storage_domains) getSelectedItem();
    getNewDomainCommand().setIsAvailable(true);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && isEditAvailable(item));
    getRemoveCommand().setIsExecutionAllowed(items.size() == 1 && Linq.FindAllStorageDomainsBySharedStatus(items, StorageDomainSharedStatus.Unattached).size() == items.size());
    getDestroyCommand().setIsExecutionAllowed(item != null && items.size() == 1);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage);
    getNewDomainCommand().setIsAvailable(isAvailable);
    getRemoveCommand().setIsAvailable(isAvailable);
}
#method_after
private void UpdateActionAvailability() {
    ArrayList<StorageDomain> items = getSelectedItems() != null ? Linq.<StorageDomain>Cast(getSelectedItems()) : new ArrayList<StorageDomain>();
    StorageDomain item = (StorageDomain) getSelectedItem();
    getNewDomainCommand().setIsAvailable(true);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && isEditAvailable(item));
    getRemoveCommand().setIsExecutionAllowed(items.size() == 1 && Linq.FindAllStorageDomainsBySharedStatus(items, StorageDomainSharedStatus.Unattached).size() == items.size());
    getDestroyCommand().setIsExecutionAllowed(item != null && items.size() == 1);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage);
    getNewDomainCommand().setIsAvailable(isAvailable);
    getRemoveCommand().setIsAvailable(isAvailable);
}
#end_block

#method_before
private boolean isEditAvailable(storage_domains storageDomain) {
    if (storageDomain == null) {
        return false;
    }
    boolean isActive = storageDomain.getstorage_domain_shared_status() == StorageDomainSharedStatus.Active || storageDomain.getstorage_domain_shared_status() == StorageDomainSharedStatus.Mixed;
    boolean isBlockStorage = storageDomain.getstorage_type().isBlockDomain();
    return isBlockStorage ? true : isActive;
}
#method_after
private boolean isEditAvailable(StorageDomain storageDomain) {
    if (storageDomain == null) {
        return false;
    }
    boolean isActive = storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Active || storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Mixed;
    boolean isBlockStorage = storageDomain.getStorageType().isBlockDomain();
    return isBlockStorage ? true : isActive;
}
#end_block

#method_before
private void SavePosixStorage(TaskContext context) {
    this.context = context;
    storage_domains selectedItem = (storage_domains) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = (String) posixModel.getPath().getEntity();
    storageDomain = isNew ? new storage_domain_static() : (storage_domain_static) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getstorage_name();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SavePosixStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = (String) posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void SaveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    storage_server_connections connection = new storage_server_connections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType((String) posixModel.getVfsType().getEntity());
    connection.setMountOptions((String) posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddPosixFsStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType((String) posixModel.getVfsType().getEntity());
    connection.setMountOptions((String) posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddPosixFsStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    storage_domains selectedItem = (storage_domains) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new storage_domain_static() : (storage_domain_static) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getstorage_name();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    storage_server_connections tempVar = new storage_server_connections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.RemoveStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#method_after
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#end_block

#method_before
public void SaveNewSanStorage() {
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    ArrayList<String> lunIds = new ArrayList<String>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(lunIds);
    params.setForce(force);
    Frontend.RunAction(VdcActionType.AddSANStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            if (!result.getReturnValue().getSucceeded()) {
                storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
                return;
            }
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                VdcReturnValueBase returnValue = result.getReturnValue();
                NGuid storageId = (NGuid) returnValue.getActionReturnValue();
                storageListModel.AttachStorageToDataCenter((Guid) storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#method_after
public void SaveNewSanStorage() {
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    ArrayList<String> lunIds = new ArrayList<String>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(lunIds);
    params.setForce(force);
    Frontend.RunAction(VdcActionType.AddSANStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storageListModel.storageModel = storageModel.getSelectedItem();
            if (!result.getReturnValue().getSucceeded()) {
                storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
                return;
            }
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                VdcReturnValueBase returnValue = result.getReturnValue();
                NGuid storageId = (NGuid) returnValue.getActionReturnValue();
                storageListModel.AttachStorageToDataCenter((Guid) storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    }, this);
}
#end_block

#method_before
private void SaveLocalStorage(TaskContext context) {
    this.context = context;
    storage_domains selectedItem = (storage_domains) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = (String) localModel.getPath().getEntity();
    storageDomain = isNew ? new storage_domain_static() : (storage_domain_static) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getstorage_name();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewLocalStorage();
                }
            }
        }), host.getstorage_pool_id(), path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SaveLocalStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = (String) localModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewLocalStorage();
                }
            }
        }), host.getStoragePoolId(), path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    storage_server_connections tempVar = new storage_server_connections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = false;
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            if (storageListModel.removeConnection) {
                storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
                storageListModel.removeConnection = false;
            }
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = false;
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            if (storageListModel.removeConnection) {
                storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
                storageListModel.removeConnection = false;
            }
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void SaveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    storage_domains storage = (storage_domains) getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new storage_domain_static() : (storage_domain_static) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? sanModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? sanModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setStorageFormat(isNew ? (StorageFormatType) sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    if (isNew) {
        SaveNewSanStorage();
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModel sanStorageModel = (SanStorageModel) storageModel.getSelectedItem();
                storage_domains storageDomain1 = (storage_domains) storageListModel.getSelectedItem();
                ArrayList<String> lunIds = new ArrayList<String>();
                for (LunModel lun : sanStorageModel.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.RunAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunIds), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                        }
                    }, this);
                }
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SaveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    StorageDomain storage = (StorageDomain) getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setStorageType(isNew ? sanModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? sanModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageFormat(isNew ? (StorageFormatType) sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    if (isNew) {
        SaveNewSanStorage();
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModel sanStorageModel = (SanStorageModel) storageModel.getSelectedItem();
                boolean force = sanStorageModel.isForce();
                StorageDomain storageDomain1 = (StorageDomain) storageListModel.getSelectedItem();
                ArrayList<String> lunIds = new ArrayList<String>();
                for (LunModel lun : sanStorageModel.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.RunAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunIds, force), null, this);
                }
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
private void AttachStorageToDataCenter(Guid storageId, Guid dataCenterId) {
    Frontend.RunAction(VdcActionType.AttachStorageDomainToPool, new StorageDomainPoolParametersBase(storageId, dataCenterId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
        }
    }, this);
}
#method_after
private void AttachStorageToDataCenter(Guid storageId, Guid dataCenterId) {
    Frontend.RunAction(VdcActionType.AttachStorageDomainToPool, new StorageDomainPoolParametersBase(storageId, dataCenterId), null, this);
}
#end_block

#method_before
public void ImportNfsStorageInit() {
    if (nfsConnection != null) {
        // Clean nfs connection
        Frontend.RunAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                VdcReturnValueBase returnVal = result.getReturnValue();
                boolean success = returnVal != null && returnVal.getSucceeded();
                if (success) {
                    storageListModel.nfsConnection = null;
                }
                storageListModel.ImportNfsStoragePostInit();
            }
        }, this);
    } else {
        ImportNfsStoragePostInit();
    }
}
#method_after
public void ImportNfsStorageInit() {
    if (nfsConnection != null) {
        // Clean nfs connection
        Frontend.RunAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                VdcReturnValueBase returnVal = result.getReturnValue();
                boolean success = returnVal != null && returnVal.getSucceeded();
                if (success) {
                    storageListModel.nfsConnection = null;
                }
                storageListModel.ImportNfsStoragePostInit();
            }
        }, this);
    } else {
        ImportNfsStoragePostInit();
    }
}
#end_block

#method_before
public void ImportNfsStoragePostInit() {
    // Check storage domain existence
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageListModel storageListModel = (StorageListModel) target;
            ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getstorage_name();
                OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().importFailedDomainAlreadyExistStorageMsg(storageName));
            } else {
                storage_server_connections tempVar = new storage_server_connections();
                storageModel = storageListModel.storageModel;
                NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
                tempVar.setconnection(storageListModel.path);
                tempVar.setstorage_type(StorageType.NFS);
                if ((Boolean) nfsModel.getOverride().getEntity()) {
                    tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
                    tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
                    tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
                }
                storageListModel.nfsConnection = tempVar;
                storageListModel.ImportNfsStorageConnect();
            }
        }
    }), null, path);
}
#method_after
public void ImportNfsStoragePostInit() {
    // Check storage domain existence
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageListModel storageListModel = (StorageListModel) target;
            ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getStorageName();
                OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().importFailedDomainAlreadyExistStorageMsg(storageName));
            } else {
                StorageServerConnections tempVar = new StorageServerConnections();
                storageModel = storageListModel.storageModel;
                NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
                tempVar.setconnection(storageListModel.path);
                tempVar.setstorage_type(StorageType.NFS);
                if ((Boolean) nfsModel.getOverride().getEntity()) {
                    tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
                    tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
                    tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
                }
                storageListModel.nfsConnection = tempVar;
                storageListModel.ImportNfsStorageConnect();
            }
        }
    }), null, path);
}
#end_block

#method_before
public void ImportNfsStorageConnect() {
    Frontend.RunAction(VdcActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                AsyncDataProvider.GetExistingStorageDomainList(new AsyncQuery(storageListModel, new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object target, Object returnValue) {
                        StorageListModel storageListModel1 = (StorageListModel) target;
                        ArrayList<storage_domains> domains = (ArrayList<storage_domains>) returnValue;
                        if (domains != null) {
                            if (domains.isEmpty()) {
                                PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().thereIsNoStorageDomainUnderTheSpecifiedPathMsg());
                            } else {
                                storageListModel1.ImportNfsStorageAddDomain(domains);
                            }
                        } else {
                            PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
                        }
                    }
                }), hostId, domainType, path);
            } else {
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
            }
        }
    }, this);
}
#method_after
public void ImportNfsStorageConnect() {
    Frontend.RunAction(VdcActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                AsyncDataProvider.GetExistingStorageDomainList(new AsyncQuery(storageListModel, new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object target, Object returnValue) {
                        StorageListModel storageListModel1 = (StorageListModel) target;
                        ArrayList<StorageDomain> domains = (ArrayList<StorageDomain>) returnValue;
                        if (domains != null) {
                            if (domains.isEmpty()) {
                                PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().thereIsNoStorageDomainUnderTheSpecifiedPathMsg());
                            } else {
                                storageListModel1.ImportNfsStorageAddDomain(domains);
                            }
                        } else {
                            PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
                        }
                    }
                }), hostId, domainType, path);
            } else {
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
            }
        }
    }, this);
}
#end_block

#method_before
public void ImportNfsStorageAddDomain(ArrayList<storage_domains> domains) {
    storage_domains sdToAdd = Linq.FirstOrDefault(domains);
    storage_domain_static sdsToAdd = sdToAdd == null ? null : sdToAdd.getStorageStaticData();
    StorageDomainManagementParameter params = new StorageDomainManagementParameter(sdsToAdd);
    params.setVdsId(hostId);
    Frontend.RunAction(VdcActionType.AddExistingNFSStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            Object[] array = (Object[]) result.getState();
            StorageListModel storageListModel = (StorageListModel) array[0];
            storage_domains sdToAdd1 = (storage_domains) array[1];
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                StorageModel model = (StorageModel) storageListModel.getWindow();
                storage_pool dataCenter = (storage_pool) model.getDataCenter().getSelectedItem();
                if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                    storageListModel.AttachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId());
                }
                PostImportNfsStorage(storageListModel.context, true, storageListModel.storageModel, null);
            } else {
                // $NON-NLS-1$
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, "");
            }
        }
    }, new Object[] { this, sdToAdd });
}
#method_after
public void ImportNfsStorageAddDomain(ArrayList<StorageDomain> domains) {
    StorageDomain sdToAdd = Linq.FirstOrDefault(domains);
    StorageDomainStatic sdsToAdd = sdToAdd == null ? null : sdToAdd.getStorageStaticData();
    StorageDomainManagementParameter params = new StorageDomainManagementParameter(sdsToAdd);
    params.setVdsId(hostId);
    Frontend.RunAction(VdcActionType.AddExistingNFSStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            Object[] array = (Object[]) result.getState();
            StorageListModel storageListModel = (StorageListModel) array[0];
            StorageDomain sdToAdd1 = (StorageDomain) array[1];
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                StorageModel model = (StorageModel) storageListModel.getWindow();
                storage_pool dataCenter = (storage_pool) model.getDataCenter().getSelectedItem();
                if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                    storageListModel.AttachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId());
                }
                PostImportNfsStorage(storageListModel.context, true, storageListModel.storageModel, null);
            } else {
                // $NON-NLS-1$
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, "");
            }
        }
    }, new Object[] { this, sdToAdd });
}
#end_block

#method_before
public void PostImportNfsStorage(TaskContext context, boolean isSucceeded, IStorageModel model, String message) {
    Frontend.RunAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success) {
                nfsConnection = null;
            }
            Object[] array = (Object[]) result.getState();
            OnFinish((TaskContext) array[0], (Boolean) array[1], (IStorageModel) array[2], (String) array[3]);
        }
    }, new Object[] { context, isSucceeded, model, message });
}
#method_after
public void PostImportNfsStorage(TaskContext context, boolean isSucceeded, IStorageModel model, String message) {
    Frontend.RunAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success) {
                nfsConnection = null;
            }
            Object[] array = (Object[]) result.getState();
            OnFinish((TaskContext) array[0], (Boolean) array[1], (IStorageModel) array[2], (String) array[3]);
        }
    }, new Object[] { context, isSucceeded, model, message });
}
#end_block

#method_before
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        SaveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        SaveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        SavePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveGluster")) {
        SaveGlusterStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        SaveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportSan")) {
        ImportSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#method_after
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        SaveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        SaveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        SavePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveGluster")) {
        saveGlusterStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        SaveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#end_block

#method_before
@Override
protected void OpenReport() {
    final ReportModel reportModel = super.createReportModel();
    List<storage_domains> items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList<storage_domains>();
    storage_domains storage = items.iterator().next();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            List<storage_pool> dataCenters = (List<storage_pool>) returnValue;
            for (storage_pool dataCenter : dataCenters) {
                reportModel.addDataCenterID(dataCenter.getId().toString());
            }
            if (reportModel == null) {
                return;
            }
            setWidgetModel(reportModel);
        }
    }), storage.getId());
}
#method_after
@Override
protected void OpenReport() {
    final ReportModel reportModel = super.createReportModel();
    List<StorageDomain> items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList<StorageDomain>();
    StorageDomain storage = items.iterator().next();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            List<storage_pool> dataCenters = (List<storage_pool>) returnValue;
            for (storage_pool dataCenter : dataCenters) {
                reportModel.addDataCenterID(dataCenter.getId().toString());
            }
            if (reportModel == null) {
                return;
            }
            setWidgetModel(reportModel);
        }
    }), storage.getId());
}
#end_block

#method_before
@Override
protected void setReportModelResourceId(ReportModel reportModel, String idParamName, boolean isMultiple) {
    ArrayList<storage_domains> items = getSelectedItems() != null ? Linq.<storage_domains>Cast(getSelectedItems()) : new ArrayList<storage_domains>();
    if (idParamName != null) {
        for (storage_domains item : items) {
            if (isMultiple) {
                reportModel.addResourceId(idParamName, item.getId().toString());
            } else {
                reportModel.setResourceId(idParamName, item.getId().toString());
            }
        }
    }
}
#method_after
@Override
protected void setReportModelResourceId(ReportModel reportModel, String idParamName, boolean isMultiple) {
    ArrayList<StorageDomain> items = getSelectedItems() != null ? Linq.<StorageDomain>Cast(getSelectedItems()) : new ArrayList<StorageDomain>();
    if (idParamName != null) {
        for (StorageDomain item : items) {
            if (isMultiple) {
                reportModel.addResourceId(idParamName, item.getId().toString());
            } else {
                reportModel.setResourceId(idParamName, item.getId().toString());
            }
        }
    }
}
#end_block

#method_before
public boolean entityStateEqualTo(UserPortalItemModel other) {
    // Compare pools
    if (getEntity() instanceof VmPool && other.getEntity() instanceof VmPool) {
        return getEntity().equals(other.getEntity());
    } else // Compare VMs
    if (getEntity() instanceof VM && other.getEntity() instanceof VM) {
        VM thisVm = (VM) getEntity();
        VM otherVm = (VM) other.getEntity();
        return thisVm.getDynamicData().getstatus().equals(otherVm.getDynamicData().getstatus()) && thisVm.getStaticData().equals(otherVm.getStaticData());
    }
    return false;
}
#method_after
public boolean entityStateEqualTo(UserPortalItemModel other) {
    // Compare pools
    if (getEntity() instanceof VmPool && other.getEntity() instanceof VmPool) {
        return getEntity().equals(other.getEntity());
    } else // Compare VMs
    if (getEntity() instanceof VM && other.getEntity() instanceof VM) {
        VM thisVm = (VM) getEntity();
        VM otherVm = (VM) other.getEntity();
        return thisVm.getDynamicData().getStatus().equals(otherVm.getDynamicData().getStatus()) && thisVm.getStaticData().equals(otherVm.getStaticData());
    }
    return false;
}
#end_block

#method_before
void initTable(ApplicationResources resources, ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn<VM>(), constants.empty(), "30px");
    // $NON-NLS-1$
    getTable().addColumn(new VmTypeColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameVm(), "120px");
    TextColumnWithTooltip<VM> hostColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getRunOnVdsName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(hostColumn, constants.hostVm(), "120px");
    TextColumnWithTooltip<VM> ipColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVmIp();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(ipColumn, constants.ipVm(), "120px");
    TextColumnWithTooltip<VM> clusterColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVdsGroupName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVm(), "120px");
    TextColumnWithTooltip<VM> dcColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getStoragePoolName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(dcColumn, constants.dcVm(), "120px");
    PercentColumn<VM> memoryColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageMemPercent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryVm(), "60px");
    PercentColumn<VM> cpuColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageCpuPercent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpuVm(), "60px");
    PercentColumn<VM> networkColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageNetworkPercent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(networkColumn, constants.networkVm(), "60px");
    TextColumnWithTooltip<VM> displayColumn = new EnumColumn<VM, DisplayType>() {

        @Override
        protected DisplayType getRawValue(VM object) {
            return object.getDisplayType();
        }

        @Override
        public String getValue(VM object) {
            if ((object.getStatus() == VMStatus.Down) || (object.getStatus() == VMStatus.ImageLocked))
                // $NON-NLS-1$
                return "";
            else
                return renderer.render(getRawValue(object));
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(displayColumn, constants.displayVm(), "80px");
    TextColumnWithTooltip<VM> statusColumn = new EnumColumn<VM, VMStatus>() {

        @Override
        public VMStatus getRawValue(VM object) {
            return object.getStatus();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.statusVm(), "80px");
    TextColumnWithTooltip<VM> uptimeColumn = new UptimeColumn<VM>() {

        @Override
        public Double getRawValue(VM object) {
            return object.getRoundedElapsedTime();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(uptimeColumn, constants.uptimeVm(), "80px");
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.newServerVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewServerCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.newDesktopVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewDesktopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.editVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.removeVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.runOnceVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRunOnceCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.runVm(), resources.runVmImage(), resources.runVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRunCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.suspendVm(), resources.pauseVmImage(), resources.pauseVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getPauseCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.shutDownVm(), resources.stopVmImage(), resources.stopVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getShutdownCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.powerOffVm(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.consoleVm(), resources.consoleImage(), resources.consoleDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            UICommand command = new UICommand("ConsoleConnect", new // $NON-NLS-1$
            BaseCommandTarget() {

                @Override
                public void ExecuteCommand(UICommand uiCommand) {
                    String errorMessage = consoleManager.connectToConsole(getMainModel());
                    if (errorMessage != null) {
                        errorPopupManager.show(errorMessage);
                    }
                }
            });
            command.setIsExecutionAllowed(getMainModel().getSelectedItems() != null && getMainModel().getSelectedItems().size() == 1);
            return command;
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(commonConstants.consoleOptions(), // $NON-NLS-1$
    CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditConsoleCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.migrateVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getMigrateCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.cancelMigrationVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCancelMigrateCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.makeTemplateVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewTemplateCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.exportVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getExportCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.createSnapshotVM()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateSnapshotCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.cheangeCdVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getChangeCdCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.assignTagsVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getAssignTagsCommand();
        }
    });
    if (ReportInit.getInstance().isReportsEnabled()) {
        List<ActionButtonDefinition<VM>> resourceSubActions = // $NON-NLS-1$
        ReportActionsHelper.getInstance().getResourceSubActions("VM", getModelProvider());
        if (resourceSubActions != null && resourceSubActions.size() > 0) {
            getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VM>(constants.showReportVm(), resourceSubActions));
        }
    }
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.guideMeVm(), resources.guideSmallImage(), resources.guideSmallDisabledImage(), true) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getGuideCommand();
        }
    });
}
#method_after
void initTable(ApplicationResources resources, ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VmStatusColumn<VM>(), constants.empty(), "30px");
    // $NON-NLS-1$
    getTable().addColumn(new VmTypeColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VM> nameColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameVm(), "120px");
    TextColumnWithTooltip<VM> hostColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getRunOnVdsName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(hostColumn, constants.hostVm(), "120px");
    TextColumnWithTooltip<VM> ipColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVmIp();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(ipColumn, constants.ipVm(), "120px");
    TextColumnWithTooltip<VM> clusterColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getVdsGroupName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVm(), "120px");
    TextColumnWithTooltip<VM> dcColumn = new TextColumnWithTooltip<VM>() {

        @Override
        public String getValue(VM object) {
            return object.getStoragePoolName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(dcColumn, constants.dcVm(), "120px");
    PercentColumn<VM> memoryColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageMemPercent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memoryColumn, constants.memoryVm(), "60px");
    PercentColumn<VM> cpuColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageCpuPercent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpuVm(), "60px");
    PercentColumn<VM> networkColumn = new PercentColumn<VM>() {

        @Override
        public Integer getProgressValue(VM object) {
            return object.getUsageNetworkPercent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(networkColumn, constants.networkVm(), "60px");
    TextColumnWithTooltip<VM> displayColumn = new EnumColumn<VM, DisplayType>() {

        @Override
        protected DisplayType getRawValue(VM object) {
            return object.getDisplayType();
        }

        @Override
        public String getValue(VM object) {
            if ((object.getStatus() == VMStatus.Down) || (object.getStatus() == VMStatus.ImageLocked))
                // $NON-NLS-1$
                return "";
            else
                return renderer.render(getRawValue(object));
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(displayColumn, constants.displayVm(), "80px");
    TextColumnWithTooltip<VM> statusColumn = new EnumColumn<VM, VMStatus>() {

        @Override
        public VMStatus getRawValue(VM object) {
            return object.getStatus();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.statusVm(), "80px");
    TextColumnWithTooltip<VM> uptimeColumn = new UptimeColumn<VM>() {

        @Override
        public Double getRawValue(VM object) {
            return object.getRoundedElapsedTime();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(uptimeColumn, constants.uptimeVm(), "80px");
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.newServerVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewServerCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.newDesktopVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewDesktopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.editVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.removeVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.runOnceVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRunOnceCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.runVm(), resources.runVmImage(), resources.runVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRunCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.suspendVm(), resources.pauseVmImage(), resources.pauseVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getPauseCommand();
        }
    });
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.shutDownVm(), resources.stopVmImage(), resources.stopVmDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getShutdownCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.powerOffVm(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.consoleVm(), resources.consoleImage(), resources.consoleDisabledImage()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getFireConsoleConnectEventCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(commonConstants.consoleOptions(), // $NON-NLS-1$
    CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditConsoleCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.migrateVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getMigrateCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.cancelMigrationVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCancelMigrateCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.makeTemplateVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewTemplateCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.exportVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getExportCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.createSnapshotVM()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateSnapshotCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.cheangeCdVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getChangeCdCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VM>(constants.assignTagsVm()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getAssignTagsCommand();
        }
    });
    if (ReportInit.getInstance().isReportsEnabled()) {
        List<ActionButtonDefinition<VM>> resourceSubActions = // $NON-NLS-1$
        ReportActionsHelper.getInstance().getResourceSubActions("VM", getModelProvider());
        if (resourceSubActions != null && resourceSubActions.size() > 0) {
            getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VM>(constants.showReportVm(), resourceSubActions));
        }
    }
    getTable().addActionButton(new WebAdminImageButtonDefinition<VM>(constants.guideMeVm(), resources.guideSmallImage(), resources.guideSmallDisabledImage(), true) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getGuideCommand();
        }
    });
}
#end_block

#method_before
private String determineProtocolMessage(ConsoleProtocol protocol, ConsoleAwareModel item) {
    if (consoleUtils.isSmartcardGloballyEnabled(item) && !consoleUtils.isSmartcardEnabledOverriden(item)) {
        return messages.consoleWithSmartcard(protocol.displayName);
    }
    return protocol.displayName;
}
#method_after
private String determineProtocolMessage(ConsoleProtocol protocol, HasConsoleModel item) {
    if (consoleUtils.isSmartcardGloballyEnabled(item) && !consoleUtils.isSmartcardEnabledOverriden(item)) {
        return messages.consoleWithSmartcard(protocol.displayName);
    }
    return protocol.displayName;
}
#end_block

#method_before
public ConsoleAwareModel getModel() {
    return consoleModel;
}
#method_after
public HasConsoleModel getModel() {
    return consoleModel;
}
#end_block

#method_before
public void setModel(ConsoleAwareModel model) {
    this.consoleModel = model;
}
#method_after
public void setModel(HasConsoleModel model) {
    this.consoleModel = model;
}
#end_block

#method_before
public String connectToConsole(ConsoleAwareModel model) {
    ConsoleProtocol selectedProtocol = consoleUtils.determineConnectionProtocol(model);
    if (!consoleUtils.canShowConsole(selectedProtocol, model)) {
        return null;
    }
    if (selectedProtocol == ConsoleProtocol.SPICE) {
        return showSpiceConsole(model);
    } else if (selectedProtocol == ConsoleProtocol.RDP) {
        return showRpdConsole(model);
    } else if (selectedProtocol == ConsoleProtocol.VNC) {
        return showVncConsole(model);
    }
    return null;
}
#method_after
public String connectToConsole(HasConsoleModel model) {
    ConsoleProtocol selectedProtocol = consoleUtils.determineConnectionProtocol(model);
    if (!consoleUtils.canShowConsole(selectedProtocol, model)) {
        return null;
    }
    if (selectedProtocol == ConsoleProtocol.SPICE) {
        return showSpiceConsole(model);
    } else if (selectedProtocol == ConsoleProtocol.RDP) {
        return showRpdConsole(model);
    } else if (selectedProtocol == ConsoleProtocol.VNC) {
        return showVncConsole(model);
    }
    return null;
}
#end_block

#method_before
private String showVncConsole(ConsoleAwareModel model) {
    model.getDefaultConsoleModel().getConnectCommand().Execute();
    return null;
}
#method_after
private String showVncConsole(HasConsoleModel model) {
    model.getDefaultConsoleModel().getConnectCommand().Execute();
    return null;
}
#end_block

#method_before
private String showRpdConsole(ConsoleAwareModel model) {
    if (consoleUtils.canOpenRDPConsole(model)) {
        model.getAdditionalConsoleModel().getConnectCommand().Execute();
    } else if (!consoleUtils.isRDPAvailable()) {
        // $NON-NLS-1$
        return createErrorMessage(model, "RDP");
    }
    return null;
}
#method_after
private String showRpdConsole(HasConsoleModel model) {
    if (consoleUtils.canOpenRDPConsole(model)) {
        model.getAdditionalConsoleModel().getConnectCommand().Execute();
    } else if (!consoleUtils.isRDPAvailable()) {
        // $NON-NLS-1$
        return createErrorMessage(model, "RDP");
    }
    return null;
}
#end_block

#method_before
private String showSpiceConsole(ConsoleAwareModel model) {
    if (consoleUtils.canOpenSpiceConsole(model)) {
        model.getDefaultConsoleModel().getConnectCommand().Execute();
    } else if (!consoleUtils.isSpiceAvailable()) {
        // $NON-NLS-1$
        return createErrorMessage(model, "SPICE");
    }
    return null;
}
#method_after
private String showSpiceConsole(HasConsoleModel model) {
    if (consoleUtils.canOpenSpiceConsole(model)) {
        model.getDefaultConsoleModel().getConnectCommand().Execute();
    } else if (!consoleUtils.isSpiceAvailable()) {
        // $NON-NLS-1$
        return createErrorMessage(model, "SPICE");
    }
    return null;
}
#end_block

#method_before
private String createErrorMessage(ConsoleAwareModel model, String protocol) {
    return messages.errorConnectingToConsole(model.getVM().getName(), protocol);
}
#method_after
private String createErrorMessage(HasConsoleModel model, String protocol) {
    if (model.isPool()) {
        return messages.connectingToPoolIsNotSupported();
    } else {
        return messages.errorConnectingToConsole(model.getVM().getName(), protocol);
    }
}
#end_block

#method_before
@Override
public void init(final ConsolePopupModel model) {
    this.model = model;
    initView(model);
    initListeners(model);
    String vmName = model.getModel().getVM().getName();
    getView().setVmName(vmName);
    super.init(model);
}
#method_after
@Override
public void init(final ConsolePopupModel model) {
    if (model.getModel().isPool()) {
        // $NON-NLS-1$
        throw new IllegalArgumentException("The console popup can not be used with pool, only with VM");
    }
    this.model = model;
    initView(model);
    initListeners(model);
    String vmName = model.getModel().getVM().getName();
    getView().setVmName(vmName);
    super.init(model);
}
#end_block

#method_before
private void initView(ConsolePopupModel model) {
    listenOnRadioButtons(model);
    ConsoleAwareModel currentItem = model.getModel();
    boolean spiceAvailable = currentItem.getDefaultConsoleModel() instanceof SpiceConsoleModel && consoleUtils.isSpiceAvailable();
    boolean vncAvailable = currentItem.getDefaultConsoleModel() instanceof VncConsoleModel;
    boolean rdpAvailable = isAdditionalConsoleAvailable(currentItem) && consoleUtils.isRDPAvailable();
    getView().setSpiceAvailable(spiceAvailable);
    getView().setRdpAvailable(rdpAvailable);
    getView().setVncAvailable(vncAvailable);
    ConsoleProtocol selectedProtocol = currentItem.getSelectedProtocol();
    boolean rdpPreselected = ConsoleProtocol.RDP.equals(selectedProtocol);
    boolean spicePreselected = ConsoleProtocol.SPICE.equals(selectedProtocol);
    boolean vncPreselected = ConsoleProtocol.VNC.equals(selectedProtocol);
    getView().selectSpice(spicePreselected);
    getView().selectRdp(rdpPreselected);
    getView().selectVnc(vncPreselected);
    getView().spiceSelected(spicePreselected);
    getView().rdpSelected(rdpPreselected);
    getView().setDisableSmartcardVisible(consoleUtils.isSmartcardGloballyEnabled(currentItem));
    ISpice spice = extractSpice(model);
    if (spice != null) {
        if (!spice.isWanOptionsEnabled()) {
            getView().selectWanOptionsEnabled(false);
        }
    }
    boolean isWindowsVm = model.getModel().getVM().getOs().isWindows();
    boolean spiceGuestAgentInstalled = model.getModel().getVM().getSpiceDriverVersion() != null;
    wanOptionsAvailable = isWindowsVm && spiceAvailable && spiceGuestAgentInstalled;
    if (wanOptionsAvailable) {
        getView().setWanOptionsVisible(true);
    } else {
        getView().setWanOptionsVisible(false);
    }
    getView().setAdditionalConsoleAvailable(rdpAvailable);
    getView().setSpiceConsoleAvailable(currentItem.getDefaultConsoleModel() instanceof SpiceConsoleModel);
    boolean ctrlAltDelEnabled = consoleUtils.isCtrlAltDelEnabled();
    getView().setCtrlAltDelEnabled(ctrlAltDelEnabled, constants.ctrlAltDeletIsNotSupportedOnWindows());
    if (!ctrlAltDelEnabled && spice != null) {
        spice.setSendCtrlAltDelete(false);
    }
}
#method_after
private void initView(ConsolePopupModel model) {
    listenOnRadioButtons(model);
    HasConsoleModel currentItem = model.getModel();
    boolean spiceAvailable = currentItem.getDefaultConsoleModel() instanceof SpiceConsoleModel && consoleUtils.isSpiceAvailable();
    boolean vncAvailable = currentItem.getDefaultConsoleModel() instanceof VncConsoleModel;
    boolean rdpAvailable = isAdditionalConsoleAvailable(currentItem) && consoleUtils.isRDPAvailable();
    getView().setSpiceAvailable(spiceAvailable);
    getView().setRdpAvailable(rdpAvailable);
    getView().setVncAvailable(vncAvailable);
    ConsoleProtocol selectedProtocol = currentItem.getSelectedProtocol();
    boolean rdpPreselected = ConsoleProtocol.RDP.equals(selectedProtocol);
    boolean spicePreselected = ConsoleProtocol.SPICE.equals(selectedProtocol);
    boolean vncPreselected = ConsoleProtocol.VNC.equals(selectedProtocol);
    getView().selectSpice(spicePreselected);
    getView().selectRdp(rdpPreselected);
    getView().selectVnc(vncPreselected);
    getView().spiceSelected(spicePreselected);
    getView().rdpSelected(rdpPreselected);
    getView().setDisableSmartcardVisible(consoleUtils.isSmartcardGloballyEnabled(currentItem));
    ISpice spice = extractSpice(model);
    if (spice != null) {
        if (!spice.isWanOptionsEnabled()) {
            getView().selectWanOptionsEnabled(false);
        }
    }
    boolean isWindowsVm = model.getModel().getVM().getOs().isWindows();
    boolean spiceGuestAgentInstalled = model.getModel().getVM().getSpiceDriverVersion() != null;
    wanOptionsAvailable = isWindowsVm && spiceAvailable && spiceGuestAgentInstalled;
    if (wanOptionsAvailable) {
        getView().setWanOptionsVisible(true);
    } else {
        getView().setWanOptionsVisible(false);
    }
    getView().setAdditionalConsoleAvailable(rdpAvailable);
    getView().setSpiceConsoleAvailable(currentItem.getDefaultConsoleModel() instanceof SpiceConsoleModel);
    boolean ctrlAltDelEnabled = consoleUtils.isCtrlAltDelEnabled();
    getView().setCtrlAltDelEnabled(ctrlAltDelEnabled, constants.ctrlAltDeletIsNotSupportedOnWindows());
}
#end_block

#method_before
protected boolean isAdditionalConsoleAvailable(ConsoleAwareModel currentItem) {
    return currentItem.getAdditionalConsoleModel() != null;
}
#method_after
protected boolean isAdditionalConsoleAvailable(HasConsoleModel currentItem) {
    return currentItem.getAdditionalConsoleModel() != null;
}
#end_block

#method_before
public void setSelectedProtocol(ConsoleProtocol protocol, ConsoleAwareModel item) {
    Guid vmId = item.getVM() != null ? item.getVM().getId() : null;
    if (vmId == null) {
        return;
    }
    deselectUserSelectedProtocol(vmId);
    for (ConsoleModel model : cachedConsoleModels.get(vmId)) {
        if (protocol.isBackedBy(model.getClass())) {
            model.setUserSelected(true);
            break;
        }
    }
}
#method_after
public void setSelectedProtocol(ConsoleProtocol protocol, HasConsoleModel item) {
    Guid vmId = item.getVM() != null ? item.getVM().getId() : null;
    if (vmId == null) {
        return;
    }
    deselectUserSelectedProtocol(vmId);
    for (ConsoleModel model : cachedConsoleModels.get(vmId)) {
        if (protocol.isBackedBy(model.getClass())) {
            model.setUserSelected(true);
            break;
        }
    }
}
#end_block

#method_before
public ConsoleProtocol resolveSelectedProtocol(ConsoleAwareModel item) {
    if (item == null || item.getVM() == null || item.getVM().getId() == null) {
        return null;
    }
    Guid vmId = item.getVM().getId();
    ConsoleModel selectedConsoleModel = resolveSelectedConsoleModel(vmId);
    return selectedConsoleModel == null ? null : ConsoleProtocol.getProtocolByModel(selectedConsoleModel.getClass());
}
#method_after
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    if (item == null || item.getVM() == null || item.getVM().getId() == null) {
        return null;
    }
    Guid vmId = item.getVM().getId();
    ConsoleModel selectedConsoleModel = resolveSelectedConsoleModel(vmId);
    return selectedConsoleModel == null ? null : ConsoleProtocol.getProtocolByModel(selectedConsoleModel.getClass());
}
#end_block

#method_before
public boolean canOpenSpiceConsole(ConsoleAwareModel item) {
    if (item.isPool() || !isSpiceAvailable())
        return false;
    VM vm = (item.getVM());
    if (vm.getDisplayType().equals(DisplayType.qxl) && item.getDefaultConsoleModel().getConnectCommand().getIsAvailable() && item.getDefaultConsoleModel().getConnectCommand().getIsExecutionAllowed()) {
        return true;
    }
    return false;
}
#method_after
public boolean canOpenSpiceConsole(HasConsoleModel item) {
    if (item.isPool() || !isSpiceAvailable())
        return false;
    VM vm = item.getVM();
    if (vm.getDisplayType().equals(DisplayType.qxl) && item.getDefaultConsoleModel().getConnectCommand().getIsAvailable() && item.getDefaultConsoleModel().getConnectCommand().getIsExecutionAllowed()) {
        return true;
    }
    return false;
}
#end_block

#method_before
public boolean canOpenRDPConsole(ConsoleAwareModel item) {
    if (item.isPool() || !isRDPAvailable())
        return false;
    if (item.getAdditionalConsoleModel() != null && item.getAdditionalConsoleModel().getConnectCommand().getIsAvailable() && item.getAdditionalConsoleModel().getConnectCommand().getIsExecutionAllowed()) {
        return true;
    }
    return false;
}
#method_after
public boolean canOpenRDPConsole(HasConsoleModel item) {
    if (item.isPool() || !isRDPAvailable())
        return false;
    if (item.getAdditionalConsoleModel() != null && item.getAdditionalConsoleModel().getConnectCommand().getIsAvailable() && item.getAdditionalConsoleModel().getConnectCommand().getIsExecutionAllowed()) {
        return true;
    }
    return false;
}
#end_block

#method_before
public String determineProtocolMessage(ConsoleAwareModel item) {
    if (item.isPool()) {
        // $NON-NLS-1$
        return "";
    }
    if (!(isRDPAvailable() || isSpiceAvailable())) {
        return BROWSER_NOT_SUPPORTED_MESSAGE;
    }
    boolean isSpice = item.getDefaultConsoleModel() instanceof SpiceConsoleModel && isSpiceAvailable();
    boolean isRdp = item.getAdditionalConsoleModel() != null && isRDPAvailable();
    if (!isSpice && !isRdp) {
        return VNC_NOT_SUPPORTED_MESSAGE;
    }
    // $NON-NLS-1$
    return "";
}
#method_after
public String determineProtocolMessage(HasConsoleModel item) {
    if (item.isPool()) {
        // $NON-NLS-1$
        return "";
    }
    if (!(isRDPAvailable() || isSpiceAvailable())) {
        return BROWSER_NOT_SUPPORTED_MESSAGE;
    }
    boolean isSpice = item.getDefaultConsoleModel() instanceof SpiceConsoleModel && isSpiceAvailable();
    boolean isRdp = item.getAdditionalConsoleModel() != null && isRDPAvailable();
    if (!isSpice && !isRdp) {
        return VNC_NOT_SUPPORTED_MESSAGE;
    }
    // $NON-NLS-1$
    return "";
}
#end_block

#method_before
public ConsoleProtocol determineConnectionProtocol(ConsoleAwareModel item) {
    if (item.isPool()) {
        return null;
    }
    ConsoleProtocol selectedProtocol = item.getSelectedProtocol();
    if (item.getAdditionalConsoleModel() != null && isRDPAvailable() && selectedProtocol.equals(ConsoleProtocol.RDP)) {
        return ConsoleProtocol.RDP;
    } else if (item.getDefaultConsoleModel() instanceof SpiceConsoleModel && isSpiceAvailable() && selectedProtocol.equals(ConsoleProtocol.SPICE)) {
        return ConsoleProtocol.SPICE;
    } else if (item.getDefaultConsoleModel() instanceof VncConsoleModel) {
        return ConsoleProtocol.VNC;
    }
    return null;
}
#method_after
public ConsoleProtocol determineConnectionProtocol(HasConsoleModel item) {
    if (item.isPool()) {
        return null;
    }
    ConsoleProtocol selectedProtocol = item.getSelectedProtocol();
    if (item.getAdditionalConsoleModel() != null && isRDPAvailable() && selectedProtocol.equals(ConsoleProtocol.RDP)) {
        return ConsoleProtocol.RDP;
    } else if (item.getDefaultConsoleModel() instanceof SpiceConsoleModel && isSpiceAvailable() && selectedProtocol.equals(ConsoleProtocol.SPICE)) {
        return ConsoleProtocol.SPICE;
    } else if (item.getDefaultConsoleModel() instanceof VncConsoleModel) {
        return ConsoleProtocol.VNC;
    }
    return null;
}
#end_block

#method_before
public boolean canShowConsole(ConsoleProtocol selectedProtocol, ConsoleAwareModel item) {
    if (selectedProtocol == null) {
        return false;
    }
    boolean isSpiceAvailable = selectedProtocol.equals(ConsoleProtocol.SPICE) && canOpenSpiceConsole(item);
    boolean isRdpAvailable = (selectedProtocol.equals(ConsoleProtocol.RDP) && canOpenRDPConsole(item));
    boolean isVncAvailable = (selectedProtocol.equals(ConsoleProtocol.VNC));
    return isSpiceAvailable || isRdpAvailable || isVncAvailable;
}
#method_after
public boolean canShowConsole(ConsoleProtocol selectedProtocol, HasConsoleModel item) {
    if (selectedProtocol == null) {
        return false;
    }
    boolean isSpiceAvailable = selectedProtocol.equals(ConsoleProtocol.SPICE) && canOpenSpiceConsole(item);
    boolean isRdpAvailable = (selectedProtocol.equals(ConsoleProtocol.RDP) && canOpenRDPConsole(item));
    boolean isVncAvailable = (selectedProtocol.equals(ConsoleProtocol.VNC));
    return isSpiceAvailable || isRdpAvailable || isVncAvailable;
}
#end_block

#method_before
public boolean isSmartcardGloballyEnabled(ConsoleAwareModel item) {
    ConsoleModel consoleModel = item.getDefaultConsoleModel();
    if (consoleModel instanceof SpiceConsoleModel) {
        return consoleModel.getEntity() == null ? false : consoleModel.getEntity().isSmartcardEnabled();
    }
    return false;
}
#method_after
public boolean isSmartcardGloballyEnabled(HasConsoleModel item) {
    ConsoleModel consoleModel = item.getDefaultConsoleModel();
    if (consoleModel instanceof SpiceConsoleModel) {
        return consoleModel.getEntity() == null ? false : consoleModel.getEntity().isSmartcardEnabled();
    }
    return false;
}
#end_block

#method_before
public boolean isSmartcardEnabledOverriden(ConsoleAwareModel item) {
    ConsoleModel consoleModel = item.getDefaultConsoleModel();
    if (consoleModel instanceof SpiceConsoleModel) {
        return ((SpiceConsoleModel) consoleModel).getspice().isSmartcardEnabledOverridden();
    }
    return false;
}
#method_after
public boolean isSmartcardEnabledOverriden(HasConsoleModel item) {
    ConsoleModel consoleModel = item.getDefaultConsoleModel();
    if (consoleModel instanceof SpiceConsoleModel) {
        return ((SpiceConsoleModel) consoleModel).getspice().isSmartcardEnabledOverridden();
    }
    return false;
}
#end_block

#method_before
public UICommand getEditCommand() {
    return privateEditCommand;
}
#method_after
@Override
public UICommand getEditCommand() {
    return privateEditCommand;
}
#end_block

#method_before
private void RunOnce() {
    VM vm = (VM) getSelectedItem();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    // Custom Properties
    model.getCustomPropertySheet().setKeyValueString(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.getCustomPropertySheet().setEntity(vm.getCustomProperties());
    model.setCustomPropertiesKeysList(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.setIsLinux_Unassign_UnknownOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()) || vm.getVmOs() == VmOsType.Unassigned || vm.getVmOs() == VmOsType.Other);
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinux_Unassign_UnknownOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    RunOnceUpdateDisplayProtocols(vm);
    RunOnceUpdateFloppy(vm, new ArrayList<String>());
    RunOnceUpdateImages(vm);
    RunOnceUpdateDomains();
    RunOnceUpdateBootSequence(vm);
    RunOnceLoadHosts(vm);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRunOnce", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    model.getIsAutoAssign().setEntity(true);
}
#method_after
private void RunOnce() {
    VM vm = (VM) getSelectedItem();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    // Custom Properties
    model.getCustomPropertySheet().setKeyValueString(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.getCustomPropertySheet().setEntity(vm.getCustomProperties());
    model.setCustomPropertiesKeysList(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.setIsLinuxOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()));
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinuxOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    RunOnceUpdateDisplayProtocols(vm);
    RunOnceUpdateFloppy(vm, new ArrayList<String>());
    RunOnceUpdateImages(vm);
    RunOnceUpdateDomains();
    updateInterfacesRelatedRunOnceData(vm);
    updateDisksRelatedRunOnceData(vm);
    RunOnceLoadHosts(vm);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRunOnce", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    model.getIsAutoAssign().setEntity(true);
}
#end_block

#method_before
private void ChangeCD() {
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    AttachCdModel model = new AttachCdModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().changeCDTitle());
    // $NON-NLS-1$
    model.setHashName("change_cd");
    AttachCdModel attachCdModel = (AttachCdModel) getWindow();
    ArrayList<String> images1 = // $NON-NLS-1$
    new ArrayList<String>(Arrays.asList(new String[] { "No CDs" }));
    attachCdModel.getIsoImage().setItems(images1);
    attachCdModel.getIsoImage().setSelectedItem(Linq.FirstOrDefault(images1));
    AsyncQuery getIrsImageListCallback = new AsyncQuery();
    getIrsImageListCallback.setModel(this);
    getIrsImageListCallback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VmListModel vmListModel2 = (VmListModel) model;
            AttachCdModel _attachCdModel = (AttachCdModel) vmListModel2.getWindow();
            ArrayList<String> images = (ArrayList<String>) result;
            if (images.size() > 0) {
                images.add(0, ConsoleModel.EjectLabel);
                _attachCdModel.getIsoImage().setItems(images);
            }
            if (_attachCdModel.getIsoImage().getIsChangable()) {
                _attachCdModel.getIsoImage().setSelectedItem(Linq.FirstOrDefault(images));
            }
        }
    };
    AsyncDataProvider.GetIrsImageList(getIrsImageListCallback, vm.getStoragePoolId());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnChangeCD", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void ChangeCD() {
    VM vm = (VM) getSelectedItem();
    if (vm == null) {
        return;
    }
    AttachCdModel model = new AttachCdModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().changeCDTitle());
    // $NON-NLS-1$
    model.setHashName("change_cd");
    AttachCdModel attachCdModel = (AttachCdModel) getWindow();
    ArrayList<String> images1 = // $NON-NLS-1$
    new ArrayList<String>(Arrays.asList(new String[] { "No CDs" }));
    attachCdModel.getIsoImage().setItems(images1);
    attachCdModel.getIsoImage().setSelectedItem(Linq.FirstOrDefault(images1));
    AsyncQuery getIrsImageListCallback = new AsyncQuery();
    getIrsImageListCallback.setModel(this);
    getIrsImageListCallback.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VmListModel vmListModel2 = (VmListModel) model;
            AttachCdModel _attachCdModel = (AttachCdModel) vmListModel2.getWindow();
            ArrayList<String> images = (ArrayList<String>) result;
            images.add(0, ConsoleModel.EjectLabel);
            _attachCdModel.getIsoImage().setItems(images);
            if (_attachCdModel.getIsoImage().getIsChangable()) {
                _attachCdModel.getIsoImage().setSelectedItem(Linq.FirstOrDefault(images));
            }
        }
    };
    AsyncDataProvider.GetIrsImageList(getIrsImageListCallback, vm.getStoragePoolId());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnChangeCD", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getEditConsoleCommand().setIsExecutionAllowed(items.size() == 1);
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#method_after
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getEditConsoleCommand().setIsExecutionAllowed(items.size() == 1);
    getFireConsoleConnectEventCommand().setIsExecutionAllowed(items.size() == 1);
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditConsoleCommand()) {
        editConsole();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (// $NON-NLS-1$
    command.getName().equals("closeVncInfo") || "OnEditConsoleSave".equals(command.getName())) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditConsoleCommand()) {
        editConsole();
    } else if (command == getFireConsoleConnectEventCommand()) {
        fireConsoleConnectEvent();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (// $NON-NLS-1$
    command.getName().equals("closeVncInfo") || "OnEditConsoleSave".equals(command.getName())) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
@Override
public void setSelectedProtocol(ConsoleProtocol protocol, ConsoleAwareModel item) {
    consoleModelsCache.setSelectedProtocol(protocol, item);
}
#method_after
@Override
public void setSelectedProtocol(ConsoleProtocol protocol, HasConsoleModel item) {
    consoleModelsCache.setSelectedProtocol(protocol, item);
}
#end_block

#method_before
@Override
public ConsoleProtocol resolveSelectedProtocol(ConsoleAwareModel item) {
    return consoleModelsCache.resolveSelectedProtocol(item);
}
#method_after
@Override
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    return consoleModelsCache.resolveSelectedProtocol(item);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    if (connectAutomatically.readConnectAutomatically() && model.getCanConnectAutomatically() && !alreadyOpened) {
        UserPortalItemModel userPortalItemModel = model.GetStatusUpVms(model.getItems()).get(0);
        if (userPortalItemModel != null) {
            userPortalItemModel.getDefaultConsoleModel().getConnectCommand().Execute();
            alreadyOpened = true;
        }
    }
    unregisterModels();
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    if (connectAutomatically.readConnectAutomatically() && model.getCanConnectAutomatically() && !alreadyOpened) {
        UserPortalItemModel userPortalItemModel = model.GetUpVms(model.getItems()).get(0);
        if (userPortalItemModel != null) {
            userPortalItemModel.getDefaultConsoleModel().getConnectCommand().Execute();
            alreadyOpened = true;
        }
    }
    unregisterModels();
}
#end_block

#method_before
public UICommand getEditCommand() {
    return privateEditCommand;
}
#method_after
@Override
public UICommand getEditCommand() {
    return privateEditCommand;
}
#end_block

#method_before
private void RunOnce() {
    UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
    if (selectedItem == null || selectedItem.getEntity() == null) {
        return;
    }
    VM vm = (VM) selectedItem.getEntity();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // disable Host tab
    model.setIsHostTabVisible(false);
    // disable Custom properties sheet
    model.setIsCustomPropertiesSheetVisible(false);
    fillIsoList(vm);
    fillFloppyImages(vm);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    model.getCustomProperties().setEntity(vm.getCustomProperties());
    model.setIsLinux_Unassign_UnknownOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()) || vm.getVmOs() == VmOsType.Unassigned || vm.getVmOs() == VmOsType.Other);
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinux_Unassign_UnknownOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    // Update Domain list
    AsyncDataProvider.GetDomainList(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue1) {
            RunOnceModel runOnceModel = (RunOnceModel) target;
            List<String> domains = (List<String>) returnValue1;
            String oldDomain = (String) runOnceModel.getSysPrepDomainName().getSelectedItem();
            if (// $NON-NLS-1$
            oldDomain != null && !oldDomain.equals("") && !domains.contains(oldDomain)) {
                domains.add(0, oldDomain);
            }
            runOnceModel.getSysPrepDomainName().setItems(domains);
            runOnceModel.getSysPrepDomainName().setSelectedItem((oldDomain != null) ? oldDomain : Linq.FirstOrDefault(domains));
        }
    }), true);
    // Display protocols.
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    tempVar.setEntity(DisplayType.vnc);
    EntityModel vncProtocol = tempVar;
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    tempVar2.setEntity(DisplayType.qxl);
    EntityModel qxlProtocol = tempVar2;
    boolean isVncSelected = vm.getDefaultDisplayType() == DisplayType.vnc;
    model.getDisplayConsole_Vnc_IsSelected().setEntity(isVncSelected);
    model.getDisplayConsole_Spice_IsSelected().setEntity(!isVncSelected);
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    items.add(vncProtocol);
    items.add(qxlProtocol);
    model.getDisplayProtocol().setItems(items);
    model.getDisplayProtocol().setSelectedItem(vm.getDefaultDisplayType() == DisplayType.vnc ? vncProtocol : qxlProtocol);
    model.setCustomPropertiesKeysList(getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    // Boot sequence.
    setIsBootFromNetworkAllowedForVm(vm);
    setIsBootFromHardDiskAllowedForVm(vm);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("OnRunOnce", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar3.setIsDefault(true);
    model.getCommands().add(tempVar3);
    // $NON-NLS-1$
    UICommand tempVar4 = new UICommand("Cancel", this);
    tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar4.setIsCancel(true);
    model.getCommands().add(tempVar4);
}
#method_after
private void RunOnce() {
    UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
    if (selectedItem == null || selectedItem.getEntity() == null) {
        return;
    }
    VM vm = (VM) selectedItem.getEntity();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // disable Host tab
    model.setIsHostTabVisible(false);
    // disable Custom properties sheet
    model.setIsCustomPropertiesSheetVisible(false);
    fillIsoList(vm);
    fillFloppyImages(vm);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    model.getCustomProperties().setEntity(vm.getCustomProperties());
    model.setIsLinuxOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()));
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinuxOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    // Update Domain list
    AsyncDataProvider.GetDomainList(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue1) {
            RunOnceModel runOnceModel = (RunOnceModel) target;
            List<String> domains = (List<String>) returnValue1;
            String oldDomain = (String) runOnceModel.getSysPrepDomainName().getSelectedItem();
            if (// $NON-NLS-1$
            oldDomain != null && !oldDomain.equals("") && !domains.contains(oldDomain)) {
                domains.add(0, oldDomain);
            }
            runOnceModel.getSysPrepDomainName().setItems(domains);
            runOnceModel.getSysPrepDomainName().setSelectedItem((oldDomain != null) ? oldDomain : Linq.FirstOrDefault(domains));
        }
    }), true);
    // Display protocols.
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    tempVar.setEntity(DisplayType.vnc);
    EntityModel vncProtocol = tempVar;
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    tempVar2.setEntity(DisplayType.qxl);
    EntityModel qxlProtocol = tempVar2;
    boolean isVncSelected = vm.getDefaultDisplayType() == DisplayType.vnc;
    model.getDisplayConsole_Vnc_IsSelected().setEntity(isVncSelected);
    model.getDisplayConsole_Spice_IsSelected().setEntity(!isVncSelected);
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    items.add(vncProtocol);
    items.add(qxlProtocol);
    model.getDisplayProtocol().setItems(items);
    model.getDisplayProtocol().setSelectedItem(vm.getDefaultDisplayType() == DisplayType.vnc ? vncProtocol : qxlProtocol);
    model.setCustomPropertiesKeysList(getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    // Boot sequence.
    setIsBootFromNetworkAllowedForVm(vm);
    setIsBootFromHardDiskAllowedForVm(vm);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("OnRunOnce", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar3.setIsDefault(true);
    model.getCommands().add(tempVar3);
    // $NON-NLS-1$
    UICommand tempVar4 = new UICommand("Cancel", this);
    tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar4.setIsCancel(true);
    model.getCommands().add(tempVar4);
}
#end_block

#method_before
private void setIsBootFromNetworkAllowedForVm(VM vm) {
    AsyncQuery _asyncQuery2 = new AsyncQuery();
    _asyncQuery2.setModel(this);
    _asyncQuery2.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model3, Object ReturnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model3;
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery2);
}
#method_after
private void setIsBootFromNetworkAllowedForVm(VM vm) {
    AsyncQuery _asyncQuery2 = new AsyncQuery();
    _asyncQuery2.setModel(this);
    _asyncQuery2.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model3, Object ReturnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model3;
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().interfaceIsRequiredToBootFromNetwork());
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery2);
}
#end_block

#method_before
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#method_after
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            RunOnceModel runOnceModel = (RunOnceModel) userPortalListModel.getWindow();
            if (vmDisks.isEmpty()) {
                runOnceModel.getRunAsStateless().setIsChangable(false);
                runOnceModel.getRunAsStateless().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().disklessVmCannotRunAsStateless());
                runOnceModel.getRunAsStateless().setEntity(false);
            }
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = runOnceModel.getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(ConstantsManager.getInstance().getMessages().bootableDiskIsRequiredToBootFromDisk());
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#end_block

#method_before
private void ChangeCD() {
    UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
    if (selectedItem == null || selectedItem.getEntity() == null) {
        return;
    }
    VM vm = (VM) selectedItem.getEntity();
    AttachCdModel model = new AttachCdModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().changeCDTitle());
    // $NON-NLS-1$
    model.setHashName("change_cd");
    ArrayList<String> defaultImages = // $NON-NLS-1$
    new ArrayList<String>(Arrays.asList(new String[] { "No CDs" }));
    model.getIsoImage().setItems(defaultImages);
    model.getIsoImage().setSelectedItem(Linq.FirstOrDefault(defaultImages));
    AsyncQuery getImagesQuery = new AsyncQuery();
    getImagesQuery.setModel(this);
    getImagesQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model1;
            AttachCdModel _attachCdModel = (AttachCdModel) userPortalListModel.getWindow();
            List<String> images = (List<String>) result;
            if (images.size() > 0) {
                images.add(0, ConsoleModel.EjectLabel);
                _attachCdModel.getIsoImage().setItems(images);
            }
            if (_attachCdModel.getIsoImage().getIsChangable()) {
                _attachCdModel.getIsoImage().setSelectedItem(Linq.FirstOrDefault(images));
            }
        }
    };
    AsyncDataProvider.GetIrsImageList(getImagesQuery, vm.getStoragePoolId());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnChangeCD", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void ChangeCD() {
    UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
    if (selectedItem == null || selectedItem.getEntity() == null) {
        return;
    }
    VM vm = (VM) selectedItem.getEntity();
    AttachCdModel model = new AttachCdModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().changeCDTitle());
    // $NON-NLS-1$
    model.setHashName("change_cd");
    ArrayList<String> defaultImages = // $NON-NLS-1$
    new ArrayList<String>(Arrays.asList(new String[] { "No CDs" }));
    model.getIsoImage().setItems(defaultImages);
    model.getIsoImage().setSelectedItem(Linq.FirstOrDefault(defaultImages));
    AsyncQuery getImagesQuery = new AsyncQuery();
    getImagesQuery.setModel(this);
    getImagesQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model1;
            AttachCdModel _attachCdModel = (AttachCdModel) userPortalListModel.getWindow();
            List<String> images = (List<String>) result;
            images.add(0, ConsoleModel.EjectLabel);
            _attachCdModel.getIsoImage().setItems(images);
            if (_attachCdModel.getIsoImage().getIsChangable()) {
                _attachCdModel.getIsoImage().setSelectedItem(Linq.FirstOrDefault(images));
            }
        }
    };
    AsyncDataProvider.GetIrsImageList(getImagesQuery, vm.getStoragePoolId());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnChangeCD", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@Override
public void setSelectedProtocol(ConsoleProtocol protocol, ConsoleAwareModel item) {
    consoleModelsCache.setSelectedProtocol(protocol, item);
}
#method_after
@Override
public void setSelectedProtocol(ConsoleProtocol protocol, HasConsoleModel item) {
    consoleModelsCache.setSelectedProtocol(protocol, item);
}
#end_block

#method_before
@Override
public ConsoleProtocol resolveSelectedProtocol(ConsoleAwareModel item) {
    return consoleModelsCache.resolveSelectedProtocol(item);
}
#method_after
@Override
public ConsoleProtocol resolveSelectedProtocol(HasConsoleModel item) {
    return consoleModelsCache.resolveSelectedProtocol(item);
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    // Before running the VM we update its devices, as they may need to be changed due to configuration option
    // change
    VmDeviceUtils.updateVmDevices(getVm().getStaticData());
    setActionReturnValue(VMStatus.Down);
    if (initVm()) {
        if (getVm().getStatus() == VMStatus.Paused) {
            // resume
            resumeVm();
        } else {
            // run vm
            if (!_isRerun && Boolean.TRUE.equals(getParameters().getRunAsStateless()) && getVm().getStatus() != VMStatus.Suspended) {
                if (getVm().getDiskList().isEmpty()) {
                    // If there are no snappable disks, there is no meaning for
                    // running as stateless, log a warning and run normally
                    warnIfNotAllDisksPermitSnapshots();
                    runVm();
                } else {
                    statelessVmTreatment();
                }
            } else if (!getParameters().getIsInternal() && !_isRerun && getVm().getStatus() != VMStatus.Suspended && statelessSnapshotExistsForVm() && !isVMPartOfManualPool(getVmId())) {
                removeVmStatlessImages();
            } else {
                runVm();
            }
        }
    } else {
        setActionReturnValue(getVm().getStatus());
    }
}
#method_after
@Override
protected void executeVmCommand() {
    // Before running the VM we update its devices, as they may need to be changed due to configuration option
    // change
    VmDeviceUtils.updateVmDevices(getVm().getStaticData());
    setActionReturnValue(VMStatus.Down);
    if (initVm()) {
        if (getVm().getStatus() == VMStatus.Paused) {
            // resume
            resumeVm();
        } else {
            // run vm
            if (!_isRerun && Boolean.TRUE.equals(getParameters().getRunAsStateless()) && getVm().getStatus() != VMStatus.Suspended) {
                if (getVm().getDiskList().isEmpty()) {
                    // If there are no snappable disks, there is no meaning for
                    // running as stateless, log a warning and run normally
                    warnIfNotAllDisksPermitSnapshots();
                    runVm();
                } else {
                    statelessVmTreatment();
                }
            } else if (!getParameters().getIsInternal() && !_isRerun && getVm().getStatus() != VMStatus.Suspended && statelessSnapshotExistsForVm() && !isVMPartOfManualPool()) {
                removeVmStatlessImages();
            } else {
                runVm();
            }
        }
    } else {
        setActionReturnValue(getVm().getStatus());
    }
}
#end_block

#method_before
private void statelessVmTreatment() {
    warnIfNotAllDisksPermitSnapshots();
    if (statelessSnapshotExistsForVm() && !isVMPartOfManualPool(getVmId())) {
        log.errorFormat("RunVmAsStateless - {0} - found existing vm images in stateless_vm_image_map table - skipped creating snapshots.", getVm().getName());
        removeVmStatlessImages();
    } else {
        log.infoFormat("VdcBll.RunVmCommand.RunVmAsStateless - Creating snapshot for stateless vm {0} - {1}", getVm().getName(), getVm().getId());
        CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters();
        Map<String, String> values = getVmValuesForMsgResolving();
        // Creating snapshots as sub step of run stateless
        Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values);
        // Add the step as the first step of the new context
        ExecutionContext createSnapshotsCtx = new ExecutionContext();
        createSnapshotsCtx.setMonitored(true);
        createSnapshotsCtx.setStep(createSnapshotsStep);
        VdcReturnValueBase vdcReturnValue = getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, new CommandContext(createSnapshotsCtx, getCompensationContext(), getLock()));
        // setting lock to null in order not to release lock twice
        setLock(null);
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the EndAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (areDisksLocked(vdcReturnValue)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("RunVmAsStateless - {0} - failed to create snapshots", getVm().getName());
        }
    }
}
#method_after
private void statelessVmTreatment() {
    warnIfNotAllDisksPermitSnapshots();
    if (statelessSnapshotExistsForVm()) {
        log.errorFormat("RunVmAsStateless - {0} - found existing vm images in stateless_vm_image_map table - skipped creating snapshots.", getVm().getName());
        removeVmStatlessImages();
    } else {
        log.infoFormat("VdcBll.RunVmCommand.RunVmAsStateless - Creating snapshot for stateless vm {0} - {1}", getVm().getName(), getVm().getId());
        CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters();
        Map<String, String> values = getVmValuesForMsgResolving();
        // Creating snapshots as sub step of run stateless
        Step createSnapshotsStep = addSubStep(StepEnum.EXECUTING, StepEnum.CREATING_SNAPSHOTS, values);
        // Add the step as the first step of the new context
        ExecutionContext createSnapshotsCtx = new ExecutionContext();
        createSnapshotsCtx.setMonitored(true);
        createSnapshotsCtx.setStep(createSnapshotsStep);
        VdcReturnValueBase vdcReturnValue = getBackend().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, createAllSnapshotsFromVmParameters, new CommandContext(createSnapshotsCtx, getCompensationContext(), getLock()));
        // setting lock to null in order not to release lock twice
        setLock(null);
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getReturnValue().getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the EndAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (areDisksLocked(vdcReturnValue)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("RunVmAsStateless - {0} - failed to create snapshots", getVm().getName());
        }
    }
}
#end_block

#method_before
protected boolean isVMPartOfManualPool(Guid vmId) {
    final VmPoolMap vmPoolMap = getDbFacade().getVmPoolDao().getVmPoolMapByVmGuid(vmId);
    if (vmPoolMap == null) {
        return false;
    }
    final VmPool vmPool = getDbFacade().getVmPoolDao().get(vmPoolMap.getvm_pool_id());
    return vmPool.getVmPoolType().equals(VmPoolType.Manual);
}
#method_after
private boolean isVMPartOfManualPool() {
    if (getVm().getVmPoolId() == null) {
        return false;
    }
    final VmPool vmPool = getDbFacade().getVmPoolDao().get(getVm().getVmPoolId());
    return vmPool.getVmPoolType().equals(VmPoolType.Manual);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    FrontendFailureEventArgs failureArgs = (FrontendFailureEventArgs) args;
    if (failureArgs.getMessage() != null) {
        errorPopupManager.show(ErrorMessageFormatter.formatMessage(failureArgs.getMessage()));
    } else if (failureArgs.getMessages() != null) {
        errorPopupManager.show(ErrorMessageFormatter.formatMessages(failureArgs.getMessages()));
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    FrontendFailureEventArgs failureArgs = (FrontendFailureEventArgs) args;
    if (failureArgs.getMessage() != null) {
        errorPopupManager.show(MESSAGES.uiCommonRunActionFailed(ErrorMessageFormatter.formatMessage(failureArgs.getMessage())));
    } else if (failureArgs.getMessages() != null) {
        errorPopupManager.show(MESSAGES.uiCommonRunActionFailed(ErrorMessageFormatter.formatMessages(failureArgs.getMessages())));
    }
}
#end_block

#method_before
public static void main(String... args) {
    try {
        getInstance().setParser(new EngineConfigCLIParser());
        getInstance().setUpAndExecute(args);
    } catch (Throwable t) {
        log.debug("Exiting with error: ", t);
        console.writeLine(t.getMessage());
        System.exit(1);
    }
}
#method_after
public static void main(String... args) {
    try {
        getInstance().setParser(new EngineConfigCLIParser());
        getInstance().setUpAndExecute(args);
    } catch (Throwable t) {
        log.debug("Exiting with error: ", t);
        console.writeErrorLine(t.getMessage());
        System.exit(1);
    }
}
#end_block

#method_before
public String extractPasswordValue(String value) throws IOException {
    String password = null;
    if (StringUtils.isNotBlank(value) && value.equalsIgnoreCase(INTERACTIVE_MODE)) {
        password = EngineConfigLogic.startPasswordDialog(null);
        String passwordConfirm = EngineConfigLogic.startPasswordDialog(null, "Please reenter password: ");
        if (!StringUtils.equals(password, passwordConfirm)) {
            console.writeLine("Passwords don't match.");
            return extractPasswordValue(value);
        }
    } else {
        password = EngineConfigLogic.getPassFromFile((StringUtils.isNotBlank(value)) ? value : parser.getAdminPassFile());
    }
    return password;
}
#method_after
public String extractPasswordValue(String value) throws IOException {
    String password = null;
    if (StringUtils.isNotBlank(value) && value.equalsIgnoreCase(INTERACTIVE_MODE)) {
        password = EngineConfigLogic.startPasswordDialog(null);
        String passwordConfirm = EngineConfigLogic.startPasswordDialog(null, "Please reenter password");
        if (!StringUtils.equals(password, passwordConfirm)) {
            console.writeLine("Passwords don't match.");
            return extractPasswordValue(value);
        }
    } else {
        password = EngineConfigLogic.getPassFromFile((StringUtils.isNotBlank(value)) ? value : parser.getAdminPassFile());
    }
    return password;
}
#end_block

#method_before
public static String startPasswordDialog(String user) throws IOException {
    return startPasswordDialog(user, "Please enter a password: ");
}
#method_after
public static String startPasswordDialog(String user) throws IOException {
    return startPasswordDialog(user, "Please enter a password");
}
#end_block

#method_before
public static String startPasswordDialog(String user, String msg) throws IOException {
    log.debug("starting password dialog.");
    if (user == null) {
        console.write(msg);
    } else {
        console.writeLine(msg + " for " + user);
    }
    return new String(console.readPassword());
}
#method_after
public static String startPasswordDialog(String user, String msg) throws IOException {
    log.debug("starting password dialog.");
    String prompt = null;
    if (user != null) {
        prompt = msg + " for " + user + ": ";
    } else {
        prompt = msg + ": ";
    }
    return new String(console.readPassword(prompt));
}
#end_block

#method_before
private void printKeyWithSpecifiedVersion(String key, String version) throws Exception {
    ConfigKey configKey = fetchConfigKey(key, version);
    if (configKey == null || configKey.getKey() == null) {
        log.debug("getValue: error fetching " + key + " value: no such entry with version '" + version + "'.");
        throw new RuntimeException("Error fetching " + key + " value: no such entry with version '" + version + "'.");
    }
    console.writeLine(configKey.getDisplayValue());
}
#method_after
private void printKeyWithSpecifiedVersion(String key, String version) throws Exception {
    ConfigKey configKey = fetchConfigKey(key, version);
    if (configKey == null || configKey.getKey() == null) {
        log.debug("getValue: error fetching " + key + " value: no such entry with version '" + version + "'.");
        throw new RuntimeException("Error fetching " + key + " value: no such entry with version '" + version + "'.");
    }
    if (configKey.isPasswordKey()) {
        console.writePassword(configKey.getDisplayValue().toCharArray());
    } else {
        console.write(configKey.getDisplayValue());
    }
    console.writeLine();
}
#end_block

#method_before
private void setValues(double limit, double consumedByOthers, double consumedByUser) {
    int othersConsumptionPercent = (int) Math.round(consumedByOthers * 100 / limit);
    int userConsumptionPercent = (int) Math.round(consumedByUser * 100 / limit);
    double free = limit - consumedByOthers - consumedByUser;
    if (limit == UNLIMITED) {
        // unlimited
        setUnlimited();
    } else if (consumedByOthers + consumedByUser == 0) {
        // empty
        setZeroValue();
    } else if (consumedByOthers + consumedByUser > limit) {
        // exceeded
        setExceeded();
    } else {
        percentageBarA.setStyleName(style.percentageBarA());
        percentageLabelA.setStyleName(style.percentageLabelBlack());
        percentageBarB.setVisible(true);
        setValueA(othersConsumptionPercent);
        setValueB(userConsumptionPercent);
        setBars();
    }
}
#method_after
protected void setValues(double limit, double consumedByOthers, double consumedByUser) {
    int othersConsumptionPercent = (int) Math.round(consumedByOthers * 100 / limit);
    int userConsumptionPercent = (int) Math.round(consumedByUser * 100 / limit);
    if (limit == UNLIMITED) {
        // unlimited
        setUnlimited();
    } else if (consumedByOthers + consumedByUser == 0) {
        // empty
        setZeroValue();
    } else if (consumedByOthers + consumedByUser > limit) {
        // exceeded
        setExceeded();
    } else {
        percentageBarA.setStyleName(style.percentageBarA());
        percentageLabelA.setStyleName(style.percentageLabelBlack());
        percentageBarB.setVisible(true);
        setValueA(othersConsumptionPercent);
        setValueB(userConsumptionPercent);
        setBars();
    }
}
#end_block

#method_before
@Override
public void onMouseOver(MouseOverEvent event) {
    SafeHtml tooltipHtml = getTooltip();
    if (!"".equals(tooltipHtml.asString())) {
        // $NON-NLS-1$
        tooltip.setHTML(getTooltip());
        PopupUtils.adjustPopupLocationToFitScreenAndShow(tooltipPanel, event.getClientX(), event.getClientY() + 20);
    }
}
#method_after
@Override
public void onMouseOver(MouseOverEvent event) {
    SafeHtml tooltipHtml = getTooltip();
    if (!"".equals(tooltipHtml.asString())) {
        // $NON-NLS-1$
        tooltip.setHTML(tooltipHtml);
        PopupUtils.adjustPopupLocationToFitScreenAndShow(tooltipPanel, event.getClientX(), event.getClientY() + 20);
    }
}
#end_block

#method_before
private SafeHtml templateWithLabels(String quota, int totalUsagePercentage, String totalUsage, int usedByYouPercentage, String usedByYou, int usedByOthersPercentage, String usedByOthers, int freePercentage, String free) {
    return templates.quotaForUserBarToolTip(constants.tooltipQuotaLabel(), quota, constants.tooltipTotalUsageLabel(), totalUsagePercentage, totalUsage, constants.youUseQuota(), usedByYouPercentage, usedByYou, constants.othersUseQuota(), usedByOthersPercentage, usedByOthers, constants.freeQuota(), freePercentage, free);
}
#method_after
protected SafeHtml templateWithLabels(String quota, int totalUsagePercentage, String totalUsage, int usedByYouPercentage, String usedByYou, int usedByOthersPercentage, String usedByOthers, int freePercentage, String free) {
    return templates.quotaForUserBarToolTip(constants.tooltipQuotaLabel(), quota, constants.tooltipTotalUsageLabel(), totalUsagePercentage, totalUsage, constants.youUseQuota(), usedByYouPercentage, usedByYou, constants.othersUseQuota(), usedByOthersPercentage, usedByOthers, constants.freeQuota(), freePercentage, free);
}
#end_block

#method_before
private void addQuotaToVcpuQuotaList(QuotaUsagePerUser quotaPerUserUsageEntity) {
    QuotaProgressBar vcpuQuotaProgressBar = new QuotaProgressBar(templates, quotaPerUserUsageEntity, QuotaProgressBar.QuotaType.CPU);
    addQuotaRow(cpusQuotasList, quotaPerUserUsageEntity.getQuotaName(), vcpuQuotaProgressBar);
}
#method_after
private void addQuotaToVcpuQuotaList(QuotaUsagePerUser quotaPerUserUsageEntity) {
    QuotaProgressBar vcpuQuotaProgressBar = new QuotaCPUProgressBar(quotaPerUserUsageEntity);
    addQuotaRow(cpusQuotasList, quotaPerUserUsageEntity.getQuotaName(), vcpuQuotaProgressBar);
}
#end_block

#method_before
private void addQuotaToMemoryQuotaList(QuotaUsagePerUser quotaPerUserUsageEntity) {
    QuotaProgressBar memoryQuotaProgressBar = new QuotaProgressBar(templates, quotaPerUserUsageEntity, QuotaProgressBar.QuotaType.MEM);
    addQuotaRow(memoryQuotasList, quotaPerUserUsageEntity.getQuotaName(), memoryQuotaProgressBar);
}
#method_after
private void addQuotaToMemoryQuotaList(QuotaUsagePerUser quotaPerUserUsageEntity) {
    QuotaProgressBar memoryQuotaProgressBar = new QuotaMemoryProgressBar(quotaPerUserUsageEntity);
    addQuotaRow(memoryQuotasList, quotaPerUserUsageEntity.getQuotaName(), memoryQuotaProgressBar);
}
#end_block

#method_before
private void addQuotaToStorageQuotaList(QuotaUsagePerUser quotaPerUserUsageEntity) {
    QuotaProgressBar storageQuotaProgressBar = new QuotaProgressBar(templates, quotaPerUserUsageEntity, QuotaProgressBar.QuotaType.STORAGE);
    addQuotaRow(storageQuotasList, quotaPerUserUsageEntity.getQuotaName(), storageQuotaProgressBar);
}
#method_after
private void addQuotaToStorageQuotaList(QuotaUsagePerUser quotaPerUserUsageEntity) {
    QuotaProgressBar storageQuotaProgressBar = new QuotaStorageProgressBar(quotaPerUserUsageEntity);
    addQuotaRow(storageQuotasList, quotaPerUserUsageEntity.getQuotaName(), storageQuotaProgressBar);
}
#end_block

#method_before
@Override
protected void SyncSearch() {
    if (getEntity() == null) {
        return;
    }
    super.SyncSearch();
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            SearchableListModel searchableListModel = (SearchableListModel) model;
            ArrayList<Network> newItems = (ArrayList<Network>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Collections.sort(newItems, new Comparator<Network>() {

                private LexoNumericComparator lexoNumeric = new LexoNumericComparator();

                @Override
                public int compare(Network net1, Network net2) {
                    // management first
                    if (net1.getName().equals(HostInterfaceListModel.ENGINE_NETWORK_NAME)) {
                        return -1;
                    } else if (net2.getName().equals(HostInterfaceListModel.ENGINE_NETWORK_NAME)) {
                        return 1;
                    }
                    return lexoNumeric.compare(net1.getName(), net2.getName());
                }
            });
            searchableListModel.setItems(newItems);
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(getEntity().getId());
    tempVar.setRefresh(getIsQueryFirstTime());
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, tempVar, _asyncQuery);
}
#method_after
@Override
protected void SyncSearch() {
    if (getEntity() == null) {
        return;
    }
    super.SyncSearch();
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            SearchableListModel searchableListModel = (SearchableListModel) model;
            ArrayList<Network> newItems = (ArrayList<Network>) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Collections.sort(newItems, new Linq.NetworkComparator());
            searchableListModel.setItems(newItems);
        }
    };
    IdQueryParameters tempVar = new IdQueryParameters(getEntity().getId());
    tempVar.setRefresh(getIsQueryFirstTime());
    Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, tempVar, _asyncQuery);
}
#end_block

#method_before
private ClusterNetworkManageModel createNetworkList(List<Network> dcNetworks) {
    List<ClusterNetworkModel> networkList = new ArrayList<ClusterNetworkModel>();
    java.util.ArrayList<Network> clusterNetworks = Linq.<Network>Cast(getItems());
    for (Network network : dcNetworks) {
        ClusterNetworkModel networkManageModel;
        int index = clusterNetworks.indexOf(network);
        if (index >= 0) {
            Network clusterNetwork = clusterNetworks.get(index);
            networkManageModel = new ClusterNetworkModel((Network) Cloner.clone(clusterNetwork));
        } else {
            networkManageModel = new ClusterNetworkModel((Network) Cloner.clone(network));
        }
        networkManageModel.setCluster((VDSGroup) Cloner.clone(getEntity()));
        networkList.add(networkManageModel);
    }
    Collections.sort(networkList, networkComparator);
    ClusterNetworkManageModel listModel = new ClusterNetworkManageModel();
    listModel.setItems(networkList);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    listModel.getCommands().add(cancelCommand);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnManage", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    listModel.getCommands().add(0, okCommand);
    return listModel;
}
#method_after
private ClusterNetworkManageModel createNetworkList(List<Network> dcNetworks) {
    List<ClusterNetworkModel> networkList = new ArrayList<ClusterNetworkModel>();
    java.util.ArrayList<Network> clusterNetworks = Linq.<Network>Cast(getItems());
    for (Network network : dcNetworks) {
        ClusterNetworkModel networkManageModel;
        int index = clusterNetworks.indexOf(network);
        if (index >= 0) {
            Network clusterNetwork = clusterNetworks.get(index);
            networkManageModel = new ClusterNetworkModel((Network) Cloner.clone(clusterNetwork));
        } else {
            networkManageModel = new ClusterNetworkModel((Network) Cloner.clone(network));
        }
        networkManageModel.setCluster((VDSGroup) Cloner.clone(getEntity()));
        networkList.add(networkManageModel);
    }
    Collections.sort(networkList, new Linq.ClusterNetworkModelComparator());
    ClusterNetworkManageModel listModel = new ClusterNetworkManageModel();
    listModel.setItems(networkList);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    listModel.getCommands().add(cancelCommand);
    // $NON-NLS-1$
    UICommand okCommand = new UICommand("OnManage", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    listModel.getCommands().add(0, okCommand);
    return listModel;
}
#end_block

#method_before
private VdcReturnValueBase runActionImpl(VdcActionType actionType, VdcActionParametersBase parameters, boolean runAsInternal, CommandContext context) {
    VdcReturnValueBase returnValue = null;
    // Evaluate and set the correlationId on the parameters, fails on invalid correlation id
    boolean hasCorrelationId = parameters == null ? false : StringUtils.isNotEmpty(parameters.getCorrelationId());
    returnValue = ExecutionHandler.evaluateCorrelationId(parameters);
    if (returnValue != null) {
        log.warnFormat("CanDoAction of action {0} failed. Reasons: {1}", actionType, StringUtils.join(returnValue.getCanDoActionMessages(), ','));
        return returnValue;
    }
    CommandBase<?> command = CommandsFactory.CreateCommand(actionType, parameters);
    command.setInternalExecution(runAsInternal);
    command.setContext(context);
    ExecutionHandler.prepareCommandForMonitoring(command, actionType, runAsInternal, hasCorrelationId);
    returnValue = command.executeAction();
    returnValue.setCorrelationId(parameters.getCorrelationId());
    returnValue.setJobId(command.getJobId());
    return returnValue;
}
#method_after
private VdcReturnValueBase runActionImpl(VdcActionType actionType, VdcActionParametersBase parameters, boolean runAsInternal, CommandContext context) {
    VdcReturnValueBase returnValue = null;
    // Evaluate and set the correlationId on the parameters, fails on invalid correlation id
    boolean hasCorrelationId = StringUtils.isNotEmpty(parameters.getCorrelationId());
    returnValue = ExecutionHandler.evaluateCorrelationId(parameters);
    if (returnValue != null) {
        log.warnFormat("CanDoAction of action {0} failed. Reasons: {1}", actionType, StringUtils.join(returnValue.getCanDoActionMessages(), ','));
        return returnValue;
    }
    CommandBase<?> command = CommandsFactory.CreateCommand(actionType, parameters);
    command.setInternalExecution(runAsInternal);
    command.setContext(context);
    ExecutionHandler.prepareCommandForMonitoring(command, actionType, runAsInternal, hasCorrelationId);
    returnValue = command.executeAction();
    returnValue.setCorrelationId(parameters.getCorrelationId());
    returnValue.setJobId(command.getJobId());
    return returnValue;
}
#end_block

#method_before
static String getEngineSSHPublicKey() {
    final String keystoreFile = Config.<String>GetValue(ConfigValues.keystoreUrl);
    final String alias = Config.<String>GetValue(ConfigValues.CertAlias);
    final char[] password = Config.<String>GetValue(ConfigValues.keystorePass).toCharArray();
    InputStream in = null;
    try {
        in = new FileInputStream(keystoreFile);
        KeyStore ks = KeyStore.getInstance("PKCS12");
        ks.load(in, password);
        final Certificate cert = ks.getCertificate(alias);
        if (cert == null) {
            Enumeration<String> aliases = ks.aliases();
            log.info("Alias with name '" + alias + "' not found in " + keystoreFile);
            StringBuilder aliaslist = new StringBuilder();
            while (aliases.hasMoreElements()) {
                if (aliaslist.length() != 0) {
                    aliaslist.append(", ");
                }
                aliaslist.append(aliases.nextElement());
            }
            log.info("aliases: " + aliaslist.toString());
            throw new KeyStoreException(String.format("Failed to find certificate store '%1$s' using alias '%2$s'", keystoreFile, alias));
        }
        return OpenSSHUtils.getKeyString(cert.getPublicKey(), Config.<String>GetValue(ConfigValues.SSHKeyAlias));
    } catch (Exception e) {
        throw new RuntimeException(String.format("Failed to decode own public key from store '%1$s' using alias '%2$s'", keystoreFile, alias), e);
    } finally {
        Arrays.fill(password, '*');
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close key store", e);
            }
        }
    }
}
#method_after
protected static String getEngineSSHPublicKey() {
    final String keystoreFile = Config.<String>GetValue(ConfigValues.keystoreUrl);
    final String alias = Config.<String>GetValue(ConfigValues.CertAlias);
    final char[] password = Config.<String>GetValue(ConfigValues.keystorePass).toCharArray();
    InputStream in = null;
    try {
        in = new FileInputStream(keystoreFile);
        KeyStore ks = KeyStore.getInstance("PKCS12");
        ks.load(in, password);
        final Certificate cert = ks.getCertificate(alias);
        if (cert == null) {
            log.info("Alias with name '" + alias + "' not found in " + keystoreFile);
            log.info("aliases: " + StringUtils.join(EnumerationUtils.toList(ks.aliases()), ','));
            throw new KeyStoreException(String.format("Failed to find certificate store '%1$s' using alias '%2$s'", keystoreFile, alias));
        }
        return OpenSSHUtils.getKeyString(cert.getPublicKey(), Config.<String>GetValue(ConfigValues.SSHKeyAlias));
    } catch (Exception e) {
        throw new RuntimeException(String.format("Failed to decode own public key from store '%1$s' using alias '%2$s'", keystoreFile, alias), e);
    } finally {
        Arrays.fill(password, '*');
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close key store", e);
            }
        }
    }
}
#end_block

#method_before
public boolean Validate() {
    getIsoImage().setIsValid(true);
    if ((Boolean) getAttachIso().getEntity()) {
        getIsoImage().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    getFloppyImage().setIsValid(true);
    if ((Boolean) getAttachFloppy().getEntity()) {
        getFloppyImage().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    getKernel_path().setIsValid(true);
    getKernel_parameters().setIsValid(true);
    getInitrd_path().setIsValid(true);
    if (getKernel_path().getEntity() == null) {
        // $NON-NLS-1$
        getKernel_path().setEntity("");
    }
    if (getKernel_parameters().getEntity() == null) {
        // $NON-NLS-1$
        getKernel_parameters().setEntity("");
    }
    if (getInitrd_path().getEntity() == null) {
        // $NON-NLS-1$
        getInitrd_path().setEntity("");
    }
    boolean customPropertyValidation = getCustomPropertySheet().validate();
    if (getIsLinux_Unassign_UnknownOS()) {
        getKernel_path().ValidateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().ValidateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().ValidateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        String kernelPath = (String) getKernel_path().getEntity();
        String initrdPath = (String) getInitrd_path().getEntity();
        String kernelParams = (String) getKernel_parameters().getEntity();
        if ((kernelParams.length() > 0 || initrdPath.length() > 0) && kernelPath.length() == 0) {
            boolean kernelParamInvalid = false;
            boolean inetdPathInvalid = false;
            if (kernelParams.length() > 0) {
                getKernel_parameters().setIsValid(false);
                kernelParamInvalid = true;
            }
            if (initrdPath.length() > 0) {
                getInitrd_path().setIsValid(false);
                inetdPathInvalid = true;
            }
            String msg = ConstantsManager.getInstance().getMessages().invalidPath(kernelParamInvalid ? ConstantsManager.getInstance().getConstants().kernelInvalid() : // $NON-NLS-1$
            "", kernelParamInvalid && inetdPathInvalid ? ConstantsManager.getInstance().getConstants().or() : // $NON-NLS-1$
            "", inetdPathInvalid ? ConstantsManager.getInstance().getConstants().inetdInvalid() : // $NON-NLS-1$
            "");
            getKernel_path().setIsValid(false);
            getInitrd_path().getInvalidityReasons().add(msg);
            getKernel_parameters().getInvalidityReasons().add(msg);
            getKernel_path().getInvalidityReasons().add(msg);
        }
    }
    if (getIsAutoAssign().getEntity() != null && (Boolean) getIsAutoAssign().getEntity() == false) {
        getDefaultHost().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    return getIsoImage().getIsValid() && getFloppyImage().getIsValid() && getKernel_path().getIsValid() && getKernel_parameters().getIsValid() && getInitrd_path().getIsValid() && getDefaultHost().getIsValid() && customPropertyValidation;
}
#method_after
public boolean Validate() {
    getIsoImage().setIsValid(true);
    if ((Boolean) getAttachIso().getEntity()) {
        getIsoImage().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    getFloppyImage().setIsValid(true);
    if ((Boolean) getAttachFloppy().getEntity()) {
        getFloppyImage().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    }
    boolean customPropertyValidation = getCustomPropertySheet().validate();
    if (getIsLinuxOS()) {
        getKernel_path().ValidateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getInitrd_path().ValidateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        getKernel_parameters().ValidateEntity(new IValidation[] { new NoTrimmingWhitespacesValidation() });
        // initrd path and kernel params require kernel path to be filled
        if (StringHelper.isNullOrEmpty((String) getKernel_path().getEntity())) {
            final Constants constants = ConstantsManager.getInstance().getConstants();
            if (!StringHelper.isNullOrEmpty((String) getInitrd_path().getEntity())) {
                getInitrd_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getInitrd_path().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.initrdPathInvalid());
                getKernel_path().setIsValid(false);
            }
            if (!StringHelper.isNullOrEmpty((String) getKernel_parameters().getEntity())) {
                getKernel_parameters().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_parameters().setIsValid(false);
                getKernel_path().getInvalidityReasons().add(constants.kernelParamsInvalid());
                getKernel_path().setIsValid(false);
            }
        }
    }
    if (getIsAutoAssign().getEntity() != null && (Boolean) getIsAutoAssign().getEntity() == false) {
        getDefaultHost().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    } else {
        getDefaultHost().setIsValid(true);
    }
    return getIsoImage().getIsValid() && getFloppyImage().getIsValid() && getKernel_path().getIsValid() && getInitrd_path().getIsValid() && getKernel_parameters().getIsValid() && getDefaultHost().getIsValid() && customPropertyValidation;
}
#end_block

#method_before
private void RunOnce() {
    VM vm = (VM) getSelectedItem();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    // Custom Properties
    model.getCustomPropertySheet().setKeyValueString(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.getCustomPropertySheet().setEntity(vm.getCustomProperties());
    model.setCustomPropertiesKeysList(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.setIsLinux_Unassign_UnknownOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()) || vm.getVmOs() == VmOsType.Unassigned || vm.getVmOs() == VmOsType.Other);
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinux_Unassign_UnknownOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    RunOnceUpdateDisplayProtocols(vm);
    RunOnceUpdateFloppy(vm, new ArrayList<String>());
    RunOnceUpdateImages(vm);
    RunOnceUpdateDomains();
    RunOnceUpdateBootSequence(vm);
    RunOnceLoadHosts(vm);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRunOnce", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    model.getIsAutoAssign().setEntity(true);
}
#method_after
private void RunOnce() {
    VM vm = (VM) getSelectedItem();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    // Custom Properties
    model.getCustomPropertySheet().setKeyValueString(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.getCustomPropertySheet().setEntity(vm.getCustomProperties());
    model.setCustomPropertiesKeysList(this.getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    model.setIsLinuxOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()));
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinuxOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    RunOnceUpdateDisplayProtocols(vm);
    RunOnceUpdateFloppy(vm, new ArrayList<String>());
    RunOnceUpdateImages(vm);
    RunOnceUpdateDomains();
    updateInterfacesRelatedRunOnceData(vm);
    updateDisksRelatedRunOnceData(vm);
    RunOnceLoadHosts(vm);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRunOnce", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    model.getIsAutoAssign().setEntity(true);
}
#end_block

#method_before
private void RunOnce() {
    UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
    if (selectedItem == null || selectedItem.getEntity() == null) {
        return;
    }
    VM vm = (VM) selectedItem.getEntity();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // disable Host tab
    model.setIsHostTabVisible(false);
    // disable Custom properties sheet
    model.setIsCustomPropertiesSheetVisible(false);
    fillIsoList(vm);
    fillFloppyImages(vm);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    model.getCustomProperties().setEntity(vm.getCustomProperties());
    model.setIsLinux_Unassign_UnknownOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()) || vm.getVmOs() == VmOsType.Unassigned || vm.getVmOs() == VmOsType.Other);
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinux_Unassign_UnknownOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    // Update Domain list
    AsyncDataProvider.GetDomainList(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue1) {
            RunOnceModel runOnceModel = (RunOnceModel) target;
            List<String> domains = (List<String>) returnValue1;
            String oldDomain = (String) runOnceModel.getSysPrepDomainName().getSelectedItem();
            if (// $NON-NLS-1$
            oldDomain != null && !oldDomain.equals("") && !domains.contains(oldDomain)) {
                domains.add(0, oldDomain);
            }
            runOnceModel.getSysPrepDomainName().setItems(domains);
            runOnceModel.getSysPrepDomainName().setSelectedItem((oldDomain != null) ? oldDomain : Linq.FirstOrDefault(domains));
        }
    }), true);
    // Display protocols.
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    tempVar.setEntity(DisplayType.vnc);
    EntityModel vncProtocol = tempVar;
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    tempVar2.setEntity(DisplayType.qxl);
    EntityModel qxlProtocol = tempVar2;
    boolean isVncSelected = vm.getDefaultDisplayType() == DisplayType.vnc;
    model.getDisplayConsole_Vnc_IsSelected().setEntity(isVncSelected);
    model.getDisplayConsole_Spice_IsSelected().setEntity(!isVncSelected);
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    items.add(vncProtocol);
    items.add(qxlProtocol);
    model.getDisplayProtocol().setItems(items);
    model.getDisplayProtocol().setSelectedItem(vm.getDefaultDisplayType() == DisplayType.vnc ? vncProtocol : qxlProtocol);
    model.setCustomPropertiesKeysList(getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    // Boot sequence.
    setIsBootFromNetworkAllowedForVm(vm);
    setIsBootFromHardDiskAllowedForVm(vm);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("OnRunOnce", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar3.setIsDefault(true);
    model.getCommands().add(tempVar3);
    // $NON-NLS-1$
    UICommand tempVar4 = new UICommand("Cancel", this);
    tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar4.setIsCancel(true);
    model.getCommands().add(tempVar4);
}
#method_after
private void RunOnce() {
    UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
    if (selectedItem == null || selectedItem.getEntity() == null) {
        return;
    }
    VM vm = (VM) selectedItem.getEntity();
    RunOnceModel model = new RunOnceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().runVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("run_virtual_machine");
    model.getAttachIso().setEntity(false);
    model.getAttachFloppy().setEntity(false);
    model.getRunAsStateless().setEntity(vm.isStateless());
    model.getRunAndPause().setEntity(false);
    model.setHwAcceleration(true);
    // disable Host tab
    model.setIsHostTabVisible(false);
    // disable Custom properties sheet
    model.setIsCustomPropertiesSheetVisible(false);
    fillIsoList(vm);
    fillFloppyImages(vm);
    // passing Kernel parameters
    model.getKernel_parameters().setEntity(vm.getKernelParams());
    model.getKernel_path().setEntity(vm.getKernelUrl());
    model.getInitrd_path().setEntity(vm.getInitrdUrl());
    model.getCustomProperties().setEntity(vm.getCustomProperties());
    model.setIsLinuxOS(AsyncDataProvider.IsLinuxOsType(vm.getVmOs()));
    model.getIsLinuxOptionsAvailable().setEntity(model.getIsLinuxOS());
    model.setIsWindowsOS(AsyncDataProvider.IsWindowsOsType(vm.getVmOs()));
    model.getIsVmFirstRun().setEntity(!vm.isInitialized());
    model.getSysPrepDomainName().setSelectedItem(vm.getVmDomain());
    // Update Domain list
    AsyncDataProvider.GetDomainList(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue1) {
            RunOnceModel runOnceModel = (RunOnceModel) target;
            List<String> domains = (List<String>) returnValue1;
            String oldDomain = (String) runOnceModel.getSysPrepDomainName().getSelectedItem();
            if (// $NON-NLS-1$
            oldDomain != null && !oldDomain.equals("") && !domains.contains(oldDomain)) {
                domains.add(0, oldDomain);
            }
            runOnceModel.getSysPrepDomainName().setItems(domains);
            runOnceModel.getSysPrepDomainName().setSelectedItem((oldDomain != null) ? oldDomain : Linq.FirstOrDefault(domains));
        }
    }), true);
    // Display protocols.
    EntityModel tempVar = new EntityModel();
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().VNCTitle());
    tempVar.setEntity(DisplayType.vnc);
    EntityModel vncProtocol = tempVar;
    EntityModel tempVar2 = new EntityModel();
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().spiceTitle());
    tempVar2.setEntity(DisplayType.qxl);
    EntityModel qxlProtocol = tempVar2;
    boolean isVncSelected = vm.getDefaultDisplayType() == DisplayType.vnc;
    model.getDisplayConsole_Vnc_IsSelected().setEntity(isVncSelected);
    model.getDisplayConsole_Spice_IsSelected().setEntity(!isVncSelected);
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    items.add(vncProtocol);
    items.add(qxlProtocol);
    model.getDisplayProtocol().setItems(items);
    model.getDisplayProtocol().setSelectedItem(vm.getDefaultDisplayType() == DisplayType.vnc ? vncProtocol : qxlProtocol);
    model.setCustomPropertiesKeysList(getCustomPropertiesKeysList().get(vm.getVdsGroupCompatibilityVersion()));
    // Boot sequence.
    setIsBootFromNetworkAllowedForVm(vm);
    setIsBootFromHardDiskAllowedForVm(vm);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("OnRunOnce", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar3.setIsDefault(true);
    model.getCommands().add(tempVar3);
    // $NON-NLS-1$
    UICommand tempVar4 = new UICommand("Cancel", this);
    tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar4.setIsCancel(true);
    model.getCommands().add(tempVar4);
}
#end_block

#method_before
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#method_after
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            RunOnceModel runOnceModel = (RunOnceModel) userPortalListModel.getWindow();
            if (vmDisks.isEmpty()) {
                runOnceModel.getRunAsStateless().setIsChangable(false);
                // $NON-NLS-1$
                runOnceModel.getRunAsStateless().setChangeProhibitionReason("Diskless Virtual Machine cannot run in stateless mode");
                runOnceModel.getRunAsStateless().setEntity(false);
            }
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = runOnceModel.getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#end_block

#method_before
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, vm.getVdsGroupId().getValue());
            behavior.InitTemplate();
        }
    }, getModel().getHash()), dataCenter.getId());
    // If a VM has at least one disk, present its storage domain.
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<Disk> disks = new ArrayList<Disk>();
            List<Disk> nonExportableDisks = new ArrayList<Disk>();
            Iterable disksEnumerable = (Iterable) returnValue;
            Iterator disksIterator = disksEnumerable.iterator();
            while (disksIterator.hasNext()) {
                Disk disk = (Disk) disksIterator.next();
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE && !disk.isShareable()) {
                    disks.add(disk);
                } else if (!disk.isAllowSnapshot()) {
                    nonExportableDisks.add(disk);
                }
            }
            behavior.InitStorageDomains();
            InitDisks(disks);
            sendWarningForNonExportableDisks(nonExportableDisks);
        }
    }, getModel().getHash()), vm.getId(), true);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#method_after
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterByServiceList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, vm.getVdsGroupId().getValue());
            behavior.InitTemplate();
        }
    }, getModel().getHash()), dataCenter.getId(), true, false);
    // If a VM has at least one disk, present its storage domain.
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<Disk> imageDisks = new ArrayList<Disk>();
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            for (Disk disk : vmDisks) {
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE && !disk.isShareable()) {
                    imageDisks.add(disk);
                }
            }
            behavior.InitStorageDomains();
            InitDisks(imageDisks);
            VmModelHelper.sendWarningForNonExportableDisks(getModel(), vmDisks, VmModelHelper.WarningType.VM_TEMPLATE);
        }
    }, getModel().getHash()), vm.getId(), true);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
private void InitDisks(ArrayList<Disk> disks) {
    Collections.sort(disks, new Linq.DiskByAliasComparer());
    ArrayList<DiskModel> list = new ArrayList<DiskModel>();
    for (Disk disk : disks) {
        DiskModel diskModel = new DiskModel();
        diskModel.setIsNew(true);
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            DiskImage diskImage = (DiskImage) disk;
            EntityModel size = new EntityModel();
            size.setEntity(diskImage.getSizeInGigabytes());
            diskModel.setSize(size);
            ListModel volumes = new ListModel();
            volumes.setItems((diskImage.getVolumeType() == VolumeType.Preallocated ? new ArrayList<VolumeType>(Arrays.asList(new VolumeType[] { VolumeType.Preallocated })) : AsyncDataProvider.GetVolumeTypeList()));
            volumes.setSelectedItem(diskImage.getVolumeType());
            diskModel.setVolumeType(volumes);
            diskModel.getAlias().setEntity(diskImage.getDiskAlias());
        }
        diskModel.setDisk(disk);
        list.add(diskModel);
    }
    getModel().setDisks(list);
}
#method_after
private void InitDisks(ArrayList<Disk> disks) {
    Collections.sort(disks, new Linq.DiskByAliasComparer());
    ArrayList<DiskModel> list = new ArrayList<DiskModel>();
    for (Disk disk : disks) {
        DiskModel diskModel = new DiskModel();
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            DiskImage diskImage = (DiskImage) disk;
            EntityModel size = new EntityModel();
            size.setEntity(diskImage.getSizeInGigabytes());
            diskModel.setSize(size);
            ListModel volumes = new ListModel();
            volumes.setItems((diskImage.getVolumeType() == VolumeType.Preallocated ? new ArrayList<VolumeType>(Arrays.asList(new VolumeType[] { VolumeType.Preallocated })) : AsyncDataProvider.GetVolumeTypeList()));
            volumes.setSelectedItem(diskImage.getVolumeType());
            diskModel.setVolumeType(volumes);
            diskModel.getAlias().setEntity(diskImage.getDiskAlias());
        }
        diskModel.setDisk(disk);
        list.add(diskModel);
    }
    getModel().setDisks(list);
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof VmStatic)) {
        return false;
    }
    VmStatic other = (VmStatic) obj;
    if (defaultDisplayType != other.defaultDisplayType) {
        return false;
    }
    if (initialized != other.initialized) {
        return false;
    }
    if (diskSize != other.diskSize) {
        return false;
    }
    if (getName() == null) {
        if (other.getName() != null) {
            return false;
        }
    } else if (!getName().equals(other.getName())) {
        return false;
    }
    if (predefinedProperties == null) {
        if (other.predefinedProperties != null) {
            return false;
        }
    } else if (!predefinedProperties.equals(other.predefinedProperties)) {
        return false;
    }
    if (userDefinedProperties == null) {
        if (other.userDefinedProperties != null) {
            return false;
        }
    } else if (!userDefinedProperties.equals(other.userDefinedProperties)) {
        return false;
    }
    if (vmtGuid == null) {
        if (other.vmtGuid != null) {
            return false;
        }
    } else if (!vmtGuid.equals(other.vmtGuid)) {
        return false;
    }
    if (useHostCpuFlags != other.useHostCpuFlags) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof VmStatic)) {
        return false;
    }
    VmStatic other = (VmStatic) obj;
    return (defaultDisplayType == other.defaultDisplayType && initialized == other.initialized && diskSize == other.diskSize && ObjectUtils.objectsEqual(getName(), other.getName()) && ObjectUtils.objectsEqual(predefinedProperties, other.predefinedProperties) && ObjectUtils.objectsEqual(userDefinedProperties, other.userDefinedProperties) && ObjectUtils.objectsEqual(vmtGuid, other.vmtGuid) && useHostCpuFlags == other.useHostCpuFlags);
}
#end_block

#method_before
public void PostNameUniqueCheck(boolean isNameUnique) {
    UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem = (VmTemplate) getSelectedItem();
    VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!isNameUnique && name.compareToIgnoreCase(template.getName()) != 0) {
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.getName().setIsValid(false);
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    template.setVmType(model.getVmType());
    template.setName(name);
    template.setOs((VmOsType) model.getOSType().getSelectedItem());
    template.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    template.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    template.setDescription((String) model.getDescription().getEntity());
    // $NON-NLS-1$
    template.setDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    template.setMemSizeMb((Integer) model.getMemSize().getEntity());
    template.setMinAllocatedMem(((Integer) model.getMinAllocatedMemory().getEntity()));
    template.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    template.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    template.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    template.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    template.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    template.setAutoSuspend(false);
    template.setStateless((Boolean) model.getIsStateless().getEntity());
    template.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    template.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    template.setDefaultBootSequence(model.getBootSequence());
    // $NON-NLS-1$
    template.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    template.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    template.setKernelUrl((String) model.getKernel_path().getEntity());
    template.setKernelParams((String) model.getKernel_parameters().getEntity());
    template.setInitrdUrl((String) model.getInitrd_path().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        template.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    template.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    template.setPriority((Integer) prioritySelectedItem.getEntity());
    // host migration configuration
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        template.setDedicatedVmForVds(null);
    } else {
        template.setDedicatedVmForVds(defaultHost.getId());
    }
    template.setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        template.setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        template.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
    }
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.UpdateVmTemplate, new UpdateVmTemplateParameters(template), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            TemplateListModel localModel = (TemplateListModel) result.getState();
            localModel.PostUpdateVmTemplate(result.getReturnValue());
        }
    }, this);
}
#method_after
public void PostNameUniqueCheck(boolean isNameUnique) {
    UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem = (VmTemplate) getSelectedItem();
    VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!isNameUnique && name.compareToIgnoreCase(template.getName()) != 0) {
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.getName().setIsValid(false);
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    template.setVmType(model.getVmType());
    template.setName(name);
    template.setOs((VmOsType) model.getOSType().getSelectedItem());
    template.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    template.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    template.setDescription((String) model.getDescription().getEntity());
    // $NON-NLS-1$
    template.setDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    template.setMemSizeMb((Integer) model.getMemSize().getEntity());
    template.setMinAllocatedMem(((Integer) model.getMinAllocatedMemory().getEntity()));
    template.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    template.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    template.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    template.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    template.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    template.setAutoSuspend(false);
    template.setStateless((Boolean) model.getIsStateless().getEntity());
    template.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    template.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    template.setDefaultBootSequence(model.getBootSequence());
    // $NON-NLS-1$
    template.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    template.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    template.setKernelUrl((String) model.getKernel_path().getEntity());
    template.setKernelParams((String) model.getKernel_parameters().getEntity());
    template.setInitrdUrl((String) model.getInitrd_path().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        template.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    template.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    template.setPriority((Integer) prioritySelectedItem.getEntity());
    // host migration configuration
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        template.setDedicatedVmForVds(null);
    } else {
        template.setDedicatedVmForVds(defaultHost.getId());
    }
    template.setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.UpdateVmTemplate, new UpdateVmTemplateParameters(template), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            TemplateListModel localModel = (TemplateListModel) result.getState();
            localModel.PostUpdateVmTemplate(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof VmBase)) {
        return false;
    }
    VmBase other = (VmBase) obj;
    if (autoStartup != other.autoStartup) {
        return false;
    }
    if (autoSuspend != other.autoSuspend) {
        return false;
    }
    if (cpuPerSocket != other.cpuPerSocket) {
        return false;
    }
    if (creationDate == null) {
        if (other.creationDate != null) {
            return false;
        }
    } else if (!creationDate.equals(other.creationDate)) {
        return false;
    }
    if (defaultBootSequence != other.defaultBootSequence) {
        return false;
    }
    if (description == null) {
        if (other.description != null) {
            return false;
        }
    } else if (!description.equals(other.description)) {
        return false;
    }
    if (domain == null) {
        if (other.domain != null) {
            return false;
        }
    } else if (!domain.equals(other.domain)) {
        return false;
    }
    if (failBack != other.failBack) {
        return false;
    }
    if (id == null) {
        if (other.id != null) {
            return false;
        }
    } else if (!id.equals(other.id)) {
        return false;
    }
    if (initrdUrl == null) {
        if (other.initrdUrl != null) {
            return false;
        }
    } else if (!initrdUrl.equals(other.initrdUrl)) {
        return false;
    }
    if (isoPath == null) {
        if (other.isoPath != null) {
            return false;
        }
    } else if (!isoPath.equals(other.isoPath)) {
        return false;
    }
    if (kernelParams == null) {
        if (other.kernelParams != null) {
            return false;
        }
    } else if (!kernelParams.equals(other.kernelParams)) {
        return false;
    }
    if (kernelUrl == null) {
        if (other.kernelUrl != null) {
            return false;
        }
    } else if (!kernelUrl.equals(other.kernelUrl)) {
        return false;
    }
    if (os != other.os) {
        return false;
    }
    if (memSizeMb != other.memSizeMb) {
        return false;
    }
    if (niceLevel != other.niceLevel) {
        return false;
    }
    if (numOfSockets != other.numOfSockets) {
        return false;
    }
    if (numOfMonitors != other.numOfMonitors) {
        return false;
    }
    if (origin != other.origin) {
        return false;
    }
    if (priority != other.priority) {
        return false;
    }
    if (stateless != other.stateless) {
        return false;
    }
    if (smartcardEnabled != other.smartcardEnabled) {
        return false;
    }
    if (deleteProtected != other.deleteProtected) {
        return false;
    }
    if (timeZone == null) {
        if (other.timeZone != null) {
            return false;
        }
    } else if (!timeZone.equals(other.timeZone)) {
        return false;
    }
    if (usbPolicy != other.usbPolicy) {
        return false;
    }
    if (vdsGroupId == null) {
        if (other.vdsGroupId != null) {
            return false;
        }
    } else if (!vdsGroupId.equals(other.vdsGroupId)) {
        return false;
    }
    if (vmType != other.vmType) {
        return false;
    }
    if (quotaId == null) {
        if (other.quotaId != null)
            return false;
    } else if (!quotaId.equals(other.quotaId))
        return false;
    if (allowConsoleReconnect != other.allowConsoleReconnect) {
        return false;
    }
    if (dedicatedVmForVds == null) {
        if (other.dedicatedVmForVds != null) {
            return false;
        }
    } else {
        if (!dedicatedVmForVds.equals(other.dedicatedVmForVds)) {
            return false;
        }
    }
    if (migrationSupport != other.migrationSupport) {
        return false;
    }
    if (tunnelMigration == null) {
        if (other.tunnelMigration != null) {
            return false;
        }
    } else if (!tunnelMigration.equals(other.tunnelMigration)) {
        return false;
    }
    if (vncKeyboardLayout == null) {
        if (other.vncKeyboardLayout != null) {
            return false;
        }
    } else if (!vncKeyboardLayout.equals(other.vncKeyboardLayout)) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof VmBase)) {
        return false;
    }
    VmBase other = (VmBase) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && autoStartup == other.autoStartup && autoSuspend == other.autoSuspend && cpuPerSocket == other.cpuPerSocket && ObjectUtils.objectsEqual(creationDate, other.creationDate) && defaultBootSequence == other.defaultBootSequence && ObjectUtils.objectsEqual(description, other.description) && ObjectUtils.objectsEqual(domain, other.domain) && failBack == other.failBack && ObjectUtils.objectsEqual(initrdUrl, other.initrdUrl) && ObjectUtils.objectsEqual(isoPath, other.isoPath) && ObjectUtils.objectsEqual(kernelParams, other.kernelParams) && ObjectUtils.objectsEqual(kernelUrl, other.kernelUrl) && os == other.os && memSizeMb == other.memSizeMb && niceLevel == other.niceLevel && numOfSockets == other.numOfSockets && numOfMonitors == other.numOfMonitors && origin == other.origin && priority == other.priority && stateless == other.stateless && smartcardEnabled == other.smartcardEnabled && deleteProtected == other.deleteProtected && ObjectUtils.objectsEqual(timeZone, other.timeZone) && usbPolicy == other.usbPolicy && ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId) && vmType == other.vmType && ObjectUtils.objectsEqual(quotaId, other.quotaId) && allowConsoleReconnect == other.allowConsoleReconnect && ObjectUtils.objectsEqual(dedicatedVmForVds, other.dedicatedVmForVds) && migrationSupport == other.migrationSupport && ObjectUtils.objectsEqual(tunnelMigration, other.tunnelMigration) && ObjectUtils.objectsEqual(vncKeyboardLayout, other.vncKeyboardLayout));
}
#end_block

#method_before
protected void AddVmTemplateImages() {
    Guid vmSnapshotId = Guid.NewGuid();
    for (DiskImage diskImage : mImages) {
        CreateImageTemplateParameters createParams = new CreateImageTemplateParameters(diskImage.getImageId(), getVmTemplateId(), getVmTemplateName(), getVmId());
        createParams.setStorageDomainId(diskImage.getStorageIds().get(0));
        createParams.setVmSnapshotId(vmSnapshotId);
        createParams.setEntityId(getParameters().getEntityId());
        createParams.setDestinationStorageDomainId(diskInfoDestinationMap.get(diskImage.getId()).getStorageIds().get(0));
        createParams.setDiskAlias(diskInfoDestinationMap.get(diskImage.getId()).getDiskAlias());
        createParams.setParentParameters(getParameters());
        if (getParameters().getDiskInfoDestinationMap() != null && getParameters().getDiskInfoDestinationMap().get(diskImage.getId()) != null) {
            createParams.setQuotaId(getParameters().getDiskInfoDestinationMap().get(diskImage.getId()).getQuotaId() != null ? getParameters().getDiskInfoDestinationMap().get(diskImage.getId()).getQuotaId() : null);
        }
        // The return value of this action is the 'copyImage' task GUID:
        VdcReturnValueBase retValue = Backend.getInstance().runInternalAction(VdcActionType.CreateImageTemplate, createParams, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (!retValue.getSucceeded()) {
            throw new VdcBLLException(retValue.getFault().getError(), retValue.getFault().getMessage());
        }
        getReturnValue().getTaskIdList().addAll(retValue.getInternalTaskIdList());
        newDiskImages.add((DiskImage) retValue.getActionReturnValue());
    }
}
#method_after
protected void AddVmTemplateImages() {
    Guid vmSnapshotId = Guid.NewGuid();
    for (DiskImage diskImage : mImages) {
        CreateImageTemplateParameters createParams = new CreateImageTemplateParameters(diskImage.getImageId(), getVmTemplateId(), getVmTemplateName(), getVmId());
        createParams.setStorageDomainId(diskImage.getStorageIds().get(0));
        createParams.setVmSnapshotId(vmSnapshotId);
        createParams.setEntityId(getParameters().getEntityId());
        createParams.setDestinationStorageDomainId(diskInfoDestinationMap.get(diskImage.getId()).getStorageIds().get(0));
        createParams.setDiskAlias(diskInfoDestinationMap.get(diskImage.getId()).getDiskAlias());
        createParams.setParentParameters(getParameters());
        createParams.setQuotaId(getQuotaIdForDisk(diskImage));
        // The return value of this action is the 'copyImage' task GUID:
        VdcReturnValueBase retValue = Backend.getInstance().runInternalAction(VdcActionType.CreateImageTemplate, createParams, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (!retValue.getSucceeded()) {
            throw new VdcBLLException(retValue.getFault().getError(), retValue.getFault().getMessage());
        }
        getReturnValue().getTaskIdList().addAll(retValue.getInternalTaskIdList());
        newDiskImages.add((DiskImage) retValue.getActionReturnValue());
    }
}
#end_block

#method_before
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    Collection<DiskImage> disksList = diskInfoDestinationMap.values().size() > 0 ? diskInfoDestinationMap.values() : getVm().getDiskList();
    for (DiskImage disk : disksList) {
        list.add(new QuotaStorageConsumptionParameter(disk.getQuotaId(), null, QuotaStorageConsumptionParameter.QuotaAction.CONSUME, disk.getStorageIds().get(0), (double) disk.getSizeInGigabytes()));
    }
    return list;
}
#method_after
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    for (DiskImage disk : getVm().getDiskList()) {
        list.add(new QuotaStorageConsumptionParameter(getQuotaIdForDisk(disk), null, QuotaStorageConsumptionParameter.QuotaAction.CONSUME, disk.getStorageIds().get(0), (double) disk.getSizeInGigabytes()));
    }
    return list;
}
#end_block

#method_before
@Override
public void Initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.Initialize(systemTreeSelectedItem);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(false);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(false);
    AsyncDataProvider.GetDataCenterList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<storage_pool> list = new ArrayList<storage_pool>();
            for (storage_pool a : (ArrayList<storage_pool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    list.add(a);
                }
            }
            model.SetDataCenter(model, list);
            getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty);
        }
    }, getModel().getHash()));
}
#method_after
@Override
public void Initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.Initialize(systemTreeSelectedItem);
    getModel().getDisksAllocationModel().setIsVolumeFormatAvailable(false);
    getModel().getDisksAllocationModel().setIsAliasChangable(true);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(false);
    AsyncDataProvider.GetDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<storage_pool> list = new ArrayList<storage_pool>();
            for (storage_pool a : (ArrayList<storage_pool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    list.add(a);
                }
            }
            model.SetDataCenter(model, list);
            getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty);
        }
    }, getModel().getHash()), true, false);
}
#end_block

#method_before
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    if (dataCenter == null)
        return;
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            PoolModelBehaviorBase behavior = (PoolModelBehaviorBase) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, null);
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId());
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#method_after
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    if (dataCenter == null)
        return;
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterByServiceList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            PoolModelBehaviorBase behavior = (PoolModelBehaviorBase) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, null);
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId(), true, false);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
@Override
public void Initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.Initialize(systemTreeSelectedItem);
    AsyncDataProvider.GetDataCenterList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<storage_pool> list = new ArrayList<storage_pool>();
            for (storage_pool a : (ArrayList<storage_pool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    list.add(a);
                }
            }
            model.SetDataCenter(model, list);
        }
    }, getModel().getHash()));
    InitPriority(0);
}
#method_after
@Override
public void Initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.Initialize(systemTreeSelectedItem);
    AsyncDataProvider.GetDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<storage_pool> list = new ArrayList<storage_pool>();
            for (storage_pool a : (ArrayList<storage_pool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    list.add(a);
                }
            }
            model.SetDataCenter(model, list);
        }
    }, getModel().getHash()), true, false);
    InitPriority(0);
}
#end_block

#method_before
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewVmModelBehavior behavior = (NewVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, null);
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId());
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#method_after
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterByServiceList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewVmModelBehavior behavior = (NewVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, null);
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId(), true, false);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
private void updateVmStatistics(VM vmToUpdate) {
    // check if time for vm statistics refresh - update cache and DB
    if (_vdsManager.getRefreshStatistics()) {
        VmStatistics vmStatistics = _runningVms.get(vmToUpdate.getId()).getVmStatistics();
        vmToUpdate.updateRunTimeStatisticsData(vmStatistics, vmToUpdate);
        addVmStatisticsToList(vmToUpdate.getStatisticsData());
        updateInterfaceStatistics(vmToUpdate, vmStatistics);
        for (DiskImageDynamic imageDynamic : _runningVms.get(vmToUpdate.getId()).getVmDynamic().getDisks()) {
            Disk disk = getDbFacade().getDiskDao().get(imageDynamic.getId());
            // update for the AI.
            if (disk instanceof DiskImage) {
                DiskImage diskImage = (DiskImage) disk;
                Guid ActiveImageId = diskImage.getImageId();
                imageDynamic.setId(ActiveImageId);
                _vmDiskImageDynamicToSave.put(ActiveImageId, imageDynamic);
            }
        }
    }
}
#method_after
private void updateVmStatistics(VM vmToUpdate) {
    // check if time for vm statistics refresh - update cache and DB
    if (_vdsManager.getRefreshStatistics()) {
        VmStatistics vmStatistics = _runningVms.get(vmToUpdate.getId()).getVmStatistics();
        vmToUpdate.updateRunTimeStatisticsData(vmStatistics, vmToUpdate);
        addVmStatisticsToList(vmToUpdate.getStatisticsData());
        updateInterfaceStatistics(vmToUpdate, vmStatistics);
        for (DiskImageDynamic imageDynamic : _runningVms.get(vmToUpdate.getId()).getVmDynamic().getDisks()) {
            Disk disk = getDbFacade().getDiskDao().get(imageDynamic.getId());
            // update for the AI.
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                Guid activeImageId = diskImage.getImageId();
                imageDynamic.setId(activeImageId);
                _vmDiskImageDynamicToSave.put(activeImageId, imageDynamic);
            }
        }
    }
}
#end_block

#method_before
private void setupMock() {
    expected = getExpectedHooksList();
    emptyList = new ArrayList<GlusterHookEntity>();
    // Mock the query's parameters
    doReturn(CLUSTER_ID).when(getQueryParameters()).getClusterId();
    // Mock the DAO
    glusterHookDaoMock = mock(GlusterHookDao.class);
    doReturn(glusterHookDaoMock).when(getQuery()).getGlusterHookDao();
    doReturn(UPSERVER_ID).when(getQuery()).getUpServerId(CLUSTER_ID);
    VDSReturnValue returnValue = new VDSReturnValue();
    returnValue.setSucceeded(true);
    returnValue.setReturnValue(expected);
    doReturn(returnValue).when(getQuery()).runVdsCommand(eq(VDSCommandType.GetGlusterHooks), any(VDSParametersBase.class));
}
#method_after
private void setupMock() {
    expected = getExpectedHooksList();
    emptyList = new ArrayList<GlusterHookEntity>();
    // Mock the query's parameters
    doReturn(CLUSTER_ID).when(getQueryParameters()).getClusterId();
    // Mock the DAO
    glusterHookDaoMock = mock(GlusterHooksDao.class);
    doReturn(glusterHookDaoMock).when(getQuery()).getGlusterHookDao();
}
#end_block

#method_before
private List<GlusterHookEntity> getExpectedHooksList() {
    List<GlusterHookEntity> glusterHooks = new ArrayList<GlusterHookEntity>();
    GlusterHookEntity hook = new GlusterHookEntity();
    hook.setClusterId(CLUSTER_ID);
    hook.setName("cifs_config");
    hook.setGlusterCommand("start");
    hook.setLevel("POST");
    hook.setStatus(GlusterHookStatus.ENABLED);
    glusterHooks.add(hook);
    hook = new GlusterHookEntity();
    hook.setClusterId(CLUSTER_ID);
    hook.setName("virt_config");
    hook.setGlusterCommand("create");
    hook.setLevel("PRE");
    hook.setStatus("DISABLED");
    glusterHooks.add(hook);
    return glusterHooks;
}
#method_after
private List<GlusterHookEntity> getExpectedHooksList() {
    List<GlusterHookEntity> glusterHooks = new ArrayList<GlusterHookEntity>();
    GlusterHookEntity hook = new GlusterHookEntity();
    hook.setClusterId(CLUSTER_ID);
    hook.setGlusterCommand("start");
    hook.setStage("POST");
    hook.setName("cifs_config");
    hook.setStatus(GlusterHookStatus.ENABLED);
    hook.setChecksum("e72c504dc16c8fcd2fe8c74bb492affa");
    hook.setContentType(GlusterHookContentType.TEXT);
    hook.setConflictStatus(0);
    glusterHooks.add(hook);
    hook = new GlusterHookEntity();
    hook.setClusterId(CLUSTER_ID);
    hook.setGlusterCommand("create");
    hook.setStage("PRE");
    hook.setName("virt_config");
    hook.setStatus("DISABLED");
    hook.setChecksum("d72c504dc16c8fcd2fe8c74bb492affb");
    hook.setContentType(GlusterHookContentType.BINARY);
    hook.setConflictStatus(0);
    glusterHooks.add(hook);
    return glusterHooks;
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    // If no gluster hooks found from DB, fetch gluster hooks from the backend(vdsm) and update the DB.
    // Query should return the gluster hooks from the DB.
    List<GlusterHookEntity> hooksList = getGlusterHooksFromDb();
    if (hooksList.size() == 0) {
        getGlusterHooksFromVdsm();
        hooksList = getGlusterHooksFromDb();
    }
    getQueryReturnValue().setReturnValue(hooksList);
}
#method_after
@Override
protected void executeQueryCommand() {
    getQueryReturnValue().setReturnValue(getGlusterHookDao().getByClusterId(getParameters().getClusterId()));
    getQueryReturnValue().setSucceeded(true);
}
#end_block

#method_before
protected <T extends DAO> T getDao(Class<T> daoType) {
    T dao = DaoFactory.get(daoType);
    if (dao instanceof BaseDAODbFacade) {
        BaseDAODbFacade dbFacadeDAO = (BaseDAODbFacade) dao;
        dbFacadeDAO.setTemplate(jdbcTemplate);
        dbFacadeDAO.setDialect(dbEngineDialect);
        dbFacadeDAO.setDbFacade(this);
    } else {
    // Set here session factory after merge
    }
    return dao;
}
#method_after
protected <T extends DAO> T getDao(Class<T> daoType) {
    T dao = DaoFactory.get(daoType);
    if (dao instanceof BaseDAODbFacade) {
        BaseDAODbFacade dbFacadeDAO = (BaseDAODbFacade) dao;
        dbFacadeDAO.setTemplate(jdbcTemplate);
        dbFacadeDAO.setDialect(dbEngineDialect);
        dbFacadeDAO.setDbFacade(this);
    }
    return dao;
}
#end_block

#method_before
public NGuid getEntityPermissionsForUserAndGroups(Guid userId, String groupIds, ActionGroup actionGroup, Guid objectId, VdcObjectType vdcObjectType) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("group_ids", groupIds).addValue("action_group_id", actionGroup.getId()).addValue("object_id", objectId).addValue("object_type_id", vdcObjectType.getValue());
    String resultKey = "permission_id";
    Map<String, Object> dbResults = new SimpleJdbcCall(jdbcTemplate).withProcedureName("get_entity_permissions_for_user_and_groups").declareParameters(new SqlOutParameter(resultKey, Types.VARCHAR)).execute(parameterSource);
    return dbResults.get(resultKey) != null ? new NGuid(dbResults.get(resultKey).toString()) : null;
}
#method_after
public NGuid getEntityPermissionsForUserAndGroups(Guid userId, String groupIds, ActionGroup actionGroup, Guid objectId, VdcObjectType vdcObjectType, boolean ignoreEveryone) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("group_ids", groupIds).addValue("action_group_id", actionGroup.getId()).addValue("object_id", objectId).addValue("object_type_id", vdcObjectType.getValue()).addValue("ignore_everyone", ignoreEveryone);
    String resultKey = "permission_id";
    Map<String, Object> dbResults = new SimpleJdbcCall(jdbcTemplate).withProcedureName("get_entity_permissions_for_user_and_groups").declareParameters(new SqlOutParameter(resultKey, Types.VARCHAR)).execute(parameterSource);
    return dbResults.get(resultKey) != null ? new NGuid(dbResults.get(resultKey).toString()) : null;
}
#end_block

#method_before
protected GlusterHookDao getGlusterHookDao() {
    return DbFacade.getInstance().getGlusterHookDao();
}
#method_after
protected GlusterHooksDao getGlusterHookDao() {
    return DbFacade.getInstance().getGlusterHooksDao();
}
#end_block

#method_before
public VDSReturnValue runVdsCommand(VDSCommandType commandType, VDSParametersBase parameters) throws VdcBLLException {
    VDSReturnValue returnValue = getBackendResourceManager().RunVdsCommand(commandType, parameters);
    if (!returnValue.getSucceeded()) {
        throw new VdcBLLException(returnValue.getVdsError().getCode(), returnValue.getVdsError().getMessage());
    }
    return returnValue;
}
#method_after
protected VDSReturnValue runVdsCommand(VDSCommandType commandType, VDSParametersBase parameters) throws VdcBLLException {
    VDSReturnValue returnValue = getBackendResourceManager().RunVdsCommand(commandType, parameters);
    if (!returnValue.getSucceeded()) {
        throw new VdcBLLException(returnValue.getVdsError().getCode(), returnValue.getVdsError().getMessage());
    }
    return returnValue;
}
#end_block

#method_before
@Override
public Guid getId() {
    return getId(true);
}
#method_after
@Override
public Guid getId() {
    return id;
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getId().hashCode();
    result = prime * result + ((clusterId == null) ? 0 : clusterId.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((glusterCommand == null) ? 0 : glusterCommand.hashCode());
    result = prime * result + ((level == null) ? 0 : level.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getId().hashCode();
    result = prime * result + ((clusterId == null) ? 0 : clusterId.hashCode());
    result = prime * result + ((glusterCommand == null) ? 0 : glusterCommand.hashCode());
    result = prime * result + ((stage == null) ? 0 : stage.hashCode());
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((contentType == null) ? 0 : contentType.hashCode());
    result = prime * result + ((conflictStatus == null) ? 0 : conflictStatus.hashCode());
    result = prime * result + ((checksum == null) ? 0 : checksum.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterHookEntity)) {
        return false;
    }
    GlusterHookEntity hook = (GlusterHookEntity) obj;
    if (!(getId().equals(hook.getId()) && clusterId.equals(hook.getClusterId()) && name.equals(hook.getName()) && glusterCommand.equals(hook.getGlusterCommand()) && level == hook.getLevel() && status == hook.getStatus())) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterHookEntity)) {
        return false;
    }
    GlusterHookEntity hook = (GlusterHookEntity) obj;
    if (!(ObjectUtils.objectsEqual(getId(), hook.getId()) && ObjectUtils.objectsEqual(clusterId, hook.getClusterId()) && ObjectUtils.objectsEqual(glusterCommand, hook.getGlusterCommand()) && stage == hook.getStage() && ObjectUtils.objectsEqual(name, hook.getName()) && contentType == hook.getContentType() && ObjectUtils.objectsEqual(conflictStatus, hook.getConflictStatus()) && ObjectUtils.objectsEqual(checksum, hook.getChecksum()) && status == hook.getStatus())) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected void populateRoles(List<Role> roles) {
    Role selectedRole = null;
    for (Role role : roles) {
        if (role.getId() != null) {
            // ignore CONSUME_QUOTA_ROLE in UI
            if (role.getId().equals(ApplicationGuids.quotaConsumer.asGuid())) {
                roles.remove(role);
            }
            // select engine user if it exists
            if (role.getId().equals(ApplicationGuids.engineUser.asGuid())) {
                selectedRole = role;
            }
        }
    }
    Collections.sort(roles, new Comparator<Role>() {

        @Override
        public int compare(Role left, Role right) {
            return left.getname().compareTo(right.getname());
        }
    });
    getRole().setItems(roles);
    if (selectedRole != null) {
        getRole().setSelectedItem(selectedRole);
    } else if (roles.size() > 0) {
        // if engine user does not exist, pick the first on the list
        getRole().setSelectedItem(roles.get(0));
    }
}
#method_after
protected void populateRoles(List<Role> roles) {
    Role selectedRole = null;
    for (Role role : roles) {
        if (role.getId() != null) {
            // ignore CONSUME_QUOTA_ROLE in UI
            if (role.getId().equals(ApplicationGuids.quotaConsumer.asGuid())) {
                roles.remove(role);
            }
            // select engine user if it exists
            if (role.getId().equals(ApplicationGuids.engineUser.asGuid())) {
                selectedRole = role;
            }
        }
    }
    Collections.sort(roles, new Linq.RoleNameComparer());
    getRole().setItems(roles);
    if (selectedRole != null) {
        getRole().setSelectedItem(selectedRole);
    } else if (roles.size() > 0) {
        // if engine user does not exist, pick the first on the list
        getRole().setSelectedItem(roles.get(0));
    }
}
#end_block

#method_before
private boolean validateBricks(List<GlusterBrickEntity> newBricks) {
    for (GlusterBrickEntity brick : newBricks) {
        GlusterBrickEntity existingBrick = getGlusterBrickDao().getBrickByServerIdAndDirectory(brick.getServerId(), brick.getBrickDirectory());
        if (existingBrick != null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICK_ALREADY_EXISTS_IN_VOLUME);
            addCanDoActionMessage(String.format("$brick %1$s", brick.getQualifiedName()));
            addCanDoActionMessage(String.format("$volumeName %1$s", getGlusterVolumeDao().getById(existingBrick.getVolumeId()).getName()));
            return false;
        }
    }
    return true;
}
#method_after
private boolean validateBricks(List<GlusterBrickEntity> newBricks) {
    Set<String> bricks = new HashSet<String>();
    for (GlusterBrickEntity brick : newBricks) {
        if (bricks.contains(brick.getQualifiedName())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DUPLICATE_BRICKS);
            addCanDoActionMessage(String.format("$brick %1$s", brick.getQualifiedName()));
            return false;
        }
        bricks.add(brick.getQualifiedName());
        GlusterBrickEntity existingBrick = getGlusterBrickDao().getBrickByServerIdAndDirectory(brick.getServerId(), brick.getBrickDirectory());
        if (existingBrick != null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICK_ALREADY_EXISTS_IN_VOLUME);
            addCanDoActionMessage(String.format("$brick %1$s", brick.getQualifiedName()));
            addCanDoActionMessage(String.format("$volumeName %1$s", getGlusterVolumeDao().getById(existingBrick.getVolumeId()).getName()));
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Test
public void testGetBrickByServerIdAndDirectory() {
    GlusterBrickEntity brick = dao.getBrickByServerIdAndDirectory(BRICK_SERVER_ID, BRICK_DIRECTORY);
    assertNotNull(brick);
}
#method_after
@Test
public void testGetBrickByServerIdAndDirectory() {
    GlusterBrickEntity brick = dao.getBrickByServerIdAndDirectory(BRICK_SERVER_ID, BRICK_DIRECTORY);
    assertNotNull(brick);
    assertEquals(brick.getServerId(), BRICK_SERVER_ID);
    assertEquals(brick.getBrickDirectory(), BRICK_DIRECTORY);
}
#end_block

#method_before
private List<GlusterBrickEntity> getBricks(Guid volumeId, int max) {
    List<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    GlusterBrickEntity brick;
    for (Integer i = 0; i < max; i++) {
        brick = new GlusterBrickEntity(volumeId, new VdsStatic(serverName, "127.0.0.1", "0934390834", 20, new Guid(), serverId, serverName, true, VDSType.oVirtNode), "/tmp/s" + i.toString(), GlusterStatus.UP);
        bricks.add(brick);
    }
    return bricks;
}
#method_after
private List<GlusterBrickEntity> getBricks(Guid volumeId, int max) {
    return getBricks(volumeId, max, false);
}
#end_block

#method_before
private List<GlusterBrickEntity> getBricks(Guid volumeId, int max) {
    List<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    GlusterBrickEntity brick;
    for (Integer i = 0; i < max; i++) {
        brick = new GlusterBrickEntity(volumeId, new VdsStatic(serverName, "127.0.0.1", "0934390834", 20, new Guid(), serverId, serverName, true, VDSType.oVirtNode), "/tmp/s" + i.toString(), GlusterStatus.UP);
        bricks.add(brick);
    }
    return bricks;
}
#method_after
private List<GlusterBrickEntity> getBricks(Guid volumeId, int max, boolean withDuplicates) {
    List<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    GlusterBrickEntity brick = null;
    for (Integer i = 0; i < max; i++) {
        brick = new GlusterBrickEntity(volumeId, new VdsStatic(serverName, "127.0.0.1", "0934390834", 20, new Guid(), serverId, serverName, true, VDSType.oVirtNode), "/tmp/s" + i.toString(), GlusterStatus.UP);
        bricks.add(brick);
    }
    if (max > 0 && withDuplicates) {
        bricks.add(brick);
    }
    return bricks;
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.equals(RegistrationResult.RetrievedEventDefinition)) {
        AsyncResult_Retrieved();
    }
    if (ev.equals(ProvideTickEvent.Definition)) {
        SyncSearch();
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(RegistrationResult.RetrievedEventDefinition)) {
        AsyncResult_Retrieved();
    }
    if (ev.matchesDefinition(ProvideTickEvent.Definition)) {
        SyncSearch();
    }
}
#end_block

#method_before
private void SetSearchStringPage(int newSearchPageNumber) {
    if (Regex.IsMatch(getSearchString(), PAGE_STRING_REGEX, RegexOptions.IgnoreCase)) {
        setSearchString(Regex.replace(getSearchString(), PAGE_STRING_REGEX, // $NON-NLS-1$
        StringFormat.format(" page %1$s", newSearchPageNumber)));
    } else {
        // $NON-NLS-1$
        setSearchString(StringFormat.format("%1$s page %2$s", getSearchString(), newSearchPageNumber));
    }
}
#method_after
private void SetSearchStringPage(int newSearchPageNumber) {
    if (Regex.IsMatch(getSearchString(), PAGE_STRING_REGEX, RegexOptions.IgnoreCase)) {
        setSearchString(Regex.replace(getSearchString(), PAGE_STRING_REGEX, // $NON-NLS-1$
        " page " + newSearchPageNumber));
    } else {
        // $NON-NLS-1$
        setSearchString(getSearchString() + " page " + newSearchPageNumber);
    }
}
#end_block

#method_before
public void EnsureAsyncSearchStopped() {
    getTimer().stop();
    if (getAsyncResult() != null && !getAsyncResult().getId().equals(NGuid.Empty)) {
        Frontend.UnregisterQuery(getAsyncResult().getId());
        setAsyncResult(null);
    }
}
#method_after
public void EnsureAsyncSearchStopped() {
    getTimer().stop();
    if (getAsyncResult() != null && !getAsyncResult().getId().equals(NGuid.Empty)) {
        setAsyncResult(null);
    }
}
#end_block

#method_before
public UICommand getEditCommand() {
    return null;
}
#method_after
public UICommand getEditCommand() {
    // implement the edit command.
    return null;
}
#end_block

#method_before
protected void AddVmTemplateImages() {
    Guid vmSnapshotId = Guid.NewGuid();
    for (DiskImage diskImage : mImages) {
        CreateImageTemplateParameters createParams = new CreateImageTemplateParameters(diskImage.getImageId(), getVmTemplateId(), getVmTemplateName(), getVmId());
        createParams.setStorageDomainId(diskImage.getStorageIds().get(0));
        createParams.setVmSnapshotId(vmSnapshotId);
        createParams.setEntityId(getParameters().getEntityId());
        createParams.setDestinationStorageDomainId(diskInfoDestinationMap.get(diskImage.getId()).getStorageIds().get(0));
        createParams.setDiskAlias(diskInfoDestinationMap.get(diskImage.getId()).getDiskAlias());
        createParams.setParentParameters(getParameters());
        if (getParameters().getDiskInfoDestinationMap() != null && getParameters().getDiskInfoDestinationMap().get(diskImage.getId()) != null) {
            createParams.setQuotaId(getParameters().getDiskInfoDestinationMap().get(diskImage.getId()).getQuotaId() != null ? getParameters().getDiskInfoDestinationMap().get(diskImage.getId()).getQuotaId() : null);
        } else {
            createParams.setQuotaId(diskImage.getQuotaId());
        }
        // The return value of this action is the 'copyImage' task GUID:
        VdcReturnValueBase retValue = Backend.getInstance().runInternalAction(VdcActionType.CreateImageTemplate, createParams, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (!retValue.getSucceeded()) {
            throw new VdcBLLException(retValue.getFault().getError(), retValue.getFault().getMessage());
        }
        getReturnValue().getTaskIdList().addAll(retValue.getInternalTaskIdList());
        newDiskImages.add((DiskImage) retValue.getActionReturnValue());
    }
}
#method_after
protected void AddVmTemplateImages() {
    Guid vmSnapshotId = Guid.NewGuid();
    for (DiskImage diskImage : mImages) {
        CreateImageTemplateParameters createParams = new CreateImageTemplateParameters(diskImage.getImageId(), getVmTemplateId(), getVmTemplateName(), getVmId());
        createParams.setStorageDomainId(diskImage.getStorageIds().get(0));
        createParams.setVmSnapshotId(vmSnapshotId);
        createParams.setEntityId(getParameters().getEntityId());
        createParams.setDestinationStorageDomainId(diskInfoDestinationMap.get(diskImage.getId()).getStorageIds().get(0));
        createParams.setDiskAlias(diskInfoDestinationMap.get(diskImage.getId()).getDiskAlias());
        createParams.setParentParameters(getParameters());
        createParams.setQuotaId(getQuotaIdForDisk(diskImage));
        // The return value of this action is the 'copyImage' task GUID:
        VdcReturnValueBase retValue = Backend.getInstance().runInternalAction(VdcActionType.CreateImageTemplate, createParams, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
        if (!retValue.getSucceeded()) {
            throw new VdcBLLException(retValue.getFault().getError(), retValue.getFault().getMessage());
        }
        getReturnValue().getTaskIdList().addAll(retValue.getInternalTaskIdList());
        newDiskImages.add((DiskImage) retValue.getActionReturnValue());
    }
}
#end_block

#method_before
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    Collection<DiskImage> disksList = diskInfoDestinationMap.values().size() > 0 ? diskInfoDestinationMap.values() : getVm().getDiskList();
    for (DiskImage disk : disksList) {
        list.add(new QuotaStorageConsumptionParameter(disk.getQuotaId(), null, QuotaStorageConsumptionParameter.QuotaAction.CONSUME, disk.getStorageIds().get(0), (double) disk.getSizeInGigabytes()));
    }
    return list;
}
#method_after
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    for (DiskImage disk : getVm().getDiskList()) {
        list.add(new QuotaStorageConsumptionParameter(getQuotaIdForDisk(disk), null, QuotaStorageConsumptionParameter.QuotaAction.CONSUME, disk.getStorageIds().get(0), (double) disk.getSizeInGigabytes()));
    }
    return list;
}
#end_block

#method_before
public void PostVmNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    gettempVm().setVmType(model.getVmType());
    gettempVm().setVmtGuid(template.getId());
    gettempVm().setName(name);
    gettempVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    gettempVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    gettempVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    gettempVm().setVmDescription((String) model.getDescription().getEntity());
    gettempVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    gettempVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    gettempVm().setVdsGroupId(newClusterID);
    gettempVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    gettempVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    gettempVm().setAutoSuspend(false);
    gettempVm().setStateless((Boolean) model.getIsStateless().getEntity());
    gettempVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    gettempVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    gettempVm().setDefaultBootSequence(model.getBootSequence());
    gettempVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    gettempVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    gettempVm().setKernelUrl((String) model.getKernel_path().getEntity());
    gettempVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    gettempVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    gettempVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    gettempVm().setPriority((Integer) prioritySelectedItem.getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        gettempVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    gettempVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        gettempVm().setDedicatedVmForVds(null);
    } else {
        gettempVm().setDedicatedVmForVds(defaultHost.getId());
    }
    gettempVm().setMigrationSupport((MigrationSupport) ((EntityModel) (model.getMigrationMode().getSelectedItem())).getEntity());
    if (model.getIsNew()) {
        if (gettempVm().getVmtGuid().equals(NGuid.Empty)) {
            AddVmFromScratchParameters parameters = new AddVmFromScratchParameters(gettempVm(), new ArrayList<DiskImage>(), NGuid.Empty);
            parameters.setMakeCreatorExplicitOwner(true);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    stopProgress(result.getState());
                    cancel();
                }
            }, this);
        } else {
            setstorageDomain((StorageDomain) model.getStorageDomain().getSelectedItem());
            if ((Boolean) model.getProvisioning().getEntity()) {
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model, Object result) {
                        UserPortalListModel userPortalListModel1 = (UserPortalListModel) model;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result;
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : ((UnitVmModel) userPortalListModel1.getWindow()).getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            if (disk != null) {
                                templateDisk.setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                templateDisk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), getstorageDomain().getStorageType()));
                            }
                        }
                        HashMap<Guid, DiskImage> dict = new HashMap<Guid, DiskImage>();
                        for (DiskImage a : templateDisks) {
                            dict.put(a.getId(), a);
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(gettempVm(), dict, getstorageDomain().getId());
                        param.setMakeCreatorExplicitOwner(true);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult a) {
                                stopProgress(a.getState());
                                cancel();
                            }
                        }, this);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                VmManagementParametersBase param = new VmManagementParametersBase(gettempVm());
                param.setStorageDomainId(getstorageDomain().getId());
                param.setMakeCreatorExplicitOwner(true);
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(param);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult a) {
                        stopProgress(a.getState());
                        cancel();
                    }
                }, this);
            }
        }
    } else {
        Guid oldClusterID = ((VM) selectedItem.getEntity()).getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            Frontend.RunAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(newClusterID, gettempVm().getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult a) {
                            stopProgress(a.getState());
                            cancel();
                        }
                    }, this);
                }
            }, this);
        } else {
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult a) {
                    stopProgress(a.getState());
                    cancel();
                }
            }, this);
        }
    }
}
#method_after
public void PostVmNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    gettempVm().setVmType(model.getVmType());
    gettempVm().setVmtGuid(template.getId());
    gettempVm().setName(name);
    gettempVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    gettempVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    gettempVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    gettempVm().setVmDescription((String) model.getDescription().getEntity());
    gettempVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    gettempVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    gettempVm().setVdsGroupId(newClusterID);
    gettempVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    gettempVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    gettempVm().setAutoSuspend(false);
    gettempVm().setStateless((Boolean) model.getIsStateless().getEntity());
    gettempVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    gettempVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    gettempVm().setDefaultBootSequence(model.getBootSequence());
    gettempVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    gettempVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    gettempVm().setKernelUrl((String) model.getKernel_path().getEntity());
    gettempVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    gettempVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    gettempVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    gettempVm().setPriority((Integer) prioritySelectedItem.getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        gettempVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    gettempVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        gettempVm().setDedicatedVmForVds(null);
    } else {
        gettempVm().setDedicatedVmForVds(defaultHost.getId());
    }
    gettempVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    if (model.getIsNew()) {
        if (gettempVm().getVmtGuid().equals(NGuid.Empty)) {
            AddVmFromScratchParameters parameters = new AddVmFromScratchParameters(gettempVm(), new ArrayList<DiskImage>(), NGuid.Empty);
            parameters.setMakeCreatorExplicitOwner(true);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    stopProgress(result.getState());
                    cancel();
                }
            }, this);
        } else {
            setstorageDomain((StorageDomain) model.getStorageDomain().getSelectedItem());
            if ((Boolean) model.getProvisioning().getEntity()) {
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model, Object result) {
                        UserPortalListModel userPortalListModel1 = (UserPortalListModel) model;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result;
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : ((UnitVmModel) userPortalListModel1.getWindow()).getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            if (disk != null) {
                                templateDisk.setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                templateDisk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), getstorageDomain().getStorageType()));
                            }
                        }
                        HashMap<Guid, DiskImage> dict = new HashMap<Guid, DiskImage>();
                        for (DiskImage a : templateDisks) {
                            dict.put(a.getId(), a);
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(gettempVm(), dict, getstorageDomain().getId());
                        param.setMakeCreatorExplicitOwner(true);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult a) {
                                stopProgress(a.getState());
                                cancel();
                            }
                        }, this);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                VmManagementParametersBase param = new VmManagementParametersBase(gettempVm());
                param.setStorageDomainId(getstorageDomain().getId());
                param.setMakeCreatorExplicitOwner(true);
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(param);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult a) {
                        stopProgress(a.getState());
                        cancel();
                    }
                }, this);
            }
        }
    } else {
        Guid oldClusterID = ((VM) selectedItem.getEntity()).getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            Frontend.RunAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(newClusterID, gettempVm().getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult a) {
                            stopProgress(a.getState());
                            cancel();
                        }
                    }, this);
                }
            }, this);
        } else {
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult a) {
                    stopProgress(a.getState());
                    cancel();
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport((MigrationSupport) ((EntityModel) (model.getMigrationMode().getSelectedItem())).getEntity());
    getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                if (retVal != null && retVal.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#method_after
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                if (retVal != null && retVal.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void initMigrationMode() {
    ArrayList<EntityModel> migrationModes = new ArrayList<EntityModel>();
    Constants constants = ConstantsManager.getInstance().getConstants();
    migrationModes.add(new EntityModel(constants.autoAndManMigration(), MigrationSupport.MIGRATABLE));
    migrationModes.add(new EntityModel(constants.manualMigrationOnly(), MigrationSupport.IMPLICITLY_NON_MIGRATABLE));
    migrationModes.add(new EntityModel(constants.noMigration(), MigrationSupport.PINNED_TO_HOST));
    getMigrationMode().setItems(migrationModes);
    getDisplayProtocol().getSelectedItemChangedEvent().addListener(this);
}
#method_after
private void initMigrationMode() {
    getMigrationMode().setItems(Arrays.asList(MigrationSupport.values()));
}
#end_block

#method_before
private void MigrationMode_EntityChanged(Object sender, EventArgs args) {
    if (MigrationSupport.PINNED_TO_HOST == ((EntityModel) (getMigrationMode().getSelectedItem())).getEntity()) {
        getHostCpu().setIsChangable(true);
    } else {
        getHostCpu().setEntity(false);
        getHostCpu().setIsChangable(false);
    }
    behavior.updateCpuPinningVisibility();
}
#method_after
private void MigrationMode_EntityChanged(Object sender, EventArgs args) {
    if (MigrationSupport.PINNED_TO_HOST == getMigrationMode().getSelectedItem()) {
        getHostCpu().setIsChangable(true);
    } else {
        getHostCpu().setEntity(false);
        getHostCpu().setIsChangable(false);
    }
    behavior.updateCpuPinningVisibility();
}
#end_block

#method_before
public void setMigrationMode(MigrationSupport value) {
    for (Object migrationModeEntityModel : getMigrationMode().getItems()) {
        if (((EntityModel) migrationModeEntityModel).getEntity() == value) {
            getMigrationMode().setSelectedItem(migrationModeEntityModel);
            break;
        }
    }
}
#method_after
public void setMigrationMode(MigrationSupport value) {
    getMigrationMode().setSelectedItem(value);
}
#end_block

#method_before
public void PostNameUniqueCheck(boolean isNameUnique) {
    UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem = (VmTemplate) getSelectedItem();
    VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!isNameUnique && name.compareToIgnoreCase(template.getName()) != 0) {
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.getName().setIsValid(false);
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    template.setVmType(model.getVmType());
    template.setName(name);
    template.setOs((VmOsType) model.getOSType().getSelectedItem());
    template.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    template.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    template.setDescription((String) model.getDescription().getEntity());
    // $NON-NLS-1$
    template.setDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    template.setMemSizeMb((Integer) model.getMemSize().getEntity());
    template.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    template.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    template.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    template.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    template.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    template.setAutoSuspend(false);
    template.setStateless((Boolean) model.getIsStateless().getEntity());
    template.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    template.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    template.setDefaultBootSequence(model.getBootSequence());
    // $NON-NLS-1$
    template.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    template.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    template.setKernelUrl((String) model.getKernel_path().getEntity());
    template.setKernelParams((String) model.getKernel_parameters().getEntity());
    template.setInitrdUrl((String) model.getInitrd_path().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        template.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    template.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    template.setPriority((Integer) prioritySelectedItem.getEntity());
    // host migration configuration
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        template.setDedicatedVmForVds(null);
    } else {
        template.setDedicatedVmForVds(defaultHost.getId());
    }
    template.setMigrationSupport((MigrationSupport) ((EntityModel) (model.getMigrationMode().getSelectedItem())).getEntity());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.UpdateVmTemplate, new UpdateVmTemplateParameters(template), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            TemplateListModel localModel = (TemplateListModel) result.getState();
            localModel.PostUpdateVmTemplate(result.getReturnValue());
        }
    }, this);
}
#method_after
public void PostNameUniqueCheck(boolean isNameUnique) {
    UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem = (VmTemplate) getSelectedItem();
    VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    String name = (String) model.getName().getEntity();
    // Check name unicitate.
    if (!isNameUnique && name.compareToIgnoreCase(template.getName()) != 0) {
        model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
        model.getName().setIsValid(false);
        model.setIsGeneralTabValid(false);
        return;
    }
    // Save changes.
    template.setVmType(model.getVmType());
    template.setName(name);
    template.setOs((VmOsType) model.getOSType().getSelectedItem());
    template.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    template.setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    template.setDescription((String) model.getDescription().getEntity());
    // $NON-NLS-1$
    template.setDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : "");
    template.setMemSizeMb((Integer) model.getMemSize().getEntity());
    template.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    template.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    template.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    template.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    template.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    template.setAutoSuspend(false);
    template.setStateless((Boolean) model.getIsStateless().getEntity());
    template.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    template.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    template.setDefaultBootSequence(model.getBootSequence());
    // $NON-NLS-1$
    template.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : "");
    template.setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    template.setKernelUrl((String) model.getKernel_path().getEntity());
    template.setKernelParams((String) model.getKernel_parameters().getEntity());
    template.setInitrdUrl((String) model.getInitrd_path().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        template.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    template.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    template.setPriority((Integer) prioritySelectedItem.getEntity());
    // host migration configuration
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        template.setDedicatedVmForVds(null);
    } else {
        template.setDedicatedVmForVds(defaultHost.getId());
    }
    template.setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.UpdateVmTemplate, new UpdateVmTemplateParameters(template), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            TemplateListModel localModel = (TemplateListModel) result.getState();
            localModel.PostUpdateVmTemplate(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
public void OnSave() {
    final PoolModel model = (PoolModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.getIsNew() && getSelectedItem() == null) {
        Cancel();
        return;
    }
    if (!model.Validate()) {
        return;
    }
    final VmPool pool = model.getIsNew() ? new VmPool() : (VmPool) Cloner.clone(getSelectedItem());
    final String name = (String) model.getName().getEntity();
    // Check name unicitate.
    AsyncDataProvider.IsPoolNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Boolean isUnique = (Boolean) returnValue;
            if ((model.getIsNew() && !isUnique) || (!model.getIsNew() && !isUnique && name.compareToIgnoreCase(pool.getName()) != 0)) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setIsGeneralTabValid(false);
                return;
            }
            // Save changes.
            pool.setName((String) model.getName().getEntity());
            pool.setVmPoolDescription((String) model.getDescription().getEntity());
            pool.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
            pool.setPrestartedVms(model.getPrestartedVms().AsConvertible().Integer());
            EntityModel poolTypeSelectedItem = (EntityModel) model.getPoolType().getSelectedItem();
            pool.setVmPoolType((VmPoolType) poolTypeSelectedItem.getEntity());
            NGuid default_host;
            VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
            if ((Boolean) model.getIsAutoAssign().getEntity()) {
                default_host = null;
            } else {
                default_host = defaultHost.getId();
            }
            MigrationSupport migrationSupport = (MigrationSupport) ((EntityModel) (model.getMigrationMode().getSelectedItem())).getEntity();
            VM desktop = new VM();
            desktop.setVmtGuid(((VmTemplate) model.getTemplate().getSelectedItem()).getId());
            desktop.setName(name);
            desktop.setVmOs((VmOsType) model.getOSType().getSelectedItem());
            desktop.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
            desktop.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
            desktop.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
            desktop.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
            "");
            desktop.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
            desktop.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
            desktop.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
            desktop.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
            "");
            desktop.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
            desktop.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
            desktop.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
            desktop.setAutoSuspend(false);
            desktop.setStateless(false);
            desktop.setDefaultBootSequence(model.getBootSequence());
            desktop.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
            "");
            desktop.setDedicatedVmForVds(default_host);
            desktop.setKernelUrl((String) model.getKernel_path().getEntity());
            desktop.setKernelParams((String) model.getKernel_parameters().getEntity());
            desktop.setInitrdUrl((String) model.getInitrd_path().getEntity());
            desktop.setMigrationSupport(migrationSupport);
            EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
            desktop.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
            desktop.setCustomProperties(model.getCustomPropertySheet().getEntity());
            AddVmPoolWithVmsParameters param = new AddVmPoolWithVmsParameters(pool, desktop, model.getNumOfDesktops().AsConvertible().Integer(), 0);
            param.setStorageDomainId(Guid.Empty);
            param.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
            if (model.getQuota().getSelectedItem() != null) {
                desktop.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            model.StartProgress(null);
            if (model.getIsNew()) {
                Frontend.RunMultipleAction(VdcActionType.AddVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        Cancel();
                        StopProgress();
                    }
                }, this);
            } else {
                Frontend.RunMultipleAction(VdcActionType.UpdateVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        Cancel();
                        StopProgress();
                    }
                }, this);
            }
        }
    }), name);
}
#method_after
public void OnSave() {
    final PoolModel model = (PoolModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.getIsNew() && getSelectedItem() == null) {
        Cancel();
        return;
    }
    if (!model.Validate()) {
        return;
    }
    final VmPool pool = model.getIsNew() ? new VmPool() : (VmPool) Cloner.clone(getSelectedItem());
    final String name = (String) model.getName().getEntity();
    // Check name unicitate.
    AsyncDataProvider.IsPoolNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Boolean isUnique = (Boolean) returnValue;
            if ((model.getIsNew() && !isUnique) || (!model.getIsNew() && !isUnique && name.compareToIgnoreCase(pool.getName()) != 0)) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setIsGeneralTabValid(false);
                return;
            }
            // Save changes.
            pool.setName((String) model.getName().getEntity());
            pool.setVmPoolDescription((String) model.getDescription().getEntity());
            pool.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
            pool.setPrestartedVms(model.getPrestartedVms().AsConvertible().Integer());
            EntityModel poolTypeSelectedItem = (EntityModel) model.getPoolType().getSelectedItem();
            pool.setVmPoolType((VmPoolType) poolTypeSelectedItem.getEntity());
            NGuid default_host;
            VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
            if ((Boolean) model.getIsAutoAssign().getEntity()) {
                default_host = null;
            } else {
                default_host = defaultHost.getId();
            }
            VM desktop = new VM();
            desktop.setVmtGuid(((VmTemplate) model.getTemplate().getSelectedItem()).getId());
            desktop.setName(name);
            desktop.setVmOs((VmOsType) model.getOSType().getSelectedItem());
            desktop.setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
            desktop.setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
            desktop.setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
            desktop.setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
            "");
            desktop.setVmMemSizeMb((Integer) model.getMemSize().getEntity());
            desktop.setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
            desktop.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
            desktop.setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
            "");
            desktop.setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
            desktop.setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
            desktop.setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
            desktop.setAutoSuspend(false);
            desktop.setStateless(false);
            desktop.setDefaultBootSequence(model.getBootSequence());
            desktop.setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
            "");
            desktop.setDedicatedVmForVds(default_host);
            desktop.setKernelUrl((String) model.getKernel_path().getEntity());
            desktop.setKernelParams((String) model.getKernel_parameters().getEntity());
            desktop.setInitrdUrl((String) model.getInitrd_path().getEntity());
            desktop.setMigrationSupport((MigrationSupport) (model.getMigrationMode().getSelectedItem()));
            EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
            desktop.setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
            desktop.setCustomProperties(model.getCustomPropertySheet().getEntity());
            AddVmPoolWithVmsParameters param = new AddVmPoolWithVmsParameters(pool, desktop, model.getNumOfDesktops().AsConvertible().Integer(), 0);
            param.setStorageDomainId(Guid.Empty);
            param.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
            if (model.getQuota().getSelectedItem() != null) {
                desktop.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            model.StartProgress(null);
            if (model.getIsNew()) {
                Frontend.RunMultipleAction(VdcActionType.AddVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        Cancel();
                        StopProgress();
                    }
                }, this);
            } else {
                Frontend.RunMultipleAction(VdcActionType.UpdateVmPoolWithVms, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { param })), new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        Cancel();
                        StopProgress();
                    }
                }, this);
            }
        }
    }), name);
}
#end_block

#method_before
private boolean isVmMigratable() {
    return ((EntityModel) getModel().getMigrationMode().getSelectedItem()).getEntity() != MigrationSupport.PINNED_TO_HOST;
}
#method_after
private boolean isVmMigratable() {
    return getModel().getMigrationMode().getSelectedItem() != MigrationSupport.PINNED_TO_HOST;
}
#end_block

#method_before
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((storage_pool) object).getname();
        }
    });
    clusterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDSGroup) object).getname();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    templateEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VmTemplate) object).getName();
        }
    });
    oSTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    timeZoneEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Entry<String, String>) object).getValue();
        }
    });
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    usbSupportEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    // $NON-NLS-1$
    isAutoAssignEditor = new EntityModelRadioButtonEditor("runVmOnHostGroup");
    defaultHostEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getName();
        }
    });
    migrationModeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Resource Allocation
    // $NON-NLS-1$
    provisioningThinEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // $NON-NLS-1$
    provisioningCloneEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    secondBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    cdImageEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return (String) object;
        }
    });
}
#method_after
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((storage_pool) object).getname();
        }
    });
    clusterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDSGroup) object).getname();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    templateEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VmTemplate) object).getName();
        }
    });
    oSTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    timeZoneEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Entry<String, String>) object).getValue();
        }
    });
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    usbSupportEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    // $NON-NLS-1$
    isAutoAssignEditor = new EntityModelRadioButtonEditor("runVmOnHostGroup");
    defaultHostEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getName();
        }
    });
    migrationModeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Resource Allocation
    // $NON-NLS-1$
    provisioningThinEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // $NON-NLS-1$
    provisioningCloneEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    secondBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    cdImageEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return (String) object;
        }
    });
}
#end_block

#method_before
private void OnCloneVM() {
    UnitVmModel model = (UnitVmModel) getWindow();
    CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        Cancel();
        return;
    }
    if (!model.Validate()) {
        return;
    }
    setcurrentVm(behavior.getVm());
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties((String) model.getCustomProperties().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    getcurrentVm().setDedicatedVmForVds((Boolean) model.getIsAutoAssign().getEntity() ? null : defaultHost.getId());
    getcurrentVm().setMigrationSupport((MigrationSupport) ((EntityModel) (model.getMigrationMode().getSelectedItem())).getEntity());
    getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    getcurrentVm().setDiskMap(behavior.getVm().getDiskMap());
    HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
    ArrayList<DiskImage> diskInfoList = CreateDiskInfoList();
    AddVmFromSnapshotParameters parameters = new AddVmFromSnapshotParameters(getcurrentVm().getStaticData(), snapshot.getId());
    parameters.setDiskInfoDestinationMap(imageToDestinationDomainMap);
    setupAddVmFromSnapshotParameters(parameters);
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVmFromSnapshot, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) result.getState();
            vmSnapshotListModel.getWindow().StopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmSnapshotListModel.Cancel();
                vmSnapshotListModel.UpdateActionAvailability();
            }
        }
    }, this);
}
#method_after
private void OnCloneVM() {
    UnitVmModel model = (UnitVmModel) getWindow();
    CloneVmFromSnapshotModelBehavior behavior = (CloneVmFromSnapshotModelBehavior) model.getBehavior();
    Snapshot snapshot = (Snapshot) getSelectedItem();
    if (snapshot == null) {
        Cancel();
        return;
    }
    if (!model.Validate()) {
        return;
    }
    setcurrentVm(behavior.getVm());
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties((String) model.getCustomProperties().getEntity());
    if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    getcurrentVm().setDedicatedVmForVds((Boolean) model.getIsAutoAssign().getEntity() ? null : defaultHost.getId());
    getcurrentVm().setMigrationSupport((MigrationSupport) model.getMigrationMode().getSelectedItem());
    getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    getcurrentVm().setDiskMap(behavior.getVm().getDiskMap());
    HashMap<Guid, DiskImage> imageToDestinationDomainMap = model.getDisksAllocationModel().getImageToDestinationDomainMap();
    ArrayList<DiskImage> diskInfoList = CreateDiskInfoList();
    AddVmFromSnapshotParameters parameters = new AddVmFromSnapshotParameters(getcurrentVm().getStaticData(), snapshot.getId());
    parameters.setDiskInfoDestinationMap(imageToDestinationDomainMap);
    setupAddVmFromSnapshotParameters(parameters);
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVmFromSnapshot, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmSnapshotListModel vmSnapshotListModel = (VmSnapshotListModel) result.getState();
            vmSnapshotListModel.getWindow().StopProgress();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                vmSnapshotListModel.Cancel();
                vmSnapshotListModel.UpdateActionAvailability();
            }
        }
    }, this);
}
#end_block

#method_before
private void checkConnection() throws SQLException {
    Statement statement = null;
    try {
        statement = connection.createStatement();
        @SuppressWarnings("unused")
        ResultSet r = statement.executeQuery("select null");
    } finally {
        if (statement != null) {
            statement.close();
        }
    }
}
#method_after
private void checkConnection() throws SQLException {
    if (!connection.isValid(0)) {
        throw new SQLException("The connection has been closed or invalid.");
    }
}
#end_block

#method_before
private FutureTask<EventResult> submitTaskInternal(Event event, Callable<EventResult> callable) {
    FutureTask<EventResult> task = null;
    Guid storagePoolId = event.getStoragePoolId();
    ReentrantLock lock = getPoolLock(storagePoolId);
    lock.lock();
    try {
        Event currentEvent = poolCurrentEventMap.get(storagePoolId);
        if (currentEvent != null) {
            switch(currentEvent.getEventType()) {
                case RECOVERY:
                    if (event.getEventType() == EventType.VDSCONNECTTOPOOL || event.getEventType() == EventType.DOMAINFAILOVER) {
                        task = addTaskToQueue(event, callable, storagePoolId, isEventShouldBeFirst(event));
                    } else {
                        log.debugFormat("Current event was skiped because of recovery is running now for pool {0}, event {1}", storagePoolId, event);
                    }
                    break;
                case RECONSTRUCT:
                    if (event.getEventType() == EventType.VDSCONNECTTOPOOL || event.getEventType() == EventType.RECOVERY || event.getEventType() == EventType.DOMAINFAILOVER) {
                        task = addTaskToQueue(event, callable, storagePoolId, isEventShouldBeFirst(event));
                    } else {
                        log.debugFormat("Current event was skiped because of reconstruct is running now for pool {0}, event {1}", storagePoolId, event);
                    }
                    break;
                default:
                    task = addTaskToQueue(event, callable, storagePoolId, isEventShouldBeFirst(event));
                    break;
            }
        } else {
            task = addTaskToQueue(event, callable, storagePoolId, false);
            poolCurrentEventMap.put(storagePoolId, event);
            ThreadPoolUtil.execute(new InternalEventQueueThread(storagePoolId, lock, poolsEventsMap, poolCurrentEventMap));
        }
    } finally {
        lock.unlock();
    }
    return task;
}
#method_after
private FutureTask<EventResult> submitTaskInternal(Event event, Callable<EventResult> callable) {
    FutureTask<EventResult> task = null;
    Guid storagePoolId = event.getStoragePoolId();
    ReentrantLock lock = getPoolLock(storagePoolId);
    lock.lock();
    try {
        Event currentEvent = poolCurrentEventMap.get(storagePoolId);
        if (currentEvent != null) {
            switch(currentEvent.getEventType()) {
                case RECOVERY:
                    if (event.getEventType() == EventType.VDSCONNECTTOPOOL || event.getEventType() == EventType.VDSCLEARCACHE || event.getEventType() == EventType.DOMAINFAILOVER) {
                        task = addTaskToQueue(event, callable, storagePoolId, isEventShouldBeFirst(event));
                    } else {
                        log.debugFormat("Current event was skiped because of recovery is running now for pool {0}, event {1}", storagePoolId, event);
                    }
                    break;
                case RECONSTRUCT:
                    if (event.getEventType() == EventType.VDSCONNECTTOPOOL || event.getEventType() == EventType.RECOVERY || event.getEventType() == EventType.DOMAINFAILOVER || event.getEventType() == EventType.VDSCLEARCACHE) {
                        task = addTaskToQueue(event, callable, storagePoolId, isEventShouldBeFirst(event));
                    } else {
                        log.debugFormat("Current event was skiped because of reconstruct is running now for pool {0}, event {1}", storagePoolId, event);
                    }
                    break;
                default:
                    task = addTaskToQueue(event, callable, storagePoolId, isEventShouldBeFirst(event));
                    break;
            }
        } else {
            task = addTaskToQueue(event, callable, storagePoolId, false);
            poolCurrentEventMap.put(storagePoolId, event);
            ThreadPoolUtil.execute(new InternalEventQueueThread(storagePoolId, lock, poolsEventsMap, poolCurrentEventMap));
        }
    } finally {
        lock.unlock();
    }
    return task;
}
#end_block

#method_before
@Override
public void run() {
    while (true) {
        Pair<Event, FutureTask<EventResult>> pair;
        lock.lock();
        try {
            pair = poolsEventsMap.get(storagePoolId).poll();
            if (pair != null) {
                poolCurrentEventMap.put(storagePoolId, pair.getFirst());
            } else {
                poolCurrentEventMap.remove(storagePoolId);
                poolsEventsMap.remove(storagePoolId);
                log.debugFormat("All task for event query were executed pool {0}", storagePoolId);
                break;
            }
        } finally {
            lock.unlock();
        }
        Future<EventResult> futureResult = ThreadPoolUtil.execute(pair.getSecond());
        try {
            if (futureResult.get() == null) {
                EventResult result = pair.getSecond().get();
                if (result != null && result.getEventType() == EventType.RECONSTRUCT) {
                    log.infoFormat("Finished reconstruct for pool {0}. Clearing event queue", storagePoolId);
                    lock.lock();
                    try {
                        LinkedList<Pair<Event, FutureTask<EventResult>>> queue = new LinkedList<Pair<Event, FutureTask<EventResult>>>();
                        for (Pair<Event, FutureTask<EventResult>> task : poolsEventsMap.get(storagePoolId)) {
                            EventType eventType = task.getFirst().getEventType();
                            if (eventType == EventType.VDSCONNECTTOPOOL || ((eventType == EventType.RECOVERY || eventType == EventType.DOMAINFAILOVER) && !result.isSuccess())) {
                                queue.add(task);
                            } else {
                                log.infoFormat("The following operation {0} was cancelled, because of recosntruct was run before", task.getFirst());
                                task.getSecond().cancel(true);
                            }
                        }
                        if (queue.isEmpty()) {
                            poolCurrentEventMap.remove(storagePoolId);
                            poolsEventsMap.remove(storagePoolId);
                            break;
                        } else {
                            poolsEventsMap.put(storagePoolId, queue);
                        }
                    } finally {
                        lock.unlock();
                    }
                }
            }
        } catch (Exception e) {
            log.errorFormat("Exception during process of events for pool {0}, error is {1}", storagePoolId, e.getMessage());
        }
    }
}
#method_after
@Override
public void run() {
    while (true) {
        Pair<Event, FutureTask<EventResult>> pair;
        lock.lock();
        try {
            pair = poolsEventsMap.get(storagePoolId).poll();
            if (pair != null) {
                poolCurrentEventMap.put(storagePoolId, pair.getFirst());
            } else {
                poolCurrentEventMap.remove(storagePoolId);
                poolsEventsMap.remove(storagePoolId);
                log.debugFormat("All task for event query were executed pool {0}", storagePoolId);
                break;
            }
        } finally {
            lock.unlock();
        }
        Future<EventResult> futureResult = ThreadPoolUtil.execute(pair.getSecond());
        try {
            if (futureResult.get() == null) {
                EventResult result = pair.getSecond().get();
                if (result != null && result.getEventType() == EventType.RECONSTRUCT) {
                    log.infoFormat("Finished reconstruct for pool {0}. Clearing event queue", storagePoolId);
                    lock.lock();
                    try {
                        LinkedList<Pair<Event, FutureTask<EventResult>>> queue = new LinkedList<Pair<Event, FutureTask<EventResult>>>();
                        for (Pair<Event, FutureTask<EventResult>> task : poolsEventsMap.get(storagePoolId)) {
                            EventType eventType = task.getFirst().getEventType();
                            if (eventType == EventType.VDSCONNECTTOPOOL || ((eventType == EventType.RECOVERY || eventType == EventType.DOMAINFAILOVER || eventType == EventType.VDSCLEARCACHE) && !result.isSuccess())) {
                                queue.add(task);
                            } else {
                                log.infoFormat("The following operation {0} was cancelled, because of recosntruct was run before", task.getFirst());
                                task.getSecond().cancel(true);
                            }
                        }
                        if (queue.isEmpty()) {
                            poolCurrentEventMap.remove(storagePoolId);
                            poolsEventsMap.remove(storagePoolId);
                            break;
                        } else {
                            poolsEventsMap.put(storagePoolId, queue);
                        }
                    } finally {
                        lock.unlock();
                    }
                }
            }
        } catch (Exception e) {
            log.errorFormat("Exception during process of events for pool {0}, error is {1}", storagePoolId, e.getMessage());
        }
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    try {
        boolean reconstructOpSucceeded = reconstructMaster();
        setActionReturnValue(reconstructOpSucceeded);
        connectAndRefreshAllUpHosts(reconstructOpSucceeded);
        if (!_isLastMaster && reconstructOpSucceeded) {
            // all vms/templates metadata should be copied to the new master domain, so we need
            // to perform increment of the db version for all the vms in the storage pool.
            // currently this method is used for both templates and vms.
            getVmStaticDAO().incrementDbGenerationForAllInStoragePool(getStoragePoolId().getValue());
        }
        if (_isLastMaster) {
            getCompensationContext().resetCompensation();
        }
        setSucceeded(!_isLastMaster && reconstructOpSucceeded);
    } finally {
        if (getSucceeded()) {
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new IrsBaseVDSCommandParameters(getStoragePoolId().getValue()));
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    boolean reconstructOpSucceeded = reconstructMaster();
    setActionReturnValue(reconstructOpSucceeded);
    connectAndRefreshAllUpHosts(reconstructOpSucceeded);
    if (!_isLastMaster && reconstructOpSucceeded) {
        // all vms/templates metadata should be copied to the new master domain, so we need
        // to perform increment of the db version for all the vms in the storage pool.
        // currently this method is used for both templates and vms.
        getVmStaticDAO().incrementDbGenerationForAllInStoragePool(getStoragePoolId().getValue());
    }
    if (_isLastMaster) {
        getCompensationContext().resetCompensation();
    }
    setSucceeded(!_isLastMaster && reconstructOpSucceeded);
    if (getSucceeded()) {
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.MarkPoolInReconstructMode, new IrsBaseVDSCommandParameters(getStoragePoolId().getValue()));
    }
}
#end_block

#method_before
@Override
public List<QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    if (getVm().getQuotaId() != null && !Guid.Empty.equals(getVm().getQuotaId()) && (getVm().getStatus() == VMStatus.Up || getVm().getStatus() == VMStatus.Paused || getVm().getStatus() == VMStatus.PoweringUp || getVm().getStatus() == VMStatus.RebootInProgress || getVm().getStatus() == VMStatus.WaitForLaunch)) {
        list.add(new QuotaVdsGroupConsumptionParameter(getVm().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, getVm().getVdsGroupId(), getVm().getCpuPerSocket() * getVm().getNumOfSockets(), getVm().getMemSizeMb()));
    }
    return list;
}
#method_after
@Override
public List<QuotaConsumptionParameter> getQuotaVdsConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    if (getVm().getQuotaId() != null && !Guid.Empty.equals(getVm().getQuotaId()) && getQuotaManager().isVmStatusQuotaCountable(getVm().getStatus())) {
        list.add(new QuotaVdsGroupConsumptionParameter(getVm().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, getVm().getVdsGroupId(), getVm().getCpuPerSocket() * getVm().getNumOfSockets(), getVm().getMemSizeMb()));
    }
    return list;
}
#end_block

#method_before
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    if (!getVm().isStateless()) {
        return list;
    }
    // if runAsStateless
    for (DiskImage image : getVm().getDiskList()) {
        if (image.getQuotaId() != null) {
            list.add(new QuotaStorageConsumptionParameter(image.getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, image.getstorage_ids().get(0), image.getActualSize()));
        }
    }
    return list;
}
#method_after
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    if (!getVm().isStateless()) {
        return list;
    }
    // if runAsStateless
    for (DiskImage image : getVm().getDiskList()) {
        if (image.getQuotaId() != null) {
            list.add(new QuotaStorageConsumptionParameter(image.getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, image.getStorageIds().get(0), image.getActualSize()));
        }
    }
    return list;
}
#end_block

#method_before
private void checkUpServerAndAddBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    AsyncDataProvider.isClusterHasAnyUpHost(new AsyncQuery(volumeEntity, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object entity, Object returnValue) {
            boolean clusterHasUpHost = (Boolean) returnValue;
            if (clusterHasUpHost) {
                addBricks((GlusterVolumeEntity) entity);
            } else {
                ConfirmationModel model = new ConfirmationModel();
                setWindow(model);
                model.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
                model.setMessage(ConstantsManager.getInstance().getConstants().cannotAddBricksNoUpServerFound());
                // $NON-NLS-1$
                model.setHashName("cannot_add_bricks");
                // $NON-NLS-1$
                UICommand command = new UICommand("Cancel", VolumeBrickListModel.this);
                command.setTitle(ConstantsManager.getInstance().getConstants().close());
                command.setIsCancel(true);
                model.getCommands().add(command);
                return;
            }
        }
    }), volumeEntity.getClusterId());
}
#method_after
private void checkUpServerAndAddBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    AsyncDataProvider.isAnyHostUpInCluster(new AsyncQuery(volumeEntity, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object entity, Object returnValue) {
            boolean clusterHasUpHost = (Boolean) returnValue;
            if (clusterHasUpHost) {
                addBricks((GlusterVolumeEntity) entity);
            } else {
                ConfirmationModel model = new ConfirmationModel();
                setWindow(model);
                model.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
                model.setMessage(ConstantsManager.getInstance().getConstants().cannotAddBricksNoUpServerFound());
                // $NON-NLS-1$
                model.setHashName("cannot_add_bricks");
                // $NON-NLS-1$
                UICommand command = new UICommand("Cancel", VolumeBrickListModel.this);
                command.setTitle(ConstantsManager.getInstance().getConstants().close());
                command.setIsCancel(true);
                model.getCommands().add(command);
                return;
            }
        }
    }), volumeEntity.getVdsGroupName());
}
#end_block

#method_before
private void addBricks(GlusterVolumeEntity volumeEntity) {
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType());
    setWindow(volumeBrickModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    Iterator<VDS> iterator = hostList.iterator();
                    while (iterator.hasNext()) {
                        if (iterator.next().getstatus() != VDSStatus.Up) {
                            iterator.remove();
                        }
                    }
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("OnAddBricks", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    volumeBrickModel.getCommands().add(command);
}
#method_after
private void addBricks(GlusterVolumeEntity volumeEntity) {
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType());
    setWindow(volumeBrickModel);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    Iterator<VDS> iterator = hostList.iterator();
                    while (iterator.hasNext()) {
                        if (iterator.next().getStatus() != VDSStatus.Up) {
                            iterator.remove();
                        }
                    }
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("OnAddBricks", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    volumeBrickModel.getCommands().add(command);
}
#end_block

#method_before
private void onAddBricksInternal() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeBrickModel.getBricks().getItems()) {
        GlusterBrickEntity brickEntity = (GlusterBrickEntity) ((EntityModel) model).getEntity();
        brickEntity.setVolumeId(volumeEntity.getId());
        brickList.add(brickEntity);
    }
    volumeBrickModel.StartProgress(null);
    GlusterVolumeBricksActionParameters parameter = new GlusterVolumeBricksActionParameters(volumeEntity.getId(), brickList, volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue());
    Frontend.RunAction(VdcActionType.AddBricksToGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VolumeBrickListModel localModel = (VolumeBrickListModel) result.getState();
            localModel.postOnAddBricks(result.getReturnValue());
        }
    }, this);
}
#method_after
private void onAddBricksInternal() {
    cancelConfirmation();
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeBrickModel.getBricks().getItems()) {
        GlusterBrickEntity brickEntity = (GlusterBrickEntity) ((EntityModel) model).getEntity();
        brickEntity.setVolumeId(volumeEntity.getId());
        brickList.add(brickEntity);
    }
    volumeBrickModel.StartProgress(null);
    GlusterVolumeBricksActionParameters parameter = new GlusterVolumeBricksActionParameters(volumeEntity.getId(), brickList, volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue());
    Frontend.RunAction(VdcActionType.AddBricksToGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VolumeBrickListModel localModel = (VolumeBrickListModel) result.getState();
            localModel.postOnAddBricks(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
private void removeBricks() {
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    RemoveBrickModel removeBrickModel = new RemoveBrickModel();
    removeBrickModel.setReplicaCount(volumeEntity.getReplicaCount());
    removeBrickModel.setStripeCount(volumeEntity.getStripeCount());
    if (!canRemoveBricks(volumeEntity.getVolumeType(), Linq.<GlusterBrickEntity>Cast(getSelectedItems()), volumeEntity.getBricks(), removeBrickModel)) {
        ConfirmationModel model = new ConfirmationModel();
        setWindow(model);
        model.setEntity(removeBrickModel.isReduceReplica());
        model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
        model.setMessage(removeBrickModel.getValidationMessage());
        // $NON-NLS-1$
        model.setHashName("remove_bricks_invalid");
        // $NON-NLS-1$
        UICommand command2 = new UICommand("Cancel", this);
        command2.setTitle(ConstantsManager.getInstance().getConstants().close());
        command2.setIsCancel(true);
        model.getCommands().add(command2);
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setEntity(removeBrickModel.isReduceReplica());
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks");
    if (removeBrickModel.isReduceReplica()) {
        model.setMessage(ConstantsManager.getInstance().getMessages().removeBricksReplicateVolumeMessage(volumeEntity.getReplicaCount(), volumeEntity.getReplicaCount() - 1));
    } else {
        model.setMessage(ConstantsManager.getInstance().getConstants().removeBricksMessage());
    }
    model.setNote(ConstantsManager.getInstance().getConstants().removeBricksWarning());
    java.util.ArrayList<String> list = new java.util.ArrayList<String>();
    for (GlusterBrickEntity item : Linq.<GlusterBrickEntity>Cast(getSelectedItems())) {
        list.add(item.getQualifiedName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand command1 = new UICommand("OnRemove", this);
    command1.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command1.setIsDefault(true);
    model.getCommands().add(command1);
    // $NON-NLS-1$
    UICommand command2 = new UICommand("Cancel", this);
    command2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command2.setIsCancel(true);
    model.getCommands().add(command2);
}
#method_after
private void removeBricks() {
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    RemoveBrickModel removeBrickModel = new RemoveBrickModel();
    removeBrickModel.setReplicaCount(volumeEntity.getReplicaCount());
    removeBrickModel.setStripeCount(volumeEntity.getStripeCount());
    if (!canRemoveBricks(volumeEntity.getVolumeType(), Linq.<GlusterBrickEntity>Cast(getSelectedItems()), volumeEntity.getBricks(), removeBrickModel)) {
        ConfirmationModel model = new ConfirmationModel();
        setWindow(model);
        model.setEntity(removeBrickModel.isReduceReplica());
        model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
        model.setMessage(removeBrickModel.getValidationMessage());
        // $NON-NLS-1$
        model.setHashName("volume_remove_bricks_invalid");
        // $NON-NLS-1$
        UICommand command2 = new UICommand("Cancel", this);
        command2.setTitle(ConstantsManager.getInstance().getConstants().close());
        command2.setIsCancel(true);
        model.getCommands().add(command2);
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setEntity(removeBrickModel.isReduceReplica());
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
    // $NON-NLS-1$
    model.setHashName("volume_remove_bricks");
    if (removeBrickModel.isReduceReplica()) {
        model.setMessage(ConstantsManager.getInstance().getMessages().removeBricksReplicateVolumeMessage(volumeEntity.getReplicaCount(), volumeEntity.getReplicaCount() - 1));
    } else {
        model.setMessage(ConstantsManager.getInstance().getConstants().removeBricksMessage());
    }
    model.setNote(ConstantsManager.getInstance().getConstants().removeBricksWarning());
    ArrayList<String> list = new ArrayList<String>();
    for (GlusterBrickEntity item : Linq.<GlusterBrickEntity>Cast(getSelectedItems())) {
        list.add(item.getQualifiedName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand command1 = new UICommand("OnRemove", this);
    command1.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command1.setIsDefault(true);
    model.getCommands().add(command1);
    // $NON-NLS-1$
    UICommand command2 = new UICommand("Cancel", this);
    command2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command2.setIsCancel(true);
    model.getCommands().add(command2);
}
#end_block

#method_before
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.gethost_name());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.StartProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#method_after
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.getHostName());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.StartProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#end_block

#method_before
@Override
public GlusterVolumeEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeEntity entity = new GlusterVolumeEntity();
    entity.setId(Guid.createGuidFromString(rs.getString("id")));
    entity.setClusterId(Guid.createGuidFromString(rs.getString("cluster_id")));
    entity.setClusterName(rs.getString("vds_group_name"));
    entity.setName(rs.getString("vol_name"));
    entity.setVolumeType(GlusterVolumeType.valueOf(rs.getString("vol_type")));
    entity.setStatus(GlusterStatus.valueOf(rs.getString("status")));
    entity.setReplicaCount(rs.getInt("replica_count"));
    entity.setStripeCount(rs.getInt("stripe_count"));
    return entity;
}
#method_after
@Override
public GlusterVolumeEntity mapRow(ResultSet rs, int rowNum) throws SQLException {
    GlusterVolumeEntity entity = new GlusterVolumeEntity();
    entity.setId(Guid.createGuidFromString(rs.getString("id")));
    entity.setClusterId(Guid.createGuidFromString(rs.getString("cluster_id")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setName(rs.getString("vol_name"));
    entity.setVolumeType(GlusterVolumeType.valueOf(rs.getString("vol_type")));
    entity.setStatus(GlusterStatus.valueOf(rs.getString("status")));
    entity.setReplicaCount(rs.getInt("replica_count"));
    entity.setStripeCount(rs.getInt("stripe_count"));
    return entity;
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VolumeStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getClusterName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new EnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> numOfBricksColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return Integer.toString(object.getBricks().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(numOfBricksColumn, constants.numberOfBricksVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> transportColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            // $NON-NLS-1$
            String transportTypes = "";
            Iterator<TransportType> iterator = object.getTransportTypes().iterator();
            while (iterator.hasNext()) {
                TransportType transportType = iterator.next();
                if (transportTypeTranslator.containsKey(transportType)) {
                    transportTypes += transportTypeTranslator.get(transportType);
                } else {
                    transportTypes += transportType.toString();
                }
                if (iterator.hasNext()) {
                    // $NON-NLS-1$
                    transportTypes += ", ";
                }
            }
            return transportTypes;
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(transportColumn, constants.transportTypesVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> statusColumn = new EnumColumn<GlusterVolumeEntity, GlusterStatus>() {

        @Override
        protected GlusterStatus getRawValue(GlusterVolumeEntity object) {
            return object.getStatus();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.statusVolume(), "150px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.createVolumeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
}
#method_after
void initTable(ApplicationConstants constants) {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new VolumeStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<GlusterVolumeEntity> nameColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.NameVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> clusterColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return object.getVdsGroupName();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> volumeTypeColumn = new EnumColumn<GlusterVolumeEntity, GlusterVolumeType>() {

        @Override
        protected GlusterVolumeType getRawValue(GlusterVolumeEntity object) {
            return object.getVolumeType();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(volumeTypeColumn, constants.volumeTypeVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> numOfBricksColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            return Integer.toString(object.getBricks().size());
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(numOfBricksColumn, constants.numberOfBricksVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> transportColumn = new TextColumnWithTooltip<GlusterVolumeEntity>() {

        @Override
        public String getValue(GlusterVolumeEntity object) {
            // $NON-NLS-1$
            String transportTypes = "";
            Iterator<TransportType> iterator = object.getTransportTypes().iterator();
            while (iterator.hasNext()) {
                TransportType transportType = iterator.next();
                if (transportTypeTranslator.containsKey(transportType)) {
                    transportTypes += transportTypeTranslator.get(transportType);
                } else {
                    transportTypes += transportType.toString();
                }
                if (iterator.hasNext()) {
                    // $NON-NLS-1$
                    transportTypes += ", ";
                }
            }
            return transportTypes;
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(transportColumn, constants.transportTypesVolume(), "150px");
    TextColumnWithTooltip<GlusterVolumeEntity> statusColumn = new EnumColumn<GlusterVolumeEntity, GlusterStatus>() {

        @Override
        protected GlusterStatus getRawValue(GlusterVolumeEntity object) {
            return object.getStatus();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.statusVolume(), "150px");
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.createVolumeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getCreateVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.removeVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveVolumeCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.startVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.stopVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.rebalanceVolume()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRebalanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterVolumeEntity>(constants.optimizeForVirtStore()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getOptimizeForVirtStoreCommand();
        }
    });
}
#end_block

#method_before
private void classifyNics(List<Bond> nonEmptyBonds, List<Nic> independentNics, Map<String, List<Nic>> bondToNics, Map<String, List<Vlan>> nicToVlans) {
    for (VdsNetworkInterface i : getOriginalItems()) {
        if (i instanceof Bond) {
            nonEmptyBonds.add((Bond) i);
        } else if (i instanceof Nic) {
            if (i.getBondName() == null) {
                independentNics.add((Nic) i);
            } else {
                if (bondToNics.containsKey(i.getBondName())) {
                    bondToNics.get(i.getBondName()).add((Nic) i);
                } else {
                    List<Nic> nicList = new ArrayList<Nic>();
                    nicList.add((Nic) i);
                    bondToNics.put(i.getBondName(), nicList);
                }
            }
        } else {
            String nameWithoutVlan = i.getName().substring(0, i.getName().lastIndexOf('.'));
            if (nicToVlans.containsKey(nameWithoutVlan)) {
                nicToVlans.get(nameWithoutVlan).add((Vlan) i);
            } else {
                List<Vlan> vlanList = new ArrayList<Vlan>();
                vlanList.add((Vlan) i);
                nicToVlans.put(nameWithoutVlan, vlanList);
            }
        }
    }
}
#method_after
private void classifyNics(List<Bond> nonEmptyBonds, List<Nic> independentNics, Map<String, List<Nic>> bondToNics, Map<String, List<Vlan>> nicToVlans) {
    for (VdsNetworkInterface nic : getOriginalItems()) {
        if (nic instanceof Bond) {
            nonEmptyBonds.add((Bond) nic);
        } else if (nic instanceof Nic) {
            if (nic.getBondName() == null) {
                independentNics.add((Nic) nic);
            } else {
                if (bondToNics.containsKey(nic.getBondName())) {
                    bondToNics.get(nic.getBondName()).add((Nic) nic);
                } else {
                    List<Nic> nicList = new ArrayList<Nic>();
                    nicList.add((Nic) nic);
                    bondToNics.put(nic.getBondName(), nicList);
                }
            }
        } else if (nic instanceof Vlan) {
            String nameWithoutVlan = nic.getName().substring(0, nic.getName().lastIndexOf('.'));
            if (nicToVlans.containsKey(nameWithoutVlan)) {
                nicToVlans.get(nameWithoutVlan).add((Vlan) nic);
            } else {
                List<Vlan> vlanList = new ArrayList<Vlan>();
                vlanList.add((Vlan) nic);
                nicToVlans.put(nameWithoutVlan, vlanList);
            }
        }
    }
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command, Object... parameters) {
    super.ExecuteCommand(command);
    if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditManagementNetworkCommand()) {
        EditManagementNetwork();
    } else if (command == getSetupNetworksCommand()) {
        SetupNetworks();
    } else if (command == getBondCommand()) {
        executeBond();
    } else if (command == getDetachCommand()) {
        Detach();
    } else if (command == getSaveNetworkConfigCommand()) {
        SaveNetworkConfig();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) {
        OnEditManagementNetwork();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) {
        OnEditManagementNetworkConfirmation(false);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) {
        OnEditManagementNetworkConfirmation(true);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnBond")) {
        OnBond();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnDetach")) {
        OnDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) {
        OnConfirmManagementDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirm")) {
        CancelConfirm();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) {
        OnSaveNetworkConfig();
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command, Object... parameters) {
    super.ExecuteCommand(command);
    if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditManagementNetworkCommand()) {
        EditManagementNetwork();
    } else if (command == getSetupNetworksCommand()) {
        SetupNetworks();
    } else if (command == getBondCommand()) {
        bond();
    } else if (command == getDetachCommand()) {
        Detach();
    } else if (command == getSaveNetworkConfigCommand()) {
        SaveNetworkConfig();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) {
        OnEditManagementNetwork();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) {
        OnEditManagementNetworkConfirmation(false);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) {
        OnEditManagementNetworkConfirmation(true);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnBond")) {
        OnBond();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnDetach")) {
        OnDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) {
        OnConfirmManagementDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirm")) {
        CancelConfirm();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) {
        OnSaveNetworkConfig();
    }
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command, Object... parameters) {
    super.ExecuteCommand(command);
    if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditManagementNetworkCommand()) {
        EditManagementNetwork();
    } else if (command == getSetupNetworksCommand()) {
        SetupNetworks();
    } else if (command == getBondCommand()) {
        executeBond();
    } else if (command == getDetachCommand()) {
        Detach();
    } else if (command == getSaveNetworkConfigCommand()) {
        SaveNetworkConfig();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) {
        OnEditManagementNetwork();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) {
        OnEditManagementNetworkConfirmation(false);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) {
        OnEditManagementNetworkConfirmation(true);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnBond")) {
        OnBond();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnDetach")) {
        OnDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) {
        OnConfirmManagementDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirm")) {
        CancelConfirm();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) {
        OnSaveNetworkConfig();
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command, Object... parameters) {
    super.ExecuteCommand(command);
    if (command == getEditCommand()) {
        Edit();
    } else if (command == getEditManagementNetworkCommand()) {
        EditManagementNetwork();
    } else if (command == getSetupNetworksCommand()) {
        SetupNetworks();
    } else if (command == getBondCommand()) {
        bond();
    } else if (command == getDetachCommand()) {
        Detach();
    } else if (command == getSaveNetworkConfigCommand()) {
        SaveNetworkConfig();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) {
        OnEditManagementNetwork();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) {
        OnEditManagementNetworkConfirmation(false);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) {
        OnEditManagementNetworkConfirmation(true);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnBond")) {
        OnBond();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnDetach")) {
        OnDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) {
        OnConfirmManagementDetach();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirm")) {
        CancelConfirm();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) {
        OnSaveNetworkConfig();
    }
}
#end_block

#method_before
protected List<String> extractVariableDeclarations(Iterable<String> coll) {
    List<String> result = new ArrayList<String>();
    Iterator<String> iter = coll.iterator();
    while (iter.hasNext()) {
        result.addAll(Arrays.asList(iter.next().split("(?=\\$)")));
    }
    return result;
}
#method_after
protected List<String> extractVariableDeclarations(Iterable<String> appendedCanDoMsgs) {
    final List<String> result = new ArrayList<String>();
    Iterator<String> iter = appendedCanDoMsgs.iterator();
    while (iter.hasNext()) {
        result.addAll(Arrays.asList(iter.next().split("(?=\\$)")));
    }
    return result;
}
#end_block

#method_before
public ArrayList<vm_pools> getpools() {
    return privatepools;
}
#method_after
public ArrayList<VmPool> getpools() {
    return privatepools;
}
#end_block

#method_before
public void setpools(ArrayList<vm_pools> value) {
    privatepools = value;
}
#method_after
public void setpools(ArrayList<VmPool> value) {
    privatepools = value;
}
#end_block

#method_before
@Override
protected void SyncSearch() {
    super.SyncSearch();
    Frontend.RunQuery(VdcQueryType.GetAllVmsAndVmPools, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalBasicListModel userPortalBasicListModel = (UserPortalBasicListModel) model;
            ArrayList<VM> vms = new ArrayList<VM>();
            ArrayList<vm_pools> pools = new ArrayList<vm_pools>();
            VdcQueryReturnValue retValue = (VdcQueryReturnValue) returnValue;
            if (retValue != null && retValue.getSucceeded()) {
                List<Object> list = (ArrayList<Object>) retValue.getReturnValue();
                if (list != null) {
                    for (Object object : list) {
                        if (object instanceof VM) {
                            vms.add((VM) object);
                        } else if (object instanceof vm_pools) {
                            pools.add((vm_pools) object);
                        }
                    }
                }
            }
            userPortalBasicListModel.setvms(vms);
            userPortalBasicListModel.setpools(pools);
            userPortalBasicListModel.OnVmAndPoolLoad();
        }
    }));
}
#method_after
@Override
protected void SyncSearch() {
    super.SyncSearch();
    Frontend.RunQuery(VdcQueryType.GetAllVmsAndVmPools, new VdcQueryParametersBase(), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalBasicListModel userPortalBasicListModel = (UserPortalBasicListModel) model;
            ArrayList<VM> vms = new ArrayList<VM>();
            ArrayList<VmPool> pools = new ArrayList<VmPool>();
            VdcQueryReturnValue retValue = (VdcQueryReturnValue) returnValue;
            if (retValue != null && retValue.getSucceeded()) {
                List<Object> list = (ArrayList<Object>) retValue.getReturnValue();
                if (list != null) {
                    for (Object object : list) {
                        if (object instanceof VM) {
                            vms.add((VM) object);
                        } else if (object instanceof VmPool) {
                            pools.add((VmPool) object);
                        }
                    }
                }
            }
            userPortalBasicListModel.setvms(vms);
            userPortalBasicListModel.setpools(pools);
            userPortalBasicListModel.OnVmAndPoolLoad();
        }
    }));
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        ItemsChanging(value, items);
        items = value;
        ItemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        if (items != null) {
            // Clear circular references inside the model.
            for (UserPortalItemModel itemModel : (Iterable<UserPortalItemModel>) items) {
                itemModel.clearReferences();
            }
        }
        ItemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
private void UpdateSelectedEntityDetails() {
    if (getSelectedItem() == null) {
        return;
    }
    Object entity = ((EntityModel) getSelectedItem()).getEntity();
    if (entity instanceof VM) {
        VM vm = (VM) entity;
        UpdateDetails(vm);
    } else if (entity instanceof vm_pools) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object result) {
                UserPortalBasicListModel userPortalBasicListModel = (UserPortalBasicListModel) model;
                if (result != null) {
                    VM vm = (VM) ((VdcQueryReturnValue) result).getReturnValue();
                    if (vm != null) {
                        userPortalBasicListModel.UpdateDetails(vm);
                    }
                }
            }
        };
        vm_pools pool = (vm_pools) entity;
        Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new GetVmdataByPoolIdParameters(pool.getvm_pool_id()), _asyncQuery);
    }
}
#method_after
private void UpdateSelectedEntityDetails() {
    if (getSelectedItem() == null) {
        return;
    }
    Object entity = ((EntityModel) getSelectedItem()).getEntity();
    if (entity instanceof VM) {
        VM vm = (VM) entity;
        UpdateDetails(vm);
    } else if (entity instanceof VmPool) {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object result) {
                UserPortalBasicListModel userPortalBasicListModel = (UserPortalBasicListModel) model;
                if (result != null) {
                    VM vm = (VM) ((VdcQueryReturnValue) result).getReturnValue();
                    if (vm != null) {
                        userPortalBasicListModel.UpdateDetails(vm);
                    }
                }
            }
        };
        VmPool pool = (VmPool) entity;
        Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new GetVmdataByPoolIdParameters(pool.getVmPoolId()), _asyncQuery);
    }
}
#end_block

#method_before
@Override
public void OnVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<vm_pools> filteredPools = new ArrayList<vm_pools>();
        poolMap = new HashMap<Guid, vm_pools>();
        for (vm_pools pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getvm_pool_id(), pool);
            boolean found = false;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getvm_pool_id())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.Concat(getvms(), filteredPools);
        Linq.Sort(all, new Linq.VmAndPoolByNameComparer());
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            UserPortalItemModel model = new UserPortalItemModel(this, this);
            model.setEntity(item);
            items.add(model);
            updateConsoleModel(model);
        }
        // In userportal 'Basic View': Set 'CanConnectAutomatically' to true if there's one and only one VM in
        // status 'UP' and the other VMs aren't up.
        setCanConnectAutomatically(GetStatusUpVms(items).size() == 1 && GetUpVms(items).size() == 1 && GetStatusUpVms(items).get(0).getDefaultConsole().getConnectCommand().getIsExecutionAllowed());
        setItems(items);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.Empty);
    }
}
#method_after
@Override
public void OnVmAndPoolLoad() {
    if (getvms() != null && getpools() != null) {
        // Complete search.
        // Remove pools that has provided VMs.
        ArrayList<VmPool> filteredPools = new ArrayList<VmPool>();
        poolMap = new HashMap<Guid, VmPool>();
        for (VmPool pool : getpools()) {
            // Add pool to map.
            poolMap.put(pool.getVmPoolId(), pool);
            boolean found = false;
            for (VM vm : getvms()) {
                if (vm.getVmPoolId() != null && vm.getVmPoolId().equals(pool.getVmPoolId())) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                filteredPools.add(pool);
            }
        }
        // Merge VMs and Pools, and create item models.
        List all = Linq.Concat(getvms(), filteredPools);
        Linq.Sort(all, new Linq.VmAndPoolByNameComparer());
        ArrayList<Model> items = new ArrayList<Model>();
        for (Object item : all) {
            UserPortalItemModel model = new UserPortalItemModel(this, this);
            model.setEntity(item);
            items.add(model);
            updateConsoleModel(model);
        }
        // In userportal 'Basic View': Set 'CanConnectAutomatically' to true if there's one and only one VM in
        // status 'UP' and the other VMs aren't up.
        setCanConnectAutomatically(GetStatusUpVms(items).size() == 1 && GetUpVms(items).size() == 1 && GetStatusUpVms(items).get(0).getDefaultConsole().getConnectCommand().getIsExecutionAllowed());
        setItems(items);
        setvms(null);
        setpools(null);
        getSearchCompletedEvent().raise(this, EventArgs.Empty);
    }
}
#end_block

#method_before
@Override
protected void OnEntityChanged() {
    // Change behavior to match entity type.
    if (getEntity() instanceof VM) {
        behavior = new VmItemBehavior(this);
    } else if (getEntity() instanceof vm_pools) {
        behavior = new PoolItemBehavior(this);
    } else {
        throw new UnsupportedOperationException();
    }
    behavior.OnEntityChanged();
}
#method_after
@Override
protected void OnEntityChanged() {
    // Change behavior to match entity type.
    if (getEntity() instanceof VM) {
        behavior = new VmItemBehavior(this);
    } else if (getEntity() instanceof VmPool) {
        behavior = new PoolItemBehavior(this);
    } else {
        throw new UnsupportedOperationException();
    }
    behavior.OnEntityChanged();
}
#end_block

#method_before
@Override
protected void onBind() {
    super.onBind();
    registerHandler(getView().addMouseOutHandler(this));
    registerHandler(getView().addMouseOverHandler(this));
    registerHandler(getView().addClickHandler(this));
    registerHandler(getView().addDoubleClickHandler(this));
}
#method_after
@Override
protected void onBind() {
    super.onBind();
    registerHandler(getView().addMouseOutHandler(this));
    registerHandler(getView().addMouseOverHandler(this));
    registerHandler(getView().addClickHandler(this));
    registerHandler(getView().addDoubleClickHandler(this));
    // Add buttons to the view
    registerHandler(getView().addRunButton().addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            executeCommand(getRunCommand());
        }
    }));
    registerHandler(getView().addShutdownButton().addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            executeCommand(getShutdownCommand());
        }
    }));
    registerHandler(getView().addSuspendButton().addClickHandler(new ClickHandler() {

        @Override
        public void onClick(ClickEvent event) {
            executeCommand(getSuspendCommand());
        }
    }));
}
#end_block

#method_before
public void setModel(final UserPortalItemModel model) {
    this.model = model;
    this.listModel = modelProvider.getModel();
    setupSelectedProtocol(model);
    setupDefaultVmStyles();
    getView().edit(model);
    if (sameEntity(listModel.getSelectedItem(), model)) {
        setSelectedItem();
    }
}
#method_after
public void setModel(UserPortalItemModel model) {
    this.model = model;
    setupSelectedProtocol(model);
    setupDefaultVmStyles();
    getView().updateRunButton(getRunCommand(), model.getIsPool());
    getView().updateShutdownButton(getShutdownCommand());
    getView().updateSuspendButton(getSuspendCommand());
    getView().edit(model);
    if (sameEntity(listModel.getSelectedItem(), model)) {
        setSelectedItem();
    }
}
#end_block

#method_before
protected void setupSelectedProtocol(final UserPortalItemModel model) {
    selectedProtocol = consoleUtils.determineConnectionProtocol(model);
}
#method_after
protected void setupSelectedProtocol(UserPortalItemModel model) {
    selectedProtocol = consoleUtils.determineConnectionProtocol(model);
}
#end_block

#method_before
protected boolean sameEntity(UserPortalItemModel prevModel, UserPortalItemModel newModel) {
    if (prevModel == null || newModel == null) {
        return false;
    }
    return modelProvider.getKey(prevModel).equals(modelProvider.getKey(newModel));
}
#method_after
boolean sameEntity(UserPortalItemModel prevModel, UserPortalItemModel newModel) {
    if (prevModel == null || newModel == null) {
        return false;
    }
    return listModelProvider.getKey(prevModel).equals(listModelProvider.getKey(newModel));
}
#end_block

#method_before
private void setupDefaultVmStyles() {
    if (!isSelected()) {
        if (model.IsVmUp()) {
            getView().setVmUpStyle();
        } else {
            getView().setVmDownStyle();
        }
    }
}
#method_after
void setupDefaultVmStyles() {
    if (!isSelected()) {
        if (model.IsVmUp()) {
            getView().setVmUpStyle();
        } else {
            getView().setVmDownStyle();
        }
    }
}
#end_block

#method_before
protected void setSelectedItem() {
    listModel.setSelectedItem(model);
    modelProvider.setSelectedItems(Arrays.asList(model));
    getView().setSelected();
}
#method_after
void setSelectedItem() {
    listModel.setSelectedItem(model);
    listModelProvider.setSelectedItems(Arrays.asList(model));
    getView().setSelected();
}
#end_block

#method_before
private boolean canShowConsole() {
    return consoleUtils.canShowConsole(selectedProtocol, model);
}
#method_after
boolean canShowConsole() {
    return consoleUtils.canShowConsole(selectedProtocol, model);
}
#end_block

#method_before
@Override
public void onDataChange(List<UserPortalItemModel> items) {
    List<UserPortalItemModel> removeItems = new ArrayList<UserPortalItemModel>();
    List<UserPortalItemModel> refreshItems = null;
    // first time
    if (currentItems == null) {
        currentItems = refreshItems = items;
    } else {
        refreshItems = modelProvider.getModel().refreshItems(items, currentItems, removeItems);
        List<UserPortalItemModel> changedItems = new ArrayList<UserPortalItemModel>(refreshItems);
        changedItems.addAll(removeItems);
        for (UserPortalItemModel changedItem : changedItems) {
            MainTabBasicListItemPresenterWidget basicVmPresenterWidget = presenterMap.get(changedItem.getId());
            if (basicVmPresenterWidget == null) {
                // added item
                continue;
            } else {
                presenterMap.remove(changedItem.getId());
            }
            basicVmPresenterWidget.setVisible(true);
            removeFromSlot(TYPE_VmListContent, basicVmPresenterWidget);
            basicVmPresenterWidget.setVisible(false);
        }
    }
    init(items, refreshItems);
}
#method_after
@Override
public void onDataChange(List<UserPortalItemModel> items) {
    int itemIndex = 0;
    Set<Guid> itemsToRemove = new HashSet<Guid>(currentItemPresenterWidgets.keySet());
    // Clear the list view, detaching any existing item views
    clearSlot(TYPE_VmListContent);
    // Process newly received data
    for (UserPortalItemModel newItem : items) {
        Guid newItemId = newItem.getId();
        MainTabBasicListItemPresenterWidget itemPresenterWidget = currentItemPresenterWidgets.get(newItemId);
        // Create new item presenter widget, if necessary
        if (itemPresenterWidget == null) {
            itemPresenterWidget = itemPresenterWidgetProvider.get();
            currentItemPresenterWidgets.put(newItemId, itemPresenterWidget);
        }
        // Initialize item presenter widget with new data
        itemPresenterWidget.getView().setElementId(ElementIdUtils.createElementId(getView().getElementId(), // $NON-NLS-1$
        "vm" + itemIndex));
        itemPresenterWidget.setModel(newItem);
        // Update the list view, attaching current item view
        addToSlot(TYPE_VmListContent, itemPresenterWidget);
        itemsToRemove.remove(newItemId);
        itemIndex++;
    }
    // Cleanup old data
    for (Guid oldItemId : itemsToRemove) {
        MainTabBasicListItemPresenterWidget itemPresenterWidget = currentItemPresenterWidgets.get(oldItemId);
        itemPresenterWidget.unbind();
        currentItemPresenterWidgets.remove(oldItemId);
    }
    selectDefault(modelProvider.getModel(), items);
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        clearItemReferences();
        ItemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        ItemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
    }
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (items != value) {
        clearItemReferences();
        ItemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
        UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
        if (items != null && selectedItem != null) {
            for (Object object : items) {
                UserPortalItemModel itemModel = (UserPortalItemModel) object;
                if (itemModel.getEntity().equals(selectedItem.getEntity())) {
                    this.selectedItem = itemModel;
                    break;
                }
            }
        }
        OnSelectedItemChanged();
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (items != value) {
        ItemsChanging(value, items);
        items = value;
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
        UserPortalItemModel selectedItem = (UserPortalItemModel) getSelectedItem();
        if (items != null && selectedItem != null) {
            for (Object object : items) {
                UserPortalItemModel itemModel = (UserPortalItemModel) object;
                if (itemModel.getEntity().equals(selectedItem.getEntity())) {
                    this.selectedItem = itemModel;
                    break;
                }
            }
        }
        OnSelectedItemChanged();
    }
}
#end_block

#method_before
@Override
protected void updateDataProvider(List<UserPortalItemModel> items) {
    // First data update
    if (currentItems == null) {
        currentItems = items;
        super.updateDataProvider(items);
    } else // Subsequent data update, with item change
    if (itemsChanged(items, currentItems)) {
        super.updateDataProvider(items);
    } else // Subsequent data update, without item change
    {
        retainSelectedItems();
    }
    currentItems = items;
}
#method_after
@Override
protected void updateDataProvider(List<UserPortalItemModel> items) {
    // First data update
    if (currentItems == null) {
        currentItems = items;
        super.updateDataProvider(items);
    } else // Subsequent data update, with item change
    if (itemsChanged(items, currentItems)) {
        for (UserPortalItemModel itemModel : currentItems) {
            itemModel.clearReferences();
        }
        super.updateDataProvider(items);
    } else // Subsequent data update, without item change
    {
        retainSelectedItems();
    }
    currentItems = items;
}
#end_block

#method_before
protected void postGetHost(String hostName) {
    // $NON-NLS-1$
    StringBuilder configBuilder = new StringBuilder("[virt-viewer]");
    // $NON-NLS-1$
    String lineSeparator = "\n";
    // $NON-NLS-1$
    configBuilder.append(lineSeparator).append("type=vnc").append(lineSeparator).append("host=").append(// $NON-NLS-1$
    hostName).append(lineSeparator).append("password=").append(// $NON-NLS-1$
    otp64).append(lineSeparator).append("port=").append(// $NON-NLS-1$
    getEntity().getDisplay().toString());
    ConsoleModel.makeConsoleConfigRequest(configBuilder.toString());
}
#method_after
protected void postGetHost(String hostName) {
    // $NON-NLS-1$
    StringBuilder configBuilder = new StringBuilder("[virt-viewer]");
    // $NON-NLS-1$
    configBuilder.append("\ntype=vnc").append("\nhost=").append(// $NON-NLS-1$
    hostName).append("\nport=").append(// $NON-NLS-1$
    getEntity().getDisplay().toString()).append("\npassword=").append(// $NON-NLS-1$
    otp64).append("\ntitle=").append(// $NON-NLS-1$
    getTitle());
    // $NON-NLS-1$ $NON-NLS-2$
    ConsoleModel.makeConsoleConfigRequest("console.vv", "application/x-virt-viewer; charset=UTF-8", configBuilder.toString());
}
#end_block

#method_before
public static void makeConsoleConfigRequest(String configFileContent) {
    // $NON-NLS-1$
    FormPanel formPanel = new FormPanel(new NamedFrame("_self"));
    formPanel.setMethod(FormPanel.METHOD_POST);
    VerticalPanel innerPanel = new VerticalPanel();
    // $NON-NLS-1$ $NON-NLS-2$
    innerPanel.add(buildTextArea("filename", "console.vv"));
    // $NON-NLS-1$ $NON-NLS-2$
    innerPanel.add(buildTextArea("contenttype", "x-virt-viewer"));
    // $NON-NLS-1$
    innerPanel.add(buildTextArea("content", configFileContent));
    formPanel.setWidget(innerPanel);
    formPanel.setAction(CONSOLE_CONFIG_SERVLET_URL);
    FormElement form = FormElement.as(formPanel.getElement());
    RootPanel.getBodyElement().appendChild(form);
    form.submit();
    RootPanel.getBodyElement().removeChild(form);
}
#method_after
public static void makeConsoleConfigRequest(String fileName, String contentType, String configFileContent) {
    // $NON-NLS-1$
    FormPanel formPanel = new FormPanel(new NamedFrame("_self"));
    formPanel.setMethod(FormPanel.METHOD_POST);
    FlowPanel innerPanel = new FlowPanel();
    // $NON-NLS-1$
    innerPanel.add(buildTextArea("filename", fileName));
    // $NON-NLS-1$
    innerPanel.add(buildTextArea("contenttype", contentType));
    // $NON-NLS-1$
    innerPanel.add(buildTextArea("content", configFileContent));
    // $NON-NLS-1$ $NON-NLS-2$
    innerPanel.add(buildTextArea("encodingtype", "plain"));
    formPanel.setWidget(innerPanel);
    formPanel.setAction(GET_ATTACHMENT_SERVLET_URL);
    formPanel.setVisible(false);
    FormElement form = FormElement.as(formPanel.getElement());
    formPanel.setEncoding(FormPanel.ENCODING_URLENCODED);
    RootPanel.getBodyElement().appendChild(form);
    form.submit();
    RootPanel.getBodyElement().removeChild(form);
}
#end_block

#method_before
@Override
public void Connect() {
    // $NON-NLS-1$
    StringBuilder configBuilder = new StringBuilder("[virt-viewer]");
    // $NON-NLS-1$
    String lineSeparator = "\n";
    // $NON-NLS-1$
    configBuilder.append(lineSeparator).append("type=spice").append(lineSeparator).append("host=").append(// $NON-NLS-1$
    getHost()).append(lineSeparator).append("password=").append(// $NON-NLS-1$
    getPassword()).append(lineSeparator).append("port=").append(// $NON-NLS-1$
    Integer.toString(getPort()));
    ConsoleModel.makeConsoleConfigRequest(configBuilder.toString());
}
#method_after
@Override
public void Connect() {
    // $NON-NLS-1$
    StringBuilder configBuilder = new StringBuilder("[virt-viewer]");
    int fullscreen = 0;
    if (isFullScreen()) {
        fullscreen = 1;
    }
    int enableSmartcard = 0;
    if (isSmartcardEnabled()) {
        enableSmartcard = 1;
    }
    int usbAutoShare = 0;
    if (getUsbAutoShare()) {
        usbAutoShare = 1;
    }
    // $NON-NLS-1$
    configBuilder.append("\ntype=spice").append("\nhost=").append(// $NON-NLS-1$
    getHost()).append("\nport=").append(// $NON-NLS-1$
    Integer.toString(getPort())).append("\npassword=").append(// $NON-NLS-1$
    getPassword()).append("\ntls-port=").append(// $NON-NLS-1$
    getSecurePort()).append("\ntls-ciphers=").append(// $NON-NLS-1$
    getCipherSuite()).append("\nfullscreen=").append(// $NON-NLS-1$
    fullscreen).append("\ntitle=").append(// $NON-NLS-1$
    getTitle()).append("\nenable-smartcard=").append(// $NON-NLS-1$
    enableSmartcard).append("\nenable-usb-autoshare=").append(// $NON-NLS-1$
    usbAutoShare).append("\nusb-filter=").append(// $NON-NLS-1$
    getUsbFilter());
    if (!StringHelper.isNullOrEmpty(getHostSubject())) {
        // $NON-NLS-1$
        configBuilder.append("\nhost-subject=").append(getHostSubject());
    }
    if (getTrustStore() != null) {
        // virt-viewer-file doesn't want newlines in ca
        // $NON-NLS-1$ $NON-NLS-2$
        String trustStore = getTrustStore().replace("\n", "\\n");
        // $NON-NLS-1$
        configBuilder.append("\nca=").append(trustStore);
    }
    if (isWanOptionsEnabled()) {
        // $NON-NLS-1$
        configBuilder.append("\ncolor-depth=").append(colorDepthAsInt()).append("\ndisable-effects=").append(// $NON-NLS-1$
        disableEffectsAsString());
    }
    if (!StringHelper.isNullOrEmpty(getToggleFullscreenHotKey())) {
        // $NON-NLS-1$
        configBuilder.append("\ntoggle-fullscreen=").append(getToggleFullscreenHotKey());
    }
    if (!StringHelper.isNullOrEmpty(getReleaseCursorHotKey())) {
        // $NON-NLS-1$
        configBuilder.append("\nrelease-cursor=").append(getReleaseCursorHotKey());
    }
    if (!StringHelper.isNullOrEmpty(getSpiceProxy())) {
        // $NON-NLS-1$
        configBuilder.append("\nproxy=").append(getSpiceProxy());
    }
    // $NON-NLS-1$ $NON-NLS-2$
    ConsoleModel.makeConsoleConfigRequest("console.vv", "application/x-virt-viewer; charset=UTF-8", configBuilder.toString());
}
#end_block

#method_before
private void setSpiceImplementation() {
    ClientConsoleMode consoleMode = ClientConsoleMode.valueOf((String) AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.ClientConsoleMode));
    if (ClientConsoleMode.Native.equals(consoleMode)) {
        // $NON-NLS-1$
        setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
    } else if (ClientConsoleMode.Plugin.equals(consoleMode)) {
        // $NON-NLS-1$
        setspice((ISpice) TypeResolver.getInstance().Resolve(ISpicePlugin.class));
    } else {
        ISpice pluginSpice = (ISpice) TypeResolver.getInstance().Resolve(ISpicePlugin.class);
        if (pluginSpice.getIsInstalled()) {
            setspice(pluginSpice);
        } else {
            setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
        }
    }
}
#method_after
private void setSpiceImplementation() {
    ClientConsoleMode consoleMode = ClientConsoleMode.valueOf((String) AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.ClientConsoleModeDefault));
    if (ClientConsoleMode.Native.equals(consoleMode)) {
        // $NON-NLS-1$
        setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
    } else if (ClientConsoleMode.Plugin.equals(consoleMode)) {
        // $NON-NLS-1$
        setspice((ISpice) TypeResolver.getInstance().Resolve(ISpicePlugin.class));
    } else {
        ISpicePlugin pluginSpice = (ISpicePlugin) TypeResolver.getInstance().Resolve(ISpicePlugin.class);
        if (pluginSpice.detectXpiPlugin()) {
            setspice(pluginSpice);
        } else {
            setspice((ISpice) TypeResolver.getInstance().Resolve(ISpiceNative.class));
        }
    }
}
#end_block

#method_before
@Override
protected void Connect() {
    if (getEntity() != null) {
        // $NON-NLS-1$
        getLogger().Debug("Connecting to Spice console...");
        if (!getspice().getIsInstalled()) {
            // $NON-NLS-1$
            getLogger().Info("Spice client is not installed.");
            getspice().Install();
            return;
        }
        // Check a spice version.
        if (getConfigurator().getIsAdmin() && getspice().getCurrentVersion().compareTo(getspice().getDesiredVersion()) < 0) {
            // $NON-NLS-1$ //$NON-NLS-2$
            getLogger().Info("Spice client version is not as desired (" + getspice().getDesiredVersion() + ")");
            getspice().Install();
            return;
        }
        // Don't connect if there VM is not running on any host.
        if (getEntity().getRunOnVds() == null) {
            return;
        }
        // If it is not windows or SPICE guest agent is not installed, make sure the WAN options are disabled.
        if (!getEntity().getVmOs().isWindows() || !getEntity().getHasSpiceDriver()) {
            getspice().setIsWanOptionsEnabled(false);
        }
        UICommand setVmTicketCommand = new UICommand("setVmCommand", new // $NON-NLS-1$
        BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand uiCommand) {
                setVmTicket();
            }
        });
        executeCommandWithConsoleSafenessWarning(setVmTicketCommand);
    }
}
#method_after
@Override
protected void Connect() {
    if (getEntity() != null) {
        // $NON-NLS-1$
        getLogger().Debug("Connecting to Spice console...");
        if (!getspice().getIsInstalled()) {
            // $NON-NLS-1$
            getLogger().Info("Spice client is not installed.");
            getspice().Install();
            return;
        }
        // Check a spice version.
        if (getConfigurator().getIsAdmin() && getspice().getCurrentVersion().compareTo(getspice().getDesiredVersion()) < 0) {
            // $NON-NLS-1$ //$NON-NLS-2$
            getLogger().Info("Spice client version is not as desired (" + getspice().getDesiredVersion() + ")");
            getspice().Install();
            return;
        }
        // Don't connect if there VM is not running on any host.
        if (getEntity().getRunOnVds() == null) {
            return;
        }
        // If it is not windows or SPICE guest agent is not installed, make sure the WAN options are disabled.
        if (!getEntity().getVmOs().isWindows() || !getEntity().getHasSpiceDriver()) {
            getspice().setWanOptionsEnabled(false);
        }
        UICommand setVmTicketCommand = new UICommand("setVmCommand", new // $NON-NLS-1$
        BaseCommandTarget() {

            @Override
            public void ExecuteCommand(UICommand uiCommand) {
                setVmTicket();
            }
        });
        executeCommandWithConsoleSafenessWarning(setVmTicketCommand);
    }
}
#end_block

#method_before
private void ExecuteQuery(final VM vm) {
    AsyncQuery _asyncQuery0 = new AsyncQuery();
    _asyncQuery0.setModel(this);
    _asyncQuery0.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model0, Object result0) {
            SpiceConsoleModel thisSpiceConsoleModel = (SpiceConsoleModel) model0;
            VM thisVm = thisSpiceConsoleModel.getEntity();
            storage_domains isoDomain = null;
            if (result0 != null) {
                isoDomain = (storage_domains) result0;
            }
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetVdsCertificateSubjectByVmId);
            queryTypeList.add(VdcQueryType.GetCACertificate);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SSLEnabled, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.CipherSuite, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceSecureChannels, thisVm.getVdsGroupCompatibilityVersion().toString()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.EnableSpiceRootCertificateValidation, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetVmByVmIdParameters(thisVm.getId()));
            parametersList.add(new VdcQueryParametersBase());
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceToggleFullScreenKeys, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceReleaseCursorKeys, AsyncDataProvider.getDefaultConfigurationVersion()));
            if (isoDomain != null) {
                queryTypeList.add(VdcQueryType.GetAllIsoImagesListByStoragePoolId);
                GetAllImagesListByStoragePoolIdParameters getIsoPamams = new GetAllImagesListByStoragePoolIdParameters(vm.getStoragePoolId());
                parametersList.add(getIsoPamams);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, thisSpiceConsoleModel);
        }
    };
    AsyncDataProvider.GetIsoDomainByDataCenterId(_asyncQuery0, vm.getStoragePoolId());
}
#method_after
private void ExecuteQuery(final VM vm) {
    AsyncQuery _asyncQuery0 = new AsyncQuery();
    _asyncQuery0.setModel(this);
    _asyncQuery0.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model0, Object result0) {
            SpiceConsoleModel thisSpiceConsoleModel = (SpiceConsoleModel) model0;
            VM thisVm = thisSpiceConsoleModel.getEntity();
            StorageDomain isoDomain = null;
            if (result0 != null) {
                isoDomain = (StorageDomain) result0;
            }
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetVdsCertificateSubjectByVmId);
            queryTypeList.add(VdcQueryType.GetCACertificate);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SSLEnabled, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.CipherSuite, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceSecureChannels, thisVm.getVdsGroupCompatibilityVersion().toString()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.EnableSpiceRootCertificateValidation, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetVmByVmIdParameters(thisVm.getId()));
            parametersList.add(new VdcQueryParametersBase());
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceToggleFullScreenKeys, AsyncDataProvider.getDefaultConfigurationVersion()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceReleaseCursorKeys, AsyncDataProvider.getDefaultConfigurationVersion()));
            if (isoDomain != null) {
                queryTypeList.add(VdcQueryType.GetAllIsoImagesListByStoragePoolId);
                GetAllImagesListByStoragePoolIdParameters getIsoPamams = new GetAllImagesListByStoragePoolIdParameters(vm.getStoragePoolId());
                parametersList.add(getIsoPamams);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, thisSpiceConsoleModel);
        }
    };
    AsyncDataProvider.GetIsoDomainByDataCenterId(_asyncQuery0, vm.getStoragePoolId());
}
#end_block

#method_before
@Override
public void Executed(FrontendMultipleQueryAsyncResult result) {
    List<VdcQueryReturnValue> returnValues = result.getReturnValues();
    boolean success = true;
    for (VdcQueryReturnValue returnValue : returnValues) {
        if (!returnValue.getSucceeded()) {
            success = false;
            break;
        }
    }
    if (!success) {
        boolean enableSpiceRootCertificateValidation = (Boolean) result.getReturnValues().get(3).getReturnValue();
        VdcQueryReturnValue caCertificateReturnValue = result.getReturnValues().get(5);
        // If only the caCertificate query failed - ignore failure (goto OnSuccess)
        if (!caCertificateReturnValue.getSucceeded() && !enableSpiceRootCertificateValidation) {
            // If succeeded goto 'OnSuccess'; Otherwise, 'OnFailure'.
            for (VdcQueryReturnValue returnValue : returnValues) {
                if (!returnValue.getSucceeded() && returnValue != caCertificateReturnValue) {
                    return;
                }
            }
        }
    }
    String cipherSuite = null;
    String spiceSecureChannels = null;
    boolean isSSLEnabled = (Boolean) returnValues.get(0).getReturnValue();
    if (isSSLEnabled) {
        cipherSuite = (String) returnValues.get(1).getReturnValue();
        spiceSecureChannels = (String) returnValues.get(2).getReturnValue();
    }
    // $NON-NLS-1$
    String certificateSubject = "";
    // $NON-NLS-1$
    String caCertificate = "";
    if ((Boolean) returnValues.get(3).getReturnValue()) {
        certificateSubject = (String) returnValues.get(4).getReturnValue();
        caCertificate = (String) returnValues.get(5).getReturnValue();
    }
    getspice().setHost(getEntity().getDisplayIp());
    getspice().setSmartcardEnabled(getEntity().isSmartcardEnabled());
    getspice().setPort((getEntity().getDisplay() == null ? 0 : getEntity().getDisplay()));
    getspice().setPassword(ticket);
    getspice().setNumberOfMonitors(getEntity().getNumOfMonitors());
    // $NON-NLS-1$
    getspice().setGuestHostName(getEntity().getVmHost().split("[ ]", -1)[0]);
    if (getEntity().getDisplaySecurePort() != null) {
        getspice().setSecurePort(getEntity().getDisplaySecurePort());
    }
    if (!StringHelper.isNullOrEmpty(spiceSecureChannels)) {
        getspice().setSslChanels(spiceSecureChannels);
    }
    if (!StringHelper.isNullOrEmpty(cipherSuite)) {
        getspice().setCipherSuite(cipherSuite);
    }
    getspice().setHostSubject(certificateSubject);
    getspice().setTrustStore(caCertificate);
    String toggleFullScreenKeys = (String) returnValues.get(6).getReturnValue();
    String releaseCursorKeys = (String) returnValues.get(7).getReturnValue();
    // $NON-NLS-1$
    String ctrlAltDel = "ctrl+alt+del";
    // $NON-NLS-1$
    String ctrlAltEnd = "ctrl+alt+end";
    String toggleFullScreenKeysTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource((toggleFullScreenKeys != null) ? toggleFullScreenKeys : // $NON-NLS-1$
    "shift+f11");
    String releaseCursorKeysTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource((releaseCursorKeys != null) ? releaseCursorKeys : // $NON-NLS-1$
    "shift+f12");
    String ctrlAltDelTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource(ctrlAltDel);
    String ctrlAltEndTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource(ctrlAltEnd);
    getspice().setTitle(getEntity().getVmName() + // $NON-NLS-1$
    ":%d" + (StringHelper.isNullOrEmpty(releaseCursorKeysTranslated) ? "" : (// $NON-NLS-1$ //$NON-NLS-2$
    " - " + ConstantsManager.getInstance().getMessages().pressKeyToReleaseCursor(releaseCursorKeysTranslated))));
    // If 'AdminConsole' is true, send true; otherwise, false should be sent only for VMs with SPICE driver
    // installed.
    getspice().setAdminConsole(getConfigurator().getSpiceAdminConsole() ? true : !getEntity().getHasSpiceDriver());
    // Update 'UsbListenPort' value
    getspice().setUsbListenPort(getConfigurator().getIsUsbEnabled() && getEntity().getUsbPolicy() == UsbPolicy.ENABLED_LEGACY ? getConfigurator().getSpiceDefaultUsbPort() : getConfigurator().getSpiceDisableUsbListenPort());
    // At lease one of the hot-keys is not empty -> send it to SPICE:
    if (!StringHelper.isNullOrEmpty(releaseCursorKeys) || !StringHelper.isNullOrEmpty(toggleFullScreenKeys)) {
        String comma = // $NON-NLS-1$
        (!StringHelper.isNullOrEmpty(releaseCursorKeys) && !StringHelper.isNullOrEmpty(toggleFullScreenKeys)) ? // $NON-NLS-1$
        "," : // $NON-NLS-1$
        "";
        String releaseCursorKeysParameter = // $NON-NLS-1$ //$NON-NLS-2$
        StringHelper.isNullOrEmpty(releaseCursorKeys) ? "" : "release-cursor=" + releaseCursorKeys;
        String toggleFullScreenKeysParameter = // $NON-NLS-1$ //$NON-NLS-2$
        StringHelper.isNullOrEmpty(toggleFullScreenKeys) ? "" : "toggle-fullscreen=" + toggleFullScreenKeys;
        getspice().setHotKey(releaseCursorKeysParameter + comma + toggleFullScreenKeysParameter);
    }
    getspice().setLocalizedStrings(new String[] { ConstantsManager.getInstance().getConstants().usb(), ConstantsManager.getInstance().getConstants().usbDevicesNoUsbdevicesClientSpiceUsbRedirectorNotInstalled() });
    // Create menu.
    int id = 1;
    menu = new SpiceMenu();
    menu.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_SEND_CTRL_ALT_DEL, ConstantsManager.getInstance().getConstants().send() + " " + // $NON-NLS-1$
    ctrlAltDelTranslated + "\t" + ctrlAltEndTranslated, // $NON-NLS-1$ //$NON-NLS-2$
    ""));
    menu.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_TOGGLE_FULL_SCREEN, ConstantsManager.getInstance().getConstants().toggleFullScreen() + // $NON-NLS-1$
    "\t" + toggleFullScreenKeysTranslated, // $NON-NLS-1$
    ""));
    SpiceMenuContainerItem specialKes = new SpiceMenuContainerItem(id, ConstantsManager.getInstance().getConstants().specialKeys());
    menu.getItems().add(specialKes);
    specialKes.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_SEND_SHIFT_F11, toggleFullScreenKeysTranslated, // $NON-NLS-1$
    ""));
    specialKes.getItems().add(// $NON-NLS-1$
    new SpiceMenuCommandItem(ID_SYS_MENU_SEND_SHIFT_F12, releaseCursorKeysTranslated, ""));
    specialKes.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_SEND_CTRL_ALT_END, ctrlAltEndTranslated, // $NON-NLS-1$
    ""));
    menu.getItems().add(new SpiceMenuSeparatorItem(id));
    id++;
    SpiceMenuContainerItem changeCDItem = new SpiceMenuContainerItem(id, ConstantsManager.getInstance().getConstants().changeCd());
    id++;
    ArrayList<String> isos = new ArrayList<String>();
    if (returnValues.size() > 8) {
        ArrayList<RepoFileMetaData> repoList = (ArrayList<RepoFileMetaData>) returnValues.get(8).getReturnValue();
        for (RepoFileMetaData RepoFileMetaData : repoList) {
            isos.add(RepoFileMetaData.getRepoFileName());
        }
    }
    isos = isos.size() > 0 ? isos : new ArrayList<String>(Arrays.asList(new String[] { ConstantsManager.getInstance().getConstants().noCds() }));
    Collections.sort(isos);
    for (String fileName : isos) {
        changeCDItem.getItems().add(new SpiceMenuCommandItem(id, fileName, CommandChangeCD));
        id++;
    }
    changeCDItem.getItems().add(new SpiceMenuCommandItem(id, EjectLabel, CommandChangeCD));
    id++;
    menu.getItems().add(changeCDItem);
    menu.getItems().add(new SpiceMenuSeparatorItem(id));
    id++;
    menu.getItems().add(new SpiceMenuCommandItem(id, ConstantsManager.getInstance().getConstants().playSpiceConsole(), CommandPlay));
    id++;
    menu.getItems().add(new SpiceMenuCommandItem(id, ConstantsManager.getInstance().getConstants().suspendSpiceConsole(), CommandSuspend));
    id++;
    menu.getItems().add(new SpiceMenuCommandItem(id, ConstantsManager.getInstance().getConstants().stopSpiceConsole(), CommandStop));
    getspice().setMenu(menu.toString());
    getspice().setGuestID(getEntity().getId().toString());
    // Subscribe to events.
    getspice().getDisconnectedEvent().addListener(this);
    getspice().getMenuItemSelectedEvent().addListener(this);
    if (StringHelper.isNullOrEmpty(getEntity().getDisplayIp()) || // $NON-NLS-1$
    StringHelper.stringsEqual(getEntity().getDisplayIp(), "0")) {
        determineIpAndConnect(getEntity().getId());
    } else {
        // Try to connect.
        SpiceConnect();
    }
}
#method_after
@Override
public void Executed(FrontendMultipleQueryAsyncResult result) {
    List<VdcQueryReturnValue> returnValues = result.getReturnValues();
    boolean success = true;
    for (VdcQueryReturnValue returnValue : returnValues) {
        if (!returnValue.getSucceeded()) {
            success = false;
            break;
        }
    }
    if (!success) {
        boolean enableSpiceRootCertificateValidation = (Boolean) result.getReturnValues().get(3).getReturnValue();
        VdcQueryReturnValue caCertificateReturnValue = result.getReturnValues().get(5);
        // If only the caCertificate query failed - ignore failure (goto OnSuccess)
        if (!caCertificateReturnValue.getSucceeded() && !enableSpiceRootCertificateValidation) {
            // If succeeded goto 'OnSuccess'; Otherwise, 'OnFailure'.
            for (VdcQueryReturnValue returnValue : returnValues) {
                if (!returnValue.getSucceeded() && returnValue != caCertificateReturnValue) {
                    return;
                }
            }
        }
    }
    String cipherSuite = null;
    String spiceSecureChannels = null;
    boolean isSSLEnabled = (Boolean) returnValues.get(0).getReturnValue();
    if (isSSLEnabled) {
        cipherSuite = (String) returnValues.get(1).getReturnValue();
        spiceSecureChannels = (String) returnValues.get(2).getReturnValue();
    }
    // $NON-NLS-1$
    String certificateSubject = "";
    // $NON-NLS-1$
    String caCertificate = "";
    if ((Boolean) returnValues.get(3).getReturnValue()) {
        certificateSubject = (String) returnValues.get(4).getReturnValue();
        caCertificate = (String) returnValues.get(5).getReturnValue();
    }
    getspice().setHost(getEntity().getDisplayIp());
    getspice().setSmartcardEnabled(getEntity().isSmartcardEnabled());
    getspice().setPort((getEntity().getDisplay() == null ? 0 : getEntity().getDisplay()));
    getspice().setPassword(ticket);
    getspice().setNumberOfMonitors(getEntity().getNumOfMonitors());
    // $NON-NLS-1$
    getspice().setGuestHostName(getEntity().getVmHost().split("[ ]", -1)[0]);
    if (getEntity().getDisplaySecurePort() != null) {
        getspice().setSecurePort(getEntity().getDisplaySecurePort());
    }
    if (!StringHelper.isNullOrEmpty(spiceSecureChannels)) {
        getspice().setSslChanels(spiceSecureChannels);
    }
    if (!StringHelper.isNullOrEmpty(cipherSuite)) {
        getspice().setCipherSuite(cipherSuite);
    }
    getspice().setHostSubject(certificateSubject);
    getspice().setTrustStore(caCertificate);
    String toggleFullScreenKeys = (String) returnValues.get(6).getReturnValue();
    String releaseCursorKeys = (String) returnValues.get(7).getReturnValue();
    // $NON-NLS-1$
    String ctrlAltDel = "ctrl+alt+del";
    // $NON-NLS-1$
    String ctrlAltEnd = "ctrl+alt+end";
    String toggleFullScreenKeysTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource((toggleFullScreenKeys != null) ? toggleFullScreenKeys : // $NON-NLS-1$
    "shift+f11");
    String releaseCursorKeysTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource((releaseCursorKeys != null) ? releaseCursorKeys : // $NON-NLS-1$
    "shift+f12");
    String ctrlAltDelTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource(ctrlAltDel);
    String ctrlAltEndTranslated = AsyncDataProvider.GetComplexValueFromSpiceRedKeysResource(ctrlAltEnd);
    getspice().setTitle(getEntity().getName() + // $NON-NLS-1$
    ":%d" + (StringHelper.isNullOrEmpty(releaseCursorKeysTranslated) ? "" : (// $NON-NLS-1$ //$NON-NLS-2$
    " - " + ConstantsManager.getInstance().getMessages().pressKeyToReleaseCursor(releaseCursorKeysTranslated))));
    // setup spice proxy - for now always the default
    String spiceProxy = (String) AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.SpiceProxyDefault);
    // $NON-NLS-1$
    spiceProxy = "".equals(spiceProxy) ? null : spiceProxy;
    getspice().setSpiceProxy(spiceProxy);
    // If 'AdminConsole' is true, send true; otherwise, false should be sent only for VMs with SPICE driver
    // installed.
    getspice().setAdminConsole(getConfigurator().getSpiceAdminConsole() ? true : !getEntity().getHasSpiceDriver());
    // Update 'UsbListenPort' value
    getspice().setUsbListenPort(getConfigurator().getIsUsbEnabled() && getEntity().getUsbPolicy() == UsbPolicy.ENABLED_LEGACY ? getConfigurator().getSpiceDefaultUsbPort() : getConfigurator().getSpiceDisableUsbListenPort());
    getspice().setToggleFullscreenHotKey(toggleFullScreenKeys);
    getspice().setReleaseCursorHotKey(releaseCursorKeys);
    getspice().setLocalizedStrings(new String[] { ConstantsManager.getInstance().getConstants().usb(), ConstantsManager.getInstance().getConstants().usbDevicesNoUsbdevicesClientSpiceUsbRedirectorNotInstalled() });
    // Create menu.
    int id = 1;
    menu = new SpiceMenu();
    menu.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_SEND_CTRL_ALT_DEL, ConstantsManager.getInstance().getConstants().send() + " " + // $NON-NLS-1$
    ctrlAltDelTranslated + "\t" + ctrlAltEndTranslated, // $NON-NLS-1$ //$NON-NLS-2$
    ""));
    menu.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_TOGGLE_FULL_SCREEN, ConstantsManager.getInstance().getConstants().toggleFullScreen() + // $NON-NLS-1$
    "\t" + toggleFullScreenKeysTranslated, // $NON-NLS-1$
    ""));
    SpiceMenuContainerItem specialKes = new SpiceMenuContainerItem(id, ConstantsManager.getInstance().getConstants().specialKeys());
    menu.getItems().add(specialKes);
    specialKes.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_SEND_SHIFT_F11, toggleFullScreenKeysTranslated, // $NON-NLS-1$
    ""));
    specialKes.getItems().add(// $NON-NLS-1$
    new SpiceMenuCommandItem(ID_SYS_MENU_SEND_SHIFT_F12, releaseCursorKeysTranslated, ""));
    specialKes.getItems().add(new SpiceMenuCommandItem(ID_SYS_MENU_SEND_CTRL_ALT_END, ctrlAltEndTranslated, // $NON-NLS-1$
    ""));
    menu.getItems().add(new SpiceMenuSeparatorItem(id));
    id++;
    SpiceMenuContainerItem changeCDItem = new SpiceMenuContainerItem(id, ConstantsManager.getInstance().getConstants().changeCd());
    id++;
    ArrayList<String> isos = new ArrayList<String>();
    if (returnValues.size() > 8) {
        ArrayList<RepoFileMetaData> repoList = (ArrayList<RepoFileMetaData>) returnValues.get(8).getReturnValue();
        for (RepoFileMetaData RepoFileMetaData : repoList) {
            isos.add(RepoFileMetaData.getRepoFileName());
        }
    }
    isos = isos.size() > 0 ? isos : new ArrayList<String>(Arrays.asList(new String[] { ConstantsManager.getInstance().getConstants().noCds() }));
    Collections.sort(isos);
    for (String fileName : isos) {
        changeCDItem.getItems().add(new SpiceMenuCommandItem(id, fileName, CommandChangeCD));
        id++;
    }
    changeCDItem.getItems().add(new SpiceMenuCommandItem(id, EjectLabel, CommandChangeCD));
    id++;
    menu.getItems().add(changeCDItem);
    menu.getItems().add(new SpiceMenuSeparatorItem(id));
    id++;
    menu.getItems().add(new SpiceMenuCommandItem(id, ConstantsManager.getInstance().getConstants().playSpiceConsole(), CommandPlay));
    id++;
    menu.getItems().add(new SpiceMenuCommandItem(id, ConstantsManager.getInstance().getConstants().suspendSpiceConsole(), CommandSuspend));
    id++;
    menu.getItems().add(new SpiceMenuCommandItem(id, ConstantsManager.getInstance().getConstants().stopSpiceConsole(), CommandStop));
    getspice().setMenu(menu.toString());
    getspice().setGuestID(getEntity().getId().toString());
    // Subscribe to events.
    getspice().getDisconnectedEvent().addListener(this);
    getspice().getMenuItemSelectedEvent().addListener(this);
    if (StringHelper.isNullOrEmpty(getEntity().getDisplayIp()) || // $NON-NLS-1$
    StringHelper.stringsEqual(getEntity().getDisplayIp(), "0")) {
        determineIpAndConnect(getEntity().getId());
    } else {
        // Try to connect.
        SpiceConnect();
    }
}
#end_block

#method_before
public void PostSendVmTicket(VdcReturnValueBase returnValue) {
    if (returnValue == null || !returnValue.getSucceeded()) {
        return;
    }
    ticket = (String) returnValue.getActionReturnValue();
    // we attempt to perform SSO (otherwise an error will be thrown)
    if (!getConfigurator().getIsAdmin() && getEntity().getHasAgent() && getEntity().getStatus() == VMStatus.Up) {
        getLogger().Info(// $NON-NLS-1$
        "SpiceConsoleManager::Connect: Attempting to perform SSO on Desktop " + getEntity().getVmName());
        Frontend.RunAction(VdcActionType.VmLogon, new VmOperationParameterBase(getEntity().getId()), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                final SpiceConsoleModel spiceConsoleModel = (SpiceConsoleModel) result.getState();
                final VdcReturnValueBase logonCommandReturnValue = result.getReturnValue();
                boolean isLogonSucceeded = logonCommandReturnValue != null && logonCommandReturnValue.getSucceeded();
                if (isLogonSucceeded) {
                    spiceConsoleModel.ExecuteQuery(getEntity());
                } else {
                    if (logonCommandReturnValue != null && logonCommandReturnValue.getFault().getError() == VdcBllErrors.nonresp) {
                        UICommand okCommand = new UICommand("SpiceWithoutAgentOK", new // $NON-NLS-1$
                        BaseCommandTarget() {

                            @Override
                            public void ExecuteCommand(UICommand uiCommand) {
                                logSsoOnDesktopFailedAgentNonResp(spiceConsoleModel.getLogger(), logonCommandReturnValue != null ? logonCommandReturnValue.getDescription() : // $NON-NLS-1$
                                "");
                                spiceConsoleModel.ExecuteQuery(getEntity());
                                parentModel.setWindow(null);
                            }
                        });
                        UICommand cancelCommand = new UICommand("SpiceWithoutAgentCancel", new // $NON-NLS-1$
                        BaseCommandTarget() {

                            @Override
                            public void ExecuteCommand(UICommand uiCommand) {
                                parentModel.setWindow(null);
                            }
                        });
                        createConnectWithoutAgentConfirmationPopup(okCommand, cancelCommand);
                    } else {
                        logSsoOnDesktopFailed(spiceConsoleModel.getLogger(), logonCommandReturnValue != null ? logonCommandReturnValue.getDescription() : // $NON-NLS-1$
                        "");
                    }
                }
            }
        }, this);
    } else {
        ExecuteQuery(getEntity());
    }
}
#method_after
public void PostSendVmTicket(VdcReturnValueBase returnValue) {
    if (returnValue == null || !returnValue.getSucceeded()) {
        return;
    }
    ticket = (String) returnValue.getActionReturnValue();
    // we attempt to perform SSO (otherwise an error will be thrown)
    if (!getConfigurator().getIsAdmin() && getEntity().getHasAgent() && getEntity().getStatus() == VMStatus.Up) {
        getLogger().Info(// $NON-NLS-1$
        "SpiceConsoleManager::Connect: Attempting to perform SSO on Desktop " + getEntity().getName());
        Frontend.RunAction(VdcActionType.VmLogon, new VmOperationParameterBase(getEntity().getId()), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                final SpiceConsoleModel spiceConsoleModel = (SpiceConsoleModel) result.getState();
                final VdcReturnValueBase logonCommandReturnValue = result.getReturnValue();
                boolean isLogonSucceeded = logonCommandReturnValue != null && logonCommandReturnValue.getSucceeded();
                if (isLogonSucceeded) {
                    spiceConsoleModel.ExecuteQuery(getEntity());
                } else {
                    if (logonCommandReturnValue != null && logonCommandReturnValue.getFault().getError() == VdcBllErrors.nonresp) {
                        UICommand okCommand = new UICommand("SpiceWithoutAgentOK", new // $NON-NLS-1$
                        BaseCommandTarget() {

                            @Override
                            public void ExecuteCommand(UICommand uiCommand) {
                                logSsoOnDesktopFailedAgentNonResp(spiceConsoleModel.getLogger(), logonCommandReturnValue != null ? logonCommandReturnValue.getDescription() : // $NON-NLS-1$
                                "");
                                spiceConsoleModel.ExecuteQuery(getEntity());
                                parentModel.setWindow(null);
                            }
                        });
                        UICommand cancelCommand = new UICommand("SpiceWithoutAgentCancel", new // $NON-NLS-1$
                        BaseCommandTarget() {

                            @Override
                            public void ExecuteCommand(UICommand uiCommand) {
                                parentModel.setWindow(null);
                            }
                        });
                        createConnectWithoutAgentConfirmationPopup(okCommand, cancelCommand);
                    } else {
                        logSsoOnDesktopFailed(spiceConsoleModel.getLogger(), logonCommandReturnValue != null ? logonCommandReturnValue.getDescription() : // $NON-NLS-1$
                        "");
                    }
                }
            }
        }, this);
    } else {
        ExecuteQuery(getEntity());
    }
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel window = new ConfirmationModel();
    setWindow(window);
    window.setTitle(ConstantsManager.getInstance().getConstants().removeVirtualMachinesTitle());
    // $NON-NLS-1$
    window.setHashName("remove_virtual_machine");
    window.setMessage(ConstantsManager.getInstance().getConstants().virtualMachinesMsg());
    vmsRemoveMap = new HashMap<Guid, EntityModel>();
    for (Object selectedItem : getSelectedItems()) {
        VM vm = (VM) selectedItem;
        EntityModel removeDisksCheckbox = new EntityModel(true);
        removeDisksCheckbox.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
        removeDisksCheckbox.setMessage(vm.getVmName());
        if (!NGuid.Empty.equals(vm.getVmtGuid())) {
            updateRemoveDisksCheckBox(removeDisksCheckbox, true, false, ConstantsManager.getInstance().getConstants().removeVmDisksTemplateMsg());
        }
        vmsRemoveMap.put(vm.getId(), removeDisksCheckbox);
    }
    window.setItems(vmsRemoveMap.entrySet());
    initRemoveDisksCheckboxes(vmsRemoveMap);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    window.getCommands().add(tempVar2);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel window = new ConfirmationModel();
    setWindow(window);
    window.setTitle(ConstantsManager.getInstance().getConstants().removeVirtualMachinesTitle());
    // $NON-NLS-1$
    window.setHashName("remove_virtual_machine");
    window.setMessage(ConstantsManager.getInstance().getConstants().virtualMachinesMsg());
    vmsRemoveMap = new HashMap<Guid, EntityModel>();
    for (Object selectedItem : getSelectedItems()) {
        VM vm = (VM) selectedItem;
        EntityModel removeDisksCheckbox = new EntityModel(true);
        removeDisksCheckbox.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
        removeDisksCheckbox.setMessage(vm.getName());
        if (!NGuid.Empty.equals(vm.getVmtGuid())) {
            updateRemoveDisksCheckBox(removeDisksCheckbox, true, false, ConstantsManager.getInstance().getConstants().removeVmDisksTemplateMsg());
        }
        vmsRemoveMap.put(vm.getId(), removeDisksCheckbox);
    }
    window.setItems(vmsRemoveMap.entrySet());
    initRemoveDisksCheckboxes(vmsRemoveMap);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    window.getCommands().add(tempVar2);
}
#end_block

#method_before
private void updateRemoveDisksCheckBox(EntityModel model, boolean deleteDisks, boolean isChangable, String changeProhibitionReason) {
    model.setEntity(deleteDisks);
    if (!isChangable && changeProhibitionReason != null) {
        model.getChangeProhibitionReasons().add(changeProhibitionReason);
    }
    model.setIsChangable(isChangable);
}
#method_after
private void updateRemoveDisksCheckBox(EntityModel model, boolean deleteDisks, boolean isChangable, String changeProhibitionReason) {
    model.setEntity(deleteDisks);
    if (!isChangable && changeProhibitionReason != null) {
        model.setChangeProhibitionReason(changeProhibitionReason);
    }
    model.setIsChangable(isChangable);
}
#end_block

#method_before
@Override
protected String extractNameFromEntity(VM entity) {
    return entity.getVmName();
}
#method_after
@Override
protected String extractNameFromEntity(VM entity) {
    return entity.getName();
}
#end_block

#method_before
private void GetTemplatesNotPresentOnExportDomain() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            ArrayList<storage_pool> storagePools = (ArrayList<storage_pool>) returnValue;
            storage_pool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
            vmListModel.PostGetTemplatesNotPresentOnExportDomain(storagePool);
        }
    }), storageDomainId);
}
#method_after
private void GetTemplatesNotPresentOnExportDomain() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            ArrayList<storage_pool> storagePools = (ArrayList<storage_pool>) returnValue;
            storage_pool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
            vmListModel.PostGetTemplatesNotPresentOnExportDomain(storagePool);
        }
    }), storageDomainId);
}
#end_block

#method_before
private void PostGetTemplatesNotPresentOnExportDomain(storage_pool storagePool) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    if (storagePool != null) {
        AsyncDataProvider.GetAllTemplatesFromExportDomain(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                VmListModel vmListModel = (VmListModel) target;
                HashMap<VmTemplate, ArrayList<DiskImage>> templatesDiskSet = (HashMap<VmTemplate, ArrayList<DiskImage>>) returnValue;
                HashMap<String, ArrayList<String>> templateDic = new HashMap<String, ArrayList<String>>();
                // check if relevant templates are already there
                for (Object selectedItem : vmListModel.getSelectedItems()) {
                    VM vm = (VM) selectedItem;
                    boolean hasMatch = false;
                    for (VmTemplate a : templatesDiskSet.keySet()) {
                        if (vm.getVmtGuid().equals(a.getId())) {
                            hasMatch = true;
                            break;
                        }
                    }
                    if (!vm.getVmtGuid().equals(NGuid.Empty) && !hasMatch) {
                        if (!templateDic.containsKey(vm.getVmtName())) {
                            templateDic.put(vm.getVmtName(), new ArrayList<String>());
                        }
                        templateDic.get(vm.getVmtName()).add(vm.getVmName());
                    }
                }
                String tempStr;
                ArrayList<String> tempList;
                ArrayList<String> missingTemplates = new ArrayList<String>();
                for (Map.Entry<String, ArrayList<String>> keyValuePair : templateDic.entrySet()) {
                    tempList = keyValuePair.getValue();
                    // $NON-NLS-1$ //$NON-NLS-2$
                    tempStr = "Template " + keyValuePair.getKey() + " (for ";
                    int i;
                    for (i = 0; i < tempList.size() - 1; i++) {
                        // $NON-NLS-1$
                        tempStr += tempList.get(i) + ", ";
                    }
                    // $NON-NLS-1$
                    tempStr += tempList.get(i) + ")";
                    missingTemplates.add(tempStr);
                }
                vmListModel.PostExportGetMissingTemplates(missingTemplates);
            }
        }), storagePool.getId(), storageDomainId);
    }
}
#method_after
private void PostGetTemplatesNotPresentOnExportDomain(storage_pool storagePool) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    if (storagePool != null) {
        AsyncDataProvider.GetAllTemplatesFromExportDomain(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                VmListModel vmListModel = (VmListModel) target;
                HashMap<VmTemplate, ArrayList<DiskImage>> templatesDiskSet = (HashMap<VmTemplate, ArrayList<DiskImage>>) returnValue;
                HashMap<String, ArrayList<String>> templateDic = new HashMap<String, ArrayList<String>>();
                // check if relevant templates are already there
                for (Object selectedItem : vmListModel.getSelectedItems()) {
                    VM vm = (VM) selectedItem;
                    boolean hasMatch = false;
                    for (VmTemplate a : templatesDiskSet.keySet()) {
                        if (vm.getVmtGuid().equals(a.getId())) {
                            hasMatch = true;
                            break;
                        }
                    }
                    if (!vm.getVmtGuid().equals(NGuid.Empty) && !hasMatch) {
                        if (!templateDic.containsKey(vm.getVmtName())) {
                            templateDic.put(vm.getVmtName(), new ArrayList<String>());
                        }
                        templateDic.get(vm.getVmtName()).add(vm.getName());
                    }
                }
                String tempStr;
                ArrayList<String> tempList;
                ArrayList<String> missingTemplates = new ArrayList<String>();
                for (Map.Entry<String, ArrayList<String>> keyValuePair : templateDic.entrySet()) {
                    tempList = keyValuePair.getValue();
                    // $NON-NLS-1$ //$NON-NLS-2$
                    tempStr = "Template " + keyValuePair.getKey() + " (for ";
                    int i;
                    for (i = 0; i < tempList.size() - 1; i++) {
                        // $NON-NLS-1$
                        tempStr += tempList.get(i) + ", ";
                    }
                    // $NON-NLS-1$
                    tempStr += tempList.get(i) + ")";
                    missingTemplates.add(tempStr);
                }
                vmListModel.PostExportGetMissingTemplates(missingTemplates);
            }
        }), storagePool.getId(), storageDomainId);
    }
}
#end_block

#method_before
private void PostExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    model.StopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveVmParameters parameter = new MoveVmParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameter.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!(Boolean) model.getCollapseSnapshots().getEntity()) {
        if ((missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0)) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnExportNoTemplates", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("CancelConfirmation", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                @Override
                public void Executed(FrontendMultipleActionAsyncResult result) {
                    ExportVmModel localModel = (ExportVmModel) result.getState();
                    localModel.StopProgress();
                    Cancel();
                }
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveVmParameters parameter = (MoveVmParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.StartProgress(null);
        Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleActionAsyncResult result) {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.StopProgress();
                Cancel();
            }
        }, model);
    }
}
#method_after
private void PostExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    model.StopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveVmParameters parameter = new MoveVmParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameter.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!(Boolean) model.getCollapseSnapshots().getEntity()) {
        if ((missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0)) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnExportNoTemplates", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("CancelConfirmation", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                @Override
                public void Executed(FrontendMultipleActionAsyncResult result) {
                    ExportVmModel localModel = (ExportVmModel) result.getState();
                    localModel.StopProgress();
                    Cancel();
                }
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveVmParameters parameter = (MoveVmParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.StartProgress(null);
        Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleActionAsyncResult result) {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.StopProgress();
                Cancel();
            }
        }, model);
    }
}
#end_block

#method_before
public void OnExport() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    if (!model.Validate()) {
        return;
    }
    model.StartProgress(null);
    GetTemplatesNotPresentOnExportDomain();
}
#method_after
public void OnExport() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    if (!model.Validate()) {
        return;
    }
    model.StartProgress(null);
    GetTemplatesNotPresentOnExportDomain();
}
#end_block

#method_before
private void OnExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveVmParameters parameters = new MoveVmParameters(a.getId(), storageDomainId);
        parameters.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameters.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ExportVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#method_after
private void OnExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveVmParameters parameters = new MoveVmParameters(a.getId(), storageDomainId);
        parameters.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameters.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ExportVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#end_block

#method_before
@Override
protected void sendWarningForNonExportableDisks(VM entity) {
    // load VM disks and check if there is one which doesn't allow snapshot
    AsyncDataProvider.GetVmDiskList(new AsyncQuery((ExportVmModel) getWindow(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final ExportVmModel model = (ExportVmModel) target;
            @SuppressWarnings("unchecked")
            final ArrayList<Disk> diskList = (ArrayList<Disk>) returnValue;
            // filter non-exportable disks
            final List<String> list = new ArrayList<String>();
            for (Disk disk : diskList) {
                if (!disk.isAllowSnapshot()) {
                    list.add(disk.getDiskAlias());
                }
            }
            if (!list.isEmpty()) {
                // $NON-NLS-1$
                final String s = StringUtils.join(list, ", ");
                // append warning message
                model.setMessage(ConstantsManager.getInstance().getMessages().disksWillNotBePartOfTheExportedVM(s));
            }
        }
    }), entity.getId());
}
#method_after
@Override
protected void sendWarningForNonExportableDisks(VM entity) {
    // load VM disks and check if there is one which doesn't allow snapshot
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(getWindow(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final ExportVmModel model = (ExportVmModel) target;
            @SuppressWarnings("unchecked")
            final ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            VmModelHelper.sendWarningForNonExportableDisks(model, vmDisks, VmModelHelper.WarningType.VM_EXPORT);
        }
    }), entity.getId());
}
#end_block

#method_before
private void RunOnceUpdateBootSequence(VM vm) {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            VmListModel vmListModel = (VmListModel) model;
            RunOnceModel runOnceModel = (RunOnceModel) vmListModel.getWindow();
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = runOnceModel.getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery);
    setIsBootFromHardDiskAllowedForVm(vm);
}
#method_after
private void RunOnceUpdateBootSequence(VM vm) {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            VmListModel vmListModel = (VmListModel) model;
            RunOnceModel runOnceModel = (RunOnceModel) vmListModel.getWindow();
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = runOnceModel.getBootSequence();
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
                bootSequenceModel.getNetworkOption().setIsChangable(false);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery);
    setIsBootFromHardDiskAllowedForVm(vm);
}
#end_block

#method_before
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            VmListModel userPortalListModel = (VmListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#method_after
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            VmListModel userPortalListModel = (VmListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#end_block

#method_before
private void RunOnceLoadHosts(VM vm) {
    RunOnceModel model = (RunOnceModel) getWindow();
    // append just active hosts
    AsyncDataProvider.GetHostListByCluster(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final RunOnceModel model = (RunOnceModel) target;
            final List<VDS> hosts = (ArrayList<VDS>) returnValue;
            final List<VDS> activeHosts = new ArrayList<VDS>();
            for (VDS host : hosts) {
                if (VDSStatus.Up.equals(host.getstatus())) {
                    activeHosts.add(host);
                }
            }
            model.getDefaultHost().setItems(activeHosts);
            // hide host tab when no active host is available
            if (activeHosts.isEmpty()) {
                model.setIsHostTabVisible(false);
            }
        }
    }), vm.getVdsGroupName());
}
#method_after
private void RunOnceLoadHosts(VM vm) {
    RunOnceModel model = (RunOnceModel) getWindow();
    // append just active hosts
    AsyncDataProvider.GetHostListByCluster(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final RunOnceModel model = (RunOnceModel) target;
            final List<VDS> hosts = (ArrayList<VDS>) returnValue;
            final List<VDS> activeHosts = new ArrayList<VDS>();
            for (VDS host : hosts) {
                if (VDSStatus.Up.equals(host.getStatus())) {
                    activeHosts.add(host);
                }
            }
            model.getDefaultHost().setItems(activeHosts);
            // hide host tab when no active host is available
            if (activeHosts.isEmpty()) {
                model.setIsHostTabVisible(false);
            }
        }
    }), vm.getVdsGroupName());
}
#end_block

#method_before
private void Shutdown() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().shutdownVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("shut_down_virtual_machine");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToShutDownTheFollowingVirtualMachinesMsg());
    // model.Items = SelectedItems.Cast<VM>().Select(a => a.vm_name);
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        items.add(a.getVmName());
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnShutdown", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void Shutdown() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().shutdownVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("shut_down_virtual_machine");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToShutDownTheFollowingVirtualMachinesMsg());
    // model.Items = SelectedItems.Cast<VM>().Select(a => a.vm_name);
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        items.add(a.getName());
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnShutdown", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void stop() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().stopVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("stop_virtual_machine");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToStopTheFollowingVirtualMachinesMsg());
    // model.Items = SelectedItems.Cast<VM>().Select(a => a.vm_name);
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        items.add(a.getVmName());
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnStop", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void stop() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().stopVirtualMachinesTitle());
    // $NON-NLS-1$
    model.setHashName("stop_virtual_machine");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToStopTheFollowingVirtualMachinesMsg());
    // model.Items = SelectedItems.Cast<VM>().Select(a => a.vm_name);
    ArrayList<String> items = new ArrayList<String>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        items.add(a.getName());
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnStop", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = (String) model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        Cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    if (!model.Validate()) {
        return;
    }
    AsyncDataProvider.IsVmNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            if (!(Boolean) returnValue && name.compareToIgnoreCase(getcurrentVm().getVmName()) != 0) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setIsGeneralTabValid(false);
            } else {
                model.getName().getInvalidityReasons().clear();
                model.getName().setIsValid(true);
                model.setIsGeneralTabValid(true);
                onSave();
            }
        }
    }), name);
}
#method_after
private void preSave() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    final String name = (String) model.getName().getEntity();
    if (model.getIsNew() == false && selectedItem == null) {
        Cancel();
        return;
    }
    setcurrentVm(model.getIsNew() ? new VM() : (VM) Cloner.clone(selectedItem));
    if (!model.Validate()) {
        return;
    }
    AsyncDataProvider.IsVmNameUnique(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            if (!(Boolean) returnValue && name.compareToIgnoreCase(getcurrentVm().getName()) != 0) {
                model.getName().getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason());
                model.getName().setIsValid(false);
                model.setIsGeneralTabValid(false);
            } else {
                model.getName().getInvalidityReasons().clear();
                model.getName().setIsValid(true);
                model.setIsGeneralTabValid(true);
                onSave();
            }
        }
    }), name);
}
#end_block

#method_before
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setVmName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<storage_domains> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            storage_domains storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getstorage_ids().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setvolume_type((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolume_format(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getstorage_type()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                boolean isSucceeded = retVal.getSucceeded();
                                if (retVal != null && isSucceeded) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#method_after
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else {
        getcurrentVm().setUseHostCpuFlags(Boolean.FALSE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                if (retVal != null && retVal.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#method_after
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CreateAllSnapshotsFromVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.equals(ChangeCDModel.ExecutedEventDefinition)) {
        changeCD(sender, args);
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(ChangeCDModel.ExecutedEventDefinition)) {
        changeCD(sender, args);
    }
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (command.getName().equals("closeVncInfo")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getCreateSnapshotCommand()) {
        CreateSnapshot();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        preSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (command.getName().equals("closeVncInfo")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
public static void GetIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
                for (storage_domains domain : storageDomains) {
                    if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getIsoParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void GetIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getIsoParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void GetExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
            for (storage_domains domain : storageDomains) {
                if (domain.getstorage_domain_type() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getExportParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void GetExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getExportParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_domains>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(templateId), aQuery);
}
#method_after
public static void GetStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void GetStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_domains>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId), aQuery);
}
#method_after
public static void GetStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId), aQuery);
}
#end_block

#method_before
public static void GetStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (storage_domains) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(storageDomainId), aQuery);
}
#method_after
public static void GetStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(storageDomainId), aQuery);
}
#end_block

#method_before
public static void GetDiskPresetList(AsyncQuery aQuery, StorageType storageType) {
    aQuery.setData(new Object[] { storageType });
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return null;
            }
            ArrayList<DiskImageBase> list = new ArrayList<DiskImageBase>();
            StorageType storageType = (StorageType) _asyncQuery.Data[0];
            boolean hasBootDisk = false;
            for (DiskImageBase disk : (ArrayList<DiskImageBase>) source) {
                if (!hasBootDisk) {
                    disk.setBoot(true);
                    hasBootDisk = true;
                }
                disk.setvolume_type(storageType == StorageType.ISCSI || storageType == StorageType.FCP ? VolumeType.Preallocated : VolumeType.Sparse);
                disk.setvolume_format(GetDiskVolumeFormat(disk.getvolume_type(), storageType));
                list.add(disk);
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetDiskConfigurationList, new VdcQueryParametersBase(), aQuery);
}
#method_after
public static void GetDiskPresetList(AsyncQuery aQuery, StorageType storageType) {
    aQuery.setData(new Object[] { storageType });
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return null;
            }
            ArrayList<DiskImageBase> list = new ArrayList<DiskImageBase>();
            StorageType storageType = (StorageType) _asyncQuery.Data[0];
            boolean hasBootDisk = false;
            for (DiskImageBase disk : (ArrayList<DiskImageBase>) source) {
                if (!hasBootDisk) {
                    disk.setBoot(true);
                    hasBootDisk = true;
                }
                disk.setVolumeType(storageType == StorageType.ISCSI || storageType == StorageType.FCP ? VolumeType.Preallocated : VolumeType.Sparse);
                disk.setvolumeFormat(GetDiskVolumeFormat(disk.getVolumeType(), storageType));
                list.add(disk);
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetDiskConfigurationList, new VdcQueryParametersBase(), aQuery);
}
#end_block

#method_before
public static void GetDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_pool>();
            }
            return source;
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void GetDataCentersWithPermittedActionOnClusters(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_pool>();
            }
            return source;
        }
    };
    GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new GetDataCentersWithPermittedActionOnClustersParameters();
    getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService);
    getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService);
    Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery);
}
#end_block

#method_before
public static void GetClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                Collections.sort(list, new Linq.VdsGroupByNameComparer());
                return list;
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void GetClustersWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDSGroup> list = (ArrayList<VDSGroup>) source;
                return getClusterByServiceList(list, supportsVirtService, supportsGlusterService);
            }
            return new ArrayList<VDSGroup>();
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetClustersWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
public static void GetISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> allStorageDomains = (ArrayList<storage_domains>) source;
                ArrayList<storage_domains> isoStorageDomains = new ArrayList<storage_domains>();
                for (storage_domains storageDomain : allStorageDomains) {
                    if (storageDomain.getstorage_domain_type() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<storage_domains>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void GetISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : new ArrayList<storage_domains>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void GetStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainsByConnection(AsyncQuery aQuery, NGuid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId.getValue());
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void GetStorageDomainsByConnection(AsyncQuery aQuery, NGuid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId.getValue());
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void GetExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, StorageType.NFS, domainType, path), aQuery);
}
#method_after
public static void GetExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, StorageType.NFS, domainType, path), aQuery);
}
#end_block

#method_before
public static void IsStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void IsStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
    "Host: cluster = " + clusterName + " and status = up", SearchType.VDS), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    GetUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
    "Host: cluster = " + clusterName + " and status = up", SearchType.VDS), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void GetPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<storage_domains>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void GetPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static void GetInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        ArrayList<InterfaceAndIdQueryParameters> parametersList = new ArrayList<InterfaceAndIdQueryParameters>();
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        GetAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    ArrayList<VdsNetworkInterface> childVlanInterfaces = new ArrayList<VdsNetworkInterface>();
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        GetVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    InterfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // ifacesOptions.AddRange(interfaceList.Where(a => a.bond_name == vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                        }
                    }));
                } else {
                    // the vlanParent should already be in ifacesOptions
                    // (since it has no network_name or bond_name).
                    defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                }
            }
        }));
    }
}
#method_after
public static void GetInterfaceOptionsForEditNetwork(final AsyncQuery asyncQuery, final ArrayList<VdsNetworkInterface> interfaceList, final VdsNetworkInterface originalInterface, Network networkToEdit, final Guid vdsID, final StringBuilder defaultInterfaceName) {
    final ArrayList<VdsNetworkInterface> ifacesOptions = new ArrayList<VdsNetworkInterface>();
    for (VdsNetworkInterface i : interfaceList) {
        if (StringHelper.isNullOrEmpty(i.getNetworkName()) && StringHelper.isNullOrEmpty(i.getBondName())) {
            ifacesOptions.add(i);
        }
    }
    if (// no vlan:
    originalInterface.getVlanId() == null) {
        // Filter out the Interfaces that have child vlan Interfaces
        GetAllChildVlanInterfaces(vdsID, ifacesOptions, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleQueryAsyncResult result) {
                ArrayList<VdsNetworkInterface> ifacesOptionsTemp = new ArrayList<VdsNetworkInterface>();
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                for (int i = 0; i < returnValueList.size(); i++) {
                    VdcQueryReturnValue returnValue = returnValueList.get(i);
                    if (returnValue != null && returnValue.getSucceeded() && returnValue.getReturnValue() != null) {
                        ArrayList<VdsNetworkInterface> childVlanInterfaces = (ArrayList<VdsNetworkInterface>) (returnValue.getReturnValue());
                        if (childVlanInterfaces.size() == 0) {
                            ifacesOptionsTemp.add(ifacesOptions.get(i));
                        }
                    }
                }
                ifacesOptions.clear();
                ifacesOptions.addAll(ifacesOptionsTemp);
                if (originalInterface.getBonded() != null && originalInterface.getBonded()) {
                    // (note that choosing one of them will break the bond):
                    for (VdsNetworkInterface i : interfaceList) {
                        if (StringHelper.stringsEqual(i.getBondName(), originalInterface.getName())) {
                            ifacesOptions.add(i);
                        }
                    }
                }
                // add the original interface as an option and set it as the default option:
                ifacesOptions.add(originalInterface);
                defaultInterfaceName.append(originalInterface.getName());
                asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
            }
        });
    } else // vlan:
    {
        GetVlanParentInterface(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                final VdsNetworkInterface vlanParent = (VdsNetworkInterface) returnValue;
                if (vlanParent != null && vlanParent.getBonded() != null && vlanParent.getBonded()) {
                    InterfaceHasSiblingVlanInterfaces(vdsID, originalInterface, new AsyncQuery(asyncQuery, new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model, Object returnValue) {
                            Boolean interfaceHasSiblingVlanInterfaces = (Boolean) returnValue;
                            if (!interfaceHasSiblingVlanInterfaces) {
                                // ifacesOptions.AddRange(interfaceList.Where(a => a.bond_name == vlanParent.name).ToList());
                                for (VdsNetworkInterface i : interfaceList) {
                                    if (StringHelper.stringsEqual(i.getBondName(), vlanParent.getName())) {
                                        ifacesOptions.add(i);
                                    }
                                }
                            }
                            // the vlanParent should already be in ifacesOptions
                            // (since it has no network_name or bond_name).
                            defaultInterfaceName.append(vlanParent.getName());
                            asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                        }
                    }));
                } else {
                    // (since it has no network_name or bond_name).
                    if (vlanParent != null)
                        defaultInterfaceName.append(vlanParent.getName());
                    asyncQuery.asyncCallback.OnSuccess(asyncQuery.Model, ifacesOptions);
                }
            }
        }));
    }
}
#end_block

#method_before
private static void InterfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = new ArrayList<VdsNetworkInterface>();
            siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#method_after
private static void InterfaceHasSiblingVlanInterfaces(Guid vdsID, VdsNetworkInterface iface, AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VdsNetworkInterface> siblingVlanInterfaces = (ArrayList<VdsNetworkInterface>) source;
            if (siblingVlanInterfaces.size() > 0) {
                return true;
            }
            return false;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllSiblingVlanInterfaces, new InterfaceAndIdQueryParameters(vdsID, iface), aQuery);
}
#end_block

#method_before
public static Guid GetEntityGuid(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getId();
    } else if (entity instanceof storage_pool) {
        return ((storage_pool) entity).getId();
    } else if (entity instanceof VDSGroup) {
        return ((VDSGroup) entity).getId();
    } else if (entity instanceof VDS) {
        return ((VDS) entity).getId();
    } else if (entity instanceof storage_domains) {
        return ((storage_domains) entity).getId();
    } else if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getId();
    } else if (entity instanceof vm_pools) {
        return ((vm_pools) entity).getvm_pool_id();
    } else if (entity instanceof DbUser) {
        return ((DbUser) entity).getuser_id();
    } else if (entity instanceof Quota) {
        return ((Quota) entity).getId();
    } else if (entity instanceof DiskImage) {
        return ((DiskImage) entity).getId();
    } else if (entity instanceof GlusterVolumeEntity) {
        return ((GlusterVolumeEntity) entity).getId();
    } else if (entity instanceof Network) {
        return ((Network) entity).getId();
    }
    return new Guid();
}
#method_after
public static Guid GetEntityGuid(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getId();
    } else if (entity instanceof storage_pool) {
        return ((storage_pool) entity).getId();
    } else if (entity instanceof VDSGroup) {
        return ((VDSGroup) entity).getId();
    } else if (entity instanceof VDS) {
        return ((VDS) entity).getId();
    } else if (entity instanceof StorageDomain) {
        return ((StorageDomain) entity).getId();
    } else if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getId();
    } else if (entity instanceof VmPool) {
        return ((VmPool) entity).getVmPoolId();
    } else if (entity instanceof DbUser) {
        return ((DbUser) entity).getuser_id();
    } else if (entity instanceof Quota) {
        return ((Quota) entity).getId();
    } else if (entity instanceof DiskImage) {
        return ((DiskImage) entity).getId();
    } else if (entity instanceof GlusterVolumeEntity) {
        return ((GlusterVolumeEntity) entity).getId();
    } else if (entity instanceof Network) {
        return ((Network) entity).getId();
    }
    return new Guid();
}
#end_block

#method_before
public static ArrayList<VmOsType> GetWindowsOsTypes() {
    if (windowsOsTypes != null) {
        return windowsOsTypes;
    }
    /**
     * ** TODO: remove once the gwt is using generic api instead of backend! ****
     */
    windowsOsTypes = new ArrayList<VmOsType>();
    for (VmOsType type : VmOsType.values()) {
        if (type.isWindows()) {
            windowsOsTypes.add(type);
        }
    }
    return windowsOsTypes;
/**
 * ***************************************************************************
 */
}
#method_after
public synchronized static ArrayList<VmOsType> GetWindowsOsTypes() {
    if (windowsOsTypes != null) {
        return windowsOsTypes;
    }
    /**
     * ** TODO: remove once the gwt is using generic api instead of backend! ****
     */
    windowsOsTypes = new ArrayList<VmOsType>();
    for (VmOsType type : VmOsType.values()) {
        if (type.isWindows()) {
            windowsOsTypes.add(type);
        }
    }
    return windowsOsTypes;
/**
 * ***************************************************************************
 */
}
#end_block

#method_before
@Override
public List<storage_pool> getDataCentersWithPermittedActionOnClusters(Guid userId, ActionGroup actionGroup) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId());
    StoragePoolRawMapper mapper = new StoragePoolRawMapper();
    return getCallsHandler().executeReadList("fn_perms_get_storage_pools_with_permitted_action_on_vds_groups", mapper, parameterSource);
}
#method_after
@Override
public List<storage_pool> getDataCentersWithPermittedActionOnClusters(Guid userId, ActionGroup actionGroup, boolean supportsVirtService, boolean supportsGlusterService) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId()).addValue("supports_virt_service", supportsVirtService).addValue("supports_gluster_service", supportsGlusterService);
    StoragePoolRawMapper mapper = new StoragePoolRawMapper();
    return getCallsHandler().executeReadList("fn_perms_get_storage_pools_with_permitted_action_on_vds_groups", mapper, parameterSource);
}
#end_block

#method_before
@Override
public void Initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.Initialize(systemTreeSelectedItem);
    AsyncDataProvider.GetDataCenterListByVirtService(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<storage_pool> list = new ArrayList<storage_pool>();
            for (storage_pool a : (ArrayList<storage_pool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    list.add(a);
                }
            }
            model.SetDataCenter(model, list);
        }
    }, getModel().getHash()));
}
#method_after
@Override
public void Initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.Initialize(systemTreeSelectedItem);
    AsyncDataProvider.GetDataCenterByClusterServiceList(new AsyncQuery(getModel(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            UnitVmModel model = (UnitVmModel) target;
            ArrayList<storage_pool> list = new ArrayList<storage_pool>();
            for (storage_pool a : (ArrayList<storage_pool>) returnValue) {
                if (a.getstatus() == StoragePoolStatus.Up) {
                    list.add(a);
                }
            }
            model.SetDataCenter(model, list);
        }
    }, getModel().getHash()), true, false);
    InitPriority(0);
}
#end_block

#method_before
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewVmModelBehavior behavior = (NewVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            // show just clusters with virt service enabled
            ArrayList<VDSGroup> virtServiceClusters = new ArrayList<VDSGroup>();
            for (VDSGroup cluster : clusters) {
                if (cluster.supportsVirtService()) {
                    virtServiceClusters.add(cluster);
                }
            }
            model.SetClusters(model, virtServiceClusters, null);
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId());
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#method_after
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterByServiceList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewVmModelBehavior behavior = (NewVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, null);
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId(), true, false);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
private void InitTemplate() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        storage_domains storage = (storage_domains) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.GetTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                storage_domains storage1 = (storage_domains) array1[1];
                AsyncDataProvider.GetTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.FirstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(NGuid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        behavior2.PostInitTemplate((ArrayList<VmTemplate>) returnValue2);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.GetTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                behavior.PostInitTemplate((ArrayList<VmTemplate>) returnValue);
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#method_after
private void InitTemplate() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.GetTemplateListByDataCenter(new AsyncQuery(new Object[] { this, storage }, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target1, Object returnValue1) {
                Object[] array1 = (Object[]) target1;
                NewVmModelBehavior behavior1 = (NewVmModelBehavior) array1[0];
                StorageDomain storage1 = (StorageDomain) array1[1];
                AsyncDataProvider.GetTemplateListByStorage(new AsyncQuery(new Object[] { behavior1, returnValue1 }, new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object target2, Object returnValue2) {
                        Object[] array2 = (Object[]) target2;
                        NewVmModelBehavior behavior2 = (NewVmModelBehavior) array2[0];
                        ArrayList<VmTemplate> templatesByDataCenter = (ArrayList<VmTemplate>) array2[1];
                        ArrayList<VmTemplate> templatesByStorage = (ArrayList<VmTemplate>) returnValue2;
                        VmTemplate blankTemplate = Linq.FirstOrDefault(templatesByDataCenter, new Linq.TemplatePredicate(NGuid.Empty));
                        if (blankTemplate != null) {
                            templatesByStorage.add(0, blankTemplate);
                        }
                        behavior2.PostInitTemplate((ArrayList<VmTemplate>) returnValue2);
                    }
                }), storage1.getId());
            }
        }, getModel().getHash()), dataCenter.getId());
    } else {
        AsyncDataProvider.GetTemplateListByDataCenter(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                NewVmModelBehavior behavior = (NewVmModelBehavior) target;
                behavior.PostInitTemplate((ArrayList<VmTemplate>) returnValue);
            }
        }, getModel().getHash()), dataCenter.getId());
    }
}
#end_block

#method_before
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            ExistingVmModelBehavior behavior = (ExistingVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            VM vm = ((ExistingVmModelBehavior) array[0]).vm;
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            // show just clusters with virt service enabled
            ArrayList<VDSGroup> virtServiceClusters = new ArrayList<VDSGroup>();
            for (VDSGroup cluster : clusters) {
                if (cluster.supportsVirtService()) {
                    virtServiceClusters.add(cluster);
                }
            }
            model.SetClusters(model, virtServiceClusters, vm.getVdsGroupId().getValue());
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId());
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#method_after
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterByServiceList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            ExistingVmModelBehavior behavior = (ExistingVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            VM vm = ((ExistingVmModelBehavior) array[0]).vm;
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, vm.getVdsGroupId().getValue());
            behavior.InitTemplate();
            behavior.InitCdImage();
        }
    }, getModel().getHash()), dataCenter.getId(), true, false);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
@Override
public void Template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getVmName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOs());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().setEntity(vm.getCustomProperties());
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    if (vm.isInitialized()) {
        getModel().getTimeZone().setIsChangable(false);
        getModel().getTimeZone().getChangeProhibitionReasons().add(// $NON-NLS-1$
        "Time Zone cannot be change since the Virtual Machine was booted at the first time.");
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    UpdateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    InitPriority(vm.getPriority());
}
#method_after
@Override
public void Template_SelectedItemChanged() {
    // This method will be called even if a VM created from Blank template.
    // Update model state according to VM properties.
    getModel().getName().setEntity(vm.getName());
    getModel().getDescription().setEntity(vm.getVmDescription());
    getModel().getMemSize().setEntity(vm.getVmMemSizeMb());
    getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem());
    getModel().getOSType().setSelectedItem(vm.getVmOs());
    getModel().getDomain().setSelectedItem(vm.getVmDomain());
    getModel().getUsbPolicy().setSelectedItem(vm.getUsbPolicy());
    getModel().getNumOfMonitors().setSelectedItem(vm.getNumOfMonitors());
    getModel().getAllowConsoleReconnect().setEntity(vm.getAllowConsoleReconnect());
    getModel().setBootSequence(vm.getDefaultBootSequence());
    getModel().getIsHighlyAvailable().setEntity(vm.isAutoStartup());
    getModel().getTotalCPUCores().setEntity(Integer.toString(vm.getNumOfCpus()));
    getModel().getTotalCPUCores().setIsChangable(!vm.isRunning());
    getModel().getIsStateless().setEntity(vm.isStateless());
    getModel().getIsStateless().setIsAvailable(vm.getVmPoolId() == null);
    getModel().getIsSmartcardEnabled().setEntity(vm.isSmartcardEnabled());
    getModel().getIsDeleteProtected().setEntity(vm.isDeleteProtected());
    getModel().getNumOfSockets().setSelectedItem(vm.getNumOfSockets());
    getModel().getNumOfSockets().setIsChangable(!vm.isRunning());
    getModel().getKernel_parameters().setEntity(vm.getKernelParams());
    getModel().getKernel_path().setEntity(vm.getKernelUrl());
    getModel().getInitrd_path().setEntity(vm.getInitrdUrl());
    getModel().getCustomProperties().setEntity(vm.getCustomProperties());
    getModel().getCustomPropertySheet().setEntity(vm.getCustomProperties());
    getModel().getCpuPinning().setEntity(vm.getCpuPinning());
    if (vm.isInitialized()) {
        getModel().getTimeZone().setChangeProhibitionReason(// $NON-NLS-1$
        "Time Zone cannot be change since the Virtual Machine was booted at the first time.");
        getModel().getTimeZone().setIsChangable(false);
    }
    updateTimeZone(vm.getTimeZone());
    // Update domain list
    UpdateDomain();
    updateHostPinning(vm.getMigrationSupport());
    getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags());
    // Storage domain and provisioning are not available for an existing VM.
    getModel().getStorageDomain().setIsChangable(false);
    getModel().getProvisioning().setIsAvailable(false);
    getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid()));
    // Select display protocol.
    for (Object item : getModel().getDisplayProtocol().getItems()) {
        EntityModel model = (EntityModel) item;
        DisplayType displayType = (DisplayType) model.getEntity();
        if (displayType == vm.getDefaultDisplayType()) {
            getModel().getDisplayProtocol().setSelectedItem(item);
            break;
        }
    }
    InitPriority(vm.getPriority());
}
#end_block

#method_before
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, vm.getVdsGroupId().getValue());
            behavior.InitTemplate();
        }
    }, getModel().getHash()), dataCenter.getId());
    // If a VM has at least one disk, present its storage domain.
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<Disk> imageDisks = new ArrayList<Disk>();
            List<Disk> nonExportableDisks = new ArrayList<Disk>();
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            for (Disk disk : vmDisks) {
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE && !disk.isShareable()) {
                    imageDisks.add(disk);
                } else if (!disk.isAllowSnapshot()) {
                    nonExportableDisks.add(disk);
                }
            }
            behavior.InitStorageDomains();
            InitDisks(imageDisks);
            sendWarningForNonExportableDisks(nonExportableDisks);
            // check if VM provides any disk
            if (vmDisks.size() - nonExportableDisks.size() == 0) {
                getModel().setMessage(ConstantsManager.getInstance().getMessages().noDiskWillBePartOfTheExportedTemplate());
            }
        }
    }, getModel().getHash()), vm.getId(), true);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#method_after
@Override
public void DataCenter_SelectedItemChanged() {
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    getModel().setIsHostAvailable(dataCenter.getstorage_pool_type() != StorageType.LOCALFS);
    AsyncDataProvider.GetClusterList(new AsyncQuery(new Object[] { this, getModel() }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) array[0];
            UnitVmModel model = (UnitVmModel) array[1];
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            model.SetClusters(model, clusters, vm.getVdsGroupId().getValue());
            behavior.InitTemplate();
        }
    }, getModel().getHash()), dataCenter.getId());
    // If a VM has at least one disk, present its storage domain.
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<Disk> imageDisks = new ArrayList<Disk>();
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            for (Disk disk : vmDisks) {
                if (disk.getDiskStorageType() == DiskStorageType.IMAGE && !disk.isShareable()) {
                    imageDisks.add(disk);
                }
            }
            behavior.InitStorageDomains();
            InitDisks(imageDisks);
            VmModelHelper.sendWarningForNonExportableDisks(getModel(), vmDisks, VmModelHelper.WarningType.VM_TEMPLATE);
        }
    }, getModel().getHash()), vm.getId(), true);
    if (dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
        getModel().getQuota().setIsAvailable(true);
    } else {
        getModel().getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
private void InitDisks(ArrayList<Disk> disks) {
    Collections.sort(disks, new Linq.DiskByAliasComparer());
    ArrayList<DiskModel> list = new ArrayList<DiskModel>();
    for (Disk disk : disks) {
        DiskModel diskModel = new DiskModel();
        diskModel.setIsNew(true);
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            DiskImage diskImage = (DiskImage) disk;
            EntityModel size = new EntityModel();
            size.setEntity(diskImage.getSizeInGigabytes());
            diskModel.setSize(size);
            ListModel volumes = new ListModel();
            volumes.setItems((diskImage.getVolumeType() == VolumeType.Preallocated ? new ArrayList<VolumeType>(Arrays.asList(new VolumeType[] { VolumeType.Preallocated })) : AsyncDataProvider.GetVolumeTypeList()));
            volumes.setSelectedItem(diskImage.getVolumeType());
            diskModel.setVolumeType(volumes);
            diskModel.getAlias().setEntity(diskImage.getDiskAlias());
        }
        diskModel.setDisk(disk);
        list.add(diskModel);
    }
    getModel().setDisks(list);
}
#method_after
private void InitDisks(ArrayList<Disk> disks) {
    Collections.sort(disks, new Linq.DiskByAliasComparer());
    ArrayList<DiskModel> list = new ArrayList<DiskModel>();
    for (Disk disk : disks) {
        DiskModel diskModel = new DiskModel();
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            DiskImage diskImage = (DiskImage) disk;
            EntityModel size = new EntityModel();
            size.setEntity(diskImage.getSizeInGigabytes());
            diskModel.setSize(size);
            ListModel volumes = new ListModel();
            volumes.setItems((diskImage.getVolumeType() == VolumeType.Preallocated ? new ArrayList<VolumeType>(Arrays.asList(new VolumeType[] { VolumeType.Preallocated })) : AsyncDataProvider.GetVolumeTypeList()));
            volumes.setSelectedItem(diskImage.getVolumeType());
            diskModel.setVolumeType(volumes);
            diskModel.getAlias().setEntity(diskImage.getDiskAlias());
        }
        diskModel.setDisk(disk);
        list.add(diskModel);
    }
    getModel().setDisks(list);
}
#end_block

#method_before
private void initVmDisks() {
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            SnapshotModel snapshotModel = (SnapshotModel) target;
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            snapshotModel.showWarningForNonExportableDisks(disks);
            snapshotModel.getCommands().add(getOnSaveCommand());
            snapshotModel.getCommands().add(getCancelCommand());
            snapshotModel.StopProgress();
        }
    }), vm.getId());
}
#method_after
private void initVmDisks() {
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            SnapshotModel snapshotModel = (SnapshotModel) target;
            ArrayList<Disk> disks = (ArrayList<Disk>) returnValue;
            VmModelHelper.sendWarningForNonExportableDisks(snapshotModel, disks, VmModelHelper.WarningType.VM_SNAPSHOT);
            snapshotModel.getCommands().add(getOnSaveCommand());
            snapshotModel.getCommands().add(getCancelCommand());
            snapshotModel.StopProgress();
        }
    }), vm.getId());
}
#end_block

#method_before
@Override
protected void sendWarningForNonExportableDisks(VM entity) {
    // load VM disks and check if there is one which doesn't allow snapshot
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(getWindow(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final ExportVmModel model = (ExportVmModel) target;
            @SuppressWarnings("unchecked")
            final ArrayList<Disk> diskList = (ArrayList<Disk>) returnValue;
            // filter non-exportable disks
            final List<String> list = new ArrayList<String>();
            for (Disk disk : diskList) {
                if (!disk.isAllowSnapshot()) {
                    list.add(disk.getDiskAlias());
                }
            }
            if (!list.isEmpty()) {
                // $NON-NLS-1$
                final String s = StringUtils.join(list, ", ");
                // append warning message
                model.setMessage(ConstantsManager.getInstance().getMessages().disksWillNotBePartOfTheExportedVM(s));
            }
            // check if VM provides any disk
            if (diskList.size() - list.size() == 0) {
                model.setMessage(ConstantsManager.getInstance().getMessages().noDiskWillBePartOfTheExportedVM());
            }
        }
    }), entity.getId());
}
#method_after
@Override
protected void sendWarningForNonExportableDisks(VM entity) {
    // load VM disks and check if there is one which doesn't allow snapshot
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(getWindow(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final ExportVmModel model = (ExportVmModel) target;
            @SuppressWarnings("unchecked")
            final ArrayList<Disk> vmDisks = (ArrayList<Disk>) returnValue;
            VmModelHelper.sendWarningForNonExportableDisks(model, vmDisks, VmModelHelper.WarningType.VM_EXPORT);
        }
    }), entity.getId());
}
#end_block

#method_before
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else {
        getcurrentVm().setUseHostCpuFlags(Boolean.FALSE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                boolean isSucceeded = retVal.getSucceeded();
                                if (retVal != null && isSucceeded) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#method_after
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else {
        getcurrentVm().setUseHostCpuFlags(Boolean.FALSE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                if (retVal != null && retVal.getSucceeded()) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = false;
    _oldVds = getVdsDAO().get(getVdsId());
    if (_oldVds != null && getParameters().getVdsStaticData() != null) {
        String compatibilityVersion = _oldVds.getVdsGroupCompatibilityVersion().toString();
        if (VdsHandler.IsUpdateValid(getParameters().getVdsStaticData(), _oldVds.getStaticData(), _oldVds.getStatus())) {
            if ("".equals(getParameters().getVdsStaticData().getName())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            }
            String vdsName = getParameters().getvds().getName();
            String hostName = getParameters().getvds().getHostName();
            int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
            // check that VDS name is not null or empty
            if (vdsName == null || vdsName.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
                returnValue = false;
            // check that VDS name is not too long
            } else if (vdsName.length() > maxVdsNameLength) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
                returnValue = false;
            } else if (_oldVds.getStatus() != VDSStatus.InstallFailed && !_oldVds.getHostName().equals(hostName)) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOSNAME_CANNOT_CHANGE);
                returnValue = false;
            } else // check if a name is updated to an existing vds name
            if (!StringUtils.equals(_oldVds.getName().toLowerCase(), getParameters().getVdsStaticData().getName().toLowerCase()) && getVdsDAO().getAllWithName(vdsName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            } else if (!StringUtils.equals(_oldVds.getHostName().toLowerCase(), getParameters().getVdsStaticData().getHostName().toLowerCase()) && getVdsDAO().getAllForHostname(hostName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else if (getParameters().getInstallVds() && _oldVds.getStatus() != VDSStatus.Maintenance && _oldVds.getStatus() != VDSStatus.NonOperational && _oldVds.getStatus() != VDSStatus.InstallFailed) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL);
            } else if (getParameters().getInstallVds() && StringUtils.isEmpty(getParameters().getRootPassword()) && getParameters().getVdsStaticData().getVdsType() == VDSType.VDS) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!getParameters().getInstallVds() && _oldVds.getPort() != getParameters().getVdsStaticData().getPort()) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_CHANGE_REQUIRE_INSTALL);
            } else if (!_oldVds.getVdsGroupId().equals(getParameters().getVdsStaticData().getVdsGroupId())) {
                // Forbid updating group id - this must be done through
                // ChangeVDSClusterCommand
                // This is due to permission check that must be done both on
                // the VDS and on the VDSGroup
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER);
            } else if (getVdsDAO().getAllForHostname(hostName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else {
                returnValue = true;
            }
            // if all ok check PM is legal
            returnValue = returnValue && IsPowerManagementLegal(getParameters().getVdsStaticData(), compatibilityVersion);
        } else {
            addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.toString());
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = false;
    _oldVds = getVdsDAO().get(getVdsId());
    if (_oldVds != null && getParameters().getVdsStaticData() != null) {
        String compatibilityVersion = _oldVds.getVdsGroupCompatibilityVersion().toString();
        if (VdsHandler.IsUpdateValid(getParameters().getVdsStaticData(), _oldVds.getStaticData(), _oldVds.getStatus())) {
            if ("".equals(getParameters().getVdsStaticData().getName())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            }
            String vdsName = getParameters().getvds().getName();
            String hostName = getParameters().getvds().getHostName();
            int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
            // check that VDS name is not null or empty
            if (vdsName == null || vdsName.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
                returnValue = false;
            // check that VDS name is not too long
            } else if (vdsName.length() > maxVdsNameLength) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
                returnValue = false;
            } else if (_oldVds.getStatus() != VDSStatus.InstallFailed && !_oldVds.getHostName().equals(hostName)) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOSNAME_CANNOT_CHANGE);
                returnValue = false;
            } else // check if a name is updated to an existing vds name
            if (!StringUtils.equalsIgnoreCase(_oldVds.getName(), getParameters().getVdsStaticData().getName()) && getVdsDAO().getAllWithName(vdsName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            } else if (!StringUtils.equalsIgnoreCase(_oldVds.getHostName(), getParameters().getVdsStaticData().getHostName()) && getVdsDAO().getAllForHostname(hostName).size() != 0) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else if (getParameters().getInstallVds() && _oldVds.getStatus() != VDSStatus.Maintenance && _oldVds.getStatus() != VDSStatus.NonOperational && _oldVds.getStatus() != VDSStatus.InstallFailed) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL);
            } else if (getParameters().getInstallVds() && StringUtils.isEmpty(getParameters().getRootPassword()) && getParameters().getVdsStaticData().getVdsType() == VDSType.VDS) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!getParameters().getInstallVds() && _oldVds.getPort() != getParameters().getVdsStaticData().getPort()) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_CHANGE_REQUIRE_INSTALL);
            } else if (!_oldVds.getVdsGroupId().equals(getParameters().getVdsStaticData().getVdsGroupId())) {
                // Forbid updating group id - this must be done through
                // ChangeVDSClusterCommand
                // This is due to permission check that must be done both on
                // the VDS and on the VDSGroup
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER);
            } else {
                returnValue = true;
            }
            // if all ok check PM is legal
            returnValue = returnValue && IsPowerManagementLegal(getParameters().getVdsStaticData(), compatibilityVersion);
        } else {
            addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.toString());
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
    }
    return returnValue;
}
#end_block

#method_before
@Override
public StorageDomains list() {
    StorageDomains storageDomains = new StorageDomains();
    for (storage_domains entity : getBackendCollection(storage_domains.class, VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId))) {
        storageDomains.getStorageDomains().add(addLinks(map(entity), getLinksToExclude(entity)));
    }
    return storageDomains;
}
#method_after
@Override
public StorageDomains list() {
    StorageDomains storageDomains = new StorageDomains();
    for (org.ovirt.engine.core.common.businessentities.StorageDomain entity : getBackendCollection(org.ovirt.engine.core.common.businessentities.StorageDomain.class, VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId))) {
        storageDomains.getStorageDomains().add(addLinks(map(entity), getLinksToExclude(entity)));
    }
    return storageDomains;
}
#end_block

#method_before
@Override
public Response add(StorageDomain storageDomain) {
    validateParameters(storageDomain, "id|name");
    Guid storageDomainId;
    if (storageDomain.isSetId()) {
        storageDomainId = asGuid(storageDomain.getId());
    } else {
        storageDomainId = lookupStorageDomainIdByName(storageDomain.getName());
    }
    return performCreation(VdcActionType.AttachStorageDomainToPool, new DetachStorageDomainFromPoolParameters(storageDomainId, dataCenterId), new StorageDomainIdResolver(storageDomainId));
}
#method_after
@Override
public Response add(StorageDomain storageDomain) {
    validateParameters(storageDomain, "id|name");
    Guid storageDomainId;
    if (storageDomain.isSetId()) {
        storageDomainId = asGuid(storageDomain.getId());
    } else {
        storageDomainId = lookupStorageDomainIdByName(storageDomain.getName());
    }
    return performCreate(VdcActionType.AttachStorageDomainToPool, new DetachStorageDomainFromPoolParameters(storageDomainId, dataCenterId), new StorageDomainIdResolver(storageDomainId));
}
#end_block

#method_before
protected Guid lookupStorageDomainIdByName(String name) {
    return getEntity(storage_domains.class, SearchType.StorageDomain, "Storage: name=" + name).getId();
}
#method_after
protected Guid lookupStorageDomainIdByName(String name) {
    return getEntity(org.ovirt.engine.core.common.businessentities.StorageDomain.class, SearchType.StorageDomain, "Storage: name=" + name).getId();
}
#end_block

#method_before
protected storage_domains lookupStorageDomainById(Guid storageDomainId) {
    return getEntity(storage_domains.class, VdcQueryType.GetStorageDomainByIdAndStoragePoolId, new StorageDomainAndPoolQueryParameters(storageDomainId, dataCenterId), storageDomainId.toString());
}
#method_after
protected org.ovirt.engine.core.common.businessentities.StorageDomain lookupStorageDomainById(Guid storageDomainId) {
    return getEntity(org.ovirt.engine.core.common.businessentities.StorageDomain.class, VdcQueryType.GetStorageDomainByIdAndStoragePoolId, new StorageDomainAndPoolQueryParameters(storageDomainId, dataCenterId), storageDomainId.toString());
}
#end_block

#method_before
@Override
public storage_domains lookupEntity(Guid nullId) {
    // attach action return nothing, lookup original id instead
    assert (nullId == null);
    return lookupStorageDomainById(storageDomainId);
}
#method_after
@Override
public org.ovirt.engine.core.common.businessentities.StorageDomain lookupEntity(Guid nullId) {
    // attach action return nothing, lookup original id instead
    assert (nullId == null);
    return lookupStorageDomainById(storageDomainId);
}
#end_block

#method_before
@Override
protected StorageDomain map(storage_domains entity, StorageDomain template) {
    BackendStorageDomainsResource resource = new BackendStorageDomainsResource();
    inject(resource);
    return resource.map(entity, template);
}
#method_after
@Override
protected StorageDomain map(org.ovirt.engine.core.common.businessentities.StorageDomain entity, StorageDomain template) {
    BackendStorageDomainsResource resource = new BackendStorageDomainsResource();
    inject(resource);
    return resource.map(entity, template);
}
#end_block

#method_before
public String[] getLinksToExclude(storage_domains storageDomain) {
    return isIsoDomain(storageDomain) ? new String[] { "disks" } : new String[] {};
}
#method_after
@Override
public String[] getLinksToExclude(storage_domains storageDomain) {
    return isIsoDomain(storageDomain) ? new String[] { "disks" } : new String[] {};
}
#end_block

#method_before
private Response addNfsOrLocalOrPosix(VdcActionType action, StorageDomain model, StorageDomainStatic entity, Guid hostId) {
    StorageServerConnections cnx = mapToCnx(model);
    entity.setstorage(addStorageServerConnection(cnx, hostId));
    if (action == VdcActionType.AddNFSStorageDomain) {
        storage_domains existing = getExistingStorageDomain(hostId, entity.getstorage_type(), entity.getstorage_domain_type(), cnx);
        if (existing != null) {
            entity = existing.getStorageStaticData();
            action = VdcActionType.AddExistingNFSStorageDomain;
        }
    }
    if (action != VdcActionType.AddExistingNFSStorageDomain) {
        validateParameters(model, 2, "name");
    }
    return performCreation(action, getAddParams(entity, hostId), ID_RESOLVER);
}
#method_after
private Response addNfsOrLocalOrPosix(VdcActionType action, StorageDomain model, StorageDomainStatic entity, Guid hostId) {
    StorageServerConnections cnx = mapToCnx(model);
    entity.setStorage(addStorageServerConnection(cnx, hostId));
    if (action == VdcActionType.AddNFSStorageDomain) {
        org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), cnx);
        if (existing != null) {
            entity = existing.getStorageStaticData();
            action = VdcActionType.AddExistingNFSStorageDomain;
        }
    }
    if (action != VdcActionType.AddExistingNFSStorageDomain) {
        validateParameters(model, 2, "name");
    }
    return performCreate(action, getAddParams(entity, hostId), ID_RESOLVER);
}
#end_block

#method_before
private Response addSAN(StorageDomain model, StorageType storageType, StorageDomainStatic entity, Guid hostId) {
    boolean overrideLuns = model.getStorage().isSetOverrideLuns() ? model.getStorage().isOverrideLuns() : false;
    return performCreation(VdcActionType.AddSANStorageDomain, getSanAddParams(entity, hostId, getLunIds(model.getStorage(), storageType, hostId), overrideLuns), ID_RESOLVER);
}
#method_after
private Response addSAN(StorageDomain model, StorageType storageType, StorageDomainStatic entity, Guid hostId) {
    boolean overrideLuns = model.getStorage().isSetOverrideLuns() ? model.getStorage().isOverrideLuns() : false;
    return performCreate(VdcActionType.AddSANStorageDomain, getSanAddParams(entity, hostId, getLunIds(model.getStorage(), storageType, hostId), overrideLuns), ID_RESOLVER);
}
#end_block

#method_before
@Override
public Response add(StorageDomain storageDomain) {
    validateParameters(storageDomain, "host.id|name", "type", "storage.type");
    validateEnums(StorageDomain.class, storageDomain);
    StorageDomainStatic entity = mapToStatic(storageDomain);
    Guid hostId = getHostId(storageDomain);
    Response resp = null;
    switch(entity.getstorage_type()) {
        case ISCSI:
        case FCP:
            resp = addSAN(storageDomain, entity.getstorage_type(), entity, hostId);
            break;
        case NFS:
            validateParameters(storageDomain.getStorage(), "address", "path");
            resp = addNfsOrLocalOrPosix(VdcActionType.AddNFSStorageDomain, storageDomain, entity, hostId);
            break;
        case LOCALFS:
            validateParameters(storageDomain.getStorage(), "path");
            resp = addNfsOrLocalOrPosix(VdcActionType.AddLocalStorageDomain, storageDomain, entity, hostId);
            break;
        case POSIXFS:
            validateParameters(storageDomain.getStorage(), "path", "vfsType");
            resp = addNfsOrLocalOrPosix(VdcActionType.AddPosixFsStorageDomain, storageDomain, entity, hostId);
            break;
        default:
            break;
    }
    addLinks(((StorageDomain) resp.getEntity()), getLinksToExclude(storageDomain));
    return resp;
}
#method_after
@Override
public Response add(StorageDomain storageDomain) {
    validateParameters(storageDomain, "host.id|name", "type", "storage.type");
    validateEnums(StorageDomain.class, storageDomain);
    StorageDomainStatic entity = mapToStatic(storageDomain);
    Guid hostId = getHostId(storageDomain);
    Response resp = null;
    switch(entity.getStorageType()) {
        case ISCSI:
        case FCP:
            resp = addSAN(storageDomain, entity.getStorageType(), entity, hostId);
            break;
        case NFS:
            validateParameters(storageDomain.getStorage(), "address", "path");
            resp = addNfsOrLocalOrPosix(VdcActionType.AddNFSStorageDomain, storageDomain, entity, hostId);
            break;
        case LOCALFS:
            validateParameters(storageDomain.getStorage(), "path");
            resp = addNfsOrLocalOrPosix(VdcActionType.AddLocalStorageDomain, storageDomain, entity, hostId);
            break;
        case POSIXFS:
            validateParameters(storageDomain.getStorage(), "path", "vfsType");
            resp = addNfsOrLocalOrPosix(VdcActionType.AddPosixFsStorageDomain, storageDomain, entity, hostId);
            break;
        default:
            break;
    }
    addLinks(((StorageDomain) resp.getEntity()), getLinksToExclude(storageDomain));
    return resp;
}
#end_block

#method_before
protected org.ovirt.engine.api.model.StorageType map(StorageType type) {
    return getMapper(StorageType.class, org.ovirt.engine.api.model.StorageType.class).map(type, null);
}
#method_after
@Override
protected StorageDomain map(org.ovirt.engine.core.common.businessentities.StorageDomain entity, StorageDomain template) {
    StorageDomain model = super.map(entity, template);
    // Mapping the connection properties only in case it is a non-filtered session
    if (!isFiltered()) {
        switch(entity.getStorageType()) {
            case ISCSI:
                mapVolumeGroupIscsi(model, entity);
                break;
            case FCP:
                mapVolumeGroupFcp(model, entity);
                break;
            case NFS:
            case LOCALFS:
            case POSIXFS:
                mapNfsOrLocalOrPosix(model, entity);
                break;
        }
    }
    return model;
}
#end_block

#method_before
protected void mapNfsOrLocalOrPosix(StorageDomain model, storage_domains entity) {
    final Storage storage = model.getStorage();
    StorageServerConnections cnx = getStorageServerConnection(entity.getstorage());
    if (cnx.getconnection().contains(":")) {
        String[] parts = cnx.getconnection().split(":");
        model.getStorage().setAddress(parts[0]);
        model.getStorage().setPath(parts[1]);
    } else {
        model.getStorage().setPath(cnx.getconnection());
    }
    storage.setMountOptions(cnx.getMountOptions());
    storage.setVfsType(cnx.getVfsType());
    if (cnx.getNfsRetrans() != null) {
        storage.setNfsRetrans(cnx.getNfsRetrans().intValue());
    }
    if (cnx.getNfsTimeo() != null) {
        storage.setNfsTimeo(cnx.getNfsTimeo().intValue());
    }
    if (cnx.getNfsVersion() != null) {
        storage.setNfsVersion(StorageDomainMapper.map(cnx.getNfsVersion(), null));
    }
}
#method_after
protected void mapNfsOrLocalOrPosix(StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) {
    final Storage storage = model.getStorage();
    StorageServerConnections cnx = getStorageServerConnection(entity.getStorage());
    if (cnx.getconnection().contains(":")) {
        String[] parts = cnx.getconnection().split(":");
        model.getStorage().setAddress(parts[0]);
        model.getStorage().setPath(parts[1]);
    } else {
        model.getStorage().setPath(cnx.getconnection());
    }
    storage.setMountOptions(cnx.getMountOptions());
    storage.setVfsType(cnx.getVfsType());
    if (cnx.getNfsRetrans() != null) {
        storage.setNfsRetrans(cnx.getNfsRetrans().intValue());
    }
    if (cnx.getNfsTimeo() != null) {
        storage.setNfsTimeo(cnx.getNfsTimeo().intValue());
    }
    if (cnx.getNfsVersion() != null) {
        storage.setNfsVersion(StorageDomainMapper.map(cnx.getNfsVersion(), null));
    }
}
#end_block

#method_before
protected void mapVolumeGroupIscsi(StorageDomain model, storage_domains entity) {
    VolumeGroup vg = model.getStorage().getVolumeGroup();
    for (LUNs lun : getLunsByVgId(vg.getId())) {
        List<StorageServerConnections> lunConnections = lun.getLunConnections();
        if (lunConnections != null) {
            for (StorageServerConnections cnx : lunConnections) {
                LogicalUnit unit = map(lun);
                unit = map(cnx, unit);
                vg.getLogicalUnits().add(unit);
            }
        }
    }
}
#method_after
protected void mapVolumeGroupIscsi(StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) {
    VolumeGroup vg = model.getStorage().getVolumeGroup();
    for (LUNs lun : getLunsByVgId(vg.getId())) {
        List<StorageServerConnections> lunConnections = lun.getLunConnections();
        if (lunConnections != null) {
            for (StorageServerConnections cnx : lunConnections) {
                LogicalUnit unit = map(lun);
                unit = map(cnx, unit);
                vg.getLogicalUnits().add(unit);
            }
        }
    }
}
#end_block

#method_before
protected void mapVolumeGroupFcp(StorageDomain model, storage_domains entity) {
    VolumeGroup vg = model.getStorage().getVolumeGroup();
    for (LUNs lun : getLunsByVgId(vg.getId())) {
        LogicalUnit unit = map(lun);
        vg.getLogicalUnits().add(unit);
    }
}
#method_after
protected void mapVolumeGroupFcp(StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) {
    VolumeGroup vg = model.getStorage().getVolumeGroup();
    for (LUNs lun : getLunsByVgId(vg.getId())) {
        LogicalUnit unit = map(lun);
        vg.getLogicalUnits().add(unit);
    }
}
#end_block

#method_before
private StorageDomains mapCollection(List<storage_domains> entities) {
    StorageDomains collection = new StorageDomains();
    for (storage_domains entity : entities) {
        StorageDomain storageDomain = map(entity);
        // status is only relevant in the context of a data-center, so it can either be 'Unattached' or null.
        if (StorageDomainSharedStatus.Unattached.equals(entity.getstorage_domain_shared_status())) {
            storageDomain.setStatus(StatusUtils.create(StorageDomainStatus.UNATTACHED));
        } else {
            storageDomain.setStatus(null);
        }
        collection.getStorageDomains().add(addLinks(storageDomain, getLinksToExclude(storageDomain)));
    }
    return collection;
}
#method_after
private StorageDomains mapCollection(List<org.ovirt.engine.core.common.businessentities.StorageDomain> entities) {
    StorageDomains collection = new StorageDomains();
    for (org.ovirt.engine.core.common.businessentities.StorageDomain entity : entities) {
        StorageDomain storageDomain = map(entity);
        // status is only relevant in the context of a data-center, so it can either be 'Unattached' or null.
        if (StorageDomainSharedStatus.Unattached.equals(entity.getStorageDomainSharedStatus())) {
            storageDomain.setStatus(StatusUtils.create(StorageDomainStatus.UNATTACHED));
        } else {
            storageDomain.setStatus(null);
        }
        collection.getStorageDomains().add(addLinks(storageDomain, getLinksToExclude(storageDomain)));
    }
    return collection;
}
#end_block

#method_before
private storage_domains getExistingStorageDomain(Guid hostId, StorageType storageType, StorageDomainType domainType, StorageServerConnections cnx) {
    List<storage_domains> existing = asCollection(storage_domains.class, getEntity(ArrayList.class, VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, cnx.getconnection()), "Existing storage domains: path=" + cnx.getconnection()));
    return existing.size() != 0 ? existing.get(0) : null;
}
#method_after
private org.ovirt.engine.core.common.businessentities.StorageDomain getExistingStorageDomain(Guid hostId, StorageType storageType, StorageDomainType domainType, StorageServerConnections cnx) {
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> existing = asCollection(org.ovirt.engine.core.common.businessentities.StorageDomain.class, getEntity(ArrayList.class, VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, storageType, domainType, cnx.getconnection()), "Existing storage domains: path=" + cnx.getconnection()));
    return existing.size() != 0 ? existing.get(0) : null;
}
#end_block

#method_before
private void setUpGetEntityExpectations() throws Exception {
    setUpGetEntityExpectations(VdcQueryType.GetStorageDomainById, StorageDomainQueryParametersBase.class, new String[] { "StorageDomainId" }, new Object[] { GUIDS[0] }, new storage_domains());
}
#method_after
private void setUpGetEntityExpectations() throws Exception {
    setUpGetEntityExpectations(VdcQueryType.GetStorageDomainById, StorageDomainQueryParametersBase.class, new String[] { "StorageDomainId" }, new Object[] { GUIDS[0] }, new org.ovirt.engine.core.common.businessentities.StorageDomain());
}
#end_block

#method_before
protected VDS setUpVDS(int index) {
    VDS vds = new VDS();
    vds.setId(GUIDS[index]);
    vds.setvds_name(NAMES[index]);
    return vds;
}
#method_after
protected VDS setUpVDS(int index) {
    VDS vds = new VDS();
    vds.setId(GUIDS[index]);
    vds.setVdsName(NAMES[index]);
    return vds;
}
#end_block

#method_before
@Override
protected storage_domains getEntity(int index) {
    return setUpEntityExpectations(control.createMock(storage_domains.class), index);
}
#method_after
@Override
protected org.ovirt.engine.core.common.businessentities.StorageDomain getEntity(int index) {
    return setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.StorageDomain.class), index);
}
#end_block

#method_before
static storage_domains setUpEntityExpectations(storage_domains entity, int index) {
    expect(entity.getId()).andReturn(getSafeEntry(index, GUIDS)).anyTimes();
    expect(entity.getstorage_name()).andReturn(getSafeEntry(index, NAMES)).anyTimes();
    // REVIST No descriptions for storage domains
    // expect(entity.getdescription()).andReturn(DESCRIPTIONS[index]).anyTimes();
    expect(entity.getstorage_domain_type()).andReturn(getSafeEntry(index, TYPES_MAPPED)).anyTimes();
    expect(entity.getstorage_type()).andReturn(getSafeEntry(index, STORAGE_TYPES_MAPPED)).anyTimes();
    expect(entity.getstorage()).andReturn(getSafeEntry(index, GUIDS).toString()).anyTimes();
    return entity;
}
#method_after
static org.ovirt.engine.core.common.businessentities.StorageDomain setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.StorageDomain entity, int index) {
    expect(entity.getId()).andReturn(getSafeEntry(index, GUIDS)).anyTimes();
    expect(entity.getStorageName()).andReturn(getSafeEntry(index, NAMES)).anyTimes();
    // REVIST No descriptions for storage domains
    // expect(entity.getdescription()).andReturn(DESCRIPTIONS[index]).anyTimes();
    expect(entity.getStorageDomainType()).andReturn(getSafeEntry(index, TYPES_MAPPED)).anyTimes();
    expect(entity.getStorageType()).andReturn(getSafeEntry(index, STORAGE_TYPES_MAPPED)).anyTimes();
    expect(entity.getStorage()).andReturn(getSafeEntry(index, GUIDS).toString()).anyTimes();
    return entity;
}
#end_block

#method_before
protected storage_domains getIscsiEntity() {
    storage_domains entity = control.createMock(storage_domains.class);
    expect(entity.getId()).andReturn(GUIDS[0]).anyTimes();
    expect(entity.getstorage_name()).andReturn(NAMES[0]).anyTimes();
    expect(entity.getstorage_domain_type()).andReturn(TYPES_MAPPED[0]).anyTimes();
    expect(entity.getstorage_type()).andReturn(org.ovirt.engine.core.common.businessentities.StorageType.ISCSI).anyTimes();
    expect(entity.getstorage()).andReturn(GUIDS[GUIDS.length - 1].toString()).anyTimes();
    return entity;
}
#method_after
protected org.ovirt.engine.core.common.businessentities.StorageDomain getIscsiEntity() {
    org.ovirt.engine.core.common.businessentities.StorageDomain entity = control.createMock(org.ovirt.engine.core.common.businessentities.StorageDomain.class);
    expect(entity.getId()).andReturn(GUIDS[0]).anyTimes();
    expect(entity.getStorageName()).andReturn(NAMES[0]).anyTimes();
    expect(entity.getStorageDomainType()).andReturn(TYPES_MAPPED[0]).anyTimes();
    expect(entity.getStorageType()).andReturn(org.ovirt.engine.core.common.businessentities.StorageType.ISCSI).anyTimes();
    expect(entity.getStorage()).andReturn(GUIDS[GUIDS.length - 1].toString()).anyTimes();
    return entity;
}
#end_block

#method_before
protected List<storage_domains> getExistingStorageDomains(boolean existing) {
    List<storage_domains> ret = new ArrayList<storage_domains>();
    if (existing) {
        ret.add(new storage_domains());
    }
    return ret;
}
#method_after
protected List<org.ovirt.engine.core.common.businessentities.StorageDomain> getExistingStorageDomains(boolean existing) {
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> ret = new ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>();
    if (existing) {
        ret.add(new org.ovirt.engine.core.common.businessentities.StorageDomain());
    }
    return ret;
}
#end_block

#method_before
@Override
public StorageDomain update(StorageDomain incoming) {
    validateEnums(StorageDomain.class, incoming);
    QueryIdResolver storageDomainResolver = new QueryIdResolver(VdcQueryType.GetStorageDomainById, StorageDomainQueryParametersBase.class);
    storage_domains entity = getEntity(storageDomainResolver, true);
    StorageDomain model = map(entity, new StorageDomain());
    StorageType storageType = entity.getstorage_type();
    if (storageType != null) {
        switch(storageType) {
            case ISCSI:
            case FCP:
                extendStorageDomain(incoming, model, storageType);
                break;
            default:
                break;
        }
    }
    return addLinks(performUpdate(incoming, entity, model, storageDomainResolver, VdcActionType.UpdateStorageDomain, new UpdateParametersProvider()), new String[] { "templates", "vms" });
}
#method_after
@Override
public StorageDomain update(StorageDomain incoming) {
    validateEnums(StorageDomain.class, incoming);
    QueryIdResolver<Guid> storageDomainResolver = new QueryIdResolver<Guid>(VdcQueryType.GetStorageDomainById, StorageDomainQueryParametersBase.class);
    org.ovirt.engine.core.common.businessentities.StorageDomain entity = getEntity(storageDomainResolver, true);
    StorageDomain model = map(entity, new StorageDomain());
    StorageType storageType = entity.getStorageType();
    if (storageType != null) {
        switch(storageType) {
            case ISCSI:
            case FCP:
                extendStorageDomain(incoming, model, storageType);
                break;
            default:
                break;
        }
    }
    return addLinks(performUpdate(incoming, entity, model, storageDomainResolver, VdcActionType.UpdateStorageDomain, new UpdateParametersProvider()), new String[] { "templates", "vms" });
}
#end_block

#method_before
public static synchronized boolean isIsoDomain(storage_domains storageDomain) {
    org.ovirt.engine.core.common.businessentities.StorageDomainType type = storageDomain.getstorage_domain_type();
    return type != null && type == org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ? true : false;
}
#method_after
public static synchronized boolean isIsoDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) {
    org.ovirt.engine.core.common.businessentities.StorageDomainType type = storageDomain.getStorageDomainType();
    return type != null && type == org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO ? true : false;
}
#end_block

#method_before
@Override
protected StorageDomain map(storage_domains entity, StorageDomain template) {
    return parent.map(entity, template);
}
#method_after
@Override
protected StorageDomain map(org.ovirt.engine.core.common.businessentities.StorageDomain entity, StorageDomain template) {
    return parent.map(entity, template);
}
#end_block

#method_before
@Override
public VdcActionParametersBase getParameters(StorageDomain incoming, storage_domains entity) {
    // save SD type before mapping
    org.ovirt.engine.core.common.businessentities.StorageDomainType currentType = entity.getStorageStaticData() == null ? null : entity.getStorageStaticData().getstorage_domain_type();
    StorageDomainStatic updated = getMapper(modelType, StorageDomainStatic.class).map(incoming, entity.getStorageStaticData());
    // if SD type was 'Master', and user gave 'Data', they are the same, this is not a real update, so exchange data back to master.
    if (currentType == org.ovirt.engine.core.common.businessentities.StorageDomainType.Master && updated.getstorage_domain_type() == org.ovirt.engine.core.common.businessentities.StorageDomainType.Data) {
        updated.setstorage_domain_type(org.ovirt.engine.core.common.businessentities.StorageDomainType.Master);
    }
    return new StorageDomainManagementParameter(updated);
}
#method_after
@Override
public VdcActionParametersBase getParameters(StorageDomain incoming, org.ovirt.engine.core.common.businessentities.StorageDomain entity) {
    // save SD type before mapping
    org.ovirt.engine.core.common.businessentities.StorageDomainType currentType = entity.getStorageStaticData() == null ? null : entity.getStorageStaticData().getStorageDomainType();
    StorageDomainStatic updated = getMapper(modelType, StorageDomainStatic.class).map(incoming, entity.getStorageStaticData());
    // if SD type was 'Master', and user gave 'Data', they are the same, this is not a real update, so exchange data back to master.
    if (currentType == org.ovirt.engine.core.common.businessentities.StorageDomainType.Master && updated.getStorageDomainType() == org.ovirt.engine.core.common.businessentities.StorageDomainType.Data) {
        updated.setStorageDomainType(org.ovirt.engine.core.common.businessentities.StorageDomainType.Master);
    }
    return new StorageDomainManagementParameter(updated);
}
#end_block

#method_before
@Override
protected org.ovirt.engine.core.common.businessentities.Disk getEntity(int index) {
    DiskImage entity = new DiskImage();
    entity.setId(GUIDS[index]);
    entity.setvolume_format(VolumeFormat.RAW);
    entity.setDiskInterface(DiskInterface.VirtIO);
    entity.setimageStatus(ImageStatus.OK);
    entity.setvolume_type(VolumeType.Sparse);
    entity.setBoot(false);
    entity.setShareable(false);
    entity.setPropagateErrors(PropagateErrors.On);
    return setUpStatisticalEntityExpectations(entity);
}
#method_after
@Override
protected org.ovirt.engine.core.common.businessentities.Disk getEntity(int index) {
    return getEntity(index, false);
}
#end_block

#method_before
@Override
protected org.ovirt.engine.core.common.businessentities.Disk getEntity(int index) {
    DiskImage entity = new DiskImage();
    entity.setId(GUIDS[index]);
    entity.setvolume_format(VolumeFormat.RAW);
    entity.setDiskInterface(DiskInterface.VirtIO);
    entity.setimageStatus(ImageStatus.OK);
    entity.setvolume_type(VolumeType.Sparse);
    entity.setBoot(false);
    entity.setShareable(false);
    entity.setPropagateErrors(PropagateErrors.On);
    return setUpStatisticalEntityExpectations(entity);
}
#method_after
protected org.ovirt.engine.core.common.businessentities.Disk getEntity(int index, boolean noSD) {
    DiskImage entity = new DiskImage();
    entity.setId(GUIDS[index]);
    entity.setvolume_format(VolumeFormat.RAW);
    entity.setDiskInterface(DiskInterface.VirtIO);
    entity.setimageStatus(ImageStatus.OK);
    entity.setvolume_type(VolumeType.Sparse);
    entity.setBoot(false);
    entity.setShareable(false);
    entity.setPropagateErrors(PropagateErrors.On);
    ArrayList<Guid> storages = new ArrayList<Guid>();
    if (!noSD) {
        for (int i = 0; i < GUIDS.length; i++) {
            storages.add(GUIDS[i]);
        }
    }
    entity.setstorage_ids(storages);
    return setUpStatisticalEntityExpectations(entity);
}
#end_block

#method_before
static void verifyModelSpecific(Disk model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertFalse(model.isSetVm());
    assertTrue(model.isSparse());
    assertTrue(!model.isBootable());
    assertTrue(model.isPropagateErrors());
}
#method_after
static void verifyModelSpecific(Disk model, int index) {
    assertEquals(GUIDS[index].toString(), model.getId());
    assertFalse(model.isSetVm());
    assertTrue(model.isSparse());
    assertTrue(!model.isBootable());
    assertTrue(model.isPropagateErrors());
    assertEquals(model.getStorageDomain().getId(), STORAGE_DOMAIN_ID.toString());
}
#end_block

#method_before
@Override
protected StorageDomain map(storage_domains entity, StorageDomain template) {
    BackendStorageDomainsResource resource = new BackendStorageDomainsResource();
    inject(resource);
    return resource.map(entity, template);
}
#method_after
@Override
protected StorageDomain map(org.ovirt.engine.core.common.businessentities.StorageDomain entity, StorageDomain template) {
    BackendStorageDomainsResource resource = new BackendStorageDomainsResource();
    inject(resource);
    return resource.map(entity, template);
}
#end_block

#method_before
@Override
public Response add(Disk disk) {
    validateDiskForCreation(disk);
    AddDiskParameters params = new AddDiskParameters();
    params.setDiskInfo(getMapper(Disk.class, org.ovirt.engine.core.common.businessentities.Disk.class).map(disk, null));
    if (disk.isSetStorageDomains() && disk.getStorageDomains().isSetStorageDomains() && disk.getStorageDomains().getStorageDomains().get(0).isSetId()) {
        params.setStorageDomainId(Guid.createGuidFromString(disk.getStorageDomains().getStorageDomains().get(0).getId()));
    } else if (disk.isSetStorageDomains() && disk.getStorageDomains().getStorageDomains().get(0).isSetName()) {
        Guid storageDomainId = getStorageDomainId(disk.getStorageDomains().getStorageDomains().get(0).getName());
        if (storageDomainId == null) {
            notFound(StorageDomain.class);
        } else {
            params.setStorageDomainId(storageDomainId);
        }
    }
    return performCreation(VdcActionType.AddDisk, params, new QueryIdResolver(VdcQueryType.GetDiskByDiskId, GetDiskByDiskIdParameters.class));
}
#method_after
@Override
public Response add(Disk disk) {
    validateDiskForCreation(disk);
    AddDiskParameters params = new AddDiskParameters();
    params.setDiskInfo(getMapper(Disk.class, org.ovirt.engine.core.common.businessentities.Disk.class).map(disk, null));
    if (disk.isSetStorageDomains() && disk.getStorageDomains().isSetStorageDomains() && disk.getStorageDomains().getStorageDomains().get(0).isSetId()) {
        params.setStorageDomainId(Guid.createGuidFromString(disk.getStorageDomains().getStorageDomains().get(0).getId()));
    } else if (disk.isSetStorageDomains() && disk.getStorageDomains().getStorageDomains().get(0).isSetName()) {
        Guid storageDomainId = getStorageDomainId(disk.getStorageDomains().getStorageDomains().get(0).getName());
        if (storageDomainId == null) {
            notFound(StorageDomain.class);
        } else {
            params.setStorageDomainId(storageDomainId);
        }
    }
    return performCreate(VdcActionType.AddDisk, params, new QueryIdResolver<Guid>(VdcQueryType.GetDiskByDiskId, GetDiskByDiskIdParameters.class));
}
#end_block

#method_before
protected void validateDiskForCreation(Disk disk) {
    validateParameters(disk, 3, "format", "interface");
    if (DiskResourceUtils.isLunDisk(disk)) {
        // when creating a LUN disk, user must specify type.
        validateParameters(disk.getLunStorage(), 3, "type");
        StorageType storageType = StorageType.fromValue(disk.getLunStorage().getType());
        if (storageType != null && storageType == StorageType.ISCSI) {
            validateParameters(disk.getLunStorage().getLogicalUnits().get(0), 3, "address", "target", "port", "id");
        }
    } else if (disk.isSetLunStorage() && disk.getLunStorage().getLogicalUnits().isEmpty()) {
        // TODO: Implement nested entity existence validation infra for validateParameters()
        throw new WebFaultException(null, localize(Messages.INCOMPLETE_PARAMS_REASON), localize(Messages.INCOMPLETE_PARAMS_DETAIL_TEMPLATE, "LogicalUnit", "", "add"), Response.Status.BAD_REQUEST);
    } else {
        // Non lun disks require size
        validateParameters(disk, 3, "provisionedSize|size");
    }
    validateEnums(Disk.class, disk);
}
#method_after
protected void validateDiskForCreation(Disk disk) {
    validateParameters(disk, 2, "format", "interface");
    if (DiskResourceUtils.isLunDisk(disk)) {
        // when creating a LUN disk, user must specify type.
        validateParameters(disk.getLunStorage(), 3, "type");
        StorageType storageType = StorageType.fromValue(disk.getLunStorage().getType());
        if (storageType != null && storageType == StorageType.ISCSI) {
            validateParameters(disk.getLunStorage().getLogicalUnits().get(0), 3, "address", "target", "port", "id");
        }
    } else if (disk.isSetLunStorage() && disk.getLunStorage().getLogicalUnits().isEmpty()) {
        // TODO: Implement nested entity existence validation infra for validateParameters()
        throw new WebFaultException(null, localize(Messages.INCOMPLETE_PARAMS_REASON), localize(Messages.INCOMPLETE_PARAMS_DETAIL_TEMPLATE, "LogicalUnit", "", "add"), Response.Status.BAD_REQUEST);
    } else {
        // Non lun disks require size
        validateParameters(disk, 2, "provisionedSize|size");
    }
    validateEnums(Disk.class, disk);
}
#end_block

#method_before
private Guid getStorageDomainId(String storageDomainName) {
    List<storage_domains> storageDomains = getBackendCollection(storage_domains.class, VdcQueryType.GetAllStorageDomains, new VdcQueryParametersBase());
    for (storage_domains storageDomain : storageDomains) {
        if (storageDomain.getstorage_name().equals(storageDomainName)) {
            return storageDomain.getId();
        }
    }
    return null;
}
#method_after
private Guid getStorageDomainId(String storageDomainName) {
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = getBackendCollection(org.ovirt.engine.core.common.businessentities.StorageDomain.class, VdcQueryType.GetAllStorageDomains, new VdcQueryParametersBase());
    for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : storageDomains) {
        if (storageDomain.getStorageName().equals(storageDomainName)) {
            return storageDomain.getId();
        }
    }
    return null;
}
#end_block

#method_before
@Override
public Disks list() {
    return mapCollection(getBackendCollection(SearchType.Disk));
}
#method_after
@Override
public Disks list() {
    if (isFiltered()) {
        return mapCollection(getBackendCollection(VdcQueryType.GetAllDisks, new VdcQueryParametersBase()));
    } else {
        return mapCollection(getBackendCollection(SearchType.Disk));
    }
}
#end_block

#method_before
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    if (returnStatus != VdcBllErrors.Done) {
        log.errorFormat("IrsBroker::getImageInfo::Failed getting image info imageId = {0} does not exist on domainName = {1} , domainId = {2},  error code: {3}, message: {4}", getParameters().getImageId().toString(), DbFacade.getInstance().getStorageDomainStaticDao().get(getParameters().getStorageDomainId()).getstorage_name(), getParameters().getStorageDomainId().toString(), returnStatus.toString(), imageInfoReturn.mStatus.mMessage);
        throw new IRSErrorException(returnStatus.toString());
    }
}
#method_after
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    if (returnStatus != VdcBllErrors.Done) {
        log.errorFormat("IrsBroker::getImageInfo::Failed getting image info imageId = {0} does not exist on domainName = {1} , domainId = {2},  error code: {3}, message: {4}", getParameters().getImageId().toString(), DbFacade.getInstance().getStorageDomainStaticDao().get(getParameters().getStorageDomainId()).getStorageName(), getParameters().getStorageDomainId().toString(), returnStatus.toString(), imageInfoReturn.mStatus.mMessage);
        throw new IRSErrorException(returnStatus.toString());
    }
}
#end_block

#method_before
public DiskImage buildImageEntity(XmlRpcStruct xmlRpcStruct) {
    DiskImage newImage = new DiskImage();
    try {
        newImage.setImageId(new Guid((String) xmlRpcStruct.getItem(IrsProperties.uuid)));
        newImage.setParentId(new Guid((String) xmlRpcStruct.getItem(IrsProperties.parent)));
        newImage.setdescription((String) xmlRpcStruct.getItem(IrsProperties.description));
        newImage.setimageStatus(EnumUtils.valueOf(ImageStatus.class, (String) xmlRpcStruct.getItem(IrsProperties.ImageStatus), true));
        if (xmlRpcStruct.contains(IrsProperties.size)) {
            newImage.setsize(Long.parseLong(xmlRpcStruct.getItem(IrsProperties.size).toString()) * 512);
        }
        if (xmlRpcStruct.contains("apparentsize")) {
            newImage.setactual_size(Long.parseLong(xmlRpcStruct.getItem("apparentsize").toString()) * 512);
        }
        if (xmlRpcStruct.contains("capacity")) {
            newImage.setsize(Long.parseLong(xmlRpcStruct.getItem("capacity").toString()));
        }
        if (xmlRpcStruct.contains("truesize")) {
            newImage.setactual_size(Long.parseLong(xmlRpcStruct.getItem("truesize").toString()));
        }
        if (xmlRpcStruct.contains("ctime")) {
            long secsSinceEpoch = Long.parseLong(xmlRpcStruct.getItem("ctime").toString());
            newImage.setcreation_date(MakeDTFromCTime(secsSinceEpoch));
        }
        if (xmlRpcStruct.contains("mtime")) {
            long secsSinceEpoch = Long.parseLong(xmlRpcStruct.getItem("mtime").toString());
            newImage.setlast_modified_date(MakeDTFromCTime(secsSinceEpoch));
        }
        if (xmlRpcStruct.contains("domain")) {
            newImage.setstorage_ids(new ArrayList<Guid>(Arrays.asList(new Guid(xmlRpcStruct.getItem("domain").toString()))));
        }
        if (xmlRpcStruct.contains("image")) {
            newImage.setimage_group_id(new Guid(xmlRpcStruct.getItem("image").toString()));
        }
        if (xmlRpcStruct.contains("type")) {
            newImage.setvolume_type(EnumUtils.valueOf(VolumeType.class, xmlRpcStruct.getItem("type").toString(), true));
        }
        if (xmlRpcStruct.contains("format")) {
            newImage.setvolume_format(EnumUtils.valueOf(VolumeFormat.class, xmlRpcStruct.getItem("format").toString(), true));
        }
    } catch (RuntimeException ex) {
        log.errorFormat("irsBroker::buildImageEntity::Failed building DIskImage");
        PrintReturnValue();
        log.error(ex.getMessage(), ex);
        newImage = null;
    }
    return newImage;
}
#method_after
public DiskImage buildImageEntity(XmlRpcStruct xmlRpcStruct) {
    DiskImage newImage = new DiskImage();
    try {
        newImage.setImageId(new Guid((String) xmlRpcStruct.getItem(IrsProperties.uuid)));
        newImage.setParentId(new Guid((String) xmlRpcStruct.getItem(IrsProperties.parent)));
        newImage.setDescription((String) xmlRpcStruct.getItem(IrsProperties.description));
        newImage.setImageStatus(EnumUtils.valueOf(ImageStatus.class, (String) xmlRpcStruct.getItem(IrsProperties.ImageStatus), true));
        if (xmlRpcStruct.contains(IrsProperties.size)) {
            newImage.setSize(Long.parseLong(xmlRpcStruct.getItem(IrsProperties.size).toString()) * 512);
        }
        if (xmlRpcStruct.contains("apparentsize")) {
            newImage.setActualSizeFromDiskImage(Long.parseLong(xmlRpcStruct.getItem("apparentsize").toString()) * 512);
        }
        if (xmlRpcStruct.contains("capacity")) {
            newImage.setSize(Long.parseLong(xmlRpcStruct.getItem("capacity").toString()));
        }
        if (xmlRpcStruct.contains("truesize")) {
            newImage.setActualSizeFromDiskImage(Long.parseLong(xmlRpcStruct.getItem("truesize").toString()));
        }
        if (xmlRpcStruct.contains("ctime")) {
            long secsSinceEpoch = Long.parseLong(xmlRpcStruct.getItem("ctime").toString());
            newImage.setCreationDate(MakeDTFromCTime(secsSinceEpoch));
        }
        if (xmlRpcStruct.contains("mtime")) {
            long secsSinceEpoch = Long.parseLong(xmlRpcStruct.getItem("mtime").toString());
            newImage.setLastModifiedDate(MakeDTFromCTime(secsSinceEpoch));
        }
        if (xmlRpcStruct.contains("domain")) {
            newImage.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(xmlRpcStruct.getItem("domain").toString()))));
        }
        if (xmlRpcStruct.contains("image")) {
            newImage.setimage_group_id(new Guid(xmlRpcStruct.getItem("image").toString()));
        }
        if (xmlRpcStruct.contains("type")) {
            newImage.setVolumeType(EnumUtils.valueOf(VolumeType.class, xmlRpcStruct.getItem("type").toString(), true));
        }
        if (xmlRpcStruct.contains("format")) {
            newImage.setvolumeFormat(EnumUtils.valueOf(VolumeFormat.class, xmlRpcStruct.getItem("format").toString(), true));
        }
    } catch (RuntimeException ex) {
        log.errorFormat("irsBroker::buildImageEntity::Failed building DIskImage");
        PrintReturnValue();
        log.error(ex.getMessage(), ex);
        newImage = null;
    }
    return newImage;
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    // first, run getImagesList query into vdsm to get all of the images on the storage domain - then store in
    // imagesList
    VDSBrokerFrontend vdsBroker = getVdsBroker();
    VDSReturnValue imagesListResult = vdsBroker.RunVdsCommand(VDSCommandType.GetImagesList, new GetImagesListVDSCommandParameters(getStorageDomainId(), getStoragePoolId()));
    @SuppressWarnings("unchecked")
    List<Guid> imagesList = (List<Guid>) imagesListResult.getReturnValue();
    // fromDao is a list of all disk images on the domain from the DAO
    List<DiskImage> fromDao = getDbFacade().getDiskImageDao().getAllSnapshotsForStorageDomain(getStorageDomainId());
    // if the ID in imagesList is recognized by oVirt, remove from list
    for (DiskImage image : fromDao) {
        imagesList.remove(image.getId());
    }
    List<Disk> unregisteredDisks = new ArrayList<Disk>();
    for (Guid unregisteredDiskId : imagesList) {
        String sessionId = getParameters().getSessionId();
        if (sessionId == null) {
            sessionId = ThreadLocalParamsContainer.getHttpSessionId();
        }
        GetUnregisteredDiskQueryParameters unregQueryParams = new GetUnregisteredDiskQueryParameters(unregisteredDiskId, getStorageDomainId());
        VdcQueryReturnValue unregQueryReturn = getBackend().runInternalQuery(VdcQueryType.GetUnregisteredDisk, unregQueryParams);
        if (unregQueryReturn.getSucceeded()) {
            unregisteredDisks.add((Disk) unregQueryReturn.getReturnValue());
        } else {
            System.out.println("Could not get populated disk, reason: " + unregQueryReturn.getExceptionString());
        }
    }
    getQueryReturnValue().setReturnValue(unregisteredDisks);
}
#method_after
@Override
protected void executeQueryCommand() {
    // first, run getImagesList query into vdsm to get all of the images on the storage domain - then store in
    // imagesList
    VDSBrokerFrontend vdsBroker = getVdsBroker();
    VDSReturnValue imagesListResult = vdsBroker.RunVdsCommand(VDSCommandType.GetImagesList, new GetImagesListVDSCommandParameters(getStorageDomainId(), getStoragePoolId()));
    @SuppressWarnings("unchecked")
    List<Guid> imagesList = (List<Guid>) imagesListResult.getReturnValue();
    // fromDao is a list of all disk images on the domain from the DAO
    List<DiskImage> fromDao = getDbFacade().getDiskImageDao().getAllSnapshotsForStorageDomain(getStorageDomainId());
    // if the ID in imagesList is recognized by oVirt, remove from list
    for (DiskImage image : fromDao) {
        imagesList.remove(image.getId());
    }
    List<Disk> unregisteredDisks = new ArrayList<Disk>();
    for (Guid unregisteredDiskId : imagesList) {
        GetUnregisteredDiskQueryParameters unregQueryParams = new GetUnregisteredDiskQueryParameters(unregisteredDiskId, getStorageDomainId(), getStoragePoolId());
        VdcQueryReturnValue unregQueryReturn = getBackend().runInternalQuery(VdcQueryType.GetUnregisteredDisk, unregQueryParams);
        if (unregQueryReturn.getSucceeded()) {
            unregisteredDisks.add((Disk) unregQueryReturn.getReturnValue());
        } else {
            log.error("Could not get populated disk, reason: " + unregQueryReturn.getExceptionString());
        }
    }
    getQueryReturnValue().setReturnValue(unregisteredDisks);
}
#end_block

#method_before
protected Guid getStoragePoolId() {
    return getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).get(0).getId();
}
#method_after
protected Guid getStoragePoolId() {
    return getParameters().getStoragePoolId();
}
#end_block

#method_before
@Before
public void setUp() throws Exception {
    super.setUp();
    prepareMocks();
}
#method_after
@Before
public void setUp() throws Exception {
    super.setUp();
    importDiskId = Guid.NewGuid();
    existingDiskId = Guid.NewGuid();
    storageDomainId = Guid.NewGuid();
    storagePoolId = Guid.NewGuid();
    // Wrapping the list in a new ArrayList as this will eventually be modified by the GetUnregisteredDisksQuery command and
    // Arrays returned by Arrays.asList are immutable. The wrapping allows for mutability.
    importDiskIds = new ArrayList<Guid>(Arrays.asList(importDiskId, existingDiskId));
    prepareMocks();
}
#end_block

#method_before
private void prepareMocks() {
    BackendInternal backendMock = mock(BackendInternal.class);
    VDSBrokerFrontend vdsBroker = mock(VDSBrokerFrontend.class);
    DiskImage existingDiskImage = mock(DiskImage.class);
    when(existingDiskImage.getId()).thenReturn(existingDiskId);
    List<DiskImage> existingDiskImages = Arrays.asList(existingDiskImage);
    // Mock the get images List VDS command
    VDSReturnValue volListReturnValue = new VDSReturnValue();
    volListReturnValue.setSucceeded(true);
    volListReturnValue.setReturnValue(importDiskIds);
    doReturn(volListReturnValue).when(vdsBroker).RunVdsCommand(eq(VDSCommandType.GetImagesList), any(GetImagesListVDSCommandParameters.class));
    // Mock the get unregistered disk query
    when(backendMock.RunQuery(eq(VdcQueryType.GetUnregisteredDisk), any(GetUnregisteredDiskQueryParameters.class))).thenAnswer(new Answer<VdcQueryReturnValue>() {

        @Override
        public VdcQueryReturnValue answer(InvocationOnMock invocation) throws Throwable {
            GetUnregisteredDiskQueryParameters params = (GetUnregisteredDiskQueryParameters) invocation.getArguments()[1];
            VdcQueryReturnValue unregDiskReturnValue = new VdcQueryReturnValue();
            unregDiskReturnValue.setSucceeded(true);
            DiskImage newDiskImage = mock(DiskImage.class);
            when(newDiskImage.getId()).thenReturn(params.getDiskId());
            unregDiskReturnValue.setReturnValue(newDiskImage);
            return unregDiskReturnValue;
        }
    });
    doReturn(storagePoolId).when(getQuery()).getStoragePoolId();
    doReturn(storageDomainId).when(getQuery()).getStorageDomainId();
    DbFacade dbFacadeMock = getDbFacadeMockInstance();
    DiskImageDAO diskImageDAOMock = mock(DiskImageDAO.class);
    when(diskImageDAOMock.getAllSnapshotsForStorageDomain(eq(storageDomainId))).thenReturn(existingDiskImages);
    when(dbFacadeMock.getDiskImageDao()).thenReturn(diskImageDAOMock);
    // Return the mocked backend when getBackend() is called on the query
    doReturn(backendMock).when(getQuery()).getBackend();
    // Return the mocked vdsBroker when getVDSBroker() is called on the query
    doReturn(vdsBroker).when(getQuery()).getVdsBroker();
}
#method_after
private void prepareMocks() {
    BackendInternal backendMock = mock(BackendInternal.class);
    VDSBrokerFrontend vdsBroker = mock(VDSBrokerFrontend.class);
    DiskImage existingDiskImage = mock(DiskImage.class);
    when(existingDiskImage.getId()).thenReturn(existingDiskId);
    List<DiskImage> existingDiskImages = Arrays.asList(existingDiskImage);
    // Mock the get images List VDS command
    VDSReturnValue volListReturnValue = new VDSReturnValue();
    volListReturnValue.setSucceeded(true);
    volListReturnValue.setReturnValue(importDiskIds);
    doReturn(volListReturnValue).when(vdsBroker).RunVdsCommand(eq(VDSCommandType.GetImagesList), any(GetImagesListVDSCommandParameters.class));
    // Mock the get unregistered disk query
    when(backendMock.runInternalQuery(eq(VdcQueryType.GetUnregisteredDisk), any(GetUnregisteredDiskQueryParameters.class))).thenAnswer(new Answer<VdcQueryReturnValue>() {

        @Override
        public VdcQueryReturnValue answer(InvocationOnMock invocation) throws Throwable {
            GetUnregisteredDiskQueryParameters params = (GetUnregisteredDiskQueryParameters) invocation.getArguments()[1];
            VdcQueryReturnValue unregDiskReturnValue = new VdcQueryReturnValue();
            unregDiskReturnValue.setSucceeded(true);
            DiskImage newDiskImage = mock(DiskImage.class);
            when(newDiskImage.getId()).thenReturn(params.getDiskId());
            unregDiskReturnValue.setReturnValue(newDiskImage);
            return unregDiskReturnValue;
        }
    });
    doReturn(storagePoolId).when(getQuery()).getStoragePoolId();
    doReturn(storageDomainId).when(getQuery()).getStorageDomainId();
    DbFacade dbFacadeMock = getDbFacadeMockInstance();
    DiskImageDAO diskImageDAOMock = mock(DiskImageDAO.class);
    when(diskImageDAOMock.getAllSnapshotsForStorageDomain(eq(storageDomainId))).thenReturn(existingDiskImages);
    when(dbFacadeMock.getDiskImageDao()).thenReturn(diskImageDAOMock);
    // Return the mocked backend when getBackend() is called on the query
    doReturn(backendMock).when(getQuery()).getBackend();
    // Return the mocked vdsBroker when getVDSBroker() is called on the query
    doReturn(vdsBroker).when(getQuery()).getVdsBroker();
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    Disk unregisteredDisk = populateDisk(getBackend(), getParameters().getStorageDomainId(), getParameters().getDiskId());
    if (unregisteredDisk != null) {
        getQueryReturnValue().setReturnValue(unregisteredDisk);
        getQueryReturnValue().setSucceeded(true);
    }
}
#method_after
@Override
protected void executeQueryCommand() {
    Guid storagePoolId = getParameters().getStoragePoolId();
    Guid storageDomainId = getParameters().getStorageDomainId();
    Guid diskId = getParameters().getDiskId();
    // Now get the list of volumes for each new image.
    StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters = new StoragePoolDomainAndGroupIdBaseVDSCommandParameters(storagePoolId, storageDomainId, diskId);
    VDSReturnValue volumesListReturn = getBackend().getResourceManager().RunVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters);
    if (!volumesListReturn.getSucceeded()) {
        getQueryReturnValue().setExceptionString(volumesListReturn.getExceptionString());
        getQueryReturnValue().setSucceeded(false);
        return;
    }
    @SuppressWarnings("unchecked")
    List<Guid> volumesList = (List<Guid>) volumesListReturn.getReturnValue();
    // image. If there are multiple volumes, skip the image and move on to the next.
    if (volumesList.size() != 1) {
        getQueryReturnValue().setSucceeded(false);
        return;
    }
    Guid volumeId = volumesList.get(0);
    // Get the information about the volume from VDSM.
    GetImageInfoVDSCommandParameters imageInfoParameters = new GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, diskId, volumeId);
    VDSReturnValue imageInfoReturn = getBackend().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, imageInfoParameters);
    if (!imageInfoReturn.getSucceeded()) {
        getQueryReturnValue().setExceptionString(imageInfoReturn.getExceptionString());
        getQueryReturnValue().setSucceeded(false);
        return;
    }
    DiskImage newDiskImage = (DiskImage) imageInfoReturn.getReturnValue();
    // The disk image won't have an interface set on it. Set it to IDE by default. When the
    // disk is attached to a VM, its interface can be changed to the appropriate value for that VM.
    newDiskImage.setDiskInterface(DiskInterface.IDE);
    newDiskImage.setStoragePoolId(storagePoolId);
    getQueryReturnValue().setReturnValue(newDiskImage);
    getQueryReturnValue().setSucceeded(true);
}
#end_block

#method_before
@Override
public Disks list() {
    if (QueryHelper.hasMatrixParam(getUriInfo(), UNREGISTERED_CONSTRAINT_PARAMETER)) {
        return mapCollection(getBackendCollection(VdcQueryType.GetUnregisteredDisks, new StorageDomainQueryParametersBase(this.storageDomainId)));
    } else {
        return mapCollection(getBackendCollection(VdcQueryType.GetAllDisksByStorageDomainId, new StorageDomainQueryParametersBase(this.storageDomainId)));
    }
}
#method_after
@Override
public Disks list() {
    if (QueryHelper.hasMatrixParam(getUriInfo(), UNREGISTERED_CONSTRAINT_PARAMETER)) {
        return mapCollection(getBackendCollection(VdcQueryType.GetUnregisteredDisks, new GetUnregisteredDisksQueryParameters(storageDomainId, getStoragePoolIdForDomain(storageDomainId))));
    } else {
        return mapCollection(getBackendCollection(VdcQueryType.GetAllDisksByStorageDomainId, new StorageDomainQueryParametersBase(this.storageDomainId)));
    }
}
#end_block

#method_before
@Override
public Response add(Disk disk) {
    if (QueryHelper.hasMatrixParam(getUriInfo(), UNREGISTERED_CONSTRAINT_PARAMETER)) {
        // First we need to query the backend to fill in all the information about the disk from the VDSM.
        // We don't just use the information from the Disk object because it's missing a few things like creation
        // date and last modified date.
        GetUnregisteredDiskQueryParameters getDiskParams = new GetUnregisteredDiskQueryParameters(Guid.createGuidFromString(disk.getId()), storageDomainId);
        VdcQueryReturnValue populateReturn = runQuery(VdcQueryType.GetUnregisteredDisk, getDiskParams);
        if (populateReturn.getSucceeded()) {
            DiskImage unregisteredDisk = (DiskImage) populateReturn.getReturnValue();
            RegisterDiskParameters registerDiskParams = new RegisterDiskParameters(unregisteredDisk);
            return performCreate(VdcActionType.RegisterDisk, registerDiskParams, ID_RESOLVER);
        } else {
            return handleError(new Exception(populateReturn.getExceptionString()), false);
        }
    } else {
        validateDiskForCreation(disk);
        AddDiskParameters params = new AddDiskParameters();
        params.setDiskInfo(getMapper(Disk.class, org.ovirt.engine.core.common.businessentities.Disk.class).map(disk, null));
        params.setStorageDomainId(this.storageDomainId);
        return performCreate(VdcActionType.AddDisk, params, ID_RESOLVER);
    }
}
#method_after
@Override
public Response add(Disk disk) {
    if (QueryHelper.hasMatrixParam(getUriInfo(), UNREGISTERED_CONSTRAINT_PARAMETER)) {
        // First we need to query the backend to fill in all the information about the disk from the VDSM.
        // We don't just use the information from the Disk object because it's missing a few things like creation
        // date and last modified date.
        GetUnregisteredDiskQueryParameters getDiskParams = new GetUnregisteredDiskQueryParameters(asGuid(disk.getId()), storageDomainId, getStoragePoolIdForDomain(storageDomainId));
        DiskImage unregisteredDisk = getEntity(DiskImage.class, VdcQueryType.GetUnregisteredDisk, getDiskParams, disk.getId());
        RegisterDiskParameters registerDiskParams = new RegisterDiskParameters(unregisteredDisk);
        return performCreate(VdcActionType.RegisterDisk, registerDiskParams, ID_RESOLVER);
    } else {
        validateDiskForCreation(disk);
        AddDiskParameters params = new AddDiskParameters();
        params.setDiskInfo(getMapper(Disk.class, org.ovirt.engine.core.common.businessentities.Disk.class).map(disk, null));
        params.setStorageDomainId(this.storageDomainId);
        return performCreate(VdcActionType.AddDisk, params, ID_RESOLVER);
    }
}
#end_block

#method_before
@Override
public DiskResource getDeviceSubResource(String id) {
    return inject(new BackendStorageDomainDiskResource(id, this.storageDomainId.toString()));
}
#method_after
@Override
public DiskResource getDeviceSubResource(String id) {
    return inject(new BackendStorageDomainDiskResource(id, this));
}
#end_block

#method_before
@Override
protected Disk performGet(VdcQueryType query, VdcQueryParametersBase params) {
    Disk disk = super.performGet(VdcQueryType.GetDiskByDiskId, new GetDiskByDiskIdParameters(guid));
    if (disk.isSetStorageDomains() && !disk.getStorageDomains().getStorageDomains().isEmpty()) {
        for (StorageDomain sd : disk.getStorageDomains().getStorageDomains()) {
            if (sd.isSetId() && sd.getId().equals(this.storageDomainId)) {
                return disk;
            }
        }
    }
    return notFound();
}
#method_after
@Override
protected Disk performGet(VdcQueryType query, VdcQueryParametersBase params) {
    Disk disk;
    if (QueryHelper.hasMatrixParam(getUriInfo(), UNREGISTERED_CONSTRAINT_PARAMETER)) {
        VdcQueryReturnValue result = runQuery(VdcQueryType.GetDiskByDiskId, new GetDiskByDiskIdParameters(guid));
        if (!result.getSucceeded() || result.getReturnValue() == null) {
            Guid storageDomainGuid = asGuid(storageDomainId);
            disk = super.performGet(VdcQueryType.GetUnregisteredDisk, new GetUnregisteredDiskQueryParameters(guid, storageDomainGuid, parent.getStoragePoolIdForDomain(storageDomainGuid)));
        } else {
            // parameter was passed.
            return notFound();
        }
    } else {
        disk = super.performGet(VdcQueryType.GetDiskByDiskId, new GetDiskByDiskIdParameters(guid));
    }
    if (disk.isSetStorageDomains() && !disk.getStorageDomains().getStorageDomains().isEmpty()) {
        for (StorageDomain sd : disk.getStorageDomains().getStorageDomains()) {
            if (sd.isSetId() && sd.getId().equals(this.storageDomainId)) {
                return disk;
            }
        }
    }
    return notFound();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // Currently this only supports importing images and does not work with luns.
    return getParameters().getDiskImage().getDiskStorageType() == DiskStorageType.IMAGE;
}
#method_after
@Override
protected boolean canDoAction() {
    // Currently this only supports importing images and does not work with luns.
    if (getParameters().getDiskImage().getDiskStorageType() != DiskStorageType.IMAGE) {
        addCanDoActionMessage("$diskId " + getParameters().getDiskImage().getId());
        addCanDoActionMessage("$storageType " + getParameters().getDiskImage().getDiskStorageType());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_DISK_STORAGE_TYPE);
        return false;
    } else if (!validate(new StorageDomainValidator(getStorageDomain()).isDomainExistAndActive())) {
        addCanDoActionMessage("$diskId " + getParameters().getDiskImage().getId());
        addCanDoActionMessage("$domainId " + getStorageDomainId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_UNAVAILABLE);
        return false;
    } else if (getStorageDomain().getStorageDomainType() != StorageDomainType.Data) {
        addCanDoActionMessage("$domainId " + getParameters().getStorageDomainId());
        addCanDoActionMessage("$domainType " + getStorageDomain().getStorageDomainType());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED);
    }
    return true;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    final DiskImage newDiskImage = getParameters().getDiskImage();
    if (newDiskImage != null) {
        addDiskImageToDb(newDiskImage, getCompensationContext());
        getReturnValue().setActionReturnValue(newDiskImage.getId());
        getReturnValue().setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    final DiskImage newDiskImage = getParameters().getDiskImage();
    addDiskImageToDb(newDiskImage, getCompensationContext());
    getReturnValue().setActionReturnValue(newDiskImage.getId());
    getReturnValue().setSucceeded(true);
}
#end_block

#method_before
@Override
protected void setObjectName(Object object, String name, boolean isSuffix) {
    VmTemplate template = ((ImportTemplateData) object).getTemplate();
    if (isSuffix) {
        template.setName(template.getName() + name);
    } else {
        template.setName(name);
    }
}
#method_after
@Override
protected void setObjectName(Object object, String name) {
    ((ImportTemplateData) object).getTemplate().setName(name);
}
#end_block

#method_before
private void executeImportClone() {
    // TODO: support running numbers (for suffix)
    if (objectsToClone.size() == 0) {
        executeImport();
        return;
    }
    ImportCloneModel entity = new ImportCloneModel();
    Object object = objectsToClone.iterator().next();
    entity.setEntity(object);
    entity.setTitle(ConstantsManager.getInstance().getConstants().importConflictTitle());
    // $NON-NLS-1$
    entity.setHashName("import_conflict");
    // $NON-NLS-1$
    UICommand command = new UICommand("onClone", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    entity.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("closeClone", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    entity.getCommands().add(command);
    setConfirmWindow(entity);
}
#method_after
private void executeImportClone() {
    // TODO: support running numbers (for suffix)
    if (objectsToClone.size() == 0) {
        clearCachedAssignedVmNames();
        executeImport();
        return;
    }
    ImportCloneModel entity = new ImportCloneModel();
    Object object = objectsToClone.iterator().next();
    entity.setEntity(object);
    entity.setTitle(ConstantsManager.getInstance().getConstants().importConflictTitle());
    // $NON-NLS-1$
    entity.setHashName("import_conflict");
    // $NON-NLS-1$
    UICommand command = new UICommand("onClone", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    entity.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("closeClone", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    entity.getCommands().add(command);
    setConfirmWindow(entity);
}
#end_block

#method_before
protected void setObjectName(Object object, String name, boolean isSuffix) {
    VM vm = ((ImportVmData) object).getVm();
    String nameForTheClonedVm = isSuffix ? vm.getName() + name : name;
    vm.setName(nameForTheClonedVm);
    assignedVmNames.add(nameForTheClonedVm);
}
#method_after
private void setObjectName(Object object, String input, boolean isSuffix) {
    String nameForTheClonedVm = isSuffix ? getObjectName(object) + input : input;
    setObjectName(object, nameForTheClonedVm);
    assignedVmNames.add(nameForTheClonedVm);
}
#end_block

#method_before
protected void setObjectName(Object object, String name, boolean isSuffix) {
    VM vm = ((ImportVmData) object).getVm();
    String nameForTheClonedVm = isSuffix ? vm.getName() + name : name;
    vm.setName(nameForTheClonedVm);
    assignedVmNames.add(nameForTheClonedVm);
}
#method_after
protected void setObjectName(Object object, String name) {
    ((ImportVmData) object).getVm().setName(name);
}
#end_block

#method_before
protected IValidation[] getClonedNameValidators(Object object) {
    VM vm = ((ImportVmData) object).getVm();
    final int length = AsyncDataProvider.IsWindowsOsType(vm.getOs()) ? UnitVmModel.WINDOWS_VM_NAME_MAX_LIMIT : UnitVmModel.NON_WINDOWS_VM_NAME_MAX_LIMIT;
    return new IValidation[] { new NotEmptyValidation(), new LengthValidation(length), new I18NNameValidation() {

        @Override
        protected String composeMessage() {
            return ConstantsManager.getInstance().getMessages().nameMustConataionOnlyAlphanumericChars(length);
        }
    }, new UniqueNameValidator(assignedVmNames) };
}
#method_after
protected IValidation[] getClonedNameValidators(Object object) {
    final int maxClonedNameLength = getMaxClonedNameLength(object);
    return new IValidation[] { new NotEmptyValidation(), new LengthValidation(maxClonedNameLength), new I18NNameValidation() {

        @Override
        protected String composeMessage() {
            return ConstantsManager.getInstance().getMessages().nameMustConataionOnlyAlphanumericChars(maxClonedNameLength);
        }
    }, new UniqueClonedNameValidator(assignedVmNames) };
}
#end_block

#method_before
protected IValidation[] getClonedAppendedNameValidators(Object object) {
    VM vm = ((ImportVmData) object).getVm();
    final int length = AsyncDataProvider.IsWindowsOsType(vm.getOs()) ? UnitVmModel.WINDOWS_VM_NAME_MAX_LIMIT : UnitVmModel.NON_WINDOWS_VM_NAME_MAX_LIMIT;
    return new IValidation[] { new NotEmptyValidation(), new LengthValidation(length), new I18NNameValidation() {

        @Override
        protected String composeMessage() {
            return ConstantsManager.getInstance().getMessages().newNameWithSuffixCannotContainBlankOrSpecialChars(length);
        }
    }, new UniqueAppendedNameValidator(assignedVmNames) };
}
#method_after
protected IValidation[] getClonedAppendedNameValidators(Object object) {
    final int maxClonedNameLength = getMaxClonedNameLength(object);
    return new IValidation[] { new NotEmptyValidation(), new LengthValidation(maxClonedNameLength), new I18NNameValidation() {

        @Override
        protected String composeMessage() {
            return ConstantsManager.getInstance().getMessages().newNameWithSuffixCannotContainBlankOrSpecialChars(maxClonedNameLength);
        }
    }, new UniqueClonedAppendedNameValidator(assignedVmNames) };
}
#end_block

#method_before
protected void executeImport() {
    clearCachedAssignedVmNames();
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, getEntity().getId(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getName());
        }
        prms.add(prm);
    }
    importModel.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            VmBackupModel vmBackupModel = (VmBackupModel) result.getState();
            vmBackupModel.getWindow().StopProgress();
            vmBackupModel.Cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && vmBackupModel.getSelectedItems().size() == retVals.size()) {
                // $NON-NLS-1$
                String importedVms = "";
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmBackupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms += vm.getName() + ", ";
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    importedVms = StringHelper.trimEnd(importedVms.trim(), ',');
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(importedVms));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmBackupModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#method_after
protected void executeImport() {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, getEntity().getId(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getName());
        }
        prms.add(prm);
    }
    importModel.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            VmBackupModel vmBackupModel = (VmBackupModel) result.getState();
            vmBackupModel.getWindow().StopProgress();
            vmBackupModel.Cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && vmBackupModel.getSelectedItems().size() == retVals.size()) {
                // $NON-NLS-1$
                String importedVms = "";
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmBackupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms += vm.getName() + ", ";
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    importedVms = StringHelper.trimEnd(importedVms.trim(), ',');
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(importedVms));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmBackupModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#end_block

#method_before
@Override
protected void Cancel() {
    super.Cancel();
    clearCachedAssignedVmNames();
}
#method_after
@Override
protected final void Cancel() {
    super.Cancel();
    clearCachedAssignedVmNames();
}
#end_block

#method_before
// get { return SelectedItems == null ? new object[0] : SelectedItems.Cast<storage_domains>().Select(a =>
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object item : getSelectedItems()) {
            storage_domains i = (storage_domains) item;
            items.add(i.getId());
        }
        return items.toArray(new Object[] {});
    }
}
#method_after
// get { return SelectedItems == null ? new object[0] : SelectedItems.Cast<storage_domains>().Select(a =>
protected Object[] getSelectedKeys() {
    if (getSelectedItems() == null) {
        return new Object[0];
    } else {
        ArrayList<Object> items = new ArrayList<Object>();
        for (Object item : getSelectedItems()) {
            StorageDomain i = (StorageDomain) item;
            items.add(i.getId());
        }
        return items.toArray(new Object[] {});
    }
}
#end_block

#method_before
private void Edit() {
    storage_domains storage = (storage_domains) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getstorage_name());
    model.setOriginalName(storage.getstorage_name());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageActive = model.isStorageActive();
    boolean isNew = storage == null;
    model.getHost().setIsChangable(isNew);
    model.getName().setIsChangable(isStorageActive);
    model.getAvailableStorageItems().setIsChangable(isStorageActive);
    model.setIsChangable(isStorageActive);
    IStorageModel item = null;
    switch(storage.getstorage_type()) {
        case NFS:
            item = PrepareNfsStorageForEdit(storage);
            break;
        case FCP:
            item = PrepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = PrepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = PrepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = PreparePosixStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageActive) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#method_after
private void Edit() {
    StorageDomain storage = (StorageDomain) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new NewEditStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editDomainTitle());
    // $NON-NLS-1$
    model.setHashName("edit_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.setStorage(storage);
    model.getName().setEntity(storage.getStorageName());
    model.getDescription().setEntity(storage.getDescription());
    model.setOriginalName(storage.getStorageName());
    model.getDataCenter().setIsChangable(false);
    model.getFormat().setIsChangable(false);
    boolean isStorageActive = model.isStorageActive();
    model.getHost().setIsChangable(false);
    model.getName().setIsChangable(isStorageActive);
    model.getAvailableStorageItems().setIsChangable(isStorageActive);
    model.setIsChangable(isStorageActive);
    IStorageModel item = null;
    switch(storage.getStorageType()) {
        case NFS:
            item = PrepareNfsStorageForEdit(storage);
            break;
        case FCP:
            item = PrepareFcpStorageForEdit(storage);
            break;
        case ISCSI:
            item = PrepareIscsiStorageForEdit(storage);
            break;
        case LOCALFS:
            item = PrepareLocalStorageForEdit(storage);
            break;
        case POSIXFS:
            item = PreparePosixStorageForEdit(storage);
            break;
    }
    model.setItems(new ArrayList<IStorageModel>(Arrays.asList(new IStorageModel[] { item })));
    model.setSelectedItem(item);
    model.Initialize();
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(getSystemTreeSelectedItem().getType()) {
            case Storage:
                {
                    model.getName().setIsChangable(false);
                    // $NON-NLS-1$
                    model.getName().setInfo("Cannot edit Storage Domains's Name in this tree context");
                }
                break;
        }
    }
    UICommand command;
    if (isStorageActive) {
        // $NON-NLS-1$
        command = new UICommand("OnSave", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().ok());
        command.setIsDefault(true);
        model.getCommands().add(command);
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
        command.setIsCancel(true);
        model.getCommands().add(command);
    } else {
        // $NON-NLS-1$
        command = new UICommand("Cancel", this);
        command.setTitle(ConstantsManager.getInstance().getConstants().close());
        command.setIsCancel(true);
        model.getCommands().add(command);
    }
}
#end_block

#method_before
private IStorageModel PrepareNfsStorageForEdit(storage_domains storage) {
    final NfsStorageModel model = new NfsStorageModel();
    model.setRole(storage.getstorage_domain_type());
    model.setIsEditMode(true);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getRetransmissions().setEntity(connection.getNfsRetrans());
            model.getTimeout().setEntity(connection.getNfsTimeo());
            for (Object item : model.getVersion().getItems()) {
                EntityModel itemModel = (EntityModel) item;
                boolean noNfsVersion = itemModel.getEntity() == null && connection.getNfsVersion() == null;
                boolean foundNfsVersion = itemModel.getEntity() != null && itemModel.getEntity().equals(connection.getNfsVersion());
                if (noNfsVersion || foundNfsVersion) {
                    model.getVersion().setSelectedItem(item);
                    break;
                }
            }
            // If any settings were overridden, reflect this in the override checkbox
            model.getOverride().setEntity(connection.getNfsVersion() != null || connection.getNfsRetrans() != null || connection.getNfsTimeo() != null);
        }
    }), storage.getstorage(), true);
    return model;
}
#method_after
private IStorageModel PrepareNfsStorageForEdit(StorageDomain storage) {
    final NfsStorageModel model = new NfsStorageModel();
    model.setRole(storage.getStorageDomainType());
    model.setIsEditMode(true);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getRetransmissions().setEntity(connection.getNfsRetrans());
            model.getTimeout().setEntity(connection.getNfsTimeo());
            for (Object item : model.getVersion().getItems()) {
                EntityModel itemModel = (EntityModel) item;
                boolean noNfsVersion = itemModel.getEntity() == null && connection.getNfsVersion() == null;
                boolean foundNfsVersion = itemModel.getEntity() != null && itemModel.getEntity().equals(connection.getNfsVersion());
                if (noNfsVersion || foundNfsVersion) {
                    model.getVersion().setSelectedItem(item);
                    break;
                }
            }
            // If any settings were overridden, reflect this in the override checkbox
            model.getOverride().setEntity(connection.getNfsVersion() != null || connection.getNfsRetrans() != null || connection.getNfsTimeo() != null);
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel PrepareLocalStorageForEdit(storage_domains storage) {
    LocalStorageModel model = new LocalStorageModel();
    model.setRole(storage.getstorage_domain_type());
    model.getPath().setIsAvailable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            LocalStorageModel localStorageModel = (LocalStorageModel) target;
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            localStorageModel.getPath().setEntity(connection.getconnection());
        }
    }), storage.getstorage(), true);
    return model;
}
#method_after
private IStorageModel PrepareLocalStorageForEdit(StorageDomain storage) {
    LocalStorageModel model = new LocalStorageModel();
    model.setRole(storage.getStorageDomainType());
    model.getPath().setIsAvailable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            LocalStorageModel localStorageModel = (LocalStorageModel) target;
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            localStorageModel.getPath().setEntity(connection.getconnection());
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel PreparePosixStorageForEdit(storage_domains storage) {
    final PosixStorageModel model = new PosixStorageModel();
    model.setRole(storage.getstorage_domain_type());
    model.getPath().setIsChangable(false);
    model.getVfsType().setIsChangable(false);
    model.getMountOptions().setIsChangable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getstorage(), true);
    return model;
}
#method_after
private IStorageModel PreparePosixStorageForEdit(StorageDomain storage) {
    final PosixStorageModel model = new PosixStorageModel();
    model.setRole(storage.getStorageDomainType());
    model.getPath().setIsChangable(false);
    model.getVfsType().setIsChangable(false);
    model.getMountOptions().setIsChangable(false);
    AsyncDataProvider.GetStorageConnectionById(new AsyncQuery(null, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageServerConnections connection = (StorageServerConnections) returnValue;
            model.getPath().setEntity(connection.getconnection());
            model.getVfsType().setEntity(connection.getVfsType());
            model.getMountOptions().setEntity(connection.getMountOptions());
        }
    }), storage.getStorage(), true);
    return model;
}
#end_block

#method_before
private IStorageModel PrepareIscsiStorageForEdit(storage_domains storage) {
    IscsiStorageModel model = new IscsiStorageModel();
    model.setRole(storage.getstorage_domain_type());
    PrepareSanStorageForEdit(model);
    return model;
}
#method_after
private IStorageModel PrepareIscsiStorageForEdit(StorageDomain storage) {
    IscsiStorageModel model = new IscsiStorageModel();
    model.setRole(storage.getStorageDomainType());
    PrepareSanStorageForEdit(model);
    return model;
}
#end_block

#method_before
private IStorageModel PrepareFcpStorageForEdit(storage_domains storage) {
    FcpStorageModel model = new FcpStorageModel();
    model.setRole(storage.getstorage_domain_type());
    PrepareSanStorageForEdit(model);
    return model;
}
#method_after
private IStorageModel PrepareFcpStorageForEdit(StorageDomain storage) {
    FcpStorageModel model = new FcpStorageModel();
    model.setRole(storage.getStorageDomainType());
    PrepareSanStorageForEdit(model);
    return model;
}
#end_block

#method_before
private void PrepareSanStorageForEdit(final SanStorageModel model) {
    StorageModel storageModel = (StorageModel) getWindow();
    storage_domains storage = (storage_domains) getSelectedItem();
    boolean isStorageActive = storageModel.isStorageActive();
    if (isStorageActive) {
        storageModel.getHost().getSelectedItemChangedEvent().addListener(new IEventListener() {

            @Override
            public void eventRaised(Event ev, Object sender, EventArgs args) {
                PostPrepareSanStorageForEdit(model, true);
            }
        });
    } else {
        PostPrepareSanStorageForEdit(model, false);
    }
}
#method_after
private void PrepareSanStorageForEdit(final SanStorageModel model) {
    StorageModel storageModel = (StorageModel) getWindow();
    boolean isStorageActive = storageModel.isStorageActive();
    if (isStorageActive) {
        storageModel.getHost().getSelectedItemChangedEvent().addListener(new IEventListener() {

            @Override
            public void eventRaised(Event ev, Object sender, EventArgs args) {
                PostPrepareSanStorageForEdit(model, true);
            }
        });
    } else {
        PostPrepareSanStorageForEdit(model, false);
    }
}
#end_block

#method_before
private void PostPrepareSanStorageForEdit(SanStorageModel model, boolean isStorageActive) {
    StorageModel storageModel = (StorageModel) getWindow();
    storage_domains storage = (storage_domains) getSelectedItem();
    model.setStorageDomain(storage);
    VDS host = (VDS) storageModel.getHost().getSelectedItem();
    Guid hostId = host != null && isStorageActive ? host.getId() : null;
    AsyncDataProvider.GetLunsByVgId(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            SanStorageModel sanStorageModel = (SanStorageModel) target;
            ArrayList<LUNs> lunList = (ArrayList<LUNs>) returnValue;
            sanStorageModel.ApplyData(lunList, true);
        }
    }, storageModel.getHash()), storage.getstorage(), hostId);
}
#method_after
private void PostPrepareSanStorageForEdit(SanStorageModel model, boolean isStorageActive) {
    StorageModel storageModel = (StorageModel) getWindow();
    StorageDomain storage = (StorageDomain) getSelectedItem();
    model.setStorageDomain(storage);
    VDS host = (VDS) storageModel.getHost().getSelectedItem();
    Guid hostId = host != null && isStorageActive ? host.getId() : null;
    AsyncDataProvider.GetLunsByVgId(new AsyncQuery(model, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            SanStorageModel sanStorageModel = (SanStorageModel) target;
            ArrayList<LUNs> lunList = (ArrayList<LUNs>) returnValue;
            sanStorageModel.ApplyData(lunList, true);
        }
    }, storageModel.getHash()), storage.getStorage(), hostId);
}
#end_block

#method_before
private void ImportDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new ImportStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().importPreConfiguredDomainTitle());
    // $NON-NLS-1$
    model.setHashName("import_pre-configured_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.getName().setIsAvailable(false);
    model.getFormat().setIsAvailable(false);
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    NfsStorageModel tempVar = new NfsStorageModel();
    tempVar.setRole(StorageDomainType.ISO);
    items.add(tempVar);
    NfsStorageModel tempVar2 = new NfsStorageModel();
    tempVar2.setRole(StorageDomainType.ImportExport);
    items.add(tempVar2);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnImport", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#method_after
private void ImportDomain() {
    if (getWindow() != null) {
        return;
    }
    StorageModel model = new StorageModel(new ImportStorageModelBehavior());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().importPreConfiguredDomainTitle());
    // $NON-NLS-1$
    model.setHashName("import_pre-configured_domain");
    model.setSystemTreeSelectedItem(getSystemTreeSelectedItem());
    model.getName().setIsAvailable(false);
    model.getDescription().setIsAvailable(false);
    model.getFormat().setIsAvailable(false);
    ArrayList<IStorageModel> items = new ArrayList<IStorageModel>();
    NfsStorageModel tempVar = new NfsStorageModel();
    tempVar.setRole(StorageDomainType.ISO);
    items.add(tempVar);
    NfsStorageModel tempVar2 = new NfsStorageModel();
    tempVar2.setRole(StorageDomainType.ImportExport);
    items.add(tempVar2);
    model.setItems(items);
    model.Initialize();
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnImport", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    RemoveStorageModel model = new RemoveStorageModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeStoragesTitle());
    // $NON-NLS-1$
    model.setHashName("remove_storage");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToRemoveTheStorageDomainMsg());
    model.getFormat().setIsAvailable(false);
    AsyncDataProvider.GetHostListByStatus(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            StorageListModel storageListModel = (StorageListModel) array[0];
            RemoveStorageModel removeStorageModel = (RemoveStorageModel) array[1];
            storage_domains storage = (storage_domains) storageListModel.getSelectedItem();
            ArrayList<VDS> hosts = (ArrayList<VDS>) returnValue;
            removeStorageModel.getHostList().setItems(hosts);
            removeStorageModel.getHostList().setSelectedItem(Linq.FirstOrDefault(hosts));
            removeStorageModel.getFormat().setIsAvailable(storage.getstorage_domain_type() == StorageDomainType.ISO || storage.getstorage_domain_type() == StorageDomainType.ImportExport);
            if (hosts.isEmpty()) {
                // $NON-NLS-1$
                UICommand tempVar = new UICommand("Cancel", storageListModel);
                tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar.setIsDefault(true);
                tempVar.setIsCancel(true);
                removeStorageModel.getCommands().add(tempVar);
            } else {
                UICommand command;
                // $NON-NLS-1$
                command = new UICommand("OnRemove", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().ok());
                command.setIsDefault(true);
                removeStorageModel.getCommands().add(command);
                // $NON-NLS-1$
                command = new UICommand("Cancel", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                command.setIsCancel(true);
                removeStorageModel.getCommands().add(command);
            }
        }
    }), VDSStatus.Up);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    RemoveStorageModel model = new RemoveStorageModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeStoragesTitle());
    // $NON-NLS-1$
    model.setHashName("remove_storage");
    model.setMessage(ConstantsManager.getInstance().getConstants().areYouSureYouWantToRemoveTheStorageDomainMsg());
    model.getFormat().setIsAvailable(false);
    AsyncDataProvider.GetHostListByStatus(new AsyncQuery(new Object[] { this, model }, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            Object[] array = (Object[]) target;
            StorageListModel storageListModel = (StorageListModel) array[0];
            RemoveStorageModel removeStorageModel = (RemoveStorageModel) array[1];
            StorageDomain storage = (StorageDomain) storageListModel.getSelectedItem();
            ArrayList<VDS> hosts = (ArrayList<VDS>) returnValue;
            removeStorageModel.getHostList().setItems(hosts);
            removeStorageModel.getHostList().setSelectedItem(Linq.FirstOrDefault(hosts));
            removeStorageModel.getFormat().setIsAvailable(storage.getStorageDomainType() == StorageDomainType.ISO || storage.getStorageDomainType() == StorageDomainType.ImportExport);
            if (hosts.isEmpty()) {
                // $NON-NLS-1$
                UICommand tempVar = new UICommand("Cancel", storageListModel);
                tempVar.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar.setIsDefault(true);
                tempVar.setIsCancel(true);
                removeStorageModel.getCommands().add(tempVar);
            } else {
                UICommand command;
                // $NON-NLS-1$
                command = new UICommand("OnRemove", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().ok());
                command.setIsDefault(true);
                removeStorageModel.getCommands().add(command);
                // $NON-NLS-1$
                command = new UICommand("Cancel", storageListModel);
                command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                command.setIsCancel(true);
                removeStorageModel.getCommands().add(command);
            }
        }
    }), VDSStatus.Up);
}
#end_block

#method_before
private void OnRemove() {
    if (getSelectedItem() != null) {
        storage_domains storage = (storage_domains) getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        VDS host = (VDS) model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat((storage.getstorage_domain_type() == StorageDomainType.Data || storage.getstorage_domain_type() == StorageDomainType.Master) ? true : (Boolean) model.getFormat().getEntity());
        Frontend.RunAction(VdcActionType.RemoveStorageDomain, tempVar, null, this);
    }
    Cancel();
}
#method_after
private void OnRemove() {
    if (getSelectedItem() != null) {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.Validate()) {
            return;
        }
        VDS host = (VDS) model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat((storage.getStorageDomainType() == StorageDomainType.Data || storage.getStorageDomainType() == StorageDomainType.Master) ? true : (Boolean) model.getFormat().getEntity());
        Frontend.RunAction(VdcActionType.RemoveStorageDomain, tempVar, null, this);
    }
    Cancel();
}
#end_block

#method_before
private void Destroy() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().destroyStorageDomainTitle());
    // $NON-NLS-1$
    model.setHashName("destroy_storage_domain");
    ArrayList<String> items = new ArrayList<String>();
    items.add(((storage_domains) getSelectedItem()).getstorage_name());
    model.setItems(items);
    model.getLatch().setIsAvailable(true);
    model.getLatch().setIsChangable(true);
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnDestroy", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#method_after
private void Destroy() {
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().destroyStorageDomainTitle());
    // $NON-NLS-1$
    model.setHashName("destroy_storage_domain");
    ArrayList<String> items = new ArrayList<String>();
    items.add(((StorageDomain) getSelectedItem()).getStorageName());
    model.setItems(items);
    model.getLatch().setIsAvailable(true);
    model.getLatch().setIsChangable(true);
    UICommand command;
    // $NON-NLS-1$
    command = new UICommand("OnDestroy", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    model.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsCancel(true);
    model.getCommands().add(command);
}
#end_block

#method_before
private void OnDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    storage_domains storageDomain = (storage_domains) getSelectedItem();
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#method_after
private void OnDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    StorageDomain storageDomain = (StorageDomain) getSelectedItem();
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<VdcActionParametersBase>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#end_block

#method_before
@Override
protected void ItemsCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e) {
    super.ItemsCollectionChanged(sender, e);
    // Try to select an item corresponding to the system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        storage_domains storage = (storage_domains) getSystemTreeSelectedItem().getEntity();
        setSelectedItem(Linq.FirstOrDefault(Linq.<storage_domains>Cast(getItems()), new Linq.StoragePredicate(storage.getId())));
    }
}
#method_after
@Override
protected void ItemsCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e) {
    super.ItemsCollectionChanged(sender, e);
    // Try to select an item corresponding to the system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        setSelectedItem(Linq.FirstOrDefault(Linq.<StorageDomain>Cast(getItems()), new Linq.StoragePredicate(storage.getId())));
    }
}
#end_block

#method_before
@Override
protected void UpdateDetailsAvailability() {
    if (getSelectedItem() != null) {
        storage_domains storage = (storage_domains) getSelectedItem();
        boolean isBackupStorage = storage.getstorage_domain_type() == StorageDomainType.ImportExport;
        boolean isDataStorage = storage.getstorage_domain_type() == StorageDomainType.Data || storage.getstorage_domain_type() == StorageDomainType.Master;
        boolean isIsoStorage = storage.getstorage_domain_type() == StorageDomainType.ISO;
        vmBackupModel.setIsAvailable(isBackupStorage);
        templateBackupModel.setIsAvailable(isBackupStorage);
        vmListModel.setIsAvailable(isDataStorage);
        templateListModel.setIsAvailable(isDataStorage);
        diskListModel.setIsAvailable(isDataStorage);
        isoListModel.setIsAvailable(isIsoStorage);
    }
}
#method_after
@Override
protected void UpdateDetailsAvailability() {
    if (getSelectedItem() != null) {
        StorageDomain storage = (StorageDomain) getSelectedItem();
        boolean isBackupStorage = storage.getStorageDomainType() == StorageDomainType.ImportExport;
        boolean isDataStorage = storage.getStorageDomainType() == StorageDomainType.Data || storage.getStorageDomainType() == StorageDomainType.Master;
        boolean isIsoStorage = storage.getStorageDomainType() == StorageDomainType.ISO;
        vmBackupModel.setIsAvailable(isBackupStorage);
        templateBackupModel.setIsAvailable(isBackupStorage);
        vmListModel.setIsAvailable(isDataStorage);
        templateListModel.setIsAvailable(isDataStorage);
        diskListModel.setIsAvailable(isDataStorage);
        isoListModel.setIsAvailable(isIsoStorage);
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    ArrayList<storage_domains> items = getSelectedItems() != null ? Linq.<storage_domains>Cast(getSelectedItems()) : new ArrayList<storage_domains>();
    storage_domains item = (storage_domains) getSelectedItem();
    getNewDomainCommand().setIsAvailable(true);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && isEditAvailable(item));
    getRemoveCommand().setIsExecutionAllowed(items.size() == 1 && Linq.FindAllStorageDomainsBySharedStatus(items, StorageDomainSharedStatus.Unattached).size() == items.size());
    getDestroyCommand().setIsExecutionAllowed(item != null && items.size() == 1);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage);
    getNewDomainCommand().setIsAvailable(isAvailable);
    getRemoveCommand().setIsAvailable(isAvailable);
}
#method_after
private void UpdateActionAvailability() {
    ArrayList<StorageDomain> items = getSelectedItems() != null ? Linq.<StorageDomain>Cast(getSelectedItems()) : new ArrayList<StorageDomain>();
    StorageDomain item = (StorageDomain) getSelectedItem();
    getNewDomainCommand().setIsAvailable(true);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && isEditAvailable(item));
    getRemoveCommand().setIsExecutionAllowed(items.size() == 1 && Linq.FindAllStorageDomainsBySharedStatus(items, StorageDomainSharedStatus.Unattached).size() == items.size());
    getDestroyCommand().setIsExecutionAllowed(item != null && items.size() == 1);
    // System tree dependent actions.
    boolean isAvailable = !(getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage);
    getNewDomainCommand().setIsAvailable(isAvailable);
    getRemoveCommand().setIsAvailable(isAvailable);
}
#end_block

#method_before
private boolean isEditAvailable(storage_domains storageDomain) {
    if (storageDomain == null) {
        return false;
    }
    boolean isActive = storageDomain.getstorage_domain_shared_status() == StorageDomainSharedStatus.Active || storageDomain.getstorage_domain_shared_status() == StorageDomainSharedStatus.Mixed;
    boolean isBlockStorage = storageDomain.getstorage_type().isBlockDomain();
    return isBlockStorage ? true : isActive;
}
#method_after
private boolean isEditAvailable(StorageDomain storageDomain) {
    if (storageDomain == null) {
        return false;
    }
    boolean isActive = storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Active || storageDomain.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Mixed;
    boolean isBlockStorage = storageDomain.getStorageType().isBlockDomain();
    return isBlockStorage ? true : isActive;
}
#end_block

#method_before
private void SavePosixStorage(TaskContext context) {
    this.context = context;
    storage_domains selectedItem = (storage_domains) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = (String) posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getstorage_name();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SavePosixStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    PosixStorageModel posixModel = (PosixStorageModel) storageModel;
    path = (String) posixModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewPosixStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void SaveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType((String) posixModel.getVfsType().getEntity());
    connection.setMountOptions((String) posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddPosixFsStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setconnection(path);
    connection.setstorage_type(posixModel.getType());
    connection.setVfsType((String) posixModel.getVfsType().getEntity());
    connection.setMountOptions((String) posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddPosixFsStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId()));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
            // Attach storage to data center as necessary.
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    storage_domains selectedItem = (storage_domains) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getstorage_name();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewNfsStorage();
                }
            }
        }), null, path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#method_after
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    if ((Boolean) nfsModel.getOverride().getEntity()) {
        tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
        tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
    }
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            StorageModel storageModel = (StorageModel) storageListModel.getWindow();
            // Attach storage to data center as necessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.AttachStorageToDataCenter((Guid) storageListModel.storageId, dataCenter.getId());
            }
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#end_block

#method_before
private void SaveLocalStorage(TaskContext context) {
    this.context = context;
    storage_domains selectedItem = (storage_domains) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = (String) localModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getstorage_name();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewLocalStorage();
                }
            }
        }), host.getStoragePoolId(), path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SaveLocalStorage(TaskContext context) {
    this.context = context;
    StorageDomain selectedItem = (StorageDomain) getSelectedItem();
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = (String) localModel.getPath().getEntity();
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(selectedItem.getStorageStaticData());
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    if (isNew) {
        AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                StorageListModel storageListModel = (StorageListModel) target;
                ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
                if (storages != null && storages.size() > 0) {
                    String storageName = storages.get(0).getStorageName();
                    OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().createFailedDomainAlreadyExistStorageMsg(storageName));
                } else {
                    storageListModel.SaveNewLocalStorage();
                }
            }
        }), host.getStoragePoolId(), path);
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = false;
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            if (storageListModel.removeConnection) {
                storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
                storageListModel.removeConnection = false;
            }
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
            storageListModel.connection.setid((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            storageListModel.removeConnection = false;
            storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            if (storageListModel.removeConnection) {
                storageListModel.CleanConnection(storageListModel.connection, storageListModel.hostId);
                storageListModel.removeConnection = false;
            }
            storageListModel.OnFinish(storageListModel.context, false, storageListModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void SaveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    storage_domains storage = (storage_domains) getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setstorage_type(isNew ? sanModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? sanModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setStorageFormat(isNew ? (StorageFormatType) sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    if (isNew) {
        SaveNewSanStorage();
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModel sanStorageModel = (SanStorageModel) storageModel.getSelectedItem();
                boolean force = sanStorageModel.isForce();
                storage_domains storageDomain1 = (storage_domains) storageListModel.getSelectedItem();
                ArrayList<String> lunIds = new ArrayList<String>();
                for (LunModel lun : sanStorageModel.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.RunAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunIds, force), null, this);
                }
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void SaveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    StorageDomain storage = (StorageDomain) getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setStorageType(isNew ? sanModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? sanModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageFormat(isNew ? (StorageFormatType) sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setDescription((String) model.getDescription().getEntity());
    if (isNew) {
        SaveNewSanStorage();
    } else {
        Frontend.RunAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModel sanStorageModel = (SanStorageModel) storageModel.getSelectedItem();
                boolean force = sanStorageModel.isForce();
                StorageDomain storageDomain1 = (StorageDomain) storageListModel.getSelectedItem();
                ArrayList<String> lunIds = new ArrayList<String>();
                for (LunModel lun : sanStorageModel.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.RunAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunIds, force), null, this);
                }
                storageListModel.OnFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
public void ImportNfsStoragePostInit() {
    // Check storage domain existence
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageListModel storageListModel = (StorageListModel) target;
            ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getstorage_name();
                OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().importFailedDomainAlreadyExistStorageMsg(storageName));
            } else {
                StorageServerConnections tempVar = new StorageServerConnections();
                storageModel = storageListModel.storageModel;
                NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
                tempVar.setconnection(storageListModel.path);
                tempVar.setstorage_type(StorageType.NFS);
                if ((Boolean) nfsModel.getOverride().getEntity()) {
                    tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
                    tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
                    tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
                }
                storageListModel.nfsConnection = tempVar;
                storageListModel.ImportNfsStorageConnect();
            }
        }
    }), null, path);
}
#method_after
public void ImportNfsStoragePostInit() {
    // Check storage domain existence
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            StorageListModel storageListModel = (StorageListModel) target;
            ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getStorageName();
                OnFinish(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getMessages().importFailedDomainAlreadyExistStorageMsg(storageName));
            } else {
                StorageServerConnections tempVar = new StorageServerConnections();
                storageModel = storageListModel.storageModel;
                NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
                tempVar.setconnection(storageListModel.path);
                tempVar.setstorage_type(StorageType.NFS);
                if ((Boolean) nfsModel.getOverride().getEntity()) {
                    tempVar.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
                    tempVar.setNfsRetrans(nfsModel.getRetransmissions().AsConvertible().nullableShort());
                    tempVar.setNfsTimeo(nfsModel.getTimeout().AsConvertible().nullableShort());
                }
                storageListModel.nfsConnection = tempVar;
                storageListModel.ImportNfsStorageConnect();
            }
        }
    }), null, path);
}
#end_block

#method_before
public void ImportNfsStorageConnect() {
    Frontend.RunAction(VdcActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                AsyncDataProvider.GetExistingStorageDomainList(new AsyncQuery(storageListModel, new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object target, Object returnValue) {
                        StorageListModel storageListModel1 = (StorageListModel) target;
                        ArrayList<storage_domains> domains = (ArrayList<storage_domains>) returnValue;
                        if (domains != null) {
                            if (domains.isEmpty()) {
                                PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().thereIsNoStorageDomainUnderTheSpecifiedPathMsg());
                            } else {
                                storageListModel1.ImportNfsStorageAddDomain(domains);
                            }
                        } else {
                            PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
                        }
                    }
                }), hostId, domainType, path);
            } else {
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
            }
        }
    }, this);
}
#method_after
public void ImportNfsStorageConnect() {
    Frontend.RunAction(VdcActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(nfsConnection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                AsyncDataProvider.GetExistingStorageDomainList(new AsyncQuery(storageListModel, new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object target, Object returnValue) {
                        StorageListModel storageListModel1 = (StorageListModel) target;
                        ArrayList<StorageDomain> domains = (ArrayList<StorageDomain>) returnValue;
                        if (domains != null) {
                            if (domains.isEmpty()) {
                                PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().thereIsNoStorageDomainUnderTheSpecifiedPathMsg());
                            } else {
                                storageListModel1.ImportNfsStorageAddDomain(domains);
                            }
                        } else {
                            PostImportNfsStorage(storageListModel1.context, false, storageListModel1.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
                        }
                    }
                }), hostId, domainType, path);
            } else {
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
            }
        }
    }, this);
}
#end_block

#method_before
public void ImportNfsStorageAddDomain(ArrayList<storage_domains> domains) {
    storage_domains sdToAdd = Linq.FirstOrDefault(domains);
    StorageDomainStatic sdsToAdd = sdToAdd == null ? null : sdToAdd.getStorageStaticData();
    StorageDomainManagementParameter params = new StorageDomainManagementParameter(sdsToAdd);
    params.setVdsId(hostId);
    Frontend.RunAction(VdcActionType.AddExistingNFSStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            Object[] array = (Object[]) result.getState();
            StorageListModel storageListModel = (StorageListModel) array[0];
            storage_domains sdToAdd1 = (storage_domains) array[1];
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                StorageModel model = (StorageModel) storageListModel.getWindow();
                storage_pool dataCenter = (storage_pool) model.getDataCenter().getSelectedItem();
                if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                    storageListModel.AttachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId());
                }
                PostImportNfsStorage(storageListModel.context, true, storageListModel.storageModel, null);
            } else {
                // $NON-NLS-1$
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, "");
            }
        }
    }, new Object[] { this, sdToAdd });
}
#method_after
public void ImportNfsStorageAddDomain(ArrayList<StorageDomain> domains) {
    StorageDomain sdToAdd = Linq.FirstOrDefault(domains);
    StorageDomainStatic sdsToAdd = sdToAdd == null ? null : sdToAdd.getStorageStaticData();
    StorageDomainManagementParameter params = new StorageDomainManagementParameter(sdsToAdd);
    params.setVdsId(hostId);
    Frontend.RunAction(VdcActionType.AddExistingNFSStorageDomain, params, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            Object[] array = (Object[]) result.getState();
            StorageListModel storageListModel = (StorageListModel) array[0];
            StorageDomain sdToAdd1 = (StorageDomain) array[1];
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                StorageModel model = (StorageModel) storageListModel.getWindow();
                storage_pool dataCenter = (storage_pool) model.getDataCenter().getSelectedItem();
                if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                    storageListModel.AttachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId());
                }
                PostImportNfsStorage(storageListModel.context, true, storageListModel.storageModel, null);
            } else {
                // $NON-NLS-1$
                PostImportNfsStorage(storageListModel.context, false, storageListModel.storageModel, "");
            }
        }
    }, new Object[] { this, sdToAdd });
}
#end_block

#method_before
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        SaveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        SaveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        SavePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        SaveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportSan")) {
        ImportSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#method_after
@Override
public void run(TaskContext context) {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    String key = (String) data.get(0);
    if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveNfs")) {
        SaveNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveLocal")) {
        SaveLocalStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SavePosix")) {
        SavePosixStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "SaveSan")) {
        SaveSanStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "ImportNfs")) {
        ImportNfsStorage(context);
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(key, "Finish")) {
        getWindow().StopProgress();
        if ((Boolean) data.get(1)) {
            Cancel();
        } else {
            ((Model) data.get(2)).setMessage((String) data.get(3));
        }
    }
}
#end_block

#method_before
@Override
protected void OpenReport() {
    final ReportModel reportModel = super.createReportModel();
    List<storage_domains> items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList<storage_domains>();
    storage_domains storage = items.iterator().next();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            List<storage_pool> dataCenters = (List<storage_pool>) returnValue;
            for (storage_pool dataCenter : dataCenters) {
                reportModel.addDataCenterID(dataCenter.getId().toString());
            }
            if (reportModel == null) {
                return;
            }
            setWidgetModel(reportModel);
        }
    }), storage.getId());
}
#method_after
@Override
protected void OpenReport() {
    final ReportModel reportModel = super.createReportModel();
    List<StorageDomain> items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList<StorageDomain>();
    StorageDomain storage = items.iterator().next();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            List<storage_pool> dataCenters = (List<storage_pool>) returnValue;
            for (storage_pool dataCenter : dataCenters) {
                reportModel.addDataCenterID(dataCenter.getId().toString());
            }
            if (reportModel == null) {
                return;
            }
            setWidgetModel(reportModel);
        }
    }), storage.getId());
}
#end_block

#method_before
@Override
protected void setReportModelResourceId(ReportModel reportModel, String idParamName, boolean isMultiple) {
    ArrayList<storage_domains> items = getSelectedItems() != null ? Linq.<storage_domains>Cast(getSelectedItems()) : new ArrayList<storage_domains>();
    if (idParamName != null) {
        for (storage_domains item : items) {
            if (isMultiple) {
                reportModel.addResourceId(idParamName, item.getId().toString());
            } else {
                reportModel.setResourceId(idParamName, item.getId().toString());
            }
        }
    }
}
#method_after
@Override
protected void setReportModelResourceId(ReportModel reportModel, String idParamName, boolean isMultiple) {
    ArrayList<StorageDomain> items = getSelectedItems() != null ? Linq.<StorageDomain>Cast(getSelectedItems()) : new ArrayList<StorageDomain>();
    if (idParamName != null) {
        for (StorageDomain item : items) {
            if (isMultiple) {
                reportModel.addResourceId(idParamName, item.getId().toString());
            } else {
                reportModel.setResourceId(idParamName, item.getId().toString());
            }
        }
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // disconnect the connection from vdsm
    boolean isStorageDisconnectSucceeded = disconnectStorage();
    if (isStorageDisconnectSucceeded) {
        String connectionId = getConnection().getid();
        if (StringUtils.isNotEmpty(connectionId)) {
            // remove the connection record from db
            getDbFacade().getStorageServerConnectionDao().remove(connectionId);
            setSucceeded(true);
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    String connectionId = getConnection().getid();
    if (StringUtils.isNotEmpty(connectionId)) {
        getDbFacade().getStorageServerConnectionDao().remove(connectionId);
    }
    // disconnect the connection from vdsm
    disconnectStorage();
    setSucceeded(true);
}
#end_block

#method_before
@Override
public String toString() {
    final String TEST_SUCCEEDED = "Test Succeeded, ";
    final String TEST_FAILED = "Test Failed: ";
    return getIsSucceeded() ? TEST_SUCCEEDED + getStatus() : TEST_FAILED + getMessage();
}
#method_after
@Override
public String toString() {
    final String TEST_SUCCEEDED = "Test Succeeded, ";
    final String TEST_FAILED = "Test Failed, ";
    return getIsSucceeded() ? TEST_SUCCEEDED + getStatus() : TEST_FAILED + getMessage();
}
#end_block

#method_before
public VDSReturnValue runVdsCommand(VDSCommandType commandType, VDSParametersBase parameters) throws VdcBLLException {
    VDSReturnValue returnValue = getBackendResourceManager().RunVdsCommand(commandType, parameters);
    if (!returnValue.getSucceeded()) {
        throw new VdcBLLException(returnValue.getVdsError().getCode(), returnValue.getVdsError().getMessage());
    }
    return returnValue;
}
#method_after
protected VDSReturnValue runVdsCommand(VDSCommandType commandType, VDSParametersBase parameters) throws VdcBLLException {
    VDSReturnValue returnValue = getBackendResourceManager().RunVdsCommand(commandType, parameters);
    if (!returnValue.getSucceeded()) {
        throw new VdcBLLException(returnValue.getVdsError().getCode(), returnValue.getVdsError().getMessage());
    }
    return returnValue;
}
#end_block

#method_before
private void UpdateOptionsNonLocalFS() {
    if (hosts == null || allHosts == null || (getEntity().supportsGlusterService() && isAnyHostUpInCluster == null)) {
        return;
    }
    // Add host action.
    // $NON-NLS-1$
    UICommand addHostAction = new UICommand("AddHost", this);
    if (hosts.size() > 1) {
        hosts.remove(0);
    }
    if (hosts.isEmpty()) {
        addHostAction.setTitle(ClusterConfigureHostsAction);
        getCompulsoryActions().add(addHostAction);
    } else if (!getEntity().supportsGlusterService() || isAnyHostUpInCluster) {
        addHostAction.setTitle(ClusterAddAnotherHostAction);
        getOptionalActions().add(addHostAction);
    }
    if (getEntity().getStoragePoolId() == null) {
        addHostAction.getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().theClusterIsntAttachedToADcClusterGuide());
        addHostAction.setIsExecutionAllowed(false);
        return;
    }
    ArrayList<VDS> availableHosts = new ArrayList<VDS>();
    for (VDS vds : allHosts) {
        if (!getEntity().getId().equals(vds.getVdsGroupId()) && (vds.getStatus() == VDSStatus.Maintenance || vds.getStatus() == VDSStatus.PendingApproval) && vds.getSupportedClusterVersionsSet().contains(getEntity().getcompatibility_version())) {
            availableHosts.add(vds);
        }
    }
    // Select host action.
    // $NON-NLS-1$
    UICommand selectHostAction = new UICommand("SelectHost", this);
    if (availableHosts.size() > 0) {
        if (hosts.isEmpty()) {
            selectHostAction.setTitle(SelectHostsAction);
            getCompulsoryActions().add(selectHostAction);
        } else if (!getEntity().supportsGlusterService() || isAnyHostUpInCluster) {
            selectHostAction.setTitle(SelectHostsAction);
            getOptionalActions().add(selectHostAction);
        }
    }
    StopProgress();
}
#method_after
private void UpdateOptionsNonLocalFS() {
    if (hosts == null || allHosts == null || !isUpHostCheckCompleted()) {
        return;
    }
    if (getEntity() == null) {
        StopProgress();
        setWindow(null);
        return;
    }
    // Add host action.
    // $NON-NLS-1$
    UICommand addHostAction = new UICommand("AddHost", this);
    if (hosts.size() > 1) {
        hosts.remove(0);
    }
    if (hosts.isEmpty()) {
        addHostAction.setTitle(ClusterConfigureHostsAction);
        getCompulsoryActions().add(addHostAction);
    } else if (isAnyUpHostInCluster()) {
        addHostAction.setTitle(ClusterAddAnotherHostAction);
        getOptionalActions().add(addHostAction);
    }
    if (getEntity().getStoragePoolId() == null) {
        addHostAction.getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().theClusterIsntAttachedToADcClusterGuide());
        addHostAction.setIsExecutionAllowed(false);
        return;
    }
    ArrayList<VDS> availableHosts = new ArrayList<VDS>();
    for (VDS vds : allHosts) {
        if (!getEntity().getId().equals(vds.getVdsGroupId()) && (vds.getStatus() == VDSStatus.Maintenance || vds.getStatus() == VDSStatus.PendingApproval) && vds.getSupportedClusterVersionsSet().contains(getEntity().getcompatibility_version())) {
            availableHosts.add(vds);
        }
    }
    // Select host action.
    // $NON-NLS-1$
    UICommand selectHostAction = new UICommand("SelectHost", this);
    if (availableHosts.size() > 0) {
        if (hosts.isEmpty()) {
            selectHostAction.setTitle(SelectHostsAction);
            getCompulsoryActions().add(selectHostAction);
        } else if (isAnyUpHostInCluster()) {
            selectHostAction.setTitle(SelectHostsAction);
            getOptionalActions().add(selectHostAction);
        }
    }
    StopProgress();
}
#end_block

#method_before
public void OnAddHost() {
    CancelConfirm();
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    VDS host = new VDS();
    host.setVdsName((String) model.getName().getEntity());
    host.setHostName((String) model.getHost().getEntity());
    host.setPort((Integer) model.getPort().getEntity());
    host.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    // Save primary PM parameters.
    host.setManagmentIp((String) model.getManagementIp().getEntity());
    host.setPmUser((String) model.getPmUserName().getEntity());
    host.setPmPassword((String) model.getPmPassword().getEntity());
    host.setPmType((String) model.getPmType().getSelectedItem());
    host.setPmOptionsMap(new ValueObjectMap(model.getPmOptionsMap(), false));
    // Save secondary PM parameters.
    host.setPmSecondaryIp((String) model.getPmSecondaryIp().getEntity());
    host.setPmSecondaryUser((String) model.getPmSecondaryUserName().getEntity());
    host.setPmSecondaryPassword((String) model.getPmSecondaryPassword().getEntity());
    host.setPmSecondaryType((String) model.getPmSecondaryType().getSelectedItem());
    host.setPmSecondaryOptionsMap(new ValueObjectMap(model.getPmSecondaryOptionsMap(), false));
    // Save other PM parameters.
    host.setpm_enabled((Boolean) model.getIsPm().getEntity());
    host.setPmSecondaryConcurrent((Boolean) model.getPmSecondaryConcurrent().getEntity());
    AddVdsActionParameters vdsActionParams = new AddVdsActionParameters();
    vdsActionParams.setvds(host);
    vdsActionParams.setVdsId(host.getId());
    vdsActionParams.setRootPassword((String) model.getRootPassword().getEntity());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVds, vdsActionParams, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ClusterGuideModel localModel = (ClusterGuideModel) result.getState();
            localModel.PostOnAddHost(result.getReturnValue());
        }
    }, this);
}
#method_after
public void OnAddHost() {
    CancelConfirm();
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    VDS host = new VDS();
    host.setVdsName((String) model.getName().getEntity());
    host.setHostName((String) model.getHost().getEntity());
    host.setPort((Integer) model.getPort().getEntity());
    host.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    // Save primary PM parameters.
    host.setManagementIp((String) model.getManagementIp().getEntity());
    host.setPmUser((String) model.getPmUserName().getEntity());
    host.setPmPassword((String) model.getPmPassword().getEntity());
    host.setPmType((String) model.getPmType().getSelectedItem());
    host.setPmOptionsMap(new ValueObjectMap(model.getPmOptionsMap(), false));
    // Save secondary PM parameters.
    host.setPmSecondaryIp((String) model.getPmSecondaryIp().getEntity());
    host.setPmSecondaryUser((String) model.getPmSecondaryUserName().getEntity());
    host.setPmSecondaryPassword((String) model.getPmSecondaryPassword().getEntity());
    host.setPmSecondaryType((String) model.getPmSecondaryType().getSelectedItem());
    host.setPmSecondaryOptionsMap(new ValueObjectMap(model.getPmSecondaryOptionsMap(), false));
    // Save other PM parameters.
    host.setpm_enabled((Boolean) model.getIsPm().getEntity());
    host.setPmSecondaryConcurrent((Boolean) model.getPmSecondaryConcurrent().getEntity());
    AddVdsActionParameters vdsActionParams = new AddVdsActionParameters();
    vdsActionParams.setvds(host);
    vdsActionParams.setVdsId(host.getId());
    vdsActionParams.setRootPassword((String) model.getRootPassword().getEntity());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVds, vdsActionParams, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ClusterGuideModel localModel = (ClusterGuideModel) result.getState();
            localModel.PostOnAddHost(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VdsStatistics other = (VdsStatistics) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(cpu_idle, other.cpu_idle) && ObjectUtils.objectsEqual(cpu_load, other.cpu_load) && ObjectUtils.objectsEqual(cpu_sys, other.cpu_sys) && ObjectUtils.objectsEqual(cpu_user, other.cpu_user) && ObjectUtils.objectsEqual(mem_available, other.mem_available) && ObjectUtils.objectsEqual(mem_shared, other.mem_shared) && ObjectUtils.objectsEqual(usage_cpu_percent, other.usage_cpu_percent) && ObjectUtils.objectsEqual(usage_network_percent, other.usage_network_percent) && ObjectUtils.objectsEqual(ksm_state, other.ksm_state) && ObjectUtils.objectsEqual(ksm_pages, other.ksm_pages) && ObjectUtils.objectsEqual(ksm_cpu_percent, other.ksm_cpu_percent) && ObjectUtils.objectsEqual(swap_total, other.swap_total) && ObjectUtils.objectsEqual(swap_free, other.swap_free));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VdsStatistics other = (VdsStatistics) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.bigDecimalEqual(cpu_idle, other.cpu_idle) && ObjectUtils.bigDecimalEqual(cpu_load, other.cpu_load) && ObjectUtils.bigDecimalEqual(cpu_sys, other.cpu_sys) && ObjectUtils.bigDecimalEqual(cpu_user, other.cpu_user) && ObjectUtils.objectsEqual(mem_available, other.mem_available) && ObjectUtils.objectsEqual(mem_shared, other.mem_shared) && ObjectUtils.objectsEqual(usage_cpu_percent, other.usage_cpu_percent) && ObjectUtils.objectsEqual(usage_network_percent, other.usage_network_percent) && ObjectUtils.objectsEqual(ksm_state, other.ksm_state) && ObjectUtils.objectsEqual(ksm_pages, other.ksm_pages) && ObjectUtils.objectsEqual(ksm_cpu_percent, other.ksm_cpu_percent) && ObjectUtils.objectsEqual(swap_total, other.swap_total) && ObjectUtils.objectsEqual(swap_free, other.swap_free));
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VmPool other = (VmPool) obj;
    // as they will never match because of how they are initialized.
    return (ObjectUtils.objectsEqual(id, other.id) && defaultTimeInDays == other.defaultTimeInDays && ObjectUtils.objectsEqual(parameters, other.parameters) && ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId) && ObjectUtils.objectsEqual(description, other.description) && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(type, other.type));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    VmPool other = (VmPool) obj;
    return (ObjectUtils.objectsEqual(id, other.id) && ObjectUtils.objectsEqual(defaultEndTime, other.defaultEndTime) && ObjectUtils.objectsEqual(defaultStartTime, other.defaultStartTime) && defaultTimeInDays == other.defaultTimeInDays && ObjectUtils.objectsEqual(parameters, other.parameters) && ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId) && ObjectUtils.objectsEqual(description, other.description) && ObjectUtils.objectsEqual(name, other.name) && ObjectUtils.objectsEqual(type, other.type));
}
#end_block

#method_before
public String getHelpNote() {
    String s = "\n\n\n" + "### Notes:\n" + "## 1. Passwords: password can be set in interactive mode ie:\n" + "###        engine-config -s PasswordEntry=interactive\n" + "###    or via file with one of the following options:\n" + "###        engine-config -s PasswordEntry --admin-pass-file=/tmp/mypass\n" + "###        engine-config -s PasswordEntry=/tmp/mypass\n" + "### 2. In order for your change(s) to take effect,\n" + "###    restart the oVirt engine service (using: 'service ovirt-engine restart').\n" + "################################################################################\n\n";
    return s;
}
#method_after
public String getHelpNote() {
    return String.format("%n%n%n" + "### Notes:%n" + "### 1. Passwords: password can be set in interactive mode ie:%n" + "###        engine-config -s PasswordEntry=interactive%n" + "###    or via file with one of the following options:%n" + "###        engine-config -s PasswordEntry --admin-pass-file=/tmp/mypass%n" + "###        engine-config -s PasswordEntry=/tmp/mypass%n" + "### 2. In order for your change(s) to take effect,%n" + "###    restart the oVirt engine service (using: 'service ovirt-engine restart').%n" + "################################################################################%n%n");
}
#end_block

#method_before
private void updateProperties() {
    VDSGroup vdsGroup = getEntity();
    setName(vdsGroup.getname());
    setDescription(vdsGroup.getdescription());
    setCpuName(vdsGroup.getcpu_name());
    setDataCenterName(vdsGroup.getStoragePoolName());
    setMemoryOverCommit(vdsGroup.getmax_vds_memory_over_commit());
    setCpuThreads(vdsGroup.getCountThreadsAsCores());
    setResiliencePolicy(vdsGroup.getMigrateOnError());
}
#method_after
private void updateProperties() {
    VDSGroup vdsGroup = getEntity();
    setName(vdsGroup.getname());
    setDescription(vdsGroup.getdescription());
    setCpuName(vdsGroup.getcpu_name());
    setDataCenterName(vdsGroup.getStoragePoolName());
    setMemoryOverCommit(vdsGroup.getmax_vds_memory_over_commit());
    setCpuThreads(vdsGroup.getCountThreadsAsCores());
    setResiliencePolicy(vdsGroup.getMigrateOnError());
    setCompatibilityVersion(vdsGroup.getcompatibility_version().getValue());
    generateClusterType(vdsGroup.supportsGlusterService(), vdsGroup.supportsVirtService());
}
#end_block

#method_before
public void onSaveHosts() {
    final MultipleHostsModel hostsModel = (MultipleHostsModel) getWindow();
    if (hostsModel == null) {
        return;
    }
    if (!hostsModel.validate()) {
        return;
    }
    hostsModel.StartProgress(null);
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>();
    for (Object object : hostsModel.getHosts().getItems()) {
        HostDetailModel hostDetailModel = (HostDetailModel) ((EntityModel) object).getEntity();
        VDS host = new VDS();
        host.setvds_name(hostDetailModel.getName());
        host.sethost_name(hostDetailModel.getAddress());
        host.setSSHKeyFingerprint(hostDetailModel.getFingerprint());
        host.setport(54321);
        host.setvds_group_id(getEntity().getId());
        host.setpm_enabled(false);
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setRootPassword(hostDetailModel.getPassword());
        parameters.setOverrideFirewall(false);
        parametersList.add(parameters);
    }
    Frontend.RunMultipleAction(VdcActionType.AddVds, parametersList, true, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            hostsModel.StopProgress();
            boolean isAllCanDoPassed = true;
            for (VdcReturnValueBase returnValueBase : result.getReturnValue()) {
                isAllCanDoPassed = isAllCanDoPassed && returnValueBase.getCanDoAction();
                if (!isAllCanDoPassed) {
                    break;
                }
            }
            if (isAllCanDoPassed) {
                updateAlerts();
                Cancel();
            }
        }
    }, null);
}
#method_after
public void onSaveHosts() {
    final MultipleHostsModel hostsModel = (MultipleHostsModel) getWindow();
    if (hostsModel == null) {
        return;
    }
    if (!hostsModel.validate()) {
        return;
    }
    hostsModel.StartProgress(null);
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<VdcActionParametersBase>();
    for (Object object : hostsModel.getHosts().getItems()) {
        HostDetailModel hostDetailModel = (HostDetailModel) ((EntityModel) object).getEntity();
        VDS host = new VDS();
        host.setVdsName(hostDetailModel.getName());
        host.setHostName(hostDetailModel.getAddress());
        host.setSSHKeyFingerprint(hostDetailModel.getFingerprint());
        host.setPort(54321);
        host.setVdsGroupId(getEntity().getId());
        host.setpm_enabled(false);
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setRootPassword(hostDetailModel.getPassword());
        parameters.setOverrideFirewall(false);
        parametersList.add(parameters);
    }
    Frontend.RunMultipleAction(VdcActionType.AddVds, parametersList, true, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            hostsModel.StopProgress();
            boolean isAllCanDoPassed = true;
            for (VdcReturnValueBase returnValueBase : result.getReturnValue()) {
                isAllCanDoPassed = isAllCanDoPassed && returnValueBase.getCanDoAction();
                if (!isAllCanDoPassed) {
                    break;
                }
            }
            if (isAllCanDoPassed) {
                updateAlerts();
                Cancel();
            }
        }
    }, null);
}
#end_block

#method_before
public int getMemoryOverCommit() {
    return memoryOverCommit;
}
#method_after
public Integer getMemoryOverCommit() {
    return memoryOverCommit;
}
#end_block

#method_before
private void localize(ApplicationConstants constants) {
    minServiceLevelLabel.setText(constants.clusterPolicyMinServiceLevelLabel());
    maxServiceLevelLabel.setText(constants.clusterPolicyMaxServiceLevelLabel());
    editPolicyButton.setLabel(constants.clusterPolicyEditPolicyButtonLabel());
    policyLabel.setText(constants.clusterPolicyPolicyLabel());
    volumeHeaderLabel.setText(constants.clusterVolumesLabel());
}
#method_after
private void localize(ApplicationConstants constants) {
    minServiceLevelLabel.setText(constants.clusterPolicyMinServiceLevelLabel());
    maxServiceLevelLabel.setText(constants.clusterPolicyMaxServiceLevelLabel());
    editPolicyButton.setLabel(constants.clusterPolicyEditPolicyButtonLabel());
    policyLabel.setText(constants.clusterPolicyPolicyLabel());
}
#end_block

#method_before
@Override
public void setMainTabSelectedItem(VDSGroup selectedItem) {
    Driver.driver.edit(getDetailModel());
    formBuilder.showForm(getDetailModel());
    if (selectedItem.supportsVirtService()) {
        if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) {
            setVisibility(true);
            leftSlider.setValue(selectedItem.getlow_utilization());
            rightSlider.setValue(selectedItem.gethigh_utilization());
            policyTimeLabel.setText(// $NON-NLS-1$
            constants.clusterPolicyForTimeLabel() + " " + selectedItem.getcpu_over_commit_duration_minutes() + " " + // $NON-NLS-1$
            constants.clusterPolicyMinTimeLabel());
            policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel());
        } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) {
            setVisibility(true);
            leftSlider.setVisible(false);
            leftDummySlider.setVisible(true);
            rightSlider.setValue(selectedItem.gethigh_utilization());
            policyTimeLabel.setText(// $NON-NLS-1$
            constants.clusterPolicyForTimeLabel() + " " + selectedItem.getcpu_over_commit_duration_minutes() + " " + // $NON-NLS-1$
            constants.clusterPolicyMinTimeLabel());
            policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel());
        } else {
            // also for VdsSelectionAlgorithm.None
            setVisibility(false);
            policyFieldLabel.setText(constants.clusterPolicyNoneLabel());
        }
    }
    policyPanel.setVisible(selectedItem.supportsVirtService());
    volumeSummaryPanel.setVisible(selectedItem.supportsGlusterService());
    form.update();
}
#method_after
@Override
public void setMainTabSelectedItem(VDSGroup selectedItem) {
    Driver.driver.edit(getDetailModel());
    if (selectedItem.supportsVirtService()) {
        if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) {
            setVisibility(true);
            leftSlider.setValue(selectedItem.getlow_utilization());
            rightSlider.setValue(selectedItem.gethigh_utilization());
            policyTimeLabel.setText(// $NON-NLS-1$
            constants.clusterPolicyForTimeLabel() + " " + selectedItem.getcpu_over_commit_duration_minutes() + " " + // $NON-NLS-1$
            constants.clusterPolicyMinTimeLabel());
            policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel());
        } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) {
            setVisibility(true);
            leftSlider.setVisible(false);
            leftDummySlider.setVisible(true);
            rightSlider.setValue(selectedItem.gethigh_utilization());
            policyTimeLabel.setText(// $NON-NLS-1$
            constants.clusterPolicyForTimeLabel() + " " + selectedItem.getcpu_over_commit_duration_minutes() + " " + // $NON-NLS-1$
            constants.clusterPolicyMinTimeLabel());
            policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel());
        } else {
            // also for VdsSelectionAlgorithm.None
            setVisibility(false);
            policyFieldLabel.setText(constants.clusterPolicyNoneLabel());
        }
    }
    policyPanel.setVisible(selectedItem.supportsVirtService());
    form.update();
}
#end_block

#method_before
private void UpdateOptionsNonLocalFSData() {
    AsyncQuery query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<VDSGroup> clusters = null;
            if (returnValue == null || returnValue instanceof VdcQueryReturnValue && (!((VdcQueryReturnValue) returnValue).getSucceeded() || ((VdcQueryReturnValue) returnValue).getReturnValue() != null)) {
                clusters = new ArrayList<VDSGroup>();
            } else {
                clusters = (ArrayList<VDSGroup>) returnValue;
            }
            dataCenterGuideModel.clusters = clusters;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    });
    query.setHandleFailure(true);
    AsyncDataProvider.GetClusterList(query, getEntity().getId());
    query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> storageDomains = null;
            if (returnValue == null || returnValue instanceof VdcQueryReturnValue && (!((VdcQueryReturnValue) returnValue).getSucceeded() || ((VdcQueryReturnValue) returnValue).getReturnValue() != null)) {
                storageDomains = new ArrayList<storage_domains>();
            } else {
                storageDomains = (ArrayList<storage_domains>) returnValue;
            }
            dataCenterGuideModel.allStorageDomains = storageDomains;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    });
    query.setHandleFailure(true);
    AsyncDataProvider.GetStorageDomainList(query);
    query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> attachedStorageDomains = null;
            if (returnValue == null || returnValue instanceof VdcQueryReturnValue && (!((VdcQueryReturnValue) returnValue).getSucceeded() || ((VdcQueryReturnValue) returnValue).getReturnValue() != null)) {
                attachedStorageDomains = new ArrayList<storage_domains>();
            } else {
                attachedStorageDomains = (ArrayList<storage_domains>) returnValue;
            }
            dataCenterGuideModel.attachedStorageDomains = attachedStorageDomains;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    });
    query.setHandleFailure(true);
    AsyncDataProvider.GetStorageDomainList(query, getEntity().getId());
    query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> isoStorageDomains = null;
            if (returnValue == null || returnValue instanceof VdcQueryReturnValue && (!((VdcQueryReturnValue) returnValue).getSucceeded() || ((VdcQueryReturnValue) returnValue).getReturnValue() != null)) {
                isoStorageDomains = new ArrayList<storage_domains>();
            } else {
                isoStorageDomains = (ArrayList<storage_domains>) returnValue;
            }
            dataCenterGuideModel.isoStorageDomains = isoStorageDomains;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    });
    query.setHandleFailure(true);
    AsyncDataProvider.GetISOStorageDomainList(query);
    query = new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<VDS> allHosts = null;
            if (returnValue == null || returnValue instanceof VdcQueryReturnValue && (!((VdcQueryReturnValue) returnValue).getSucceeded() || ((VdcQueryReturnValue) returnValue).getReturnValue() != null)) {
                allHosts = new ArrayList<VDS>();
            } else {
                allHosts = (ArrayList<VDS>) returnValue;
            }
            dataCenterGuideModel.allHosts = allHosts;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    });
    query.setHandleFailure(true);
    AsyncDataProvider.GetHostList(query);
}
#method_after
private void UpdateOptionsNonLocalFSData() {
    AsyncDataProvider.GetClusterList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
            dataCenterGuideModel.clusters = clusters;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    }), getEntity().getId());
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            dataCenterGuideModel.allStorageDomains = storageDomains;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    }));
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            dataCenterGuideModel.attachedStorageDomains = storageDomains;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    }), getEntity().getId());
    AsyncDataProvider.GetISOStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            dataCenterGuideModel.isoStorageDomains = storageDomains;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    }));
    AsyncDataProvider.GetHostList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<VDS> hosts = (ArrayList<VDS>) returnValue;
            dataCenterGuideModel.allHosts = hosts;
            dataCenterGuideModel.UpdateOptionsNonLocalFS();
        }
    }));
}
#end_block

#method_before
private void UpdateOptionsNonLocalFS() {
    if (clusters == null || allStorageDomains == null || attachedStorageDomains == null || isoStorageDomains == null || allHosts == null) {
        return;
    }
    // Add cluster action.
    // $NON-NLS-1$
    UICommand addClusterAction = new UICommand("AddCluster", this);
    if (clusters.isEmpty()) {
        addClusterAction.setTitle(DataCenterConfigureClustersAction);
        getCompulsoryActions().add(addClusterAction);
    } else {
        addClusterAction.setTitle(DataCenterAddAnotherClusterAction);
        getOptionalActions().add(addClusterAction);
    }
    ArrayList<VDS> hosts = new ArrayList<VDS>();
    ArrayList<VDS> availableHosts = new ArrayList<VDS>();
    ArrayList<VDS> upHosts = new ArrayList<VDS>();
    for (VDS vds : allHosts) {
        if (Linq.IsClusterItemExistInList(clusters, vds.getvds_group_id())) {
            hosts.add(vds);
        }
        if ((vds.getstatus() == VDSStatus.Maintenance || vds.getstatus() == VDSStatus.PendingApproval) && doesHostSupportAnyCluster(clusters, vds)) {
            availableHosts.add(vds);
        }
        if (vds.getstatus() == VDSStatus.Up && Linq.IsClusterItemExistInList(clusters, vds.getvds_group_id())) {
            upHosts.add(vds);
        }
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("AddHost", this);
    tempVar.setIsExecutionAllowed(clusters.size() > 0);
    UICommand addHostAction = tempVar;
    addHostAction.setTitle(DataCenterConfigureHostsAction);
    getCompulsoryActions().add(addHostAction);
    // Select host action.
    // $NON-NLS-1$
    UICommand selectHostAction = new UICommand("SelectHost", this);
    // If now compatible hosts are found - disable the select host button
    selectHostAction.setIsChangable(availableHosts.size() > 0);
    selectHostAction.setIsExecutionAllowed(availableHosts.size() > 0);
    if (clusters.size() > 0) {
        if (hosts.isEmpty()) {
            selectHostAction.setTitle(DataCenterSelectHostsAction);
            getCompulsoryActions().add(selectHostAction);
        } else {
            selectHostAction.setTitle(DataCenterSelectHostsAction);
            getOptionalActions().add(selectHostAction);
        }
    }
    ArrayList<storage_domains> unattachedStorage = new ArrayList<storage_domains>();
    boolean addToList;
    Version version3_0 = new Version(3, 0);
    for (storage_domains item : allStorageDomains) {
        addToList = false;
        if (item.getstorage_domain_type() == StorageDomainType.Data && item.getstorage_type() == getEntity().getstorage_pool_type() && item.getstorage_domain_shared_status() == StorageDomainSharedStatus.Unattached) {
            if (getEntity().getStoragePoolFormatType() == null) {
                // compat logic: in case its not v1 and the version is less than 3.0 break.
                if (item.getStorageStaticData().getStorageFormat() != StorageFormatType.V1 && getEntity().getcompatibility_version().compareTo(version3_0) < 0) {
                    continue;
                }
                addToList = true;
            } else if (getEntity().getStoragePoolFormatType() == item.getStorageStaticData().getStorageFormat()) {
                addToList = true;
            }
        }
        if (addToList) {
            unattachedStorage.add(item);
        }
    }
    ArrayList<storage_domains> attachedDataStorages = new ArrayList<storage_domains>();
    for (storage_domains a : attachedStorageDomains) {
        if (a.getstorage_domain_type() == StorageDomainType.Data || a.getstorage_domain_type() == StorageDomainType.Master) {
            attachedDataStorages.add(a);
        }
    }
    // $NON-NLS-1$
    UICommand addDataStorageAction = new UICommand("AddDataStorage", this);
    addDataStorageAction.getExecuteProhibitionReasons().add(NoUpHostReason);
    addDataStorageAction.setIsExecutionAllowed(upHosts.size() > 0);
    if (unattachedStorage.isEmpty() && attachedDataStorages.isEmpty()) {
        addDataStorageAction.setTitle(DataCenterConfigureStorageAction);
        getCompulsoryActions().add(addDataStorageAction);
    } else {
        addDataStorageAction.setTitle(DataCenterAddMoreStorageAction);
        getOptionalActions().add(addDataStorageAction);
    }
    // Attach data storage action.
    // $NON-NLS-1$
    UICommand attachDataStorageAction = new UICommand("AttachDataStorage", this);
    if (upHosts.isEmpty()) {
        attachDataStorageAction.getExecuteProhibitionReasons().add(NoUpHostReason);
    }
    attachDataStorageAction.setIsExecutionAllowed(unattachedStorage.size() > 0 && upHosts.size() > 0);
    if (attachedDataStorages.isEmpty()) {
        attachDataStorageAction.setTitle(DataCenterAttachStorageAction);
        getCompulsoryActions().add(attachDataStorageAction);
    } else {
        attachDataStorageAction.setTitle(DataCenterAttachMoreStorageAction);
        getOptionalActions().add(attachDataStorageAction);
    }
    // $NON-NLS-1$
    UICommand addIsoStorageAction = new UICommand("AddIsoStorage", this);
    addIsoStorageAction.getExecuteProhibitionReasons().add(NoDataDomainAttachedReason);
    addIsoStorageAction.setIsExecutionAllowed(getEntity().getstatus() == StoragePoolStatus.Up);
    if (isoStorageDomains.isEmpty()) {
        addIsoStorageAction.setTitle(DataCenterConfigureISOLibraryAction);
        getOptionalActions().add(addIsoStorageAction);
    }
    // Attach ISO storage action.
    // Allow to attach ISO domain only when there are Data storages attached
    // and there ISO storages to attach and ther are no ISO storages actually
    // attached.
    ArrayList<storage_domains> attachedIsoStorages = new ArrayList<storage_domains>();
    for (storage_domains sd : attachedStorageDomains) {
        if (sd.getstorage_domain_type() == StorageDomainType.ISO) {
            attachedIsoStorages.add(sd);
        }
    }
    boolean attachIsoAllowed = (attachedDataStorages.size() > 0 && Linq.IsAnyStorageDomainIsMatserAndActive(attachedDataStorages) && isoStorageDomains.size() > 0 && attachedIsoStorages.isEmpty() && upHosts.size() > 0);
    // The action is available if there are no storages attached to the
    // Data Center. It will not always be allowed.
    boolean attachIsoAvailable = attachedIsoStorages.isEmpty();
    // $NON-NLS-1$
    UICommand attachIsoStorageAction = new UICommand("AttachIsoStorage", this);
    attachIsoStorageAction.setIsAvailable(attachIsoAvailable);
    if (upHosts.isEmpty()) {
        attachIsoStorageAction.getExecuteProhibitionReasons().add(NoUpHostReason);
    }
    attachIsoStorageAction.setIsExecutionAllowed(attachIsoAllowed);
    if (attachIsoAvailable) {
        attachIsoStorageAction.setTitle(DataCenterAttachISOLibraryAction);
        getOptionalActions().add(attachIsoStorageAction);
    }
    StopProgress();
}
#method_after
private void UpdateOptionsNonLocalFS() {
    if (clusters == null || allStorageDomains == null || attachedStorageDomains == null || isoStorageDomains == null || allHosts == null) {
        return;
    }
    // Add cluster action.
    // $NON-NLS-1$
    UICommand addClusterAction = new UICommand("AddCluster", this);
    if (clusters.isEmpty()) {
        addClusterAction.setTitle(DataCenterConfigureClustersAction);
        getCompulsoryActions().add(addClusterAction);
    } else {
        addClusterAction.setTitle(DataCenterAddAnotherClusterAction);
        getOptionalActions().add(addClusterAction);
    }
    ArrayList<VDS> hosts = new ArrayList<VDS>();
    ArrayList<VDS> availableHosts = new ArrayList<VDS>();
    ArrayList<VDS> upHosts = new ArrayList<VDS>();
    for (VDS vds : allHosts) {
        if (Linq.IsClusterItemExistInList(clusters, vds.getVdsGroupId())) {
            hosts.add(vds);
        }
        if ((vds.getStatus() == VDSStatus.Maintenance || vds.getStatus() == VDSStatus.PendingApproval) && doesHostSupportAnyCluster(clusters, vds)) {
            availableHosts.add(vds);
        }
        if (vds.getStatus() == VDSStatus.Up && Linq.IsClusterItemExistInList(clusters, vds.getVdsGroupId())) {
            upHosts.add(vds);
        }
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("AddHost", this);
    tempVar.setIsExecutionAllowed(clusters.size() > 0);
    UICommand addHostAction = tempVar;
    addHostAction.setTitle(DataCenterConfigureHostsAction);
    getCompulsoryActions().add(addHostAction);
    // Select host action.
    // $NON-NLS-1$
    UICommand selectHostAction = new UICommand("SelectHost", this);
    // If now compatible hosts are found - disable the select host button
    selectHostAction.setIsChangable(availableHosts.size() > 0);
    selectHostAction.setIsExecutionAllowed(availableHosts.size() > 0);
    if (clusters.size() > 0) {
        if (hosts.isEmpty()) {
            selectHostAction.setTitle(DataCenterSelectHostsAction);
            getCompulsoryActions().add(selectHostAction);
        } else {
            selectHostAction.setTitle(DataCenterSelectHostsAction);
            getOptionalActions().add(selectHostAction);
        }
    }
    ArrayList<StorageDomain> unattachedStorage = new ArrayList<StorageDomain>();
    boolean addToList;
    Version version3_0 = new Version(3, 0);
    for (StorageDomain item : allStorageDomains) {
        addToList = false;
        if (item.getStorageDomainType() == StorageDomainType.Data && item.getStorageType() == getEntity().getstorage_pool_type() && item.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Unattached) {
            if (getEntity().getStoragePoolFormatType() == null) {
                // compat logic: in case its not v1 and the version is less than 3.0 break.
                if (item.getStorageStaticData().getStorageFormat() != StorageFormatType.V1 && getEntity().getcompatibility_version().compareTo(version3_0) < 0) {
                    continue;
                }
                addToList = true;
            } else if (getEntity().getStoragePoolFormatType() == item.getStorageStaticData().getStorageFormat()) {
                addToList = true;
            }
        }
        if (addToList) {
            unattachedStorage.add(item);
        }
    }
    ArrayList<StorageDomain> attachedDataStorages = new ArrayList<StorageDomain>();
    for (StorageDomain a : attachedStorageDomains) {
        if (a.getStorageDomainType() == StorageDomainType.Data || a.getStorageDomainType() == StorageDomainType.Master) {
            attachedDataStorages.add(a);
        }
    }
    // $NON-NLS-1$
    UICommand addDataStorageAction = new UICommand("AddDataStorage", this);
    addDataStorageAction.getExecuteProhibitionReasons().add(NoUpHostReason);
    addDataStorageAction.setIsExecutionAllowed(upHosts.size() > 0);
    if (unattachedStorage.isEmpty() && attachedDataStorages.isEmpty()) {
        addDataStorageAction.setTitle(DataCenterConfigureStorageAction);
        getCompulsoryActions().add(addDataStorageAction);
    } else {
        addDataStorageAction.setTitle(DataCenterAddMoreStorageAction);
        getOptionalActions().add(addDataStorageAction);
    }
    // Attach data storage action.
    // $NON-NLS-1$
    UICommand attachDataStorageAction = new UICommand("AttachDataStorage", this);
    if (upHosts.isEmpty()) {
        attachDataStorageAction.getExecuteProhibitionReasons().add(NoUpHostReason);
    }
    attachDataStorageAction.setIsExecutionAllowed(unattachedStorage.size() > 0 && upHosts.size() > 0);
    if (attachedDataStorages.isEmpty()) {
        attachDataStorageAction.setTitle(DataCenterAttachStorageAction);
        getCompulsoryActions().add(attachDataStorageAction);
    } else {
        attachDataStorageAction.setTitle(DataCenterAttachMoreStorageAction);
        getOptionalActions().add(attachDataStorageAction);
    }
    // $NON-NLS-1$
    UICommand addIsoStorageAction = new UICommand("AddIsoStorage", this);
    addIsoStorageAction.getExecuteProhibitionReasons().add(NoDataDomainAttachedReason);
    addIsoStorageAction.setIsExecutionAllowed(getEntity().getstatus() == StoragePoolStatus.Up);
    if (isoStorageDomains.isEmpty()) {
        addIsoStorageAction.setTitle(DataCenterConfigureISOLibraryAction);
        getOptionalActions().add(addIsoStorageAction);
    }
    // Attach ISO storage action.
    // Allow to attach ISO domain only when there are Data storages attached
    // and there ISO storages to attach and ther are no ISO storages actually
    // attached.
    ArrayList<StorageDomain> attachedIsoStorages = new ArrayList<StorageDomain>();
    for (StorageDomain sd : attachedStorageDomains) {
        if (sd.getStorageDomainType() == StorageDomainType.ISO) {
            attachedIsoStorages.add(sd);
        }
    }
    boolean attachIsoAllowed = (attachedDataStorages.size() > 0 && Linq.IsAnyStorageDomainIsMatserAndActive(attachedDataStorages) && isoStorageDomains.size() > 0 && attachedIsoStorages.isEmpty() && upHosts.size() > 0);
    // The action is available if there are no storages attached to the
    // Data Center. It will not always be allowed.
    boolean attachIsoAvailable = attachedIsoStorages.isEmpty();
    // $NON-NLS-1$
    UICommand attachIsoStorageAction = new UICommand("AttachIsoStorage", this);
    attachIsoStorageAction.setIsAvailable(attachIsoAvailable);
    if (upHosts.isEmpty()) {
        attachIsoStorageAction.getExecuteProhibitionReasons().add(NoUpHostReason);
    }
    attachIsoStorageAction.setIsExecutionAllowed(attachIsoAllowed);
    if (attachIsoAvailable) {
        attachIsoStorageAction.setTitle(DataCenterAttachISOLibraryAction);
        getOptionalActions().add(attachIsoStorageAction);
    }
    StopProgress();
}
#end_block

#method_before
private void UpdateOptionsLocalFS() {
    if (clusters == null || allHosts == null) {
        return;
    }
    // $NON-NLS-1$
    UICommand addClusterAction = new UICommand("AddCluster", this);
    if (clusters.isEmpty()) {
        addClusterAction.setTitle(DataCenterConfigureClustersAction);
        getCompulsoryActions().add(addClusterAction);
    } else {
        // $NON-NLS-1$
        UICommand tempVar6 = new UICommand("AddHost", this);
        tempVar6.setTitle(DataCenterConfigureHostsAction);
        UICommand addHostAction = tempVar6;
        // $NON-NLS-1$
        UICommand tempVar7 = new UICommand("SelectHost", this);
        tempVar7.setTitle(DataCenterSelectHostsAction);
        UICommand selectHost = tempVar7;
        boolean hasMaintenance3_0Host = false;
        Version version3_0 = new Version(3, 0);
        for (VDS vds : allHosts) {
            // $NON-NLS-1$
            String[] hostVersions = vds.getsupported_cluster_levels().split("[,]", -1);
            for (String hostVersion : hostVersions) {
                if (version3_0.compareTo(new Version(hostVersion)) <= 0) {
                    hasMaintenance3_0Host = true;
                    break;
                }
            }
            if (hasMaintenance3_0Host) {
                break;
            }
        }
        if (localStorageHost != null) {
            String hasHostReason = ConstantsManager.getInstance().getConstants().localDataCenterAlreadyContainsAHostDcGuide();
            addHostAction.getExecuteProhibitionReasons().add(hasHostReason);
            addHostAction.setIsExecutionAllowed(false);
            selectHost.getExecuteProhibitionReasons().add(hasHostReason);
            selectHost.setIsExecutionAllowed(false);
            if (localStorageHost.getstatus() == VDSStatus.Up) {
                // $NON-NLS-1$
                UICommand tempVar8 = new UICommand("AddLocalStorage", this);
                tempVar8.setTitle(ConstantsManager.getInstance().getConstants().addLocalStorageTitle());
                UICommand addLocalStorageAction = tempVar8;
                getOptionalActions().add(addLocalStorageAction);
            }
        } else if (getEntity().getstatus() != StoragePoolStatus.Uninitialized) {
            String dataCenterInitializeReason = ConstantsManager.getInstance().getConstants().dataCenterWasAlreadyInitializedDcGuide();
            addHostAction.getExecuteProhibitionReasons().add(dataCenterInitializeReason);
            addHostAction.setIsExecutionAllowed(false);
            selectHost.getExecuteProhibitionReasons().add(dataCenterInitializeReason);
            selectHost.setIsExecutionAllowed(false);
        }
        if (hasMaintenance3_0Host) {
            getOptionalActions().add(selectHost);
        }
        getCompulsoryActions().add(addHostAction);
    }
    StopProgress();
}
#method_after
private void UpdateOptionsLocalFS() {
    if (clusters == null || allHosts == null || localStorageHost == null) {
        return;
    }
    // $NON-NLS-1$
    UICommand addClusterAction = new UICommand("AddCluster", this);
    if (clusters.isEmpty()) {
        addClusterAction.setTitle(DataCenterConfigureClustersAction);
        getCompulsoryActions().add(addClusterAction);
    } else {
        // $NON-NLS-1$
        UICommand tempVar6 = new UICommand("AddHost", this);
        tempVar6.setTitle(DataCenterConfigureHostsAction);
        UICommand addHostAction = tempVar6;
        // $NON-NLS-1$
        UICommand tempVar7 = new UICommand("SelectHost", this);
        tempVar7.setTitle(DataCenterSelectHostsAction);
        UICommand selectHost = tempVar7;
        boolean hasMaintenance3_0Host = false;
        Version version3_0 = new Version(3, 0);
        for (VDS vds : allHosts) {
            // $NON-NLS-1$
            String[] hostVersions = vds.getSupportedClusterLevels().split("[,]", -1);
            for (String hostVersion : hostVersions) {
                if (version3_0.compareTo(new Version(hostVersion)) <= 0) {
                    hasMaintenance3_0Host = true;
                    break;
                }
            }
            if (hasMaintenance3_0Host) {
                break;
            }
        }
        if (localStorageHost != null) {
            String hasHostReason = ConstantsManager.getInstance().getConstants().localDataCenterAlreadyContainsAHostDcGuide();
            addHostAction.getExecuteProhibitionReasons().add(hasHostReason);
            addHostAction.setIsExecutionAllowed(false);
            selectHost.getExecuteProhibitionReasons().add(hasHostReason);
            selectHost.setIsExecutionAllowed(false);
            if (localStorageHost.getStatus() == VDSStatus.Up) {
                // $NON-NLS-1$
                UICommand tempVar8 = new UICommand("AddLocalStorage", this);
                tempVar8.setTitle(ConstantsManager.getInstance().getConstants().addLocalStorageTitle());
                UICommand addLocalStorageAction = tempVar8;
                getOptionalActions().add(addLocalStorageAction);
            }
        } else if (getEntity().getstatus() != StoragePoolStatus.Uninitialized) {
            String dataCenterInitializeReason = ConstantsManager.getInstance().getConstants().dataCenterWasAlreadyInitializedDcGuide();
            addHostAction.getExecuteProhibitionReasons().add(dataCenterInitializeReason);
            addHostAction.setIsExecutionAllowed(false);
            selectHost.getExecuteProhibitionReasons().add(dataCenterInitializeReason);
            selectHost.setIsExecutionAllowed(false);
        }
        if (hasMaintenance3_0Host) {
            getOptionalActions().add(selectHost);
        }
        getCompulsoryActions().add(addHostAction);
    }
    StopProgress();
}
#end_block

#method_before
private void SaveLocalStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = (String) localModel.getPath().getEntity();
    storageDomain = new StorageDomainStatic();
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getstorage_name();
                OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel, ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName));
            } else {
                dataCenterGuideModel.SaveNewLocalStorage();
            }
        }
    }), host.getStoragePoolId(), path);
}
#method_after
private void SaveLocalStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    VDS host = (VDS) model.getHost().getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    LocalStorageModel localModel = (LocalStorageModel) storageModel;
    path = (String) localModel.getPath().getEntity();
    storageDomain = new StorageDomainStatic();
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getStorageName();
                OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel, ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName));
            } else {
                dataCenterGuideModel.SaveNewLocalStorage();
            }
        }
    }), host.getStoragePoolId(), path);
}
#end_block

#method_before
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            dataCenterGuideModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            dataCenterGuideModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            dataCenterGuideModel.removeConnection = false;
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            if (dataCenterGuideModel.removeConnection) {
                dataCenterGuideModel.CleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
                dataCenterGuideModel.removeConnection = false;
            }
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void SaveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            dataCenterGuideModel.removeConnection = true;
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            dataCenterGuideModel.removeConnection = false;
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            if (dataCenterGuideModel.removeConnection) {
                dataCenterGuideModel.CleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
                dataCenterGuideModel.removeConnection = false;
            }
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void CleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.RunAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
        }
    }, this);
}
#method_after
private void CleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.RunAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId), null, this);
}
#end_block

#method_before
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = new StorageDomainStatic();
    storageDomain.setstorage_type(isNew ? storageModel.getType() : storageDomain.getstorage_type());
    storageDomain.setstorage_domain_type(isNew ? storageModel.getRole() : storageDomain.getstorage_domain_type());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getstorage_name();
                OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel, ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName));
            } else {
                dataCenterGuideModel.SaveNewNfsStorage();
            }
        }
    }), null, path);
}
#method_after
private void SaveNfsStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    boolean isNew = model.getStorage() == null;
    storageModel = model.getSelectedItem();
    NfsStorageModel nfsModel = (NfsStorageModel) storageModel;
    path = (String) nfsModel.getPath().getEntity();
    storageDomain = new StorageDomainStatic();
    storageDomain.setStorageType(isNew ? storageModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? storageModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageName((String) model.getName().getEntity());
    storageDomain.setStorageFormat((StorageFormatType) model.getFormat().getSelectedItem());
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getStorageName();
                OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel, ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName));
            } else {
                dataCenterGuideModel.SaveNewNfsStorage();
            }
        }
    }), null, path);
}
#end_block

#method_before
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.RemoveStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            dataCenterGuideModel.storageDomain.setstorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            dataCenterGuideModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
            // Attach storage to data center as neccessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                dataCenterGuideModel.AttachStorageToDataCenter((Guid) dataCenterGuideModel.storageId, dataCenter.getId());
            }
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            dataCenterGuideModel.CleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#method_after
public void SaveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setconnection(path);
    tempVar.setstorage_type(nfsModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<VdcActionType>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId()));
    IFrontendActionAsyncCallback callback1 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        }
    };
    IFrontendActionAsyncCallback callback2 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
            dataCenterGuideModel.storageId = (NGuid) vdcReturnValueBase.getActionReturnValue();
        }
    };
    IFrontendActionAsyncCallback callback3 = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
            // Attach storage to data center as neccessary.
            storage_pool dataCenter = (storage_pool) storageModel.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                dataCenterGuideModel.AttachStorageToDataCenter((Guid) dataCenterGuideModel.storageId, dataCenter.getId());
            }
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
        }
    };
    IFrontendActionAsyncCallback failureCallback = new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            dataCenterGuideModel.CleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
            dataCenterGuideModel.OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
        }
    };
    Frontend.RunMultipleActions(actionTypes, parameters, new ArrayList<IFrontendActionAsyncCallback>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#end_block

#method_before
private void SaveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    storageDomain = new StorageDomainStatic();
    storageDomain.setstorage_type(sanModel.getType());
    storageDomain.setstorage_domain_type(sanModel.getRole());
    storageDomain.setStorageFormat((StorageFormatType) sanModel.getContainer().getFormat().getSelectedItem());
    storageDomain.setstorage_name((String) model.getName().getEntity());
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> storages = (ArrayList<storage_domains>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getstorage_name();
                OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel, ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName));
            } else {
                dataCenterGuideModel.SaveNewSanStorage();
            }
            dataCenterGuideModel.getWindow().StopProgress();
        }
    }), null, path);
}
#method_after
private void SaveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModel sanModel = (SanStorageModel) model.getSelectedItem();
    VDS host = (VDS) model.getHost().getSelectedItem();
    storageDomain = new StorageDomainStatic();
    storageDomain.setStorageType(sanModel.getType());
    storageDomain.setStorageDomainType(sanModel.getRole());
    storageDomain.setStorageFormat((StorageFormatType) sanModel.getContainer().getFormat().getSelectedItem());
    storageDomain.setStorageName((String) model.getName().getEntity());
    AsyncDataProvider.GetStorageDomainsByConnection(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storages = (ArrayList<StorageDomain>) returnValue;
            if (storages != null && storages.size() > 0) {
                String storageName = storages.get(0).getStorageName();
                OnFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel, ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName));
            } else {
                dataCenterGuideModel.SaveNewSanStorage();
            }
            dataCenterGuideModel.getWindow().StopProgress();
        }
    }), null, path);
}
#end_block

#method_before
private void AttachStorageInternal(List<storage_domains> storages, String title) {
    ListModel model = new ListModel();
    model.setTitle(title);
    setWindow(model);
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    for (storage_domains sd : storages) {
        EntityModel tempVar = new EntityModel();
        tempVar.setEntity(sd);
        items.add(tempVar);
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("OnAttachStorage", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar2.setIsDefault(true);
    model.getCommands().add(tempVar2);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    model.getCommands().add(tempVar3);
}
#method_after
private void AttachStorageInternal(List<StorageDomain> storages, String title) {
    ListModel model = new ListModel();
    model.setTitle(title);
    setWindow(model);
    ArrayList<EntityModel> items = new ArrayList<EntityModel>();
    for (StorageDomain sd : storages) {
        EntityModel tempVar = new EntityModel();
        tempVar.setEntity(sd);
        items.add(tempVar);
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("OnAttachStorage", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar2.setIsDefault(true);
    model.getCommands().add(tempVar2);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    model.getCommands().add(tempVar3);
}
#end_block

#method_before
private void AttachStorageToDataCenter(Guid storageId, Guid dataCenterId) {
    Frontend.RunAction(VdcActionType.AttachStorageDomainToPool, new StorageDomainPoolParametersBase(storageId, dataCenterId), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
        }
    }, this);
}
#method_after
private void AttachStorageToDataCenter(Guid storageId, Guid dataCenterId) {
    Frontend.RunAction(VdcActionType.AttachStorageDomainToPool, new StorageDomainPoolParametersBase(storageId, dataCenterId), null, this);
}
#end_block

#method_before
public void OnAttachStorage() {
    ListModel model = (ListModel) getWindow();
    ArrayList<storage_domains> items = new ArrayList<storage_domains>();
    for (EntityModel a : Linq.<EntityModel>Cast(model.getItems())) {
        if (a.getIsSelected()) {
            items.add((storage_domains) a.getEntity());
        }
    }
    if (items.size() > 0) {
        for (storage_domains sd : items) {
            AttachStorageToDataCenter(sd.getId(), getEntity().getId());
        }
    }
    Cancel();
    PostAction();
}
#method_after
public void OnAttachStorage() {
    ListModel model = (ListModel) getWindow();
    ArrayList<StorageDomain> items = new ArrayList<StorageDomain>();
    for (EntityModel a : Linq.<EntityModel>Cast(model.getItems())) {
        if (a.getIsSelected()) {
            items.add((StorageDomain) a.getEntity());
        }
    }
    if (items.size() > 0) {
        for (StorageDomain sd : items) {
            AttachStorageToDataCenter(sd.getId(), getEntity().getId());
        }
    }
    Cancel();
    PostAction();
}
#end_block

#method_before
public void AttachIsoStorage() {
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> attachedStorage = new ArrayList<storage_domains>();
            AsyncDataProvider.GetISOStorageDomainList(new AsyncQuery(new Object[] { dataCenterGuideModel, attachedStorage }, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    Object[] array = (Object[]) target;
                    DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) array[0];
                    ArrayList<storage_domains> attachedStorage = (ArrayList<storage_domains>) array[1];
                    ArrayList<storage_domains> isoStorageDomains = (ArrayList<storage_domains>) returnValue;
                    ArrayList<storage_domains> sdl = new ArrayList<storage_domains>();
                    for (storage_domains a : isoStorageDomains) {
                        boolean isContains = false;
                        for (storage_domains b : attachedStorage) {
                            if (b.getId().equals(a.getId())) {
                                isContains = true;
                                break;
                            }
                        }
                        if (!isContains) {
                            sdl.add(a);
                        }
                    }
                    dataCenterGuideModel.AttachStorageInternal(sdl, ConstantsManager.getInstance().getConstants().attachISOLibraryTitle());
                }
            }));
        }
    }), getEntity().getId());
}
#method_after
public void AttachIsoStorage() {
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> attachedStorage = new ArrayList<StorageDomain>();
            AsyncDataProvider.GetISOStorageDomainList(new AsyncQuery(new Object[] { dataCenterGuideModel, attachedStorage }, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    Object[] array = (Object[]) target;
                    DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) array[0];
                    ArrayList<StorageDomain> attachedStorage = (ArrayList<StorageDomain>) array[1];
                    ArrayList<StorageDomain> isoStorageDomains = (ArrayList<StorageDomain>) returnValue;
                    ArrayList<StorageDomain> sdl = new ArrayList<StorageDomain>();
                    for (StorageDomain a : isoStorageDomains) {
                        boolean isContains = false;
                        for (StorageDomain b : attachedStorage) {
                            if (b.getId().equals(a.getId())) {
                                isContains = true;
                                break;
                            }
                        }
                        if (!isContains) {
                            sdl.add(a);
                        }
                    }
                    dataCenterGuideModel.AttachStorageInternal(sdl, ConstantsManager.getInstance().getConstants().attachISOLibraryTitle());
                }
            }));
        }
    }), getEntity().getId());
}
#end_block

#method_before
public void AttachDataStorage() {
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
            ArrayList<storage_domains> unattachedStorage = new ArrayList<storage_domains>();
            boolean addToList;
            Version version3_0 = new Version(3, 0);
            for (storage_domains item : storageDomains) {
                addToList = false;
                if (item.getstorage_domain_type() == StorageDomainType.Data && item.getstorage_type() == dataCenterGuideModel.getEntity().getstorage_pool_type() && item.getstorage_domain_shared_status() == StorageDomainSharedStatus.Unattached) {
                    if (getEntity().getStoragePoolFormatType() == null) {
                        // compat logic: in case its not v1 and the version is less than 3.0 continue.
                        if (item.getStorageStaticData().getStorageFormat() != StorageFormatType.V1 && dataCenterGuideModel.getEntity().getcompatibility_version().compareTo(version3_0) < 0) {
                            continue;
                        }
                        addToList = true;
                    } else if (getEntity().getStoragePoolFormatType() == item.getStorageStaticData().getStorageFormat()) {
                        addToList = true;
                    }
                }
                if (addToList) {
                    unattachedStorage.add(item);
                }
            }
            dataCenterGuideModel.AttachStorageInternal(unattachedStorage, ConstantsManager.getInstance().getConstants().attachStorageTitle());
        }
    }));
}
#method_after
public void AttachDataStorage() {
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> unattachedStorage = new ArrayList<StorageDomain>();
            boolean addToList;
            Version version3_0 = new Version(3, 0);
            for (StorageDomain item : storageDomains) {
                addToList = false;
                if (item.getStorageDomainType() == StorageDomainType.Data && item.getStorageType() == dataCenterGuideModel.getEntity().getstorage_pool_type() && item.getStorageDomainSharedStatus() == StorageDomainSharedStatus.Unattached) {
                    if (getEntity().getStoragePoolFormatType() == null) {
                        // compat logic: in case its not v1 and the version is less than 3.0 continue.
                        if (item.getStorageStaticData().getStorageFormat() != StorageFormatType.V1 && dataCenterGuideModel.getEntity().getcompatibility_version().compareTo(version3_0) < 0) {
                            continue;
                        }
                        addToList = true;
                    } else if (getEntity().getStoragePoolFormatType() == item.getStorageStaticData().getStorageFormat()) {
                        addToList = true;
                    }
                }
                if (addToList) {
                    unattachedStorage.add(item);
                }
            }
            dataCenterGuideModel.AttachStorageInternal(unattachedStorage, ConstantsManager.getInstance().getConstants().attachStorageTitle());
        }
    }));
}
#end_block

#method_before
public void PostOnAddCluster(VdcReturnValueBase returnValue) {
    ClusterModel model = (ClusterModel) getWindow();
    model.StopProgress();
    Cancel();
    if (returnValue != null && returnValue.getSucceeded()) {
        PostAction();
    }
}
#method_after
public void PostOnAddCluster(VdcReturnValueBase returnValue) {
    ClusterModel model = (ClusterModel) getWindow();
    model.StopProgress();
    if (returnValue != null && returnValue.getSucceeded()) {
        Cancel();
        PostAction();
    }
}
#end_block

#method_before
public void OnSelectHost() {
    MoveHost model = (MoveHost) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    model.setSelectedHosts(new ArrayList<VDS>());
    for (EntityModel a : Linq.<EntityModel>Cast(model.getItems())) {
        if (a.getIsSelected()) {
            model.getSelectedHosts().add((VDS) a.getEntity());
        }
    }
    VDSGroup cluster = (VDSGroup) model.getCluster().getSelectedItem();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (VDS host : model.getSelectedHosts()) {
        // Try to change host's cluster as neccessary.
        if (host.getvds_group_id() != null && !host.getvds_group_id().equals(cluster.getId())) {
            paramerterList.add(new ChangeVDSClusterParameters(cluster.getId(), host.getId()));
        }
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ChangeVDSCluster, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            ArrayList<VDS> hosts = ((MoveHost) dataCenterGuideModel.getWindow()).getSelectedHosts();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && hosts.size() == retVals.size()) {
                int i = 0;
                for (VDS selectedHost : hosts) {
                    if (selectedHost.getstatus() == VDSStatus.PendingApproval && retVals.get(i) != null && retVals.get(i).getSucceeded()) {
                        Frontend.RunAction(VdcActionType.ApproveVds, new ApproveVdsParameters(selectedHost.getId()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result) {
                            }
                        }, this);
                    }
                }
                i++;
            }
            dataCenterGuideModel.getWindow().StopProgress();
            dataCenterGuideModel.Cancel();
            dataCenterGuideModel.PostAction();
        }
    }, this);
}
#method_after
public void OnSelectHost() {
    MoveHost model = (MoveHost) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.Validate()) {
        return;
    }
    model.setSelectedHosts(new ArrayList<VDS>());
    for (EntityModel a : Linq.<EntityModel>Cast(model.getItems())) {
        if (a.getIsSelected()) {
            model.getSelectedHosts().add((VDS) a.getEntity());
        }
    }
    VDSGroup cluster = (VDSGroup) model.getCluster().getSelectedItem();
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    for (VDS host : model.getSelectedHosts()) {
        // Try to change host's cluster as neccessary.
        if (host.getVdsGroupId() != null && !host.getVdsGroupId().equals(cluster.getId())) {
            paramerterList.add(new ChangeVDSClusterParameters(cluster.getId(), host.getId()));
        }
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ChangeVDSCluster, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            ArrayList<VDS> hosts = ((MoveHost) dataCenterGuideModel.getWindow()).getSelectedHosts();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && hosts.size() == retVals.size()) {
                int i = 0;
                for (VDS selectedHost : hosts) {
                    if (selectedHost.getStatus() == VDSStatus.PendingApproval && retVals.get(i) != null && retVals.get(i).getSucceeded()) {
                        Frontend.RunAction(VdcActionType.ApproveVds, new ApproveVdsParameters(selectedHost.getId()), null, this);
                    }
                }
                i++;
            }
            dataCenterGuideModel.getWindow().StopProgress();
            dataCenterGuideModel.Cancel();
            dataCenterGuideModel.PostAction();
        }
    }, this);
}
#end_block

#method_before
public void OnAddHost() {
    CancelConfirm();
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // Save changes.
    VDS host = new VDS();
    host.setvds_name((String) model.getName().getEntity());
    host.sethost_name((String) model.getHost().getEntity());
    host.setport(Integer.parseInt(model.getPort().getEntity().toString()));
    host.setvds_group_id(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    // Save primary PM parameters.
    host.setManagmentIp((String) model.getManagementIp().getEntity());
    host.setpm_user((String) model.getPmUserName().getEntity());
    host.setpm_password((String) model.getPmPassword().getEntity());
    host.setpm_type((String) model.getPmType().getSelectedItem());
    host.setPmOptionsMap(new ValueObjectMap(model.getPmOptionsMap(), false));
    // Save secondary PM parameters.
    host.setPmSecondaryIp((String) model.getPmSecondaryIp().getEntity());
    host.setPmSecondaryUser((String) model.getPmSecondaryUserName().getEntity());
    host.setPmSecondaryPassword((String) model.getPmSecondaryPassword().getEntity());
    host.setPmSecondaryType((String) model.getPmSecondaryType().getSelectedItem());
    host.setPmSecondaryOptionsMap(new ValueObjectMap(model.getPmSecondaryOptionsMap(), false));
    // Save other PM parameters.
    host.setpm_enabled((Boolean) model.getIsPm().getEntity());
    host.setPmSecondaryConcurrent((Boolean) model.getPmSecondaryConcurrent().getEntity());
    AddVdsActionParameters addVdsParams = new AddVdsActionParameters();
    addVdsParams.setVdsId(host.getId());
    addVdsParams.setvds(host);
    addVdsParams.setRootPassword((String) model.getRootPassword().getEntity());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVds, addVdsParams, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel localModel = (DataCenterGuideModel) result.getState();
            localModel.PostOnAddHost(result.getReturnValue());
        }
    }, this);
}
#method_after
public void OnAddHost() {
    CancelConfirm();
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // Save changes.
    VDS host = new VDS();
    host.setVdsName((String) model.getName().getEntity());
    host.setHostName((String) model.getHost().getEntity());
    host.setPort(Integer.parseInt(model.getPort().getEntity().toString()));
    host.setVdsGroupId(((VDSGroup) model.getCluster().getSelectedItem()).getId());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    // Save primary PM parameters.
    host.setManagementIp((String) model.getManagementIp().getEntity());
    host.setPmUser((String) model.getPmUserName().getEntity());
    host.setPmPassword((String) model.getPmPassword().getEntity());
    host.setPmType((String) model.getPmType().getSelectedItem());
    host.setPmOptionsMap(new ValueObjectMap(model.getPmOptionsMap(), false));
    // Save secondary PM parameters.
    host.setPmSecondaryIp((String) model.getPmSecondaryIp().getEntity());
    host.setPmSecondaryUser((String) model.getPmSecondaryUserName().getEntity());
    host.setPmSecondaryPassword((String) model.getPmSecondaryPassword().getEntity());
    host.setPmSecondaryType((String) model.getPmSecondaryType().getSelectedItem());
    host.setPmSecondaryOptionsMap(new ValueObjectMap(model.getPmSecondaryOptionsMap(), false));
    // Save other PM parameters.
    host.setpm_enabled((Boolean) model.getIsPm().getEntity());
    host.setPmSecondaryConcurrent((Boolean) model.getPmSecondaryConcurrent().getEntity());
    AddVdsActionParameters addVdsParams = new AddVdsActionParameters();
    addVdsParams.setVdsId(host.getId());
    addVdsParams.setvds(host);
    addVdsParams.setRootPassword((String) model.getRootPassword().getEntity());
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddVds, addVdsParams, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            DataCenterGuideModel localModel = (DataCenterGuideModel) result.getState();
            localModel.PostOnAddHost(result.getReturnValue());
        }
    }, this);
}
#end_block

#method_before
public static <T> KeyValuePairCompat<T, HttpClient> getConnection(String hostName, int port, int clientTimeOut, Class<T> type, boolean isSecure) {
    URL serverUrl;
    String prefix;
    if (isSecure) {
        prefix = HTTPS;
    } else {
        prefix = HTTP;
    }
    try {
        serverUrl = new URL(prefix + hostName + ":" + port);
    } catch (MalformedURLException mfue) {
        log.error("failed to forme the xml-rpc url", mfue);
        return null;
    }
    return getHttpConnection(serverUrl, clientTimeOut, type);
}
#method_after
public static <T> Pair<T, HttpClient> getConnection(String hostName, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, Class<T> type, boolean isSecure) {
    URL serverUrl;
    String prefix;
    if (isSecure) {
        prefix = HTTPS;
    } else {
        prefix = HTTP;
    }
    try {
        serverUrl = new URL(prefix + hostName + ":" + port);
    } catch (MalformedURLException mfue) {
        log.error("failed to forme the xml-rpc url", mfue);
        return null;
    }
    return getHttpConnection(serverUrl, clientTimeOut, connectionTimeOut, clientRetries, type);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
private static <T> KeyValuePairCompat<T, HttpClient> getHttpConnection(URL serverUrl, int clientTimeOut, Class<T> type) {
    XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
    config.setServerURL(serverUrl);
    // It is OK to wait a long time for the response of the host, as some
    // operations can take a long time to complete:
    config.setReplyTimeout(clientTimeOut);
    // But the connection timeout should not be equal to the client timeout, as
    // this means that we take a very long time to react when hosts fail and
    // stop responding, in fact we should not wait for the connection more
    // than the interval that we use to poll the hosts:
    int connectionTimeout = Config.<Integer>GetValue(ConfigValues.VdsRefreshRate) * 1000;
    config.setConnectionTimeout(connectionTimeout);
    XmlRpcClient xmlRpcClient = new XmlRpcClient();
    xmlRpcClient.setConfig(config);
    XmlRpcCommonsTransportFactory transportFactory = new CustomXmlRpcCommonsTransportFactory(xmlRpcClient);
    HttpClient httpclient = createHttpClient();
    transportFactory.setHttpClient(httpclient);
    xmlRpcClient.setTransportFactory(transportFactory);
    ClientFactory clientFactory = new ClientFactory(xmlRpcClient);
    T connector = (T) clientFactory.newInstance(Thread.currentThread().getContextClassLoader(), type, null);
    T asyncConnector = (T) AsyncProxy.newInstance(connector, clientTimeOut);
    KeyValuePairCompat<T, HttpClient> returnValue = new KeyValuePairCompat<T, HttpClient>(asyncConnector, httpclient);
    return returnValue;
}
#method_after
@SuppressWarnings("unchecked")
private static <T> Pair<T, HttpClient> getHttpConnection(URL serverUrl, int clientTimeOut, int connectionTimeOut, int clientRetries, Class<T> type) {
    XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
    config.setServerURL(serverUrl);
    config.setConnectionTimeout(connectionTimeOut);
    config.setReplyTimeout(clientTimeOut);
    XmlRpcClient xmlRpcClient = new XmlRpcClient();
    xmlRpcClient.setConfig(config);
    XmlRpcCommonsTransportFactory transportFactory = new CustomXmlRpcCommonsTransportFactory(xmlRpcClient);
    HttpClient httpclient = createHttpClient(clientRetries);
    transportFactory.setHttpClient(httpclient);
    xmlRpcClient.setTransportFactory(transportFactory);
    ClientFactory clientFactory = new ClientFactory(xmlRpcClient);
    T connector = (T) clientFactory.newInstance(Thread.currentThread().getContextClassLoader(), type, null);
    T asyncConnector = (T) AsyncProxy.newInstance(connector, clientTimeOut);
    Pair<T, HttpClient> returnValue = new Pair<T, HttpClient>(asyncConnector, httpclient);
    return returnValue;
}
#end_block

#method_before
private static HttpClient createHttpClient() {
    // Create the client:
    HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
    // Configure the HTTP client so it will not retry the execution of
    // methods when there are IO errors, as we need to get the IO errors
    // soon in order to react quickly when hosts stop responding:
    HttpClientParams parameters = client.getParams();
    HttpMethodRetryHandler handler = new DefaultHttpMethodRetryHandler(0, false);
    parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler);
    // Done:
    return client;
}
#method_after
private static HttpClient createHttpClient(int clientRetries) {
    // Create the client:
    HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
    // Configure the HTTP client so it will retry the execution of
    // methods when there are IO errors:
    int retries = Config.<Integer>GetValue(ConfigValues.vdsRetries);
    HttpMethodRetryHandler handler = new DefaultHttpMethodRetryHandler(retries, false);
    HttpClientParams parameters = client.getParams();
    parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler);
    // Done:
    return client;
}
#end_block

#method_before
@Override
public Clusters list() {
    return mapCollection(getBackendCollection(VdcQueryType.GetVdsGroupsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId)));
}
#method_after
@Override
public Clusters list() {
    return mapCollection(getVdsGroups());
}
#end_block

#method_before
@Override
@SingleEntityResource
public ClusterResource getClusterSubResource(String id) {
    return inject(new BackendClusterResource(id));
}
#method_after
@Override
@SingleEntityResource
public ClusterResource getClusterSubResource(String id) {
    return inject(new BackendDataCenterClusterResource(this, id));
}
#end_block

#method_before
@Override
public Response add(Cluster cluster) {
    validateParameters(cluster, "name", "dataCenter.name|id");
    validateEnums(Cluster.class, cluster);
    storage_pool pool = getStoragePool(cluster, this);
    VDSGroup entity = map(cluster, map(pool));
    return performCreate(VdcActionType.AddVdsGroup, new VdsGroupOperationParameters(entity), new QueryIdResolver<Guid>(VdcQueryType.GetVdsGroupById, GetVdsGroupByIdParameters.class));
}
#method_after
@Override
public Response add(Cluster cluster) {
    validateParameters(cluster, "name");
    validateEnums(Cluster.class, cluster);
    DataCenter dataCenter = new DataCenter();
    dataCenter.setId(dataCenterId.toString());
    cluster.setDataCenter(dataCenter);
    storage_pool pool = getStoragePool(cluster, this);
    VDSGroup entity = map(cluster, map(pool));
    return performCreate(VdcActionType.AddVdsGroup, new VdsGroupOperationParameters(entity), new QueryIdResolver<Guid>(VdcQueryType.GetVdsGroupById, GetVdsGroupByIdParameters.class));
}
#end_block

#method_before
@Test
public void testRemove() throws Exception {
    setUpGetEntityExpectations();
    setUriInfo(setUpActionExpectations(VdcActionType.RemoveVdsGroup, VdsGroupParametersBase.class, new String[] { "VdsGroupId" }, new Object[] { GUIDS[0] }, true, true));
    verifyRemove(collection.remove(GUIDS[0].toString()));
}
#method_after
@Test
public void testRemove() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupsByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { dataCenterId }, setUpVDSGroups(), null);
    setUriInfo(setUpActionExpectations(VdcActionType.RemoveVdsGroup, VdsGroupParametersBase.class, new String[] { "VdsGroupId" }, new Object[] { GUIDS[0] }, true, true));
    verifyRemove(collection.remove(GUIDS[0].toString()));
}
#end_block

#method_before
@Test
public void testRemoveNonExistant() throws Exception {
    setUpGetEntityExpectations(NON_EXISTANT_GUID, true);
    control.replay();
    try {
        collection.remove(NON_EXISTANT_GUID.toString());
        fail("expected WebApplicationException");
    } catch (WebApplicationException wae) {
        assertNotNull(wae.getResponse());
        assertEquals(404, wae.getResponse().getStatus());
    }
}
#method_after
@Test
public void testRemoveNonExistant() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupsByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { dataCenterId }, setUpVDSGroups(), null);
    control.replay();
    try {
        collection.remove(NON_EXISTANT_GUID.toString());
        fail("expected WebApplicationException");
    } catch (WebApplicationException wae) {
        assertNotNull(wae.getResponse());
        assertEquals(404, wae.getResponse().getStatus());
    }
}
#end_block

#method_before
@Test
public void testRemoveCantDo() throws Exception {
    setUpGetEntityExpectations();
    doTestBadRemove(false, true, CANT_DO);
}
#method_after
@Test
public void testRemoveCantDo() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupsByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { dataCenterId }, setUpVDSGroups(), null);
    doTestBadRemove(false, true, CANT_DO);
}
#end_block

#method_before
@Test
public void testRemoveFailed() throws Exception {
    setUpGetEntityExpectations();
    doTestBadRemove(true, false, FAILURE);
}
#method_after
@Test
public void testRemoveFailed() throws Exception {
    setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupsByStoragePoolId, StoragePoolQueryParametersBase.class, new String[] { "StoragePoolId" }, new Object[] { dataCenterId }, setUpVDSGroups(), null);
    doTestBadRemove(true, false, FAILURE);
}
#end_block

#method_before
@Test
public void testAddIncompleteParameters() throws Exception {
    Cluster model = new Cluster();
    model.setName(NAMES[0]);
    setUriInfo(setUpBasicUriExpectations());
    control.replay();
    try {
        collection.add(model);
        fail("expected WebApplicationException on incomplete parameters");
    } catch (WebApplicationException wae) {
        verifyIncompleteException(wae, "Cluster", "add", "dataCenter.name|id");
    }
}
#method_after
@Test
public void testAddIncompleteParameters() throws Exception {
    Cluster model = new Cluster();
    setUriInfo(setUpBasicUriExpectations());
    control.replay();
    try {
        collection.add(model);
        fail("expected WebApplicationException on incomplete parameters");
    } catch (WebApplicationException wae) {
        verifyIncompleteException(wae, "Cluster", "add", "name");
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid poolId = getPoolId();
    boolean isAtLeastOneVMCreationFailed = false;
    setActionReturnValue(poolId);
    VmTemplateHandler.lockVmTemplateInTransaction(getParameters().getVmStaticData().getVmtGuid(), getCompensationContext());
    String poolName = getParameters().getVmStaticData().getVmName();
    int subsequentFailedAttempts = 0;
    int vmPoolMaxSubsequentFailures = Config.<Integer>GetValue(ConfigValues.VmPoolMaxSubsequentFailures);
    for (int i = 1, number = 1; i <= getParameters().getVmsCount(); i++, number++) {
        String currentVmName;
        number--;
        do {
            number++;
            currentVmName = generateVmName(poolName, number);
        } while ((Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(currentVmName)).getReturnValue());
        VmStatic currVm = new VmStatic(getParameters().getVmStaticData());
        currVm.setVmName(currentVmName);
        AddVmAndAttachToPoolParameters addVmAndAttachToPoolParams = new AddVmAndAttachToPoolParameters(currVm, poolId, currentVmName, diskInfoDestinationMap);
        addVmAndAttachToPoolParams.setSessionId(getParameters().getSessionId());
        addVmAndAttachToPoolParams.setParentCommand(VdcActionType.AddVmPoolWithVms);
        VdcReturnValueBase returnValue = Backend.getInstance().runInternalAction(VdcActionType.AddVmAndAttachToPool, addVmAndAttachToPoolParams, createAddVmStepContext(currentVmName));
        if (returnValue != null && !returnValue.getSucceeded() && returnValue.getCanDoActionMessages().size() > 0) {
            for (String msg : returnValue.getCanDoActionMessages()) {
                if (!getReturnValue().getCanDoActionMessages().contains(msg)) {
                    getReturnValue().getCanDoActionMessages().add(msg);
                }
            }
            _addVmsSucceded = returnValue.getSucceeded() && _addVmsSucceded;
            subsequentFailedAttempts++;
        } else {
            // Succeed on that , reset subsequentFailedAttempts.
            subsequentFailedAttempts = 0;
        }
        // if subsequent attempts failure exceeds configuration value , abort the loop.
        if (subsequentFailedAttempts == vmPoolMaxSubsequentFailures) {
            AuditLogableBase logable = new AuditLogableBase();
            AuditLogDirector.log(logable, AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED);
            break;
        }
        isAtLeastOneVMCreationFailed = isAtLeastOneVMCreationFailed || !_addVmsSucceded;
    }
    getReturnValue().setCanDoAction(!isAtLeastOneVMCreationFailed);
    setSucceeded(!isAtLeastOneVMCreationFailed);
    VmTemplateHandler.UnLockVmTemplate(getParameters().getVmStaticData().getVmtGuid());
    getCompensationContext().resetCompensation();
}
#method_after
@Override
protected void executeCommand() {
    Guid poolId = getPoolId();
    boolean isAtLeastOneVMCreationFailed = false;
    setActionReturnValue(poolId);
    VmTemplateHandler.lockVmTemplateInTransaction(getParameters().getVmStaticData().getVmtGuid(), getCompensationContext());
    String poolName = getParameters().getVmStaticData().getName();
    int subsequentFailedAttempts = 0;
    int vmPoolMaxSubsequentFailures = Config.<Integer>GetValue(ConfigValues.VmPoolMaxSubsequentFailures);
    for (int i = 1, number = 1; i <= getParameters().getVmsCount(); i++, number++) {
        String currentVmName;
        number--;
        do {
            number++;
            currentVmName = NameForVmInPoolGenerator.generateVmName(poolName, number);
        } while ((Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(currentVmName)).getReturnValue());
        VmStatic currVm = new VmStatic(getParameters().getVmStaticData());
        currVm.setName(currentVmName);
        AddVmAndAttachToPoolParameters addVmAndAttachToPoolParams = new AddVmAndAttachToPoolParameters(currVm, poolId, currentVmName, diskInfoDestinationMap);
        addVmAndAttachToPoolParams.setSessionId(getParameters().getSessionId());
        addVmAndAttachToPoolParams.setParentCommand(VdcActionType.AddVmPoolWithVms);
        VdcReturnValueBase returnValue = Backend.getInstance().runInternalAction(VdcActionType.AddVmAndAttachToPool, addVmAndAttachToPoolParams, createAddVmStepContext(currentVmName));
        if (returnValue != null && !returnValue.getSucceeded() && returnValue.getCanDoActionMessages().size() > 0) {
            for (String msg : returnValue.getCanDoActionMessages()) {
                if (!getReturnValue().getCanDoActionMessages().contains(msg)) {
                    getReturnValue().getCanDoActionMessages().add(msg);
                }
            }
            _addVmsSucceded = returnValue.getSucceeded() && _addVmsSucceded;
            subsequentFailedAttempts++;
        } else {
            // Succeed on that , reset subsequentFailedAttempts.
            subsequentFailedAttempts = 0;
        }
        // if subsequent attempts failure exceeds configuration value , abort the loop.
        if (subsequentFailedAttempts == vmPoolMaxSubsequentFailures) {
            AuditLogableBase logable = new AuditLogableBase();
            AuditLogDirector.log(logable, AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED);
            break;
        }
        isAtLeastOneVMCreationFailed = isAtLeastOneVMCreationFailed || !_addVmsSucceded;
    }
    getReturnValue().setCanDoAction(!isAtLeastOneVMCreationFailed);
    setSucceeded(!isAtLeastOneVMCreationFailed);
    VmTemplateHandler.UnLockVmTemplate(getParameters().getVmStaticData().getVmtGuid());
    getCompensationContext().resetCompensation();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getVdsGroupId());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!isMemorySizeLegal(grp.getcompatibility_version())) {
        return false;
    }
    VmPool pool = getVmPoolDAO().getByName(getParameters().getVmPool().getName());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getVmPoolId().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    setStoragePoolId(grp.getStoragePoolId().getValue());
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
    }
    if (!verifyAddVM()) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getstorage_ids().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getAssignedVmsCount()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#method_after
@Override
protected boolean canDoAction() {
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getVdsGroupId());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!isMemorySizeLegal(grp.getcompatibility_version())) {
        return false;
    }
    VmPool pool = getVmPoolDAO().getByName(getParameters().getVmPool().getName());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getVmPoolId().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    setStoragePoolId(grp.getStoragePoolId().getValue());
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
    }
    if (!verifyAddVM()) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getStorageIds().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getAssignedVmsCount()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#end_block

#method_before
private boolean ensureDestinationImageMap() {
    if (diskInfoDestinationMap.isEmpty()) {
        if (getParameters().getStorageDomainId() != null && !Guid.Empty.equals(getParameters().getStorageDomainId())) {
            Guid storageId = getParameters().getStorageDomainId();
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(storageId);
            for (DiskImage image : getVmTemplate().getDiskMap().values()) {
                image.setstorage_ids(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
            }
        } else {
            ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), diskInfoDestinationMap, destStorages, false);
        }
    }
    if (getVmTemplate().getDiskMap().values().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not found any default active domain for one of the disks of template with id : {0}", getVmTemplate().getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        return false;
    }
    return true;
}
#method_after
private boolean ensureDestinationImageMap() {
    if (diskInfoDestinationMap.isEmpty()) {
        if (getParameters().getStorageDomainId() != null && !Guid.Empty.equals(getParameters().getStorageDomainId())) {
            Guid storageId = getParameters().getStorageDomainId();
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(storageId);
            for (DiskImage image : getVmTemplate().getDiskMap().values()) {
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
            }
        } else {
            ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), diskInfoDestinationMap, destStorages, false);
        }
    }
    if (getVmTemplate().getDiskMap().values().size() != diskInfoDestinationMap.size()) {
        log.errorFormat("Can not found any default active domain for one of the disks of template with id : {0}", getVmTemplate().getId());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS);
        return false;
    }
    return true;
}
#end_block

#method_before
public boolean checkFreeSpaceAndTypeOnDestDomains() {
    boolean retValue = true;
    List<Guid> validDomains = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid domainId = diskImage.getstorage_ids().get(0);
        if (validDomains.contains(domainId)) {
            continue;
        }
        StorageDomain domain = destStorages.get(domainId);
        if (domain == null) {
            domain = getStorageDomainDAO().getForStoragePool(domainId, getVmTemplate().getstorage_pool_id());
        }
        int numOfDisksOnDomain = 0;
        if (storageToDisksMap.containsKey(domainId)) {
            numOfDisksOnDomain = storageToDisksMap.get(domainId).size();
        }
        if (numOfDisksOnDomain > 0) {
            if (domain.getstorage_domain_type() == StorageDomainType.ImportExport) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                retValue = false;
                break;
            }
            if (!doesStorageDomainhaveSpaceForRequest(domain, numOfDisksOnDomain * getBlockSparseInitSizeInGB() * getParameters().getVmsCount())) {
                return false;
            }
        }
        validDomains.add(domainId);
    }
    return retValue;
}
#method_after
public boolean checkFreeSpaceAndTypeOnDestDomains() {
    boolean retValue = true;
    List<Guid> validDomains = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid domainId = diskImage.getStorageIds().get(0);
        if (validDomains.contains(domainId)) {
            continue;
        }
        StorageDomain domain = destStorages.get(domainId);
        if (domain == null) {
            domain = getStorageDomainDAO().getForStoragePool(domainId, getVmTemplate().getstorage_pool_id());
        }
        int numOfDisksOnDomain = 0;
        if (storageToDisksMap.containsKey(domainId)) {
            numOfDisksOnDomain = storageToDisksMap.get(domainId).size();
        }
        if (numOfDisksOnDomain > 0) {
            if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                retValue = false;
                break;
            }
            if (!doesStorageDomainhaveSpaceForRequest(domain, numOfDisksOnDomain * getBlockSparseInitSizeInGB() * getParameters().getVmsCount())) {
                return false;
            }
        }
        validDomains.add(domainId);
    }
    return retValue;
}
#end_block

#method_before
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    for (DiskImage disk : diskInfoDestinationMap.values()) {
        list.add(new QuotaStorageConsumptionParameter(disk.getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, disk.getstorage_ids().get(0), (double) (disk.getSizeInGigabytes() * getParameters().getVmsCount() * getBlockSparseInitSizeInGB())));
    }
    return list;
}
#method_after
@Override
public List<QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {
    List<QuotaConsumptionParameter> list = new ArrayList<QuotaConsumptionParameter>();
    for (DiskImage disk : diskInfoDestinationMap.values()) {
        list.add(new QuotaStorageConsumptionParameter(disk.getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, disk.getStorageIds().get(0), (double) (disk.getSizeInGigabytes() * getParameters().getVmsCount() * getBlockSparseInitSizeInGB())));
    }
    return list;
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.equals(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryStarted();
    } else if (ev.equals(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryComplete();
    } else if (ev.equals(ListModel.SelectedItemChangedEventDefinition)) {
        if (sender == getDataCenter()) {
            DataCenter_SelectedItemChanged(sender, args);
        } else if (sender == getTemplate()) {
            Template_SelectedItemChanged(sender, args);
        } else if (sender == getCluster()) {
            Cluster_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getTimeZone()) {
            TimeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            DefaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            OSType_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            FirstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            DisplayProtocol_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            NumOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            CoresPerSocket_EntityChanged(sender, args);
        }
    } else if (ev.equals(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            MemSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            TotalCPUCores_EntityChanged(sender, args);
        } else if (sender == getRunVMOnSpecificHost()) {
            RunVMOnSpecificHost_EntityChanged(sender, args);
        } else if (sender == getDontMigrateVM()) {
            DontMigrateVM_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            IsAutoAssign_EntityChanged(sender, args);
        } else if (sender == getProvisioning()) {
            Provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        }
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(Frontend.QueryStartedEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryStarted();
    } else if (ev.matchesDefinition(Frontend.QueryCompleteEventDefinition) && StringHelper.stringsEqual(Frontend.getCurrentContext(), getHash())) {
        Frontend_QueryComplete();
    } else if (ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) {
        if (sender == getDataCenter()) {
            DataCenter_SelectedItemChanged(sender, args);
        } else if (sender == getTemplate()) {
            Template_SelectedItemChanged(sender, args);
        } else if (sender == getCluster()) {
            Cluster_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getTimeZone()) {
            TimeZone_SelectedItemChanged(sender, args);
        } else if (sender == getDefaultHost()) {
            DefaultHost_SelectedItemChanged(sender, args);
        } else if (sender == getOSType()) {
            OSType_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getFirstBootDevice()) {
            FirstBootDevice_SelectedItemChanged(sender, args);
        } else if (sender == getDisplayProtocol()) {
            DisplayProtocol_SelectedItemChanged(sender, args);
            InitUsbPolicy();
        } else if (sender == getNumOfSockets()) {
            NumOfSockets_EntityChanged(sender, args);
        } else if (sender == getCoresPerSocket()) {
            CoresPerSocket_EntityChanged(sender, args);
        }
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) {
        if (sender == getMemSize()) {
            MemSize_EntityChanged(sender, args);
        } else if (sender == getTotalCPUCores()) {
            TotalCPUCores_EntityChanged(sender, args);
        } else if (sender == getRunVMOnSpecificHost()) {
            RunVMOnSpecificHost_EntityChanged(sender, args);
        } else if (sender == getDontMigrateVM()) {
            DontMigrateVM_EntityChanged(sender, args);
        } else if (sender == getIsAutoAssign()) {
            IsAutoAssign_EntityChanged(sender, args);
        } else if (sender == getProvisioning()) {
            Provisioning_SelectedItemChanged(sender, args);
        } else if (sender == getProvisioningThin_IsSelected()) {
            if ((Boolean) getProvisioningThin_IsSelected().getEntity()) {
                getProvisioning().setEntity(false);
            }
        } else if (sender == getProvisioningClone_IsSelected()) {
            if ((Boolean) getProvisioningClone_IsSelected().getEntity()) {
                getProvisioning().setEntity(true);
            }
        }
    }
}
#end_block

#method_before
public void SetDataCenter(UnitVmModel model, ArrayList<storage_pool> list) {
    if (model.getBehavior().getSystemTreeSelectedItem() != null && model.getBehavior().getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(model.getBehavior().getSystemTreeSelectedItem().getType()) {
            case Templates:
            case DataCenter:
                storage_pool selectDataCenter = (storage_pool) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (selectDataCenter.getId().equals(dc.getId())) {
                        selectDataCenter = dc;
                        break;
                    }
                }
                model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { selectDataCenter })));
                model.getDataCenter().setSelectedItem(selectDataCenter);
                model.getDataCenter().setIsChangable(false);
                // $NON-NLS-1$
                model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                break;
            case Cluster:
            case VMs:
                VDSGroup cluster = (VDSGroup) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (dc.getId().equals(cluster.getStoragePoolId())) {
                        model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { dc })));
                        model.getDataCenter().setSelectedItem(dc);
                        break;
                    }
                }
                model.getDataCenter().setIsChangable(false);
                // $NON-NLS-1$
                model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                break;
            case Host:
                VDS host = (VDS) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (dc.getId().equals(host.getStoragePoolId())) {
                        model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { dc })));
                        model.getDataCenter().setSelectedItem(dc);
                        model.getDataCenter().setIsChangable(false);
                        // $NON-NLS-1$
                        model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                        break;
                    }
                }
                break;
            case Storage:
                storage_domains storage = (storage_domains) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (dc.getId().equals(storage.getstorage_pool_id())) {
                        model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { dc })));
                        model.getDataCenter().setSelectedItem(dc);
                        model.getDataCenter().setIsChangable(false);
                        // $NON-NLS-1$
                        model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                        break;
                    }
                }
                break;
            default:
                break;
        }
    } else {
        model.getDataCenter().setItems(list);
        model.getDataCenter().setSelectedItem(Linq.FirstOrDefault(list));
    }
}
#method_after
public void SetDataCenter(UnitVmModel model, ArrayList<storage_pool> list) {
    if (model.getBehavior().getSystemTreeSelectedItem() != null && model.getBehavior().getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        switch(model.getBehavior().getSystemTreeSelectedItem().getType()) {
            case Templates:
            case DataCenter:
                storage_pool selectDataCenter = (storage_pool) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (selectDataCenter.getId().equals(dc.getId())) {
                        selectDataCenter = dc;
                        break;
                    }
                }
                model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { selectDataCenter })));
                model.getDataCenter().setSelectedItem(selectDataCenter);
                model.getDataCenter().setIsChangable(false);
                // $NON-NLS-1$
                model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                break;
            case Cluster:
            case VMs:
                VDSGroup cluster = (VDSGroup) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (dc.getId().equals(cluster.getStoragePoolId())) {
                        model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { dc })));
                        model.getDataCenter().setSelectedItem(dc);
                        break;
                    }
                }
                model.getDataCenter().setIsChangable(false);
                // $NON-NLS-1$
                model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                break;
            case Host:
                VDS host = (VDS) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (dc.getId().equals(host.getStoragePoolId())) {
                        model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { dc })));
                        model.getDataCenter().setSelectedItem(dc);
                        model.getDataCenter().setIsChangable(false);
                        // $NON-NLS-1$
                        model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                        break;
                    }
                }
                break;
            case Storage:
                StorageDomain storage = (StorageDomain) model.getBehavior().getSystemTreeSelectedItem().getEntity();
                for (storage_pool dc : list) {
                    if (dc.getId().equals(storage.getStoragePoolId())) {
                        model.getDataCenter().setItems(new ArrayList<storage_pool>(Arrays.asList(new storage_pool[] { dc })));
                        model.getDataCenter().setSelectedItem(dc);
                        model.getDataCenter().setIsChangable(false);
                        // $NON-NLS-1$
                        model.getDataCenter().setInfo("Cannot choose Data Center in tree context");
                        break;
                    }
                }
                break;
            default:
                break;
        }
    } else {
        model.getDataCenter().setItems(list);
        model.getDataCenter().setSelectedItem(Linq.FirstOrDefault(list));
    }
}
#end_block

#method_before
@Test
public void testValidNonPatternName() {
    // $NON-NLS-1$
    Assert.assertTrue(new TestablePoolNameValidation().Validate("pool-T4534f").getSuccess());
}
#method_after
@Test
public void testValidNonPatternName() {
    // $NON-NLS-1$
    assertTrue(new TestablePoolNameValidation().Validate("pool-T4534f").getSuccess());
}
#end_block

#method_before
@Test
public void testNonValidNonPatternName() {
    // $NON-NLS-1$
    Assert.assertFalse(new TestablePoolNameValidation().Validate("pool-T453&4f").getSuccess());
}
#method_after
@Test
public void testNonValidNonPatternName() {
    // $NON-NLS-1$
    assertFalse(new TestablePoolNameValidation().Validate("pool-T453&4f").getSuccess());
}
#end_block

#method_before
@Test
public void testNonValidNonPatternName2() {
    // $NON-NLS-1$
    Assert.assertFalse(new TestablePoolNameValidation().Validate("").getSuccess());
}
#method_after
@Test
public void testNonValidNonPatternName2() {
    // $NON-NLS-1$
    assertFalse(new TestablePoolNameValidation().Validate("").getSuccess());
}
#end_block

#method_before
@Test
public void testValidPatternName() {
    // $NON-NLS-1$
    Assert.assertTrue(new TestablePoolNameValidation().Validate("pool-T4534f??".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testValidPatternName() {
    // $NON-NLS-1$
    assertTrue(new TestablePoolNameValidation().Validate("pool-T4534f??".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@Test
public void testValidPatternName2() {
    // $NON-NLS-1$
    Assert.assertTrue(new TestablePoolNameValidation().Validate("pool-T4534f?????rt".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testValidPatternName2() {
    // $NON-NLS-1$
    assertTrue(new TestablePoolNameValidation().Validate("pool-T4534f?????rt".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@Test
public void testValidPatternName3() {
    // $NON-NLS-1$
    Assert.assertTrue(new TestablePoolNameValidation().Validate("??rt".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testValidPatternName3() {
    // $NON-NLS-1$
    assertTrue(new TestablePoolNameValidation().Validate("??rt".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@Test
public void testNonValidPatternName() {
    // $NON-NLS-1$
    Assert.assertFalse(new TestablePoolNameValidation().Validate("???".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testNonValidPatternName() {
    // $NON-NLS-1$
    assertFalse(new TestablePoolNameValidation().Validate("???".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@Test
public void testNonValidPatternName2() {
    // $NON-NLS-1$
    Assert.assertFalse(new TestablePoolNameValidation().Validate("pool-T4534f??r-t??".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testNonValidPatternName2() {
    // $NON-NLS-1$
    assertFalse(new TestablePoolNameValidation().Validate("pool-T4534f??r-t??".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@Test
public void testNonValidPatternName3() {
    // $NON-NLS-1$
    Assert.assertFalse(new TestablePoolNameValidation().Validate("pool-T4534f??rt??asda".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testNonValidPatternName3() {
    // $NON-NLS-1$
    assertFalse(new TestablePoolNameValidation().Validate("pool-T4534f??rt??asda".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@Test
public void testNonValidPatternName4() {
    // $NON-NLS-1$
    Assert.assertFalse(new TestablePoolNameValidation().Validate("??rt??asda".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#method_after
@Test
public void testNonValidPatternName4() {
    // $NON-NLS-1$
    assertFalse(new TestablePoolNameValidation().Validate("??rt??asda".replace('?', VmPool.MASK_CHARACTER)).getSuccess());
}
#end_block

#method_before
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((storage_pool) object).getname();
        }
    });
    clusterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDSGroup) object).getname();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    templateEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VmTemplate) object).getname();
        }
    });
    oSTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    timeZoneEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Entry<String, String>) object).getValue();
        }
    });
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    usbSupportEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    // $NON-NLS-1$
    isAutoAssignEditor = new EntityModelRadioButtonEditor("runVmOnHostGroup");
    defaultHostEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getVdsName();
        }
    });
    // Resource Allocation
    // $NON-NLS-1$
    provisioningThinEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // $NON-NLS-1$
    provisioningCloneEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    secondBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    cdImageEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return (String) object;
        }
    });
}
#method_after
@SuppressWarnings({ "rawtypes", "unchecked" })
private void initListBoxEditors() {
    // General tab
    dataCenterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((storage_pool) object).getname();
        }
    });
    clusterEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDSGroup) object).getname();
        }
    });
    quotaEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Quota) object).getQuotaName();
        }
    });
    templateEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VmTemplate) object).getName();
        }
    });
    oSTypeEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    // Pools
    poolTypeEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    // Windows Sysprep
    domainEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    timeZoneEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((Entry<String, String>) object).getValue();
        }
    });
    // Console tab
    displayProtocolEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    usbSupportEditor = new ListModelListBoxEditor<Object>(new EnumRenderer());
    numOfMonitorsEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return object.toString();
        }
    });
    // Host Tab
    // $NON-NLS-1$
    specificHost = new RadioButton("runVmOnHostGroup");
    // $NON-NLS-1$
    isAutoAssignEditor = new EntityModelRadioButtonEditor("runVmOnHostGroup");
    defaultHostEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getName();
        }
    });
    // Resource Allocation
    // $NON-NLS-1$
    provisioningThinEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // $NON-NLS-1$
    provisioningCloneEditor = new EntityModelRadioButtonEditor("provisioningGroup");
    // Boot Options Tab
    firstBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    secondBootDeviceEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((EntityModel) object).getTitle();
        }
    });
    cdImageEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return (String) object;
        }
    });
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // check that we are not removing the management network
    if (StringUtils.equals(getParameters().getNetwork().getName(), Config.<String>GetValue(ConfigValues.ManagementNetwork))) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK);
        getReturnValue().getCanDoActionMessages().add(String.format("$NetworkName %1$s", Config.<String>GetValue(ConfigValues.ManagementNetwork)));
        return false;
    }
    // check that there is no vm running with this network
    List<VmStatic> vms = getVmStaticDAO().getAllByGroupAndNetworkName(getParameters().getVdsGroupId(), getParameters().getNetwork().getName());
    if (vms.size() > 0) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_REMOVE_NETWORK_IN_USE_BY_VM);
        getReturnValue().getCanDoActionMessages().add(String.format("$NetworkName %1$s", getParameters().getNetwork().getName()));
        // list all the VMs using the network
        String vmList = "";
        for (VmStatic vm : vms) vmList += vm.getvm_name() + '\n';
        // drop last newline
        vmList = vmList.substring(0, vmList.length() - 1);
        getReturnValue().getCanDoActionMessages().add(String.format("$VmList %s", vmList));
        return false;
    }
    // check that no template is using this network
    List<VmTemplate> templates = getVmTemplateDAO().getAllForVdsGroup(getParameters().getVdsGroupId());
    for (VmTemplate tmpl : templates) {
        List<VmNetworkInterface> interfaces = getVmNetworkInterfaceDao().getAllForTemplate(tmpl.getId());
        if (networkUsedByAnInterface(interfaces)) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_REMOVE_NETWORK_IN_USE_BY_TEMPLATE);
            return false;
        }
    }
    // check if network in use by vm
    String query = "Vms: cluster = " + getVdsGroup().getname();
    SearchParameters searchParams = new SearchParameters(query, SearchType.VM);
    searchParams.setMaxCount(Integer.MAX_VALUE);
    VdcQueryReturnValue tempVar = Backend.getInstance().runInternalQuery(VdcQueryType.Search, searchParams);
    SearchReturnValue ret = (SearchReturnValue) ((tempVar instanceof SearchReturnValue) ? tempVar : null);
    if (ret != null && ret.getSucceeded()) {
        @SuppressWarnings("unchecked")
        List<IVdcQueryable> vmList = (List<IVdcQueryable>) ret.getReturnValue();
        for (IVdcQueryable vm_helper : vmList) {
            VM vm = (VM) vm_helper;
            List<VmNetworkInterface> interfaces = getVmNetworkInterfaceDao().getAllForVm(vm.getId());
            if (networkUsedByAnInterface(interfaces)) {
                addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_IN_USE_BY_VM);
                return false;
            }
        }
    }
    if (getParameters().getNetwork().getName().equals(NetworkUtils.getEngineNetwork())) {
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.NETWORK_DEFAULT_UPDATE_NAME_INVALID.toString());
        getReturnValue().getCanDoActionMessages().add(String.format("$NetworkName %1$s", Config.<String>GetValue(ConfigValues.ManagementNetwork)));
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    DetachNetworkValidator validator = new DetachNetworkValidator(getParameters().getNetwork(), getParameters().getNetworkCluster());
    return validate(validator.notManagementNetwork()) && validate(validator.clusterNetworkNotUsedByVms()) && validate(validator.clusterNetworkNotUsedByTemplates());
}
#end_block

#method_before
public ValidationResult networkNameNotUsed() {
    for (Network otherNetwork : getNetworks()) {
        if (otherNetwork.getName().equalsIgnoreCase(network.getName()) && !otherNetwork.getId().equals(network.getId())) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE);
        }
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult networkNameNotUsed() {
    for (Network otherNetwork : getNetworks()) {
        if (otherNetwork.getName().equals(network.getName()) && !otherNetwork.getId().equals(network.getId())) {
            return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE);
        }
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
public ValidationResult notManagementNetwork() {
    String managementNetwork = Config.<String>GetValue(ConfigValues.ManagementNetwork);
    return managementNetwork.equalsIgnoreCase(network.getName()) ? new ValidationResult(VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK) : ValidationResult.VALID;
}
#method_after
public ValidationResult notManagementNetwork() {
    return NetworkUtils.isManagementNetwork(network) ? new ValidationResult(VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, String.format("$NetworkName %s", network.getName())) : ValidationResult.VALID;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    getNetworkDAO().update(getNetwork());
    for (NetworkCluster clusterAttachment : getClusterAttachments()) {
        NetworkClusterHelper.setStatus(clusterAttachment.getClusterId(), getNetwork());
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    getNetworkDAO().update(getNetwork());
    for (NetworkCluster clusterAttachment : getNetworkClusterDAO().getAllForNetwork(getNetwork().getId())) {
        NetworkClusterHelper.setStatus(clusterAttachment.getClusterId(), getNetwork());
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    NetworkValidator validatorNew = new NetworkValidator(getNetwork());
    NetworkValidator validatorOld = new NetworkValidator(getOldNetwork());
    return validate(validatorNew.dataCenterExists()) && validate(validatorNew.vmNetworkSetCorrectly()) && validate(validatorNew.stpForVmNetworkOnly()) && validate(validatorNew.mtuValid()) && validate(validatorNew.networkPrefixValid()) && validate(validatorNew.vlanIdNotUsed()) && validate(validatorOld.networkExists()) && validate(validatorOld.notManagementNetwork()) && validate(validatorNew.networkNameNotUsed()) && validate(validatorOld.networkNotUsedByVms()) && validate(validatorOld.networkNotUsedByTemplates()) && validate(validatorOld.networkNotUsedByHosts());
}
#method_after
@Override
protected boolean canDoAction() {
    NetworkValidator validatorNew = new NetworkValidator(getNetwork());
    UpdateNetworkValidator validatorOld = new UpdateNetworkValidator(getOldNetwork());
    return validate(validatorNew.dataCenterExists()) && validate(validatorNew.vmNetworkSetCorrectly()) && validate(validatorNew.stpForVmNetworkOnly()) && validate(validatorNew.mtuValid()) && validate(validatorNew.networkPrefixValid()) && validate(validatorNew.vlanIdNotUsed()) && validate(validatorOld.networkIsSet()) && validate(validatorOld.notChangingManagementNetwork(getNetwork())) && validate(validatorNew.networkNameNotUsed()) && validate(validatorOld.networkNotUsedByVms()) && validate(validatorOld.networkNotUsedByTemplates()) && validate(validatorOld.networkNotUsedByHosts());
}
#end_block

#method_before
private Network getOldNetwork() {
    if (oldNetwork == null) {
        oldNetwork = getNetworkById(getNetworks());
    }
    return oldNetwork;
}
#method_after
private Network getOldNetwork() {
    if (oldNetwork == null) {
        oldNetwork = getNetworkDAO().get(getNetwork().getId());
    }
    return oldNetwork;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    NetworkValidator validator = new NetworkValidator(getRemovedNetwork());
    return validate(validator.networkExists()) && validate(validator.notManagementNetwork()) && validate(validator.networkNotUsedByVms()) && validate(validator.networkNotUsedByTemplates()) && validate(validator.networkNotUsedByHosts());
}
#method_after
@Override
protected boolean canDoAction() {
    NetworkValidator validator = new NetworkValidator(getNetworkDAO().get(getNetwork().getId()));
    return validate(validator.networkIsSet()) && validate(validator.notManagementNetwork()) && validate(validator.networkNotUsedByVms()) && validate(validator.networkNotUsedByTemplates());
}
#end_block

#method_before
@Before
public void setup() {
    // spy on attempts to access the database
    validator = spy(new NetworkValidator(network));
    doReturn(dataCenter).when(validator).getDataCenter();
    doReturn(networks).when(validator).getNetworks();
    // mock version checking
    Version version = mock(Version.class);
    when(version.getValue()).thenReturn(null);
    when(dataCenter.getcompatibility_version()).thenReturn(version);
}
#method_after
@Before
public void setup() {
    // spy on attempts to access the database
    validator = spy(new NetworkValidator(network));
    doReturn(dbFacade).when(validator).getDbFacade();
    // mock some commonly used DAOs
    when(dbFacade.getStoragePoolDao()).thenReturn(dataCenterDao);
    when(dbFacade.getNetworkDao()).thenReturn(networkDao);
    // mock their getters
    when(dataCenterDao.get(any(Guid.class))).thenReturn(dataCenter);
    when(networkDao.getAllForDataCenter(any(Guid.class))).thenReturn(networks);
    // mock version checking
    Version version = mock(Version.class);
    when(dataCenter.getcompatibility_version()).thenReturn(version);
}
#end_block

#method_before
@Test
public void networkNull() throws Exception {
    // replace default validator with one corresponding to null network
    validator = spy(new NetworkValidator(null));
    assertEquals(new ValidationResult(VdcBllMessages.NETWORK_NOT_EXISTS), validator.networkExists());
}
#method_after
@Test
public void networkNull() throws Exception {
    validator = new NetworkValidator(null);
    assertEquals(new ValidationResult(VdcBllMessages.NETWORK_NOT_EXISTS), validator.networkIsSet());
}
#end_block

#method_before
@Test
public void dataCenterDoesntExist() throws Exception {
    // replace default mock data center with null data center
    doReturn(null).when(validator).getDataCenter();
    assertEquals(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST).getMessage(), validator.dataCenterExists().getMessage());
}
#method_after
@Test
public void dataCenterDoesntExist() throws Exception {
    when(dataCenterDao.get(any(Guid.class))).thenReturn(null);
    assertEquals(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST), validator.dataCenterExists());
}
#end_block

#method_before
@Test
public void dataCenterExists() throws Exception {
    assertEquals(ValidationResult.VALID.getMessage(), validator.dataCenterExists().getMessage());
}
#method_after
@Test
public void dataCenterExists() throws Exception {
    assertEquals(ValidationResult.VALID, validator.dataCenterExists());
}
#end_block

#method_before
private void vmNetworkSetupTest(ValidationResult expected, boolean isVmNetwork, boolean isFeatureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.NonVmNetworkSupported, null, isFeatureSupported);
    when(network.isVmNetwork()).thenReturn(isVmNetwork);
    assertEquals(expected.getMessage(), validator.vmNetworkSetCorrectly().getMessage());
}
#method_after
private void vmNetworkSetupTest(ValidationResult expected, boolean vmNetwork, boolean featureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.NonVmNetworkSupported, dataCenter.getcompatibility_version(), featureSupported);
    when(network.isVmNetwork()).thenReturn(vmNetwork);
    assertEquals(expected, validator.vmNetworkSetCorrectly());
}
#end_block

#method_before
private void stpTest(ValidationResult expected, boolean isVmNetwork, boolean isStp) {
    when(network.isVmNetwork()).thenReturn(isVmNetwork);
    when(network.getStp()).thenReturn(isStp);
    assertEquals(expected.getMessage(), validator.stpForVmNetworkOnly().getMessage());
}
#method_after
private void stpTest(ValidationResult expected, boolean vmNetwork, boolean stp) {
    when(network.isVmNetwork()).thenReturn(vmNetwork);
    when(network.getStp()).thenReturn(stp);
    assertEquals(expected, validator.stpForVmNetworkOnly());
}
#end_block

#method_before
private void mtuValidTest(ValidationResult expected, int mtu, boolean isFeatureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.MTUOverrideSupported, null, isFeatureSupported);
    when(network.getMtu()).thenReturn(mtu);
    assertEquals(expected.getMessage(), validator.mtuValid().getMessage());
}
#method_after
private void mtuValidTest(ValidationResult expected, int mtu, boolean featureSupported) {
    mockConfigRule.mockConfigValue(ConfigValues.MTUOverrideSupported, dataCenter.getcompatibility_version(), featureSupported);
    when(network.getMtu()).thenReturn(mtu);
    assertEquals(expected, validator.mtuValid());
}
#end_block

#method_before
private void networkPrefixValidTest(ValidationResult expected, String networkName) {
    when(network.getName()).thenReturn(networkName);
    assertEquals(expected.getMessage(), validator.networkPrefixValid().getMessage());
}
#method_after
private void networkPrefixValidTest(ValidationResult expected, String networkName) {
    when(network.getName()).thenReturn(networkName);
    assertEquals(expected, validator.networkPrefixValid());
}
#end_block

#method_before
private void vlanIdAvailableTest(ValidationResult expected, List<Network> networks) {
    this.networks.addAll(networks);
    when(network.getVlanId()).thenReturn(DEFAULT_VLAN_ID);
    when(network.getId()).thenReturn(new Guid(DEFAULT_GUID));
    assertEquals(expected.getMessage(), validator.vlanIdNotUsed().getMessage());
}
#method_after
private void vlanIdAvailableTest(ValidationResult expected, List<Network> networks) {
    this.networks.addAll(networks);
    when(network.getVlanId()).thenReturn(DEFAULT_VLAN_ID);
    when(network.getId()).thenReturn(DEFAULT_GUID);
    assertEquals(expected.getMessage(), validator.vlanIdNotUsed().getMessage());
}
#end_block

#method_before
@Test
public void vlanIdNoNetworks() throws Exception {
    vlanIdAvailableTest(ValidationResult.VALID, new ArrayList<Network>());
}
#method_after
@Test
public void vlanIdNoNetworks() throws Exception {
    vlanIdAvailableTest(ValidationResult.VALID, Collections.<Network>emptyList());
}
#end_block

#method_before
@Test
public void vlanIdAvailable() throws Exception {
    Network otherNetwork = new Network();
    otherNetwork.setVlanId(OTHER_VLAN_ID);
    List<Network> networks = new ArrayList<Network>();
    networks.add(otherNetwork);
    vlanIdAvailableTest(ValidationResult.VALID, networks);
}
#method_after
@Test
public void vlanIdAvailable() throws Exception {
    vlanIdAvailableTest(ValidationResult.VALID, getSingletonVlanNetworkList(OTHER_VLAN_ID, OTHER_GUID));
}
#end_block

#method_before
@Test
public void vlanIdTakenByDifferentNetwork() throws Exception {
    Network otherNetwork = new Network();
    otherNetwork.setVlanId(DEFAULT_VLAN_ID);
    otherNetwork.setId(new Guid(OTHER_GUID));
    List<Network> networks = new ArrayList<Network>();
    networks.add(otherNetwork);
    vlanIdAvailableTest(new ValidationResult(VdcBllMessages.NETWORK_VLAN_IN_USE), networks);
}
#method_after
@Test
public void vlanIdTakenByDifferentNetwork() throws Exception {
    vlanIdAvailableTest(new ValidationResult(VdcBllMessages.NETWORK_VLAN_IN_USE), getSingletonVlanNetworkList(DEFAULT_VLAN_ID, OTHER_GUID));
}
#end_block

#method_before
@Test
public void vlanIdTakenBySameNetwork() throws Exception {
    Network otherNetwork = new Network();
    otherNetwork.setVlanId(DEFAULT_VLAN_ID);
    otherNetwork.setId(new Guid(DEFAULT_GUID));
    List<Network> networks = new ArrayList<Network>();
    networks.add(otherNetwork);
    vlanIdAvailableTest(ValidationResult.VALID, networks);
}
#method_after
@Test
public void vlanIdTakenBySameNetwork() throws Exception {
    vlanIdAvailableTest(ValidationResult.VALID, getSingletonVlanNetworkList(DEFAULT_VLAN_ID, DEFAULT_GUID));
}
#end_block

#method_before
private void networkNameAvailableTest(ValidationResult expected, List<Network> networks) {
    this.networks.addAll(networks);
    when(network.getName()).thenReturn(DEFAULT_NETWORK_NAME);
    when(network.getId()).thenReturn(new Guid(DEFAULT_GUID));
    assertEquals(expected.getMessage(), validator.networkNameNotUsed().getMessage());
}
#method_after
private void networkNameAvailableTest(ValidationResult expected, List<Network> networks) {
    this.networks.addAll(networks);
    when(network.getName()).thenReturn(DEFAULT_NETWORK_NAME);
    when(network.getId()).thenReturn(DEFAULT_GUID);
    assertEquals(expected, validator.networkNameNotUsed());
}
#end_block

#method_before
@Test
public void networkNameNoNetworks() throws Exception {
    networkNameAvailableTest(ValidationResult.VALID, new ArrayList<Network>());
}
#method_after
@Test
public void networkNameNoNetworks() throws Exception {
    networkNameAvailableTest(ValidationResult.VALID, Collections.<Network>emptyList());
}
#end_block

#method_before
@Test
public void networkNameAvailable() throws Exception {
    Network otherNetwork = new Network();
    otherNetwork.setName(OTHER_NETWORK_NAME);
    List<Network> networks = new ArrayList<Network>();
    networks.add(otherNetwork);
    networkNameAvailableTest(ValidationResult.VALID, networks);
}
#method_after
@Test
public void networkNameAvailable() throws Exception {
    networkNameAvailableTest(ValidationResult.VALID, getSingletonNamedNetworkList(OTHER_NETWORK_NAME, OTHER_GUID));
}
#end_block

#method_before
@Test
public void networkNameTakenByDifferentNetwork() throws Exception {
    Network otherNetwork = new Network();
    otherNetwork.setName(DEFAULT_NETWORK_NAME);
    otherNetwork.setId(new Guid(OTHER_GUID));
    List<Network> networks = new ArrayList<Network>();
    networks.add(otherNetwork);
    networkNameAvailableTest(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE), networks);
}
#method_after
@Test
public void networkNameTakenByDifferentNetwork() throws Exception {
    networkNameAvailableTest(new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NAME_IN_USE), getSingletonNamedNetworkList(DEFAULT_NETWORK_NAME, OTHER_GUID));
}
#end_block

#method_before
@Test
public void networkNameTakenBySameNetwork() throws Exception {
    Network otherNetwork = new Network();
    otherNetwork.setName(DEFAULT_NETWORK_NAME);
    otherNetwork.setId(new Guid(DEFAULT_GUID));
    List<Network> networks = new ArrayList<Network>();
    networks.add(otherNetwork);
    networkNameAvailableTest(ValidationResult.VALID, networks);
}
#method_after
@Test
public void networkNameTakenBySameNetwork() throws Exception {
    networkNameAvailableTest(ValidationResult.VALID, getSingletonNamedNetworkList(DEFAULT_NETWORK_NAME, DEFAULT_GUID));
}
#end_block

#method_before
private void cleanUpCompensationData() {
    getBusinessEntitySnapshotDAO().removeAllForCommandId(commandId);
}
#method_after
private void cleanUpCompensationData() {
    if (!(getCompensationContext() instanceof NoOpCompensationContext)) {
        getBusinessEntitySnapshotDAO().removeAllForCommandId(commandId);
    }
}
#end_block

#method_before
private List<QuotaConsumptionParameter> getQuotaConsumptionParameters() {
    // The enum markings prevent Quota dependencies unintentional inheritance.
    if (consumptionParameters == null) {
        switch(getActionType().getQuotaDependency()) {
            case NONE:
                return null;
            case STORAGE:
                consumptionParameters = getThisQuotaStorageDependent().getQuotaStorageConsumptionParameters();
                break;
            case VDS_GROUP:
                consumptionParameters = getThisQuotaVdsDependent().getQuotaVdsConsumptionParameters();
                break;
            default:
                consumptionParameters = getThisQuotaStorageDependent().getQuotaStorageConsumptionParameters();
                consumptionParameters.addAll(getThisQuotaVdsDependent().getQuotaVdsConsumptionParameters());
                break;
        }
    }
    return consumptionParameters;
}
#method_after
protected List<QuotaConsumptionParameter> getQuotaConsumptionParameters() {
    // The enum markings prevent Quota dependencies unintentional inheritance.
    if (consumptionParameters == null) {
        switch(getActionType().getQuotaDependency()) {
            case NONE:
                return null;
            case STORAGE:
                consumptionParameters = getThisQuotaStorageDependent().getQuotaStorageConsumptionParameters();
                break;
            case VDS_GROUP:
                consumptionParameters = getThisQuotaVdsDependent().getQuotaVdsConsumptionParameters();
                break;
            default:
                consumptionParameters = getThisQuotaStorageDependent().getQuotaStorageConsumptionParameters();
                consumptionParameters.addAll(getThisQuotaVdsDependent().getQuotaVdsConsumptionParameters());
                break;
        }
    }
    return consumptionParameters;
}
#end_block

#method_before
public void addQuotaPermissionSubject(List<PermissionSubject> quotaPermissionList) {
    if (!isInternalExecution() && getStoragePool() != null && getStoragePool().getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED && getStoragePool().getQuotaEnforcementType() != QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT) {
        List<QuotaConsumptionParameter> consumptionParameters = getQuotaConsumptionParameters();
        if (consumptionParameters != null) {
            for (QuotaConsumptionParameter parameter : getQuotaConsumptionParameters()) {
                if (parameter.getQuotaGuid() != null && parameter.getQuotaGuid() != Guid.Empty && parameter.getParameterType() != QuotaConsumptionParameter.ParameterType.SANITY) {
                    quotaPermissionList.add(new PermissionSubject(parameter.getQuotaGuid(), VdcObjectType.Quota, ActionGroup.CONSUME_QUOTA));
                }
            }
        }
    }
}
#method_after
public void addQuotaPermissionSubject(List<PermissionSubject> quotaPermissionList) {
    // if quota enforcement is not in HARD_ENFORCEMENT the quota may be null.
    if (!isInternalExecution() && getStoragePool() != null && getStoragePool().getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED && getStoragePool().getQuotaEnforcementType() != QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT) {
        List<QuotaConsumptionParameter> consumptionParameters = getQuotaConsumptionParameters();
        if (consumptionParameters != null) {
            for (QuotaConsumptionParameter parameter : getQuotaConsumptionParameters()) {
                if (parameter.getQuotaGuid() != null && !Guid.Empty.equals(parameter.getQuotaGuid())) {
                    quotaPermissionList.add(new PermissionSubject(parameter.getQuotaGuid(), VdcObjectType.Quota, ActionGroup.CONSUME_QUOTA));
                }
            }
        }
    }
}
#end_block

#method_before
protected final void execute() {
    getReturnValue().setCanDoAction(true);
    getReturnValue().setIsSyncronious(true);
    ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null);
    try {
        handleTransactivity();
        TransactionSupport.executeInScope(scope, this);
    } catch (TransactionRolledbackLocalException e) {
        log.infoFormat("Transaction was aborted in {0}", this.getClass().getName());
        // Transaction was aborted - we must sure we compensation for all previous applicative stages of the command
        compensate();
    } finally {
        try {
            freeLock();
            if (getCommandShouldBeLogged()) {
                logCommand();
            }
            if (getSucceeded()) {
                // only after creating all tasks, we can start polling them (we
                // don't want
                // to start polling before all tasks were created, otherwise we
                // might change
                // the VM/VmTemplate status to 'Down'/'OK' too soon.
                startPollingAsyncTasks();
            }
        } finally {
            if (!hasTasks() && !ExecutionHandler.checkIfJobHasTasks(getExecutionContext())) {
                ExecutionHandler.endJob(getExecutionContext(), getSucceeded());
            }
        }
    }
}
#method_after
protected final void execute() {
    getReturnValue().setCanDoAction(true);
    getReturnValue().setIsSyncronious(true);
    ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null);
    try {
        handleTransactivity();
        TransactionSupport.executeInScope(scope, this);
    } catch (TransactionRolledbackLocalException e) {
        log.infoFormat("Transaction was aborted in {0}", this.getClass().getName());
        // Transaction was aborted - we must sure we compensation for all previous applicative stages of the command
        compensate();
    } finally {
        try {
            freeLock();
            if (getCommandShouldBeLogged()) {
                logRenamedEntity();
                logCommand();
            }
            if (getSucceeded()) {
                // only after creating all tasks, we can start polling them (we
                // don't want
                // to start polling before all tasks were created, otherwise we
                // might change
                // the VM/VmTemplate status to 'Down'/'OK' too soon.
                startPollingAsyncTasks();
            }
        } finally {
            if (!hasTasks() && !ExecutionHandler.checkIfJobHasTasks(getExecutionContext())) {
                ExecutionHandler.endJob(getExecutionContext(), getSucceeded());
            }
        }
    }
}
#end_block

#method_before
protected SPMAsyncTask concreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    VdcActionParametersBase parametersForTask = getParametersForTask(parentCommand, getParameters());
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new AsyncTasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), parametersForTask, asyncTaskCreationInfo.getStepId(), getCommandId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType()));
    p.setEntityId(getParameters().getEntityId());
    return AsyncTaskManager.getInstance().CreateTask(internalGetTaskType(), p);
}
#method_after
protected SPMAsyncTask concreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    VdcActionParametersBase parentParameters = getParametersForTask(parentCommand, getParameters());
    if (parentParameters.getParametersCurrentUser() == null && getCurrentUser() != null) {
        parentParameters.setParametersCurrentUser(getCurrentUser());
    }
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new AsyncTasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), parentParameters, getParameters(), asyncTaskCreationInfo.getStepId(), getCommandId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType()));
    p.setEntityId(getParameters().getEntityId());
    return AsyncTaskManager.getInstance().CreateTask(internalGetTaskType(), p);
}
#end_block

#method_before
protected boolean acquireLockInternal() {
    // if commandLock is null then we acquire new lock, otherwise probably we got lock from caller command.
    if (commandLock == null) {
        Map<String, String> exclusiveLocks = getExclusiveLocks();
        Map<String, String> sharedLocks = getSharedLocks();
        if (exclusiveLocks != null || sharedLocks != null) {
            EngineLock lock = new EngineLock(exclusiveLocks, sharedLocks);
            if (getLockManager().acquireLock(lock)) {
                log.infoFormat("Lock Acquired to object {0}", lock);
                commandLock = lock;
            } else {
                log.infoFormat("Failed to Acquire Lock to object {0}", lock);
                return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED);
            }
        }
    }
    return true;
}
#method_after
protected boolean acquireLockInternal() {
    // if commandLock is null then we acquire new lock, otherwise probably we got lock from caller command.
    if (commandLock == null) {
        Map<String, Pair<String, String>> exclusiveLocks = getExclusiveLocks();
        Map<String, Pair<String, String>> sharedLocks = getSharedLocks();
        if (exclusiveLocks != null || sharedLocks != null) {
            EngineLock lock = new EngineLock(exclusiveLocks, sharedLocks);
            Pair<Boolean, Set<String>> lockAcquireResult = getLockManager().acquireLock(lock);
            if (lockAcquireResult.getFirst()) {
                log.infoFormat("Lock Acquired to object {0}", lock);
                commandLock = lock;
            } else {
                log.infoFormat("Failed to Acquire Lock to object {0}", lock);
                getReturnValue().getCanDoActionMessages().addAll(lockAcquireResult.getSecond());
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
private void acquireLockAndWait() {
    // if commandLock is null then we acquire new lock, otherwise probably we got lock from caller command.
    if (commandLock == null) {
        Map<String, String> exclusiveLocks = getExclusiveLocks();
        if (exclusiveLocks != null) {
            EngineLock lock = new EngineLock(exclusiveLocks, null);
            getLockManager().acquireLockWait(lock);
            commandLock = lock;
        }
    }
}
#method_after
private void acquireLockAndWait() {
    // if commandLock is null then we acquire new lock, otherwise probably we got lock from caller command.
    if (commandLock == null) {
        Map<String, Pair<String, String>> exclusiveLocks = getExclusiveLocks();
        if (exclusiveLocks != null) {
            EngineLock lock = new EngineLock(exclusiveLocks, null);
            getLockManager().acquireLockWait(lock);
            commandLock = lock;
        }
    }
}
#end_block

#method_before
protected Map<String, String> getExclusiveLocks() {
    return null;
}
#method_after
protected Map<String, Pair<String, String>> getExclusiveLocks() {
    return null;
}
#end_block

#method_before
protected Map<String, String> getSharedLocks() {
    return null;
}
#method_after
protected Map<String, Pair<String, String>> getSharedLocks() {
    return null;
}
#end_block

#method_before
private void verifyResult(String str1, String str2, int expectedResult) {
    assertEquals(Integer.signum(expectedResult), Integer.signum(comparator.compare(str1, str2)));
    assertEquals(-Integer.signum(expectedResult), Integer.signum(comparator.compare(str2, str1)));
}
#method_after
private void verifyResult(String left, String right, int expectedResult) {
    assertEquals(String.format("Expected %1$s to be %3$s %2$s, but it wasn't.", left, right, expectedResult == -1 ? "less than" : (expectedResult == 1 ? "greater than" : "equal to")), Integer.signum(expectedResult), Integer.signum(comparator.compare(left, right)));
}
#end_block

#method_before
public static int comp(String str1, String str2) {
    if (str1 == null) {
        return (str2 == null) ? 0 : -1;
    } else if (str2 == null) {
        return 1;
    }
    boolean isDigitTurn = false;
    int begSeq1 = 0, begSeq2 = 0, endSeq1, endSeq2;
    while ((endSeq1 = findEndOfSequence(str1, begSeq1, isDigitTurn)) != begSeq1) {
        if ((endSeq2 = findEndOfSequence(str2, begSeq2, isDigitTurn)) == begSeq2) {
            // str1 and str2 have the same prefix but str1 has an extra sequence => str1 > str2
            return 1;
        }
        String seq1 = str1.substring(begSeq1, endSeq1);
        String seq2 = str2.substring(begSeq2, endSeq2);
        int compRes = compareSequence(seq1, seq2, isDigitTurn);
        if (compRes != 0) {
            // found a difference
            return compRes;
        }
        isDigitTurn = !isDigitTurn;
        begSeq1 = endSeq1;
        begSeq2 = endSeq2;
    }
    if (begSeq2 != str2.length()) {
        // str1 and str2 have the same prefix but str2 has an extra sequence => str1 < str2
        return -1;
    }
    // we arrive here only if the strings were equal all along
    return 0;
}
#method_after
public static int comp(String str1, String str2) {
    if (str1 == null) {
        return (str2 == null) ? 0 : -1;
    } else if (str2 == null) {
        return 1;
    }
    boolean digitTurn = false;
    int begSeq1 = 0;
    int begSeq2 = 0;
    while (begSeq1 != str1.length()) {
        // str1 and str2 have the same prefix but str1 has an extra sequence => str1 > str2
        if (begSeq2 == str2.length()) {
            return 1;
        }
        int endSeq1 = findEndOfSequence(str1, begSeq1, digitTurn);
        int endSeq2 = findEndOfSequence(str2, begSeq2, digitTurn);
        String seq1 = str1.substring(begSeq1, endSeq1);
        String seq2 = str2.substring(begSeq2, endSeq2);
        int compRes = compareSequence(seq1, seq2, digitTurn);
        if (compRes != 0) {
            return compRes;
        }
        digitTurn = !digitTurn;
        begSeq1 = endSeq1;
        begSeq2 = endSeq2;
    }
    // str1 and str2 have the same prefix but str2 has an extra sequence => str1 < str2
    if (begSeq2 != str2.length()) {
        return -1;
    }
    return 0;
}
#end_block

#method_before
private static int compareSequence(String seq1, String seq2, boolean isDigitSequence) {
    return isDigitSequence ? compDigitSequence(seq1, seq2) : compNonDigitSequence(seq1, seq2);
}
#method_after
private static int compareSequence(String seq1, String seq2, boolean digitSequence) {
    return digitSequence ? compDigitSequence(seq1, seq2) : compNonDigitSequence(seq1, seq2);
}
#end_block

#method_before
private static int compDigitSequence(String seq1, String seq2) {
    int compRes = ((Integer) Integer.parseInt(seq1)).compareTo(Integer.parseInt(seq2));
    return compRes != 0 ? compRes : compNonDigitSequence(seq1, seq2);
}
#method_after
private static int compDigitSequence(String seq1, String seq2) {
    int compRes = ((Integer) Integer.parseInt(seq1)).compareTo(Integer.parseInt(seq2));
    return compRes == 0 ? compNonDigitSequence(seq1, seq2) : compRes;
}
#end_block

#method_before
private static int findEndOfSequence(String seq, int startIndex, boolean isDigitSequence) {
    return isDigitSequence ? findEndOfDigitSequence(seq, startIndex) : findEndOfNonDigitSequence(seq, startIndex);
}
#method_after
private static int findEndOfSequence(String seq, int startIndex, boolean digitSequence) {
    return digitSequence ? findEndOfDigitSequence(seq, startIndex) : findEndOfNonDigitSequence(seq, startIndex);
}
#end_block

#method_before
public ValidationResult isDomainExistAndActive() {
    if (storageDomain == null) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    }
    if (storageDomain.getstatus() == null || storageDomain.getstatus() != StorageDomainStatus.Active) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL);
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult isDomainExistAndActive() {
    if (storageDomain == null) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    }
    if (storageDomain.getStatus() == null || storageDomain.getStatus() != StorageDomainStatus.Active) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL);
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
public ValidationResult domainIsValidDestination() {
    if (storageDomain.getstorage_domain_type() == StorageDomainType.ISO || storageDomain.getstorage_domain_type() == StorageDomainType.ImportExport) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult domainIsValidDestination() {
    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO || storageDomain.getStorageDomainType() == StorageDomainType.ImportExport) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
private String storageName() {
    return String.format("$%1$s %2$s", "storageName", storageDomain.getstorage_name());
}
#method_after
private String storageName() {
    return String.format("$%1$s %2$s", "storageName", storageDomain.getStorageName());
}
#end_block

#method_before
public ValidationResult isDomainHasSpaceForRequest(final long requestedSize) {
    if (storageDomain.getavailable_disk_size() != null && storageDomain.getavailable_disk_size() - requestedSize < getLowDiskSpaceThreshold()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN, storageName());
    }
    return ValidationResult.VALID;
}
#method_after
public ValidationResult isDomainHasSpaceForRequest(final long requestedSize) {
    if (storageDomain.getAvailableDiskSize() != null && storageDomain.getAvailableDiskSize() - requestedSize < getLowDiskSpaceThreshold()) {
        return new ValidationResult(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN, storageName());
    }
    return ValidationResult.VALID;
}
#end_block

#method_before
public static Map<storage_domains, Integer> getSpaceRequirementsForStorageDomains(Map<DiskImage, storage_domains> imageToDomainMap) {
    Map<storage_domains, Integer> map = new HashMap<storage_domains, Integer>();
    if (!imageToDomainMap.isEmpty()) {
        for (Map.Entry<DiskImage, storage_domains> entry : imageToDomainMap.entrySet()) {
            storage_domains domain = entry.getValue();
            int size = (int) entry.getKey().getActualSize();
            if (map.containsKey(domain)) {
                map.put(domain, map.get(domain) + size);
            } else {
                map.put(domain, size);
            }
        }
    }
    return map;
}
#method_after
public static Map<StorageDomain, Integer> getSpaceRequirementsForStorageDomains(Collection<DiskImage> images, Map<Guid, StorageDomain> storageDomains, Map<Guid, DiskImage> imageToDestinationDomainMap) {
    Map<DiskImage, StorageDomain> spaceMap = new HashMap<DiskImage, StorageDomain>();
    for (DiskImage image : images) {
        Guid storageId = imageToDestinationDomainMap.get(image.getId()).getStorageIds().get(0);
        StorageDomain domain = storageDomains.get(storageId);
        if (domain == null) {
            domain = DbFacade.getInstance().getStorageDomainDao().get(storageId);
        }
        spaceMap.put(image, domain);
    }
    return StorageDomainValidator.getSpaceRequirementsForStorageDomains(spaceMap);
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (storageDomainModels != null) {
        Linq.Sort(storageDomainModels, new StorageDomainModelByNameComparer());
        ItemsChanging(value, items);
        items = storageDomainModels;
        ItemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
        storageDomainModels = null;
    } else {
        this.value = value;
        VmTemplate template = (VmTemplate) getEntity();
        AsyncDataProvider.GetTemplateDiskList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                TemplateStorageListModel templateStorageListModel = (TemplateStorageListModel) target;
                ArrayList<DiskImage> diskImages = (ArrayList<DiskImage>) returnValue;
                ArrayList<storage_domains> storageDomains = Linq.<storage_domains>Cast(templateStorageListModel.value);
                ArrayList<StorageDomainModel> storageDomainModels = new ArrayList<StorageDomainModel>();
                for (storage_domains storageDomain : storageDomains) {
                    StorageDomainModel storageDomainModel = new StorageDomainModel();
                    storageDomainModel.setStorageDomain(storageDomain);
                    ArrayList<DiskImage> disks = new ArrayList<DiskImage>();
                    for (DiskImage diskImage : diskImages) {
                        if (diskImage.getStorageIds().contains(storageDomain.getId())) {
                            disks.add(diskImage);
                        }
                    }
                    Linq.Sort(disks, new DiskByAliasComparer());
                    storageDomainModel.setDisks(disks);
                    storageDomainModels.add(storageDomainModel);
                }
                templateStorageListModel.storageDomainModels = storageDomainModels;
                setItems(templateStorageListModel.value);
            }
        }), template.getId());
    }
}
#method_after
@Override
public void setItems(Iterable value) {
    if (storageDomainModels != null) {
        Linq.Sort(storageDomainModels, new StorageDomainModelByNameComparer());
        ItemsChanging(value, items);
        items = storageDomainModels;
        ItemsChanged();
        getItemsChangedEvent().raise(this, EventArgs.Empty);
        // $NON-NLS-1$
        OnPropertyChanged(new PropertyChangedEventArgs("Items"));
        storageDomainModels = null;
    } else {
        this.value = value;
        VmTemplate template = (VmTemplate) getEntity();
        AsyncDataProvider.GetTemplateDiskList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                TemplateStorageListModel templateStorageListModel = (TemplateStorageListModel) target;
                ArrayList<DiskImage> diskImages = (ArrayList<DiskImage>) returnValue;
                ArrayList<StorageDomain> storageDomains = Linq.<StorageDomain>Cast(templateStorageListModel.value);
                ArrayList<StorageDomainModel> storageDomainModels = new ArrayList<StorageDomainModel>();
                for (StorageDomain storageDomain : storageDomains) {
                    StorageDomainModel storageDomainModel = new StorageDomainModel();
                    storageDomainModel.setStorageDomain(storageDomain);
                    ArrayList<DiskImage> disks = new ArrayList<DiskImage>();
                    for (DiskImage diskImage : diskImages) {
                        if (diskImage.getStorageIds().contains(storageDomain.getId())) {
                            disks.add(diskImage);
                        }
                    }
                    Linq.Sort(disks, new DiskByAliasComparer());
                    storageDomainModel.setDisks(disks);
                    storageDomainModels.add(storageDomainModel);
                }
                templateStorageListModel.storageDomainModels = storageDomainModels;
                setItems(templateStorageListModel.value);
            }
        }), template.getId());
    }
}
#end_block

#method_before
private void Remove() {
    VmTemplate template = (VmTemplate) getEntity();
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeTemplateDisksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_template_disks");
    model.setMessage(ConstantsManager.getInstance().getConstants().templateDisksMsg());
    ArrayList<DiskModel> disks = getSelectedItems() != null ? Linq.<DiskModel>Cast(getSelectedItems()) : new ArrayList<DiskModel>();
    ArrayList<String> items = new ArrayList<String>();
    for (DiskModel diskModel : disks) {
        items.add(ConstantsManager.getInstance().getMessages().templateDiskDescription(diskModel.getDisk().getDiskAlias(), ((storage_domains) diskModel.getStorageDomain().getSelectedItem()).getstorage_name()));
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void Remove() {
    VmTemplate template = (VmTemplate) getEntity();
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeTemplateDisksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_template_disks");
    model.setMessage(ConstantsManager.getInstance().getConstants().templateDisksMsg());
    ArrayList<DiskModel> disks = getSelectedItems() != null ? Linq.<DiskModel>Cast(getSelectedItems()) : new ArrayList<DiskModel>();
    ArrayList<String> items = new ArrayList<String>();
    for (DiskModel diskModel : disks) {
        items.add(ConstantsManager.getInstance().getMessages().templateDiskDescription(diskModel.getDisk().getDiskAlias(), ((StorageDomain) diskModel.getStorageDomain().getSelectedItem()).getStorageName()));
    }
    model.setItems(items);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnRemove", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void OnRemove() {
    VmTemplate template = (VmTemplate) getEntity();
    ConfirmationModel model = (ConfirmationModel) getWindow();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    ArrayList<DiskModel> disks = (ArrayList<DiskModel>) getSelectedItems();
    for (DiskModel diskModel : disks) {
        RemoveDiskParameters params = new RemoveDiskParameters(diskModel.getDisk().getId(), ((storage_domains) diskModel.getStorageDomain().getSelectedItem()).getId());
        parameters.add(params);
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.RemoveDisk, parameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, this);
    Cancel();
}
#method_after
private void OnRemove() {
    VmTemplate template = (VmTemplate) getEntity();
    ConfirmationModel model = (ConfirmationModel) getWindow();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    ArrayList<DiskModel> disks = (ArrayList<DiskModel>) getSelectedItems();
    for (DiskModel diskModel : disks) {
        RemoveDiskParameters params = new RemoveDiskParameters(diskModel.getDisk().getId(), ((StorageDomain) diskModel.getStorageDomain().getSelectedItem()).getId());
        parameters.add(params);
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.RemoveDisk, parameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ConfirmationModel localModel = (ConfirmationModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, this);
    Cancel();
}
#end_block

#method_before
protected storage_domains getStorageDomain(int idx) {
    storage_domains dom = new storage_domains();
    dom.setId(GUIDS[idx]);
    dom.setstorage_name(NAMES[idx]);
    return dom;
}
#method_after
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain(int idx) {
    org.ovirt.engine.core.common.businessentities.StorageDomain dom = new org.ovirt.engine.core.common.businessentities.StorageDomain();
    dom.setId(GUIDS[idx]);
    dom.setStorageName(NAMES[idx]);
    return dom;
}
#end_block

#method_before
protected storage_domains getStorageDomainEntity(int index) {
    storage_domains entity = control.createMock(storage_domains.class);
    return setUpStorageDomainEntityExpectations(entity, index, StorageType.NFS);
}
#method_after
protected org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomainEntity(int index) {
    org.ovirt.engine.core.common.businessentities.StorageDomain entity = control.createMock(org.ovirt.engine.core.common.businessentities.StorageDomain.class);
    return setUpStorageDomainEntityExpectations(entity, index, StorageType.NFS);
}
#end_block

#method_before
static storage_domains setUpStorageDomainEntityExpectations(storage_domains entity, int index, StorageType storageType) {
    expect(entity.getId()).andReturn(GUIDS[3]).anyTimes();
    expect(entity.getstorage_name()).andReturn(NAMES[2]).anyTimes();
    expect(entity.getstatus()).andReturn(StorageDomainStatus.Active).anyTimes();
    expect(entity.getstorage_domain_type()).andReturn(StorageDomainType.Master).anyTimes();
    expect(entity.getstorage_type()).andReturn(storageType).anyTimes();
    expect(entity.getstorage()).andReturn(GUIDS[0].toString()).anyTimes();
    return entity;
}
#method_after
static org.ovirt.engine.core.common.businessentities.StorageDomain setUpStorageDomainEntityExpectations(org.ovirt.engine.core.common.businessentities.StorageDomain entity, int index, StorageType storageType) {
    expect(entity.getId()).andReturn(GUIDS[3]).anyTimes();
    expect(entity.getStorageName()).andReturn(NAMES[2]).anyTimes();
    expect(entity.getStatus()).andReturn(StorageDomainStatus.Active).anyTimes();
    expect(entity.getStorageDomainType()).andReturn(StorageDomainType.Master).anyTimes();
    expect(entity.getStorageType()).andReturn(storageType).anyTimes();
    expect(entity.getStorage()).andReturn(GUIDS[0].toString()).anyTimes();
    return entity;
}
#end_block

#method_before
protected void mapEntity(ResultSet rs, DiskImage entity) throws SQLException {
    entity.setCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("creation_date")));
    entity.setActualSizeFromDiskImage(rs.getLong("actual_size"));
    entity.setDescription(rs.getString("description"));
    entity.setImageId(Guid.createGuidFromString(rs.getString("image_guid")));
    entity.setItGuid(Guid.createGuidFromString(rs.getString("it_guid")));
    entity.setSize(rs.getLong("size"));
    entity.setParentId(Guid.createGuidFromString(rs.getString("ParentId")));
    entity.setImageStatus(ImageStatus.forValue(rs.getInt("imageStatus")));
    entity.setLastModified(DbFacadeUtils.fromDate(rs.getTimestamp("lastModified")));
    entity.setAppList(rs.getString("app_list"));
    entity.setStorageIds(GuidUtils.getGuidListFromString(rs.getString("storage_id")));
    entity.setStoragesNames(split(rs.getString("storage_name")));
    entity.setVmSnapshotId(NGuid.createGuidFromString(rs.getString("vm_snapshot_id")));
    entity.setVolumeType(VolumeType.forValue(rs.getInt("volume_type")));
    entity.setvolumeFormat(VolumeFormat.forValue(rs.getInt("volume_format")));
    entity.setId(Guid.createGuidFromString(rs.getString("image_group_id")));
    entity.setStoragePath(split(rs.getString("storage_path")));
    entity.setStoragePoolId(NGuid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setBoot(rs.getBoolean("boot"));
    entity.setReadRate(rs.getInt("read_rate"));
    entity.setWriteRate(rs.getInt("write_rate"));
    entity.setReadLatency(rs.getObject("read_latency_seconds") != null ? rs.getDouble("read_latency_seconds") : null);
    entity.setWriteLatency(rs.getObject("write_latency_seconds") != null ? rs.getDouble("write_latency_seconds") : null);
    entity.setFlushLatency(rs.getObject("flush_latency_seconds") != null ? rs.getDouble("flush_latency_seconds") : null);
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setActive((Boolean) rs.getObject("active"));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
}
#method_after
protected void mapEntity(ResultSet rs, DiskImage entity) throws SQLException {
    entity.setCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("creation_date")));
    entity.setActualSizeFromDiskImage(rs.getLong("actual_size"));
    entity.setDescription(rs.getString("description"));
    entity.setImageId(Guid.createGuidFromString(rs.getString("image_guid")));
    entity.setImageTemplateId(Guid.createGuidFromString(rs.getString("it_guid")));
    entity.setSize(rs.getLong("size"));
    entity.setParentId(Guid.createGuidFromString(rs.getString("ParentId")));
    entity.setImageStatus(ImageStatus.forValue(rs.getInt("imageStatus")));
    entity.setLastModified(DbFacadeUtils.fromDate(rs.getTimestamp("lastModified")));
    entity.setAppList(rs.getString("app_list"));
    entity.setStorageIds(GuidUtils.getGuidListFromString(rs.getString("storage_id")));
    entity.setStoragesNames(split(rs.getString("storage_name")));
    entity.setVmSnapshotId(NGuid.createGuidFromString(rs.getString("vm_snapshot_id")));
    entity.setVolumeType(VolumeType.forValue(rs.getInt("volume_type")));
    entity.setvolumeFormat(VolumeFormat.forValue(rs.getInt("volume_format")));
    entity.setId(Guid.createGuidFromString(rs.getString("image_group_id")));
    entity.setStoragePath(split(rs.getString("storage_path")));
    entity.setStoragePoolId(NGuid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setBoot(rs.getBoolean("boot"));
    entity.setReadRate(rs.getInt("read_rate"));
    entity.setWriteRate(rs.getInt("write_rate"));
    entity.setReadLatency(rs.getObject("read_latency_seconds") != null ? rs.getDouble("read_latency_seconds") : null);
    entity.setWriteLatency(rs.getObject("write_latency_seconds") != null ? rs.getDouble("write_latency_seconds") : null);
    entity.setFlushLatency(rs.getObject("flush_latency_seconds") != null ? rs.getDouble("flush_latency_seconds") : null);
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setActive(Boolean.TRUE.equals(rs.getObject("active")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
}
#end_block

#method_before
public void quota_storageSelectedItemChanged(final Guid defaultQuotaId) {
    storage_domains storageDomain = (storage_domains) getStorageDomain().getSelectedItem();
    if (storageDomain != null) {
        getStorageQuota(defaultQuotaId);
    }
    getStorageDomain().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            getStorageQuota(defaultQuotaId);
        }
    });
}
#method_after
public void quota_storageSelectedItemChanged(final Guid defaultQuotaId) {
    StorageDomain storageDomain = (StorageDomain) getStorageDomain().getSelectedItem();
    if (storageDomain != null) {
        getStorageQuota(defaultQuotaId);
    }
    getStorageDomain().getSelectedItemChangedEvent().addListener(new IEventListener() {

        @Override
        public void eventRaised(Event ev, Object sender, EventArgs args) {
            getStorageQuota(defaultQuotaId);
        }
    });
}
#end_block

#method_before
private void getStorageQuota(final Guid defaultQuota) {
    storage_domains storageDomain = (storage_domains) getStorageDomain().getSelectedItem();
    if (storageDomain != null) {
        Frontend.RunQuery(VdcQueryType.GetAllRelevantQuotasForStorage, new GetAllRelevantQuotasForStorageParameters(storageDomain.getId()), new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object innerModel, Object innerReturnValue) {
                ArrayList<Quota> quotaList = (ArrayList<Quota>) ((VdcQueryReturnValue) innerReturnValue).getReturnValue();
                if (quotaList != null && !quotaList.isEmpty()) {
                    getQuota().setItems(quotaList);
                }
                if (defaultQuota != null) {
                    boolean hasQuotaInList = false;
                    for (Quota quota : quotaList) {
                        if (quota.getId().equals(defaultQuota)) {
                            getQuota().setSelectedItem(quota);
                            hasQuotaInList = true;
                            break;
                        }
                    }
                    if (!hasQuotaInList) {
                        Quota quota = new Quota();
                        quota.setId(defaultQuota);
                        if (getDisk() instanceof DiskImageBase) {
                            quota.setQuotaName(((DiskImageBase) getDisk()).getQuotaName());
                        }
                        quotaList.add(quota);
                        getQuota().setItems(quotaList);
                        getQuota().setSelectedItem(quota);
                    }
                }
            }
        }));
    }
}
#method_after
private void getStorageQuota(final Guid defaultQuota) {
    StorageDomain storageDomain = (StorageDomain) getStorageDomain().getSelectedItem();
    if (storageDomain != null) {
        Frontend.RunQuery(VdcQueryType.GetAllRelevantQuotasForStorage, new GetAllRelevantQuotasForStorageParameters(storageDomain.getId()), new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object innerModel, Object innerReturnValue) {
                ArrayList<Quota> quotaList = (ArrayList<Quota>) ((VdcQueryReturnValue) innerReturnValue).getReturnValue();
                if (quotaList != null && !quotaList.isEmpty()) {
                    getQuota().setItems(quotaList);
                }
                if (defaultQuota != null) {
                    boolean hasQuotaInList = false;
                    for (Quota quota : quotaList) {
                        if (quota.getId().equals(defaultQuota)) {
                            getQuota().setSelectedItem(quota);
                            hasQuotaInList = true;
                            break;
                        }
                    }
                    if (!hasQuotaInList) {
                        Quota quota = new Quota();
                        quota.setId(defaultQuota);
                        if (getDisk() instanceof DiskImageBase) {
                            quota.setQuotaName(((DiskImageBase) getDisk()).getQuotaName());
                        }
                        quotaList.add(quota);
                        getQuota().setItems(quotaList);
                        getQuota().setSelectedItem(quota);
                    }
                }
            }
        }));
    }
}
#end_block

#method_before
private void updateStorageDomains(storage_pool datacenter) {
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DiskModel diskModel = (DiskModel) target;
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
            ArrayList<storage_domains> filteredStorageDomains = new ArrayList<storage_domains>();
            for (storage_domains a : storageDomains) {
                if (a.getstorage_domain_type() != StorageDomainType.ISO && a.getstorage_domain_type() != StorageDomainType.ImportExport && a.getstatus() == StorageDomainStatus.Active) {
                    filteredStorageDomains.add(a);
                }
            }
            Linq.Sort(filteredStorageDomains, new Linq.StorageDomainByNameComparer());
            storage_domains storage = Linq.FirstOrDefault(filteredStorageDomains);
            StorageType storageType = storage == null ? StorageType.UNKNOWN : storage.getstorage_type();
            boolean isInternal = (Boolean) getIsInternal().getEntity();
            diskModel.getStorageDomain().setItems(filteredStorageDomains);
            diskModel.getStorageDomain().setSelectedItem(storage);
            if (storage != null) {
                updateWipeAfterDelete(storage.getstorage_type(), diskModel.getWipeAfterDelete());
                // $NON-NLS-1$
                diskModel.setMessage("");
            } else if (isInternal) {
                diskModel.setMessage(ConstantsManager.getInstance().getConstants().noActiveStorageDomainsInDC());
            }
            AsyncDataProvider.GetDiskPresetList(new AsyncQuery(diskModel, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    DiskModel diskModel1 = (DiskModel) target;
                    ArrayList<DiskImageBase> presets = (ArrayList<DiskImageBase>) returnValue;
                    diskModel1.getPreset().setItems(presets);
                    diskModel1.getPreset().setSelectedItem(Linq.FirstOrDefault(presets));
                    diskModel1.StopProgress();
                }
            }), storageType);
        }
    }), datacenter.getId(), ActionGroup.CREATE_DISK);
}
#method_after
private void updateStorageDomains(storage_pool datacenter) {
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DiskModel diskModel = (DiskModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> filteredStorageDomains = new ArrayList<StorageDomain>();
            for (StorageDomain a : storageDomains) {
                if (a.getStorageDomainType() != StorageDomainType.ISO && a.getStorageDomainType() != StorageDomainType.ImportExport && a.getStatus() == StorageDomainStatus.Active) {
                    filteredStorageDomains.add(a);
                }
            }
            Linq.Sort(filteredStorageDomains, new Linq.StorageDomainByNameComparer());
            StorageDomain storage = Linq.FirstOrDefault(filteredStorageDomains);
            StorageType storageType = storage == null ? StorageType.UNKNOWN : storage.getStorageType();
            boolean isInternal = (Boolean) getIsInternal().getEntity();
            diskModel.getStorageDomain().setItems(filteredStorageDomains);
            diskModel.getStorageDomain().setSelectedItem(storage);
            if (storage != null) {
                updateWipeAfterDelete(storage.getStorageType(), diskModel.getWipeAfterDelete());
                // $NON-NLS-1$
                diskModel.setMessage("");
            } else if (isInternal) {
                diskModel.setMessage(ConstantsManager.getInstance().getConstants().noActiveStorageDomainsInDC());
            }
            AsyncDataProvider.GetDiskPresetList(new AsyncQuery(diskModel, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object target, Object returnValue) {
                    DiskModel diskModel1 = (DiskModel) target;
                    ArrayList<DiskImageBase> presets = (ArrayList<DiskImageBase>) returnValue;
                    diskModel1.getPreset().setItems(presets);
                    diskModel1.getPreset().setSelectedItem(Linq.FirstOrDefault(presets));
                    diskModel1.StopProgress();
                }
            }), storageType);
        }
    }), datacenter.getId(), ActionGroup.CREATE_DISK);
}
#end_block

#method_before
private void updateShareableDiskEnabled(storage_pool datacenter) {
    AsyncDataProvider.IsShareableDiskEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DiskModel diskModel = (DiskModel) target;
            boolean isShareableDiskEnabled = (Boolean) returnValue;
            diskModel.getIsShareable().setIsChangable(isShareableDiskEnabled);
            diskModel.getIsShareable().getChangeProhibitionReasons().add(ConstantsManager.getInstance().getConstants().shareableDiskNotSupported());
        }
    }), datacenter.getcompatibility_version().getValue());
}
#method_after
private void updateShareableDiskEnabled(storage_pool datacenter) {
    AsyncDataProvider.IsShareableDiskEnabled(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            DiskModel diskModel = (DiskModel) target;
            boolean isShareableDiskEnabled = (Boolean) returnValue;
            diskModel.getIsShareable().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().shareableDiskNotSupported());
            diskModel.getIsShareable().setIsChangable(isShareableDiskEnabled);
        }
    }), datacenter.getcompatibility_version().getValue());
}
#end_block

#method_before
private void updateShareable(VolumeType volumeType, StorageType storageType) {
    getIsShareable().setEntity(false);
    getIsShareable().setIsChangable(!(storageType.isBlockDomain() && volumeType == VolumeType.Sparse));
    getIsShareable().getChangeProhibitionReasons().add(ConstantsManager.getInstance().getConstants().shareableDiskNotSupportedByConfiguration());
}
#method_after
private void updateShareable(VolumeType volumeType, StorageType storageType) {
    getIsShareable().setEntity(false);
    getIsShareable().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().shareableDiskNotSupportedByConfiguration());
    getIsShareable().setIsChangable(!(storageType.isBlockDomain() && volumeType == VolumeType.Sparse));
}
#end_block

#method_before
private void VolumeType_SelectedItemChanged() {
    VolumeType volumeType = getVolumeType().getSelectedItem() == null ? VolumeType.Unassigned : (VolumeType) getVolumeType().getSelectedItem();
    StorageType storageType = getStorageDomain().getSelectedItem() == null ? StorageType.UNKNOWN : ((storage_domains) getStorageDomain().getSelectedItem()).getstorage_type();
    updateVolumeFormat(volumeType, storageType);
    updateShareable(volumeType, storageType);
}
#method_after
private void VolumeType_SelectedItemChanged() {
    VolumeType volumeType = getVolumeType().getSelectedItem() == null ? VolumeType.Unassigned : (VolumeType) getVolumeType().getSelectedItem();
    StorageType storageType = getStorageDomain().getSelectedItem() == null ? StorageType.UNKNOWN : ((StorageDomain) getStorageDomain().getSelectedItem()).getStorageType();
    updateVolumeFormat(volumeType, storageType);
    updateShareable(volumeType, storageType);
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.equals(EntityModel.EntityChangedEventDefinition) && sender == getWipeAfterDelete()) {
        WipeAfterDelete_EntityChanged(args);
    } else if (ev.equals(EntityModel.EntityChangedEventDefinition) && sender == getAttachDisk()) {
        AttachDisk_EntityChanged(args);
    } else if (ev.equals(ListModel.EntityChangedEventDefinition) && sender == getIsInternal()) {
        IsInternal_EntityChanged();
    } else if (ev.equals(ListModel.SelectedItemChangedEventDefinition) && sender == getPreset()) {
        Preset_SelectedItemChanged();
    } else if (ev.equals(ListModel.SelectedItemChangedEventDefinition) && sender == getVolumeType()) {
        VolumeType_SelectedItemChanged();
    } else if (ev.equals(ListModel.SelectedItemChangedEventDefinition) && sender == getDataCenter()) {
        Datacenter_SelectedItemChanged();
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getWipeAfterDelete()) {
        WipeAfterDelete_EntityChanged(args);
    } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition) && sender == getAttachDisk()) {
        AttachDisk_EntityChanged(args);
    } else if (ev.matchesDefinition(ListModel.EntityChangedEventDefinition) && sender == getIsInternal()) {
        IsInternal_EntityChanged();
    } else if (ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition) && sender == getPreset()) {
        Preset_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition) && sender == getVolumeType()) {
        VolumeType_SelectedItemChanged();
    } else if (ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition) && sender == getDataCenter()) {
        Datacenter_SelectedItemChanged();
    }
}
#end_block

#method_before
public boolean Validate() {
    if ((Boolean) getAttachDisk().getEntity()) {
        if (getInternalAttachableDisks().getSelectedItems() == null && getExternalAttachableDisks().getSelectedItems() == null) {
            getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().noDisksSelected());
            setIsValid(false);
            return false;
        }
        return true;
    }
    StorageType storageType = getStorageDomain().getSelectedItem() == null ? StorageType.UNKNOWN : ((storage_domains) getStorageDomain().getSelectedItem()).getstorage_type();
    IntegerValidation sizeValidation = new IntegerValidation();
    sizeValidation.setMinimum(1);
    if (storageType == StorageType.ISCSI || storageType == StorageType.FCP) {
        sizeValidation.setMaximum(maxDiskSize);
    }
    getSize().ValidateEntity(new IValidation[] { new NotEmptyValidation(), sizeValidation });
    getStorageDomain().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDescription().ValidateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    if (!(Boolean) getIsInVm().getEntity()) {
        getAlias().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new I18NNameValidation() });
    } else {
        getAlias().ValidateEntity(new IValidation[] { new I18NNameValidation() });
    }
    boolean isSanStorageModelValid = true;
    if (!(Boolean) isInternal.getEntity() && getSanStorageModel() != null && getIsNew()) {
        getSanStorageModel().Validate();
        isSanStorageModelValid = getSanStorageModel().getIsValid();
    }
    storage_pool dataCenter = (storage_pool) getDataCenter().getSelectedItem();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().ValidateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    return getSize().getIsValid() && getStorageDomain().getIsValid() && getAlias().getIsValid() && isSanStorageModelValid && getQuota().getIsValid();
}
#method_after
public boolean Validate() {
    if ((Boolean) getAttachDisk().getEntity()) {
        if (getInternalAttachableDisks().getSelectedItems() == null && getExternalAttachableDisks().getSelectedItems() == null) {
            getInvalidityReasons().add(ConstantsManager.getInstance().getConstants().noDisksSelected());
            setIsValid(false);
            return false;
        }
        return true;
    }
    StorageType storageType = getStorageDomain().getSelectedItem() == null ? StorageType.UNKNOWN : ((StorageDomain) getStorageDomain().getSelectedItem()).getStorageType();
    IntegerValidation sizeValidation = new IntegerValidation();
    sizeValidation.setMinimum(1);
    if (storageType == StorageType.ISCSI || storageType == StorageType.FCP) {
        sizeValidation.setMaximum(maxDiskSize);
    }
    getSize().ValidateEntity(new IValidation[] { new NotEmptyValidation(), sizeValidation });
    getStorageDomain().ValidateSelectedItem(new IValidation[] { new NotEmptyValidation() });
    getDescription().ValidateEntity(new IValidation[] { new SpecialAsciiI18NOrNoneValidation() });
    if (!(Boolean) getIsInVm().getEntity()) {
        getAlias().ValidateEntity(new IValidation[] { new NotEmptyValidation(), new I18NNameValidation() });
    } else {
        getAlias().ValidateEntity(new IValidation[] { new I18NNameValidation() });
    }
    boolean isSanStorageModelValid = true;
    if (!(Boolean) isInternal.getEntity() && getSanStorageModel() != null && getIsNew()) {
        getSanStorageModel().Validate();
        isSanStorageModelValid = getSanStorageModel().getIsValid();
    }
    storage_pool dataCenter = (storage_pool) getDataCenter().getSelectedItem();
    if (dataCenter != null && dataCenter.getQuotaEnforcementType() == QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) {
        getQuota().ValidateSelectedItem(new IValidation[] { new NotEmptyQuotaValidation() });
    }
    return getSize().getIsValid() && getStorageDomain().getIsValid() && getAlias().getIsValid() && isSanStorageModelValid && getQuota().getIsValid();
}
#end_block

#method_before
private static void mockStorageDomains(ImportVmTemplateCommand command) {
    final ImportVmTemplateParameters parameters = command.getParameters();
    final StorageDomainDAO dao = mock(StorageDomainDAO.class);
    final storage_domains srcDomain = new storage_domains();
    srcDomain.setstorage_domain_type(StorageDomainType.ImportExport);
    srcDomain.setstatus(StorageDomainStatus.Active);
    when(dao.getForStoragePool(parameters.getSourceDomainId(), parameters.getStoragePoolId())).thenReturn(srcDomain);
    final storage_domains destDomain = new storage_domains();
    destDomain.setstorage_domain_type(StorageDomainType.Data);
    destDomain.setused_disk_size(0);
    destDomain.setavailable_disk_size(1000);
    destDomain.setstatus(StorageDomainStatus.Active);
    when(dao.getForStoragePool(parameters.getDestDomainId(), parameters.getStoragePoolId())).thenReturn(destDomain);
    doReturn(dao).when(command).getStorageDomainDAO();
}
#method_after
private static void mockStorageDomains(ImportVmTemplateCommand command) {
    final ImportVmTemplateParameters parameters = command.getParameters();
    final StorageDomainDAO dao = mock(StorageDomainDAO.class);
    final StorageDomain srcDomain = new StorageDomain();
    srcDomain.setStorageDomainType(StorageDomainType.ImportExport);
    srcDomain.setStatus(StorageDomainStatus.Active);
    when(dao.getForStoragePool(parameters.getSourceDomainId(), parameters.getStoragePoolId())).thenReturn(srcDomain);
    final StorageDomain destDomain = new StorageDomain();
    destDomain.setStorageDomainType(StorageDomainType.Data);
    destDomain.setUsedDiskSize(0);
    destDomain.setAvailableDiskSize(1000);
    destDomain.setStatus(StorageDomainStatus.Active);
    when(dao.getForStoragePool(parameters.getDestDomainId(), parameters.getStoragePoolId())).thenReturn(destDomain);
    doReturn(dao).when(command).getStorageDomainDAO();
}
#end_block

#method_before
private static void mockStorageDomainStatic(ImportVmTemplateCommand command, StorageType storageType) {
    final StorageDomainStaticDAO dao = mock(StorageDomainStaticDAO.class);
    final StorageDomainStatic domain = new StorageDomainStatic();
    domain.setstorage_type(storageType);
    when(dao.get(any(Guid.class))).thenReturn(domain);
    doReturn(dao).when(command).getStorageDomainStaticDAO();
}
#method_after
private static void mockStorageDomainStatic(ImportVmTemplateCommand command, StorageType storageType) {
    final StorageDomainStaticDAO dao = mock(StorageDomainStaticDAO.class);
    final StorageDomainStatic domain = new StorageDomainStatic();
    domain.setStorageType(storageType);
    when(dao.get(any(Guid.class))).thenReturn(domain);
    doReturn(dao).when(command).getStorageDomainStaticDAO();
}
#end_block

#method_before
@Override
protected void PostInitStorageDomains() {
    ArrayList<DiskModel> disks = (ArrayList<DiskModel>) getModel().getDisks();
    if (disks == null) {
        return;
    }
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisks();
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
            ArrayList<storage_domains> activeStorageDomains = FilterStorageDomains(storageDomains);
            DisksAllocationModel disksAllocationModel = behavior.getModel().getDisksAllocationModel();
            disksAllocationModel.setActiveStorageDomains(activeStorageDomains);
            behavior.getModel().getStorageDomain().setItems(activeStorageDomains);
            for (DiskModel diskModel : disks) {
                // Setting Quota
                diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                diskModel.getQuota().setIsChangable(false);
                ArrayList<Guid> storageIds = ((DiskImage) diskModel.getDisk()).getStorageIds();
                // We only have one storage ID, as the object is a VM, not a template
                if (storageIds.size() == 0) {
                    continue;
                }
                Guid storageId = storageIds.get(0);
                storage_domains storageDomain = Linq.getStorageById(storageId, activeStorageDomains);
                List<storage_domains> diskStorageDomains = new ArrayList<storage_domains>();
                diskStorageDomains.add(storageDomain);
                diskModel.getStorageDomain().setItems(diskStorageDomains);
                diskModel.getStorageDomain().setIsChangable(false);
            }
        }
    }, getModel().getHash()), dataCenter.getId(), ActionGroup.CREATE_VM);
}
#method_after
@Override
protected void PostInitStorageDomains() {
    ArrayList<DiskModel> disks = (ArrayList<DiskModel>) getModel().getDisks();
    if (disks == null) {
        return;
    }
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisks();
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> activeStorageDomains = FilterStorageDomains(storageDomains);
            DisksAllocationModel disksAllocationModel = behavior.getModel().getDisksAllocationModel();
            disksAllocationModel.setActiveStorageDomains(activeStorageDomains);
            behavior.getModel().getStorageDomain().setItems(activeStorageDomains);
            for (DiskModel diskModel : disks) {
                // Setting Quota
                diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                diskModel.getQuota().setIsChangable(false);
                ArrayList<Guid> storageIds = ((DiskImage) diskModel.getDisk()).getStorageIds();
                // We only have one storage ID, as the object is a VM, not a template
                if (storageIds.size() == 0) {
                    continue;
                }
                Guid storageId = storageIds.get(0);
                StorageDomain storageDomain = Linq.getStorageById(storageId, activeStorageDomains);
                List<StorageDomain> diskStorageDomains = new ArrayList<StorageDomain>();
                diskStorageDomains.add(storageDomain);
                diskModel.getStorageDomain().setItems(diskStorageDomains);
                diskModel.getStorageDomain().setIsChangable(false);
            }
        }
    }, getModel().getHash()), dataCenter.getId(), ActionGroup.CREATE_VM);
}
#end_block

#method_before
private boolean hasFreeSpace(storage_domains storageDomain) {
    if (getDiskImageInfo().getVolumeType() == VolumeType.Preallocated) {
        return doesStorageDomainhaveSpaceForRequest(storageDomain);
    }
    return isStorageDomainWithinThresholds(storageDomain);
}
#method_after
private boolean hasFreeSpace(StorageDomain storageDomain) {
    if (getDiskImageInfo().getVolumeType() == VolumeType.Preallocated) {
        return doesStorageDomainhaveSpaceForRequest(storageDomain);
    }
    return isStorageDomainWithinThresholds(storageDomain);
}
#end_block

#method_before
protected boolean doesStorageDomainhaveSpaceForRequest(storage_domains storageDomain) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(getDiskImageInfo().getSizeInGigabytes()));
}
#method_after
protected boolean doesStorageDomainhaveSpaceForRequest(StorageDomain storageDomain) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(getDiskImageInfo().getSizeInGigabytes()));
}
#end_block

#method_before
protected boolean isStorageDomainWithinThresholds(storage_domains storageDomain) {
    return validate(new StorageDomainValidator(storageDomain).isDomainWithinThresholds());
}
#method_after
protected boolean isStorageDomainWithinThresholds(StorageDomain storageDomain) {
    return validate(new StorageDomainValidator(storageDomain).isDomainWithinThresholds());
}
#end_block

#method_before
private boolean isExceedMaxBlockDiskSize() {
    StorageType storageType = getStorageDomain().getstorage_type();
    boolean isBlockStorageDomain = storageType == StorageType.ISCSI || storageType == StorageType.FCP;
    boolean isRequestedLargerThanMaxSize = getRequestDiskSpace() > Config.<Integer>GetValue(ConfigValues.MaxBlockDiskSize);
    return isBlockStorageDomain && isRequestedLargerThanMaxSize;
}
#method_after
private boolean isExceedMaxBlockDiskSize() {
    StorageType storageType = getStorageDomain().getStorageType();
    boolean isBlockStorageDomain = storageType == StorageType.ISCSI || storageType == StorageType.FCP;
    boolean isRequestedLargerThanMaxSize = getRequestDiskSpace() > Config.<Integer>GetValue(ConfigValues.MaxBlockDiskSize);
    return isBlockStorageDomain && isRequestedLargerThanMaxSize;
}
#end_block

#method_before
private void createDiskBasedOnImage() {
    if (!getParameters().getDiskInfo().isWipeAfterDeleteSet()) {
        StorageType storageType = getStorageDomain().getstorage_type();
        getParameters().getDiskInfo().setWipeAfterDelete(WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(storageType));
    }
    // create from blank template, create new vm snapshot id
    AddImageFromScratchParameters parameters = new AddImageFromScratchParameters(Guid.Empty, getParameters().getVmId(), getDiskImageInfo());
    parameters.setQuotaId(getQuotaId());
    parameters.setDiskAlias(getDiskAlias());
    parameters.setStorageDomainId(getStorageDomainId().getValue());
    parameters.setParentCommand(VdcActionType.AddDisk);
    parameters.setEntityId(getParameters().getEntityId());
    parameters.setStoragePoolId(getStorageDomain().getstorage_pool_id().getValue());
    getParameters().getImagesParameters().add(parameters);
    parameters.setParentParameters(getParameters());
    if (getVm() != null) {
        setVmSnapshotIdForDisk(parameters);
        getCompensationContext().snapshotNewEntity(VmDeviceUtils.addManagedDevice(new VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceType.DISK, VmDeviceType.DISK, null, getVm().getStatus() == VMStatus.Down, false));
        getCompensationContext().stateChanged();
    }
    VdcReturnValueBase tmpRetValue = Backend.getInstance().runInternalAction(VdcActionType.AddImageFromScratch, parameters, ExecutionHandler.createDefaultContexForTasks(getExecutionContext(), getLock()));
    // Setting lock to null because the lock is released in the child command
    setLock(null);
    getReturnValue().getTaskIdList().addAll(tmpRetValue.getInternalTaskIdList());
    if (tmpRetValue.getActionReturnValue() != null) {
        DiskImage diskImage = (DiskImage) tmpRetValue.getActionReturnValue();
        addDiskPermissions(diskImage);
        getReturnValue().setActionReturnValue(diskImage.getId());
    }
    getReturnValue().setFault(tmpRetValue.getFault());
    setSucceeded(tmpRetValue.getSucceeded());
}
#method_after
private void createDiskBasedOnImage() {
    if (!getParameters().getDiskInfo().isWipeAfterDeleteSet()) {
        StorageType storageType = getStorageDomain().getStorageType();
        getParameters().getDiskInfo().setWipeAfterDelete(WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(storageType));
    }
    // create from blank template, create new vm snapshot id
    AddImageFromScratchParameters parameters = new AddImageFromScratchParameters(Guid.Empty, getParameters().getVmId(), getDiskImageInfo());
    parameters.setQuotaId(getQuotaId());
    parameters.setDiskAlias(getDiskAlias());
    parameters.setStorageDomainId(getStorageDomainId().getValue());
    parameters.setParentCommand(VdcActionType.AddDisk);
    parameters.setEntityId(getParameters().getEntityId());
    parameters.setStoragePoolId(getStorageDomain().getStoragePoolId().getValue());
    getParameters().getImagesParameters().add(parameters);
    parameters.setParentParameters(getParameters());
    if (getVm() != null) {
        setVmSnapshotIdForDisk(parameters);
        getCompensationContext().snapshotNewEntity(VmDeviceUtils.addManagedDevice(new VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceType.DISK, VmDeviceType.DISK, null, getVm().getStatus() == VMStatus.Down, false));
        getCompensationContext().stateChanged();
    }
    VdcReturnValueBase tmpRetValue = Backend.getInstance().runInternalAction(VdcActionType.AddImageFromScratch, parameters, ExecutionHandler.createDefaultContexForTasks(getExecutionContext(), getLock()));
    // Setting lock to null because the lock is released in the child command
    setLock(null);
    getReturnValue().getTaskIdList().addAll(tmpRetValue.getInternalTaskIdList());
    if (tmpRetValue.getActionReturnValue() != null) {
        DiskImage diskImage = (DiskImage) tmpRetValue.getActionReturnValue();
        addDiskPermissions(diskImage);
        getReturnValue().setActionReturnValue(diskImage.getId());
    }
    getReturnValue().setFault(tmpRetValue.getFault());
    setSucceeded(tmpRetValue.getSucceeded());
}
#end_block

#method_before
@Override
public StorageDomainDAO getStorageDomainDAO() {
    final storage_domains destination = new storage_domains();
    destination.setstorage_domain_type(StorageDomainType.Data);
    destination.setstatus(StorageDomainStatus.Active);
    final StorageDomainDAO d = mock(StorageDomainDAO.class);
    when(d.getForStoragePool(any(Guid.class), any(Guid.class))).thenReturn(destination);
    StorageDomainDynamic dy = new StorageDomainDynamic();
    dy.setavailable_disk_size(10);
    dy.setused_disk_size(0);
    destination.setStorageDynamicData(dy);
    return d;
}
#method_after
@Override
public StorageDomainDAO getStorageDomainDAO() {
    final StorageDomain destination = new StorageDomain();
    destination.setStorageDomainType(StorageDomainType.Data);
    destination.setStatus(StorageDomainStatus.Active);
    final StorageDomainDAO d = mock(StorageDomainDAO.class);
    when(d.getForStoragePool(any(Guid.class), any(Guid.class))).thenReturn(destination);
    StorageDomainDynamic dy = new StorageDomainDynamic();
    dy.setAvailableDiskSize(10);
    dy.setUsedDiskSize(0);
    destination.setStorageDynamicData(dy);
    return d;
}
#end_block

#method_before
@Override
protected storage_domains getSourceDomain() {
    storage_domains source = new storage_domains();
    source.setstorage_domain_type(StorageDomainType.ImportExport);
    source.setstatus(StorageDomainStatus.Active);
    return source;
}
#method_after
@Override
protected StorageDomain getSourceDomain() {
    StorageDomain source = new StorageDomain();
    source.setStorageDomainType(StorageDomainType.ImportExport);
    source.setStatus(StorageDomainStatus.Active);
    return source;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = validate(sourceDomainValidator.isDomainExistAndActive());
    }
    if (retVal && getSourceDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, DiskImageList> templates = (Map) qretVal.getReturnValue();
            DiskImageList images = new DiskImageList();
            for (VmTemplate t : templates.keySet()) {
                if (t.getId().equals(getVmTemplate().getId())) {
                    images = templates.get(t);
                    getVmTemplate().setInterfaces(t.getInterfaces());
                    break;
                }
            }
            ArrayList<DiskImage> list = new ArrayList<DiskImage>(Arrays.asList(images.getDiskImages()));
            getParameters().setImages(list);
            getVmTemplate().setImages(list);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            Map<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : list) {
                storage_domains storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getstorage_type(), image);
                retVal = ImagesHandler.CheckImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setStoragePoolId(getParameters().getStoragePoolId());
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getname()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getSize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(getVmTemplate().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = validate(sourceDomainValidator.isDomainExistAndActive());
    }
    if (retVal && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, DiskImageList> templates = (Map) qretVal.getReturnValue();
            DiskImageList images = new DiskImageList();
            for (VmTemplate t : templates.keySet()) {
                if (t.getId().equals(getVmTemplate().getId())) {
                    images = templates.get(t);
                    getVmTemplate().setInterfaces(t.getInterfaces());
                    break;
                }
            }
            ArrayList<DiskImage> list = new ArrayList<DiskImage>(Arrays.asList(images.getDiskImages()));
            getParameters().setImages(list);
            getVmTemplate().setImages(list);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            Map<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : list) {
                StorageDomain storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getStorageType(), image);
                retVal = ImagesHandler.CheckImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setStoragePoolId(getParameters().getStoragePoolId());
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getname()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getSize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
            if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
                return false;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(getVmTemplate().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    Guid vmTemplateId = getVmTemplateId();
    VmTemplate template = getVmTemplate();
    // check template exists
    if (!validate(templateExists())) {
        return false;
    }
    // check not blank template
    if (VmTemplateHandler.BlankVmTemplateId.equals(vmTemplateId)) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_BLANK_TEMPLATE);
        return false;
    }
    // check storage pool valid
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        return false;
    }
    // check if delete protected
    if (template.isDeleteProtected()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DELETE_PROTECTION_ENABLED);
        return false;
    }
    imageTemplates = ImagesHandler.filterImageDisks(DbFacade.getInstance().getDiskDao().getAllForVm(getVmTemplateId()), false, false);
    List<Guid> storageDomainsList = getParameters().getStorageDomainsList();
    Set<Guid> allDomainsList = getStorageDoaminsByDisks(imageTemplates, true);
    // if null or empty list sent, get all template domains for deletion
    if (storageDomainsList == null || storageDomainsList.isEmpty()) {
        // populate all the domains of the template
        getParameters().setStorageDomainsList(new ArrayList<Guid>(allDomainsList));
        getParameters().setRemoveTemplateFromDb(true);
    } else {
        // if some domains sent, check that the sent domains are part of all domains
        List<String> problematicDomains = new ArrayList<String>();
        for (Guid domainId : storageDomainsList) {
            if (!allDomainsList.contains(domainId)) {
                StorageDomainStatic domain = DbFacade.getInstance().getStorageDomainStaticDao().get(domainId);
                if (domain == null) {
                    problematicDomains.add(domainId.toString());
                } else {
                    problematicDomains.add(domain.getstorage_name());
                }
            }
        }
        if (!problematicDomains.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DOMAINS_LIST_MISMATCH);
            addCanDoActionMessage(String.format("$domainsList %1$s", StringUtils.join(problematicDomains, ",")));
            return false;
        }
        getParameters().setRemoveTemplateFromDb(allDomainsList.size() == storageDomainsList.size());
    }
    // check template images for selected domains
    ArrayList<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    for (Guid domainId : getParameters().getStorageDomainsList()) {
        if (!isVmTemplateImagesReady(getVmTemplate(), domainId, canDoActionMessages, getParameters().getCheckDisksExists(), true, false, true, storageToDisksMap.get(domainId))) {
            return false;
        }
    }
    // check no vms from this template on selected domains
    List<VM> vms = DbFacade.getInstance().getVmDao().getAllWithTemplate(vmTemplateId);
    List<String> problematicVmNames = new ArrayList<String>();
    for (VM vm : vms) {
        if (getParameters().isRemoveTemplateFromDb()) {
            problematicVmNames.add(vm.getVmName());
        } else {
            List<DiskImage> vmDIsks = ImagesHandler.filterImageDisks(DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId()), false, false);
            Set<Guid> domainsIds = getStorageDoaminsByDisks(vmDIsks, false);
            for (Guid domainId : domainsIds) {
                if (!getParameters().getStorageDomainsList().contains(domainId)) {
                    problematicVmNames.add(vm.getVmName());
                }
            }
        }
    }
    if (!problematicVmNames.isEmpty()) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
        addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    Guid vmTemplateId = getVmTemplateId();
    VmTemplate template = getVmTemplate();
    // check template exists
    if (!validate(templateExists())) {
        return false;
    }
    // check not blank template
    if (VmTemplateHandler.BlankVmTemplateId.equals(vmTemplateId)) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_BLANK_TEMPLATE);
        return false;
    }
    // check storage pool valid
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        return false;
    }
    // check if delete protected
    if (template.isDeleteProtected()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DELETE_PROTECTION_ENABLED);
        return false;
    }
    imageTemplates = ImagesHandler.filterImageDisks(DbFacade.getInstance().getDiskDao().getAllForVm(getVmTemplateId()), false, false);
    List<Guid> storageDomainsList = getParameters().getStorageDomainsList();
    Set<Guid> allDomainsList = getStorageDoaminsByDisks(imageTemplates, true);
    // if null or empty list sent, get all template domains for deletion
    if (storageDomainsList == null || storageDomainsList.isEmpty()) {
        // populate all the domains of the template
        getParameters().setStorageDomainsList(new ArrayList<Guid>(allDomainsList));
        getParameters().setRemoveTemplateFromDb(true);
    } else {
        // if some domains sent, check that the sent domains are part of all domains
        List<String> problematicDomains = new ArrayList<String>();
        for (Guid domainId : storageDomainsList) {
            if (!allDomainsList.contains(domainId)) {
                StorageDomainStatic domain = DbFacade.getInstance().getStorageDomainStaticDao().get(domainId);
                if (domain == null) {
                    problematicDomains.add(domainId.toString());
                } else {
                    problematicDomains.add(domain.getStorageName());
                }
            }
        }
        if (!problematicDomains.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DOMAINS_LIST_MISMATCH);
            addCanDoActionMessage(String.format("$domainsList %1$s", StringUtils.join(problematicDomains, ",")));
            return false;
        }
        getParameters().setRemoveTemplateFromDb(allDomainsList.size() == storageDomainsList.size());
    }
    // check template images for selected domains
    ArrayList<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    for (Guid domainId : getParameters().getStorageDomainsList()) {
        if (!isVmTemplateImagesReady(getVmTemplate(), domainId, canDoActionMessages, getParameters().getCheckDisksExists(), true, false, true, storageToDisksMap.get(domainId))) {
            return false;
        }
    }
    // check no vms from this template on selected domains
    List<VM> vms = DbFacade.getInstance().getVmDao().getAllWithTemplate(vmTemplateId);
    List<String> problematicVmNames = new ArrayList<String>();
    for (VM vm : vms) {
        if (getParameters().isRemoveTemplateFromDb()) {
            problematicVmNames.add(vm.getVmName());
        } else {
            List<DiskImage> vmDIsks = ImagesHandler.filterImageDisks(DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId()), false, false);
            Set<Guid> domainsIds = getStorageDoaminsByDisks(vmDIsks, false);
            for (Guid domainId : domainsIds) {
                if (!getParameters().getStorageDomainsList().contains(domainId)) {
                    problematicVmNames.add(vm.getVmName());
                }
            }
        }
    }
    if (!problematicVmNames.isEmpty()) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
        addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        return false;
    }
    return true;
}
#end_block

#method_before
private void removeImageFromDB(boolean isLockOnSnapshotsNeeded) {
    final DiskImage diskImage = getDiskImage();
    final List<Snapshot> updatedSnapshots;
    try {
        VM vm = getVmForNonShareableDiskImage(diskImage);
        // so no lock is required.
        if (isLockOnSnapshotsNeeded && vm != null) {
            lockVmSnapshotsWithWait(vm);
            updatedSnapshots = prepareSnapshotConfigWithoutImage(diskImage.getId());
        } else {
            updatedSnapshots = Collections.emptyList();
        }
        TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                getDiskImageDynamicDAO().remove(diskImage.getImageId());
                Guid imageTemplate = diskImage.getItGuid();
                Guid currentGuid = diskImage.getImageId();
                // the storage).
                while (!currentGuid.equals(imageTemplate) && !currentGuid.equals(Guid.Empty)) {
                    removeChildren(currentGuid);
                    DiskImage image = getDiskImageDao().getSnapshotById(currentGuid);
                    if (image != null) {
                        removeSnapshot(image);
                        currentGuid = image.getParentId();
                    } else {
                        currentGuid = Guid.Empty;
                        log.warnFormat("'image' (snapshot of image '{0}') is null, cannot remove it.", diskImage.getImageId());
                    }
                }
                getBaseDiskDao().remove(diskImage.getId());
                getVmDeviceDAO().remove(new VmDeviceId(diskImage.getId(), null));
                for (Snapshot s : updatedSnapshots) {
                    getSnapshotDao().update(s);
                }
                return null;
            }
        });
    } finally {
        if (snapshotsEngineLock != null) {
            getLockManager().releaseLock(snapshotsEngineLock);
        }
    }
}
#method_after
private void removeImageFromDB(boolean isLockOnSnapshotsNeeded) {
    final DiskImage diskImage = getDiskImage();
    final List<Snapshot> updatedSnapshots;
    try {
        VM vm = getVmForNonShareableDiskImage(diskImage);
        // so no lock is required.
        if (isLockOnSnapshotsNeeded && vm != null) {
            lockVmSnapshotsWithWait(vm);
            updatedSnapshots = prepareSnapshotConfigWithoutImage(diskImage.getId());
        } else {
            updatedSnapshots = Collections.emptyList();
        }
        TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Object>() {

            @Override
            public Object runInTransaction() {
                getDiskImageDynamicDAO().remove(diskImage.getImageId());
                Guid imageTemplate = diskImage.getImageTemplateId();
                Guid currentGuid = diskImage.getImageId();
                // the storage).
                while (!currentGuid.equals(imageTemplate) && !currentGuid.equals(Guid.Empty)) {
                    removeChildren(currentGuid);
                    DiskImage image = getDiskImageDao().getSnapshotById(currentGuid);
                    if (image != null) {
                        removeSnapshot(image);
                        currentGuid = image.getParentId();
                    } else {
                        currentGuid = Guid.Empty;
                        log.warnFormat("'image' (snapshot of image '{0}') is null, cannot remove it.", diskImage.getImageId());
                    }
                }
                getBaseDiskDao().remove(diskImage.getId());
                getVmDeviceDAO().remove(new VmDeviceId(diskImage.getId(), null));
                for (Snapshot s : updatedSnapshots) {
                    getSnapshotDao().update(s);
                }
                return null;
            }
        });
    } finally {
        if (snapshotsEngineLock != null) {
            getLockManager().releaseLock(snapshotsEngineLock);
        }
    }
}
#end_block

#method_before
private boolean validateShareableDisk() {
    if (DiskStorageType.LUN == oldDisk.getDiskStorageType()) {
        return true;
    }
    boolean isDiskUpdatedToShareable = newDisk.isShareable();
    boolean isOldDiskShareable = oldDisk.isShareable();
    // Check if VM is not during snapshot.
    if (getSnapshotDao().exists(getVmId(), SnapshotStatus.IN_PREVIEW)) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW);
        return false;
    }
    if (!isOldDiskShareable && isDiskUpdatedToShareable) {
        List<DiskImage> diskImageList = getDiskImageDao().getAllSnapshotsForImageGroup(oldDisk.getId());
        // disk and all the other images are the snapshots.
        if ((diskImageList.size() > 1) || !Guid.Empty.equals(((DiskImage) oldDisk).getItGuid())) {
            addCanDoActionMessage(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_FOR_DISK);
            return false;
        }
        if (!isVersionSupportedForShareable(oldDisk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
            return false;
        }
        DiskImage diskImage = (DiskImage) newDisk;
        if (!isVolumeFormatSupportedForShareable(diskImage.getVolumeFormat())) {
            addCanDoActionMessage(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT);
            return false;
        }
        // If user want to update the disk to be shareable then update the vm snapshot id to be null.
        ((DiskImage) oldDisk).setVmSnapshotId(null);
    } else if (isOldDiskShareable && !isDiskUpdatedToShareable) {
        if (getVmDAO().getVmsListForDisk(oldDisk.getId()).size() > 1) {
            addCanDoActionMessage(VdcBllMessages.DISK_IS_ALREADY_SHARED_BETWEEN_VMS);
            return false;
        }
        // If disk is not floating, then update its vm snapshot id to the active VM snapshot.
        ((DiskImage) oldDisk).setVmSnapshotId(DbFacade.getInstance().getSnapshotDao().getId(getVmId(), SnapshotType.ACTIVE).getValue());
    }
    return true;
}
#method_after
private boolean validateShareableDisk() {
    if (DiskStorageType.LUN == oldDisk.getDiskStorageType()) {
        return true;
    }
    boolean isDiskUpdatedToShareable = newDisk.isShareable();
    boolean isOldDiskShareable = oldDisk.isShareable();
    // Check if VM is not during snapshot.
    if (getSnapshotDao().exists(getVmId(), SnapshotStatus.IN_PREVIEW)) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW);
        return false;
    }
    if (!isOldDiskShareable && isDiskUpdatedToShareable) {
        List<DiskImage> diskImageList = getDiskImageDao().getAllSnapshotsForImageGroup(oldDisk.getId());
        // disk and all the other images are the snapshots.
        if ((diskImageList.size() > 1) || !Guid.Empty.equals(((DiskImage) oldDisk).getImageTemplateId())) {
            addCanDoActionMessage(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_FOR_DISK);
            return false;
        }
        if (!isVersionSupportedForShareable(oldDisk, getStoragePoolDAO().get(getVm().getStoragePoolId()).getcompatibility_version().getValue())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
            return false;
        }
        DiskImage diskImage = (DiskImage) newDisk;
        if (!isVolumeFormatSupportedForShareable(diskImage.getVolumeFormat())) {
            addCanDoActionMessage(VdcBllMessages.SHAREABLE_DISK_IS_NOT_SUPPORTED_BY_VOLUME_FORMAT);
            return false;
        }
        // If user want to update the disk to be shareable then update the vm snapshot id to be null.
        ((DiskImage) oldDisk).setVmSnapshotId(null);
    } else if (isOldDiskShareable && !isDiskUpdatedToShareable) {
        if (getVmDAO().getVmsListForDisk(oldDisk.getId()).size() > 1) {
            addCanDoActionMessage(VdcBllMessages.DISK_IS_ALREADY_SHARED_BETWEEN_VMS);
            return false;
        }
        // If disk is not floating, then update its vm snapshot id to the active VM snapshot.
        ((DiskImage) oldDisk).setVmSnapshotId(DbFacade.getInstance().getSnapshotDao().getId(getVmId(), SnapshotType.ACTIVE).getValue());
    }
    return true;
}
#end_block

#method_before
private void updateRemoveDisksCheckBox(EntityModel model, boolean deleteDisks, boolean isChangable, String changeProhibitionReason) {
    model.setEntity(deleteDisks);
    if (!isChangable && changeProhibitionReason != null) {
        model.getChangeProhibitionReasons().add(changeProhibitionReason);
    }
    model.setIsChangable(isChangable);
}
#method_after
private void updateRemoveDisksCheckBox(EntityModel model, boolean deleteDisks, boolean isChangable, String changeProhibitionReason) {
    model.setEntity(deleteDisks);
    if (!isChangable && changeProhibitionReason != null) {
        model.setChangeProhibitionReason(changeProhibitionReason);
    }
    model.setIsChangable(isChangable);
}
#end_block

#method_before
private void GetTemplatesNotPresentOnExportDomain() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            ArrayList<storage_pool> storagePools = (ArrayList<storage_pool>) returnValue;
            storage_pool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
            vmListModel.PostGetTemplatesNotPresentOnExportDomain(storagePool);
        }
    }), storageDomainId);
}
#method_after
private void GetTemplatesNotPresentOnExportDomain() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmListModel vmListModel = (VmListModel) target;
            ArrayList<storage_pool> storagePools = (ArrayList<storage_pool>) returnValue;
            storage_pool storagePool = storagePools.size() > 0 ? storagePools.get(0) : null;
            vmListModel.PostGetTemplatesNotPresentOnExportDomain(storagePool);
        }
    }), storageDomainId);
}
#end_block

#method_before
private void PostGetTemplatesNotPresentOnExportDomain(storage_pool storagePool) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    if (storagePool != null) {
        AsyncDataProvider.GetAllTemplatesFromExportDomain(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                VmListModel vmListModel = (VmListModel) target;
                HashMap<VmTemplate, ArrayList<DiskImage>> templatesDiskSet = (HashMap<VmTemplate, ArrayList<DiskImage>>) returnValue;
                HashMap<String, ArrayList<String>> templateDic = new HashMap<String, ArrayList<String>>();
                // check if relevant templates are already there
                for (Object selectedItem : vmListModel.getSelectedItems()) {
                    VM vm = (VM) selectedItem;
                    boolean hasMatch = false;
                    for (VmTemplate a : templatesDiskSet.keySet()) {
                        if (vm.getVmtGuid().equals(a.getId())) {
                            hasMatch = true;
                            break;
                        }
                    }
                    if (!vm.getVmtGuid().equals(NGuid.Empty) && !hasMatch) {
                        if (!templateDic.containsKey(vm.getVmtName())) {
                            templateDic.put(vm.getVmtName(), new ArrayList<String>());
                        }
                        templateDic.get(vm.getVmtName()).add(vm.getVmName());
                    }
                }
                String tempStr;
                ArrayList<String> tempList;
                ArrayList<String> missingTemplates = new ArrayList<String>();
                for (Map.Entry<String, ArrayList<String>> keyValuePair : templateDic.entrySet()) {
                    tempList = keyValuePair.getValue();
                    // $NON-NLS-1$ //$NON-NLS-2$
                    tempStr = "Template " + keyValuePair.getKey() + " (for ";
                    int i;
                    for (i = 0; i < tempList.size() - 1; i++) {
                        // $NON-NLS-1$
                        tempStr += tempList.get(i) + ", ";
                    }
                    // $NON-NLS-1$
                    tempStr += tempList.get(i) + ")";
                    missingTemplates.add(tempStr);
                }
                vmListModel.PostExportGetMissingTemplates(missingTemplates);
            }
        }), storagePool.getId(), storageDomainId);
    }
}
#method_after
private void PostGetTemplatesNotPresentOnExportDomain(storage_pool storagePool) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    if (storagePool != null) {
        AsyncDataProvider.GetAllTemplatesFromExportDomain(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                VmListModel vmListModel = (VmListModel) target;
                HashMap<VmTemplate, ArrayList<DiskImage>> templatesDiskSet = (HashMap<VmTemplate, ArrayList<DiskImage>>) returnValue;
                HashMap<String, ArrayList<String>> templateDic = new HashMap<String, ArrayList<String>>();
                // check if relevant templates are already there
                for (Object selectedItem : vmListModel.getSelectedItems()) {
                    VM vm = (VM) selectedItem;
                    boolean hasMatch = false;
                    for (VmTemplate a : templatesDiskSet.keySet()) {
                        if (vm.getVmtGuid().equals(a.getId())) {
                            hasMatch = true;
                            break;
                        }
                    }
                    if (!vm.getVmtGuid().equals(NGuid.Empty) && !hasMatch) {
                        if (!templateDic.containsKey(vm.getVmtName())) {
                            templateDic.put(vm.getVmtName(), new ArrayList<String>());
                        }
                        templateDic.get(vm.getVmtName()).add(vm.getVmName());
                    }
                }
                String tempStr;
                ArrayList<String> tempList;
                ArrayList<String> missingTemplates = new ArrayList<String>();
                for (Map.Entry<String, ArrayList<String>> keyValuePair : templateDic.entrySet()) {
                    tempList = keyValuePair.getValue();
                    // $NON-NLS-1$ //$NON-NLS-2$
                    tempStr = "Template " + keyValuePair.getKey() + " (for ";
                    int i;
                    for (i = 0; i < tempList.size() - 1; i++) {
                        // $NON-NLS-1$
                        tempStr += tempList.get(i) + ", ";
                    }
                    // $NON-NLS-1$
                    tempStr += tempList.get(i) + ")";
                    missingTemplates.add(tempStr);
                }
                vmListModel.PostExportGetMissingTemplates(missingTemplates);
            }
        }), storagePool.getId(), storageDomainId);
    }
}
#end_block

#method_before
private void PostExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    model.StopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveVmParameters parameter = new MoveVmParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameter.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!(Boolean) model.getCollapseSnapshots().getEntity()) {
        if ((missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0)) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnExportNoTemplates", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("CancelConfirmation", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                @Override
                public void Executed(FrontendMultipleActionAsyncResult result) {
                    ExportVmModel localModel = (ExportVmModel) result.getState();
                    localModel.StopProgress();
                    Cancel();
                }
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveVmParameters parameter = (MoveVmParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.StartProgress(null);
        Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleActionAsyncResult result) {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.StopProgress();
                Cancel();
            }
        }, model);
    }
}
#method_after
private void PostExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    model.StopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveVmParameters parameter = new MoveVmParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameter.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!(Boolean) model.getCollapseSnapshots().getEntity()) {
        if ((missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0)) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnExportNoTemplates", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("CancelConfirmation", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                @Override
                public void Executed(FrontendMultipleActionAsyncResult result) {
                    ExportVmModel localModel = (ExportVmModel) result.getState();
                    localModel.StopProgress();
                    Cancel();
                }
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveVmParameters parameter = (MoveVmParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.StartProgress(null);
        Frontend.RunMultipleAction(VdcActionType.ExportVm, parameters, new IFrontendMultipleActionAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleActionAsyncResult result) {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.StopProgress();
                Cancel();
            }
        }, model);
    }
}
#end_block

#method_before
public void OnExport() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    if (!model.Validate()) {
        return;
    }
    model.StartProgress(null);
    GetTemplatesNotPresentOnExportDomain();
}
#method_after
public void OnExport() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    if (!model.Validate()) {
        return;
    }
    model.StartProgress(null);
    GetTemplatesNotPresentOnExportDomain();
}
#end_block

#method_before
private void OnExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((storage_domains) model.getStorage().getSelectedItem()).getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveVmParameters parameters = new MoveVmParameters(a.getId(), storageDomainId);
        parameters.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameters.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ExportVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#method_after
private void OnExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = ((StorageDomain) model.getStorage().getSelectedItem()).getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<VdcActionParametersBase>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveVmParameters parameters = new MoveVmParameters(a.getId(), storageDomainId);
        parameters.setForceOverride((Boolean) model.getForceOverride().getEntity());
        parameters.setCopyCollapse((Boolean) model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ExportVm, list, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.StopProgress();
            Cancel();
        }
    }, model);
}
#end_block

#method_before
@Override
protected void sendWarningForNonExportableDisks(VM entity) {
    // load VM disks and check if there is one which doesn't allow snapshot
    AsyncDataProvider.GetVmDiskList(new AsyncQuery((ExportVmModel) getWindow(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final ExportVmModel model = (ExportVmModel) target;
            @SuppressWarnings("unchecked")
            final ArrayList<Disk> diskList = (ArrayList<Disk>) returnValue;
            // filter non-exportable disks
            final List<String> list = new ArrayList<String>();
            for (Disk disk : diskList) {
                if (!disk.isAllowSnapshot()) {
                    list.add(disk.getDiskAlias());
                }
            }
            if (!list.isEmpty()) {
                // $NON-NLS-1$
                final String s = StringUtils.join(list, ", ");
                // append warning message
                model.setMessage(ConstantsManager.getInstance().getMessages().disksWillNotBePartOfTheExportedVM(s));
            }
        }
    }), entity.getId());
}
#method_after
@Override
protected void sendWarningForNonExportableDisks(VM entity) {
    // load VM disks and check if there is one which doesn't allow snapshot
    AsyncDataProvider.GetVmDiskList(new AsyncQuery(getWindow(), new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            final ExportVmModel model = (ExportVmModel) target;
            @SuppressWarnings("unchecked")
            final ArrayList<Disk> diskList = (ArrayList<Disk>) returnValue;
            // filter non-exportable disks
            final List<String> list = new ArrayList<String>();
            for (Disk disk : diskList) {
                if (!disk.isAllowSnapshot()) {
                    list.add(disk.getDiskAlias());
                }
            }
            if (!list.isEmpty()) {
                // $NON-NLS-1$
                final String s = StringUtils.join(list, ", ");
                // append warning message
                model.setMessage(ConstantsManager.getInstance().getMessages().disksWillNotBePartOfTheExportedVM(s));
            }
        }
    }), entity.getId());
}
#end_block

#method_before
private void RunOnceUpdateBootSequence(VM vm) {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            VmListModel vmListModel = (VmListModel) model;
            RunOnceModel runOnceModel = (RunOnceModel) vmListModel.getWindow();
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = runOnceModel.getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery);
    setIsBootFromHardDiskAllowedForVm(vm);
}
#method_after
private void RunOnceUpdateBootSequence(VM vm) {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            VmListModel vmListModel = (VmListModel) model;
            RunOnceModel runOnceModel = (RunOnceModel) vmListModel.getWindow();
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = runOnceModel.getBootSequence();
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
                bootSequenceModel.getNetworkOption().setIsChangable(false);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery);
    setIsBootFromHardDiskAllowedForVm(vm);
}
#end_block

#method_before
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            VmListModel userPortalListModel = (VmListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#method_after
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            VmListModel userPortalListModel = (VmListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#end_block

#method_before
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setVmName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else {
        getcurrentVm().setUseHostCpuFlags(Boolean.FALSE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<storage_domains> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            storage_domains storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getstorage_type()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                boolean isSucceeded = retVal.getSucceeded();
                                if (retVal != null && isSucceeded) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#method_after
private void onSave() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM selectedItem = (VM) getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    getcurrentVm().setVmType(model.getVmType());
    getcurrentVm().setVmtGuid(template.getId());
    getcurrentVm().setVmName(name);
    if (model.getQuota().getSelectedItem() != null) {
        getcurrentVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    getcurrentVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    getcurrentVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    getcurrentVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    getcurrentVm().setVmDescription((String) model.getDescription().getEntity());
    getcurrentVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    getcurrentVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    getcurrentVm().setVdsGroupId(newClusterID);
    getcurrentVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    getcurrentVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    getcurrentVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    getcurrentVm().setAutoSuspend(false);
    getcurrentVm().setStateless((Boolean) model.getIsStateless().getEntity());
    getcurrentVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    getcurrentVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    getcurrentVm().setDefaultBootSequence(model.getBootSequence());
    getcurrentVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    getcurrentVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    getcurrentVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    getcurrentVm().setKernelUrl((String) model.getKernel_path().getEntity());
    getcurrentVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    getcurrentVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    getcurrentVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    getcurrentVm().setPriority((Integer) prioritySelectedItem.getEntity());
    getcurrentVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        getcurrentVm().setDedicatedVmForVds(null);
    } else {
        getcurrentVm().setDedicatedVmForVds(defaultHost.getId());
    }
    getcurrentVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        getcurrentVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        getcurrentVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else {
        getcurrentVm().setUseHostCpuFlags(Boolean.FALSE);
    }
    if (model.getIsNew()) {
        if (getcurrentVm().getVmtGuid().equals(NGuid.Empty)) {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, new AddVmFromScratchParameters(getcurrentVm(), new ArrayList<DiskImage>(), NGuid.Empty), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                        vmListModel.setGuideContext(returnValueBase.getActionReturnValue());
                        vmListModel.UpdateActionAvailability();
                        vmListModel.getGuideCommand().Execute();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            if ((Boolean) model.getProvisioning().getEntity()) {
                model.StartProgress(null);
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object result1) {
                        VmListModel vmListModel = (VmListModel) model1;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result1;
                        UnitVmModel unitVmModel = (UnitVmModel) vmListModel.getWindow();
                        HashMap<Guid, DiskImage> imageToDestinationDomainMap = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        ArrayList<StorageDomain> activeStorageDomains = unitVmModel.getDisksAllocationModel().getActiveStorageDomains();
                        HashMap<Guid, DiskImage> dict = unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap();
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : unitVmModel.getDisksAllocationModel().getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            StorageDomain storageDomain = Linq.getStorageById(imageToDestinationDomainMap.get(templateDisk.getId()).getStorageIds().get(0), activeStorageDomains);
                            if (disk != null) {
                                dict.get(templateDisk.getId()).setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                dict.get(templateDisk.getId()).setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), storageDomain.getStorageType()));
                                if (disk.getQuota().getSelectedItem() != null) {
                                    dict.get(templateDisk.getId()).setQuotaId(((Quota) disk.getQuota().getSelectedItem()).getId());
                                }
                            }
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(vmListModel.getcurrentVm(), dict, Guid.Empty);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult result) {
                                VmListModel vmListModel1 = (VmListModel) result.getState();
                                vmListModel1.getWindow().StopProgress();
                                vmListModel1.Cancel();
                            }
                        }, vmListModel);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                if (model.getProgress() != null) {
                    return;
                }
                model.StartProgress(null);
                VmManagementParametersBase params = new VmManagementParametersBase(getcurrentVm());
                params.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(params);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult result) {
                        VmListModel vmListModel1 = (VmListModel) result.getState();
                        vmListModel1.getWindow().StopProgress();
                        vmListModel1.Cancel();
                    }
                }, this);
            }
        }
    } else // Update existing VM -> consists of editing VM cluster, and if succeeds - editing VM:
    {
        if (model.getProgress() != null) {
            return;
        }
        // runEditVM: should be true if Cluster hasn't changed or if
        // Cluster has changed and Editing it in the Backend has succeeded:
        Guid oldClusterID = selectedItem.getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId());
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.ChangeVMCluster, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(vmListModel.getcurrentVm()), new IFrontendActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendActionAsyncResult result1) {
                                VmListModel vmListModel1 = (VmListModel) result1.getState();
                                vmListModel1.getWindow().StopProgress();
                                VdcReturnValueBase retVal = result1.getReturnValue();
                                boolean isSucceeded = retVal.getSucceeded();
                                if (retVal != null && isSucceeded) {
                                    vmListModel1.Cancel();
                                }
                            }
                        }, vmListModel);
                    } else {
                        vmListModel.getWindow().StopProgress();
                    }
                }
            }, this);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.StartProgress(null);
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(getcurrentVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    VmListModel vmListModel = (VmListModel) result.getState();
                    vmListModel.getWindow().StopProgress();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        vmListModel.Cancel();
                    }
                }
            }, this);
        }
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.equals(ChangeCDModel.ExecutedEventDefinition)) {
        changeCD(sender, args);
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    if (ev.matchesDefinition(ChangeCDModel.ExecutedEventDefinition)) {
        changeCD(sender, args);
    }
}
#end_block

#method_before
@Override
protected TreeItem getNodeItem(storage_domains storage) {
    HorizontalPanel panel = new HorizontalPanel();
    panel.setSpacing(1);
    // $NON-NLS-1$
    panel.setWidth("100%");
    // $NON-NLS-1$
    addItemToPanel(panel, new Image(resources.storageImage()), "25px");
    // $NON-NLS-1$
    addTextBoxToPanel(panel, new TextBoxLabel(), storage.getstorage_name(), "");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainType>(), storage.getstorage_domain_type(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainSharedStatus>(), storage.getstorage_domain_shared_status(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getavailable_disk_size(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getused_disk_size(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getTotalDiskSize(), "120px");
    TreeItem treeItem = new TreeItem(panel);
    treeItem.setUserObject(storage.getId());
    return treeItem;
}
#method_after
@Override
protected TreeItem getNodeItem(StorageDomain storage) {
    HorizontalPanel panel = new HorizontalPanel();
    panel.setSpacing(1);
    // $NON-NLS-1$
    panel.setWidth("100%");
    // $NON-NLS-1$
    addItemToPanel(panel, new Image(resources.storageImage()), "25px");
    // $NON-NLS-1$
    addTextBoxToPanel(panel, new TextBoxLabel(), storage.getStorageName(), "");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainType>(), storage.getStorageDomainType(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainSharedStatus>(), storage.getStorageDomainSharedStatus(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getAvailableDiskSize(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getUsedDiskSize(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getTotalDiskSize(), "120px");
    TreeItem treeItem = new TreeItem(panel);
    treeItem.setUserObject(storage.getId());
    return treeItem;
}
#end_block

#method_before
@Override
protected ArrayList<storage_domains> getNodeObjects(DiskImage disk) {
    return Linq.getStorageDomainsByIds(disk.getStorageIds(), listModel.getStorageDomains());
}
#method_after
@Override
protected ArrayList<StorageDomain> getNodeObjects(DiskImage disk) {
    return Linq.getStorageDomainsByIds(disk.getStorageIds(), listModel.getStorageDomains());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    lockImage();
    VDSReturnValue vdsReturnValue = null;
    Guid sourceDomainId = getParameters().getSourceDomainId() != null ? getParameters().getSourceDomainId().getValue() : getDiskImage().getStorageIds().get(0);
    if (getParameters().getUseCopyCollapse()) {
        vdsReturnValue = runVdsCommand(VDSCommandType.CopyImage, new CopyImageVDSCommandParameters(getStorageDomain().getstorage_pool_id().getValue(), sourceDomainId, getParameters().getContainerId(), getParameters().getImageGroupID(), getParameters().getImageId(), getParameters().getDestImageGroupId(), getParameters().getDestinationImageId(), "", getParameters().getStorageDomainId(), getParameters().getCopyVolumeType(), getParameters().getVolumeFormat(), getParameters().getVolumeType(), isWipeAfterDelete(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    } else {
        vdsReturnValue = runVdsCommand(VDSCommandType.MoveImageGroup, new MoveImageGroupVDSCommandParameters(getDiskImage().getStoragePoolId().getValue(), sourceDomainId, getDiskImage().getId(), getParameters().getStorageDomainId(), getParameters().getContainerId(), getParameters().getOperation(), isWipeAfterDelete(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    }
    if (vdsReturnValue.getSucceeded()) {
        AsyncTaskCreationInfo taskCreationInfo = vdsReturnValue.getCreationInfo();
        getReturnValue().getInternalTaskIdList().add(createTask(taskCreationInfo, getParameters().getParentCommand(), VdcObjectType.Storage, sourceDomainId, getParameters().getStorageDomainId()));
        // Add storage domain in db only if there is new entity in DB.
        if (!shouldUpdateStorageDisk() && getParameters().getAddImageDomainMapping()) {
            getImageStorageDomainMapDao().save(new image_storage_domain_map(getParameters().getImageId(), getParameters().getStorageDomainId()));
        }
        // update quota
        if (getParameters().getQuotaId() != null) {
            getImageDao().updateQuotaForImageAndSnapshots(getParameters().getDestImageGroupId(), getParameters().getQuotaId());
        }
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    lockImage();
    VDSReturnValue vdsReturnValue = null;
    Guid sourceDomainId = getParameters().getSourceDomainId() != null ? getParameters().getSourceDomainId().getValue() : getDiskImage().getStorageIds().get(0);
    if (getParameters().getUseCopyCollapse()) {
        vdsReturnValue = runVdsCommand(VDSCommandType.CopyImage, new CopyImageVDSCommandParameters(getStorageDomain().getStoragePoolId().getValue(), sourceDomainId, getParameters().getContainerId(), getParameters().getImageGroupID(), getParameters().getImageId(), getParameters().getDestImageGroupId(), getParameters().getDestinationImageId(), "", getParameters().getStorageDomainId(), getParameters().getCopyVolumeType(), getParameters().getVolumeFormat(), getParameters().getVolumeType(), isWipeAfterDelete(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    } else {
        vdsReturnValue = runVdsCommand(VDSCommandType.MoveImageGroup, new MoveImageGroupVDSCommandParameters(getDiskImage().getStoragePoolId().getValue(), sourceDomainId, getDiskImage().getId(), getParameters().getStorageDomainId(), getParameters().getContainerId(), getParameters().getOperation(), isWipeAfterDelete(), getParameters().getForceOverride(), getStoragePool().getcompatibility_version().toString()));
    }
    if (vdsReturnValue.getSucceeded()) {
        AsyncTaskCreationInfo taskCreationInfo = vdsReturnValue.getCreationInfo();
        getReturnValue().getInternalTaskIdList().add(createTask(taskCreationInfo, getParameters().getParentCommand(), VdcObjectType.Storage, sourceDomainId, getParameters().getStorageDomainId()));
        // Add storage domain in db only if there is new entity in DB.
        if (!shouldUpdateStorageDisk() && getParameters().getAddImageDomainMapping()) {
            getImageStorageDomainMapDao().save(new image_storage_domain_map(getParameters().getImageId(), getParameters().getStorageDomainId()));
        }
        // update quota
        if (getParameters().getQuotaId() != null) {
            getImageDao().updateQuotaForImageAndSnapshots(getParameters().getDestImageGroupId(), getParameters().getQuotaId());
        }
        setSucceeded(true);
    }
}
#end_block

#method_before
protected storage_domains getSourceDomain() {
    if (sourceDomain == null && !Guid.Empty.equals(sourceDomainId)) {
        sourceDomain = getStorageDomainDAO().getForStoragePool(sourceDomainId, getStoragePool().getId());
    }
    return sourceDomain;
}
#method_after
protected StorageDomain getSourceDomain() {
    if (sourceDomain == null && !Guid.Empty.equals(sourceDomainId)) {
        sourceDomain = getStorageDomainDAO().getForStoragePool(sourceDomainId, getStoragePool().getId());
    }
    return sourceDomain;
}
#end_block

#method_before
private boolean checkFreeSpaceOnDestinationDomain(storage_domains domain, int requestedSizeGB) {
    return validate(new StorageDomainValidator(domain).isDomainHasSpaceForRequest(requestedSizeGB));
}
#method_after
private boolean checkFreeSpaceOnDestinationDomain(StorageDomain domain, int requestedSizeGB) {
    return validate(new StorageDomainValidator(domain).isDomainHasSpaceForRequest(requestedSizeGB));
}
#end_block

#method_before
protected storage_domains getStorageDomain(Guid domainId) {
    return getStorageDomainDAO().getForStoragePool(domainId, getStoragePool().getId());
}
#method_after
protected StorageDomain getStorageDomain(Guid domainId) {
    return getStorageDomainDAO().getForStoragePool(domainId, getStoragePool().getId());
}
#end_block

#method_before
protected Map<storage_domains, Integer> getSpaceRequirementsForStorageDomains(Collection<DiskImage> images) {
    Map<DiskImage, storage_domains> spaceMap = new HashMap<DiskImage, storage_domains>();
    for (DiskImage image : images) {
        storage_domains domain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
        spaceMap.put(image, domain);
    }
    return StorageDomainValidator.getSpaceRequirementsForStorageDomains(spaceMap);
}
#method_after
protected Map<StorageDomain, Integer> getSpaceRequirementsForStorageDomains(Collection<DiskImage> images) {
    Map<DiskImage, StorageDomain> spaceMap = new HashMap<DiskImage, StorageDomain>();
    for (DiskImage image : images) {
        StorageDomain domain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
        spaceMap.put(image, domain);
    }
    return StorageDomainValidator.getSpaceRequirementsForStorageDomains(spaceMap);
}
#end_block

#method_before
protected void onInitStorageDomains(ArrayList<storage_domains> storages) {
    for (storage_domains storage : storages) {
        if (Linq.IsDataActiveStorageDomain(storage)) {
            getActiveStorageDomains().add(storage);
        }
    }
    Collections.sort(getActiveStorageDomains(), new Linq.StorageDomainByNameComparer());
    if (!getActiveStorageDomains().isEmpty()) {
        AsyncDataProvider.GetDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                MoveOrCopyDiskModel model = (MoveOrCopyDiskModel) target;
                storage_pool dataCenter = (storage_pool) returnValue;
                model.setQuotaEnforcementType(dataCenter.getQuotaEnforcementType());
                model.postInitStorageDomains();
            }
        }), getActiveStorageDomains().get(0).getstorage_pool_id().getValue());
    } else {
        postInitStorageDomains();
    }
}
#method_after
protected void onInitStorageDomains(ArrayList<StorageDomain> storages) {
    for (StorageDomain storage : storages) {
        if (Linq.IsDataActiveStorageDomain(storage)) {
            getActiveStorageDomains().add(storage);
        }
    }
    Collections.sort(getActiveStorageDomains(), new Linq.StorageDomainByNameComparer());
    if (!getActiveStorageDomains().isEmpty()) {
        AsyncDataProvider.GetDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                MoveOrCopyDiskModel model = (MoveOrCopyDiskModel) target;
                storage_pool dataCenter = (storage_pool) returnValue;
                model.setQuotaEnforcementType(dataCenter.getQuotaEnforcementType());
                model.postInitStorageDomains();
            }
        }), getActiveStorageDomains().get(0).getStoragePoolId().getValue());
    } else {
        postInitStorageDomains();
    }
}
#end_block

#method_before
protected void postInitStorageDomains() {
    boolean showWarning = false;
    for (DiskModel disk : getDisks()) {
        DiskImage diskImage = ((DiskImage) disk.getDisk());
        // Source storage domains
        ArrayList<Guid> diskStorageIds = diskImage.getStorageIds();
        ArrayList<storage_domains> sourceStorageDomains = Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains());
        // Destination storage domains
        ArrayList<storage_domains> destStorageDomains = Linq.Except(getActiveStorageDomains(), sourceStorageDomains);
        destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getStoragePoolId());
        // Filter storage domains with missing template disk
        boolean isDiskBasedOnTemplate = !diskImage.getParentId().equals(NGuid.Empty);
        if (isDiskBasedOnTemplate) {
            destStorageDomains = Linq.Except(destStorageDomains, getMissingStorages(destStorageDomains, disk));
        }
        // Add prohibition reasons
        if (sourceStorageDomains.isEmpty() || destStorageDomains.isEmpty()) {
            showWarning = true;
            updateChangeability(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty());
        }
        // Sort and add storage domains
        Collections.sort(destStorageDomains, new Linq.StorageDomainByNameComparer());
        Collections.sort(sourceStorageDomains, new Linq.StorageDomainByNameComparer());
        disk.getStorageDomain().setItems(destStorageDomains);
        disk.getSourceStorageDomain().setItems(sourceStorageDomains);
        addSourceStorageDomainName(disk, sourceStorageDomains);
    }
    sortDisks();
    postCopyOrMoveInit(showWarning);
}
#method_after
protected void postInitStorageDomains() {
    boolean showWarning = false;
    for (DiskModel disk : getDisks()) {
        DiskImage diskImage = ((DiskImage) disk.getDisk());
        // Source storage domains
        ArrayList<Guid> diskStorageIds = diskImage.getStorageIds();
        ArrayList<StorageDomain> sourceStorageDomains = Linq.getStorageDomainsByIds(diskStorageIds, getActiveStorageDomains());
        // Destination storage domains
        ArrayList<StorageDomain> destStorageDomains = Linq.Except(getActiveStorageDomains(), sourceStorageDomains);
        destStorageDomains = filterStoragesByDatacenterId(destStorageDomains, diskImage.getStoragePoolId());
        // Filter storage domains with missing template disk
        boolean isDiskBasedOnTemplate = !diskImage.getParentId().equals(NGuid.Empty);
        if (isDiskBasedOnTemplate) {
            destStorageDomains = Linq.Except(destStorageDomains, getMissingStorages(destStorageDomains, disk));
        }
        // Add prohibition reasons
        if (sourceStorageDomains.isEmpty() || destStorageDomains.isEmpty()) {
            showWarning = true;
            updateChangeability(disk, isDiskBasedOnTemplate, sourceStorageDomains.isEmpty(), destStorageDomains.isEmpty());
        }
        // Sort and add storage domains
        Collections.sort(destStorageDomains, new Linq.StorageDomainByNameComparer());
        Collections.sort(sourceStorageDomains, new Linq.StorageDomainByNameComparer());
        disk.getStorageDomain().setItems(destStorageDomains);
        disk.getSourceStorageDomain().setItems(sourceStorageDomains);
        addSourceStorageDomainName(disk, sourceStorageDomains);
    }
    sortDisks();
    postCopyOrMoveInit(showWarning);
}
#end_block

#method_before
private void updateChangeability(DiskModel disk, boolean isDiskBasedOnTemplate, boolean noSources, boolean noTargets) {
    disk.getStorageDomain().setIsChangable(!noTargets);
    disk.getSourceStorageDomain().setIsChangable(!noSources);
    disk.getSourceStorageDomainName().setIsChangable(!noSources);
    disk.getStorageDomain().getChangeProhibitionReasons().add(isDiskBasedOnTemplate ? constants.noActiveStorageDomainWithTemplateMsg() : getNoActiveTargetDomainMessage());
    disk.getSourceStorageDomain().getChangeProhibitionReasons().add(getNoActiveSourceDomainMessage());
    disk.getSourceStorageDomainName().getChangeProhibitionReasons().add(getNoActiveSourceDomainMessage());
}
#method_after
private void updateChangeability(DiskModel disk, boolean isDiskBasedOnTemplate, boolean noSources, boolean noTargets) {
    disk.getStorageDomain().setIsChangable(!noTargets);
    disk.getSourceStorageDomain().setIsChangable(!noSources);
    disk.getSourceStorageDomainName().setIsChangable(!noSources);
    disk.getStorageDomain().setChangeProhibitionReason(isDiskBasedOnTemplate ? constants.noActiveStorageDomainWithTemplateMsg() : getNoActiveTargetDomainMessage());
    disk.getSourceStorageDomain().setChangeProhibitionReason(getNoActiveSourceDomainMessage());
    disk.getSourceStorageDomainName().setChangeProhibitionReason(getNoActiveSourceDomainMessage());
}
#end_block

#method_before
private void addSourceStorageDomainName(DiskModel disk, ArrayList<storage_domains> sourceStorageDomains) {
    String sourceStorageName = sourceStorageDomains.isEmpty() ? constants.notAvailableLabel() : sourceStorageDomains.get(0).getstorage_name();
    disk.getSourceStorageDomainName().setEntity(sourceStorageName);
}
#method_after
private void addSourceStorageDomainName(DiskModel disk, ArrayList<StorageDomain> sourceStorageDomains) {
    String sourceStorageName = sourceStorageDomains.isEmpty() ? constants.notAvailableLabel() : sourceStorageDomains.get(0).getStorageName();
    disk.getSourceStorageDomainName().setEntity(sourceStorageName);
}
#end_block

#method_before
protected ArrayList<storage_domains> filterStoragesByDatacenterId(ArrayList<storage_domains> storageDomains, NGuid diskDatacenterId) {
    ArrayList<storage_domains> storages = new ArrayList<storage_domains>();
    for (storage_domains storage : storageDomains) {
        if (storage.getstorage_pool_id().equals(diskDatacenterId)) {
            storages.add(storage);
        }
    }
    return storages;
}
#method_after
protected ArrayList<StorageDomain> filterStoragesByDatacenterId(ArrayList<StorageDomain> storageDomains, NGuid diskDatacenterId) {
    ArrayList<StorageDomain> storages = new ArrayList<StorageDomain>();
    for (StorageDomain storage : storageDomains) {
        if (storage.getStoragePoolId().equals(diskDatacenterId)) {
            storages.add(storage);
        }
    }
    return storages;
}
#end_block

#method_before
protected ArrayList<storage_domains> getMissingStorages(ArrayList<storage_domains> storageDomains, DiskModel vmdisk) {
    ArrayList<storage_domains> missingStorageDomains = new ArrayList<storage_domains>();
    DiskModel templateDisk = getTemplateDiskByVmDisk(vmdisk);
    if (templateDisk != null) {
        for (storage_domains storageDomain : storageDomains) {
            if (!((DiskImage) templateDisk.getDisk()).getStorageIds().contains(storageDomain.getId())) {
                missingStorageDomains.add(storageDomain);
            }
        }
    }
    return missingStorageDomains;
}
#method_after
protected ArrayList<StorageDomain> getMissingStorages(ArrayList<StorageDomain> storageDomains, DiskModel vmdisk) {
    ArrayList<StorageDomain> missingStorageDomains = new ArrayList<StorageDomain>();
    DiskModel templateDisk = getTemplateDiskByVmDisk(vmdisk);
    if (templateDisk != null) {
        for (StorageDomain storageDomain : storageDomains) {
            if (!((DiskImage) templateDisk.getDisk()).getStorageIds().contains(storageDomain.getId())) {
                missingStorageDomains.add(storageDomain);
            }
        }
    }
    return missingStorageDomains;
}
#end_block

#method_before
protected ArrayList<VdcActionParametersBase> getParameters() {
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    for (DiskModel diskModel : getDisks()) {
        storage_domains destStorageDomain = (storage_domains) diskModel.getStorageDomain().getSelectedItem();
        storage_domains sourceStorageDomain = (storage_domains) diskModel.getSourceStorageDomain().getSelectedItem();
        Guid sourceStorageDomainGuid = sourceStorageDomain != null ? sourceStorageDomain.getId() : Guid.Empty;
        DiskImage disk = (DiskImage) diskModel.getDisk();
        if (diskModel.getQuota().getSelectedItem() != null) {
            disk.setQuotaId(((Quota) diskModel.getQuota().getSelectedItem()).getId());
        }
        if (destStorageDomain == null || sourceStorageDomain == null) {
            continue;
        }
        Guid destStorageDomainGuid = destStorageDomain.getId();
        addMoveOrCopyParameters(parameters, sourceStorageDomainGuid, destStorageDomainGuid, disk);
    }
    return parameters;
}
#method_after
protected ArrayList<VdcActionParametersBase> getParameters() {
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
    for (DiskModel diskModel : getDisks()) {
        StorageDomain destStorageDomain = (StorageDomain) diskModel.getStorageDomain().getSelectedItem();
        StorageDomain sourceStorageDomain = (StorageDomain) diskModel.getSourceStorageDomain().getSelectedItem();
        Guid sourceStorageDomainGuid = sourceStorageDomain != null ? sourceStorageDomain.getId() : Guid.Empty;
        DiskImage disk = (DiskImage) diskModel.getDisk();
        if (diskModel.getQuota().getSelectedItem() != null) {
            disk.setQuotaId(((Quota) diskModel.getQuota().getSelectedItem()).getId());
        }
        if (destStorageDomain == null || sourceStorageDomain == null) {
            continue;
        }
        Guid destStorageDomainGuid = destStorageDomain.getId();
        addMoveOrCopyParameters(parameters, sourceStorageDomainGuid, destStorageDomainGuid, disk);
    }
    return parameters;
}
#end_block

#method_before
public void init(Guid storageDomainId) {
    // get Storage pool
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            ArrayList<storage_pool> pools = (ArrayList<storage_pool>) returnValue;
            storage_pool dataCenter = null;
            if (pools != null && pools.size() == 1) {
                dataCenter = pools.get(0);
            } else {
            // TODO internal client ERROR
            }
            setStoragePool(dataCenter);
            // show quota
            if (dataCenter != null && dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
                hasQuota = true;
            }
            if (hasQuota) {
                getClusterQuota().setIsAvailable(true);
                getCluster().getSelectedItemChangedEvent().addListener(quotaClusterListener);
            }
            // get cluster
            AsyncDataProvider.GetClusterList(new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object returnValue) {
                    ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                    getCluster().setItems(clusters);
                    getCluster().setSelectedItem(Linq.FirstOrDefault(clusters));
                    // get storage domains
                    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model, Object returnValue) {
                            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
                            // filter storage domains
                            filteredStorageDomains = new ArrayList<storage_domains>();
                            for (storage_domains domain : storageDomains) {
                                if (Linq.IsDataActiveStorageDomain(domain)) {
                                    filteredStorageDomains.add(domain);
                                }
                            }
                            getStorage().setItems(filteredStorageDomains);
                            if (hasQuota) {
                                initQuotaForStorageDomains();
                            } else {
                                initDisksStorageDomainsList();
                            }
                        }
                    }), getStoragePool().getId());
                }
            }), dataCenter.getId());
        }
    }), storageDomainId);
}
#method_after
public void init(Guid storageDomainId) {
    // get Storage pool
    AsyncDataProvider.GetDataCentersByStorageDomain(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            ArrayList<storage_pool> pools = (ArrayList<storage_pool>) returnValue;
            storage_pool dataCenter = null;
            if (pools != null && pools.size() == 1) {
                dataCenter = pools.get(0);
            } else {
            // TODO internal client ERROR
            }
            setStoragePool(dataCenter);
            // show quota
            if (dataCenter != null && dataCenter.getQuotaEnforcementType() != QuotaEnforcementTypeEnum.DISABLED) {
                hasQuota = true;
            }
            if (hasQuota) {
                getClusterQuota().setIsAvailable(true);
                getCluster().getSelectedItemChangedEvent().addListener(quotaClusterListener);
            }
            // get cluster
            AsyncDataProvider.GetClusterList(new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object returnValue) {
                    ArrayList<VDSGroup> clusters = (ArrayList<VDSGroup>) returnValue;
                    getCluster().setItems(clusters);
                    getCluster().setSelectedItem(Linq.FirstOrDefault(clusters));
                    // get storage domains
                    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model, Object returnValue) {
                            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
                            // filter storage domains
                            filteredStorageDomains = new ArrayList<StorageDomain>();
                            for (StorageDomain domain : storageDomains) {
                                if (Linq.IsDataActiveStorageDomain(domain)) {
                                    filteredStorageDomains.add(domain);
                                }
                            }
                            getStorage().setItems(filteredStorageDomains);
                            if (hasQuota) {
                                initQuotaForStorageDomains();
                            } else {
                                initDisksStorageDomainsList();
                            }
                        }
                    }), getStoragePool().getId());
                }
            }), dataCenter.getId());
        }
    }), storageDomainId);
}
#end_block

#method_before
private void initQuotaForStorageDomains() {
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
    for (storage_domains storage : filteredStorageDomains) {
        queryTypeList.add(VdcQueryType.GetAllRelevantQuotasForStorage);
        queryParamsList.add(new GetAllRelevantQuotasForStorageParameters(storage.getId()));
    }
    storageQuotaMap = new HashMap<Guid, ArrayList<Quota>>();
    Frontend.RunMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleQueryAsyncResult result) {
            List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
            boolean noQuota = true;
            for (int i = 0; i < filteredStorageDomains.size(); i++) {
                ArrayList<Quota> quotaList = (ArrayList<Quota>) returnValueList.get(i).getReturnValue();
                if (noQuota && !quotaList.isEmpty()) {
                    noQuota = false;
                }
                storageQuotaMap.put(filteredStorageDomains.get(i).getId(), quotaList);
            }
            if (noQuota && QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(storagePool.getQuotaEnforcementType())) {
                showCloseMessage(ConstantsManager.getInstance().getConstants().missingQuotaStorageEnforceMode());
            }
            initDisksStorageDomainsList();
        }
    });
}
#method_after
private void initQuotaForStorageDomains() {
    ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
    ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
    for (StorageDomain storage : filteredStorageDomains) {
        queryTypeList.add(VdcQueryType.GetAllRelevantQuotasForStorage);
        queryParamsList.add(new GetAllRelevantQuotasForStorageParameters(storage.getId()));
    }
    storageQuotaMap = new HashMap<Guid, ArrayList<Quota>>();
    Frontend.RunMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleQueryAsyncResult result) {
            List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
            boolean noQuota = true;
            for (int i = 0; i < filteredStorageDomains.size(); i++) {
                ArrayList<Quota> quotaList = (ArrayList<Quota>) returnValueList.get(i).getReturnValue();
                if (noQuota && !quotaList.isEmpty()) {
                    noQuota = false;
                }
                storageQuotaMap.put(filteredStorageDomains.get(i).getId(), quotaList);
            }
            if (noQuota && QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(storagePool.getQuotaEnforcementType())) {
                showCloseMessage(ConstantsManager.getInstance().getConstants().missingQuotaStorageEnforceMode());
            }
            initDisksStorageDomainsList();
        }
    });
}
#end_block

#method_before
private void checkIfDefaultStorageApplicableForAllDisks() {
    boolean isDefaultStorageApplicableForAllDisks = true;
    storage_domains defaultStorage = (storage_domains) getStorage().getSelectedItem();
    for (Guid diskGuid : diskImportDataMap.keySet()) {
        ImportDiskData importData = diskImportDataMap.get(diskGuid);
        if (defaultStorage != null && !importData.getStorageDomains().contains(defaultStorage)) {
            isDefaultStorageApplicableForAllDisks = false;
            break;
        } else {
            importData.setSelectedStorageDomain(defaultStorage);
        }
    }
    if ((getMessage() == null || getMessage().isEmpty()) && !isDefaultStorageApplicableForAllDisks) {
        setMessage(ConstantsManager.getInstance().getConstants().importNotApplicableForDefaultStorage());
    }
}
#method_after
private void checkIfDefaultStorageApplicableForAllDisks() {
    boolean isDefaultStorageApplicableForAllDisks = true;
    StorageDomain defaultStorage = (StorageDomain) getStorage().getSelectedItem();
    for (Guid diskGuid : diskImportDataMap.keySet()) {
        ImportDiskData importData = diskImportDataMap.get(diskGuid);
        if (defaultStorage != null && !importData.getStorageDomains().contains(defaultStorage)) {
            isDefaultStorageApplicableForAllDisks = false;
            break;
        } else {
            importData.setSelectedStorageDomain(defaultStorage);
        }
    }
    if ((getMessage() == null || getMessage().isEmpty()) && !isDefaultStorageApplicableForAllDisks) {
        setMessage(ConstantsManager.getInstance().getConstants().importNotApplicableForDefaultStorage());
    }
}
#end_block

#method_before
protected void checkDestFormatCompatibility() {
    for (Object item : getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        if (vm.getDiskMap() != null) {
            for (Map.Entry<Guid, Disk> pair : vm.getDiskMap().entrySet()) {
                DiskImage disk = (DiskImage) pair.getValue();
                if (disk.getVolumeType() == VolumeType.Sparse && disk.getVolumeFormat() == VolumeFormat.RAW && getDiskImportData(disk.getId()) != null && (getDiskImportData(disk.getId()).getSelectedStorageDomain().getstorage_type().isBlockDomain())) {
                    getDisksToConvert().add(vm);
                    ((ImportVmData) item).getCollapseSnapshots().setEntity(true);
                    ((ImportVmData) item).getCollapseSnapshots().getChangeProhibitionReasons().add(ConstantsManager.getInstance().getConstants().importSparseDiskToBlockDeviceMustCollapseSnapshots());
                    ((ImportVmData) item).getCollapseSnapshots().setIsChangable(false);
                    OnPropertyChanged(new PropertyChangedEventArgs(ON_DISK_LOAD));
                }
            }
        }
    }
}
#method_after
protected void checkDestFormatCompatibility() {
    for (Object item : getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        if (vm.getDiskMap() != null) {
            for (Map.Entry<Guid, Disk> pair : vm.getDiskMap().entrySet()) {
                DiskImage disk = (DiskImage) pair.getValue();
                if (disk.getVolumeType() == VolumeType.Sparse && disk.getVolumeFormat() == VolumeFormat.RAW && getDiskImportData(disk.getId()) != null && (getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType().isBlockDomain())) {
                    getDisksToConvert().add(vm);
                    ((ImportVmData) item).getCollapseSnapshots().setEntity(true);
                    ((ImportVmData) item).getCollapseSnapshots().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().importSparseDiskToBlockDeviceMustCollapseSnapshots());
                    ((ImportVmData) item).getCollapseSnapshots().setIsChangable(false);
                    OnPropertyChanged(new PropertyChangedEventArgs(ON_DISK_LOAD));
                }
            }
        }
    }
}
#end_block

#method_before
protected void initDisksStorageDomainsList() {
    for (Object item : getItems()) {
        ImportVmData importVmData = (ImportVmData) item;
        VM vm = importVmData.getVm();
        if (!NGuid.Empty.equals(vm.getVmtGuid())) {
            if (!templateDiskMap.containsKey(vm.getVmtGuid())) {
                templateDiskMap.put(vm.getVmtGuid(), new ArrayList<Disk>());
            }
            templateDiskMap.get(vm.getVmtGuid()).addAll(vm.getDiskMap().values());
        }
        for (Disk disk : vm.getDiskMap().values()) {
            DiskImage diskImage = (DiskImage) disk;
            addDiskImportData(diskImage.getId(), filteredStorageDomains, diskImage.getVolumeType(), importVmData.getCollapseSnapshots());
        }
    }
    if (!templateDiskMap.isEmpty()) {
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        final ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
        for (Guid templateId : templateDiskMap.keySet()) {
            queryTypeList.add(VdcQueryType.GetVmTemplatesDisks);
            queryParamsList.add(new GetVmTemplatesDisksParameters(templateId));
        }
        Frontend.RunMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleQueryAsyncResult result) {
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                Map<Guid, ArrayList<storage_domains>> templateDisksStorageDomains = new HashMap<Guid, ArrayList<storage_domains>>();
                for (VdcQueryReturnValue returnValue : returnValueList) {
                    for (DiskImage diskImage : (ArrayList<DiskImage>) returnValue.getReturnValue()) {
                        templateDisksStorageDomains.put(diskImage.getImageId(), getStorageDomainsByIds(diskImage.getStorageIds()));
                    }
                }
                for (Guid templateId : templateDiskMap.keySet()) {
                    for (Disk disk : templateDiskMap.get(templateId)) {
                        DiskImage diskImage = (DiskImage) disk;
                        if (diskImage.getParentId() != null && !NGuid.Empty.equals(diskImage.getParentId())) {
                            ArrayList<storage_domains> storageDomains = templateDisksStorageDomains.get(diskImage.getParentId());
                            if (storageDomains == null) {
                                missingTemplateDiskMap.put(templateId, templateDiskMap.get(templateId));
                            }
                        }
                    }
                }
                if (!missingTemplateDiskMap.keySet().isEmpty()) {
                    getTemplatesFromExportDomain();
                } else {
                    postInitDisks();
                }
            }
        });
    } else {
        postInitDisks();
    }
}
#method_after
protected void initDisksStorageDomainsList() {
    for (Object item : getItems()) {
        ImportVmData importVmData = (ImportVmData) item;
        VM vm = importVmData.getVm();
        if (!NGuid.Empty.equals(vm.getVmtGuid())) {
            if (!templateDiskMap.containsKey(vm.getVmtGuid())) {
                templateDiskMap.put(vm.getVmtGuid(), new ArrayList<Disk>());
            }
            templateDiskMap.get(vm.getVmtGuid()).addAll(vm.getDiskMap().values());
        }
        for (Disk disk : vm.getDiskMap().values()) {
            DiskImage diskImage = (DiskImage) disk;
            addDiskImportData(diskImage.getId(), filteredStorageDomains, diskImage.getVolumeType(), importVmData.getCollapseSnapshots());
        }
    }
    if (!templateDiskMap.isEmpty()) {
        ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
        final ArrayList<VdcQueryParametersBase> queryParamsList = new ArrayList<VdcQueryParametersBase>();
        for (Guid templateId : templateDiskMap.keySet()) {
            queryTypeList.add(VdcQueryType.GetVmTemplatesDisks);
            queryParamsList.add(new GetVmTemplatesDisksParameters(templateId));
        }
        Frontend.RunMultipleQueries(queryTypeList, queryParamsList, new IFrontendMultipleQueryAsyncCallback() {

            @Override
            public void Executed(FrontendMultipleQueryAsyncResult result) {
                List<VdcQueryReturnValue> returnValueList = result.getReturnValues();
                Map<Guid, ArrayList<StorageDomain>> templateDisksStorageDomains = new HashMap<Guid, ArrayList<StorageDomain>>();
                for (VdcQueryReturnValue returnValue : returnValueList) {
                    for (DiskImage diskImage : (ArrayList<DiskImage>) returnValue.getReturnValue()) {
                        templateDisksStorageDomains.put(diskImage.getImageId(), getStorageDomainsByIds(diskImage.getStorageIds()));
                    }
                }
                for (Guid templateId : templateDiskMap.keySet()) {
                    for (Disk disk : templateDiskMap.get(templateId)) {
                        DiskImage diskImage = (DiskImage) disk;
                        if (diskImage.getParentId() != null && !NGuid.Empty.equals(diskImage.getParentId())) {
                            ArrayList<StorageDomain> storageDomains = templateDisksStorageDomains.get(diskImage.getParentId());
                            if (storageDomains == null) {
                                missingTemplateDiskMap.put(templateId, templateDiskMap.get(templateId));
                            }
                        }
                    }
                }
                if (!missingTemplateDiskMap.keySet().isEmpty()) {
                    getTemplatesFromExportDomain();
                } else {
                    postInitDisks();
                }
            }
        });
    } else {
        postInitDisks();
    }
}
#end_block

#method_before
protected void getTemplatesFromExportDomain() {
    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(storagePool.getId(), ((storage_domains) getEntity()).getId());
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar, new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            Map<VmTemplate, DiskImageList> dictionary = (HashMap<VmTemplate, DiskImageList>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            Map<Guid, Guid> tempMap = new HashMap<Guid, Guid>();
            for (Entry<VmTemplate, DiskImageList> entry : dictionary.entrySet()) {
                tempMap.put(entry.getKey().getId(), null);
            }
            for (Guid templateId : missingTemplateDiskMap.keySet()) {
                if (tempMap.containsKey(templateId)) {
                    for (Disk disk : missingTemplateDiskMap.get(templateId)) {
                        addDiskImportData(disk.getId(), filteredStorageDomains, ((DiskImage) disk).getVolumeType(), new EntityModel(true));
                    }
                } else {
                    showCloseMessage(ConstantsManager.getInstance().getConstants().errorTemplateCannotBeFoundMessage());
                    return;
                }
            }
            ImportVmModel.this.setMessage(ConstantsManager.getInstance().getConstants().importMissingStorages());
            for (ImportVmData vmData : (List<ImportVmData>) getItems()) {
                if (!NGuid.Empty.equals(vmData.getVm().getVmtGuid()) && missingTemplateDiskMap.containsKey(vmData.getVm().getVmtGuid())) {
                    vmData.setTemplateExistsInSetup(false);
                }
            }
            postInitDisks();
        }
    }));
}
#method_after
protected void getTemplatesFromExportDomain() {
    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(storagePool.getId(), ((StorageDomain) getEntity()).getId());
    Frontend.RunQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar, new AsyncQuery(ImportVmModel.this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            Map<VmTemplate, DiskImageList> dictionary = (HashMap<VmTemplate, DiskImageList>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            Map<Guid, Guid> tempMap = new HashMap<Guid, Guid>();
            for (Entry<VmTemplate, DiskImageList> entry : dictionary.entrySet()) {
                tempMap.put(entry.getKey().getId(), null);
            }
            for (Guid templateId : missingTemplateDiskMap.keySet()) {
                if (tempMap.containsKey(templateId)) {
                    for (Disk disk : missingTemplateDiskMap.get(templateId)) {
                        addDiskImportData(disk.getId(), filteredStorageDomains, ((DiskImage) disk).getVolumeType(), new EntityModel(true));
                    }
                } else {
                    showCloseMessage(ConstantsManager.getInstance().getConstants().errorTemplateCannotBeFoundMessage());
                    return;
                }
            }
            ImportVmModel.this.setMessage(ConstantsManager.getInstance().getConstants().importMissingStorages());
            for (ImportVmData vmData : (List<ImportVmData>) getItems()) {
                if (!NGuid.Empty.equals(vmData.getVm().getVmtGuid()) && missingTemplateDiskMap.containsKey(vmData.getVm().getVmtGuid())) {
                    vmData.setTemplateExistsInSetup(false);
                }
            }
            postInitDisks();
        }
    }));
}
#end_block

#method_before
private ArrayList<storage_domains> getStorageDomainsByIds(ArrayList<Guid> getstorage_ids) {
    ArrayList<storage_domains> domains = new ArrayList<storage_domains>();
    for (Guid storageDomainId : getstorage_ids) {
        for (storage_domains storageDomain : filteredStorageDomains) {
            if (storageDomainId.equals(storageDomain.getId())) {
                domains.add(storageDomain);
                break;
            }
        }
    }
    return domains;
}
#method_after
private ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> getstorage_ids) {
    ArrayList<StorageDomain> domains = new ArrayList<StorageDomain>();
    for (Guid storageDomainId : getstorage_ids) {
        for (StorageDomain storageDomain : filteredStorageDomains) {
            if (storageDomainId.equals(storageDomain.getId())) {
                domains.add(storageDomain);
                break;
            }
        }
    }
    return domains;
}
#end_block

#method_before
public ImportDiskData getDiskImportData(Guid diskId) {
    ImportDiskData importData = diskImportDataMap.get(diskId);
    if (importData != null) {
        if (storage.getSelectedItem() == null) {
            importData.setSelectedStorageDomain((storage_domains) storage.getSelectedItem());
        }
    }
    return importData;
}
#method_after
public ImportDiskData getDiskImportData(Guid diskId) {
    ImportDiskData importData = diskImportDataMap.get(diskId);
    if (importData != null) {
        if (storage.getSelectedItem() == null) {
            importData.setSelectedStorageDomain((StorageDomain) storage.getSelectedItem());
        }
    }
    return importData;
}
#end_block

#method_before
protected void addDiskImportData(Guid diskId, ArrayList<storage_domains> storageDomains, VolumeType volumeType, EntityModel collapseSnapshots) {
    ImportDiskData data = new ImportDiskData();
    data.setCollapseSnapshot(collapseSnapshots);
    data.setAllStorageDomains(filteredStorageDomains);
    data.setStorageDomains(storageDomains);
    data.setVolumeType(volumeType);
    data.setStorageQuotaList(storageQuotaMap);
    diskImportDataMap.put(diskId, data);
}
#method_after
protected void addDiskImportData(Guid diskId, ArrayList<StorageDomain> storageDomains, VolumeType volumeType, EntityModel collapseSnapshots) {
    ImportDiskData data = new ImportDiskData();
    data.setCollapseSnapshot(collapseSnapshots);
    data.setAllStorageDomains(filteredStorageDomains);
    data.setStorageDomains(storageDomains);
    data.setVolumeType(volumeType);
    data.setStorageQuotaList(storageQuotaMap);
    diskImportDataMap.put(diskId, data);
}
#end_block

#method_before
@Override
public void setItems(final Iterable value) {
    // $NON-NLS-1$
    String vm_guidKey = "_VM_ID =";
    // $NON-NLS-1$
    String orKey = " or ";
    StringBuilder searchPattern = new StringBuilder();
    // $NON-NLS-1$
    searchPattern.append("VM: ");
    final List<VM> list = (List<VM>) value;
    for (int i = 0; i < list.size(); i++) {
        VM vm = list.get(i);
        searchPattern.append(vm_guidKey);
        searchPattern.append(vm.getId().toString());
        if (i < list.size() - 1) {
            searchPattern.append(orKey);
        }
    }
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(searchPattern.toString(), SearchType.VM), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            List<VM> vmList = (List<VM>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<ImportVmData> vmDataList = new ArrayList<ImportVmData>();
            for (VM vm : (Iterable<VM>) value) {
                ImportVmData vmData = new ImportVmData(vm);
                boolean vmExistsInSystem = vmList.contains(vm);
                vmData.setExistsInSystem(vmExistsInSystem);
                if (vmExistsInSystem) {
                    vmData.getClone().setEntity(true);
                    vmData.getClone().getChangeProhibitionReasons().add(ConstantsManager.getInstance().getConstants().importVMThatExistsInSystemMustClone());
                    vmData.getClone().setIsChangable(false);
                }
                vmDataList.add(vmData);
            }
            ImportVmModel.super.setItems(vmDataList);
        }
    }));
}
#method_after
@Override
public void setItems(final Iterable value) {
    // $NON-NLS-1$
    String vm_guidKey = "_VM_ID =";
    // $NON-NLS-1$
    String orKey = " or ";
    StringBuilder searchPattern = new StringBuilder();
    // $NON-NLS-1$
    searchPattern.append("VM: ");
    final List<VM> list = (List<VM>) value;
    for (int i = 0; i < list.size(); i++) {
        VM vm = list.get(i);
        searchPattern.append(vm_guidKey);
        searchPattern.append(vm.getId().toString());
        if (i < list.size() - 1) {
            searchPattern.append(orKey);
        }
    }
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(searchPattern.toString(), SearchType.VM), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            List<VM> vmList = (List<VM>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<ImportVmData> vmDataList = new ArrayList<ImportVmData>();
            for (VM vm : (Iterable<VM>) value) {
                ImportVmData vmData = new ImportVmData(vm);
                boolean vmExistsInSystem = vmList.contains(vm);
                vmData.setExistsInSystem(vmExistsInSystem);
                if (vmExistsInSystem) {
                    vmData.getClone().setEntity(true);
                    vmData.getClone().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().importVMThatExistsInSystemMustClone());
                    vmData.getClone().setIsChangable(false);
                }
                vmDataList.add(vmData);
            }
            ImportVmModel.super.setItems(vmDataList);
        }
    }));
}
#end_block

#method_before
public String getVmPoolName() {
    return getVmPool() != null ? getVmPool().getVmPoolName() : null;
}
#method_after
public String getVmPoolName() {
    return getVmPool() != null ? getVmPool().getName() : null;
}
#end_block

#method_before
protected static boolean isVmFree(Guid vmId, ArrayList<String> messages) {
    boolean returnValue = true;
    // check that there isn't another user already attached to this VM:
    if (vmAssignedToUser(vmId, messages)) {
        returnValue = false;
    } else // check that vm can be run:
    if (!canRunPoolVm(vmId, messages)) {
        returnValue = false;
    } else // check vm images:
    {
        SnapshotsValidator snapshotsValidator = new SnapshotsValidator();
        ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vmId);
        ValidationResult vmInPreviewResult = snapshotsValidator.vmNotInPreview(vmId);
        if (!vmDuringSnapshotResult.isValid()) {
            messages.add(vmDuringSnapshotResult.getMessage().name());
            returnValue = false;
        } else if (!vmInPreviewResult.isValid()) {
            messages.add(vmInPreviewResult.getMessage().name());
            returnValue = false;
        } else {
            List<Disk> disks = DbFacade.getInstance().getDiskDao().getAllForVm(vmId);
            List<DiskImage> vmImages = ImagesHandler.filterImageDisks(disks, true, true);
            Guid storageDomainId = vmImages.size() > 0 ? vmImages.get(0).getStorageIds().get(0) : Guid.Empty;
            VM vm = DbFacade.getInstance().getVmDao().get(vmId);
            storage_pool sp = DbFacade.getInstance().getStoragePoolDao().get(vm.getStoragePoolId());
            ValidationResult spUpResult = new StoragePoolValidator(sp).isUp();
            if (!spUpResult.isValid()) {
                messages.add(spUpResult.getMessage().name());
                returnValue = false;
            }
            if (returnValue) {
                returnValue = ImagesHandler.PerformImagesChecks(messages, vm.getStoragePoolId(), storageDomainId, false, true, false, false, !Guid.Empty.equals(storageDomainId), true, disks);
            }
            if (returnValue) {
                ValidationResult vmNotLockResult = new VmValidator(vm).vmNotLocked();
                if (!vmNotLockResult.isValid()) {
                    messages.add(vmNotLockResult.getMessage().name());
                    returnValue = false;
                }
            }
        }
        if (!returnValue) {
            if (messages != null) {
                messages.add(VdcBllMessages.VAR__TYPE__DESKTOP_POOL.toString());
                messages.add(VdcBllMessages.VAR__ACTION__ATTACH_DESKTOP_TO.toString());
            }
        }
    }
    return returnValue;
}
#method_after
protected static boolean isVmFree(Guid vmId, ArrayList<String> messages) {
    // check that there isn't another user already attached to this VM:
    if (vmAssignedToUser(vmId, messages)) {
        return failVmFree(messages);
    }
    // check that vm can be run:
    if (!canRunPoolVm(vmId, messages)) {
        return failVmFree(messages);
    }
    // check vm images:
    SnapshotsValidator snapshotsValidator = new SnapshotsValidator();
    ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vmId);
    if (!vmDuringSnapshotResult.isValid()) {
        return failVmFree(messages, vmDuringSnapshotResult.getMessage().name());
    }
    ValidationResult vmInPreviewResult = snapshotsValidator.vmNotInPreview(vmId);
    if (!vmInPreviewResult.isValid()) {
        return failVmFree(messages, vmInPreviewResult.getMessage().name());
    }
    List<Disk> disks = DbFacade.getInstance().getDiskDao().getAllForVm(vmId);
    List<DiskImage> vmImages = ImagesHandler.filterImageDisks(disks, true, true);
    VM vm = DbFacade.getInstance().getVmDao().get(vmId);
    storage_pool sp = DbFacade.getInstance().getStoragePoolDao().get(vm.getStoragePoolId());
    ValidationResult spUpResult = new StoragePoolValidator(sp).isUp();
    if (!spUpResult.isValid()) {
        return failVmFree(messages, spUpResult.getMessage().name());
    }
    Guid storageDomainId = vmImages.size() > 0 ? vmImages.get(0).getStorageIds().get(0) : Guid.Empty;
    if (!Guid.Empty.equals(storageDomainId)) {
        StorageDomainValidator storageDomainValidator = new StorageDomainValidator(DbFacade.getInstance().getStorageDomainDao().getForStoragePool(storageDomainId, sp.getId()));
        ValidationResult domainActiveResult = storageDomainValidator.isDomainExistAndActive();
        if (!domainActiveResult.isValid()) {
            return failVmFree(messages, domainActiveResult.getMessage().name());
        }
    }
    if (!ImagesHandler.PerformImagesChecks(messages, vm.getStoragePoolId(), storageDomainId, false, true, false, false, false, true, disks)) {
        return failVmFree(messages);
    }
    ValidationResult vmNotLockResult = new VmValidator(vm).vmNotLocked();
    if (!vmNotLockResult.isValid()) {
        return failVmFree(messages, vmNotLockResult.getMessage().name());
    }
    return true;
}
#end_block

#method_before
private static boolean vmAssignedToUser(Guid vmId, ArrayList<String> messages) {
    boolean vmAssignedToUser = false;
    if (DbFacade.getInstance().getDbUserDao().getAllForVm(vmId).size() > 0) {
        vmAssignedToUser = true;
        if (messages != null) {
            messages.add(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL.toString());
        }
    }
    return vmAssignedToUser;
}
#method_after
private static boolean vmAssignedToUser(Guid vmId, ArrayList<String> messages) {
    if (DbFacade.getInstance().getDbUserDao().getAllForVm(vmId).size() > 0) {
        messages.add(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_WITH_USERS_ATTACHED_TO_POOL.toString());
        return true;
    }
    return false;
}
#end_block

#method_before
protected List<DiskImage> getAllImageSnapshots(DiskImage diskImage) {
    return ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getItGuid());
}
#method_after
protected List<DiskImage> getAllImageSnapshots(DiskImage diskImage) {
    return ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getImageTemplateId());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(getParameters().getStorageDomainId(), getParameters().getStoragePoolId());
    if (storage == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
        return false;
    }
    if (storage.getstatus() == null || storage.getstatus() != StorageDomainStatus.Active) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL);
        return false;
    }
    if (storage.getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        return false;
    }
    // getVm() is the vm from the export domain
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND_ON_EXPORT_DOMAIN);
        return false;
    }
    // not using getVm() since its overridden to get vm from export domain
    VM vm = getVmDAO().get(getVmId());
    if (vm != null && vm.getStatus() == VMStatus.ImageLocked) {
        if (AsyncTaskManager.getInstance().hasTasksForEntityIdAndAction(vm.getId(), VdcActionType.ExportVm)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_DURING_EXPORT);
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(getParameters().getStorageDomainId(), getParameters().getStoragePoolId());
    if (storage == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
        return false;
    }
    if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL);
        return false;
    }
    if (storage.getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        return false;
    }
    // getVm() is the vm from the export domain
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND_ON_EXPORT_DOMAIN);
        return false;
    }
    // not using getVm() since its overridden to get vm from export domain
    VM vm = getVmDAO().get(getVmId());
    if (vm != null && vm.getStatus() == VMStatus.ImageLocked) {
        if (AsyncTaskManager.getInstance().hasTasksForEntityIdAndAction(vm.getId(), VdcActionType.ExportVm)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_DURING_EXPORT);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private storage_domains getStorageDomainById(Guid storageDomainId, Guid storagePoolId) {
    if (storageDomainsMap.containsKey(storageDomainId)) {
        return storageDomainsMap.get(storageDomainId);
    }
    storage_domains storageDomain = getStorageDomainDao().getForStoragePool(storageDomainId, storagePoolId);
    storageDomainsMap.put(storageDomainId, storageDomain);
    return storageDomain;
}
#method_after
private StorageDomain getStorageDomainById(Guid storageDomainId, Guid storagePoolId) {
    if (storageDomainsMap.containsKey(storageDomainId)) {
        return storageDomainsMap.get(storageDomainId);
    }
    StorageDomain storageDomain = getStorageDomainDao().getForStoragePool(storageDomainId, storagePoolId);
    storageDomainsMap.put(storageDomainId, storageDomain);
    return storageDomain;
}
#end_block

#method_before
private boolean isTemplateInDestStorageDomain(Guid imageId, Guid sourceDomainId) {
    Guid templateId = getDiskImageById(imageId).getItGuid();
    if (!Guid.Empty.equals(templateId)) {
        DiskImage templateImage = getDiskImageDao().get(templateId);
        if (!templateImage.getStorageIds().contains(sourceDomainId)) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return true;
}
#method_after
private boolean isTemplateInDestStorageDomain(Guid imageId, Guid sourceDomainId) {
    Guid templateId = getDiskImageById(imageId).getImageTemplateId();
    if (!Guid.Empty.equals(templateId)) {
        DiskImage templateImage = getDiskImageDao().get(templateId);
        if (!templateImage.getStorageIds().contains(sourceDomainId)) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return true;
}
#end_block

#method_before
protected boolean isValidSpaceRequirements() {
    Map<Guid, List<DiskImage>> storageDomainsImagesMap = new HashMap<Guid, List<DiskImage>>();
    for (LiveMigrateDiskParameters parameters : getParameters().getParametersList()) {
        MultiValueMapUtils.addToMap(parameters.getStorageDomainId(), getDiskImageById(parameters.getImageId()), storageDomainsImagesMap);
    }
    for (Map.Entry<Guid, List<DiskImage>> entry : storageDomainsImagesMap.entrySet()) {
        Guid destDomainId = entry.getKey();
        List<DiskImage> disksList = entry.getValue();
        Guid storagePoolId = disksList.get(0).getStoragePoolId().getValue();
        storage_domains destDomain = getStorageDomainById(destDomainId, storagePoolId);
        if (!isStorageDomainWithinThresholds(destDomain)) {
            return false;
        }
        long totalImagesSize = 0;
        for (DiskImage diskImage : disksList) {
            Guid templateId = diskImage.getItGuid();
            List<DiskImage> allImageSnapshots = ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), templateId);
            diskImage.getSnapshots().addAll(allImageSnapshots);
            totalImagesSize += Math.round(diskImage.getActualDiskWithSnapshotsSize());
        }
        if (!doesStorageDomainhaveSpaceForRequest(destDomain, totalImagesSize)) {
            return false;
        }
    }
    return true;
}
#method_after
protected boolean isValidSpaceRequirements() {
    Map<Guid, List<DiskImage>> storageDomainsImagesMap = new HashMap<Guid, List<DiskImage>>();
    for (LiveMigrateDiskParameters parameters : getParameters().getParametersList()) {
        MultiValueMapUtils.addToMap(parameters.getStorageDomainId(), getDiskImageById(parameters.getImageId()), storageDomainsImagesMap);
    }
    for (Map.Entry<Guid, List<DiskImage>> entry : storageDomainsImagesMap.entrySet()) {
        Guid destDomainId = entry.getKey();
        List<DiskImage> disksList = entry.getValue();
        Guid storagePoolId = disksList.get(0).getStoragePoolId().getValue();
        StorageDomain destDomain = getStorageDomainById(destDomainId, storagePoolId);
        if (!isStorageDomainWithinThresholds(destDomain)) {
            return false;
        }
        long totalImagesSize = 0;
        for (DiskImage diskImage : disksList) {
            Guid templateId = diskImage.getImageTemplateId();
            List<DiskImage> allImageSnapshots = ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), templateId);
            diskImage.getSnapshots().addAll(allImageSnapshots);
            totalImagesSize += Math.round(diskImage.getActualDiskWithSnapshotsSize());
        }
        if (!doesStorageDomainhaveSpaceForRequest(destDomain, totalImagesSize)) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
protected boolean isStorageDomainWithinThresholds(storage_domains storageDomain) {
    return validate(new StorageDomainValidator(storageDomain).isDomainWithinThresholds());
}
#method_after
protected boolean isStorageDomainWithinThresholds(StorageDomain storageDomain) {
    return validate(new StorageDomainValidator(storageDomain).isDomainWithinThresholds());
}
#end_block

#method_before
protected boolean doesStorageDomainhaveSpaceForRequest(storage_domains storageDomain, long totalImagesSize) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(totalImagesSize));
}
#method_after
protected boolean doesStorageDomainhaveSpaceForRequest(StorageDomain storageDomain, long totalImagesSize) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(totalImagesSize));
}
#end_block

#method_before
private String GetValue(Object obj) {
    if (obj instanceof VM) {
        return ((VM) obj).getVmName();
    }
    if (obj instanceof VmPool) {
        return ((VmPool) obj).getVmPoolName();
    }
    throw new NotImplementedException();
}
#method_after
private String GetValue(Object obj) {
    if (obj instanceof VM) {
        return ((VM) obj).getVmName();
    }
    if (obj instanceof VmPool) {
        return ((VmPool) obj).getName();
    }
    throw new NotImplementedException();
}
#end_block

#method_before
@Override
public int compare(storage_domains x, storage_domains y) {
    return x.getstorage_name().compareTo(y.getstorage_name());
}
#method_after
@Override
public int compare(StorageDomain x, StorageDomain y) {
    return x.getStorageName().compareTo(y.getStorageName());
}
#end_block

#method_before
@Override
public int compare(StorageDomainModel x, StorageDomainModel y) {
    return x.getStorageDomain().getstorage_name().compareTo(y.getStorageDomain().getstorage_name());
}
#method_after
@Override
public int compare(StorageDomainModel x, StorageDomainModel y) {
    return x.getStorageDomain().getStorageName().compareTo(y.getStorageDomain().getStorageName());
}
#end_block

#method_before
public static boolean IsAnyStorageDomainIsMatserAndActive(List<storage_domains> sdl) {
    for (storage_domains a : sdl) {
        if (a.getstorage_domain_type() == StorageDomainType.Master && a.getstatus() != null && a.getstatus() == StorageDomainStatus.Active) {
            return true;
        }
    }
    return false;
}
#method_after
public static boolean IsAnyStorageDomainIsMatserAndActive(List<StorageDomain> sdl) {
    for (StorageDomain a : sdl) {
        if (a.getStorageDomainType() == StorageDomainType.Master && a.getStatus() != null && a.getStatus() == StorageDomainStatus.Active) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
public static boolean IsDataActiveStorageDomain(storage_domains storageDomain) {
    boolean isData = storageDomain.getstorage_domain_type() == StorageDomainType.Data || storageDomain.getstorage_domain_type() == StorageDomainType.Master;
    boolean isActive = IsActiveStorageDomain(storageDomain);
    return isData && isActive;
}
#method_after
public static boolean IsDataActiveStorageDomain(StorageDomain storageDomain) {
    boolean isData = storageDomain.getStorageDomainType() == StorageDomainType.Data || storageDomain.getStorageDomainType() == StorageDomainType.Master;
    boolean isActive = IsActiveStorageDomain(storageDomain);
    return isData && isActive;
}
#end_block

#method_before
public static boolean IsActiveStorageDomain(storage_domains storageDomain) {
    boolean isActive = storageDomain.getstatus() != null && storageDomain.getstatus() == StorageDomainStatus.Active;
    return isActive;
}
#method_after
public static boolean IsActiveStorageDomain(StorageDomain storageDomain) {
    boolean isActive = storageDomain.getStatus() != null && storageDomain.getStatus() == StorageDomainStatus.Active;
    return isActive;
}
#end_block

#method_before
public static boolean IsSDItemExistInList(ArrayList<storage_domains> items, Guid id) {
    for (storage_domains b : items) {
        if (b.getId().equals(id)) {
            return true;
        }
    }
    return false;
}
#method_after
public static boolean IsSDItemExistInList(ArrayList<StorageDomain> items, Guid id) {
    for (StorageDomain b : items) {
        if (b.getId().equals(id)) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
public static ArrayList<storage_domains> FindAllStorageDomainsBySharedStatus(ArrayList<storage_domains> items, StorageDomainSharedStatus status) {
    ArrayList<storage_domains> ret = new ArrayList<storage_domains>();
    for (storage_domains i : items) {
        if (i.getstorage_domain_shared_status() == status) {
            ret.add(i);
        }
    }
    return ret;
}
#method_after
public static ArrayList<StorageDomain> FindAllStorageDomainsBySharedStatus(ArrayList<StorageDomain> items, StorageDomainSharedStatus status) {
    ArrayList<StorageDomain> ret = new ArrayList<StorageDomain>();
    for (StorageDomain i : items) {
        if (i.getStorageDomainSharedStatus() == status) {
            ret.add(i);
        }
    }
    return ret;
}
#end_block

#method_before
public static storage_domains getStorageById(Guid storageId, ArrayList<storage_domains> storageDomains) {
    for (storage_domains storage : storageDomains) {
        if (storage.getId().equals(storageId)) {
            return storage;
        }
    }
    return null;
}
#method_after
public static StorageDomain getStorageById(Guid storageId, ArrayList<StorageDomain> storageDomains) {
    for (StorageDomain storage : storageDomains) {
        if (storage.getId().equals(storageId)) {
            return storage;
        }
    }
    return null;
}
#end_block

#method_before
public static ArrayList<storage_domains> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<storage_domains> storageDomains) {
    ArrayList<storage_domains> list = new ArrayList<storage_domains>();
    for (Guid storageId : storageIds) {
        storage_domains storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(getStorageById(storageId, storageDomains));
        }
    }
    return list;
}
#method_after
public static ArrayList<StorageDomain> getStorageDomainsByIds(ArrayList<Guid> storageIds, ArrayList<StorageDomain> storageDomains) {
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (Guid storageId : storageIds) {
        StorageDomain storageDomain = getStorageById(storageId, storageDomains);
        if (storageDomain != null) {
            list.add(getStorageById(storageId, storageDomains));
        }
    }
    return list;
}
#end_block

#method_before
public static ArrayList<storage_domains> getStorageDomainsDisjoint(ArrayList<DiskModel> disks, ArrayList<storage_domains> storageDomains) {
    ArrayList<ArrayList<storage_domains>> storageDomainslists = new ArrayList<ArrayList<storage_domains>>();
    for (DiskModel diskModel : disks) {
        ArrayList<storage_domains> list = getStorageDomainsByIds(((DiskImage) diskModel.getDisk()).getStorageIds(), storageDomains);
        storageDomainslists.add(list);
    }
    return Intersection(storageDomainslists);
}
#method_after
public static ArrayList<StorageDomain> getStorageDomainsDisjoint(ArrayList<DiskModel> disks, ArrayList<StorageDomain> storageDomains) {
    ArrayList<ArrayList<StorageDomain>> storageDomainslists = new ArrayList<ArrayList<StorageDomain>>();
    for (DiskModel diskModel : disks) {
        ArrayList<StorageDomain> list = getStorageDomainsByIds(((DiskImage) diskModel.getDisk()).getStorageIds(), storageDomains);
        storageDomainslists.add(list);
    }
    return Intersection(storageDomainslists);
}
#end_block

#method_before
@Override
public boolean Match(storage_domains source) {
    return id.equals(source.getId());
}
#method_after
@Override
public boolean Match(StorageDomain source) {
    return id.equals(source.getId());
}
#end_block

#method_before
@Override
public boolean Match(storage_domains source) {
    return name.equals(source.getstorage_name());
}
#method_after
@Override
public boolean Match(StorageDomain source) {
    return name.equals(source.getStorageName());
}
#end_block

#method_before
public storage_domains getstorageDomain() {
    return privatestorageDomain;
}
#method_after
public StorageDomain getstorageDomain() {
    return privatestorageDomain;
}
#end_block

#method_before
public void setstorageDomain(storage_domains value) {
    privatestorageDomain = value;
}
#method_after
public void setstorageDomain(StorageDomain value) {
    privatestorageDomain = value;
}
#end_block

#method_before
private void setIsBootFromNetworkAllowedForVm(VM vm) {
    AsyncQuery _asyncQuery2 = new AsyncQuery();
    _asyncQuery2.setModel(this);
    _asyncQuery2.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model3, Object ReturnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model3;
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery2);
}
#method_after
private void setIsBootFromNetworkAllowedForVm(VM vm) {
    AsyncQuery _asyncQuery2 = new AsyncQuery();
    _asyncQuery2.setModel(this);
    _asyncQuery2.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model3, Object ReturnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model3;
            boolean hasNics = ((ArrayList<VmNetworkInterface>) ((VdcQueryReturnValue) ReturnValue).getReturnValue()).size() > 0;
            if (!hasNics) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getNetworkOption().setIsChangable(false);
                bootSequenceModel.getNetworkOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one network interface defined to boot from network.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmInterfacesByVmId, new IdQueryParameters(vm.getId()), _asyncQuery2);
}
#end_block

#method_before
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#method_after
private void setIsBootFromHardDiskAllowedForVm(VM vm) {
    AsyncQuery vmDisksQuery = new AsyncQuery();
    vmDisksQuery.setModel(this);
    vmDisksQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            UserPortalListModel userPortalListModel = (UserPortalListModel) model;
            ArrayList<Disk> vmDisks = (ArrayList<Disk>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            boolean hasBootableDisk = false;
            for (Disk disk : vmDisks) {
                if (disk.isBoot()) {
                    hasBootableDisk = true;
                    break;
                }
            }
            if (!hasBootableDisk) {
                BootSequenceModel bootSequenceModel = ((RunOnceModel) userPortalListModel.getWindow()).getBootSequence();
                bootSequenceModel.getHardDiskOption().setIsChangable(false);
                bootSequenceModel.getHardDiskOption().setChangeProhibitionReason(// $NON-NLS-1$
                "Virtual Machine must have at least one bootable disk defined to boot from hard disk.");
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(vm.getId()), vmDisksQuery);
}
#end_block

#method_before
public void PostVmNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    gettempVm().setVmType(model.getVmType());
    gettempVm().setVmtGuid(template.getId());
    gettempVm().setVmName(name);
    gettempVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    gettempVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    gettempVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    gettempVm().setVmDescription((String) model.getDescription().getEntity());
    gettempVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    gettempVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    gettempVm().setVdsGroupId(newClusterID);
    gettempVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    gettempVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    gettempVm().setAutoSuspend(false);
    gettempVm().setStateless((Boolean) model.getIsStateless().getEntity());
    gettempVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    gettempVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    gettempVm().setDefaultBootSequence(model.getBootSequence());
    gettempVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    gettempVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    gettempVm().setKernelUrl((String) model.getKernel_path().getEntity());
    gettempVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    gettempVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    gettempVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    gettempVm().setPriority((Integer) prioritySelectedItem.getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        gettempVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    gettempVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        gettempVm().setDedicatedVmForVds(null);
    } else {
        gettempVm().setDedicatedVmForVds(defaultHost.getId());
    }
    gettempVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        gettempVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        gettempVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        gettempVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        gettempVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    }
    if (model.getIsNew()) {
        if (gettempVm().getVmtGuid().equals(NGuid.Empty)) {
            AddVmFromScratchParameters parameters = new AddVmFromScratchParameters(gettempVm(), new ArrayList<DiskImage>(), NGuid.Empty);
            parameters.setMakeCreatorExplicitOwner(true);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    stopProgress(result.getState());
                    cancel();
                }
            }, this);
        } else {
            setstorageDomain((storage_domains) model.getStorageDomain().getSelectedItem());
            if ((Boolean) model.getProvisioning().getEntity()) {
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model, Object result) {
                        UserPortalListModel userPortalListModel1 = (UserPortalListModel) model;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result;
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : ((UnitVmModel) userPortalListModel1.getWindow()).getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            if (disk != null) {
                                templateDisk.setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                templateDisk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), getstorageDomain().getstorage_type()));
                            }
                        }
                        HashMap<Guid, DiskImage> dict = new HashMap<Guid, DiskImage>();
                        for (DiskImage a : templateDisks) {
                            dict.put(a.getId(), a);
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(gettempVm(), dict, getstorageDomain().getId());
                        param.setMakeCreatorExplicitOwner(true);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult a) {
                                stopProgress(a.getState());
                                cancel();
                            }
                        }, this);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                VmManagementParametersBase param = new VmManagementParametersBase(gettempVm());
                param.setStorageDomainId(getstorageDomain().getId());
                param.setMakeCreatorExplicitOwner(true);
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(param);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult a) {
                        stopProgress(a.getState());
                        cancel();
                    }
                }, this);
            }
        }
    } else {
        Guid oldClusterID = ((VM) selectedItem.getEntity()).getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            Frontend.RunAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(newClusterID, gettempVm().getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult a) {
                            stopProgress(a.getState());
                            cancel();
                        }
                    }, this);
                }
            }, this);
        } else {
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult a) {
                    stopProgress(a.getState());
                    cancel();
                }
            }, this);
        }
    }
}
#method_after
public void PostVmNameUniqueCheck(UserPortalListModel userPortalListModel) {
    UnitVmModel model = (UnitVmModel) getWindow();
    UserPortalItemModel selectedItem = (UserPortalItemModel) userPortalListModel.getSelectedItem();
    String name = (String) model.getName().getEntity();
    // Save changes.
    VmTemplate template = (VmTemplate) model.getTemplate().getSelectedItem();
    gettempVm().setVmType(model.getVmType());
    gettempVm().setVmtGuid(template.getId());
    gettempVm().setVmName(name);
    gettempVm().setVmOs((VmOsType) model.getOSType().getSelectedItem());
    gettempVm().setNumOfMonitors((Integer) model.getNumOfMonitors().getSelectedItem());
    gettempVm().setAllowConsoleReconnect((Boolean) model.getAllowConsoleReconnect().getEntity());
    gettempVm().setVmDescription((String) model.getDescription().getEntity());
    gettempVm().setVmDomain(model.getDomain().getIsAvailable() ? (String) model.getDomain().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setVmMemSizeMb((Integer) model.getMemSize().getEntity());
    gettempVm().setMinAllocatedMem((Integer) model.getMinAllocatedMemory().getEntity());
    Guid newClusterID = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    gettempVm().setVdsGroupId(newClusterID);
    gettempVm().setTimeZone((model.getTimeZone().getIsAvailable() && model.getTimeZone().getSelectedItem() != null) ? ((Map.Entry<String, String>) model.getTimeZone().getSelectedItem()).getKey() : // $NON-NLS-1$
    "");
    gettempVm().setNumOfSockets((Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setCpuPerSocket(Integer.parseInt(model.getTotalCPUCores().getEntity().toString()) / (Integer) model.getNumOfSockets().getSelectedItem());
    gettempVm().setUsbPolicy((UsbPolicy) model.getUsbPolicy().getSelectedItem());
    gettempVm().setAutoSuspend(false);
    gettempVm().setStateless((Boolean) model.getIsStateless().getEntity());
    gettempVm().setDeleteProtected((Boolean) model.getIsDeleteProtected().getEntity());
    gettempVm().setSmartcardEnabled((Boolean) model.getIsSmartcardEnabled().getEntity());
    gettempVm().setDefaultBootSequence(model.getBootSequence());
    gettempVm().setIsoPath(model.getCdImage().getIsChangable() ? (String) model.getCdImage().getSelectedItem() : // $NON-NLS-1$
    "");
    gettempVm().setAutoStartup((Boolean) model.getIsHighlyAvailable().getEntity());
    gettempVm().setInitrdUrl((String) model.getInitrd_path().getEntity());
    gettempVm().setKernelUrl((String) model.getKernel_path().getEntity());
    gettempVm().setKernelParams((String) model.getKernel_parameters().getEntity());
    gettempVm().setCustomProperties(model.getCustomPropertySheet().getEntity());
    EntityModel displayProtocolSelectedItem = (EntityModel) model.getDisplayProtocol().getSelectedItem();
    gettempVm().setDefaultDisplayType((DisplayType) displayProtocolSelectedItem.getEntity());
    EntityModel prioritySelectedItem = (EntityModel) model.getPriority().getSelectedItem();
    gettempVm().setPriority((Integer) prioritySelectedItem.getEntity());
    if (model.getQuota().getSelectedItem() != null) {
        gettempVm().setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
    }
    gettempVm().setCpuPinning((String) model.getCpuPinning().getEntity());
    VDS defaultHost = (VDS) model.getDefaultHost().getSelectedItem();
    if ((Boolean) model.getIsAutoAssign().getEntity()) {
        gettempVm().setDedicatedVmForVds(null);
    } else {
        gettempVm().setDedicatedVmForVds(defaultHost.getId());
    }
    gettempVm().setMigrationSupport(MigrationSupport.MIGRATABLE);
    if ((Boolean) model.getRunVMOnSpecificHost().getEntity()) {
        gettempVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST);
        gettempVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    } else if ((Boolean) model.getDontMigrateVM().getEntity()) {
        gettempVm().setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE);
        gettempVm().setUseHostCpuFlags((Boolean) model.getHostCpu().getEntity());
    }
    if (model.getIsNew()) {
        if (gettempVm().getVmtGuid().equals(NGuid.Empty)) {
            AddVmFromScratchParameters parameters = new AddVmFromScratchParameters(gettempVm(), new ArrayList<DiskImage>(), NGuid.Empty);
            parameters.setMakeCreatorExplicitOwner(true);
            Frontend.RunAction(VdcActionType.AddVmFromScratch, parameters, new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    stopProgress(result.getState());
                    cancel();
                }
            }, this);
        } else {
            setstorageDomain((StorageDomain) model.getStorageDomain().getSelectedItem());
            if ((Boolean) model.getProvisioning().getEntity()) {
                AsyncQuery _asyncQuery = new AsyncQuery();
                _asyncQuery.setModel(this);
                _asyncQuery.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model, Object result) {
                        UserPortalListModel userPortalListModel1 = (UserPortalListModel) model;
                        ArrayList<DiskImage> templateDisks = (ArrayList<DiskImage>) result;
                        for (DiskImage templateDisk : templateDisks) {
                            DiskModel disk = null;
                            for (DiskModel a : ((UnitVmModel) userPortalListModel1.getWindow()).getDisks()) {
                                if (templateDisk.getId().equals(a.getDisk().getId())) {
                                    disk = a;
                                    break;
                                }
                            }
                            if (disk != null) {
                                templateDisk.setVolumeType((VolumeType) disk.getVolumeType().getSelectedItem());
                                templateDisk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat((VolumeType) disk.getVolumeType().getSelectedItem(), getstorageDomain().getStorageType()));
                            }
                        }
                        HashMap<Guid, DiskImage> dict = new HashMap<Guid, DiskImage>();
                        for (DiskImage a : templateDisks) {
                            dict.put(a.getId(), a);
                        }
                        AddVmFromTemplateParameters param = new AddVmFromTemplateParameters(gettempVm(), dict, getstorageDomain().getId());
                        param.setMakeCreatorExplicitOwner(true);
                        ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                        parameters.add(param);
                        Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new IFrontendMultipleActionAsyncCallback() {

                            @Override
                            public void Executed(FrontendMultipleActionAsyncResult a) {
                                stopProgress(a.getState());
                                cancel();
                            }
                        }, this);
                    }
                };
                AsyncDataProvider.GetTemplateDiskList(_asyncQuery, template.getId());
            } else {
                VmManagementParametersBase param = new VmManagementParametersBase(gettempVm());
                param.setStorageDomainId(getstorageDomain().getId());
                param.setMakeCreatorExplicitOwner(true);
                ArrayList<VdcActionParametersBase> parameters = new ArrayList<VdcActionParametersBase>();
                parameters.add(param);
                Frontend.RunMultipleAction(VdcActionType.AddVm, parameters, new IFrontendMultipleActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendMultipleActionAsyncResult a) {
                        stopProgress(a.getState());
                        cancel();
                    }
                }, this);
            }
        }
    } else {
        Guid oldClusterID = ((VM) selectedItem.getEntity()).getVdsGroupId();
        if (oldClusterID.equals(newClusterID) == false) {
            Frontend.RunAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(newClusterID, gettempVm().getId()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult a) {
                            stopProgress(a.getState());
                            cancel();
                        }
                    }, this);
                }
            }, this);
        } else {
            Frontend.RunAction(VdcActionType.UpdateVm, new VmManagementParametersBase(gettempVm()), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult a) {
                    stopProgress(a.getState());
                    cancel();
                }
            }, this);
        }
    }
}
#end_block

#method_before
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    UnitVmModel model = (UnitVmModel) getWindow();
    if (ev.equals(ItemsChangedEventDefinition) && sender == model.getDataCenter()) {
        VmModel_DataCenter_ItemsChanged();
    } else if (ev.equals(ItemsChangedEventDefinition) && sender == model.getCluster()) {
        VmModel_Cluster_ItemsChanged();
    } else if (ev.equals(ItemsChangedEventDefinition) && sender == model.getDefaultHost()) {
        VmModel_DefaultHost_ItemsChanged();
    } else if (ev.equals(ItemsChangedEventDefinition) && sender == model.getDisplayProtocol()) {
        VmModel_DisplayProtocol_ItemsChanged();
    } else if (ev.equals(ItemsChangedEventDefinition) && sender == model.getPriority()) {
        VmModel_Priority_ItemsChanged();
    } else if (ev.equals(ItemsChangedEventDefinition) && sender == model.getTimeZone()) {
        VmModel_TimeZone_ItemsChanged();
    }
}
#method_after
@Override
public void eventRaised(Event ev, Object sender, EventArgs args) {
    super.eventRaised(ev, sender, args);
    UnitVmModel model = (UnitVmModel) getWindow();
    if (ev.matchesDefinition(ItemsChangedEventDefinition) && sender == model.getDataCenter()) {
        VmModel_DataCenter_ItemsChanged();
    } else if (ev.matchesDefinition(ItemsChangedEventDefinition) && sender == model.getCluster()) {
        VmModel_Cluster_ItemsChanged();
    } else if (ev.matchesDefinition(ItemsChangedEventDefinition) && sender == model.getDefaultHost()) {
        VmModel_DefaultHost_ItemsChanged();
    } else if (ev.matchesDefinition(ItemsChangedEventDefinition) && sender == model.getDisplayProtocol()) {
        VmModel_DisplayProtocol_ItemsChanged();
    } else if (ev.matchesDefinition(ItemsChangedEventDefinition) && sender == model.getPriority()) {
        VmModel_Priority_ItemsChanged();
    } else if (ev.matchesDefinition(ItemsChangedEventDefinition) && sender == model.getTimeZone()) {
        VmModel_TimeZone_ItemsChanged();
    }
}
#end_block

#method_before
public static void GetIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
                for (storage_domains domain : storageDomains) {
                    if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getIsoParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void GetIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getStorageDomainType() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getIsoParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void GetExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
            for (storage_domains domain : storageDomains) {
                if (domain.getstorage_domain_type() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getExportParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void GetExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getExportParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_domains>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(templateId), aQuery);
}
#method_after
public static void GetStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void GetStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_domains>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId), aQuery);
}
#method_after
public static void GetStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId), aQuery);
}
#end_block

#method_before
public static void GetStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (storage_domains) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(storageDomainId), aQuery);
}
#method_after
public static void GetStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(storageDomainId), aQuery);
}
#end_block

#method_before
public static void GetISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> allStorageDomains = (ArrayList<storage_domains>) source;
                ArrayList<storage_domains> isoStorageDomains = new ArrayList<storage_domains>();
                for (storage_domains storageDomain : allStorageDomains) {
                    if (storageDomain.getstorage_domain_type() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<storage_domains>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void GetISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getStorageDomainType() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : new ArrayList<storage_domains>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void GetStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainsByConnection(AsyncQuery aQuery, NGuid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId.getValue());
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void GetStorageDomainsByConnection(AsyncQuery aQuery, NGuid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId.getValue());
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void GetExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, StorageType.NFS, domainType, path), aQuery);
}
#method_after
public static void GetExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, StorageType.NFS, domainType, path), aQuery);
}
#end_block

#method_before
public static void IsStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void IsStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
    "Host: cluster = " + clusterName + " and status = up", SearchType.VDS), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    GetUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
    "Host: cluster = " + clusterName + " and status = up", SearchType.VDS), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void GetPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<storage_domains>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void GetPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static Guid GetEntityGuid(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getId();
    } else if (entity instanceof storage_pool) {
        return ((storage_pool) entity).getId();
    } else if (entity instanceof VDSGroup) {
        return ((VDSGroup) entity).getId();
    } else if (entity instanceof VDS) {
        return ((VDS) entity).getId();
    } else if (entity instanceof storage_domains) {
        return ((storage_domains) entity).getId();
    } else if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getId();
    } else if (entity instanceof VmPool) {
        return ((VmPool) entity).getVmPoolId();
    } else if (entity instanceof DbUser) {
        return ((DbUser) entity).getuser_id();
    } else if (entity instanceof Quota) {
        return ((Quota) entity).getId();
    } else if (entity instanceof DiskImage) {
        return ((DiskImage) entity).getId();
    } else if (entity instanceof GlusterVolumeEntity) {
        return ((GlusterVolumeEntity) entity).getId();
    } else if (entity instanceof Network) {
        return ((Network) entity).getId();
    }
    return new Guid();
}
#method_after
public static Guid GetEntityGuid(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getId();
    } else if (entity instanceof storage_pool) {
        return ((storage_pool) entity).getId();
    } else if (entity instanceof VDSGroup) {
        return ((VDSGroup) entity).getId();
    } else if (entity instanceof VDS) {
        return ((VDS) entity).getId();
    } else if (entity instanceof StorageDomain) {
        return ((StorageDomain) entity).getId();
    } else if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getId();
    } else if (entity instanceof VmPool) {
        return ((VmPool) entity).getVmPoolId();
    } else if (entity instanceof DbUser) {
        return ((DbUser) entity).getuser_id();
    } else if (entity instanceof Quota) {
        return ((Quota) entity).getId();
    } else if (entity instanceof DiskImage) {
        return ((DiskImage) entity).getId();
    } else if (entity instanceof GlusterVolumeEntity) {
        return ((GlusterVolumeEntity) entity).getId();
    } else if (entity instanceof Network) {
        return ((Network) entity).getId();
    }
    return new Guid();
}
#end_block

#method_before
protected boolean canAddVm(List<String> reasons, String name, Guid storagePoolId, int vmPriority) {
    boolean returnValue;
    // Checking if a desktop with same name already exists
    boolean exists = (Boolean) getBackend().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(name)).getReturnValue();
    if (exists) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST.toString());
        }
        return false;
    }
    boolean checkTemplateLock = getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms ? false : true;
    returnValue = verifyAddVM(reasons, vmPriority);
    if (returnValue && !getParameters().getDontCheckTemplateImages()) {
        for (storage_domains storage : destStorages.values()) {
            if (!VmTemplateCommand.isVmTemplateImagesReady(getVmTemplate(), storage.getId(), reasons, false, checkTemplateLock, true, true, storageToDisksMap.get(storage.getId()))) {
                return false;
            }
        }
    }
    return returnValue;
}
#method_after
protected boolean canAddVm(ArrayList<String> reasons, Collection<StorageDomain> destStorages) {
    VmStatic vmStaticFromParams = getParameters().getVmStaticData();
    boolean returnValue = canAddVm(reasons, vmStaticFromParams.getVmName(), getStoragePoolId().getValue(), vmStaticFromParams.getPriority());
    if (returnValue) {
        List<ValidationError> validationErrors = validateCustomProperties(vmStaticFromParams);
        if (!validationErrors.isEmpty()) {
            VmHandler.handleCustomPropertiesError(validationErrors, reasons);
            returnValue = false;
        }
    }
    // check that template image and vm are on the same storage pool
    if (returnValue && shouldCheckSpaceInStorageDomains()) {
        if (!getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer())) {
            reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString());
            returnValue = false;
        } else {
            for (StorageDomain domain : destStorages) {
                StorageDomainValidator storageDomainValidator = new StorageDomainValidator(domain);
                if (!validate(storageDomainValidator.isDomainWithinThresholds()) || !validate(storageDomainValidator.isDomainHasSpaceForRequest(getNeededDiskSize(domain.getId())))) {
                    return false;
                }
            }
        }
    }
    if (returnValue) {
        returnValue = isDedicatedVdsOnSameCluster(vmStaticFromParams);
    }
    return returnValue;
}
#end_block

#method_before
private boolean validateProvidedDestinations() {
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        if (diskImage.getStorageIds() == null || diskImage.getStorageIds().isEmpty()) {
            diskImage.setStorageIds(new ArrayList<Guid>());
            diskImage.getStorageIds().add(getParameters().getStorageDomainId());
        }
        Guid storageDomainId = diskImage.getStorageIds().get(0);
        if (destStorages.get(storageDomainId) == null) {
            storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(storageDomainId, getStoragePoolId());
            StorageDomainValidator validator = new StorageDomainValidator(storage);
            if (!validate(validator.isDomainExistAndActive()) || !validate(validator.domainIsValidDestination())) {
                return false;
            }
            destStorages.put(storage.getId(), storage);
        }
    }
    return true;
}
#method_after
private boolean validateProvidedDestinations() {
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        if (diskImage.getStorageIds() == null || diskImage.getStorageIds().isEmpty()) {
            diskImage.setStorageIds(new ArrayList<Guid>());
            diskImage.getStorageIds().add(getParameters().getStorageDomainId());
        }
        Guid storageDomainId = diskImage.getStorageIds().get(0);
        if (destStorages.get(storageDomainId) == null) {
            StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(storageDomainId, getStoragePoolId());
            StorageDomainValidator validator = new StorageDomainValidator(storage);
            if (!validate(validator.isDomainExistAndActive()) || !validate(validator.domainIsValidDestination())) {
                return false;
            }
            destStorages.put(storage.getId(), storage);
        }
    }
    return true;
}
#end_block

#method_before
protected boolean canAddVm(List<String> reasons, String name, Guid storagePoolId, int vmPriority) {
    boolean returnValue;
    // Checking if a desktop with same name already exists
    boolean exists = (Boolean) getBackend().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(name)).getReturnValue();
    if (exists) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST.toString());
        }
        return false;
    }
    boolean checkTemplateLock = getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms ? false : true;
    returnValue = verifyAddVM(reasons, vmPriority);
    if (returnValue && !getParameters().getDontCheckTemplateImages()) {
        for (storage_domains storage : destStorages.values()) {
            if (!VmTemplateCommand.isVmTemplateImagesReady(getVmTemplate(), storage.getId(), reasons, false, checkTemplateLock, true, true, storageToDisksMap.get(storage.getId()))) {
                return false;
            }
        }
    }
    return returnValue;
}
#method_after
protected boolean canAddVm(List<String> reasons, String name, Guid storagePoolId, int vmPriority) {
    boolean returnValue;
    // Checking if a desktop with same name already exists
    boolean exists = (Boolean) getBackend().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(name)).getReturnValue();
    if (exists) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST.toString());
        }
        return false;
    }
    boolean checkTemplateLock = getParameters().getParentCommand() == VdcActionType.AddVmPoolWithVms ? false : true;
    returnValue = verifyAddVM(reasons, vmPriority);
    if (returnValue && !getParameters().getDontCheckTemplateImages()) {
        for (StorageDomain storage : destStorages.values()) {
            if (!VmTemplateCommand.isVmTemplateImagesReady(getVmTemplate(), storage.getId(), reasons, false, checkTemplateLock, true, true, storageToDisksMap.get(storage.getId()))) {
                return false;
            }
        }
    }
    return returnValue;
}
#end_block

#method_before
@Test
public void canDoActionMissingTemplateDisk() {
    createParameters();
    DiskImage diskImage = initDiskImage(diskImageId);
    diskImage.setItGuid(templateDiskId);
    initDiskImage(templateDiskId);
    initVm(VMStatus.Up, Guid.NewGuid(), diskImageId);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN.toString()));
}
#method_after
@Test
public void canDoActionMissingTemplateDisk() {
    createParameters();
    DiskImage diskImage = initDiskImage(diskImageId);
    diskImage.setImageTemplateId(templateDiskId);
    initDiskImage(templateDiskId);
    initVm(VMStatus.Up, Guid.NewGuid(), diskImageId);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN.toString()));
}
#end_block

#method_before
@Test
public void canDoActionInvalidSourceDomain() {
    createParameters();
    storage_domains storageDomain = initStorageDomain(srcStorageId);
    storageDomain.setstatus(StorageDomainStatus.Locked);
    initDiskImage(diskImageId);
    initVm(VMStatus.Up, Guid.NewGuid(), diskImageId);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString()));
}
#method_after
@Test
public void canDoActionInvalidSourceDomain() {
    createParameters();
    StorageDomain storageDomain = initStorageDomain(srcStorageId);
    storageDomain.setStatus(StorageDomainStatus.Locked);
    initDiskImage(diskImageId);
    initVm(VMStatus.Up, Guid.NewGuid(), diskImageId);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString()));
}
#end_block

#method_before
@Test
public void canDoActionInvalidDestinationDomain() {
    createParameters();
    storage_domains srcStorageDomain = initStorageDomain(srcStorageId);
    srcStorageDomain.setstatus(StorageDomainStatus.Active);
    storage_domains dstStorageDomain = initStorageDomain(dstStorageId);
    dstStorageDomain.setstatus(StorageDomainStatus.Active);
    dstStorageDomain.setstorage_domain_type(StorageDomainType.ISO);
    initDiskImage(diskImageId);
    initVm(VMStatus.Up, Guid.NewGuid(), diskImageId);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL.toString()));
}
#method_after
@Test
public void canDoActionInvalidDestinationDomain() {
    createParameters();
    StorageDomain srcStorageDomain = initStorageDomain(srcStorageId);
    srcStorageDomain.setStatus(StorageDomainStatus.Active);
    StorageDomain dstStorageDomain = initStorageDomain(dstStorageId);
    dstStorageDomain.setStatus(StorageDomainStatus.Active);
    dstStorageDomain.setStorageDomainType(StorageDomainType.ISO);
    initDiskImage(diskImageId);
    initVm(VMStatus.Up, Guid.NewGuid(), diskImageId);
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL.toString()));
}
#end_block

#method_before
private storage_domains initStorageDomain(Guid storageDomainId) {
    storage_domains storageDomain = new storage_domains();
    storageDomain.setId(storageDomainId);
    storageDomain.setstorage_pool_id(storagePoolId);
    when(storageDomainDao.get(any(Guid.class))).thenReturn(storageDomain);
    when(storageDomainDao.getForStoragePool(storageDomainId, storagePoolId)).thenReturn(storageDomain);
    return storageDomain;
}
#method_after
private StorageDomain initStorageDomain(Guid storageDomainId) {
    StorageDomain storageDomain = new StorageDomain();
    storageDomain.setId(storageDomainId);
    storageDomain.setStoragePoolId(storagePoolId);
    when(storageDomainDao.get(any(Guid.class))).thenReturn(storageDomain);
    when(storageDomainDao.getForStoragePool(storageDomainId, storagePoolId)).thenReturn(storageDomain);
    return storageDomain;
}
#end_block

#method_before
protected DiskImage cloneDiskImage(Guid newVmId, Guid storageDomainId, Guid newImageGroupId, Guid newImageGuid, DiskImage srcDiskImage) {
    DiskImage retDiskImage = DiskImage.copyOf(srcDiskImage);
    retDiskImage.setImageId(newImageGuid);
    retDiskImage.setParentId(Guid.Empty);
    retDiskImage.setItGuid(Guid.Empty);
    retDiskImage.setVmSnapshotId(getVmSnapshotId());
    retDiskImage.setId(newImageGroupId);
    retDiskImage.setLastModifiedDate(new Date());
    retDiskImage.setvolumeFormat(srcDiskImage.getVolumeFormat());
    retDiskImage.setVolumeType(srcDiskImage.getVolumeType());
    ArrayList<Guid> storageIds = new ArrayList<Guid>();
    storageIds.add(storageDomainId);
    retDiskImage.setStorageIds(storageIds);
    return retDiskImage;
}
#method_after
protected DiskImage cloneDiskImage(Guid newVmId, Guid storageDomainId, Guid newImageGroupId, Guid newImageGuid, DiskImage srcDiskImage) {
    DiskImage retDiskImage = DiskImage.copyOf(srcDiskImage);
    retDiskImage.setImageId(newImageGuid);
    retDiskImage.setParentId(Guid.Empty);
    retDiskImage.setImageTemplateId(Guid.Empty);
    retDiskImage.setVmSnapshotId(getVmSnapshotId());
    retDiskImage.setId(newImageGroupId);
    retDiskImage.setLastModifiedDate(new Date());
    retDiskImage.setvolumeFormat(srcDiskImage.getVolumeFormat());
    retDiskImage.setVolumeType(srcDiskImage.getVolumeType());
    ArrayList<Guid> storageIds = new ArrayList<Guid>();
    storageIds.add(storageDomainId);
    retDiskImage.setStorageIds(storageIds);
    return retDiskImage;
}
#end_block

#method_before
@Override
protected boolean buildAndCheckDestStorageDomains() {
    if (diskInfoDestinationMap.isEmpty()) {
        List<storage_domains> domains = DbFacade.getInstance().getStorageDomainDao().getAllForStoragePool(getStoragePoolId().getValue());
        Map<Guid, storage_domains> storageDomainsMap = new HashMap<Guid, storage_domains>();
        for (storage_domains storageDomain : domains) {
            StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
            if (validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination())) {
                storageDomainsMap.put(storageDomain.getId(), storageDomain);
            }
        }
        for (Disk disk : getDiskImagesToBeCloned()) {
            DiskImage image = (DiskImage) disk;
            for (Guid storageId : image.getStorageIds()) {
                if (storageDomainsMap.containsKey(storageId)) {
                    diskInfoDestinationMap.put(image.getId(), image);
                    break;
                }
            }
        }
        if (getDiskImagesToBeCloned().size() != diskInfoDestinationMap.size()) {
            logErrorOneOrMoreActiveDomainsAreMissing();
            return false;
        }
        List<Guid> storageDomainDest = new ArrayList<Guid>();
        for (DiskImage diskImage : diskInfoDestinationMap.values()) {
            Guid storageDomainId = diskImage.getStorageIds().get(0);
            if (storageDomainDest.contains(storageDomainId)) {
                destStorages.put(storageDomainId, storageDomainsMap.get(storageDomainId));
            }
            storageDomainDest.add(storageDomainId);
        }
        return true;
    }
    return super.buildAndCheckDestStorageDomains();
}
#method_after
@Override
protected boolean buildAndCheckDestStorageDomains() {
    if (diskInfoDestinationMap.isEmpty()) {
        List<StorageDomain> domains = DbFacade.getInstance().getStorageDomainDao().getAllForStoragePool(getStoragePoolId().getValue());
        Map<Guid, StorageDomain> storageDomainsMap = new HashMap<Guid, StorageDomain>();
        for (StorageDomain storageDomain : domains) {
            StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
            if (validate(validator.isDomainExistAndActive()) && validate(validator.domainIsValidDestination())) {
                storageDomainsMap.put(storageDomain.getId(), storageDomain);
            }
        }
        for (Disk disk : getDiskImagesToBeCloned()) {
            DiskImage image = (DiskImage) disk;
            for (Guid storageId : image.getStorageIds()) {
                if (storageDomainsMap.containsKey(storageId)) {
                    diskInfoDestinationMap.put(image.getId(), image);
                    break;
                }
            }
        }
        if (getDiskImagesToBeCloned().size() != diskInfoDestinationMap.size()) {
            logErrorOneOrMoreActiveDomainsAreMissing();
            return false;
        }
        List<Guid> storageDomainDest = new ArrayList<Guid>();
        for (DiskImage diskImage : diskInfoDestinationMap.values()) {
            Guid storageDomainId = diskImage.getStorageIds().get(0);
            if (storageDomainDest.contains(storageDomainId)) {
                destStorages.put(storageDomainId, storageDomainsMap.get(storageDomainId));
            }
            storageDomainDest.add(storageDomainId);
        }
        return true;
    }
    return super.buildAndCheckDestStorageDomains();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    Map<Guid, storage_domains> domainsMap = new HashMap<Guid, storage_domains>();
    if (!canDoActionBeforeCloneVm(domainsMap)) {
        return false;
    }
    if (getParameters().isImportAsNewEntity()) {
        initImportClonedVm();
    }
    return canDoActionAfterCloneVm(domainsMap);
}
#method_after
@Override
protected boolean canDoAction() {
    Map<Guid, StorageDomain> domainsMap = new HashMap<Guid, StorageDomain>();
    if (!canDoActionBeforeCloneVm(domainsMap)) {
        return false;
    }
    if (getParameters().isImportAsNewEntity()) {
        initImportClonedVm();
    }
    return canDoActionAfterCloneVm(domainsMap);
}
#end_block

#method_before
private boolean canDoActionBeforeCloneVm(Map<Guid, storage_domains> domainsMap) {
    List<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    if (getVm() != null) {
        setDescription(getVmName());
    }
    if (!checkStoragePool()) {
        return false;
    }
    Set<Guid> destGuids = new HashSet<Guid>(imageToDestinationDomainMap.values());
    for (Guid destGuid : destGuids) {
        storage_domains storageDomain = getStorageDomain(destGuid);
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (!validate(validator.isDomainExistAndActive()) || !validate(validator.domainIsValidDestination())) {
            return false;
        }
        domainsMap.put(destGuid, storageDomain);
    }
    if (getParameters().isImportAsNewEntity() && !getParameters().getCopyCollapse()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_CLONE_NOT_COLLAPSED);
    }
    setSourceDomainId(getParameters().getSourceDomainId());
    StorageDomainValidator validator = new StorageDomainValidator(getSourceDomain());
    if (validator.isDomainExistAndActive().isValid() && getSourceDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    List<VM> vms = getVmsFromExportDomain();
    if (vms == null) {
        return false;
    }
    VM vm = LinqUtils.firstOrNull(vms, new Predicate<VM>() {

        @Override
        public boolean eval(VM evalVm) {
            return evalVm.getId().equals(getParameters().getVm().getId());
        }
    });
    if (vm != null) {
        // At this point we should work with the VM that was read from
        // the OVF
        setVm(vm);
        // Iterate over all the VM images (active image and snapshots)
        for (DiskImage image : getVm().getImages()) {
            if (getParameters().getCopyCollapse()) {
                // a match with the image from the VM.
                for (DiskImage p : imageList) {
                    // only if requested by the user
                    if (p.getImageId().equals(image.getImageId())) {
                        if (p.getVolumeFormat() != null) {
                            image.setvolumeFormat(p.getVolumeFormat());
                        }
                        if (p.getVolumeType() != null) {
                            image.setVolumeType(p.getVolumeType());
                        }
                        // Validate the configuration of the image got from the parameters.
                        if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                            return false;
                        }
                        break;
                    }
                }
            } else {
                // If no copy collapse sent, validate each image configuration (snapshot or active image).
                if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                    return false;
                }
            }
            image.setStoragePoolId(getParameters().getStoragePoolId());
            // we put the source domain id in order that copy will
            // work properly.
            // we fix it to DestDomainId in
            // MoveOrCopyAllImageGroups();
            image.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
        }
        Map<Guid, List<DiskImage>> images = getImagesLeaf(getVm().getImages());
        for (Map.Entry<Guid, List<DiskImage>> entry : images.entrySet()) {
            Guid id = entry.getKey();
            List<DiskImage> diskList = entry.getValue();
            getVm().getDiskMap().put(id, diskList.get(diskList.size() - 1));
        }
    }
    return true;
}
#method_after
private boolean canDoActionBeforeCloneVm(Map<Guid, StorageDomain> domainsMap) {
    List<String> canDoActionMessages = getReturnValue().getCanDoActionMessages();
    if (getVm() != null) {
        setDescription(getVmName());
    }
    if (!checkStoragePool()) {
        return false;
    }
    Set<Guid> destGuids = new HashSet<Guid>(imageToDestinationDomainMap.values());
    for (Guid destGuid : destGuids) {
        StorageDomain storageDomain = getStorageDomain(destGuid);
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (!validate(validator.isDomainExistAndActive()) || !validate(validator.domainIsValidDestination())) {
            return false;
        }
        domainsMap.put(destGuid, storageDomain);
    }
    if (getParameters().isImportAsNewEntity() && !getParameters().getCopyCollapse()) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMPORT_CLONE_NOT_COLLAPSED);
    }
    setSourceDomainId(getParameters().getSourceDomainId());
    StorageDomainValidator validator = new StorageDomainValidator(getSourceDomain());
    if (validator.isDomainExistAndActive().isValid() && getSourceDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
    }
    List<VM> vms = getVmsFromExportDomain();
    if (vms == null) {
        return false;
    }
    VM vm = LinqUtils.firstOrNull(vms, new Predicate<VM>() {

        @Override
        public boolean eval(VM evalVm) {
            return evalVm.getId().equals(getParameters().getVm().getId());
        }
    });
    if (vm != null) {
        // At this point we should work with the VM that was read from
        // the OVF
        setVm(vm);
        // Iterate over all the VM images (active image and snapshots)
        for (DiskImage image : getVm().getImages()) {
            if (getParameters().getCopyCollapse()) {
                // a match with the image from the VM.
                for (DiskImage p : imageList) {
                    // only if requested by the user
                    if (p.getImageId().equals(image.getImageId())) {
                        if (p.getVolumeFormat() != null) {
                            image.setvolumeFormat(p.getVolumeFormat());
                        }
                        if (p.getVolumeType() != null) {
                            image.setVolumeType(p.getVolumeType());
                        }
                        // Validate the configuration of the image got from the parameters.
                        if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                            return false;
                        }
                        break;
                    }
                }
            } else {
                // If no copy collapse sent, validate each image configuration (snapshot or active image).
                if (!validateImageConfig(canDoActionMessages, domainsMap, image)) {
                    return false;
                }
            }
            image.setStoragePoolId(getParameters().getStoragePoolId());
            // we put the source domain id in order that copy will
            // work properly.
            // we fix it to DestDomainId in
            // MoveOrCopyAllImageGroups();
            image.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
        }
        Map<Guid, List<DiskImage>> images = getImagesLeaf(getVm().getImages());
        for (Map.Entry<Guid, List<DiskImage>> entry : images.entrySet()) {
            Guid id = entry.getKey();
            List<DiskImage> diskList = entry.getValue();
            getVm().getDiskMap().put(id, diskList.get(diskList.size() - 1));
        }
    }
    return true;
}
#end_block

#method_before
private boolean validateImageConfig(List<String> canDoActionMessages, Map<Guid, storage_domains> domainsMap, DiskImage image) {
    return ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(image.getId())).getStorageStaticData(), image, canDoActionMessages);
}
#method_after
private boolean validateImageConfig(List<String> canDoActionMessages, Map<Guid, StorageDomain> domainsMap, DiskImage image) {
    return ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(image.getId())).getStorageStaticData(), image, canDoActionMessages);
}
#end_block

#method_before
private boolean canDoActionAfterCloneVm(Map<Guid, storage_domains> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (!validateNoDuplicateVm()) {
        return false;
    }
    if (!validateNoDuplicateDiskImages(imageList)) {
        return false;
    }
    setVmTemplateId(getVm().getVmtGuid());
    if (!templateExists() || !checkTemplateInStorageDomain() || !checkImagesGUIDsLegal() || !canAddVm()) {
        return false;
    }
    if (!VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && getVmTemplate() != null && getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    if (!ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, getReturnValue().getCanDoActionMessages())) {
                        return false;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (getParameters().getCopyCollapse() && !templateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getstorage_name()));
        return false;
    }
    if (!validateVdsCluster()) {
        return false;
    }
    Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
    for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    if (!validateUsbPolicy()) {
        return false;
    }
    if (!validateMacAddress(getVm().getInterfaces())) {
        return false;
    }
    return true;
}
#method_after
private boolean canDoActionAfterCloneVm(Map<Guid, StorageDomain> domainsMap) {
    VM vm = getParameters().getVm();
    // check that the imported vm guid is not in engine
    if (!validateNoDuplicateVm()) {
        return false;
    }
    if (!validateNoDuplicateDiskImages(imageList)) {
        return false;
    }
    setVmTemplateId(getVm().getVmtGuid());
    if (!templateExists() || !checkTemplateInStorageDomain() || !checkImagesGUIDsLegal() || !canAddVm()) {
        return false;
    }
    if (!VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && getVmTemplate() != null && getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (getParameters().getCopyCollapse() && vm.getDiskMap() != null) {
        for (Disk disk : vm.getDiskMap().values()) {
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage key = (DiskImage) getVm().getDiskMap().get(disk.getId());
                if (key != null) {
                    if (!ImagesHandler.CheckImageConfiguration(domainsMap.get(imageToDestinationDomainMap.get(key.getId())).getStorageStaticData(), (DiskImageBase) disk, getReturnValue().getCanDoActionMessages())) {
                        return false;
                    }
                }
            }
        }
    }
    // (backup) domain
    if (getParameters().getCopyCollapse() && !templateExistsOnExportDomain()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMPORTED_TEMPLATE_IS_MISSING);
        addCanDoActionMessage(String.format("$DomainName %1$s", getStorageDomainStaticDAO().get(getParameters().getSourceDomainId()).getStorageName()));
        return false;
    }
    if (!validateVdsCluster()) {
        return false;
    }
    Map<StorageDomain, Integer> domainMap = getSpaceRequirementsForStorageDomains(imageList);
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    if (!validateUsbPolicy()) {
        return false;
    }
    if (!validateMacAddress(getVm().getInterfaces())) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected boolean checkTemplateInStorageDomain() {
    boolean retValue = getParameters().isImportAsNewEntity() || checkIfDisksExist(imageList);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && !getParameters().getCopyCollapse()) {
        List<storage_domains> domains = (List<storage_domains>) Backend.getInstance().runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(getVm().getVmtGuid())).getReturnValue();
        List<Guid> domainsId = LinqUtils.foreach(domains, new Function<storage_domains, Guid>() {

            @Override
            public Guid eval(storage_domains storageDomainStatic) {
                return storageDomainStatic.getId();
            }
        });
        if (Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#method_after
protected boolean checkTemplateInStorageDomain() {
    boolean retValue = getParameters().isImportAsNewEntity() || checkIfDisksExist(imageList);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid()) && !getParameters().getCopyCollapse()) {
        List<StorageDomain> domains = (List<StorageDomain>) Backend.getInstance().runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(getVm().getVmtGuid())).getReturnValue();
        List<Guid> domainsId = LinqUtils.foreach(domains, new Function<StorageDomain, Guid>() {

            @Override
            public Guid eval(StorageDomain storageDomainStatic) {
                return storageDomainStatic.getId();
            }
        });
        if (Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#end_block

#method_before
protected void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = getImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.NewGuid();
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = diskList.get(diskList.size() - 1);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setItGuid(VmTemplateHandler.BlankVmTemplateId);
            disk.setVmSnapshotId(snapshotId);
            disk.setActive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolumeFormat(diskImageBase.getVolumeFormat());
                disk.setVolumeType(diskImageBase.getVolumeType());
            }
            setDiskStorageDomainInfo(disk);
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            if (getParameters().isImportAsNewEntity()) {
                disk.setId(Guid.NewGuid());
                disk.setImageId(Guid.NewGuid());
                for (int i = 0; i < diskList.size() - 1; i++) {
                    diskList.get(i).setId(disk.getId());
                }
            }
            disk.setCreationDate(new Date());
            saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            saveBaseDisk(disk);
            saveDiskImageDynamic(disk);
        }
        Snapshot snapshot = addActiveSnapshot(snapshotId);
        getVm().getSnapshots().clear();
        getVm().getSnapshots().add(snapshot);
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            disk.setActive(false);
            setDiskStorageDomainInfo(disk);
            saveImage(disk);
            snapshotId = disk.getVmSnapshotId().getValue();
            saveSnapshotIfNotExists(snapshotId, disk);
            saveDiskImageDynamic(disk);
        }
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = diskList.get(diskList.size() - 1);
            snapshotId = disk.getVmSnapshotId().getValue();
            disk.setActive(true);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            updateImage(disk);
            saveBaseDisk(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        updateActiveSnapshot(snapshotId);
    }
}
#method_after
protected void addVmImagesAndSnapshots() {
    Map<Guid, List<DiskImage>> images = getImagesLeaf(getVm().getImages());
    if (getParameters().getCopyCollapse()) {
        Guid snapshotId = Guid.NewGuid();
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = diskList.get(diskList.size() - 1);
            disk.setParentId(VmTemplateHandler.BlankVmTemplateId);
            disk.setImageTemplateId(VmTemplateHandler.BlankVmTemplateId);
            disk.setVmSnapshotId(snapshotId);
            disk.setActive(true);
            if (getParameters().getVm().getDiskMap() != null && getParameters().getVm().getDiskMap().containsKey(disk.getId())) {
                DiskImageBase diskImageBase = (DiskImageBase) getParameters().getVm().getDiskMap().get(disk.getId());
                disk.setvolumeFormat(diskImageBase.getVolumeFormat());
                disk.setVolumeType(diskImageBase.getVolumeType());
            }
            setDiskStorageDomainInfo(disk);
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            if (getParameters().isImportAsNewEntity()) {
                disk.setId(Guid.NewGuid());
                disk.setImageId(Guid.NewGuid());
                for (int i = 0; i < diskList.size() - 1; i++) {
                    diskList.get(i).setId(disk.getId());
                }
            }
            disk.setCreationDate(new Date());
            saveImage(disk);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            saveBaseDisk(disk);
            saveDiskImageDynamic(disk);
        }
        Snapshot snapshot = addActiveSnapshot(snapshotId);
        getVm().getSnapshots().clear();
        getVm().getSnapshots().add(snapshot);
    } else {
        Guid snapshotId = null;
        for (DiskImage disk : getVm().getImages()) {
            diskGuidList.add(disk.getId());
            imageGuidList.add(disk.getImageId());
            disk.setActive(false);
            setDiskStorageDomainInfo(disk);
            saveImage(disk);
            snapshotId = disk.getVmSnapshotId().getValue();
            saveSnapshotIfNotExists(snapshotId, disk);
            saveDiskImageDynamic(disk);
        }
        int aliasCounter = 0;
        for (List<DiskImage> diskList : images.values()) {
            DiskImage disk = diskList.get(diskList.size() - 1);
            snapshotId = disk.getVmSnapshotId().getValue();
            disk.setActive(true);
            ImagesHandler.setDiskAlias(disk, getVm(), ++aliasCounter);
            updateImage(disk);
            saveBaseDisk(disk);
        }
        // Update active snapshot's data, since it was inserted as a regular snapshot.
        updateActiveSnapshot(snapshotId);
    }
}
#end_block

#method_before
private void mockStorageDomainDAO(List<storage_domains> storageDomains) {
    doReturn(storageDomainDAO).when(command).getStorageDomainDAO();
    for (storage_domains storageDomain : storageDomains) {
        when(storageDomainDAO.getForStoragePool(storageDomain.getId(), storagePoolId)).thenReturn(storageDomain);
    }
}
#method_after
private void mockStorageDomainDAO(List<StorageDomain> storageDomains) {
    doReturn(storageDomainDAO).when(command).getStorageDomainDAO();
    for (StorageDomain storageDomain : storageDomains) {
        when(storageDomainDAO.getForStoragePool(storageDomain.getId(), storagePoolId)).thenReturn(storageDomain);
    }
}
#end_block

#method_before
private storage_domains mockFirstStorageDomain(int availabeDiskSize) {
    storage_domains storageDomain = new storage_domains();
    storageDomain.setavailable_disk_size(availabeDiskSize);
    storageDomain.setstatus(StorageDomainStatus.Active);
    storageDomain.setId(firstStorageDomainId);
    storageDomain.setstorage_domain_type(StorageDomainType.Data);
    return storageDomain;
}
#method_after
private StorageDomain mockFirstStorageDomain(int availabeDiskSize) {
    StorageDomain storageDomain = new StorageDomain();
    storageDomain.setAvailableDiskSize(availabeDiskSize);
    storageDomain.setStatus(StorageDomainStatus.Active);
    storageDomain.setId(firstStorageDomainId);
    storageDomain.setStorageDomainType(StorageDomainType.Data);
    return storageDomain;
}
#end_block

#method_before
private storage_domains mockSecondStorageDomain(int availabeDiskSize) {
    storage_domains storageDomain = new storage_domains();
    storageDomain.setavailable_disk_size(availabeDiskSize);
    storageDomain.setstatus(StorageDomainStatus.Active);
    storageDomain.setId(secondStorageDomainId);
    storageDomain.setstorage_domain_type(StorageDomainType.Data);
    return storageDomain;
}
#method_after
private StorageDomain mockSecondStorageDomain(int availabeDiskSize) {
    StorageDomain storageDomain = new StorageDomain();
    storageDomain.setAvailableDiskSize(availabeDiskSize);
    storageDomain.setStatus(StorageDomainStatus.Active);
    storageDomain.setId(secondStorageDomainId);
    storageDomain.setStorageDomainType(StorageDomainType.Data);
    return storageDomain;
}
#end_block

#method_before
private static List<Guid> mockStorageGuidList(List<storage_domains> storageDomains) {
    List<Guid> storageGuidList = new ArrayList<Guid>();
    for (storage_domains storageDomain : storageDomains) {
        storageGuidList.add(storageDomain.getId());
    }
    return storageGuidList;
}
#method_after
private static List<Guid> mockStorageGuidList(List<StorageDomain> storageDomains) {
    List<Guid> storageGuidList = new ArrayList<Guid>();
    for (StorageDomain storageDomain : storageDomains) {
        storageGuidList.add(storageDomain.getId());
    }
    return storageGuidList;
}
#end_block

#method_before
protected List<storage_domains> getStorageDomainList(int availableDiskSizeFirstDomain, int availableDiskSizeSecondDomain) {
    List<storage_domains> storageDomainList = new ArrayList<storage_domains>();
    storageDomainList.add(mockFirstStorageDomain(availableDiskSizeFirstDomain));
    storageDomainList.add(mockSecondStorageDomain(availableDiskSizeSecondDomain));
    return storageDomainList;
}
#method_after
protected List<StorageDomain> getStorageDomainList(int availableDiskSizeFirstDomain, int availableDiskSizeSecondDomain) {
    List<StorageDomain> storageDomainList = new ArrayList<StorageDomain>();
    storageDomainList.add(mockFirstStorageDomain(availableDiskSizeFirstDomain));
    storageDomainList.add(mockSecondStorageDomain(availableDiskSizeSecondDomain));
    return storageDomainList;
}
#end_block

#method_before
private VmPool mockVmPools() {
    VmPool pool = new VmPool();
    pool.setVmPoolName("simplePoolName");
    pool.setVdsGroupId(vdsGroupId);
    pool.setVmPoolId(vmPoolId);
    return pool;
}
#method_after
private VmPool mockVmPools() {
    VmPool pool = new VmPool();
    pool.setName("simplePoolName");
    pool.setVdsGroupId(vdsGroupId);
    pool.setVmPoolId(vmPoolId);
    return pool;
}
#end_block

#method_before
protected void readGeneralData() {
    XmlNode content = _document.SelectSingleNode("//*/Content");
    XmlNode node;
    // set ovf version to the ovf object
    vmBase.setOvfVersion(getVersion());
    node = content.SelectSingleNode("Description");
    if (node != null) {
        vmBase.setDescription(node.InnerText);
    }
    node = content.SelectSingleNode("Domain");
    if (node != null) {
        vmBase.setDomain(node.InnerText);
    }
    node = content.SelectSingleNode("CreationDate");
    if (node != null) {
        Date creationDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (creationDate != null) {
            vmBase.setCreationDate(creationDate);
        }
    }
    node = content.SelectSingleNode("ExportDate");
    if (node != null) {
        Date exportDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (exportDate != null) {
            vmBase.setExportDate(exportDate);
        }
    }
    node = content.SelectSingleNode("IsAutoSuspend");
    if (node != null) {
        vmBase.setAutoSuspend(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        vmBase.setTimeZone(node.InnerText);
    }
    node = content.SelectSingleNode("default_boot_sequence");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setDefaultBootSequence(BootSequence.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("initrd_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setInitrdUrl(node.InnerText);
        }
    }
    node = content.SelectSingleNode("kernel_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setKernelUrl(node.InnerText);
        }
    }
    node = content.SelectSingleNode("kernel_params");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setKernelParams(node.InnerText);
        }
    }
    node = content.SelectSingleNode("Generation");
    if (node != null) {
        vmBase.setDbGeneration(Long.parseLong(node.InnerText));
    } else {
        vmBase.setDbGeneration(1L);
    }
    // Note: the fetching of 'default display type' should happen before reading
    // the hardware section
    node = content.SelectSingleNode(getDefaultDisplayTypeStringRepresentation());
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            defaultDisplayType = DisplayType.forValue(Integer.parseInt(node.InnerText));
            vmBase.setDefaultDisplayType(defaultDisplayType);
        }
    }
    XmlNodeList list = content.SelectNodes("Section");
    for (XmlNode section : list) {
        String value = section.Attributes.get("xsi:type").getValue();
        if ("ovf:OperatingSystemSection_Type".equals(value)) {
            readOsSection(section);
        } else if ("ovf:VirtualHardwareSection_Type".equals(value)) {
            readHardwareSection(section);
        } else if ("ovf:SnapshotsSection_Type".equals(value)) {
            readSnapshotsSection(section);
        }
    }
    node = content.SelectSingleNode("Origin");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setOrigin(OriginType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("VmType");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setVmType(VmType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("IsSmartcardEnabled");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setSmartcardEnabled(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("DeleteProtected");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setDeleteProtected(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TunnelMigration");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setTunnelMigration(Boolean.parseBoolean(node.InnerText));
        }
    }
    readGeneralData(content);
}
#method_after
protected void readGeneralData() {
    XmlNode content = _document.SelectSingleNode("//*/Content");
    XmlNode node;
    // set ovf version to the ovf object
    vmBase.setOvfVersion(getVersion());
    node = content.SelectSingleNode("Description");
    if (node != null) {
        vmBase.setDescription(node.InnerText);
    }
    node = content.SelectSingleNode("Domain");
    if (node != null) {
        vmBase.setDomain(node.InnerText);
    }
    node = content.SelectSingleNode("CreationDate");
    if (node != null) {
        Date creationDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (creationDate != null) {
            vmBase.setCreationDate(creationDate);
        }
    }
    node = content.SelectSingleNode("ExportDate");
    if (node != null) {
        Date exportDate = OvfParser.UtcDateStringToLocaDate(node.InnerText);
        if (exportDate != null) {
            vmBase.setExportDate(exportDate);
        }
    }
    node = content.SelectSingleNode("IsAutoSuspend");
    if (node != null) {
        vmBase.setAutoSuspend(Boolean.parseBoolean(node.InnerText));
    }
    node = content.SelectSingleNode("TimeZone");
    if (node != null) {
        vmBase.setTimeZone(node.InnerText);
    }
    node = content.SelectSingleNode("default_boot_sequence");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setDefaultBootSequence(BootSequence.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("initrd_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setInitrdUrl(node.InnerText);
        }
    }
    node = content.SelectSingleNode("kernel_url");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setKernelUrl(node.InnerText);
        }
    }
    node = content.SelectSingleNode("kernel_params");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setKernelParams(node.InnerText);
        }
    }
    node = content.SelectSingleNode("Generation");
    if (node != null) {
        vmBase.setDbGeneration(Long.parseLong(node.InnerText));
    } else {
        vmBase.setDbGeneration(1L);
    }
    // Note: the fetching of 'default display type' should happen before reading
    // the hardware section
    node = content.SelectSingleNode(getDefaultDisplayTypeStringRepresentation());
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            defaultDisplayType = DisplayType.forValue(Integer.parseInt(node.InnerText));
            vmBase.setDefaultDisplayType(defaultDisplayType);
        }
    }
    XmlNodeList list = content.SelectNodes("Section");
    for (XmlNode section : list) {
        String value = section.Attributes.get("xsi:type").getValue();
        if ("ovf:OperatingSystemSection_Type".equals(value)) {
            readOsSection(section);
        } else if ("ovf:VirtualHardwareSection_Type".equals(value)) {
            readHardwareSection(section);
        } else if ("ovf:SnapshotsSection_Type".equals(value)) {
            readSnapshotsSection(section);
        }
    }
    node = content.SelectSingleNode("Origin");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setOrigin(OriginType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("VmType");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setVmType(VmType.forValue(Integer.parseInt(node.InnerText)));
        }
    }
    node = content.SelectSingleNode("IsSmartcardEnabled");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setSmartcardEnabled(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("DeleteProtected");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setDeleteProtected(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("TunnelMigration");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setTunnelMigration(Boolean.parseBoolean(node.InnerText));
        }
    }
    node = content.SelectSingleNode("VncKeyboardLayout");
    if (node != null) {
        if (!StringUtils.isEmpty(node.InnerText)) {
            vmBase.setVncKeyboardLayout(node.InnerText);
        }
    }
    readGeneralData(content);
}
#end_block

#method_before
@Override
protected boolean getIsNodeEnabled(DiskImage disk) {
    if (listModel.getEntity() == null) {
        return true;
    }
    if (listModel.getEntity() instanceof Quota) {
        return ((BusinessEntity) listModel.getEntity()).getId().equals(((DiskImage) disk).getQuotaId());
    }
    return disk.getStorageIds().contains(((storage_domains) listModel.getEntity()).getId());
}
#method_after
@Override
protected boolean getIsNodeEnabled(DiskImage disk) {
    if (listModel.getEntity() == null) {
        return true;
    }
    if (listModel.getEntity() instanceof Quota) {
        return ((BusinessEntity) listModel.getEntity()).getId().equals(((DiskImage) disk).getQuotaId());
    }
    return disk.getStorageIds().contains(((StorageDomain) listModel.getEntity()).getId());
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    vmTemplate = DbFacade.getInstance().getVmTemplateDao().get(getParameters().getId(), getUserID(), getParameters().isFiltered());
    ArrayList<storage_domains> result = new ArrayList<storage_domains>();
    if (vmTemplate != null && vmTemplate.getstorage_pool_id() != null) {
        List<Disk> templateDisks = getTemplateDisks();
        if (templateDisks.size() > 0) {
            Set<Guid> domains = new HashSet<Guid>();
            for (Disk templateDisk : templateDisks) {
                domains.addAll(((DiskImage) templateDisk).getStorageIds());
            }
            for (Guid domainId : domains) {
                storage_domains domain = getStorageDomain(domainId);
                if (domain != null) {
                    result.add(domain);
                }
            }
        }
    }
    getQueryReturnValue().setReturnValue(result);
}
#method_after
@Override
protected void executeQueryCommand() {
    vmTemplate = DbFacade.getInstance().getVmTemplateDao().get(getParameters().getId(), getUserID(), getParameters().isFiltered());
    ArrayList<StorageDomain> result = new ArrayList<StorageDomain>();
    if (vmTemplate != null && vmTemplate.getstorage_pool_id() != null) {
        List<Disk> templateDisks = getTemplateDisks();
        if (templateDisks.size() > 0) {
            Set<Guid> domains = new HashSet<Guid>();
            for (Disk templateDisk : templateDisks) {
                domains.addAll(((DiskImage) templateDisk).getStorageIds());
            }
            for (Guid domainId : domains) {
                StorageDomain domain = getStorageDomain(domainId);
                if (domain != null) {
                    result.add(domain);
                }
            }
        }
    }
    getQueryReturnValue().setReturnValue(result);
}
#end_block

#method_before
protected storage_domains getStorageDomain(Guid domainId) {
    return DbFacade.getInstance().getStorageDomainDao().getForStoragePool(domainId, vmTemplate.getstorage_pool_id().getValue());
}
#method_after
protected StorageDomain getStorageDomain(Guid domainId) {
    return DbFacade.getInstance().getStorageDomainDao().getForStoragePool(domainId, vmTemplate.getstorage_pool_id().getValue());
}
#end_block

#method_before
public static void fillImagesMapBasedOnTemplate(VmTemplate template, List<storage_domains> domains, Map<Guid, DiskImage> diskInfoDestinationMap, Map<Guid, storage_domains> destStorages, boolean notCheckSize) {
    Map<Guid, storage_domains> storageDomainsMap = new HashMap<Guid, storage_domains>();
    for (storage_domains storageDomain : domains) {
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (validator.isDomainExistAndActive().isValid() && validator.domainIsValidDestination().isValid() && (notCheckSize || isStorageDomainWithinThresholds(storageDomain, null, false))) {
            storageDomainsMap.put(storageDomain.getId(), storageDomain);
        }
    }
    for (DiskImage image : template.getDiskMap().values()) {
        for (Guid storageId : image.getStorageIds()) {
            if (storageDomainsMap.containsKey(storageId)) {
                ArrayList<Guid> storageIds = new ArrayList<Guid>();
                storageIds.add(storageId);
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
                break;
            }
        }
    }
    if (destStorages != null) {
        for (DiskImage diskImage : diskInfoDestinationMap.values()) {
            Guid storageDomainId = diskImage.getStorageIds().get(0);
            destStorages.put(storageDomainId, storageDomainsMap.get(storageDomainId));
        }
    }
}
#method_after
public static void fillImagesMapBasedOnTemplate(VmTemplate template, Map<Guid, DiskImage> diskInfoDestinationMap, Map<Guid, StorageDomain> destStorages, boolean notCheckSize) {
    List<StorageDomain> domains = DbFacade.getInstance().getStorageDomainDao().getAllForStoragePool(template.getstorage_pool_id().getValue());
    fillImagesMapBasedOnTemplate(template, domains, diskInfoDestinationMap, destStorages, notCheckSize);
}
#end_block

#method_before
public static boolean CheckImageConfiguration(StorageDomainStatic storageDomain, DiskImageBase diskInfo, List<String> messages) {
    boolean result = true;
    if ((diskInfo.getVolumeType() == VolumeType.Preallocated && diskInfo.getVolumeFormat() == VolumeFormat.COW) || ((storageDomain.getstorage_type() == StorageType.FCP || storageDomain.getstorage_type() == StorageType.ISCSI) && (diskInfo.getVolumeType() == VolumeType.Sparse && diskInfo.getVolumeFormat() == VolumeFormat.RAW)) || (diskInfo.getVolumeFormat() == VolumeFormat.Unassigned || diskInfo.getVolumeType() == VolumeType.Unassigned)) {
        // not supported
        result = false;
        messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString());
    }
    return result;
}
#method_after
public static boolean CheckImageConfiguration(StorageDomainStatic storageDomain, DiskImageBase diskInfo, List<String> messages) {
    boolean result = true;
    if ((diskInfo.getVolumeType() == VolumeType.Preallocated && diskInfo.getVolumeFormat() == VolumeFormat.COW) || ((storageDomain.getStorageType() == StorageType.FCP || storageDomain.getStorageType() == StorageType.ISCSI) && (diskInfo.getVolumeType() == VolumeType.Sparse && diskInfo.getVolumeFormat() == VolumeFormat.RAW)) || (diskInfo.getVolumeFormat() == VolumeFormat.Unassigned || diskInfo.getVolumeType() == VolumeType.Unassigned)) {
        // not supported
        result = false;
        messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString());
    }
    return result;
}
#end_block

#method_before
private static boolean checkDiskImages(List<String> messages, Guid storagePoolId, Guid storageDomainId, boolean diskSpaceCheck, boolean checkImagesIllegal, boolean checkImagesExist, boolean checkStorageDomain, List<DiskImage> images) {
    boolean returnValue = true;
    ArrayList<DiskImage> irsImages = new ArrayList<DiskImage>();
    if (diskSpaceCheck || checkStorageDomain) {
        Set<Guid> domainsIds = new HashSet<Guid>();
        if (!Guid.Empty.equals(storageDomainId)) {
            domainsIds.add(storageDomainId);
        } else {
            for (DiskImage image : images) {
                domainsIds.addAll(image.getStorageIds());
            }
        }
        for (Guid domainId : domainsIds) {
            storage_domains domain = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(domainId, storagePoolId);
            if (checkStorageDomain) {
                StorageDomainValidator storageDomainValidator = new StorageDomainValidator(domain);
                ValidationResult res = storageDomainValidator.isDomainExistAndActive();
                returnValue = res.isValid();
                if (!returnValue) {
                    messages.add(res.getMessage().toString());
                }
            }
            if (diskSpaceCheck && returnValue && !isStorageDomainWithinThresholds(domain, messages, true)) {
                return false;
            }
        }
    }
    if (returnValue && checkImagesExist) {
        boolean isImagesExist = isImagesExists(images, storagePoolId, storageDomainId, irsImages);
        if (!isImagesExist) {
            returnValue = false;
            ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST.toString());
        }
    }
    if (returnValue && checkImagesIllegal) {
        returnValue = CheckImagesLegality(messages, images, irsImages);
    }
    return returnValue;
}
#method_after
private static boolean checkDiskImages(List<String> messages, Guid storagePoolId, Guid storageDomainId, boolean diskSpaceCheck, boolean checkImagesIllegal, boolean checkImagesExist, boolean checkStorageDomain, List<DiskImage> images) {
    boolean returnValue = true;
    ArrayList<DiskImage> irsImages = new ArrayList<DiskImage>();
    if (diskSpaceCheck || checkStorageDomain) {
        Set<Guid> domainsIds = new HashSet<Guid>();
        if (!Guid.Empty.equals(storageDomainId)) {
            domainsIds.add(storageDomainId);
        } else {
            for (DiskImage image : images) {
                domainsIds.addAll(image.getStorageIds());
            }
        }
        for (Guid domainId : domainsIds) {
            StorageDomain domain = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(domainId, storagePoolId);
            if (checkStorageDomain) {
                StorageDomainValidator storageDomainValidator = new StorageDomainValidator(domain);
                ValidationResult res = storageDomainValidator.isDomainExistAndActive();
                returnValue = res.isValid();
                if (!returnValue) {
                    messages.add(res.getMessage().toString());
                }
            }
            if (diskSpaceCheck && returnValue && !isStorageDomainWithinThresholds(domain, messages, true)) {
                return false;
            }
        }
    }
    if (returnValue && checkImagesExist) {
        boolean isImagesExist = isImagesExists(images, storagePoolId, storageDomainId, irsImages);
        if (!isImagesExist) {
            returnValue = false;
            ListUtils.nullSafeAdd(messages, VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST.toString());
        }
    }
    if (returnValue && checkImagesIllegal) {
        returnValue = CheckImagesLegality(messages, images, irsImages);
    }
    return returnValue;
}
#end_block

#method_before
private static boolean isStorageDomainWithinThresholds(storage_domains storageDomain, List<String> messages, boolean addCanDoMessage) {
    ValidationResult validationResult = new StorageDomainValidator(storageDomain).isDomainWithinThresholds();
    if (addCanDoMessage) {
        validate(validationResult, messages);
    }
    return validationResult.isValid();
}
#method_after
private static boolean isStorageDomainWithinThresholds(StorageDomain storageDomain, List<String> messages, boolean addCanDoMessage) {
    ValidationResult validationResult = new StorageDomainValidator(storageDomain).isDomainWithinThresholds();
    if (addCanDoMessage) {
        validate(validationResult, messages);
    }
    return validationResult.isValid();
}
#end_block

#method_before
public static void fillImagesBySnapshots(VM vm) {
    for (Disk disk : vm.getDiskMap().values()) {
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            DiskImage diskImage = (DiskImage) disk;
            diskImage.getSnapshots().addAll(ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getItGuid()));
        }
    }
}
#method_after
public static void fillImagesBySnapshots(VM vm) {
    for (Disk disk : vm.getDiskMap().values()) {
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            DiskImage diskImage = (DiskImage) disk;
            diskImage.getSnapshots().addAll(ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getImageTemplateId()));
        }
    }
}
#end_block

#method_before
@Override
protected void endWithFailure() {
    revertTasks();
    if (getDestinationDiskImage() != null && !DbFacade.getInstance().getVmDao().getVmsListForDisk(getDestinationDiskImage().getId()).isEmpty()) {
        // Empty Guid, means new disk rather than snapshot, so no need to add a map to the db for new disk.
        if (!getDestinationDiskImage().getParentId().equals(Guid.Empty)) {
            if (!getDestinationDiskImage().getParentId().equals(getDestinationDiskImage().getItGuid())) {
                DiskImage previousSnapshot = getDiskImageDao().getSnapshotById(getDestinationDiskImage().getParentId());
                previousSnapshot.setActive(true);
                // If the old description of the snapshot got overriden, we should restore the previous description
                if (getParameters().getOldLastModifiedValue() != null) {
                    previousSnapshot.setLastModified(getParameters().getOldLastModifiedValue());
                }
                getImageDao().update(previousSnapshot.getImage());
            }
        }
    }
    super.endWithFailure();
}
#method_after
@Override
protected void endWithFailure() {
    revertTasks();
    if (getDestinationDiskImage() != null && !DbFacade.getInstance().getVmDao().getVmsListForDisk(getDestinationDiskImage().getId()).isEmpty()) {
        // Empty Guid, means new disk rather than snapshot, so no need to add a map to the db for new disk.
        if (!getDestinationDiskImage().getParentId().equals(Guid.Empty)) {
            if (!getDestinationDiskImage().getParentId().equals(getDestinationDiskImage().getImageTemplateId())) {
                DiskImage previousSnapshot = getDiskImageDao().getSnapshotById(getDestinationDiskImage().getParentId());
                previousSnapshot.setActive(true);
                // If the old description of the snapshot got overriden, we should restore the previous description
                if (getParameters().getOldLastModifiedValue() != null) {
                    previousSnapshot.setLastModified(getParameters().getOldLastModifiedValue());
                }
                getImageDao().update(previousSnapshot.getImage());
            }
        }
    }
    super.endWithFailure();
}
#end_block

#method_before
private boolean canRemoveTemplateDisk() {
    boolean retValue = true;
    DiskImage diskImage = getDiskImage();
    if (getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (retValue && diskImage.getStorageIds().size() == 1) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN);
    }
    if (retValue) {
        List<String> problematicVmNames = new ArrayList<String>();
        List<VM> vms = DbFacade.getInstance().getVmDao().getAllWithTemplate(getVmTemplateId());
        for (VM vm : vms) {
            List<Disk> vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
            for (Disk vmDisk : vmDisks) {
                if (vmDisk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage vmDiskImage = (DiskImage) vmDisk;
                    if (vmDiskImage.getItGuid().equals(diskImage.getImageId())) {
                        if (vmDiskImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
                            retValue = false;
                            problematicVmNames.add(vm.getVmName());
                        }
                        break;
                    }
                }
            }
        }
        if (!retValue) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
            addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        }
    }
    return retValue;
}
#method_after
private boolean canRemoveTemplateDisk() {
    boolean retValue = true;
    DiskImage diskImage = getDiskImage();
    if (getVmTemplate().getstatus() == VmTemplateStatus.Locked) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED);
    }
    if (retValue && diskImage.getStorageIds().size() == 1) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN);
    }
    if (retValue) {
        List<String> problematicVmNames = new ArrayList<String>();
        List<VM> vms = DbFacade.getInstance().getVmDao().getAllWithTemplate(getVmTemplateId());
        for (VM vm : vms) {
            List<Disk> vmDisks = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
            for (Disk vmDisk : vmDisks) {
                if (vmDisk.getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage vmDiskImage = (DiskImage) vmDisk;
                    if (vmDiskImage.getImageTemplateId().equals(diskImage.getImageId())) {
                        if (vmDiskImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
                            retValue = false;
                            problematicVmNames.add(vm.getVmName());
                        }
                        break;
                    }
                }
            }
        }
        if (!retValue) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM);
            addCanDoActionMessage(String.format("$vmsList %1$s", StringUtils.join(problematicVmNames, ",")));
        }
    }
    return retValue;
}
#end_block

#method_before
private void mockStorageDomainDao() {
    storage_domains storageDomains = new storage_domains();
    storageDomains.setstatus(StorageDomainStatus.Active);
    // Variables only for passing the available size check.
    storageDomains.setavailable_disk_size(10000000);
    storageDomains.setused_disk_size(10);
    doReturn(storageDomainDAO).when(spyCommand).getStorageDomainDAO();
    when(storageDomainDAO.getForStoragePool(storageDomainId, Guid.Empty)).thenReturn(storageDomains);
    when(storageDomainDAO.get(storageDomainId)).thenReturn(storageDomains);
}
#method_after
private void mockStorageDomainDao() {
    StorageDomain storageDomains = new StorageDomain();
    storageDomains.setStatus(StorageDomainStatus.Active);
    // Variables only for passing the available size check.
    storageDomains.setAvailableDiskSize(10000000);
    storageDomains.setUsedDiskSize(10);
    doReturn(storageDomainDAO).when(spyCommand).getStorageDomainDAO();
    when(storageDomainDAO.getForStoragePool(storageDomainId, Guid.Empty)).thenReturn(storageDomains);
    when(storageDomainDAO.get(storageDomainId)).thenReturn(storageDomains);
}
#end_block

#method_before
@Override
public void setItems(final Iterable value) {
    // $NON-NLS-1$
    String vmt_guidKey = "_VMT_ID =";
    // $NON-NLS-1$
    String orKey = " or ";
    StringBuilder searchPattern = new StringBuilder();
    // $NON-NLS-1$
    searchPattern.append("Template: ");
    final List<VmTemplate> list = (List<VmTemplate>) value;
    for (int i = 0; i < list.size(); i++) {
        VmTemplate vmTemplate = list.get(i);
        searchPattern.append(vmt_guidKey);
        searchPattern.append(vmTemplate.getId().toString());
        if (i < list.size() - 1) {
            searchPattern.append(orKey);
        }
    }
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(searchPattern.toString(), SearchType.VmTemplate), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            List<VmTemplate> vmtList = (List<VmTemplate>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<ImportTemplateData> templateDataList = new ArrayList<ImportTemplateData>();
            for (VmTemplate template : (Iterable<VmTemplate>) value) {
                ImportTemplateData templateData = new ImportTemplateData(template);
                boolean templateExistsInSystem = vmtList.contains(template);
                templateData.setExistsInSystem(templateExistsInSystem);
                if (templateExistsInSystem) {
                    templateData.getClone().setEntity(true);
                    templateData.getClone().getChangeProhibitionReasons().add(ConstantsManager.getInstance().getConstants().importTemplateThatExistsInSystemMustClone());
                    templateData.getClone().setIsChangable(false);
                }
                templateDataList.add(templateData);
            }
            ImportTemplateModel.super.setSuperItems(templateDataList);
        }
    }));
}
#method_after
@Override
public void setItems(final Iterable value) {
    // $NON-NLS-1$
    String vmt_guidKey = "_VMT_ID =";
    // $NON-NLS-1$
    String orKey = " or ";
    StringBuilder searchPattern = new StringBuilder();
    // $NON-NLS-1$
    searchPattern.append("Template: ");
    final List<VmTemplate> list = (List<VmTemplate>) value;
    for (int i = 0; i < list.size(); i++) {
        VmTemplate vmTemplate = list.get(i);
        searchPattern.append(vmt_guidKey);
        searchPattern.append(vmTemplate.getId().toString());
        if (i < list.size() - 1) {
            searchPattern.append(orKey);
        }
    }
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(searchPattern.toString(), SearchType.VmTemplate), new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            List<VmTemplate> vmtList = (List<VmTemplate>) ((VdcQueryReturnValue) returnValue).getReturnValue();
            List<ImportTemplateData> templateDataList = new ArrayList<ImportTemplateData>();
            for (VmTemplate template : (Iterable<VmTemplate>) value) {
                ImportTemplateData templateData = new ImportTemplateData(template);
                boolean templateExistsInSystem = vmtList.contains(template);
                templateData.setExistsInSystem(templateExistsInSystem);
                if (templateExistsInSystem) {
                    templateData.getClone().setEntity(true);
                    templateData.getClone().setChangeProhibitionReason(ConstantsManager.getInstance().getConstants().importTemplateThatExistsInSystemMustClone());
                    templateData.getClone().setIsChangable(false);
                }
                templateDataList.add(templateData);
            }
            ImportTemplateModel.super.setSuperItems(templateDataList);
        }
    }));
}
#end_block

#method_before
public void setActive(Boolean active) {
    getImage().setActive(Boolean.TRUE.equals(active));
}
#method_after
public void setActive(boolean active) {
    getImage().setActive(active);
}
#end_block

#method_before
public ArrayList<String> getStoragesNames() {
    return storagesNames;
}
#method_after
public List<String> getStoragesNames() {
    return storagesNames;
}
#end_block

#method_before
public static DiskImage copyOf(DiskImage diskImage) {
    // set DiskImageBase properties
    DiskImage di = new DiskImage(diskImage);
    // set all private fields (imitate clone - deep copy)
    di.setActive(diskImage.getActive());
    di.setCreationDate(new Date(diskImage.getCreationDate().getTime()));
    di.setLastModifiedDate(new Date(diskImage.getLastModifiedDate().getTime()));
    di.actualSizeFromDiskImageDynamic = diskImage.actualSizeFromDiskImageDynamic;
    di.readRateFromDiskImageDynamic = diskImage.readRateFromDiskImageDynamic;
    di.writeRateFromDiskImageDynamic = diskImage.writeRateFromDiskImageDynamic;
    di.readLatency = diskImage.readLatency;
    di.writeLatency = diskImage.writeLatency;
    di.flushLatency = diskImage.flushLatency;
    // string is immutable, so no need to deep copy it
    di.description = diskImage.description;
    di.setImageId(new Guid(diskImage.getImageId().getUuid()));
    di.appList = diskImage.appList;
    di.setItGuid(new Guid(diskImage.getItGuid().getUuid()));
    di.setParentId(new Guid(diskImage.getParentId().getUuid()));
    di.setImageStatus(diskImage.getImageStatus());
    di.setLastModified(new Date(diskImage.getLastModified().getTime()));
    di.storageIds = new ArrayList<Guid>(diskImage.storageIds);
    di.setVmSnapshotId(diskImage.getVmSnapshotId());
    di.storagePath = diskImage.storagePath;
    di.setId(diskImage.getId());
    di.setNumberOfVms(diskImage.getNumberOfVms());
    di.setDiskInterface(diskImage.getDiskInterface());
    di.setWipeAfterDelete(diskImage.isWipeAfterDelete());
    di.setPropagateErrors(diskImage.getPropagateErrors());
    di.setDiskAlias(diskImage.getDiskAlias());
    di.setDiskDescription(diskImage.getDiskDescription());
    di.setShareable(diskImage.isShareable());
    di.storagePoolId = new NGuid(diskImage.storagePoolId.getUuid());
    di.actualSize = diskImage.actualSize;
    di.readRateKbPerSec = diskImage.readRateKbPerSec;
    di.writeRateKbPerSec = diskImage.writeRateKbPerSec;
    // TODO: is it ok to use shallow copy here?!
    di.snapshots = new ArrayList<DiskImage>(diskImage.snapshots);
    di.actualDiskWithSnapthotsSize = diskImage.actualDiskWithSnapthotsSize;
    di.setCreationDate(new Date());
    di.setLastModified(new Date());
    di.setActive(true);
    di.setImageStatus(ImageStatus.LOCKED);
    return di;
}
#method_after
public static DiskImage copyOf(DiskImage diskImage) {
    // set DiskImageBase properties
    DiskImage di = new DiskImage(diskImage);
    // set all private fields (imitate clone - deep copy)
    di.setActive(diskImage.getActive());
    di.setCreationDate(new Date(diskImage.getCreationDate().getTime()));
    di.setLastModifiedDate(new Date(diskImage.getLastModifiedDate().getTime()));
    di.actualSizeFromDiskImageDynamic = diskImage.actualSizeFromDiskImageDynamic;
    di.readRateFromDiskImageDynamic = diskImage.readRateFromDiskImageDynamic;
    di.writeRateFromDiskImageDynamic = diskImage.writeRateFromDiskImageDynamic;
    di.readLatency = diskImage.readLatency;
    di.writeLatency = diskImage.writeLatency;
    di.flushLatency = diskImage.flushLatency;
    // string is immutable, so no need to deep copy it
    di.description = diskImage.description;
    di.setImageId(new Guid(diskImage.getImageId().getUuid()));
    di.appList = diskImage.appList;
    di.setImageTemplateId(new Guid(diskImage.getImageTemplateId().getUuid()));
    di.setParentId(new Guid(diskImage.getParentId().getUuid()));
    di.setImageStatus(diskImage.getImageStatus());
    di.setLastModified(new Date(diskImage.getLastModified().getTime()));
    di.storageIds = new ArrayList<Guid>(diskImage.storageIds);
    di.setVmSnapshotId(diskImage.getVmSnapshotId());
    di.storagePath = diskImage.storagePath;
    di.setId(diskImage.getId());
    di.setNumberOfVms(diskImage.getNumberOfVms());
    di.setDiskInterface(diskImage.getDiskInterface());
    di.setWipeAfterDelete(diskImage.isWipeAfterDelete());
    di.setPropagateErrors(diskImage.getPropagateErrors());
    di.setDiskAlias(diskImage.getDiskAlias());
    di.setDiskDescription(diskImage.getDiskDescription());
    di.setShareable(diskImage.isShareable());
    di.storagePoolId = new NGuid(diskImage.storagePoolId.getUuid());
    di.actualSize = diskImage.actualSize;
    di.readRateKbPerSec = diskImage.readRateKbPerSec;
    di.writeRateKbPerSec = diskImage.writeRateKbPerSec;
    // TODO: is it ok to use shallow copy here?!
    di.snapshots = new ArrayList<DiskImage>(diskImage.snapshots);
    di.actualDiskWithSnapthotsSize = diskImage.actualDiskWithSnapthotsSize;
    di.setCreationDate(new Date());
    di.setLastModified(new Date());
    di.setActive(true);
    di.setImageStatus(ImageStatus.LOCKED);
    return di;
}
#end_block

#method_before
private Object getStorageDomains() {
    List<storage_domains> sds = new LinkedList<storage_domains>();
    storage_domains sd = new storage_domains();
    sd.setstorage_name("Storage_Domain_1");
    sd.setId(GUIDS[2]);
    sds.add(sd);
    return sds;
}
#method_after
private Object getStorageDomains() {
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> sds = new LinkedList<org.ovirt.engine.core.common.businessentities.StorageDomain>();
    org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain();
    sd.setStorageName("Storage_Domain_1");
    sd.setId(GUIDS[2]);
    sds.add(sd);
    return sds;
}
#end_block

#method_before
protected void initMainTable() {
    this.table = new IVdcQueryableCellTable<Object, ImportVmModel>();
    CheckboxColumn<Object> collapseSnapshotsColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getCollapseSnapshots().setEntity(value);
            customSelectionCellFormatType.setEnabledWithToolTip(value, constants.importAllocationModifiedCollapse());
            diskTable.edit(importModel.getImportDiskListModel());
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getCollapseSnapshots().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            List<String> reasons = ((ImportVmData) model).getCollapseSnapshots().getChangeProhibitionReasons();
            if (reasons != null && !reasons.isEmpty()) {
                return reasons.get(0);
            }
            return null;
        }
    };
    // $NON-NLS-1$
    table.addColumn(collapseSnapshotsColumn, constants.collapseSnapshots(), "10px");
    CheckboxColumn<Object> cloneVMColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getClone().setEntity(value);
            table.edit(importModel);
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getClone().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getClone().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            List<String> reasons = ((ImportVmData) model).getClone().getChangeProhibitionReasons();
            if (reasons != null && !reasons.isEmpty()) {
                return reasons.get(0);
            }
            return null;
        }
    };
    // $NON-NLS-1$
    table.addColumn(cloneVMColumn, constants.cloneVM(), "50px");
    TextColumnWithTooltip<Object> nameColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return ((ImportVmData) object).getVm().getVmName();
        }
    };
    // $NON-NLS-1$
    table.addColumn(nameColumn, constants.nameVm(), "150px");
    TextColumnWithTooltip<Object> originColumn = new EnumColumn<Object, OriginType>() {

        @Override
        protected OriginType getRawValue(Object object) {
            return ((ImportVmData) object).getVm().getOrigin();
        }
    };
    // $NON-NLS-1$
    table.addColumn(originColumn, constants.originVm(), "100px");
    table.addColumn(new WebAdminImageResourceColumn<Object>() {

        @Override
        public com.google.gwt.resources.client.ImageResource getValue(Object object) {
            return new VmTypeColumn().getValue(((ImportVmData) object).getVm());
        }
    }, constants.empty(), // $NON-NLS-1$
    "30px");
    TextColumnWithTooltip<Object> memoryColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            // $NON-NLS-1$
            return String.valueOf(((ImportVmData) object).getVm().getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    table.addColumn(memoryColumn, constants.memoryVm(), "100px");
    TextColumnWithTooltip<Object> cpuColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    table.addColumn(cpuColumn, constants.cpusVm(), "50px");
    TextColumnWithTooltip<Object> diskColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    table.addColumn(diskColumn, constants.disksVm(), "50px");
    isObjectInSystemColumn = new ImageResourceColumn<Object>() {

        @Override
        public ImageResource getValue(Object object) {
            return ((ImportVmData) object).isExistsInSystem() ? getCommonResources().logNormalImage() : null;
        }
    };
    // $NON-NLS-1$
    table.addColumn(isObjectInSystemColumn, constants.vmInSetup(), "60px");
    table.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler() {

        @Override
        public void onSelectionChange(SelectionChangeEvent event) {
            ImportVmData selectedObject = ((SingleSelectionModel<ImportVmData>) event.getSource()).getSelectedObject();
            customSelectionCellFormatType.setEnabledWithToolTip((Boolean) selectedObject.getCollapseSnapshots().getEntity(), constants.importAllocationModifiedCollapse());
        // diskTable.edit(importVmModel.getImportDiskListModel());
        }
    });
    ScrollPanel sp = new ScrollPanel();
    sp.add(table);
    splitLayoutPanel.add(sp);
    table.getElement().getStyle().setPosition(Position.RELATIVE);
}
#method_after
protected void initMainTable() {
    this.table = new IVdcQueryableCellTable<Object, ImportVmModel>();
    CheckboxColumn<Object> collapseSnapshotsColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getCollapseSnapshots().setEntity(value);
            customSelectionCellFormatType.setEnabledWithToolTip(value, constants.importAllocationModifiedCollapse());
            diskTable.edit(importModel.getImportDiskListModel());
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getCollapseSnapshots().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            return ((ImportVmData) model).getCollapseSnapshots().getChangeProhibitionReason();
        }
    };
    // $NON-NLS-1$
    table.addColumn(collapseSnapshotsColumn, constants.collapseSnapshots(), "10px");
    CheckboxColumn<Object> cloneVMColumn = new CheckboxColumn<Object>(new FieldUpdater<Object, Boolean>() {

        @Override
        public void update(int index, Object model, Boolean value) {
            ((ImportVmData) model).getClone().setEntity(value);
            table.edit(importModel);
        }
    }) {

        @Override
        public Boolean getValue(Object model) {
            return (Boolean) ((ImportVmData) model).getClone().getEntity();
        }

        @Override
        protected boolean canEdit(Object model) {
            return ((ImportVmData) model).getClone().getIsChangable();
        }

        @Override
        protected String getDisabledMessage(Object model) {
            return ((ImportVmData) model).getClone().getChangeProhibitionReason();
        }
    };
    // $NON-NLS-1$
    table.addColumn(cloneVMColumn, constants.cloneVM(), "50px");
    TextColumnWithTooltip<Object> nameColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return ((ImportVmData) object).getVm().getVmName();
        }
    };
    // $NON-NLS-1$
    table.addColumn(nameColumn, constants.nameVm(), "150px");
    TextColumnWithTooltip<Object> originColumn = new EnumColumn<Object, OriginType>() {

        @Override
        protected OriginType getRawValue(Object object) {
            return ((ImportVmData) object).getVm().getOrigin();
        }
    };
    // $NON-NLS-1$
    table.addColumn(originColumn, constants.originVm(), "100px");
    table.addColumn(new WebAdminImageResourceColumn<Object>() {

        @Override
        public com.google.gwt.resources.client.ImageResource getValue(Object object) {
            return new VmTypeColumn().getValue(((ImportVmData) object).getVm());
        }
    }, constants.empty(), // $NON-NLS-1$
    "30px");
    TextColumnWithTooltip<Object> memoryColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            // $NON-NLS-1$
            return String.valueOf(((ImportVmData) object).getVm().getVmMemSizeMb()) + " MB";
        }
    };
    // $NON-NLS-1$
    table.addColumn(memoryColumn, constants.memoryVm(), "100px");
    TextColumnWithTooltip<Object> cpuColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getNumOfCpus());
        }
    };
    // $NON-NLS-1$
    table.addColumn(cpuColumn, constants.cpusVm(), "50px");
    TextColumnWithTooltip<Object> diskColumn = new TextColumnWithTooltip<Object>() {

        @Override
        public String getValue(Object object) {
            return String.valueOf(((ImportVmData) object).getVm().getDiskMap().size());
        }
    };
    // $NON-NLS-1$
    table.addColumn(diskColumn, constants.disksVm(), "50px");
    isObjectInSystemColumn = new ImageResourceColumn<Object>() {

        @Override
        public ImageResource getValue(Object object) {
            return ((ImportVmData) object).isExistsInSystem() ? getCommonResources().logNormalImage() : null;
        }
    };
    // $NON-NLS-1$
    table.addColumn(isObjectInSystemColumn, constants.vmInSetup(), "60px");
    table.getSelectionModel().addSelectionChangeHandler(new SelectionChangeEvent.Handler() {

        @Override
        public void onSelectionChange(SelectionChangeEvent event) {
            ImportVmData selectedObject = ((SingleSelectionModel<ImportVmData>) event.getSource()).getSelectedObject();
            customSelectionCellFormatType.setEnabledWithToolTip((Boolean) selectedObject.getCollapseSnapshots().getEntity(), constants.importAllocationModifiedCollapse());
        // diskTable.edit(importVmModel.getImportDiskListModel());
        }
    });
    ScrollPanel sp = new ScrollPanel();
    sp.add(table);
    splitLayoutPanel.add(sp);
    table.getElement().getStyle().setPosition(Position.RELATIVE);
}
#end_block

#method_before
private void addStorageDomainsColumn() {
    customSelectionCellStorageDomain = new CustomSelectionCell(new ArrayList<String>());
    customSelectionCellStorageDomain.setStyle(style.cellSelectBox());
    storageDomainsColumn = new Column<DiskImage, String>(customSelectionCellStorageDomain) {

        @Override
        public String getValue(DiskImage disk) {
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            ArrayList<String> storageDomainsNameList = new ArrayList<String>();
            storage_domains selectedStorageDomain = null;
            if (importData != null && importData.getStorageDomains() != null) {
                for (storage_domains storageDomain : importData.getStorageDomains()) {
                    storageDomainsNameList.add(new StorageDomainFreeSpaceRenderer<storage_domains>().render(storageDomain));
                    if (importData.getSelectedStorageDomain() != null) {
                        if (storageDomain.getId().equals(importData.getSelectedStorageDomain().getId())) {
                            selectedStorageDomain = storageDomain;
                        }
                    }
                }
            }
            ((CustomSelectionCell) getCell()).setOptions(storageDomainsNameList);
            if (!storageDomainsNameList.isEmpty()) {
                if (selectedStorageDomain != null) {
                    return new StorageDomainFreeSpaceRenderer<storage_domains>().render(selectedStorageDomain);
                } else {
                    return storageDomainsNameList.get(0);
                }
            }
            return "";
        }
    };
    storageDomainsColumn.setFieldUpdater(new FieldUpdater<DiskImage, String>() {

        @Override
        public void update(int index, DiskImage disk, String value) {
            importModel.getDiskImportData(disk.getId()).setSelectedStorageDomainString(value);
            diskTable.edit(importModel.getImportDiskListModel());
        }
    });
    // $NON-NLS-1$
    diskTable.addColumn(storageDomainsColumn, constants.storageDomainDisk(), "100px");
}
#method_after
private void addStorageDomainsColumn() {
    customSelectionCellStorageDomain = new CustomSelectionCell(new ArrayList<String>());
    customSelectionCellStorageDomain.setStyle(style.cellSelectBox());
    storageDomainsColumn = new Column<DiskImage, String>(customSelectionCellStorageDomain) {

        @Override
        public String getValue(DiskImage disk) {
            ImportDiskData importData = importModel.getDiskImportData(disk.getId());
            ArrayList<String> storageDomainsNameList = new ArrayList<String>();
            StorageDomain selectedStorageDomain = null;
            if (importData != null && importData.getStorageDomains() != null) {
                for (StorageDomain storageDomain : importData.getStorageDomains()) {
                    storageDomainsNameList.add(new StorageDomainFreeSpaceRenderer<StorageDomain>().render(storageDomain));
                    if (importData.getSelectedStorageDomain() != null) {
                        if (storageDomain.getId().equals(importData.getSelectedStorageDomain().getId())) {
                            selectedStorageDomain = storageDomain;
                        }
                    }
                }
            }
            ((CustomSelectionCell) getCell()).setOptions(storageDomainsNameList);
            if (!storageDomainsNameList.isEmpty()) {
                if (selectedStorageDomain != null) {
                    return new StorageDomainFreeSpaceRenderer<StorageDomain>().render(selectedStorageDomain);
                } else {
                    return storageDomainsNameList.get(0);
                }
            }
            return "";
        }
    };
    storageDomainsColumn.setFieldUpdater(new FieldUpdater<DiskImage, String>() {

        @Override
        public void update(int index, DiskImage disk, String value) {
            importModel.getDiskImportData(disk.getId()).setSelectedStorageDomainString(value);
            diskTable.edit(importModel.getImportDiskListModel());
        }
    });
    // $NON-NLS-1$
    diskTable.addColumn(storageDomainsColumn, constants.storageDomainDisk(), "100px");
}
#end_block

#method_before
@Override
protected void initStorageDomains() {
    Disk disk = getDisks().get(0).getDisk();
    if (disk.getDiskStorageType() != DiskStorageType.IMAGE) {
        return;
    }
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            CopyDiskModel copyDiskModel = (CopyDiskModel) target;
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
            copyDiskModel.onInitStorageDomains(storageDomains);
        }
    }), ((DiskImage) disk).getStoragePoolId().getValue());
}
#method_after
@Override
protected void initStorageDomains() {
    Disk disk = getDisks().get(0).getDisk();
    if (disk.getDiskStorageType() != DiskStorageType.IMAGE) {
        return;
    }
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            CopyDiskModel copyDiskModel = (CopyDiskModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            copyDiskModel.onInitStorageDomains(storageDomains);
        }
    }), ((DiskImage) disk).getStoragePoolId().getValue());
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVmTemplate() != null) {
        setDescription(getVmTemplateName());
    }
    StorageDomainValidator storageDomainValidator = new StorageDomainValidator(getStorageDomain());
    boolean retVal = validate(storageDomainValidator.isDomainExistAndActive());
    if (retVal) {
        // export must be to export domain
        if (getStorageDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
            retVal = false;
        }
    }
    retVal = retVal && super.canDoAction();
    // check if template (with no override option)
    if (retVal && !getParameters().getForceOverride()) {
        retVal = !ExportVmCommand.CheckTemplateInStorageDomain(getVmTemplate().getstorage_pool_id().getValue(), getParameters().getStorageDomainId(), getVmTemplateId());
        if (!retVal) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NAME_ALREADY_EXISTS);
        }
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVmTemplate() != null) {
        setDescription(getVmTemplateName());
    }
    StorageDomainValidator storageDomainValidator = new StorageDomainValidator(getStorageDomain());
    boolean retVal = validate(storageDomainValidator.isDomainExistAndActive());
    if (retVal) {
        // export must be to export domain
        if (getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
            retVal = false;
        }
    }
    retVal = retVal && super.canDoAction();
    // check if template (with no override option)
    if (retVal && !getParameters().getForceOverride()) {
        retVal = !ExportVmCommand.CheckTemplateInStorageDomain(getVmTemplate().getstorage_pool_id().getValue(), getParameters().getStorageDomainId(), getVmTemplateId());
        if (!retVal) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NAME_ALREADY_EXISTS);
        }
    }
    return retVal;
}
#end_block

#method_before
public ArrayList<storage_domains> getStorageDomains() {
    return storageDomains;
}
#method_after
public ArrayList<StorageDomain> getStorageDomains() {
    return storageDomains;
}
#end_block

#method_before
public void setStorageDomains(ArrayList<storage_domains> storageDomains) {
    this.storageDomains = storageDomains;
}
#method_after
public void setStorageDomains(ArrayList<StorageDomain> storageDomains) {
    this.storageDomains = storageDomains;
}
#end_block

#method_before
@Override
public void setItems(Iterable value) {
    if (!getStorageDomains().isEmpty() || ignoreStorageDomains) {
        ArrayList<DiskImage> disks = value != null ? Linq.<DiskImage>Cast(value) : new ArrayList<DiskImage>();
        Linq.Sort(disks, new DiskByAliasComparer());
        super.setItems(disks);
    } else {
        this.value = value;
        AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                TemplateDiskListModel model = (TemplateDiskListModel) target;
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
                Linq.Sort(storageDomains, new StorageDomainByNameComparer());
                setStorageDomains(storageDomains);
                setItems(model.value);
            }
        }));
    }
    UpdateActionAvailability();
}
#method_after
@Override
public void setItems(Iterable value) {
    if (!getStorageDomains().isEmpty() || ignoreStorageDomains) {
        ArrayList<DiskImage> disks = value != null ? Linq.<DiskImage>Cast(value) : new ArrayList<DiskImage>();
        Linq.Sort(disks, new DiskByAliasComparer());
        super.setItems(disks);
    } else {
        this.value = value;
        AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object target, Object returnValue) {
                TemplateDiskListModel model = (TemplateDiskListModel) target;
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
                Linq.Sort(storageDomains, new StorageDomainByNameComparer());
                setStorageDomains(storageDomains);
                setItems(model.value);
            }
        }));
    }
    UpdateActionAvailability();
}
#end_block

#method_before
public void UpdateStorageDomain() {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            VmGeneralModel vmGeneralModel = (VmGeneralModel) model;
            Iterable disks = (Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Iterator disksIterator = disks.iterator();
            if (disksIterator.hasNext()) {
                vmGeneralModel.setHasStorageDomain(true);
                AsyncQuery _asyncQuery1 = new AsyncQuery();
                _asyncQuery1.setModel(vmGeneralModel);
                _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object ReturnValue1) {
                        VmGeneralModel vmGeneralModel1 = (VmGeneralModel) model1;
                        storage_domains storage = (storage_domains) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                        vmGeneralModel1.setStorageDomain(storage.getstorage_name());
                        vmGeneralModel1.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
                    }
                };
                DiskImage firstDisk = (DiskImage) disksIterator.next();
                StorageDomainQueryParametersBase params = new StorageDomainQueryParametersBase(firstDisk.getStorageIds().get(0));
                params.setRefresh(false);
                Frontend.RunQuery(VdcQueryType.GetStorageDomainById, params, _asyncQuery1);
            } else {
                vmGeneralModel.setHasStorageDomain(false);
                vmGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    VM vm = (VM) getEntity();
    GetAllDisksByVmIdParameters params = new GetAllDisksByVmIdParameters(vm.getId());
    params.setRefresh(false);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, _asyncQuery);
}
#method_after
public void UpdateStorageDomain() {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            VmGeneralModel vmGeneralModel = (VmGeneralModel) model;
            Iterable disks = (Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Iterator disksIterator = disks.iterator();
            if (disksIterator.hasNext()) {
                vmGeneralModel.setHasStorageDomain(true);
                AsyncQuery _asyncQuery1 = new AsyncQuery();
                _asyncQuery1.setModel(vmGeneralModel);
                _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object ReturnValue1) {
                        VmGeneralModel vmGeneralModel1 = (VmGeneralModel) model1;
                        StorageDomain storage = (StorageDomain) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                        vmGeneralModel1.setStorageDomain(storage.getStorageName());
                        vmGeneralModel1.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
                    }
                };
                DiskImage firstDisk = (DiskImage) disksIterator.next();
                StorageDomainQueryParametersBase params = new StorageDomainQueryParametersBase(firstDisk.getStorageIds().get(0));
                params.setRefresh(false);
                Frontend.RunQuery(VdcQueryType.GetStorageDomainById, params, _asyncQuery1);
            } else {
                vmGeneralModel.setHasStorageDomain(false);
                vmGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    VM vm = (VM) getEntity();
    GetAllDisksByVmIdParameters params = new GetAllDisksByVmIdParameters(vm.getId());
    params.setRefresh(false);
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, params, _asyncQuery);
}
#end_block

#method_before
@Override
public void InitStorageDomains() {
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<storage_domains> activeStorageDomainList = new ArrayList<storage_domains>();
            for (storage_domains storageDomain : (ArrayList<storage_domains>) returnValue) {
                if (storageDomain.getstatus() == StorageDomainStatus.Active && (storageDomain.getstorage_domain_type() == StorageDomainType.Data || storageDomain.getstorage_domain_type() == StorageDomainType.Master)) {
                    activeStorageDomainList.add(storageDomain);
                }
            }
            for (DiskModel diskModel : getModel().getDisks()) {
                if (diskModel.getDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage diskImage = (DiskImage) diskModel.getDisk();
                    ArrayList<storage_domains> activeDiskStorages = Linq.getStorageDomainsByIds(diskImage.getStorageIds(), activeStorageDomainList);
                    if (activeDiskStorages.isEmpty()) {
                        behavior.DisableNewTemplateModel(ConstantsManager.getInstance().getMessages().vmStorageDomainIsNotAccessible());
                        return;
                    }
                }
            }
            if (activeStorageDomainList.size() > 0) {
                if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
                    storage_domains selectStorage = (storage_domains) getSystemTreeSelectedItem().getEntity();
                    storage_domains s = Linq.FirstOrDefault(activeStorageDomainList, new Linq.StoragePredicate(selectStorage.getId()));
                    activeStorageDomainList = new ArrayList<storage_domains>(Arrays.asList(new storage_domains[] { s }));
                    behavior.getModel().getStorageDomain().setItems(activeStorageDomainList);
                    behavior.getModel().getStorageDomain().setIsChangable(false);
                    behavior.getModel().getStorageDomain().setSelectedItem(s);
                } else {
                    behavior.getModel().getStorageDomain().setItems(activeStorageDomainList);
                    behavior.getModel().getStorageDomain().setIsChangable(true);
                }
            } else {
                behavior.DisableNewTemplateModel(ConstantsManager.getInstance().getMessages().noActiveStorageDomain());
            }
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisksAllocationModel().getDisks();
            Linq.Sort(activeStorageDomainList, new Linq.StorageDomainByNameComparer());
            if (disks != null) {
                for (DiskModel diskModel : disks) {
                    diskModel.getStorageDomain().setItems(activeStorageDomainList);
                    diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                }
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId(), ActionGroup.CREATE_TEMPLATE);
}
#method_after
@Override
public void InitStorageDomains() {
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            NewTemplateVmModelBehavior behavior = (NewTemplateVmModelBehavior) target;
            ArrayList<StorageDomain> activeStorageDomainList = new ArrayList<StorageDomain>();
            for (StorageDomain storageDomain : (ArrayList<StorageDomain>) returnValue) {
                if (storageDomain.getStatus() == StorageDomainStatus.Active && (storageDomain.getStorageDomainType() == StorageDomainType.Data || storageDomain.getStorageDomainType() == StorageDomainType.Master)) {
                    activeStorageDomainList.add(storageDomain);
                }
            }
            for (DiskModel diskModel : getModel().getDisks()) {
                if (diskModel.getDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
                    DiskImage diskImage = (DiskImage) diskModel.getDisk();
                    ArrayList<StorageDomain> activeDiskStorages = Linq.getStorageDomainsByIds(diskImage.getStorageIds(), activeStorageDomainList);
                    if (activeDiskStorages.isEmpty()) {
                        behavior.DisableNewTemplateModel(ConstantsManager.getInstance().getMessages().vmStorageDomainIsNotAccessible());
                        return;
                    }
                }
            }
            if (activeStorageDomainList.size() > 0) {
                if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
                    StorageDomain selectStorage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
                    StorageDomain s = Linq.FirstOrDefault(activeStorageDomainList, new Linq.StoragePredicate(selectStorage.getId()));
                    activeStorageDomainList = new ArrayList<StorageDomain>(Arrays.asList(new StorageDomain[] { s }));
                    behavior.getModel().getStorageDomain().setItems(activeStorageDomainList);
                    behavior.getModel().getStorageDomain().setIsChangable(false);
                    behavior.getModel().getStorageDomain().setSelectedItem(s);
                } else {
                    behavior.getModel().getStorageDomain().setItems(activeStorageDomainList);
                    behavior.getModel().getStorageDomain().setIsChangable(true);
                }
            } else {
                behavior.DisableNewTemplateModel(ConstantsManager.getInstance().getMessages().noActiveStorageDomain());
            }
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisksAllocationModel().getDisks();
            Linq.Sort(activeStorageDomainList, new Linq.StorageDomainByNameComparer());
            if (disks != null) {
                for (DiskModel diskModel : disks) {
                    diskModel.getStorageDomain().setItems(activeStorageDomainList);
                    diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                }
            }
        }
    }, getModel().getHash()), vm.getStoragePoolId(), ActionGroup.CREATE_TEMPLATE);
}
#end_block

#method_before
protected boolean checkTemplateInStorageDomain(List<DiskImage> diskImages) {
    boolean retValue = checkStorageDomain() && checkStorageDomainStatus(StorageDomainStatus.Active) && checkIfDisksExist(diskImages);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid())) {
        List<DiskImage> imageList = ImagesHandler.filterImageDisks(DbFacade.getInstance().getDiskDao().getAllForVm(getVm().getVmtGuid()), false, false);
        Map<Guid, DiskImage> templateImagesMap = new HashMap<Guid, DiskImage>();
        for (DiskImage image : imageList) {
            templateImagesMap.put(image.getImageId(), image);
        }
        for (DiskImage image : diskImages) {
            if (templateImagesMap.containsKey(image.getItGuid())) {
                if (!templateImagesMap.get(image.getItGuid()).getStorageIds().contains(getParameters().getStorageDomainId())) {
                    retValue = false;
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
                    break;
                }
            }
        }
    }
    return retValue;
}
#method_after
protected boolean checkTemplateInStorageDomain(List<DiskImage> diskImages) {
    boolean retValue = checkStorageDomain() && checkStorageDomainStatus(StorageDomainStatus.Active) && checkIfDisksExist(diskImages);
    if (retValue && !VmTemplateHandler.BlankVmTemplateId.equals(getVm().getVmtGuid())) {
        List<DiskImage> imageList = ImagesHandler.filterImageDisks(DbFacade.getInstance().getDiskDao().getAllForVm(getVm().getVmtGuid()), false, false);
        Map<Guid, DiskImage> templateImagesMap = new HashMap<Guid, DiskImage>();
        for (DiskImage image : imageList) {
            templateImagesMap.put(image.getImageId(), image);
        }
        for (DiskImage image : diskImages) {
            if (templateImagesMap.containsKey(image.getImageTemplateId())) {
                if (!templateImagesMap.get(image.getImageTemplateId()).getStorageIds().contains(getParameters().getStorageDomainId())) {
                    retValue = false;
                    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
                    break;
                }
            }
        }
    }
    return retValue;
}
#end_block

#method_before
protected void writeGeneralData() {
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(vmBase.getDescription());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Domain");
    _writer.WriteRaw(vmBase.getDomain());
    _writer.WriteEndElement();
    _writer.WriteStartElement("CreationDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(vmBase.getCreationDate()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("ExportDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(new Date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsAutoSuspend");
    _writer.WriteRaw(String.valueOf(vmBase.isAutoSuspend()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("DeleteProtected");
    _writer.WriteRaw(String.valueOf(vmBase.isDeleteProtected()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsSmartcardEnabled");
    _writer.WriteRaw(String.valueOf(vmBase.isSmartcardEnabled()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("TimeZone");
    _writer.WriteRaw(vmBase.getTimeZone());
    _writer.WriteEndElement();
    _writer.WriteStartElement("default_boot_sequence");
    _writer.WriteRaw(String.valueOf(vmBase.getDefaultBootSequence().getValue()));
    _writer.WriteEndElement();
    if (!StringUtils.isBlank(vmBase.getInitrdUrl())) {
        _writer.WriteStartElement("initrd_url");
        _writer.WriteRaw(vmBase.getInitrdUrl());
        _writer.WriteEndElement();
    }
    if (!StringUtils.isBlank(vmBase.getKernelUrl())) {
        _writer.WriteStartElement("kernel_url");
        _writer.WriteRaw(vmBase.getKernelUrl());
        _writer.WriteEndElement();
    }
    if (!StringUtils.isBlank(vmBase.getKernelParams())) {
        _writer.WriteStartElement("kernel_params");
        _writer.WriteRaw(vmBase.getKernelParams());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("Generation");
    _writer.WriteRaw(String.valueOf(vmBase.getDbGeneration()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("VmType");
    _writer.WriteRaw(String.valueOf(vmBase.getVmType().getValue()));
    _writer.WriteEndElement();
    if (vmBase.getTunnelMigration() != null) {
        _writer.WriteStartElement("TunnelMigration");
        _writer.WriteRaw(String.valueOf(vmBase.getTunnelMigration()));
        _writer.WriteEndElement();
    }
}
#method_after
protected void writeGeneralData() {
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(vmBase.getDescription());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Domain");
    _writer.WriteRaw(vmBase.getDomain());
    _writer.WriteEndElement();
    _writer.WriteStartElement("CreationDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(vmBase.getCreationDate()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("ExportDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(new Date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsAutoSuspend");
    _writer.WriteRaw(String.valueOf(vmBase.isAutoSuspend()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("DeleteProtected");
    _writer.WriteRaw(String.valueOf(vmBase.isDeleteProtected()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsSmartcardEnabled");
    _writer.WriteRaw(String.valueOf(vmBase.isSmartcardEnabled()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("TimeZone");
    _writer.WriteRaw(vmBase.getTimeZone());
    _writer.WriteEndElement();
    _writer.WriteStartElement("default_boot_sequence");
    _writer.WriteRaw(String.valueOf(vmBase.getDefaultBootSequence().getValue()));
    _writer.WriteEndElement();
    if (!StringUtils.isBlank(vmBase.getInitrdUrl())) {
        _writer.WriteStartElement("initrd_url");
        _writer.WriteRaw(vmBase.getInitrdUrl());
        _writer.WriteEndElement();
    }
    if (!StringUtils.isBlank(vmBase.getKernelUrl())) {
        _writer.WriteStartElement("kernel_url");
        _writer.WriteRaw(vmBase.getKernelUrl());
        _writer.WriteEndElement();
    }
    if (!StringUtils.isBlank(vmBase.getKernelParams())) {
        _writer.WriteStartElement("kernel_params");
        _writer.WriteRaw(vmBase.getKernelParams());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("Generation");
    _writer.WriteRaw(String.valueOf(vmBase.getDbGeneration()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("VmType");
    _writer.WriteRaw(String.valueOf(vmBase.getVmType().getValue()));
    _writer.WriteEndElement();
    if (vmBase.getTunnelMigration() != null) {
        _writer.WriteStartElement("TunnelMigration");
        _writer.WriteRaw(String.valueOf(vmBase.getTunnelMigration()));
        _writer.WriteEndElement();
    }
    if (vmBase.getVncKeyboardLayout() != null) {
        _writer.WriteStartElement("VncKeyboardLayout");
        _writer.WriteRaw(vmBase.getVncKeyboardLayout());
        _writer.WriteEndElement();
    }
}
#end_block

#method_before
@Override
protected DiskImage cloneDiskImage(Guid newImageGuid) {
    DiskImage returnValue = super.cloneDiskImage(newImageGuid);
    returnValue.setItGuid(getImage().getImageId());
    return returnValue;
}
#method_after
@Override
protected DiskImage cloneDiskImage(Guid newImageGuid) {
    DiskImage returnValue = super.cloneDiskImage(newImageGuid);
    returnValue.setImageTemplateId(getImage().getImageId());
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validateVmNotDuringSnapshot()) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getStorageIds().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getStorageIds().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setStorageIds(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, storage_domains> storageDomains = new HashMap<Guid, storage_domains>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getstatus() == null || storage.getstatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getstorage_domain_type() == StorageDomainType.ImportExport || storage.getstorage_domain_type() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<storage_domains, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validateVmNotDuringSnapshot()) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getStorageIds().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getStorageIds().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setStorageIds(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, StorageDomain> storageDomains = new HashMap<Guid, StorageDomain>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        StorageDomain storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getStatus() == null || storage.getStatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getStorageDomainType() == StorageDomainType.ImportExport || storage.getStorageDomainType() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<StorageDomain, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<StorageDomain, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
protected boolean doesStorageDomainhaveSpaceForRequest(storage_domains storageDomain, long spaceForRequest) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(spaceForRequest));
}
#method_after
protected boolean doesStorageDomainhaveSpaceForRequest(StorageDomain storageDomain, long spaceForRequest) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(spaceForRequest));
}
#end_block

#method_before
protected void AddVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), (VmTemplateStatus.Locked.getValue()), (getParameters().getMasterVm().getUsbPolicy().getValue()), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().isAutoSuspend(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getTunnelMigration()));
    getVmTemplate().setAutoStartup(getParameters().getMasterVm().isAutoStartup());
    getVmTemplate().setPriority(getParameters().getMasterVm().getPriority());
    getVmTemplate().setDefaultDisplayType(getParameters().getMasterVm().getDefaultDisplayType());
    getVmTemplate().setInitrdUrl(getParameters().getMasterVm().getInitrdUrl());
    getVmTemplate().setKernelUrl(getParameters().getMasterVm().getKernelUrl());
    getVmTemplate().setKernelParams(getParameters().getMasterVm().getKernelParams());
    getVmTemplate().setStateless(getParameters().getMasterVm().isStateless());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setDedicatedVmForVds(getParameters().getMasterVm().getDedicatedVmForVds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#method_after
protected void AddVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), (VmTemplateStatus.Locked.getValue()), (getParameters().getMasterVm().getUsbPolicy().getValue()), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().isAutoSuspend(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getTunnelMigration(), getParameters().getMasterVm().getVncKeyboardLayout()));
    getVmTemplate().setAutoStartup(getParameters().getMasterVm().isAutoStartup());
    getVmTemplate().setPriority(getParameters().getMasterVm().getPriority());
    getVmTemplate().setDefaultDisplayType(getParameters().getMasterVm().getDefaultDisplayType());
    getVmTemplate().setInitrdUrl(getParameters().getMasterVm().getInitrdUrl());
    getVmTemplate().setKernelUrl(getParameters().getMasterVm().getKernelUrl());
    getVmTemplate().setKernelParams(getParameters().getMasterVm().getKernelParams());
    getVmTemplate().setStateless(getParameters().getMasterVm().isStateless());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setDedicatedVmForVds(getParameters().getMasterVm().getDedicatedVmForVds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#end_block

#method_before
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(OVF_URI, "id", vmBase.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:OperatingSystemSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(vmBase.getOs().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:VirtualHardwareSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vm.getStaticData().getNumOfCpus(), _vm.getStaticData().getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vm.getStaticData().getNumOfCpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(vmBase.getNumOfSockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(vmBase.getCpuPerSocket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", vmBase.getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(vmBase.getMemSizeMb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(image.getDiskAlias());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(OvfParser.CreateImageFile(image));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getItGuid().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getAppList());
        _writer.WriteEndElement();
        if (image.getStorageIds() != null && image.getStorageIds().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getStorageIds().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getStoragePoolId() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getStoragePoolId().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getCreationDate()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getLastModified()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "last_modified_date");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getLastModifiedDate()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vm.getInterfaces()) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        String networkName = iface.getNetworkName() != null ? iface.getNetworkName() : "[No Network]";
        _writer.WriteRaw("Ethernet adapter on " + networkName);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        if (iface.getNetworkName() != null) {
            _writer.WriteRaw(iface.getNetworkName());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Linked");
        _writer.WriteRaw(String.valueOf(iface.isLinked()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "MACAddress");
        _writer.WriteRaw(iface.getMacAddress());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(String.valueOf(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw(vmBase.getUsbPolicy() != null ? vmBase.getUsbPolicy().toString() : UsbPolicy.DISABLED.name());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(vmBase);
    // CD
    writeCd(vmBase);
    // ummanged devices
    writeOtherDevices(vmBase, _writer);
    // End hardware section
    _writer.WriteEndElement();
    writeSnapshotsSection();
}
#method_after
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(OVF_URI, "id", vmBase.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:OperatingSystemSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(vmBase.getOs().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:VirtualHardwareSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vm.getStaticData().getNumOfCpus(), _vm.getStaticData().getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vm.getStaticData().getNumOfCpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(vmBase.getNumOfSockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(vmBase.getCpuPerSocket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", vmBase.getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(vmBase.getMemSizeMb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(image.getDiskAlias());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(OvfParser.CreateImageFile(image));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getImageTemplateId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getAppList());
        _writer.WriteEndElement();
        if (image.getStorageIds() != null && image.getStorageIds().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getStorageIds().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getStoragePoolId() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getStoragePoolId().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getCreationDate()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getLastModified()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "last_modified_date");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getLastModifiedDate()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vm.getInterfaces()) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        String networkName = iface.getNetworkName() != null ? iface.getNetworkName() : "[No Network]";
        _writer.WriteRaw("Ethernet adapter on " + networkName);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        if (iface.getNetworkName() != null) {
            _writer.WriteRaw(iface.getNetworkName());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Linked");
        _writer.WriteRaw(String.valueOf(iface.isLinked()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "MACAddress");
        _writer.WriteRaw(iface.getMacAddress());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(String.valueOf(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw(vmBase.getUsbPolicy() != null ? vmBase.getUsbPolicy().toString() : UsbPolicy.DISABLED.name());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(vmBase);
    // CD
    writeCd(vmBase);
    // ummanged devices
    writeOtherDevices(vmBase, _writer);
    // End hardware section
    _writer.WriteEndElement();
    writeSnapshotsSection();
}
#end_block

#method_before
protected void executeImport() {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, getEntity().getId(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getstorage_type()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setVmName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getVmName());
        }
        prms.add(prm);
    }
    importModel.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            VmBackupModel vmBackupModel = (VmBackupModel) result.getState();
            vmBackupModel.getWindow().StopProgress();
            vmBackupModel.Cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && vmBackupModel.getSelectedItems().size() == retVals.size()) {
                // $NON-NLS-1$
                String importedVms = "";
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmBackupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms += vm.getVmName() + ", ";
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    importedVms = StringHelper.trimEnd(importedVms.trim(), ',');
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(importedVms));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmBackupModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#method_after
protected void executeImport() {
    ArrayList<VdcActionParametersBase> prms = new ArrayList<VdcActionParametersBase>();
    for (Object item : importModel.getItems()) {
        VM vm = ((ImportVmData) item).getVm();
        ImportVmParameters prm = new ImportVmParameters(vm, getEntity().getId(), Guid.Empty, importModel.getStoragePool().getId(), ((VDSGroup) importModel.getCluster().getSelectedItem()).getId());
        if (importModel.getClusterQuota().getSelectedItem() != null && importModel.getClusterQuota().getIsAvailable()) {
            prm.setQuotaId(((Quota) importModel.getClusterQuota().getSelectedItem()).getId());
        }
        prm.setForceOverride(true);
        prm.setCopyCollapse((Boolean) ((ImportVmData) item).getCollapseSnapshots().getEntity());
        Map<Guid, Guid> map = new HashMap<Guid, Guid>();
        for (Map.Entry<Guid, Disk> entry : vm.getDiskMap().entrySet()) {
            DiskImage disk = (DiskImage) entry.getValue();
            map.put(disk.getId(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getId());
            disk.setvolumeFormat(AsyncDataProvider.GetDiskVolumeFormat(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType(), importModel.getDiskImportData(disk.getId()).getSelectedStorageDomain().getStorageType()));
            disk.setVolumeType(importModel.getDiskImportData(disk.getId()).getSelectedVolumeType());
            if (importModel.getDiskImportData(disk.getId()).getSelectedQuota() != null) {
                disk.setQuotaId(importModel.getDiskImportData(disk.getId()).getSelectedQuota().getId());
            }
        }
        prm.setImageToDestinationDomainMap(map);
        if (((ImportVmData) item).isExistsInSystem() || (Boolean) ((ImportVmData) item).getClone().getEntity()) {
            if (!cloneObjectMap.containsKey(vm.getId())) {
                continue;
            }
            prm.setImportAsNewEntity(true);
            prm.setCopyCollapse(true);
            prm.getVm().setVmName(((ImportVmData) cloneObjectMap.get(vm.getId())).getVm().getVmName());
        }
        prms.add(prm);
    }
    importModel.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.ImportVm, prms, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            VmBackupModel vmBackupModel = (VmBackupModel) result.getState();
            vmBackupModel.getWindow().StopProgress();
            vmBackupModel.Cancel();
            ArrayList<VdcReturnValueBase> retVals = (ArrayList<VdcReturnValueBase>) result.getReturnValue();
            if (retVals != null && vmBackupModel.getSelectedItems().size() == retVals.size()) {
                // $NON-NLS-1$
                String importedVms = "";
                int counter = 0;
                boolean toShowConfirmWindow = false;
                for (Object item : vmBackupModel.getSelectedItems()) {
                    VM vm = (VM) item;
                    if (retVals.get(counter) != null && retVals.get(counter).getCanDoAction()) {
                        // $NON-NLS-1$
                        importedVms += vm.getVmName() + ", ";
                        toShowConfirmWindow = true;
                    }
                    counter++;
                }
                // VM
                if (toShowConfirmWindow) {
                    ConfirmationModel confirmModel = new ConfirmationModel();
                    vmBackupModel.setConfirmWindow(confirmModel);
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle());
                    // $NON-NLS-1$
                    confirmModel.setHashName("import_virtual_machine");
                    importedVms = StringHelper.trimEnd(importedVms.trim(), ',');
                    confirmModel.setMessage(ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(importedVms));
                    UICommand tempVar2 = new // $NON-NLS-1$
                    UICommand(// $NON-NLS-1$
                    "CancelConfirm", vmBackupModel);
                    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                    tempVar2.setIsDefault(true);
                    tempVar2.setIsCancel(true);
                    confirmModel.getCommands().add(tempVar2);
                }
            }
        }
    }, this);
}
#end_block

#method_before
@Override
protected void SyncSearch() {
    super.SyncSearch();
    if (getEntity() == null || getEntity().getstorage_domain_type() != StorageDomainType.ImportExport || getEntity().getstorage_domain_shared_status() != StorageDomainSharedStatus.Active) {
        setItems(Collections.emptyList());
    } else {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object ReturnValue) {
                VmBackupModel backupModel = (VmBackupModel) model;
                ArrayList<storage_pool> list = (ArrayList<storage_pool>) ReturnValue;
                if (list != null && list.size() > 0) {
                    storage_pool dataCenter = list.get(0);
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(backupModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model1, Object ReturnValue1) {
                            VmBackupModel backupModel1 = (VmBackupModel) model1;
                            backupModel1.setItems((ArrayList<VM>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue());
                        }
                    };
                    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(dataCenter.getId(), backupModel.getEntity().getId());
                    Frontend.RunQuery(VdcQueryType.GetVmsFromExportDomain, tempVar, _asyncQuery1);
                }
            }
        };
        AsyncDataProvider.GetDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
    }
}
#method_after
@Override
protected void SyncSearch() {
    super.SyncSearch();
    if (getEntity() == null || getEntity().getStorageDomainType() != StorageDomainType.ImportExport || getEntity().getStorageDomainSharedStatus() != StorageDomainSharedStatus.Active) {
        setItems(Collections.emptyList());
    } else {
        AsyncQuery _asyncQuery = new AsyncQuery();
        _asyncQuery.setModel(this);
        _asyncQuery.asyncCallback = new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object ReturnValue) {
                VmBackupModel backupModel = (VmBackupModel) model;
                ArrayList<storage_pool> list = (ArrayList<storage_pool>) ReturnValue;
                if (list != null && list.size() > 0) {
                    storage_pool dataCenter = list.get(0);
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(backupModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model1, Object ReturnValue1) {
                            VmBackupModel backupModel1 = (VmBackupModel) model1;
                            backupModel1.setItems((ArrayList<VM>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue());
                        }
                    };
                    GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(dataCenter.getId(), backupModel.getEntity().getId());
                    Frontend.RunQuery(VdcQueryType.GetVmsFromExportDomain, tempVar, _asyncQuery1);
                }
            }
        };
        AsyncDataProvider.GetDataCentersByStorageDomain(_asyncQuery, getEntity().getId());
    }
}
#end_block

#method_before
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getStorageDomainStaticDao();
    dynamicDao = dbFacade.getStorageDomainDynamicDao();
    diskImageDao = dbFacade.getDiskImageDao();
    imageDao = dbFacade.getImageDao();
    existingDomain = dao.get(new Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab"));
    newStaticDomain = new StorageDomainStatic();
    newStaticDomain.setstorage_name("NewStorageDomain");
    newStaticDomain.setstorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl");
}
#method_after
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getStorageDomainStaticDao();
    dynamicDao = dbFacade.getStorageDomainDynamicDao();
    diskImageDao = dbFacade.getDiskImageDao();
    imageDao = dbFacade.getImageDao();
    existingDomain = dao.get(new Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab"));
    newStaticDomain = new StorageDomainStatic();
    newStaticDomain.setStorageName("NewStorageDomain");
    newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl");
}
#end_block

#method_before
@Test
public void testGetByName() {
    StorageDomainStatic result = dao.getByName(existingDomain.getstorage_name());
    assertNotNull(result);
    assertEquals(existingDomain.getId(), result.getId());
}
#method_after
@Test
public void testGetByName() {
    StorageDomainStatic result = dao.getByName(existingDomain.getStorageName());
    assertNotNull(result);
    assertEquals(existingDomain.getId(), result.getId());
}
#end_block

#method_before
@Test
public void testGetAllForStoragePoolOfStorageType() {
    List<StorageDomainStatic> result = dao.getAllForStoragePoolOfStorageType(StorageType.ISCSI, EXISTING_POOL_ID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (StorageDomainStatic domain : result) {
        assertEquals(StorageType.ISCSI, domain.getstorage_type());
    }
}
#method_after
@Test
public void testGetAllForStoragePoolOfStorageType() {
    List<StorageDomainStatic> result = dao.getAllForStoragePoolOfStorageType(StorageType.ISCSI, EXISTING_POOL_ID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (StorageDomainStatic domain : result) {
        assertEquals(StorageType.ISCSI, domain.getStorageType());
    }
}
#end_block

#method_before
@Test
public void testGetAllOfStorageType() {
    List<StorageDomainStatic> result = dao.getAllOfStorageType(StorageType.ISCSI);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (StorageDomainStatic domain : result) {
        assertEquals(StorageType.ISCSI, domain.getstorage_type());
    }
}
#method_after
@Test
public void testGetAllOfStorageType() {
    List<StorageDomainStatic> result = dao.getAllOfStorageType(StorageType.ISCSI);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (StorageDomainStatic domain : result) {
        assertEquals(StorageType.ISCSI, domain.getStorageType());
    }
}
#end_block

#method_before
@Test
public void testUpdate() {
    existingDomain.setstorage_name("UpdatedName");
    dao.update(existingDomain);
    StorageDomainStatic after = dao.get(existingDomain.getId());
    assertEquals(after, existingDomain);
}
#method_after
@Test
public void testUpdate() {
    existingDomain.setStorageName("UpdatedName");
    dao.update(existingDomain);
    StorageDomainStatic after = dao.get(existingDomain.getId());
    assertEquals(after, existingDomain);
}
#end_block

#method_before
@Test
public void testRemove() {
    dynamicDao.remove(existingDomain.getId());
    List<DiskImage> imagesToRemove = diskImageDao.getAllSnapshotsForStorageDomain(existingDomain.getId());
    Set<Guid> itGuids = new HashSet<Guid>();
    for (DiskImage image : imagesToRemove) {
        itGuids.add(image.getItGuid());
    }
    // First remove images that are not image templates
    for (DiskImage image : imagesToRemove) {
        if (!itGuids.contains(image.getImageId())) {
            imageDao.remove(image.getImageId());
        }
    }
    // Remove images of templates - the blank image guid (empty guid was also inserted) so it is first removed from
    // the set
    // as it has no representation as image on the storage domain
    itGuids.remove(Guid.Empty);
    for (Guid guid : itGuids) {
        imageDao.remove(guid);
    }
    dao.remove(existingDomain.getId());
    StorageDomainStatic domainResult = dao.get(existingDomain.getId());
    assertNull(domainResult);
}
#method_after
@Test
public void testRemove() {
    dynamicDao.remove(existingDomain.getId());
    List<DiskImage> imagesToRemove = diskImageDao.getAllSnapshotsForStorageDomain(existingDomain.getId());
    Set<Guid> itGuids = new HashSet<Guid>();
    for (DiskImage image : imagesToRemove) {
        itGuids.add(image.getImageTemplateId());
    }
    // First remove images that are not image templates
    for (DiskImage image : imagesToRemove) {
        if (!itGuids.contains(image.getImageId())) {
            imageDao.remove(image.getImageId());
        }
    }
    // Remove images of templates - the blank image guid (empty guid was also inserted) so it is first removed from
    // the set
    // as it has no representation as image on the storage domain
    itGuids.remove(Guid.Empty);
    for (Guid guid : itGuids) {
        imageDao.remove(guid);
    }
    dao.remove(existingDomain.getId());
    StorageDomainStatic domainResult = dao.get(existingDomain.getId());
    assertNull(domainResult);
}
#end_block

#method_before
private void OnSave() {
    DiskModel model = (DiskModel) getWindow();
    if (model.getProgress() != null || !model.Validate()) {
        return;
    }
    if ((Boolean) model.getAttachDisk().getEntity()) {
        OnAttachDisks();
        return;
    }
    storage_domains storageDomain = (storage_domains) model.getStorageDomain().getSelectedItem();
    Disk disk;
    boolean isInternal = (Boolean) model.getIsInternal().getEntity();
    if (isInternal) {
        DiskImage diskImage = model.getIsNew() ? new DiskImage() : (DiskImage) getSelectedItem();
        diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
        diskImage.setVolumeType((VolumeType) model.getVolumeType().getSelectedItem());
        diskImage.setvolumeFormat(model.getVolumeFormat());
        if (model.getQuota().getIsAvailable()) {
            diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
        }
        disk = diskImage;
    } else {
        LunDisk lunDisk;
        SanStorageModel sanStorageModel = model.getSanStorageModel();
        ArrayList<String> partOfSdLunsMessages = sanStorageModel.getPartOfSdLunsMessages();
        if (model.getIsNew()) {
            if (partOfSdLunsMessages.isEmpty() || sanStorageModel.isForce()) {
                LUNs luns = (LUNs) model.getSanStorageModel().getAddedLuns().get(0).getEntity();
                luns.setLunType((StorageType) model.getStorageType().getSelectedItem());
                lunDisk = new LunDisk();
                lunDisk.setLun(luns);
            } else {
                ForceCreationWarning(partOfSdLunsMessages);
                return;
            }
        } else {
            lunDisk = (LunDisk) getSelectedItem();
        }
        disk = lunDisk;
    }
    disk.setDiskAlias((String) model.getAlias().getEntity());
    disk.setDiskDescription((String) model.getDescription().getEntity());
    disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
    disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
    disk.setBoot((Boolean) model.getIsBootable().getEntity());
    disk.setShareable((Boolean) model.getIsShareable().getEntity());
    disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
    disk.setPropagateErrors(PropagateErrors.Off);
    VdcActionType actionType;
    VmDiskOperationParameterBase parameters;
    if (model.getIsNew()) {
        actionType = VdcActionType.AddDisk;
        parameters = new AddDiskParameters(Guid.Empty, disk);
        if (isInternal) {
            ((AddDiskParameters) parameters).setStorageDomainId(storageDomain.getId());
        }
    } else {
        actionType = VdcActionType.UpdateVmDisk;
        parameters = new UpdateVmDiskParameters(Guid.Empty, disk.getId(), disk);
    }
    model.StartProgress(null);
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    paramerterList.add(parameters);
    Frontend.RunMultipleAction(actionType, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DiskListModel localModel = (DiskListModel) result.getState();
            localModel.getWindow().StopProgress();
            Cancel();
        }
    }, this);
}
#method_after
private void OnSave() {
    DiskModel model = (DiskModel) getWindow();
    if (model.getProgress() != null || !model.Validate()) {
        return;
    }
    if ((Boolean) model.getAttachDisk().getEntity()) {
        OnAttachDisks();
        return;
    }
    StorageDomain storageDomain = (StorageDomain) model.getStorageDomain().getSelectedItem();
    Disk disk;
    boolean isInternal = (Boolean) model.getIsInternal().getEntity();
    if (isInternal) {
        DiskImage diskImage = model.getIsNew() ? new DiskImage() : (DiskImage) getSelectedItem();
        diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
        diskImage.setVolumeType((VolumeType) model.getVolumeType().getSelectedItem());
        diskImage.setvolumeFormat(model.getVolumeFormat());
        if (model.getQuota().getIsAvailable()) {
            diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
        }
        disk = diskImage;
    } else {
        LunDisk lunDisk;
        SanStorageModel sanStorageModel = model.getSanStorageModel();
        ArrayList<String> partOfSdLunsMessages = sanStorageModel.getPartOfSdLunsMessages();
        if (model.getIsNew()) {
            if (partOfSdLunsMessages.isEmpty() || sanStorageModel.isForce()) {
                LUNs luns = (LUNs) model.getSanStorageModel().getAddedLuns().get(0).getEntity();
                luns.setLunType((StorageType) model.getStorageType().getSelectedItem());
                lunDisk = new LunDisk();
                lunDisk.setLun(luns);
            } else {
                ForceCreationWarning(partOfSdLunsMessages);
                return;
            }
        } else {
            lunDisk = (LunDisk) getSelectedItem();
        }
        disk = lunDisk;
    }
    disk.setDiskAlias((String) model.getAlias().getEntity());
    disk.setDiskDescription((String) model.getDescription().getEntity());
    disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
    disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
    disk.setBoot((Boolean) model.getIsBootable().getEntity());
    disk.setShareable((Boolean) model.getIsShareable().getEntity());
    disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
    disk.setPropagateErrors(PropagateErrors.Off);
    VdcActionType actionType;
    VmDiskOperationParameterBase parameters;
    if (model.getIsNew()) {
        actionType = VdcActionType.AddDisk;
        parameters = new AddDiskParameters(Guid.Empty, disk);
        if (isInternal) {
            ((AddDiskParameters) parameters).setStorageDomainId(storageDomain.getId());
        }
    } else {
        actionType = VdcActionType.UpdateVmDisk;
        parameters = new UpdateVmDiskParameters(Guid.Empty, disk.getId(), disk);
    }
    model.StartProgress(null);
    ArrayList<VdcActionParametersBase> paramerterList = new ArrayList<VdcActionParametersBase>();
    paramerterList.add(parameters);
    Frontend.RunMultipleAction(actionType, paramerterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DiskListModel localModel = (DiskListModel) result.getState();
            localModel.getWindow().StopProgress();
            Cancel();
        }
    }, this);
}
#end_block

#method_before
private void UpdateProperties() {
    VmPool pool = (VmPool) getEntity();
    setName(pool.getVmPoolName());
    setDescription(pool.getVmPoolDescription());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) ((VdcQueryReturnValue) result).getReturnValue());
            }
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            if (getvm() != null) {
                poolGeneralModel.setTemplate(getvm().getVmtName());
                poolGeneralModel.setCpuInfo(// $NON-NLS-1$ //$NON-NLS-2$
                getvm().getNumOfCpus() + " " + "(" + getvm().getNumOfSockets() + " Socket(s), " + getvm().getCpuPerSocket() + // $NON-NLS-1$ //$NON-NLS-2$
                " Core(s) per Socket)");
                poolGeneralModel.setMonitorCount(getvm().getNumOfMonitors());
                Translator translator = EnumTranslator.Create(VmOsType.class);
                poolGeneralModel.setOS(translator.get(getvm().getVmOs()));
                // $NON-NLS-1$
                poolGeneralModel.setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                poolGeneralModel.setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                translator = EnumTranslator.Create(DisplayType.class);
                poolGeneralModel.setDefaultDisplayType(translator.get(getvm().getDefaultDisplayType()));
                translator = EnumTranslator.Create(OriginType.class);
                poolGeneralModel.setOrigin(translator.get(getvm().getOrigin()));
                translator = EnumTranslator.Create(UsbPolicy.class);
                poolGeneralModel.setUsbPolicy(translator.get(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.IsWindowsOsType(getvm().getVmOs()));
                poolGeneralModel.setDomain(getvm().getVmDomain());
                setHasTimeZone(AsyncDataProvider.IsWindowsOsType(getvm().getVmOs()));
                poolGeneralModel.setTimeZone(getvm().getTimeZone());
                poolGeneralModel.setIsStateless(getvm().isStateless());
                poolGeneralModel.setHasDefaultHost(getvm().getDedicatedVmForVds() != null);
                if (poolGeneralModel.getHasDefaultHost()) {
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(poolGeneralModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model1, Object ReturnValue1) {
                            PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                            ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            for (VDS host : hosts) {
                                if (host.getId().equals(poolGeneralModel1.getvm().getDedicatedVmForVds())) {
                                    poolGeneralModel1.setDefaultHost(host.getVdsName());
                                    break;
                                }
                            }
                            poolGeneralModel1.UpdateStorageDomain();
                        }
                    };
                    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getVdsGroupName() + " sortby name", SearchType.VDS), // $NON-NLS-1$
                    _asyncQuery1);
                } else {
                    // $NON-NLS-1$
                    poolGeneralModel.setDefaultHost("Any Host in Cluster");
                    poolGeneralModel.UpdateStorageDomain();
                }
            } else {
                poolGeneralModel.setTemplate(null);
                poolGeneralModel.setCpuCount(0);
                poolGeneralModel.setMonitorCount(0);
                poolGeneralModel.setOS(null);
                poolGeneralModel.setDefinedMemory(null);
                poolGeneralModel.setMinAllocatedMemory(null);
                poolGeneralModel.setDefaultDisplayType(null);
                poolGeneralModel.setStorageDomain(null);
                poolGeneralModel.setHasStorageDomain(false);
                poolGeneralModel.setHasDomain(false);
                poolGeneralModel.setDomain(null);
                poolGeneralModel.setHasTimeZone(false);
                poolGeneralModel.setTimeZone(null);
                poolGeneralModel.setUsbPolicy(null);
                poolGeneralModel.setDefaultHost(null);
                poolGeneralModel.setIsStateless(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new GetVmdataByPoolIdParameters(pool.getVmPoolId()), _asyncQuery);
}
#method_after
private void UpdateProperties() {
    VmPool pool = (VmPool) getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) ((VdcQueryReturnValue) result).getReturnValue());
            }
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            if (getvm() != null) {
                poolGeneralModel.setTemplate(getvm().getVmtName());
                poolGeneralModel.setCpuInfo(// $NON-NLS-1$ //$NON-NLS-2$
                getvm().getNumOfCpus() + " " + "(" + getvm().getNumOfSockets() + " Socket(s), " + getvm().getCpuPerSocket() + // $NON-NLS-1$ //$NON-NLS-2$
                " Core(s) per Socket)");
                poolGeneralModel.setMonitorCount(getvm().getNumOfMonitors());
                Translator translator = EnumTranslator.Create(VmOsType.class);
                poolGeneralModel.setOS(translator.get(getvm().getVmOs()));
                // $NON-NLS-1$
                poolGeneralModel.setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                poolGeneralModel.setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                translator = EnumTranslator.Create(DisplayType.class);
                poolGeneralModel.setDefaultDisplayType(translator.get(getvm().getDefaultDisplayType()));
                translator = EnumTranslator.Create(OriginType.class);
                poolGeneralModel.setOrigin(translator.get(getvm().getOrigin()));
                translator = EnumTranslator.Create(UsbPolicy.class);
                poolGeneralModel.setUsbPolicy(translator.get(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.IsWindowsOsType(getvm().getVmOs()));
                poolGeneralModel.setDomain(getvm().getVmDomain());
                setHasTimeZone(AsyncDataProvider.IsWindowsOsType(getvm().getVmOs()));
                poolGeneralModel.setTimeZone(getvm().getTimeZone());
                poolGeneralModel.setIsStateless(getvm().isStateless());
                poolGeneralModel.setHasDefaultHost(getvm().getDedicatedVmForVds() != null);
                if (poolGeneralModel.getHasDefaultHost()) {
                    AsyncQuery _asyncQuery1 = new AsyncQuery();
                    _asyncQuery1.setModel(poolGeneralModel);
                    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                        @Override
                        public void OnSuccess(Object model1, Object ReturnValue1) {
                            PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                            ArrayList<VDS> hosts = (ArrayList<VDS>) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                            for (VDS host : hosts) {
                                if (host.getId().equals(poolGeneralModel1.getvm().getDedicatedVmForVds())) {
                                    poolGeneralModel1.setDefaultHost(host.getVdsName());
                                    break;
                                }
                            }
                            poolGeneralModel1.UpdateStorageDomain();
                        }
                    };
                    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getVdsGroupName() + " sortby name", SearchType.VDS), // $NON-NLS-1$
                    _asyncQuery1);
                } else {
                    // $NON-NLS-1$
                    poolGeneralModel.setDefaultHost("Any Host in Cluster");
                    poolGeneralModel.UpdateStorageDomain();
                }
            } else {
                poolGeneralModel.setTemplate(null);
                poolGeneralModel.setCpuCount(0);
                poolGeneralModel.setMonitorCount(0);
                poolGeneralModel.setOS(null);
                poolGeneralModel.setDefinedMemory(null);
                poolGeneralModel.setMinAllocatedMemory(null);
                poolGeneralModel.setDefaultDisplayType(null);
                poolGeneralModel.setStorageDomain(null);
                poolGeneralModel.setHasStorageDomain(false);
                poolGeneralModel.setHasDomain(false);
                poolGeneralModel.setDomain(null);
                poolGeneralModel.setHasTimeZone(false);
                poolGeneralModel.setTimeZone(null);
                poolGeneralModel.setUsbPolicy(null);
                poolGeneralModel.setDefaultHost(null);
                poolGeneralModel.setIsStateless(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmDataByPoolId, new GetVmdataByPoolIdParameters(pool.getVmPoolId()), _asyncQuery);
}
#end_block

#method_before
private void UpdateStorageDomain() {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            Iterable disks = (Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Iterator disksIterator = disks.iterator();
            if (disksIterator.hasNext()) {
                poolGeneralModel.setHasStorageDomain(true);
                AsyncQuery _asyncQuery1 = new AsyncQuery();
                _asyncQuery1.setModel(poolGeneralModel);
                _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object ReturnValue1) {
                        PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                        storage_domains storage = (storage_domains) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                        poolGeneralModel1.setStorageDomain(storage.getstorage_name());
                        poolGeneralModel1.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
                    }
                };
                DiskImage firstDisk = (DiskImage) disksIterator.next();
                Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(firstDisk.getStorageIds().get(0)), _asyncQuery1);
            } else {
                poolGeneralModel.setHasStorageDomain(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(getvm().getId()), _asyncQuery);
}
#method_after
private void UpdateStorageDomain() {
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            PoolGeneralModel poolGeneralModel = (PoolGeneralModel) model;
            Iterable disks = (Iterable) ((VdcQueryReturnValue) ReturnValue).getReturnValue();
            Iterator disksIterator = disks.iterator();
            if (disksIterator.hasNext()) {
                poolGeneralModel.setHasStorageDomain(true);
                AsyncQuery _asyncQuery1 = new AsyncQuery();
                _asyncQuery1.setModel(poolGeneralModel);
                _asyncQuery1.asyncCallback = new INewAsyncCallback() {

                    @Override
                    public void OnSuccess(Object model1, Object ReturnValue1) {
                        PoolGeneralModel poolGeneralModel1 = (PoolGeneralModel) model1;
                        StorageDomain storage = (StorageDomain) ((VdcQueryReturnValue) ReturnValue1).getReturnValue();
                        poolGeneralModel1.setStorageDomain(storage.getStorageName());
                        poolGeneralModel1.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
                    }
                };
                DiskImage firstDisk = (DiskImage) disksIterator.next();
                Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(firstDisk.getStorageIds().get(0)), _asyncQuery1);
            } else {
                poolGeneralModel.setHasStorageDomain(false);
                poolGeneralModel.getUpdateCompleteEvent().raise(this, EventArgs.Empty);
            }
        }
    };
    Frontend.RunQuery(VdcQueryType.GetAllDisksByVmId, new GetAllDisksByVmIdParameters(getvm().getId()), _asyncQuery);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    super.executeCommand();
    Guid storagePoolId = getDiskImage().getStoragePoolId() != null ? getDiskImage().getStoragePoolId().getValue() : Guid.Empty;
    Guid imageGroupId = getDiskImage().getId() != null ? getDiskImage().getId() : Guid.Empty;
    Guid snapshotId = getDiskImage().getImageId();
    // Create new image group id and image id:
    Guid destinationImageGroupID = Guid.NewGuid();
    setDestinationImageId(Guid.NewGuid());
    getDiskImage().getSnapshots().addAll(ImagesHandler.getAllImageSnapshots(getDiskImage().getImageId(), getDiskImage().getItGuid()));
    setDiskImage(getDiskImage().getSnapshots().get(getDiskImage().getSnapshots().size() - 1));
    DiskImage newImage = cloneDiskImage(getDestinationImageId());
    fillVolumeInformation(newImage);
    VDSReturnValue vdsReturnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CopyImage, new CopyImageVDSCommandParameters(storagePoolId, getParameters().getStorageDomainId(), getParameters().getVmId(), imageGroupId, snapshotId, destinationImageGroupID, getDestinationImageId(), StringUtils.defaultString(newImage.getDescription()), getParameters().getDestinationStorageDomainId(), CopyVolumeType.SharedVol, newImage.getVolumeFormat(), newImage.getVolumeType(), getDiskImage().isWipeAfterDelete(), false, getStoragePool().getcompatibility_version().toString()));
    getReturnValue().getInternalTaskIdList().add(createTask(vdsReturnValue.getCreationInfo(), VdcActionType.AddVmTemplate, VdcObjectType.Storage, getParameters().getStorageDomainId(), getParameters().getDestinationStorageDomainId()));
    newImage.setId(destinationImageGroupID);
    newImage.setDiskAlias(getParameters().getDiskAlias() != null ? getParameters().getDiskAlias() : getDiskImage().getDiskAlias());
    newImage.setVmSnapshotId(getParameters().getVmSnapshotId());
    newImage.setQuotaId(getParameters().getQuotaId());
    newImage.setParentId(Guid.Empty);
    newImage.setItGuid(Guid.Empty);
    newImage.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getDestinationStorageDomainId())));
    newImage.setActive(true);
    saveImage(newImage);
    getBaseDiskDao().save(newImage);
    DiskImageDynamic diskDynamic = new DiskImageDynamic();
    diskDynamic.setId(newImage.getImageId());
    diskDynamic.setactual_size(getDiskImage().getActualSizeFromDiskImage());
    DbFacade.getInstance().getDiskImageDynamicDao().save(diskDynamic);
    setActionReturnValue(newImage);
    // set source image as locked:
    lockImage();
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    super.executeCommand();
    Guid storagePoolId = getDiskImage().getStoragePoolId() != null ? getDiskImage().getStoragePoolId().getValue() : Guid.Empty;
    Guid imageGroupId = getDiskImage().getId() != null ? getDiskImage().getId() : Guid.Empty;
    Guid snapshotId = getDiskImage().getImageId();
    // Create new image group id and image id:
    Guid destinationImageGroupID = Guid.NewGuid();
    setDestinationImageId(Guid.NewGuid());
    getDiskImage().getSnapshots().addAll(ImagesHandler.getAllImageSnapshots(getDiskImage().getImageId(), getDiskImage().getImageTemplateId()));
    setDiskImage(getDiskImage().getSnapshots().get(getDiskImage().getSnapshots().size() - 1));
    DiskImage newImage = cloneDiskImage(getDestinationImageId());
    fillVolumeInformation(newImage);
    VDSReturnValue vdsReturnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CopyImage, new CopyImageVDSCommandParameters(storagePoolId, getParameters().getStorageDomainId(), getParameters().getVmId(), imageGroupId, snapshotId, destinationImageGroupID, getDestinationImageId(), StringUtils.defaultString(newImage.getDescription()), getParameters().getDestinationStorageDomainId(), CopyVolumeType.SharedVol, newImage.getVolumeFormat(), newImage.getVolumeType(), getDiskImage().isWipeAfterDelete(), false, getStoragePool().getcompatibility_version().toString()));
    getReturnValue().getInternalTaskIdList().add(createTask(vdsReturnValue.getCreationInfo(), VdcActionType.AddVmTemplate, VdcObjectType.Storage, getParameters().getStorageDomainId(), getParameters().getDestinationStorageDomainId()));
    newImage.setId(destinationImageGroupID);
    newImage.setDiskAlias(getParameters().getDiskAlias() != null ? getParameters().getDiskAlias() : getDiskImage().getDiskAlias());
    newImage.setVmSnapshotId(getParameters().getVmSnapshotId());
    newImage.setQuotaId(getParameters().getQuotaId());
    newImage.setParentId(Guid.Empty);
    newImage.setImageTemplateId(Guid.Empty);
    newImage.setStorageIds(new ArrayList<Guid>(Arrays.asList(getParameters().getDestinationStorageDomainId())));
    newImage.setActive(true);
    saveImage(newImage);
    getBaseDiskDao().save(newImage);
    DiskImageDynamic diskDynamic = new DiskImageDynamic();
    diskDynamic.setId(newImage.getImageId());
    diskDynamic.setactual_size(getDiskImage().getActualSizeFromDiskImage());
    DbFacade.getInstance().getDiskImageDynamicDao().save(diskDynamic);
    setActionReturnValue(newImage);
    // set source image as locked:
    lockImage();
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(OVF_URI, "id", _vmTemplate.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":OperatingSystemSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(_vmTemplate.getOs().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":VirtualHardwareSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vmTemplate.getNumOfCpus(), _vmTemplate.getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vmTemplate.getNumOfCpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getNumOfSockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getCpuPerSocket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", _vmTemplate.getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getMemSizeMb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(image.getDiskAlias());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(image.getId() + "/" + image.getImageId());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getItGuid().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getAppList());
        _writer.WriteEndElement();
        if (image.getStorageIds() != null && image.getStorageIds().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getStorageIds().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getStoragePoolId() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getStoragePoolId().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getCreationDate()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getLastModified()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vmTemplate.getInterfaces()) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        String networkName = iface.getNetworkName() != null ? iface.getNetworkName() : "[No Network]";
        _writer.WriteRaw("Ethernet adapter on " + networkName);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        if (iface.getNetworkName() != null) {
            _writer.WriteRaw(iface.getNetworkName());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Linked");
        _writer.WriteRaw(String.valueOf(iface.isLinked()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(String.valueOf(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw((_vmTemplate.getUsbPolicy()) != null ? _vmTemplate.getUsbPolicy().toString() : UsbPolicy.DISABLED.name());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(_vmTemplate);
    // CD
    writeCd(_vmTemplate);
    // ummanged devices
    writeOtherDevices(_vmTemplate, _writer);
    // End hardware section
    _writer.WriteEndElement();
}
#method_after
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(OVF_URI, "id", _vmTemplate.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":OperatingSystemSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(_vmTemplate.getOs().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":VirtualHardwareSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vmTemplate.getNumOfCpus(), _vmTemplate.getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vmTemplate.getNumOfCpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getNumOfSockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getCpuPerSocket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", _vmTemplate.getMemSizeMb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getMemSizeMb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(image.getDiskAlias());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(image.getId() + "/" + image.getImageId());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getImageTemplateId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getAppList());
        _writer.WriteEndElement();
        if (image.getStorageIds() != null && image.getStorageIds().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getStorageIds().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getStoragePoolId() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getStoragePoolId().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getCreationDate()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getLastModified()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vmTemplate.getInterfaces()) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        String networkName = iface.getNetworkName() != null ? iface.getNetworkName() : "[No Network]";
        _writer.WriteRaw("Ethernet adapter on " + networkName);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        if (iface.getNetworkName() != null) {
            _writer.WriteRaw(iface.getNetworkName());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Linked");
        _writer.WriteRaw(String.valueOf(iface.isLinked()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(String.valueOf(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw((_vmTemplate.getUsbPolicy()) != null ? _vmTemplate.getUsbPolicy().toString() : UsbPolicy.DISABLED.name());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(_vmTemplate);
    // CD
    writeCd(_vmTemplate);
    // ummanged devices
    writeOtherDevices(_vmTemplate, _writer);
    // End hardware section
    _writer.WriteEndElement();
}
#end_block

#method_before
public void InitStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
    if (template != null && !template.getId().equals(NGuid.Empty)) {
        PostInitStorageDomains();
    } else {
        getModel().getStorageDomain().setItems(new ArrayList<storage_domains>());
        getModel().getStorageDomain().setSelectedItem(null);
        getModel().getStorageDomain().setIsChangable(false);
    }
}
#method_after
public void InitStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    VmTemplate template = (VmTemplate) getModel().getTemplate().getSelectedItem();
    if (template != null && !template.getId().equals(NGuid.Empty)) {
        PostInitStorageDomains();
    } else {
        getModel().getStorageDomain().setItems(new ArrayList<StorageDomain>());
        getModel().getStorageDomain().setSelectedItem(null);
        getModel().getStorageDomain().setIsChangable(false);
    }
}
#end_block

#method_before
protected void PostInitStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
            ArrayList<storage_domains> activeStorageDomains = FilterStorageDomains(storageDomains);
            DisksAllocationModel disksAllocationModel = getModel().getDisksAllocationModel();
            boolean provisioning = (Boolean) behavior.getModel().getProvisioning().getEntity();
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisks();
            Linq.Sort(activeStorageDomains, new Linq.StorageDomainByNameComparer());
            disksAllocationModel.setActiveStorageDomains(activeStorageDomains);
            for (DiskModel diskModel : disks) {
                ArrayList<storage_domains> availableDiskStorageDomains = new ArrayList<storage_domains>();
                diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                ArrayList<Guid> storageIds = ((DiskImage) diskModel.getDisk()).getStorageIds();
                // Active storage domains that the disk resides on
                ArrayList<storage_domains> activeDiskStorageDomains = Linq.getStorageDomainsByIds(storageIds, activeStorageDomains);
                if (provisioning) {
                    if (activeDiskStorageDomains.size() > 0) {
                        availableDiskStorageDomains = activeStorageDomains;
                    }
                } else {
                    availableDiskStorageDomains = activeDiskStorageDomains;
                }
                Linq.Sort(availableDiskStorageDomains, new Linq.StorageDomainByNameComparer());
                diskModel.getStorageDomain().setItems(availableDiskStorageDomains);
            }
            ArrayList<storage_domains> storageDomainsDisjoint = Linq.getStorageDomainsDisjoint(disks, activeStorageDomains);
            Linq.Sort(storageDomainsDisjoint, new Linq.StorageDomainByNameComparer());
            ArrayList<storage_domains> singleDestDomains = provisioning ? activeStorageDomains : storageDomainsDisjoint;
            getModel().getStorageDomain().setItems(singleDestDomains);
            getModel().getStorageDomain().setSelectedItem(Linq.FirstOrDefault(singleDestDomains));
        }
    }, getModel().getHash()), dataCenter.getId(), ActionGroup.CREATE_VM);
}
#method_after
protected void PostInitStorageDomains() {
    if (getModel().getDisks() == null) {
        return;
    }
    storage_pool dataCenter = (storage_pool) getModel().getDataCenter().getSelectedItem();
    AsyncDataProvider.GetPermittedStorageDomainsByStoragePoolId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            VmModelBehaviorBase behavior = (VmModelBehaviorBase) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            ArrayList<StorageDomain> activeStorageDomains = FilterStorageDomains(storageDomains);
            DisksAllocationModel disksAllocationModel = getModel().getDisksAllocationModel();
            boolean provisioning = (Boolean) behavior.getModel().getProvisioning().getEntity();
            ArrayList<DiskModel> disks = (ArrayList<DiskModel>) behavior.getModel().getDisks();
            Linq.Sort(activeStorageDomains, new Linq.StorageDomainByNameComparer());
            disksAllocationModel.setActiveStorageDomains(activeStorageDomains);
            for (DiskModel diskModel : disks) {
                ArrayList<StorageDomain> availableDiskStorageDomains = new ArrayList<StorageDomain>();
                diskModel.getQuota().setItems(behavior.getModel().getQuota().getItems());
                ArrayList<Guid> storageIds = ((DiskImage) diskModel.getDisk()).getStorageIds();
                // Active storage domains that the disk resides on
                ArrayList<StorageDomain> activeDiskStorageDomains = Linq.getStorageDomainsByIds(storageIds, activeStorageDomains);
                if (provisioning) {
                    if (activeDiskStorageDomains.size() > 0) {
                        availableDiskStorageDomains = activeStorageDomains;
                    }
                } else {
                    availableDiskStorageDomains = activeDiskStorageDomains;
                }
                Linq.Sort(availableDiskStorageDomains, new Linq.StorageDomainByNameComparer());
                diskModel.getStorageDomain().setItems(availableDiskStorageDomains);
            }
            ArrayList<StorageDomain> storageDomainsDisjoint = Linq.getStorageDomainsDisjoint(disks, activeStorageDomains);
            Linq.Sort(storageDomainsDisjoint, new Linq.StorageDomainByNameComparer());
            ArrayList<StorageDomain> singleDestDomains = provisioning ? activeStorageDomains : storageDomainsDisjoint;
            getModel().getStorageDomain().setItems(singleDestDomains);
            getModel().getStorageDomain().setSelectedItem(Linq.FirstOrDefault(singleDestDomains));
        }
    }, getModel().getHash()), dataCenter.getId(), ActionGroup.CREATE_VM);
}
#end_block

#method_before
public ArrayList<storage_domains> FilterStorageDomains(ArrayList<storage_domains> storageDomains) {
    // filter only the Active storage domains (Active regarding the relevant storage pool).
    ArrayList<storage_domains> list = new ArrayList<storage_domains>();
    for (storage_domains a : storageDomains) {
        if (Linq.IsDataActiveStorageDomain(a)) {
            list.add(a);
        }
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        storage_domains selectStorage = (storage_domains) getSystemTreeSelectedItem().getEntity();
        storage_domains sd = Linq.FirstOrDefault(list, new Linq.StoragePredicate(selectStorage.getId()));
        list = new ArrayList<storage_domains>(Arrays.asList(new storage_domains[] { sd }));
    }
    return list;
}
#method_after
public ArrayList<StorageDomain> FilterStorageDomains(ArrayList<StorageDomain> storageDomains) {
    // filter only the Active storage domains (Active regarding the relevant storage pool).
    ArrayList<StorageDomain> list = new ArrayList<StorageDomain>();
    for (StorageDomain a : storageDomains) {
        if (Linq.IsDataActiveStorageDomain(a)) {
            list.add(a);
        }
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        StorageDomain selectStorage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        StorageDomain sd = Linq.FirstOrDefault(list, new Linq.StoragePredicate(selectStorage.getId()));
        list = new ArrayList<StorageDomain>(Arrays.asList(new StorageDomain[] { sd }));
    }
    return list;
}
#end_block

#method_before
private void AddDiskPostData() {
    if (disks == null) {
        return;
    }
    final DiskModel model = new DiskModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVirtualDiskTitle());
    // $NON-NLS-1$
    model.setHashName("new_virtual_disk");
    model.setIsNew(true);
    model.setDatacenterId(getEntity().getStoragePoolId());
    model.getIsInVm().setEntity(true);
    model.getIsInternal().setEntity(true);
    model.setVmId(getEntity().getId());
    boolean hasBootableDisk = false;
    for (Disk a : disks) {
        if (a.isBoot()) {
            hasBootableDisk = true;
            break;
        }
    }
    model.getIsBootable().setEntity(!hasBootableDisk);
    if (hasBootableDisk) {
        model.getIsBootable().setIsChangable(false);
        // $NON-NLS-1$
        model.getIsBootable().getChangeProhibitionReasons().add("There can be only one bootable disk defined.");
    }
    AsyncDataProvider.GetNextAvailableDiskAliasNameByVMId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            String suggestedDiskName = (String) returnValue;
            VmGuideModel vmGuideModel = (VmGuideModel) model;
            vmGuideModel.StopProgress();
            DiskModel diskModel = (DiskModel) vmGuideModel.getWindow();
            diskModel.getAlias().setEntity(suggestedDiskName);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("OnAddDisk", vmGuideModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar2.setIsDefault(true);
            diskModel.getCommands().add(tempVar2);
            // $NON-NLS-1$
            UICommand tempVar3 = new UICommand("Cancel", vmGuideModel);
            tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar3.setIsCancel(true);
            diskModel.getCommands().add(tempVar3);
        }
    }), getEntity().getId());
}
#method_after
private void AddDiskPostData() {
    if (disks == null) {
        return;
    }
    final DiskModel model = new DiskModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newVirtualDiskTitle());
    // $NON-NLS-1$
    model.setHashName("new_virtual_disk");
    model.setIsNew(true);
    model.setDatacenterId(getEntity().getStoragePoolId());
    model.getIsInVm().setEntity(true);
    model.getIsInternal().setEntity(true);
    model.setVmId(getEntity().getId());
    boolean hasBootableDisk = false;
    for (Disk a : disks) {
        if (a.isBoot()) {
            hasBootableDisk = true;
            break;
        }
    }
    model.getIsBootable().setEntity(!hasBootableDisk);
    if (hasBootableDisk) {
        // $NON-NLS-1$
        model.getIsBootable().setChangeProhibitionReason("There can be only one bootable disk defined.");
        model.getIsBootable().setIsChangable(false);
    }
    AsyncDataProvider.GetNextAvailableDiskAliasNameByVMId(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object returnValue) {
            String suggestedDiskName = (String) returnValue;
            VmGuideModel vmGuideModel = (VmGuideModel) model;
            vmGuideModel.StopProgress();
            DiskModel diskModel = (DiskModel) vmGuideModel.getWindow();
            diskModel.getAlias().setEntity(suggestedDiskName);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("OnAddDisk", vmGuideModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar2.setIsDefault(true);
            diskModel.getCommands().add(tempVar2);
            // $NON-NLS-1$
            UICommand tempVar3 = new UICommand("Cancel", vmGuideModel);
            tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar3.setIsCancel(true);
            diskModel.getCommands().add(tempVar3);
        }
    }), getEntity().getId());
}
#end_block

#method_before
public void OnAddDisk() {
    if (getEntity() != null) {
        DiskModel model = (DiskModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getAttachDisk().getEntity()) {
            OnAttachDisks();
            return;
        }
        // Save changes.
        storage_domains storageDomain = (storage_domains) model.getStorageDomain().getSelectedItem();
        Disk disk;
        if ((Boolean) model.getIsInternal().getEntity()) {
            DiskImage diskImage = new DiskImage();
            diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
            diskImage.setVolumeType((VolumeType) model.getVolumeType().getSelectedItem());
            diskImage.setvolumeFormat(model.getVolumeFormat());
            if (model.getQuota().getSelectedItem() != null && model.getQuota().getIsAvailable()) {
                diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            disk = diskImage;
        } else {
            LunDisk lunDisk = new LunDisk();
            lunDisk.setLun((LUNs) model.getSanStorageModel().getAddedLuns().get(0).getEntity());
            disk = lunDisk;
        }
        disk.setDiskAlias((String) model.getAlias().getEntity());
        disk.setDiskDescription((String) model.getDescription().getEntity());
        disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
        disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
        disk.setBoot((Boolean) model.getIsBootable().getEntity());
        disk.setShareable((Boolean) model.getIsShareable().getEntity());
        disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
        disk.setPropagateErrors(PropagateErrors.Off);
        model.StartProgress(null);
        AddDiskParameters tempVar2 = new AddDiskParameters(getEntity().getId(), disk);
        tempVar2.setStorageDomainId(storageDomain.getId());
        Frontend.RunAction(VdcActionType.AddDisk, tempVar2, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                VmGuideModel vmGuideModel = (VmGuideModel) result.getState();
                vmGuideModel.getWindow().StopProgress();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    vmGuideModel.Cancel();
                    vmGuideModel.PostAction();
                }
            }
        }, this);
    } else {
        Cancel();
    }
}
#method_after
public void OnAddDisk() {
    if (getEntity() != null) {
        DiskModel model = (DiskModel) getWindow();
        if (model.getProgress() != null) {
            return;
        }
        if (!model.Validate()) {
            return;
        }
        if ((Boolean) model.getAttachDisk().getEntity()) {
            OnAttachDisks();
            return;
        }
        // Save changes.
        StorageDomain storageDomain = (StorageDomain) model.getStorageDomain().getSelectedItem();
        Disk disk;
        if ((Boolean) model.getIsInternal().getEntity()) {
            DiskImage diskImage = new DiskImage();
            diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
            diskImage.setVolumeType((VolumeType) model.getVolumeType().getSelectedItem());
            diskImage.setvolumeFormat(model.getVolumeFormat());
            if (model.getQuota().getSelectedItem() != null && model.getQuota().getIsAvailable()) {
                diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
            }
            disk = diskImage;
        } else {
            LunDisk lunDisk = new LunDisk();
            lunDisk.setLun((LUNs) model.getSanStorageModel().getAddedLuns().get(0).getEntity());
            disk = lunDisk;
        }
        disk.setDiskAlias((String) model.getAlias().getEntity());
        disk.setDiskDescription((String) model.getDescription().getEntity());
        disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
        disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
        disk.setBoot((Boolean) model.getIsBootable().getEntity());
        disk.setShareable((Boolean) model.getIsShareable().getEntity());
        disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
        disk.setPropagateErrors(PropagateErrors.Off);
        model.StartProgress(null);
        AddDiskParameters tempVar2 = new AddDiskParameters(getEntity().getId(), disk);
        tempVar2.setStorageDomainId(storageDomain.getId());
        Frontend.RunAction(VdcActionType.AddDisk, tempVar2, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                VmGuideModel vmGuideModel = (VmGuideModel) result.getState();
                vmGuideModel.getWindow().StopProgress();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    vmGuideModel.Cancel();
                    vmGuideModel.PostAction();
                }
            }
        }, this);
    } else {
        Cancel();
    }
}
#end_block

#method_before
@Override
protected DiskImage cloneDiskImage(Guid newImageGuid) {
    DiskImage returnValue = super.cloneDiskImage(newImageGuid);
    returnValue.setStorageIds(new ArrayList<Guid>(Arrays.asList(getDestinationStorageDomainId())));
    returnValue.setQuotaId(getParameters().getQuotaId());
    // override to have no template
    returnValue.setParentId(VmTemplateHandler.BlankVmTemplateId);
    returnValue.setItGuid(VmTemplateHandler.BlankVmTemplateId);
    if (getParameters().getDiskImageBase() != null) {
        returnValue.setVolumeType(getParameters().getDiskImageBase().getVolumeType());
        returnValue.setvolumeFormat(getParameters().getDiskImageBase().getVolumeFormat());
    }
    return returnValue;
}
#method_after
@Override
protected DiskImage cloneDiskImage(Guid newImageGuid) {
    DiskImage returnValue = super.cloneDiskImage(newImageGuid);
    returnValue.setStorageIds(new ArrayList<Guid>(Arrays.asList(getDestinationStorageDomainId())));
    returnValue.setQuotaId(getParameters().getQuotaId());
    // override to have no template
    returnValue.setParentId(VmTemplateHandler.BlankVmTemplateId);
    returnValue.setImageTemplateId(VmTemplateHandler.BlankVmTemplateId);
    if (getParameters().getDiskImageBase() != null) {
        returnValue.setVolumeType(getParameters().getDiskImageBase().getVolumeType());
        returnValue.setvolumeFormat(getParameters().getDiskImageBase().getVolumeFormat());
    }
    return returnValue;
}
#end_block

#method_before
protected List<DiskImage> getAllImageSnapshots() {
    return ImagesHandler.getAllImageSnapshots(getImage().getImageId(), getImage().getItGuid());
}
#method_after
protected List<DiskImage> getAllImageSnapshots() {
    return ImagesHandler.getAllImageSnapshots(getImage().getImageId(), getImage().getImageTemplateId());
}
#end_block

#method_before
protected boolean checkTemplateInDestStorageDomain() {
    boolean retValue = true;
    if (getParameters().getOperation() == ImageOperation.Move && !Guid.Empty.equals(getImage().getItGuid())) {
        DiskImage templateImage = getDiskImageDao().get(getImage().getItGuid());
        if (!templateImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#method_after
protected boolean checkTemplateInDestStorageDomain() {
    boolean retValue = true;
    if (getParameters().getOperation() == ImageOperation.Move && !Guid.Empty.equals(getImage().getImageTemplateId())) {
        DiskImage templateImage = getDiskImageDao().get(getImage().getImageTemplateId());
        if (!templateImage.getStorageIds().contains(getParameters().getStorageDomainId())) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
        }
    }
    return retValue;
}
#end_block

#method_before
@Override
public Map<String, String> getJobMessageProperties() {
    List<storage_domains> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue());
    String sourceSDName = StringUtils.EMPTY;
    if (storageDomains.size() > 0) {
        sourceSDName = storageDomains.get(0).getstorage_name();
    }
    if (jobProperties == null) {
        jobProperties = super.getJobMessageProperties();
        jobProperties.put("sourcesd", sourceSDName);
        jobProperties.put("targetsd", getStorageDomainName());
        jobProperties.put("diskalias", getDiskAlias());
        if (ImageOperation.Move == getParameters().getOperation()) {
            jobProperties.put("action", "Moving");
        } else {
            jobProperties.put("action", "Copying");
        }
    }
    return jobProperties;
}
#method_after
@Override
public Map<String, String> getJobMessageProperties() {
    List<StorageDomain> storageDomains = getStorageDomainDAO().getAllForStorageDomain(getParameters().getSourceDomainId().getValue());
    String sourceSDName = StringUtils.EMPTY;
    if (storageDomains.size() > 0) {
        sourceSDName = storageDomains.get(0).getStorageName();
    }
    if (jobProperties == null) {
        jobProperties = super.getJobMessageProperties();
        jobProperties.put("sourcesd", sourceSDName);
        jobProperties.put("targetsd", getStorageDomainName());
        jobProperties.put("diskalias", getDiskAlias());
        if (ImageOperation.Move == getParameters().getOperation()) {
            jobProperties.put("action", "Moving");
        } else {
            jobProperties.put("action", "Copying");
        }
    }
    return jobProperties;
}
#end_block

#method_before
@Override
protected void initStorageDomains() {
    Disk disk = getDisks().get(0).getDisk();
    if (disk.getDiskStorageType() != DiskStorageType.IMAGE) {
        return;
    }
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            MoveDiskModel moveDiskModel = (MoveDiskModel) target;
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) returnValue;
            moveDiskModel.onInitStorageDomains(storageDomains);
        }
    }), ((DiskImage) disk).getStoragePoolId().getValue());
}
#method_after
@Override
protected void initStorageDomains() {
    Disk disk = getDisks().get(0).getDisk();
    if (disk.getDiskStorageType() != DiskStorageType.IMAGE) {
        return;
    }
    AsyncDataProvider.GetStorageDomainList(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object target, Object returnValue) {
            MoveDiskModel moveDiskModel = (MoveDiskModel) target;
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) returnValue;
            moveDiskModel.onInitStorageDomains(storageDomains);
        }
    }), ((DiskImage) disk).getStoragePoolId().getValue());
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    List<DiskImage> disks = getDbFacade().getDiskImageDao().getAllForQuotaId(getParameters().getQuotaId());
    for (DiskImage diskImage : disks) {
        diskImage.getSnapshots().addAll(ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getItGuid()));
    }
    getQueryReturnValue().setReturnValue(disks);
}
#method_after
@Override
protected void executeQueryCommand() {
    List<DiskImage> disks = getDbFacade().getDiskImageDao().getAllForQuotaId(getParameters().getQuotaId());
    for (DiskImage diskImage : disks) {
        diskImage.getSnapshots().addAll(ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getImageTemplateId()));
    }
    getQueryReturnValue().setReturnValue(disks);
}
#end_block

#method_before
private static DiskImage mockDisk() {
    // Prepare the disk
    Guid diskGuid = Guid.NewGuid();
    Guid itGuid = Guid.NewGuid();
    final DiskImage expectedDisk = new DiskImage();
    expectedDisk.setImageId(diskGuid);
    expectedDisk.setItGuid(itGuid);
    return expectedDisk;
}
#method_after
private static DiskImage mockDisk() {
    // Prepare the disk
    Guid diskGuid = Guid.NewGuid();
    Guid itGuid = Guid.NewGuid();
    final DiskImage expectedDisk = new DiskImage();
    expectedDisk.setImageId(diskGuid);
    expectedDisk.setImageTemplateId(itGuid);
    return expectedDisk;
}
#end_block

#method_before
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText;
        if (OvfHardware.CPU.equals(resourceType)) {
            _vm.getStaticData().setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
            _vm.getStaticData().setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
        } else if (OvfHardware.Memory.equals(resourceType)) {
            _vm.getStaticData().setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
        } else if (OvfHardware.DiskImage.equals(resourceType)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                image.setItGuid(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
            }
            image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && StringUtils.isNotEmpty(storageNode.InnerText)) {
                image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.InnerText))));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
            if (creationDate == null) {
                image.setCreationDate(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
            if (lastModified != null) {
                image.setLastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).InnerText);
            if (last_modified_date != null) {
                image.setLastModifiedDate(last_modified_date);
            }
            readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
        } else if (OvfHardware.Network.equals(resourceType)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (OvfHardware.USB.equals(resourceType)) {
            _vm.getStaticData().setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
        } else if (OvfHardware.Monitor.equals(resourceType)) {
            _vm.getStaticData().setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (OvfHardware.CD.equals(resourceType)) {
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (OvfHardware.OTHER.equals(resourceType)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
                String type = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText);
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
            }
        }
    }
}
#method_after
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        String resourceType = node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText;
        if (OvfHardware.CPU.equals(resourceType)) {
            _vm.getStaticData().setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
            _vm.getStaticData().setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
        } else if (OvfHardware.Memory.equals(resourceType)) {
            _vm.getStaticData().setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
        } else if (OvfHardware.DiskImage.equals(resourceType)) {
            final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
            DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                @Override
                public boolean eval(DiskImage diskImage) {
                    return diskImage.getImageId().equals(guid);
                }
            });
            image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
            }
            image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
            XmlNode storageNode = node.SelectSingleNode("rasd:StorageId", _xmlNS);
            if (storageNode != null && StringUtils.isNotEmpty(storageNode.InnerText)) {
                image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(storageNode.InnerText))));
            }
            if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
            }
            final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
            if (creationDate == null) {
                image.setCreationDate(creationDate);
            }
            final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
            if (lastModified != null) {
                image.setLastModified(lastModified);
            }
            final Date last_modified_date = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:last_modified_date", _xmlNS).InnerText);
            if (last_modified_date != null) {
                image.setLastModifiedDate(last_modified_date);
            }
            readVmDevice(node, _vm.getStaticData(), image.getId(), Boolean.TRUE);
        } else if (OvfHardware.Network.equals(resourceType)) {
            VmNetworkInterface iface = getNetwotkInterface(node);
            updateSingleNic(node, iface);
            _vm.getInterfaces().add(iface);
            readVmDevice(node, _vm.getStaticData(), iface.getId(), Boolean.TRUE);
        } else if (OvfHardware.USB.equals(resourceType)) {
            _vm.getStaticData().setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
        } else if (OvfHardware.Monitor.equals(resourceType)) {
            _vm.getStaticData().setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (OvfHardware.CD.equals(resourceType)) {
            readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
        } else if (OvfHardware.OTHER.equals(resourceType)) {
            if (node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS) != null && StringUtils.isNotEmpty(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText)) {
                String type = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_TYPE, _xmlNS).InnerText);
                String device = String.valueOf(node.SelectSingleNode(OvfProperties.VMD_DEVICE, _xmlNS).InnerText);
                // special devices are treated as managed devices but still have the OTHER OVF ResourceType
                if (VmDeviceCommonUtils.isSpecialDevice(device, type)) {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.TRUE);
                } else {
                    readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
                }
            } else {
                readVmDevice(node, _vm.getStaticData(), Guid.NewGuid(), Boolean.FALSE);
            }
        }
    }
}
#end_block

#method_before
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    if (returnStatus != VdcBllErrors.Done) {
        log.errorFormat("IrsBroker::getImageInfo::Failed getting image info imageId = {0} does not exist on domainName = {1} , domainId = {2},  error code: {3}, message: {4}", getParameters().getImageId().toString(), DbFacade.getInstance().getStorageDomainStaticDao().get(getParameters().getStorageDomainId()).getstorage_name(), getParameters().getStorageDomainId().toString(), returnStatus.toString(), imageInfoReturn.mStatus.mMessage);
        throw new IRSErrorException(returnStatus.toString());
    }
}
#method_after
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    if (returnStatus != VdcBllErrors.Done) {
        log.errorFormat("IrsBroker::getImageInfo::Failed getting image info imageId = {0} does not exist on domainName = {1} , domainId = {2},  error code: {3}, message: {4}", getParameters().getImageId().toString(), DbFacade.getInstance().getStorageDomainStaticDao().get(getParameters().getStorageDomainId()).getStorageName(), getParameters().getStorageDomainId().toString(), returnStatus.toString(), imageInfoReturn.mStatus.mMessage);
        throw new IRSErrorException(returnStatus.toString());
    }
}
#end_block

#method_before
public static void Init() {
    mUpdateVmTemplate = new ObjectIdentityChecker(VmTemplateHandler.class);
    BlankVmTemplateId = new Guid("00000000-0000-0000-0000-000000000000");
    mUpdateVmTemplate.AddPermittedFields(new String[] { "name", "description", "domain", "os", "osType", "autoSuspend", "interfaces", "memSizeMb", "numOfSockets", "cpuPerSocket", "vdsGroupId", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "timeZone", "diskMap", "defaultBootSequence", "disabled", "isoPath", "diskImageMap", "defaultDisplayType", "priority", "autoStartup", "stateless", "initrdUrl", "kernelUrl", "kernelParams", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicatedVmForVds", "smartcardEnabled", "dbGeneration", "deleteProtected", "quotaDefault", "tunnelMigration" });
}
#method_after
public static void Init() {
    mUpdateVmTemplate = new ObjectIdentityChecker(VmTemplateHandler.class);
    BlankVmTemplateId = new Guid("00000000-0000-0000-0000-000000000000");
    mUpdateVmTemplate.AddPermittedFields(new String[] { "name", "description", "domain", "os", "osType", "autoSuspend", "interfaces", "memSizeMb", "numOfSockets", "cpuPerSocket", "vdsGroupId", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "timeZone", "diskMap", "defaultBootSequence", "disabled", "isoPath", "diskImageMap", "defaultDisplayType", "priority", "autoStartup", "stateless", "initrdUrl", "kernelUrl", "kernelParams", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicatedVmForVds", "smartcardEnabled", "dbGeneration", "deleteProtected", "quotaDefault", "tunnelMigration", "vncKeyboardLayout" });
}
#end_block

#method_before
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vmName", "description", "domain", "os", "osType", "creationDate", "allowConsoleReconnect", "usbPolicy", "autoSuspend", "autoStartup", "dedicatedVmForVds", "priority", "defaultBootSequence", "initrdUrl", "kernelUrl", "kernelParams", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled", "smartcardEnabled", "deleteProtected", "dbGeneration", // images list is relational entity - ignore value changes
    "images", // interfaces is relational entity - ignore value changes
    "interfaces", "useHostCpuFlags", "quotaDefault", "tunnelMigration" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum<?>[] { VMStatus.Down }), Arrays.asList(new String[] { "vdsGroupId", "timeZone", "stateless", "niceLevel", "memSizeMb", "numOfSockets", "cpuPerSocket", "isoPath", "userDefinedProperties", "predefinedProperties", "customProperties", "defaultDisplayType", "numOfMonitors" }));
}
#method_after
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vmName", "description", "domain", "os", "osType", "creationDate", "allowConsoleReconnect", "usbPolicy", "autoSuspend", "autoStartup", "dedicatedVmForVds", "priority", "defaultBootSequence", "initrdUrl", "kernelUrl", "kernelParams", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled", "smartcardEnabled", "deleteProtected", "dbGeneration", // images list is relational entity - ignore value changes
    "images", // interfaces is relational entity - ignore value changes
    "interfaces", "useHostCpuFlags", "quotaDefault", "tunnelMigration" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum<?>[] { VMStatus.Down }), Arrays.asList(new String[] { "vdsGroupId", "timeZone", "stateless", "niceLevel", "memSizeMb", "numOfSockets", "cpuPerSocket", "isoPath", "userDefinedProperties", "predefinedProperties", "customProperties", "defaultDisplayType", "numOfMonitors", "vncKeyboardLayout" }));
}
#end_block

#method_before
private void mockStorageDomainDAOGet(final int domainSpaceGB) {
    doAnswer(new Answer<storage_domains>() {

        @Override
        public storage_domains answer(InvocationOnMock invocation) throws Throwable {
            storage_domains result = createStorageDomain(domainSpaceGB);
            result.setId((Guid) invocation.getArguments()[0]);
            return result;
        }
    }).when(sdDAO).get(any(Guid.class));
}
#method_after
private void mockStorageDomainDAOGet(final int domainSpaceGB) {
    doAnswer(new Answer<StorageDomain>() {

        @Override
        public StorageDomain answer(InvocationOnMock invocation) throws Throwable {
            StorageDomain result = createStorageDomain(domainSpaceGB);
            result.setId((Guid) invocation.getArguments()[0]);
            return result;
        }
    }).when(sdDAO).get(any(Guid.class));
}
#end_block

#method_before
protected storage_domains createStorageDomain(int availableSpace) {
    storage_domains sd = new storage_domains();
    sd.setstorage_domain_type(StorageDomainType.Master);
    sd.setstatus(StorageDomainStatus.Active);
    sd.setavailable_disk_size(availableSpace);
    sd.setused_disk_size(USED_SPACE_GB);
    sd.setId(STORAGE_DOMAIN_ID);
    return sd;
}
#method_after
protected StorageDomain createStorageDomain(int availableSpace) {
    StorageDomain sd = new StorageDomain();
    sd.setStorageDomainType(StorageDomainType.Master);
    sd.setStatus(StorageDomainStatus.Active);
    sd.setAvailableDiskSize(availableSpace);
    sd.setUsedDiskSize(USED_SPACE_GB);
    sd.setId(STORAGE_DOMAIN_ID);
    return sd;
}
#end_block

#method_before
@Test
public void canDoActionThinProvisioningSpaceCheckSucceeds() throws Exception {
    final int availableSize = 6;
    final int usedSize = 4;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Sparse);
    mockVm();
    storage_domains domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertTrue(command.canDoAction());
}
#method_after
@Test
public void canDoActionThinProvisioningSpaceCheckSucceeds() throws Exception {
    final int availableSize = 6;
    final int usedSize = 4;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Sparse);
    mockVm();
    StorageDomain domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertTrue(command.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionThinProvisioningSpaceCheckFailsSize() {
    final int availableSize = 4;
    final int usedSize = 6;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Sparse);
    mockVm();
    storage_domains domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#method_after
@Test
public void canDoActionThinProvisioningSpaceCheckFailsSize() {
    final int availableSize = 4;
    final int usedSize = 6;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Sparse);
    mockVm();
    StorageDomain domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#end_block

#method_before
@Test
public void canDoActionPreallocatedSpaceCheckSucceeds() {
    final int availableSize = 12;
    final int usedSize = 8;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Preallocated);
    mockVm();
    storage_domains domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertTrue(command.canDoAction());
}
#method_after
@Test
public void canDoActionPreallocatedSpaceCheckSucceeds() {
    final int availableSize = 12;
    final int usedSize = 8;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Preallocated);
    mockVm();
    StorageDomain domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertTrue(command.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionPreallocatedSpaceCheckFailsSize() {
    final int availableSize = 3;
    final int usedSize = 7;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Preallocated);
    mockVm();
    storage_domains domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#method_after
@Test
public void canDoActionPreallocatedSpaceCheckFailsSize() {
    final int availableSize = 3;
    final int usedSize = 7;
    Guid sdid = Guid.NewGuid();
    initializeCommand(sdid, VolumeType.Preallocated);
    mockVm();
    StorageDomain domains = mockStorageDomain(sdid, availableSize, usedSize);
    mockStoragePoolIsoMap();
    assertFalse(command.canDoAction());
    assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.toString()));
}
#end_block

#method_before
private storage_domains mockStorageDomain(Guid storageId) {
    return mockStorageDomain(storageId, 6, 4, StorageType.UNKNOWN, new Version());
}
#method_after
private StorageDomain mockStorageDomain(Guid storageId) {
    return mockStorageDomain(storageId, 6, 4, StorageType.UNKNOWN, new Version());
}
#end_block

#method_before
private storage_domains mockStorageDomain(Guid storageId, StorageType storageType) {
    return mockStorageDomain(storageId, 6, 4, storageType, new Version());
}
#method_after
private StorageDomain mockStorageDomain(Guid storageId, StorageType storageType) {
    return mockStorageDomain(storageId, 6, 4, storageType, new Version());
}
#end_block

#method_before
private storage_domains mockStorageDomain(Guid storageId, int availableSize, int usedSize) {
    return mockStorageDomain(storageId, availableSize, usedSize, StorageType.UNKNOWN, new Version());
}
#method_after
private StorageDomain mockStorageDomain(Guid storageId, int availableSize, int usedSize) {
    return mockStorageDomain(storageId, availableSize, usedSize, StorageType.UNKNOWN, new Version());
}
#end_block

#method_before
private storage_domains mockStorageDomain(Guid storageId, Version version) {
    return mockStorageDomain(storageId, 6, 4, StorageType.UNKNOWN, version);
}
#method_after
private StorageDomain mockStorageDomain(Guid storageId, Version version) {
    return mockStorageDomain(storageId, 6, 4, StorageType.UNKNOWN, version);
}
#end_block

#method_before
private storage_domains mockStorageDomain(Guid storageId, int availableSize, int usedSize, StorageType storageType, Version version) {
    storage_pool storagePool = mockStoragePool(version);
    Guid storagePoolId = storagePool.getId();
    storage_domains sd = new storage_domains();
    sd.setavailable_disk_size(availableSize);
    sd.setused_disk_size(usedSize);
    sd.setstorage_pool_id(storagePoolId);
    sd.setstatus(StorageDomainStatus.Active);
    sd.setstorage_type(storageType);
    when(storageDomainDAO.get(storageId)).thenReturn(sd);
    when(storageDomainDAO.getAllForStorageDomain(storageId)).thenReturn(Collections.singletonList(sd));
    when(storageDomainDAO.getForStoragePool(storageId, storagePoolId)).thenReturn(sd);
    return sd;
}
#method_after
private StorageDomain mockStorageDomain(Guid storageId, int availableSize, int usedSize, StorageType storageType, Version version) {
    storage_pool storagePool = mockStoragePool(version);
    Guid storagePoolId = storagePool.getId();
    StorageDomain sd = new StorageDomain();
    sd.setAvailableDiskSize(availableSize);
    sd.setUsedDiskSize(usedSize);
    sd.setStoragePoolId(storagePoolId);
    sd.setStatus(StorageDomainStatus.Active);
    sd.setStorageType(storageType);
    when(storageDomainDAO.get(storageId)).thenReturn(sd);
    when(storageDomainDAO.getAllForStorageDomain(storageId)).thenReturn(Collections.singletonList(sd));
    when(storageDomainDAO.getForStoragePool(storageId, storagePoolId)).thenReturn(sd);
    return sd;
}
#end_block

#method_before
@Test
public void testSave() {
    DiskImage newImage = new DiskImage();
    newImage = new DiskImage();
    newImage.setImageId(Guid.NewGuid());
    newImage.setvolumeFormat(VolumeFormat.COW);
    newImage.setVolumeType(VolumeType.Sparse);
    newImage.setDiskInterface(DiskInterface.IDE);
    newImage.setActive(true);
    newImage.setItGuid(EXISTING_IMAGE_DISK_TEMPLATE);
    newImage.setId(Guid.NewGuid());
    imageDao.save(newImage.getImage());
    diskDao.save(newImage);
    DiskImageDynamic dynamic = new DiskImageDynamic();
    dynamic.setread_rate(5);
    dynamic.setwrite_rate(6);
    dynamic.setReadLatency(0d);
    dynamic.setFlushLatency(0.0202020d);
    dynamic.setWriteLatency(null);
    dynamic.setId(newImage.getImageId());
    dao.save(dynamic);
    DiskImageDynamic result = dao.get(dynamic.getId());
    assertNotNull(result);
    assertEquals(dynamic, result);
}
#method_after
@Test
public void testSave() {
    DiskImage newImage = new DiskImage();
    newImage = new DiskImage();
    newImage.setImageId(Guid.NewGuid());
    newImage.setvolumeFormat(VolumeFormat.COW);
    newImage.setVolumeType(VolumeType.Sparse);
    newImage.setDiskInterface(DiskInterface.IDE);
    newImage.setActive(true);
    newImage.setImageTemplateId(EXISTING_IMAGE_DISK_TEMPLATE);
    newImage.setId(Guid.NewGuid());
    imageDao.save(newImage.getImage());
    diskDao.save(newImage);
    DiskImageDynamic dynamic = new DiskImageDynamic();
    dynamic.setread_rate(5);
    dynamic.setwrite_rate(6);
    dynamic.setReadLatency(0d);
    dynamic.setFlushLatency(0.0202020d);
    dynamic.setWriteLatency(null);
    dynamic.setId(newImage.getImageId());
    dao.save(dynamic);
    DiskImageDynamic result = dao.get(dynamic.getId());
    assertNotNull(result);
    assertEquals(dynamic, result);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = validate(templateExists());
    if (retVal) {
        DiskImageList images = templatesFromExport.get(LinqUtils.firstOrNull(templatesFromExport.keySet(), new Predicate<VmTemplate>() {

            @Override
            public boolean eval(VmTemplate t) {
                return t.getId().equals(getParameters().getVmTemplateId());
            }
        }));
        if (images != null) {
            getParameters().setImages(Arrays.asList(images.getDiskImages()));
        } else {
            retVal = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
        }
    }
    if (retVal) {
        StorageDomainValidator validator = new StorageDomainValidator(getStorageDomain());
        retVal = validate(validator.isDomainExistAndActive());
    }
    if (retVal && getStorageDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // we fectch from db and not using VmTmplate property becase
        // VmTemplate is the one from export domain and not from database
        VmTemplate tmpl = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplateId());
        if (tmpl != null) {
            retVal = (tmpl.getstatus() != VmTemplateStatus.Locked);
            if (!retVal) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED.toString());
            }
        }
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retVal = validate(templateExists());
    if (retVal) {
        DiskImageList images = templatesFromExport.get(LinqUtils.firstOrNull(templatesFromExport.keySet(), new Predicate<VmTemplate>() {

            @Override
            public boolean eval(VmTemplate t) {
                return t.getId().equals(getParameters().getVmTemplateId());
            }
        }));
        if (images != null) {
            getParameters().setImages(Arrays.asList(images.getDiskImages()));
        } else {
            retVal = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST);
        }
    }
    if (retVal) {
        StorageDomainValidator validator = new StorageDomainValidator(getStorageDomain());
        retVal = validate(validator.isDomainExistAndActive());
    }
    if (retVal && getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // we fectch from db and not using VmTmplate property becase
        // VmTemplate is the one from export domain and not from database
        VmTemplate tmpl = DbFacade.getInstance().getVmTemplateDao().get(getVmTemplateId());
        if (tmpl != null) {
            retVal = (tmpl.getstatus() != VmTemplateStatus.Locked);
            if (!retVal) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED.toString());
            }
        }
    }
    return retVal;
}
#end_block

#method_before
protected storage_domains createSourceDomain() {
    storage_domains sd = new storage_domains();
    sd.setstorage_domain_type(StorageDomainType.ImportExport);
    sd.setstatus(StorageDomainStatus.Active);
    return sd;
}
#method_after
protected StorageDomain createSourceDomain() {
    StorageDomain sd = new StorageDomain();
    sd.setStorageDomainType(StorageDomainType.ImportExport);
    sd.setStatus(StorageDomainStatus.Active);
    return sd;
}
#end_block

#method_before
protected storage_domains createStorageDomain() {
    storage_domains sd = new storage_domains();
    sd.setstorage_domain_type(StorageDomainType.Data);
    sd.setstatus(StorageDomainStatus.Active);
    sd.setavailable_disk_size(2);
    return sd;
}
#method_after
protected StorageDomain createStorageDomain() {
    StorageDomain sd = new StorageDomain();
    sd.setStorageDomainType(StorageDomainType.Data);
    sd.setStatus(StorageDomainStatus.Active);
    sd.setAvailableDiskSize(2);
    return sd;
}
#end_block

#method_before
private CommandContext createAddVmStepContext(String currentVmName) {
    CommandContext commandCtx = null;
    try {
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VM.name().toLowerCase(), currentVmName);
        Step addVmStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.ADD_VM_TO_POOL, ExecutionMessageDirector.resolveStepMessage(StepEnum.ADD_VM_TO_POOL, values));
        ExecutionContext ctx = new ExecutionContext();
        ctx.setStep(addVmStep);
        ctx.setMonitored(true);
        commandCtx = new CommandContext(ctx);
    } catch (RuntimeException e) {
        log.errorFormat("Failed to create command context of adding VM {0} to Pool {1}", currentVmName, getParameters().getVmPool().getVmPoolName(), e);
    }
    return commandCtx;
}
#method_after
private CommandContext createAddVmStepContext(String currentVmName) {
    CommandContext commandCtx = null;
    try {
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VM.name().toLowerCase(), currentVmName);
        Step addVmStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.ADD_VM_TO_POOL, ExecutionMessageDirector.resolveStepMessage(StepEnum.ADD_VM_TO_POOL, values));
        ExecutionContext ctx = new ExecutionContext();
        ctx.setStep(addVmStep);
        ctx.setMonitored(true);
        commandCtx = new CommandContext(ctx);
    } catch (RuntimeException e) {
        log.errorFormat("Failed to create command context of adding VM {0} to Pool {1}", currentVmName, getParameters().getVmPool().getName(), e);
    }
    return commandCtx;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getVdsGroupId());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!isMemorySizeLegal(grp.getcompatibility_version())) {
        return false;
    }
    VmPool pool = getVmPoolDAO().getByName(getParameters().getVmPool().getVmPoolName());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getVmPoolId().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    setStoragePoolId(grp.getStoragePoolId().getValue());
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
    }
    if (!verifyAddVM()) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getStorageIds().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getAssignedVmsCount()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#method_after
@Override
protected boolean canDoAction() {
    VDSGroup grp = getVdsGroupDAO().get(getParameters().getVmPool().getVdsGroupId());
    if (grp == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    if (!isMemorySizeLegal(grp.getcompatibility_version())) {
        return false;
    }
    VmPool pool = getVmPoolDAO().getByName(getParameters().getVmPool().getName());
    if (pool != null && (getActionType() == VdcActionType.AddVmPoolWithVms || !pool.getVmPoolId().equals(getParameters().getVmPoolId()))) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    setStoragePoolId(grp.getStoragePoolId().getValue());
    if (getStoragePool() == null || getStoragePool().getstatus() != StoragePoolStatus.Up) {
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
    }
    if (!verifyAddVM()) {
        return false;
    }
    if (!ensureDestinationImageMap()) {
        return false;
    }
    storageToDisksMap = ImagesHandler.buildStorageToDiskMap(getVmTemplate().getDiskMap().values(), diskInfoDestinationMap);
    List<Guid> storageIds = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid storageId = diskImage.getStorageIds().get(0);
        if (!storageIds.contains(storageId) && !areTemplateImagesInStorageReady(storageId)) {
            return false;
        }
        storageIds.add(storageId);
    }
    if (getActionType() == VdcActionType.AddVmPoolWithVms && getParameters().getVmsCount() < 1) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_CREATE_WITH_NO_VMS);
        return false;
    }
    if (getParameters().getVmStaticData().isStateless()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
        return false;
    }
    if (getParameters().getVmPool().getPrestartedVms() > getParameters().getVmPool().getAssignedVmsCount()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_PRESTARTED_VMS_CANNOT_EXCEED_VMS_COUNT);
        return false;
    }
    return checkFreeSpaceAndTypeOnDestDomains();
}
#end_block

#method_before
public boolean checkFreeSpaceAndTypeOnDestDomains() {
    boolean retValue = true;
    List<Guid> validDomains = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid domainId = diskImage.getStorageIds().get(0);
        if (validDomains.contains(domainId)) {
            continue;
        }
        storage_domains domain = destStorages.get(domainId);
        if (domain == null) {
            domain = getStorageDomainDAO().getForStoragePool(domainId, getVmTemplate().getstorage_pool_id());
        }
        int numOfDisksOnDomain = 0;
        if (storageToDisksMap.containsKey(domainId)) {
            numOfDisksOnDomain = storageToDisksMap.get(domainId).size();
        }
        if (numOfDisksOnDomain > 0) {
            if (domain.getstorage_domain_type() == StorageDomainType.ImportExport) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                retValue = false;
                break;
            }
            if (!doesStorageDomainhaveSpaceForRequest(domain, numOfDisksOnDomain * getBlockSparseInitSizeInGB() * getParameters().getVmsCount())) {
                return false;
            }
        }
        validDomains.add(domainId);
    }
    return retValue;
}
#method_after
public boolean checkFreeSpaceAndTypeOnDestDomains() {
    boolean retValue = true;
    List<Guid> validDomains = new ArrayList<Guid>();
    for (DiskImage diskImage : diskInfoDestinationMap.values()) {
        Guid domainId = diskImage.getStorageIds().get(0);
        if (validDomains.contains(domainId)) {
            continue;
        }
        StorageDomain domain = destStorages.get(domainId);
        if (domain == null) {
            domain = getStorageDomainDAO().getForStoragePool(domainId, getVmTemplate().getstorage_pool_id());
        }
        int numOfDisksOnDomain = 0;
        if (storageToDisksMap.containsKey(domainId)) {
            numOfDisksOnDomain = storageToDisksMap.get(domainId).size();
        }
        if (numOfDisksOnDomain > 0) {
            if (domain.getStorageDomainType() == StorageDomainType.ImportExport) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
                retValue = false;
                break;
            }
            if (!doesStorageDomainhaveSpaceForRequest(domain, numOfDisksOnDomain * getBlockSparseInitSizeInGB() * getParameters().getVmsCount())) {
                return false;
            }
        }
        validDomains.add(domainId);
    }
    return retValue;
}
#end_block

#method_before
protected boolean doesStorageDomainhaveSpaceForRequest(storage_domains storageDomain, long sizeRequested) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(sizeRequested));
}
#method_after
protected boolean doesStorageDomainhaveSpaceForRequest(StorageDomain storageDomain, long sizeRequested) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(sizeRequested));
}
#end_block

#method_before
protected ArrayList<DiskImage> getAllImageSnapshots(DiskImage diskImage) {
    return ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getItGuid());
}
#method_after
protected ArrayList<DiskImage> getAllImageSnapshots(DiskImage diskImage) {
    return ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getImageTemplateId());
}
#end_block

#method_before
private void AddDiskPostData() {
    if (nextAlias == null) {
        return;
    }
    DiskModel diskModel = (DiskModel) getWindow();
    storage_domains storage = (storage_domains) diskModel.getStorageDomain().getSelectedItem();
    ArrayList<Disk> disks = getItems() != null ? Linq.<Disk>Cast(getItems()) : new ArrayList<Disk>();
    boolean hasDisks = disks.size() > 0;
    boolean hasBootableDisk = false;
    for (Disk a : disks) {
        if (a.isBoot()) {
            hasBootableDisk = true;
            break;
        }
    }
    diskModel.getIsBootable().setEntity(!hasBootableDisk);
    if (hasBootableDisk) {
        diskModel.getIsBootable().setIsChangable(false);
        diskModel.getIsBootable().getChangeProhibitionReasons().add(// $NON-NLS-1$
        "There can be only one bootable disk defined.");
    }
    ArrayList<UICommand> commands = new ArrayList<UICommand>();
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("OnSave", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar2.setIsDefault(true);
    diskModel.getCommands().add(tempVar2);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    diskModel.getCommands().add(tempVar3);
    diskModel.StopProgress();
}
#method_after
private void AddDiskPostData() {
    if (nextAlias == null) {
        return;
    }
    DiskModel diskModel = (DiskModel) getWindow();
    StorageDomain storage = (StorageDomain) diskModel.getStorageDomain().getSelectedItem();
    ArrayList<Disk> disks = getItems() != null ? Linq.<Disk>Cast(getItems()) : new ArrayList<Disk>();
    boolean hasDisks = disks.size() > 0;
    boolean hasBootableDisk = false;
    for (Disk a : disks) {
        if (a.isBoot()) {
            hasBootableDisk = true;
            break;
        }
    }
    diskModel.getIsBootable().setEntity(!hasBootableDisk);
    if (hasBootableDisk) {
        // $NON-NLS-1$
        diskModel.getIsBootable().setChangeProhibitionReason("There can be only one bootable disk defined.");
        diskModel.getIsBootable().setIsChangable(false);
    }
    ArrayList<UICommand> commands = new ArrayList<UICommand>();
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("OnSave", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar2.setIsDefault(true);
    diskModel.getCommands().add(tempVar2);
    // $NON-NLS-1$
    UICommand tempVar3 = new UICommand("Cancel", this);
    tempVar3.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar3.setIsCancel(true);
    diskModel.getCommands().add(tempVar3);
    diskModel.StopProgress();
}
#end_block

#method_before
private void Edit() {
    final Disk disk = (Disk) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    DiskModel model = new DiskModel();
    model.setDisk(disk);
    model.setIsNew(false);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editVirtualDiskTitle());
    // $NON-NLS-1$
    model.setHashName("edit_virtual_disk");
    model.getAttachDisk().setIsAvailable(false);
    model.getIsInVm().setEntity(true);
    model.getIsInternal().setEntity(disk.getDiskStorageType() == DiskStorageType.IMAGE);
    model.getStorageDomain().setIsChangable(false);
    model.getHost().setIsChangable(false);
    model.getStorageType().setIsChangable(false);
    model.getDataCenter().setIsChangable(false);
    model.getSize().setIsChangable(false);
    model.getSize().setEntity(disk.getDiskStorageType() == DiskStorageType.IMAGE ? ((DiskImage) disk).getSizeInGigabytes() : ((LunDisk) disk).getLun().getDeviceSize());
    Guid storageDomainId = disk.getDiskStorageType() == DiskStorageType.IMAGE ? ((DiskImage) disk).getStorageIds().get(0) : Guid.Empty;
    model.StartProgress(null);
    AsyncQuery _asyncQuery1 = new AsyncQuery();
    _asyncQuery1.setModel(this);
    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VmDiskListModel vmDiskListModel = (VmDiskListModel) model;
            DiskModel diskModel = (DiskModel) vmDiskListModel.getWindow();
            VM vm = vmDiskListModel.getEntity();
            storage_domains storageDomain = (storage_domains) result;
            Disk disk = (Disk) vmDiskListModel.getSelectedItem();
            diskModel.getStorageDomain().setSelectedItem(storageDomain);
            DiskImageBase preset = new DiskImage();
            diskModel.getPreset().setSelectedItem(preset);
            diskModel.getPreset().setIsChangable(false);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                diskModel.getVolumeType().setSelectedItem(((DiskImage) disk).getVolumeType());
                diskModel.getVolumeType().setIsChangable(false);
                diskModel.setVolumeFormat(((DiskImage) disk).getVolumeFormat());
            }
            ArrayList<DiskInterface> interfaces = AsyncDataProvider.GetDiskInterfaceList(vm.getVmOs(), vm.getVdsGroupCompatibilityVersion());
            if (!interfaces.contains(disk.getDiskInterface())) {
                interfaces.add(disk.getDiskInterface());
            }
            diskModel.getInterface().setItems(interfaces);
            diskModel.getInterface().setSelectedItem(disk.getDiskInterface());
            // Allow interface type to be edited only if the disk is not sharable
            diskModel.getInterface().setIsChangable(!disk.isShareable());
            storage_domains storage = (storage_domains) diskModel.getStorageDomain().getSelectedItem();
            if (diskModel.getStorageDomain() != null && diskModel.getStorageDomain().getSelectedItem() != null) {
                StorageType storageType = storage.getstorage_type();
                boolean isFileDomain = storageType == StorageType.NFS || storageType == StorageType.LOCALFS || storageType == StorageType.POSIXFS;
                diskModel.getWipeAfterDelete().setIsChangable(!isFileDomain);
            }
            diskModel.getWipeAfterDelete().setEntity(disk.isWipeAfterDelete());
            ArrayList<Disk> disks = vmDiskListModel.getItems() != null ? Linq.<Disk>Cast(vmDiskListModel.getItems()) : new ArrayList<Disk>();
            Disk bootableDisk = null;
            for (Disk a : disks) {
                if (a.isBoot()) {
                    bootableDisk = a;
                    break;
                }
            }
            if (bootableDisk != null && !bootableDisk.getId().equals(disk.getId())) {
                diskModel.getIsBootable().setIsChangable(false);
                diskModel.getIsBootable().getChangeProhibitionReasons().add(// $NON-NLS-1$
                "There can be only one bootable disk defined.");
            }
            diskModel.getIsBootable().setEntity(disk.isBoot());
            diskModel.getIsShareable().setEntity(disk.isShareable());
            diskModel.getAlias().setEntity(disk.getDiskAlias());
            diskModel.getDescription().setEntity(disk.getDiskDescription());
            diskModel.StopProgress();
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnSave", vmDiskListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            diskModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", vmDiskListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            diskModel.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetStorageDomainById(_asyncQuery1, storageDomainId);
    if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
        AsyncDataProvider.GetDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                storage_pool dataCenter = (storage_pool) returnValue;
                VmDiskListModel vmDiskListModel1 = (VmDiskListModel) model;
                DiskModel dModel = (DiskModel) vmDiskListModel1.getWindow();
                if (dataCenter.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)) {
                    dModel.getQuota().setIsAvailable(false);
                } else {
                    dModel.getQuota().setIsAvailable(true);
                    dModel.quota_storageSelectedItemChanged(((DiskImage) disk).getQuotaId());
                }
            }
        }), getEntity().getStoragePoolId());
    } else {
        ((DiskModel) getWindow()).getQuota().setIsAvailable(false);
    }
}
#method_after
private void Edit() {
    final Disk disk = (Disk) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    DiskModel model = new DiskModel();
    model.setDisk(disk);
    model.setIsNew(false);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editVirtualDiskTitle());
    // $NON-NLS-1$
    model.setHashName("edit_virtual_disk");
    model.getAttachDisk().setIsAvailable(false);
    model.getIsInVm().setEntity(true);
    model.getIsInternal().setEntity(disk.getDiskStorageType() == DiskStorageType.IMAGE);
    model.getStorageDomain().setIsChangable(false);
    model.getHost().setIsChangable(false);
    model.getStorageType().setIsChangable(false);
    model.getDataCenter().setIsChangable(false);
    model.getSize().setIsChangable(false);
    model.getSize().setEntity(disk.getDiskStorageType() == DiskStorageType.IMAGE ? ((DiskImage) disk).getSizeInGigabytes() : ((LunDisk) disk).getLun().getDeviceSize());
    Guid storageDomainId = disk.getDiskStorageType() == DiskStorageType.IMAGE ? ((DiskImage) disk).getStorageIds().get(0) : Guid.Empty;
    model.StartProgress(null);
    AsyncQuery _asyncQuery1 = new AsyncQuery();
    _asyncQuery1.setModel(this);
    _asyncQuery1.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VmDiskListModel vmDiskListModel = (VmDiskListModel) model;
            DiskModel diskModel = (DiskModel) vmDiskListModel.getWindow();
            VM vm = vmDiskListModel.getEntity();
            StorageDomain storageDomain = (StorageDomain) result;
            Disk disk = (Disk) vmDiskListModel.getSelectedItem();
            diskModel.getStorageDomain().setSelectedItem(storageDomain);
            DiskImageBase preset = new DiskImage();
            diskModel.getPreset().setSelectedItem(preset);
            diskModel.getPreset().setIsChangable(false);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                diskModel.getVolumeType().setSelectedItem(((DiskImage) disk).getVolumeType());
                diskModel.getVolumeType().setIsChangable(false);
                diskModel.setVolumeFormat(((DiskImage) disk).getVolumeFormat());
            }
            ArrayList<DiskInterface> interfaces = AsyncDataProvider.GetDiskInterfaceList(vm.getVmOs(), vm.getVdsGroupCompatibilityVersion());
            if (!interfaces.contains(disk.getDiskInterface())) {
                interfaces.add(disk.getDiskInterface());
            }
            diskModel.getInterface().setItems(interfaces);
            diskModel.getInterface().setSelectedItem(disk.getDiskInterface());
            // Allow interface type to be edited only if the disk is not sharable
            diskModel.getInterface().setIsChangable(!disk.isShareable());
            StorageDomain storage = (StorageDomain) diskModel.getStorageDomain().getSelectedItem();
            if (diskModel.getStorageDomain() != null && diskModel.getStorageDomain().getSelectedItem() != null) {
                StorageType storageType = storage.getStorageType();
                boolean isFileDomain = storageType == StorageType.NFS || storageType == StorageType.LOCALFS || storageType == StorageType.POSIXFS;
                diskModel.getWipeAfterDelete().setIsChangable(!isFileDomain);
            }
            diskModel.getWipeAfterDelete().setEntity(disk.isWipeAfterDelete());
            ArrayList<Disk> disks = vmDiskListModel.getItems() != null ? Linq.<Disk>Cast(vmDiskListModel.getItems()) : new ArrayList<Disk>();
            Disk bootableDisk = null;
            for (Disk a : disks) {
                if (a.isBoot()) {
                    bootableDisk = a;
                    break;
                }
            }
            if (bootableDisk != null && !bootableDisk.getId().equals(disk.getId())) {
                diskModel.getIsBootable().setChangeProhibitionReason(// $NON-NLS-1$
                "There can be only one bootable disk defined.");
                diskModel.getIsBootable().setIsChangable(false);
            }
            diskModel.getIsBootable().setEntity(disk.isBoot());
            diskModel.getIsShareable().setEntity(disk.isShareable());
            diskModel.getAlias().setEntity(disk.getDiskAlias());
            diskModel.getDescription().setEntity(disk.getDiskDescription());
            diskModel.StopProgress();
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnSave", vmDiskListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            diskModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", vmDiskListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            diskModel.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetStorageDomainById(_asyncQuery1, storageDomainId);
    if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
        AsyncDataProvider.GetDataCenterById(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                storage_pool dataCenter = (storage_pool) returnValue;
                VmDiskListModel vmDiskListModel1 = (VmDiskListModel) model;
                DiskModel dModel = (DiskModel) vmDiskListModel1.getWindow();
                if (dataCenter.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)) {
                    dModel.getQuota().setIsAvailable(false);
                } else {
                    dModel.getQuota().setIsAvailable(true);
                    dModel.quota_storageSelectedItemChanged(((DiskImage) disk).getQuotaId());
                }
            }
        }), getEntity().getStoragePoolId());
    } else {
        ((DiskModel) getWindow()).getQuota().setIsAvailable(false);
    }
}
#end_block

#method_before
private void OnSave() {
    VM vm = getEntity();
    DiskModel model = (DiskModel) getWindow();
    if (model.getProgress() != null || !model.Validate()) {
        return;
    }
    if ((Boolean) model.getAttachDisk().getEntity()) {
        OnAttachDisks();
        return;
    }
    storage_domains storageDomain = (storage_domains) model.getStorageDomain().getSelectedItem();
    Disk disk = (Disk) getSelectedItem();
    boolean isInternal = (Boolean) model.getIsInternal().getEntity();
    if (!model.getIsNew()) {
        model.getIsInternal().setEntity(disk.getDiskStorageType() == DiskStorageType.IMAGE);
    }
    if (isInternal) {
        DiskImage diskImage = model.getIsNew() ? new DiskImage() : (DiskImage) getSelectedItem();
        diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
        diskImage.setVolumeType((VolumeType) model.getVolumeType().getSelectedItem());
        diskImage.setvolumeFormat(model.getVolumeFormat());
        if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
            diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
        }
        disk = diskImage;
    } else {
        LunDisk lunDisk;
        if (model.getIsNew()) {
            SanStorageModel sanStorageModel = model.getSanStorageModel();
            ArrayList<String> partOfSdLunsMessages = sanStorageModel.getPartOfSdLunsMessages();
            if (partOfSdLunsMessages.isEmpty() || sanStorageModel.isForce()) {
                LUNs luns = (LUNs) sanStorageModel.getAddedLuns().get(0).getEntity();
                luns.setLunType((StorageType) model.getStorageType().getSelectedItem());
                lunDisk = new LunDisk();
                lunDisk.setLun(luns);
            } else {
                ForceCreationWarning(partOfSdLunsMessages);
                return;
            }
        } else {
            lunDisk = (LunDisk) getSelectedItem();
        }
        disk = lunDisk;
    }
    disk.setDiskAlias((String) model.getAlias().getEntity());
    disk.setDiskDescription((String) model.getDescription().getEntity());
    disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
    disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
    disk.setBoot((Boolean) model.getIsBootable().getEntity());
    disk.setShareable((Boolean) model.getIsShareable().getEntity());
    disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
    disk.setPropagateErrors(PropagateErrors.Off);
    model.StartProgress(null);
    VdcActionType actionType;
    VmDiskOperationParameterBase parameters;
    if (model.getIsNew()) {
        actionType = VdcActionType.AddDisk;
        parameters = new AddDiskParameters(vm.getId(), disk);
        if (isInternal) {
            ((AddDiskParameters) parameters).setStorageDomainId(storageDomain.getId());
        }
    } else {
        actionType = VdcActionType.UpdateVmDisk;
        parameters = new UpdateVmDiskParameters(vm.getId(), disk.getId(), disk);
    }
    Frontend.RunAction(actionType, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmDiskListModel localModel = (VmDiskListModel) result.getState();
            localModel.getWindow().StopProgress();
            Cancel();
        }
    }, this);
}
#method_after
private void OnSave() {
    VM vm = getEntity();
    DiskModel model = (DiskModel) getWindow();
    if (model.getProgress() != null || !model.Validate()) {
        return;
    }
    if ((Boolean) model.getAttachDisk().getEntity()) {
        OnAttachDisks();
        return;
    }
    StorageDomain storageDomain = (StorageDomain) model.getStorageDomain().getSelectedItem();
    Disk disk = (Disk) getSelectedItem();
    boolean isInternal = (Boolean) model.getIsInternal().getEntity();
    if (!model.getIsNew()) {
        model.getIsInternal().setEntity(disk.getDiskStorageType() == DiskStorageType.IMAGE);
    }
    if (isInternal) {
        DiskImage diskImage = model.getIsNew() ? new DiskImage() : (DiskImage) getSelectedItem();
        diskImage.setSizeInGigabytes(Integer.parseInt(model.getSize().getEntity().toString()));
        diskImage.setVolumeType((VolumeType) model.getVolumeType().getSelectedItem());
        diskImage.setvolumeFormat(model.getVolumeFormat());
        if (model.getQuota().getIsAvailable() && model.getQuota().getSelectedItem() != null) {
            diskImage.setQuotaId(((Quota) model.getQuota().getSelectedItem()).getId());
        }
        disk = diskImage;
    } else {
        LunDisk lunDisk;
        if (model.getIsNew()) {
            SanStorageModel sanStorageModel = model.getSanStorageModel();
            ArrayList<String> partOfSdLunsMessages = sanStorageModel.getPartOfSdLunsMessages();
            if (partOfSdLunsMessages.isEmpty() || sanStorageModel.isForce()) {
                LUNs luns = (LUNs) sanStorageModel.getAddedLuns().get(0).getEntity();
                luns.setLunType((StorageType) model.getStorageType().getSelectedItem());
                lunDisk = new LunDisk();
                lunDisk.setLun(luns);
            } else {
                ForceCreationWarning(partOfSdLunsMessages);
                return;
            }
        } else {
            lunDisk = (LunDisk) getSelectedItem();
        }
        disk = lunDisk;
    }
    disk.setDiskAlias((String) model.getAlias().getEntity());
    disk.setDiskDescription((String) model.getDescription().getEntity());
    disk.setDiskInterface((DiskInterface) model.getInterface().getSelectedItem());
    disk.setWipeAfterDelete((Boolean) model.getWipeAfterDelete().getEntity());
    disk.setBoot((Boolean) model.getIsBootable().getEntity());
    disk.setShareable((Boolean) model.getIsShareable().getEntity());
    disk.setPlugged((Boolean) model.getIsPlugged().getEntity());
    disk.setPropagateErrors(PropagateErrors.Off);
    model.StartProgress(null);
    VdcActionType actionType;
    VmDiskOperationParameterBase parameters;
    if (model.getIsNew()) {
        actionType = VdcActionType.AddDisk;
        parameters = new AddDiskParameters(vm.getId(), disk);
        if (isInternal) {
            ((AddDiskParameters) parameters).setStorageDomainId(storageDomain.getId());
        }
    } else {
        actionType = VdcActionType.UpdateVmDisk;
        parameters = new UpdateVmDiskParameters(vm.getId(), disk.getId(), disk);
    }
    Frontend.RunAction(actionType, parameters, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VmDiskListModel localModel = (VmDiskListModel) result.getState();
            localModel.getWindow().StopProgress();
            Cancel();
        }
    }, this);
}
#end_block

#method_before
@Override
protected TreeItem getRootItem(StorageDomainModel storageDomainModel) {
    HorizontalPanel panel = new HorizontalPanel();
    panel.setSpacing(1);
    // $NON-NLS-1$
    panel.setWidth("100%");
    storage_domains storage = storageDomainModel.getStorageDomain();
    // $NON-NLS-1$
    addItemToPanel(panel, new Image(resources.storageImage()), "25px");
    // $NON-NLS-1$
    addTextBoxToPanel(panel, new TextBoxLabel(), storage.getstorage_name(), "");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainType>(), storage.getstorage_domain_type(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainSharedStatus>(), storage.getstorage_domain_shared_status(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getavailable_disk_size(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getused_disk_size(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getTotalDiskSize(), "90px");
    TreeItem treeItem = new TreeItem(panel);
    treeItem.setUserObject(storage.getId());
    return treeItem;
}
#method_after
@Override
protected TreeItem getRootItem(StorageDomainModel storageDomainModel) {
    HorizontalPanel panel = new HorizontalPanel();
    panel.setSpacing(1);
    // $NON-NLS-1$
    panel.setWidth("100%");
    StorageDomain storage = storageDomainModel.getStorageDomain();
    // $NON-NLS-1$
    addItemToPanel(panel, new Image(resources.storageImage()), "25px");
    // $NON-NLS-1$
    addTextBoxToPanel(panel, new TextBoxLabel(), storage.getStorageName(), "");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainType>(), storage.getStorageDomainType(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new EnumLabel<StorageDomainSharedStatus>(), storage.getStorageDomainSharedStatus(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getAvailableDiskSize(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getUsedDiskSize(), "120px");
    // $NON-NLS-1$
    addValueLabelToPanel(panel, new DiskSizeLabel<Integer>(), storage.getTotalDiskSize(), "90px");
    TreeItem treeItem = new TreeItem(panel);
    treeItem.setUserObject(storage.getId());
    return treeItem;
}
#end_block

#method_before
protected Object getEntityId(Object entity) {
    DiskModel diskModel = (DiskModel) entity;
    storage_domains storageDomain = (storage_domains) diskModel.getStorageDomain().getSelectedItem();
    return ((DiskImage) diskModel.getDisk()).getImageId().toString() + storageDomain.getId().toString();
}
#method_after
protected Object getEntityId(Object entity) {
    DiskModel diskModel = (DiskModel) entity;
    StorageDomain storageDomain = (StorageDomain) diskModel.getStorageDomain().getSelectedItem();
    return ((DiskImage) diskModel.getDisk()).getImageId().toString() + storageDomain.getId().toString();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
        return false;
    }
    setDescription(getVmName());
    setStoragePoolId(getVm().getStoragePoolId());
    // check that target domain exists
    StorageDomainValidator targetstorageDomainValidator = new StorageDomainValidator(getStorageDomain());
    if (!validate(targetstorageDomainValidator.isDomainExistAndActive())) {
        return false;
    }
    // load the disks of vm from database
    VmHandler.updateDisksFromDb(getVm());
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    // check that the target and source domain are in the same storage_pool
    if (DbFacade.getInstance().getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(getStorageDomain().getId(), getVm().getStoragePoolId())) == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
        return false;
    }
    // check if template exists only if asked for
    if (getParameters().getTemplateMustExists()) {
        if (!CheckTemplateInStorageDomain(getVm().getStoragePoolId(), getParameters().getStorageDomainId(), getVm().getVmtGuid())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_EXPORT_DOMAIN);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", getVm().getVmtName()));
            return false;
        }
    }
    Map<Guid, ? extends Disk> images = getVm().getDiskMap();
    // check that the images requested format are valid (COW+Sparse)
    if (!ImagesHandler.CheckImagesConfiguration(getParameters().getStorageDomainId(), new ArrayList<Disk>(images.values()), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getCopyCollapse()) {
        for (DiskImage img : getDisksBasedOnImage()) {
            if (images.containsKey(img.getId())) {
                // mode)
                if (((DiskImage) images.get(img.getId())).getVolumeFormat() == VolumeFormat.RAW && img.getVolumeFormat() != VolumeFormat.RAW) {
                    addCanDoActionMessage(VdcBllMessages.VM_CANNOT_EXPORT_RAW_FORMAT);
                    return false;
                }
            }
        }
    }
    // check destination storage is Export domain
    if (getStorageDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(String.format("$storageDomainName %1$s", getStorageDomainName()));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
    }
    // check destination storage have free space
    int sizeInGB = (int) getVm().getActualDiskWithSnapshotsSize();
    if (!doesStorageDomainhaveSpaceForRequest(getStorageDomain(), sizeInGB)) {
        return false;
    }
    SnapshotsValidator snapshotValidator = new SnapshotsValidator();
    if (!(checkVmInStorageDomain() && validate(new StoragePoolValidator(getStoragePool()).isUp()) && validate(snapshotValidator.vmNotDuringSnapshot(getVmId())) && validate(snapshotValidator.vmNotInPreview(getVmId())) && validate(new VmValidator(getVm()).vmDown()) && ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), Guid.Empty, false, true, false, false, true, true, getDisksBasedOnImage()))) {
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVm() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND);
        return false;
    }
    setDescription(getVmName());
    setStoragePoolId(getVm().getStoragePoolId());
    // check that target domain exists
    StorageDomainValidator targetstorageDomainValidator = new StorageDomainValidator(getStorageDomain());
    if (!validate(targetstorageDomainValidator.isDomainExistAndActive())) {
        return false;
    }
    // load the disks of vm from database
    VmHandler.updateDisksFromDb(getVm());
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    // check that the target and source domain are in the same storage_pool
    if (DbFacade.getInstance().getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(getStorageDomain().getId(), getVm().getStoragePoolId())) == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
        return false;
    }
    // check if template exists only if asked for
    if (getParameters().getTemplateMustExists()) {
        if (!CheckTemplateInStorageDomain(getVm().getStoragePoolId(), getParameters().getStorageDomainId(), getVm().getVmtGuid())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_EXPORT_DOMAIN);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", getVm().getVmtName()));
            return false;
        }
    }
    Map<Guid, ? extends Disk> images = getVm().getDiskMap();
    // check that the images requested format are valid (COW+Sparse)
    if (!ImagesHandler.CheckImagesConfiguration(getParameters().getStorageDomainId(), new ArrayList<Disk>(images.values()), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getCopyCollapse()) {
        for (DiskImage img : getDisksBasedOnImage()) {
            if (images.containsKey(img.getId())) {
                // mode)
                if (((DiskImage) images.get(img.getId())).getVolumeFormat() == VolumeFormat.RAW && img.getVolumeFormat() != VolumeFormat.RAW) {
                    addCanDoActionMessage(VdcBllMessages.VM_CANNOT_EXPORT_RAW_FORMAT);
                    return false;
                }
            }
        }
    }
    // check destination storage is Export domain
    if (getStorageDomain().getStorageDomainType() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(String.format("$storageDomainName %1$s", getStorageDomainName()));
        return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SPECIFY_DOMAIN_IS_NOT_EXPORT_DOMAIN);
    }
    // check destination storage have free space
    int sizeInGB = (int) getVm().getActualDiskWithSnapshotsSize();
    if (!doesStorageDomainhaveSpaceForRequest(getStorageDomain(), sizeInGB)) {
        return false;
    }
    SnapshotsValidator snapshotValidator = new SnapshotsValidator();
    if (!(checkVmInStorageDomain() && validate(new StoragePoolValidator(getStoragePool()).isUp()) && validate(snapshotValidator.vmNotDuringSnapshot(getVmId())) && validate(snapshotValidator.vmNotInPreview(getVmId())) && validate(new VmValidator(getVm()).vmDown()) && ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), Guid.Empty, false, true, false, false, true, true, getDisksBasedOnImage()))) {
        return false;
    }
    return true;
}
#end_block

#method_before
protected boolean doesStorageDomainhaveSpaceForRequest(storage_domains storageDomain, long sizeRequested) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(sizeRequested));
}
#method_after
protected boolean doesStorageDomainhaveSpaceForRequest(StorageDomain storageDomain, long sizeRequested) {
    return validate(new StorageDomainValidator(storageDomain).isDomainHasSpaceForRequest(sizeRequested));
}
#end_block

#method_before
public boolean updateCopyVmInSpm(Guid storagePoolId, VM vm, Guid storageDomainId) {
    HashMap<Guid, KeyValuePairCompat<String, List<Guid>>> vmsAndMetaDictionary = new HashMap<Guid, KeyValuePairCompat<String, List<Guid>>>();
    OvfManager ovfManager = new OvfManager();
    ArrayList<DiskImage> AllVmImages = new ArrayList<DiskImage>();
    VmHandler.updateDisksFromDb(vm);
    List<VmNetworkInterface> interfaces = vm.getInterfaces();
    if (interfaces != null) {
        // TODO remove this when the API changes
        interfaces.clear();
        interfaces.addAll(DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(vm.getId()));
    }
    for (Disk disk : vm.getDiskMap().values()) {
        if (DiskStorageType.IMAGE == disk.getDiskStorageType() && !disk.isShareable()) {
            DiskImage diskImage = (DiskImage) disk;
            diskImage.setParentId(VmTemplateHandler.BlankVmTemplateId);
            diskImage.setItGuid(VmTemplateHandler.BlankVmTemplateId);
            diskImage.setStorageIds(new ArrayList<Guid>(Arrays.asList(storageDomainId)));
            DiskImage diskForVolumeInfo = getDiskForVolumeInfo(diskImage);
            diskImage.setvolumeFormat(diskForVolumeInfo.getVolumeFormat());
            diskImage.setVolumeType(diskForVolumeInfo.getVolumeType());
            VDSReturnValue vdsReturnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, new GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, diskImage.getId(), diskImage.getImageId()));
            if (vdsReturnValue != null && vdsReturnValue.getSucceeded()) {
                DiskImage fromVdsm = (DiskImage) vdsReturnValue.getReturnValue();
                diskImage.setActualSizeFromDiskImage(fromVdsm.getActualSizeFromDiskImage());
            }
            AllVmImages.add(diskImage);
        }
    }
    if (StringUtils.isEmpty(vm.getVmtName())) {
        VmTemplate t = DbFacade.getInstance().getVmTemplateDao().get(vm.getVmtGuid());
        vm.setVmtName(t.getname());
    }
    getVm().setVmtGuid(VmTemplateHandler.BlankVmTemplateId);
    String vmMeta = ovfManager.ExportVm(vm, AllVmImages);
    List<Guid> imageGroupIds = new ArrayList<Guid>();
    for (Disk disk : vm.getDiskMap().values()) {
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            imageGroupIds.add(disk.getId());
        }
    }
    vmsAndMetaDictionary.put(vm.getId(), new KeyValuePairCompat<String, List<Guid>>(vmMeta, imageGroupIds));
    UpdateVMVDSCommandParameters tempVar = new UpdateVMVDSCommandParameters(storagePoolId, vmsAndMetaDictionary);
    tempVar.setStorageDomainId(storageDomainId);
    return Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVM, tempVar).getSucceeded();
}
#method_after
public boolean updateCopyVmInSpm(Guid storagePoolId, VM vm, Guid storageDomainId) {
    HashMap<Guid, KeyValuePairCompat<String, List<Guid>>> vmsAndMetaDictionary = new HashMap<Guid, KeyValuePairCompat<String, List<Guid>>>();
    OvfManager ovfManager = new OvfManager();
    ArrayList<DiskImage> AllVmImages = new ArrayList<DiskImage>();
    VmHandler.updateDisksFromDb(vm);
    List<VmNetworkInterface> interfaces = vm.getInterfaces();
    if (interfaces != null) {
        // TODO remove this when the API changes
        interfaces.clear();
        interfaces.addAll(DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(vm.getId()));
    }
    for (Disk disk : vm.getDiskMap().values()) {
        if (DiskStorageType.IMAGE == disk.getDiskStorageType() && !disk.isShareable()) {
            DiskImage diskImage = (DiskImage) disk;
            diskImage.setParentId(VmTemplateHandler.BlankVmTemplateId);
            diskImage.setImageTemplateId(VmTemplateHandler.BlankVmTemplateId);
            diskImage.setStorageIds(new ArrayList<Guid>(Arrays.asList(storageDomainId)));
            DiskImage diskForVolumeInfo = getDiskForVolumeInfo(diskImage);
            diskImage.setvolumeFormat(diskForVolumeInfo.getVolumeFormat());
            diskImage.setVolumeType(diskForVolumeInfo.getVolumeType());
            VDSReturnValue vdsReturnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, new GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, diskImage.getId(), diskImage.getImageId()));
            if (vdsReturnValue != null && vdsReturnValue.getSucceeded()) {
                DiskImage fromVdsm = (DiskImage) vdsReturnValue.getReturnValue();
                diskImage.setActualSizeFromDiskImage(fromVdsm.getActualSizeFromDiskImage());
            }
            AllVmImages.add(diskImage);
        }
    }
    if (StringUtils.isEmpty(vm.getVmtName())) {
        VmTemplate t = DbFacade.getInstance().getVmTemplateDao().get(vm.getVmtGuid());
        vm.setVmtName(t.getname());
    }
    getVm().setVmtGuid(VmTemplateHandler.BlankVmTemplateId);
    String vmMeta = ovfManager.ExportVm(vm, AllVmImages);
    List<Guid> imageGroupIds = new ArrayList<Guid>();
    for (Disk disk : vm.getDiskMap().values()) {
        if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
            imageGroupIds.add(disk.getId());
        }
    }
    vmsAndMetaDictionary.put(vm.getId(), new KeyValuePairCompat<String, List<Guid>>(vmMeta, imageGroupIds));
    UpdateVMVDSCommandParameters tempVar = new UpdateVMVDSCommandParameters(storagePoolId, vmsAndMetaDictionary);
    tempVar.setStorageDomainId(storageDomainId);
    return Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVM, tempVar).getSucceeded();
}
#end_block

#method_before
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        int resourceType = Integer.parseInt(node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText);
        switch(resourceType) {
            // CPU
            case 3:
                _vmTemplate.setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
                _vmTemplate.setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
                break;
            // Memory
            case 4:
                _vmTemplate.setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                break;
            // Image
            case 17:
                final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
                DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                    @Override
                    public boolean eval(DiskImage diskImage) {
                        return diskImage.getImageId().equals(guid);
                    }
                });
                image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                    image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                    image.setItGuid(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
                }
                image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText)) {
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText))));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                    image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
                }
                final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
                if (creationDate != null) {
                    image.setCreationDate(creationDate);
                }
                final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
                if (lastModified != null) {
                    image.setLastModified(lastModified);
                }
                readVmDevice(node, _vmTemplate, image.getId(), Boolean.TRUE);
                break;
            // Network
            case 10:
                VmNetworkInterface iface = getNetwotkInterface(node);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText)) {
                    iface.setType(Integer.parseInt(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText));
                }
                String resourceSubNetworkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).InnerText;
                iface.setNetworkName(StringUtils.defaultIfEmpty(resourceSubNetworkName, null));
                XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
                iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.InnerText));
                iface.setName(node.SelectSingleNode("rasd:Name", _xmlNS).InnerText);
                iface.setSpeed((node.SelectSingleNode("rasd:speed", _xmlNS) != null) ? Integer.parseInt(node.SelectSingleNode("rasd:speed", _xmlNS).InnerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
                _vmTemplate.getInterfaces().add(iface);
                readVmDevice(node, _vmTemplate, iface.getId(), Boolean.TRUE);
                break;
            // CDROM
            case 15:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // USB
            case 23:
                _vmTemplate.setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
                break;
            // Monitor
            case 20:
                _vmTemplate.setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // OTHER
            case 0:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.FALSE);
                break;
        }
    }
}
#method_after
@Override
protected void readHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        int resourceType = Integer.parseInt(node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText);
        switch(resourceType) {
            // CPU
            case 3:
                _vmTemplate.setNumOfSockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
                _vmTemplate.setCpuPerSocket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
                break;
            // Memory
            case 4:
                _vmTemplate.setMemSizeMb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                break;
            // Image
            case 17:
                final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
                DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                    @Override
                    public boolean eval(DiskImage diskImage) {
                        return diskImage.getImageId().equals(guid);
                    }
                });
                image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                    image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                    image.setImageTemplateId(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
                }
                image.setAppList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText)) {
                    image.setStorageIds(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText))));
                }
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                    image.setStoragePoolId(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
                }
                final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
                if (creationDate != null) {
                    image.setCreationDate(creationDate);
                }
                final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
                if (lastModified != null) {
                    image.setLastModified(lastModified);
                }
                readVmDevice(node, _vmTemplate, image.getId(), Boolean.TRUE);
                break;
            // Network
            case 10:
                VmNetworkInterface iface = getNetwotkInterface(node);
                if (StringUtils.isNotEmpty(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText)) {
                    iface.setType(Integer.parseInt(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText));
                }
                String resourceSubNetworkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).InnerText;
                iface.setNetworkName(StringUtils.defaultIfEmpty(resourceSubNetworkName, null));
                XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
                iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.InnerText));
                iface.setName(node.SelectSingleNode("rasd:Name", _xmlNS).InnerText);
                iface.setSpeed((node.SelectSingleNode("rasd:speed", _xmlNS) != null) ? Integer.parseInt(node.SelectSingleNode("rasd:speed", _xmlNS).InnerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
                _vmTemplate.getInterfaces().add(iface);
                readVmDevice(node, _vmTemplate, iface.getId(), Boolean.TRUE);
                break;
            // CDROM
            case 15:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // USB
            case 23:
                _vmTemplate.setUsbPolicy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
                break;
            // Monitor
            case 20:
                _vmTemplate.setNumOfMonitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // OTHER
            case 0:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.FALSE);
                break;
        }
    }
}
#end_block

#method_before
public ArrayList<storage_domains> getActiveStorageDomains() {
    return activeStorageDomains;
}
#method_after
public ArrayList<StorageDomain> getActiveStorageDomains() {
    return activeStorageDomains;
}
#end_block

#method_before
public void setActiveStorageDomains(ArrayList<storage_domains> activeStorageDomains) {
    this.activeStorageDomains = activeStorageDomains;
}
#method_after
public void setActiveStorageDomains(ArrayList<StorageDomain> activeStorageDomains) {
    this.activeStorageDomains = activeStorageDomains;
}
#end_block

#method_before
private void updateImageToDestinationDomainMap() {
    if (disks == null) {
        return;
    }
    for (DiskModel diskModel : disks) {
        Guid diskId = ((DiskImage) diskModel.getDisk()).getId();
        Guid storageId = null;
        storageId = ((storage_domains) diskModel.getStorageDomain().getSelectedItem()).getId();
        DiskImage diskImage = (DiskImage) diskModel.getDisk();
        ArrayList<Guid> storageIdList = new ArrayList<Guid>();
        storageIdList.add(storageId);
        diskImage.setStorageIds(storageIdList);
        diskImage.setDiskAlias((String) diskModel.getAlias().getEntity());
        if (diskModel.getQuota().getSelectedItem() != null) {
            diskImage.setQuotaId(((Quota) diskModel.getQuota().getSelectedItem()).getId());
        }
        imageToDestinationDomainMap.put(diskId, diskImage);
    }
}
#method_after
private void updateImageToDestinationDomainMap() {
    if (disks == null) {
        return;
    }
    for (DiskModel diskModel : disks) {
        Guid diskId = ((DiskImage) diskModel.getDisk()).getId();
        Guid storageId = null;
        storageId = ((StorageDomain) diskModel.getStorageDomain().getSelectedItem()).getId();
        DiskImage diskImage = (DiskImage) diskModel.getDisk();
        ArrayList<Guid> storageIdList = new ArrayList<Guid>();
        storageIdList.add(storageId);
        diskImage.setStorageIds(storageIdList);
        diskImage.setDiskAlias((String) diskModel.getAlias().getEntity());
        if (diskModel.getQuota().getSelectedItem() != null) {
            diskImage.setQuotaId(((Quota) diskModel.getQuota().getSelectedItem()).getId());
        }
        imageToDestinationDomainMap.put(diskId, diskImage);
    }
}
#end_block

#method_before
private void updateDisksQuota(Object sender) {
    storage_domains storageDomain = (storage_domains) ((ListModel) sender).getSelectedItem();
    if (storageDomain != null) {
        for (DiskModel innerDisk : disks) {
            if (innerDisk.getStorageDomain().equals(sender)) {
                updateQuota(storageDomain.getId(), innerDisk.getQuota());
                break;
            }
        }
    }
}
#method_after
private void updateDisksQuota(Object sender) {
    StorageDomain storageDomain = (StorageDomain) ((ListModel) sender).getSelectedItem();
    if (storageDomain != null) {
        for (DiskModel innerDisk : disks) {
            if (innerDisk.getStorageDomain().equals(sender)) {
                updateQuota(storageDomain.getId(), innerDisk.getQuota());
                break;
            }
        }
    }
}
#end_block

#method_before
private void saveIllegalDisk(final DiskImage diskImage) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            // Allocating new IDs for image and disk as it's possible
            // that more than one clone will be made from this snapshot
            // So this is required to avoid PK violation at DB.
            diskImage.setImageId(Guid.NewGuid());
            diskImage.setId(Guid.NewGuid());
            diskImage.setParentId(Guid.Empty);
            diskImage.setItGuid(Guid.Empty);
            ImagesHandler.setDiskAlias(diskImage, getVm());
            ImagesHandler.addDiskImage(diskImage, getVmId());
            return null;
        }
    });
}
#method_after
private void saveIllegalDisk(final DiskImage diskImage) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            // Allocating new IDs for image and disk as it's possible
            // that more than one clone will be made from this snapshot
            // So this is required to avoid PK violation at DB.
            diskImage.setImageId(Guid.NewGuid());
            diskImage.setId(Guid.NewGuid());
            diskImage.setParentId(Guid.Empty);
            diskImage.setImageTemplateId(Guid.Empty);
            ImagesHandler.setDiskAlias(diskImage, getVm());
            ImagesHandler.addDiskImage(diskImage, getVmId());
            return null;
        }
    });
}
#end_block

#method_before
protected void initDAOMocks(final List<Disk> disks, final List<VmDevice> vmDevices) {
    final DiskDao diskDao = mock(DiskDao.class);
    when(diskDao.getAllForVm(Guid.Empty)).thenReturn(disks);
    doReturn(diskDao).when(command).getDiskDao();
    doReturn(diskDao).when(vmRunHandler).getDiskDao();
    final StorageDomainDAO storageDomainDAO = mock(StorageDomainDAO.class);
    when(storageDomainDAO.getAllForStoragePool(Guid.Empty)).thenReturn(new ArrayList<storage_domains>());
    doReturn(storageDomainDAO).when(command).getStorageDomainDAO();
    doReturn(storageDomainDAO).when(vmRunHandler).getStorageDomainDAO();
    final VmDeviceDAO vmDeviceDao = mock(VmDeviceDAO.class);
    when(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(Guid.Empty, VmDeviceType.DISK.getName(), VmDeviceType.DISK.getName())).thenReturn(vmDevices);
    doReturn(vmDeviceDao).when(command).getVmDeviceDao();
    doReturn(vmDeviceDao).when(vmRunHandler).getVmDeviceDAO();
}
#method_after
protected void initDAOMocks(final List<Disk> disks, final List<VmDevice> vmDevices) {
    final DiskDao diskDao = mock(DiskDao.class);
    when(diskDao.getAllForVm(Guid.Empty)).thenReturn(disks);
    doReturn(diskDao).when(command).getDiskDao();
    doReturn(diskDao).when(vmRunHandler).getDiskDao();
    final StorageDomainDAO storageDomainDAO = mock(StorageDomainDAO.class);
    when(storageDomainDAO.getAllForStoragePool(Guid.Empty)).thenReturn(new ArrayList<StorageDomain>());
    doReturn(storageDomainDAO).when(command).getStorageDomainDAO();
    doReturn(storageDomainDAO).when(vmRunHandler).getStorageDomainDAO();
    final VmDeviceDAO vmDeviceDao = mock(VmDeviceDAO.class);
    when(vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(Guid.Empty, VmDeviceType.DISK.getName(), VmDeviceType.DISK.getName())).thenReturn(vmDevices);
    doReturn(vmDeviceDao).when(command).getVmDeviceDao();
    doReturn(vmDeviceDao).when(vmRunHandler).getVmDeviceDAO();
}
#end_block

#method_before
private void clusterSelectedItemChanged() {
    setBricks(new ListModel());
    if (getCluster().getSelectedItem() != null) {
        final VDSGroup cluster = (VDSGroup) getCluster().getSelectedItem();
        AsyncDataProvider.isClusterHasAnyUpHost(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                // In case the result of previous call is returned after selecting some other cluster
                if (!((VDSGroup) getCluster().getSelectedItem()).getId().equals(cluster.getId())) {
                    return;
                }
                if ((Boolean) returnValue) {
                    getAddBricksCommand().setIsExecutionAllowed(true);
                    setMessage(null);
                } else {
                    getAddBricksCommand().setIsExecutionAllowed(false);
                    setMessage(ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg());
                }
            }
        }), cluster.getname());
    } else {
        getAddBricksCommand().setIsExecutionAllowed(false);
        setMessage(null);
    }
}
#method_after
private void clusterSelectedItemChanged() {
    setBricks(new ListModel());
    if (getCluster().getSelectedItem() != null) {
        final VDSGroup cluster = (VDSGroup) getCluster().getSelectedItem();
        AsyncDataProvider.isAnyHostUpInCluster(new AsyncQuery(this, new INewAsyncCallback() {

            @Override
            public void OnSuccess(Object model, Object returnValue) {
                // In case the result of previous call is returned after selecting some other cluster
                if (!((VDSGroup) getCluster().getSelectedItem()).getId().equals(cluster.getId())) {
                    return;
                }
                if ((Boolean) returnValue) {
                    getAddBricksCommand().setIsExecutionAllowed(true);
                    setMessage(null);
                } else {
                    getAddBricksCommand().setIsExecutionAllowed(false);
                    setMessage(ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg());
                }
            }
        }), cluster.getname());
    } else {
        getAddBricksCommand().setIsExecutionAllowed(false);
        setMessage(null);
    }
}
#end_block

#method_before
public static void GetIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
                for (storage_domains domain : storageDomains) {
                    if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getIsoParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#method_after
public static void GetIsoDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                for (StorageDomain domain : storageDomains) {
                    if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
                        return domain;
                    }
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getIsoParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getIsoParams, aQuery);
}
#end_block

#method_before
public static void GetExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
            for (storage_domains domain : storageDomains) {
                if (domain.getstorage_domain_type() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getExportParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#method_after
public static void GetExportDomainByDataCenterId(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
            for (StorageDomain domain : storageDomains) {
                if (domain.getstorage_domain_type() == StorageDomainType.ImportExport) {
                    return domain;
                }
            }
            return null;
        }
    };
    StoragePoolQueryParametersBase getExportParams = new StoragePoolQueryParametersBase(dataCenterId);
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, getExportParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_domains>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(templateId), aQuery);
}
#method_after
public static void GetStorageDomainListByTemplate(AsyncQuery aQuery, Guid templateId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new GetStorageDomainsByVmTemplateIdQueryParameters(templateId), aQuery);
}
#end_block

#method_before
public static void GetStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<storage_domains>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId), aQuery);
}
#method_after
public static void GetStorageDomainList(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new StoragePoolQueryParametersBase(dataCenterId), aQuery);
}
#end_block

#method_before
public static void GetStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (storage_domains) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(storageDomainId), aQuery);
}
#method_after
public static void GetStorageDomainById(AsyncQuery aQuery, Guid storageDomainId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (StorageDomain) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new StorageDomainQueryParametersBase(storageDomainId), aQuery);
}
#end_block

#method_before
public static void GetISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> allStorageDomains = (ArrayList<storage_domains>) source;
                ArrayList<storage_domains> isoStorageDomains = new ArrayList<storage_domains>();
                for (storage_domains storageDomain : allStorageDomains) {
                    if (storageDomain.getstorage_domain_type() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<storage_domains>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void GetISOStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> allStorageDomains = (ArrayList<StorageDomain>) source;
                ArrayList<StorageDomain> isoStorageDomains = new ArrayList<StorageDomain>();
                for (StorageDomain storageDomain : allStorageDomains) {
                    if (storageDomain.getstorage_domain_type() == StorageDomainType.ISO) {
                        isoStorageDomains.add(storageDomain);
                    }
                }
                return isoStorageDomains;
            }
            return new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : new ArrayList<storage_domains>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#method_after
public static void GetStorageDomainList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : new ArrayList<StorageDomain>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParams = new SearchParameters("Storage:", SearchType.StorageDomain);
    searchParams.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery);
}
#end_block

#method_before
public static void GetStorageDomainsByConnection(AsyncQuery aQuery, NGuid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId.getValue());
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#method_after
public static void GetStorageDomainsByConnection(AsyncQuery aQuery, NGuid storagePoolId, String connectionPath) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    GetStorageDomainsByConnectionParameters param = new GetStorageDomainsByConnectionParameters();
    param.setConnection(connectionPath);
    if (storagePoolId != null) {
        param.setStoragePoolId(storagePoolId.getValue());
    }
    Frontend.RunQuery(VdcQueryType.GetStorageDomainsByConnection, param, aQuery);
}
#end_block

#method_before
public static void GetExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<storage_domains>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, StorageType.NFS, domainType, path), aQuery);
}
#method_after
public static void GetExistingStorageDomainList(AsyncQuery aQuery, Guid hostId, StorageDomainType domainType, String path) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            return source != null ? (ArrayList<StorageDomain>) source : null;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetExistingStorageDomainList, new GetExistingStorageDomainListParameters(hostId, StorageType.NFS, domainType, path), aQuery);
}
#end_block

#method_before
public static void IsStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<storage_domains> storageDomains = (ArrayList<storage_domains>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#method_after
public static void IsStorageDomainNameUnique(AsyncQuery aQuery, String name) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<StorageDomain> storageDomains = (ArrayList<StorageDomain>) source;
                return storageDomains.isEmpty();
            }
            return source;
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new // $NON-NLS-1$
    SearchParameters(// $NON-NLS-1$
    "Storage: name=" + name, SearchType.StorageDomain), aQuery);
}
#end_block

#method_before
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
    "Host: cluster = " + clusterName + " and status = up", SearchType.VDS), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    GetUpHostListByCluster(aQuery, clusterName, null);
}
#end_block

#method_before
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((ArrayList<IVdcQueryable>) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    Frontend.RunQuery(VdcQueryType.Search, new SearchParameters(// $NON-NLS-1$
    "Host: cluster = " + clusterName + " and status = up", SearchType.VDS), // $NON-NLS-1$
    aQuery);
}
#method_after
public static void GetUpHostListByCluster(AsyncQuery aQuery, String clusterName, Integer maxCount) {
    SearchParameters searchParameters = // $NON-NLS-1$ //$NON-NLS-2$
    new SearchParameters("Host: cluster = " + clusterName + " and status = up", SearchType.VDS);
    if (maxCount != null) {
        searchParameters.setMaxCount(maxCount);
    }
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#end_block

#method_before
public static void GetPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<storage_domains>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#method_after
public static void GetPermittedStorageDomainsByStoragePoolId(AsyncQuery aQuery, Guid dataCenterId, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source == null) {
                return new java.util.ArrayList<StorageDomain>();
            }
            return source;
        }
    };
    GetPermittedStorageDomainsByStoragePoolIdParameters params = new GetPermittedStorageDomainsByStoragePoolIdParameters();
    params.setStoragePoolId(dataCenterId);
    params.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetPermittedStorageDomainsByStoragePoolId, params, aQuery);
}
#end_block

#method_before
public static Guid GetEntityGuid(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getId();
    } else if (entity instanceof storage_pool) {
        return ((storage_pool) entity).getId();
    } else if (entity instanceof VDSGroup) {
        return ((VDSGroup) entity).getId();
    } else if (entity instanceof VDS) {
        return ((VDS) entity).getId();
    } else if (entity instanceof storage_domains) {
        return ((storage_domains) entity).getId();
    } else if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getId();
    } else if (entity instanceof VmPool) {
        return ((VmPool) entity).getVmPoolId();
    } else if (entity instanceof DbUser) {
        return ((DbUser) entity).getuser_id();
    } else if (entity instanceof Quota) {
        return ((Quota) entity).getId();
    } else if (entity instanceof DiskImage) {
        return ((DiskImage) entity).getId();
    } else if (entity instanceof GlusterVolumeEntity) {
        return ((GlusterVolumeEntity) entity).getId();
    } else if (entity instanceof Network) {
        return ((Network) entity).getId();
    }
    return new Guid();
}
#method_after
public static Guid GetEntityGuid(Object entity) {
    if (entity instanceof VM) {
        return ((VM) entity).getId();
    } else if (entity instanceof storage_pool) {
        return ((storage_pool) entity).getId();
    } else if (entity instanceof VDSGroup) {
        return ((VDSGroup) entity).getId();
    } else if (entity instanceof VDS) {
        return ((VDS) entity).getId();
    } else if (entity instanceof StorageDomain) {
        return ((StorageDomain) entity).getId();
    } else if (entity instanceof VmTemplate) {
        return ((VmTemplate) entity).getId();
    } else if (entity instanceof VmPool) {
        return ((VmPool) entity).getVmPoolId();
    } else if (entity instanceof DbUser) {
        return ((DbUser) entity).getuser_id();
    } else if (entity instanceof Quota) {
        return ((Quota) entity).getId();
    } else if (entity instanceof DiskImage) {
        return ((DiskImage) entity).getId();
    } else if (entity instanceof GlusterVolumeEntity) {
        return ((GlusterVolumeEntity) entity).getId();
    } else if (entity instanceof Network) {
        return ((Network) entity).getId();
    }
    return new Guid();
}
#end_block

#method_before
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setVmtGuid(entity.getId());
    staticVm.setDomain(entity.getDomain());
    staticVm.setVdsGroupId(entity.getVdsGroupId());
    staticVm.setMemSizeMb(entity.getMemSizeMb());
    staticVm.setOs(entity.getOs());
    staticVm.setNiceLevel(entity.getNiceLevel());
    staticVm.setFailBack(entity.isFailBack());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setStateless(entity.isStateless());
    staticVm.setDeleteProtected(entity.isDeleteProtected());
    staticVm.setSmartcardEnabled(entity.isSmartcardEnabled());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setDefaultBootSequence(entity.getDefaultBootSequence());
    staticVm.setVmType(entity.getVmType());
    entity.setDefaultDisplayType(entity.getDefaultDisplayType());
    staticVm.setIsoPath(entity.getIsoPath());
    staticVm.setNumOfSockets(entity.getNumOfSockets());
    staticVm.setCpuPerSocket(entity.getCpuPerSocket());
    staticVm.setKernelUrl(entity.getKernelUrl());
    staticVm.setKernelParams(entity.getKernelParams());
    staticVm.setInitrdUrl(entity.getInitrdUrl());
    staticVm.setTimeZone(entity.getTimeZone());
    staticVm.setNumOfMonitors(entity.getNumOfMonitors());
    staticVm.setAllowConsoleReconnect(entity.isAllowConsoleReconnect());
    staticVm.setPriority(entity.getPriority());
    staticVm.setUsbPolicy(entity.getUsbPolicy());
    staticVm.setTunnelMigration(entity.getTunnelMigration());
    return staticVm;
}
#method_after
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setVmtGuid(entity.getId());
    staticVm.setDomain(entity.getDomain());
    staticVm.setVdsGroupId(entity.getVdsGroupId());
    staticVm.setMemSizeMb(entity.getMemSizeMb());
    staticVm.setOs(entity.getOs());
    staticVm.setNiceLevel(entity.getNiceLevel());
    staticVm.setFailBack(entity.isFailBack());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setStateless(entity.isStateless());
    staticVm.setDeleteProtected(entity.isDeleteProtected());
    staticVm.setSmartcardEnabled(entity.isSmartcardEnabled());
    staticVm.setAutoStartup(entity.isAutoStartup());
    staticVm.setDefaultBootSequence(entity.getDefaultBootSequence());
    staticVm.setVmType(entity.getVmType());
    entity.setDefaultDisplayType(entity.getDefaultDisplayType());
    staticVm.setIsoPath(entity.getIsoPath());
    staticVm.setNumOfSockets(entity.getNumOfSockets());
    staticVm.setCpuPerSocket(entity.getCpuPerSocket());
    staticVm.setKernelUrl(entity.getKernelUrl());
    staticVm.setKernelParams(entity.getKernelParams());
    staticVm.setInitrdUrl(entity.getInitrdUrl());
    staticVm.setTimeZone(entity.getTimeZone());
    staticVm.setNumOfMonitors(entity.getNumOfMonitors());
    staticVm.setAllowConsoleReconnect(entity.isAllowConsoleReconnect());
    staticVm.setPriority(entity.getPriority());
    staticVm.setUsbPolicy(entity.getUsbPolicy());
    staticVm.setTunnelMigration(entity.getTunnelMigration());
    staticVm.setVncKeyboardLayout(entity.getVncKeyboardLayout());
    return staticVm;
}
#end_block

#method_before
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setVmName(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setDescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setMemSizeMb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getMemSizeMb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setMemSizeMb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setVmtGuid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setVdsGroupId(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetMode()) {
            staticVm.setUseHostCpuFlags(CpuMode.fromValue(vm.getCpu().getMode()) == CpuMode.HOST_PASSTHROUGH);
        }
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setCpuPerSocket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setNumOfSockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setOs(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setKernelUrl(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setKernelParams(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setVmType(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setStateless(vm.isStateless());
    }
    if (vm.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(vm.isDeleteProtected());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setAutoStartup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setPriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setOrigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setDedicatedVmForVds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setDomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.setTimeZone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    if (vm.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(vm.isTunnelMigration());
    }
    return staticVm;
}
#method_after
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setVmName(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setDescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setMemSizeMb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getMemSizeMb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setMemSizeMb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setVmtGuid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setVdsGroupId(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetMode()) {
            staticVm.setUseHostCpuFlags(CpuMode.fromValue(vm.getCpu().getMode()) == CpuMode.HOST_PASSTHROUGH);
        }
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setCpuPerSocket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setNumOfSockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setOs(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setKernelUrl(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setKernelParams(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setVmType(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setStateless(vm.isStateless());
    }
    if (vm.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(vm.isDeleteProtected());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setAutoStartup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setPriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setOrigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
        if (vm.getDisplay().isSetKeyboardLayout()) {
            String layout = vm.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setDedicatedVmForVds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setDomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.setTimeZone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    if (vm.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(vm.isTunnelMigration());
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getVmName());
    model.setDescription(entity.getVmDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getVmOs() != null || entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getVmOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (getIsVmRunning(entity) && entity.getDynamicData() != null) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.getTimeZone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getVmName());
    model.setDescription(entity.getVmDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getVmOs() != null || entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getVmOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getDynamicData() != null && entity.getStatus().isRunningOrPaused()) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.getTimeZone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#end_block

#method_before
@Override
protected void verify(VM model, VM transform) {
    assertNotNull(transform);
    assertEquals(model.getName(), transform.getName());
    assertEquals(model.getId(), transform.getId());
    assertEquals(model.getDescription(), transform.getDescription());
    assertEquals(model.getType(), transform.getType());
    assertEquals(model.getOrigin(), transform.getOrigin());
    assertTrue(Math.abs(model.getMemory() - transform.getMemory()) <= (1024 * 1024));
    assertNotNull(transform.getTemplate());
    assertEquals(model.getTemplate().getId(), transform.getTemplate().getId());
    assertNotNull(transform.getCluster());
    assertNotNull(transform.getCpu());
    assertNotNull(transform.getCpu().getTopology());
    assertTrue(Math.abs(model.getCpu().getTopology().getCores() - transform.getCpu().getTopology().getCores()) < model.getCpu().getTopology().getSockets());
    assertEquals(model.getCpu().getTopology().getSockets(), transform.getCpu().getTopology().getSockets());
    assertNotNull(transform.getOs());
    assertTrue(transform.getOs().isSetBoot());
    assertEquals(model.getOs().getBoot().size(), transform.getOs().getBoot().size());
    for (int i = 0; i < model.getOs().getBoot().size(); i++) {
        assertEquals(model.getOs().getBoot().get(i).getDev(), transform.getOs().getBoot().get(i).getDev());
    }
    assertEquals(model.getOs().getKernel(), transform.getOs().getKernel());
    assertEquals(model.getOs().getInitrd(), transform.getOs().getInitrd());
    assertEquals(model.getOs().getCmdline(), transform.getOs().getCmdline());
    assertTrue(transform.isSetDisplay());
    assertEquals(model.isSetDisplay(), transform.isSetDisplay());
    assertEquals(model.getDisplay().getType(), transform.getDisplay().getType());
    assertEquals(model.getDisplay().getMonitors(), transform.getDisplay().getMonitors());
    assertEquals(model.getDisplay().isAllowOverride(), transform.getDisplay().isAllowOverride());
    assertEquals(model.getPlacementPolicy().getHost().getId(), transform.getPlacementPolicy().getHost().getId());
    assertTrue(Math.abs(model.getMemoryPolicy().getGuaranteed() - transform.getMemoryPolicy().getGuaranteed()) <= (1024 * 1024));
    assertEquals(model.getDomain().getName(), transform.getDomain().getName());
    assertEquals(model.getTimezone(), transform.getTimezone());
    assertEquals(model.getDisplay().isSmartcardEnabled(), transform.getDisplay().isSmartcardEnabled());
    assertEquals(model.getDisplay().getVncKeyboardLayout(), transform.getDisplay().getVncKeyboardLayout());
    assertEquals(model.isDeleteProtected(), transform.isDeleteProtected());
    assertEquals(model.isTunnelMigration(), transform.isTunnelMigration());
}
#method_after
@Override
protected void verify(VM model, VM transform) {
    assertNotNull(transform);
    assertEquals(model.getName(), transform.getName());
    assertEquals(model.getId(), transform.getId());
    assertEquals(model.getDescription(), transform.getDescription());
    assertEquals(model.getType(), transform.getType());
    assertEquals(model.getOrigin(), transform.getOrigin());
    assertTrue(Math.abs(model.getMemory() - transform.getMemory()) <= (1024 * 1024));
    assertNotNull(transform.getTemplate());
    assertEquals(model.getTemplate().getId(), transform.getTemplate().getId());
    assertNotNull(transform.getCluster());
    assertNotNull(transform.getCpu());
    assertNotNull(transform.getCpu().getTopology());
    assertTrue(Math.abs(model.getCpu().getTopology().getCores() - transform.getCpu().getTopology().getCores()) < model.getCpu().getTopology().getSockets());
    assertEquals(model.getCpu().getTopology().getSockets(), transform.getCpu().getTopology().getSockets());
    assertNotNull(transform.getOs());
    assertTrue(transform.getOs().isSetBoot());
    assertEquals(model.getOs().getBoot().size(), transform.getOs().getBoot().size());
    for (int i = 0; i < model.getOs().getBoot().size(); i++) {
        assertEquals(model.getOs().getBoot().get(i).getDev(), transform.getOs().getBoot().get(i).getDev());
    }
    assertEquals(model.getOs().getKernel(), transform.getOs().getKernel());
    assertEquals(model.getOs().getInitrd(), transform.getOs().getInitrd());
    assertEquals(model.getOs().getCmdline(), transform.getOs().getCmdline());
    assertTrue(transform.isSetDisplay());
    assertEquals(model.isSetDisplay(), transform.isSetDisplay());
    assertEquals(model.getDisplay().getType(), transform.getDisplay().getType());
    assertEquals(model.getDisplay().getMonitors(), transform.getDisplay().getMonitors());
    assertEquals(model.getDisplay().isAllowOverride(), transform.getDisplay().isAllowOverride());
    assertEquals(model.getPlacementPolicy().getHost().getId(), transform.getPlacementPolicy().getHost().getId());
    assertTrue(Math.abs(model.getMemoryPolicy().getGuaranteed() - transform.getMemoryPolicy().getGuaranteed()) <= (1024 * 1024));
    assertEquals(model.getDomain().getName(), transform.getDomain().getName());
    assertEquals(model.getTimezone(), transform.getTimezone());
    assertEquals(model.getDisplay().isSmartcardEnabled(), transform.getDisplay().isSmartcardEnabled());
    assertEquals(model.getDisplay().getKeyboardLayout(), transform.getDisplay().getKeyboardLayout());
    assertEquals(model.isDeleteProtected(), transform.isDeleteProtected());
    assertEquals(model.isTunnelMigration(), transform.isTunnelMigration());
}
#end_block

#method_before
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setVmName(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setDescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setMemSizeMb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getMemSizeMb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setMemSizeMb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setVmtGuid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setVdsGroupId(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetMode()) {
            staticVm.setUseHostCpuFlags(CpuMode.fromValue(vm.getCpu().getMode()) == CpuMode.HOST_PASSTHROUGH);
        }
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setCpuPerSocket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setNumOfSockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setOs(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setKernelUrl(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setKernelParams(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setVmType(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setStateless(vm.isStateless());
    }
    if (vm.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(vm.isDeleteProtected());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setAutoStartup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setPriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setOrigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
        if (vm.getDisplay().isSetVncKeyboardLayout()) {
            String layout = vm.getDisplay().getVncKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setDedicatedVmForVds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setDomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.setTimeZone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    if (vm.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(vm.isTunnelMigration());
    }
    return staticVm;
}
#method_after
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setVmName(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setDescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setMemSizeMb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getMemSizeMb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setMemSizeMb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setVmtGuid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setVdsGroupId(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetMode()) {
            staticVm.setUseHostCpuFlags(CpuMode.fromValue(vm.getCpu().getMode()) == CpuMode.HOST_PASSTHROUGH);
        }
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setCpuPerSocket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setNumOfSockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setOs(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setKernelUrl(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setKernelParams(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setVmType(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setStateless(vm.isStateless());
    }
    if (vm.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(vm.isDeleteProtected());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setAutoStartup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setPriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setOrigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
        if (vm.getDisplay().isSetKeyboardLayout()) {
            String layout = vm.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setDedicatedVmForVds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setDomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.setTimeZone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    if (vm.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(vm.isTunnelMigration());
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getVmName());
    model.setDescription(entity.getVmDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getVmOs() != null || entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getVmOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (getIsVmRunning(entity) && entity.getDynamicData() != null) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setVncKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.getTimeZone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getVmName());
    model.setDescription(entity.getVmDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    if (entity.getVmtGuid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getVmtGuid().toString());
    }
    if (entity.getStatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getStatus(), null)));
        if (entity.getStatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getVmOs() != null || entity.getBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getVmOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    if (entity.isUseHostCpuFlags()) {
        cpu.setMode(CpuMode.HOST_PASSTHROUGH.value());
    }
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (getIsVmRunning(entity) && entity.getDynamicData() != null) {
        if (model.getOs() != null && entity.getBootSequence() != null) {
            for (Boot boot : map(entity.getBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getRunOnVds() != null) {
            model.setHost(new Host());
            model.getHost().setId(entity.getRunOnVds().toString());
        }
        if (entity.getVmIp() != null && !entity.getVmIp().isEmpty()) {
            model.setGuestInfo(new GuestInfo());
            model.getGuestInfo().setIps(new IPs());
            for (String item : entity.getVmIp().split(" ")) {
                if (!item.equals("")) {
                    IP ip = new IP();
                    ip.setAddress(item.trim());
                    model.getGuestInfo().getIps().getIPs().add(ip);
                }
            }
        }
        if (entity.getLastStartTime() != null) {
            model.setStartTime(DateMapper.map(entity.getLastStartTime(), null));
        }
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getDisplayType(), null));
        model.getDisplay().setAddress(entity.getDisplayIp());
        Integer displayPort = entity.getDisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getDisplaySecurePort();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
    } else {
        if (model.getOs() != null) {
            for (Boot boot : map(entity.getDefaultBootSequence(), null)) {
                model.getOs().getBoot().add(boot);
            }
        }
        if (entity.getDefaultDisplayType() != null) {
            model.setDisplay(new Display());
            model.getDisplay().setType(map(entity.getDefaultDisplayType(), null));
        }
    }
    if (model.getDisplay() != null) {
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    model.setType(map(entity.getVmType(), null));
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    if (entity.getOrigin() != null) {
        model.setOrigin(map(entity.getOrigin(), null));
    }
    if (entity.getVmCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getVmCreationDate(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getDedicatedVmForVds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getDedicatedVmForVds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getVmDomain() != null && !entity.getVmDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getVmDomain());
        model.setDomain(domain);
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.getTimeZone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#end_block

#method_before
@Override
protected void verify(Template model, Template transform) {
    assertNotNull(transform);
    assertEquals(model.getName(), transform.getName());
    assertEquals(model.getId(), transform.getId());
    assertEquals(model.getDescription(), transform.getDescription());
    assertEquals(model.getType(), transform.getType());
    assertEquals(model.getOrigin(), transform.getOrigin());
    assertTrue(Math.abs(model.getMemory() - transform.getMemory()) <= (1024 * 1024));
    assertNotNull(transform.getCluster());
    assertEquals(model.getCluster().getId(), transform.getCluster().getId());
    assertNotNull(transform.getCpu());
    assertNotNull(transform.getCpu().getTopology());
    assertTrue(Math.abs(model.getCpu().getTopology().getCores() - transform.getCpu().getTopology().getCores()) < model.getCpu().getTopology().getSockets());
    assertEquals(model.getCpu().getTopology().getSockets(), transform.getCpu().getTopology().getSockets());
    assertNotNull(transform.isSetOs());
    assertTrue(transform.getOs().isSetBoot());
    assertEquals(model.getOs().getBoot().size(), transform.getOs().getBoot().size());
    for (int i = 0; i < model.getOs().getBoot().size(); i++) {
        assertEquals(model.getOs().getBoot().get(i).getDev(), transform.getOs().getBoot().get(i).getDev());
    }
    assertEquals(model.getOs().getKernel(), transform.getOs().getKernel());
    assertEquals(model.getOs().getInitrd(), transform.getOs().getInitrd());
    assertEquals(model.getOs().getCmdline(), transform.getOs().getCmdline());
    assertNotNull(model.getDisplay());
    assertEquals(model.getDisplay().getType(), transform.getDisplay().getType());
    assertEquals(model.getDisplay().getMonitors(), transform.getDisplay().getMonitors());
    assertEquals(model.getDisplay().isAllowOverride(), transform.getDisplay().isAllowOverride());
    assertEquals(model.getDisplay().getVncKeyboardLayout(), transform.getDisplay().getVncKeyboardLayout());
    assertEquals(model.getDomain().getName(), transform.getDomain().getName());
    assertEquals(model.getTimezone(), transform.getTimezone());
    assertEquals(model.getDisplay().isSmartcardEnabled(), transform.getDisplay().isSmartcardEnabled());
    assertEquals(model.isDeleteProtected(), transform.isDeleteProtected());
    assertEquals(model.isTunnelMigration(), transform.isTunnelMigration());
}
#method_after
@Override
protected void verify(Template model, Template transform) {
    assertNotNull(transform);
    assertEquals(model.getName(), transform.getName());
    assertEquals(model.getId(), transform.getId());
    assertEquals(model.getDescription(), transform.getDescription());
    assertEquals(model.getType(), transform.getType());
    assertEquals(model.getOrigin(), transform.getOrigin());
    assertTrue(Math.abs(model.getMemory() - transform.getMemory()) <= (1024 * 1024));
    assertNotNull(transform.getCluster());
    assertEquals(model.getCluster().getId(), transform.getCluster().getId());
    assertNotNull(transform.getCpu());
    assertNotNull(transform.getCpu().getTopology());
    assertTrue(Math.abs(model.getCpu().getTopology().getCores() - transform.getCpu().getTopology().getCores()) < model.getCpu().getTopology().getSockets());
    assertEquals(model.getCpu().getTopology().getSockets(), transform.getCpu().getTopology().getSockets());
    assertNotNull(transform.isSetOs());
    assertTrue(transform.getOs().isSetBoot());
    assertEquals(model.getOs().getBoot().size(), transform.getOs().getBoot().size());
    for (int i = 0; i < model.getOs().getBoot().size(); i++) {
        assertEquals(model.getOs().getBoot().get(i).getDev(), transform.getOs().getBoot().get(i).getDev());
    }
    assertEquals(model.getOs().getKernel(), transform.getOs().getKernel());
    assertEquals(model.getOs().getInitrd(), transform.getOs().getInitrd());
    assertEquals(model.getOs().getCmdline(), transform.getOs().getCmdline());
    assertNotNull(model.getDisplay());
    assertEquals(model.getDisplay().getType(), transform.getDisplay().getType());
    assertEquals(model.getDisplay().getMonitors(), transform.getDisplay().getMonitors());
    assertEquals(model.getDisplay().isAllowOverride(), transform.getDisplay().isAllowOverride());
    assertEquals(model.getDisplay().getKeyboardLayout(), transform.getDisplay().getKeyboardLayout());
    assertEquals(model.getDomain().getName(), transform.getDomain().getName());
    assertEquals(model.getTimezone(), transform.getTimezone());
    assertEquals(model.getDisplay().isSmartcardEnabled(), transform.getDisplay().isSmartcardEnabled());
    assertEquals(model.isDeleteProtected(), transform.isDeleteProtected());
    assertEquals(model.isTunnelMigration(), transform.isTunnelMigration());
}
#end_block

#method_before
@Mapping(from = Template.class, to = VmTemplate.class)
public static VmTemplate map(Template model, VmTemplate incoming) {
    VmTemplate entity = incoming != null ? incoming : new VmTemplate();
    if (model.isSetName()) {
        entity.setname(model.getName());
    }
    if (model.isSetId()) {
        entity.setId(new Guid(model.getId()));
    }
    if (model.isSetDescription()) {
        entity.setDescription(model.getDescription());
    }
    if (model.isSetCluster() && model.getCluster().getId() != null) {
        entity.setVdsGroupId(new Guid(model.getCluster().getId()));
    }
    if (model.isSetHighAvailability()) {
        if (model.getHighAvailability().isSetEnabled()) {
            entity.setAutoStartup(model.getHighAvailability().isEnabled());
        }
        if (model.getHighAvailability().isSetPriority()) {
            entity.setPriority(model.getHighAvailability().getPriority());
        }
    }
    if (model.isSetStateless()) {
        entity.setStateless(model.isStateless());
    }
    if (model.isSetDeleteProtected()) {
        entity.setDeleteProtected(model.isDeleteProtected());
    }
    if (model.isSetType()) {
        VmType vmType = VmType.fromValue(model.getType());
        if (vmType != null) {
            entity.setVmType(VmMapper.map(vmType, null));
        }
    }
    if (model.isSetOrigin()) {
        entity.setOrigin(VmMapper.map(model.getOrigin(), (OriginType) null));
    }
    if (model.isSetMemory()) {
        entity.setMemSizeMb((int) (model.getMemory() / BYTES_PER_MB));
    }
    if (model.isSetCpu() && model.getCpu().isSetTopology()) {
        if (model.getCpu().getTopology().getCores() != null) {
            entity.setCpuPerSocket(model.getCpu().getTopology().getCores());
        }
        if (model.getCpu().getTopology().getSockets() != null) {
            entity.setNumOfSockets(model.getCpu().getTopology().getSockets());
        }
    }
    if (model.isSetOs()) {
        if (model.getOs().isSetType()) {
            OsType osType = OsType.fromValue(model.getOs().getType());
            if (osType != null) {
                entity.setOs(VmMapper.map(osType, null));
            }
        }
        if (model.getOs().isSetBoot() && model.getOs().getBoot().size() > 0) {
            entity.setDefaultBootSequence(VmMapper.map(model.getOs().getBoot(), null));
        }
        if (model.getOs().isSetKernel()) {
            entity.setKernelUrl(model.getOs().getKernel());
        }
        if (model.getOs().isSetInitrd()) {
            entity.setInitrdUrl(model.getOs().getInitrd());
        }
        if (model.getOs().isSetCmdline()) {
            entity.setKernelParams(model.getOs().getCmdline());
        }
    }
    if (model.isSetDisplay()) {
        if (model.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(model.getDisplay().getType());
            if (displayType != null) {
                entity.setDefaultDisplayType(VmMapper.map(displayType, null));
            }
        }
        if (model.getDisplay().isSetMonitors()) {
            entity.setNumOfMonitors(model.getDisplay().getMonitors());
        }
        if (model.getDisplay().isSetAllowOverride()) {
            entity.setAllowConsoleReconnect(model.getDisplay().isAllowOverride());
        }
        if (model.getDisplay().isSetSmartcardEnabled()) {
            entity.setSmartcardEnabled(model.getDisplay().isSmartcardEnabled());
        }
        if (model.getDisplay().isSetVncKeyboardLayout()) {
            String layout = model.getDisplay().getVncKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            entity.setVncKeyboardLayout(layout);
        }
    }
    if (model.isSetDomain() && model.getDomain().isSetName()) {
        entity.setDomain(model.getDomain().getName());
    }
    if (model.isSetTimezone()) {
        entity.setTimeZone(TimeZoneMapping.getWindows(model.getTimezone()));
    }
    if (model.isSetTunnelMigration()) {
        entity.setTunnelMigration(model.isTunnelMigration());
    }
    return entity;
}
#method_after
@Mapping(from = Template.class, to = VmTemplate.class)
public static VmTemplate map(Template model, VmTemplate incoming) {
    VmTemplate entity = incoming != null ? incoming : new VmTemplate();
    if (model.isSetName()) {
        entity.setname(model.getName());
    }
    if (model.isSetId()) {
        entity.setId(new Guid(model.getId()));
    }
    if (model.isSetDescription()) {
        entity.setDescription(model.getDescription());
    }
    if (model.isSetCluster() && model.getCluster().getId() != null) {
        entity.setVdsGroupId(new Guid(model.getCluster().getId()));
    }
    if (model.isSetHighAvailability()) {
        if (model.getHighAvailability().isSetEnabled()) {
            entity.setAutoStartup(model.getHighAvailability().isEnabled());
        }
        if (model.getHighAvailability().isSetPriority()) {
            entity.setPriority(model.getHighAvailability().getPriority());
        }
    }
    if (model.isSetStateless()) {
        entity.setStateless(model.isStateless());
    }
    if (model.isSetDeleteProtected()) {
        entity.setDeleteProtected(model.isDeleteProtected());
    }
    if (model.isSetType()) {
        VmType vmType = VmType.fromValue(model.getType());
        if (vmType != null) {
            entity.setVmType(VmMapper.map(vmType, null));
        }
    }
    if (model.isSetOrigin()) {
        entity.setOrigin(VmMapper.map(model.getOrigin(), (OriginType) null));
    }
    if (model.isSetMemory()) {
        entity.setMemSizeMb((int) (model.getMemory() / BYTES_PER_MB));
    }
    if (model.isSetCpu() && model.getCpu().isSetTopology()) {
        if (model.getCpu().getTopology().getCores() != null) {
            entity.setCpuPerSocket(model.getCpu().getTopology().getCores());
        }
        if (model.getCpu().getTopology().getSockets() != null) {
            entity.setNumOfSockets(model.getCpu().getTopology().getSockets());
        }
    }
    if (model.isSetOs()) {
        if (model.getOs().isSetType()) {
            OsType osType = OsType.fromValue(model.getOs().getType());
            if (osType != null) {
                entity.setOs(VmMapper.map(osType, null));
            }
        }
        if (model.getOs().isSetBoot() && model.getOs().getBoot().size() > 0) {
            entity.setDefaultBootSequence(VmMapper.map(model.getOs().getBoot(), null));
        }
        if (model.getOs().isSetKernel()) {
            entity.setKernelUrl(model.getOs().getKernel());
        }
        if (model.getOs().isSetInitrd()) {
            entity.setInitrdUrl(model.getOs().getInitrd());
        }
        if (model.getOs().isSetCmdline()) {
            entity.setKernelParams(model.getOs().getCmdline());
        }
    }
    if (model.isSetDisplay()) {
        if (model.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(model.getDisplay().getType());
            if (displayType != null) {
                entity.setDefaultDisplayType(VmMapper.map(displayType, null));
            }
        }
        if (model.getDisplay().isSetMonitors()) {
            entity.setNumOfMonitors(model.getDisplay().getMonitors());
        }
        if (model.getDisplay().isSetAllowOverride()) {
            entity.setAllowConsoleReconnect(model.getDisplay().isAllowOverride());
        }
        if (model.getDisplay().isSetSmartcardEnabled()) {
            entity.setSmartcardEnabled(model.getDisplay().isSmartcardEnabled());
        }
        if (model.getDisplay().isSetKeyboardLayout()) {
            String layout = model.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            entity.setVncKeyboardLayout(layout);
        }
    }
    if (model.isSetDomain() && model.getDomain().isSetName()) {
        entity.setDomain(model.getDomain().getName());
    }
    if (model.isSetTimezone()) {
        entity.setTimeZone(TimeZoneMapping.getWindows(model.getTimezone()));
    }
    if (model.isSetTunnelMigration()) {
        entity.setTunnelMigration(model.isTunnelMigration());
    }
    return entity;
}
#end_block

#method_before
@Mapping(from = Template.class, to = VmStatic.class)
public static VmStatic map(Template model, VmStatic incoming) {
    VmStatic staticVm = incoming != null ? incoming : new VmStatic();
    if (model.isSetName()) {
        staticVm.setVmName(model.getName());
    }
    if (model.isSetId()) {
        staticVm.setId(new Guid(model.getId()));
    }
    if (model.isSetDescription()) {
        staticVm.setDescription(model.getDescription());
    }
    if (model.isSetCluster() && model.getCluster().getId() != null) {
        staticVm.setVdsGroupId(new Guid(model.getCluster().getId()));
    }
    if (model.isSetHighAvailability()) {
        if (model.getHighAvailability().isSetEnabled()) {
            staticVm.setAutoStartup(model.getHighAvailability().isEnabled());
        }
        if (model.getHighAvailability().isSetPriority()) {
            staticVm.setPriority(model.getHighAvailability().getPriority());
        }
    }
    if (model.isSetStateless()) {
        staticVm.setStateless(model.isStateless());
    }
    if (model.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(model.isDeleteProtected());
    }
    if (model.isSetType()) {
        VmType vmType = VmType.fromValue(model.getType());
        if (vmType != null) {
            staticVm.setVmType(VmMapper.map(vmType, null));
        }
    }
    if (model.isSetOrigin()) {
        staticVm.setOrigin(VmMapper.map(model.getOrigin(), (OriginType) null));
    }
    if (model.isSetMemory()) {
        staticVm.setMemSizeMb((int) (model.getMemory() / BYTES_PER_MB));
    }
    if (model.isSetCpu() && model.getCpu().isSetTopology()) {
        if (model.getCpu().getTopology().getCores() != null) {
            staticVm.setCpuPerSocket(model.getCpu().getTopology().getCores());
        }
        if (model.getCpu().getTopology().getSockets() != null) {
            staticVm.setNumOfSockets(model.getCpu().getTopology().getSockets());
        }
    }
    if (model.isSetOs()) {
        if (model.getOs().isSetType()) {
            OsType osType = OsType.fromValue(model.getOs().getType());
            if (osType != null) {
                staticVm.setOs(VmMapper.map(osType, null));
            }
        }
        if (model.getOs().isSetBoot() && model.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(VmMapper.map(model.getOs().getBoot(), null));
        }
        if (model.getOs().isSetKernel()) {
            staticVm.setKernelUrl(model.getOs().getKernel());
        }
        if (model.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(model.getOs().getInitrd());
        }
        if (model.getOs().isSetCmdline()) {
            staticVm.setKernelParams(model.getOs().getCmdline());
        }
    }
    if (model.isSetDisplay()) {
        if (model.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(model.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(VmMapper.map(displayType, null));
            }
        }
        if (model.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(model.getDisplay().getMonitors());
        }
        if (model.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(model.getDisplay().isAllowOverride());
        }
        if (model.getDisplay().isSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(model.getDisplay().isSmartcardEnabled());
        }
        if (model.getDisplay().isSetVncKeyboardLayout()) {
            String layout = model.getDisplay().getVncKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (model.isSetDomain() && model.getDomain().isSetName()) {
        staticVm.setDomain(model.getDomain().getName());
    }
    if (model.isSetTimezone()) {
        staticVm.setTimeZone(TimeZoneMapping.getWindows(model.getTimezone()));
    }
    if (model.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(model.isTunnelMigration());
    }
    return staticVm;
}
#method_after
@Mapping(from = Template.class, to = VmStatic.class)
public static VmStatic map(Template model, VmStatic incoming) {
    VmStatic staticVm = incoming != null ? incoming : new VmStatic();
    if (model.isSetName()) {
        staticVm.setVmName(model.getName());
    }
    if (model.isSetId()) {
        staticVm.setId(new Guid(model.getId()));
    }
    if (model.isSetDescription()) {
        staticVm.setDescription(model.getDescription());
    }
    if (model.isSetCluster() && model.getCluster().getId() != null) {
        staticVm.setVdsGroupId(new Guid(model.getCluster().getId()));
    }
    if (model.isSetHighAvailability()) {
        if (model.getHighAvailability().isSetEnabled()) {
            staticVm.setAutoStartup(model.getHighAvailability().isEnabled());
        }
        if (model.getHighAvailability().isSetPriority()) {
            staticVm.setPriority(model.getHighAvailability().getPriority());
        }
    }
    if (model.isSetStateless()) {
        staticVm.setStateless(model.isStateless());
    }
    if (model.isSetDeleteProtected()) {
        staticVm.setDeleteProtected(model.isDeleteProtected());
    }
    if (model.isSetType()) {
        VmType vmType = VmType.fromValue(model.getType());
        if (vmType != null) {
            staticVm.setVmType(VmMapper.map(vmType, null));
        }
    }
    if (model.isSetOrigin()) {
        staticVm.setOrigin(VmMapper.map(model.getOrigin(), (OriginType) null));
    }
    if (model.isSetMemory()) {
        staticVm.setMemSizeMb((int) (model.getMemory() / BYTES_PER_MB));
    }
    if (model.isSetCpu() && model.getCpu().isSetTopology()) {
        if (model.getCpu().getTopology().getCores() != null) {
            staticVm.setCpuPerSocket(model.getCpu().getTopology().getCores());
        }
        if (model.getCpu().getTopology().getSockets() != null) {
            staticVm.setNumOfSockets(model.getCpu().getTopology().getSockets());
        }
    }
    if (model.isSetOs()) {
        if (model.getOs().isSetType()) {
            OsType osType = OsType.fromValue(model.getOs().getType());
            if (osType != null) {
                staticVm.setOs(VmMapper.map(osType, null));
            }
        }
        if (model.getOs().isSetBoot() && model.getOs().getBoot().size() > 0) {
            staticVm.setDefaultBootSequence(VmMapper.map(model.getOs().getBoot(), null));
        }
        if (model.getOs().isSetKernel()) {
            staticVm.setKernelUrl(model.getOs().getKernel());
        }
        if (model.getOs().isSetInitrd()) {
            staticVm.setInitrdUrl(model.getOs().getInitrd());
        }
        if (model.getOs().isSetCmdline()) {
            staticVm.setKernelParams(model.getOs().getCmdline());
        }
    }
    if (model.isSetDisplay()) {
        if (model.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(model.getDisplay().getType());
            if (displayType != null) {
                staticVm.setDefaultDisplayType(VmMapper.map(displayType, null));
            }
        }
        if (model.getDisplay().isSetMonitors()) {
            staticVm.setNumOfMonitors(model.getDisplay().getMonitors());
        }
        if (model.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(model.getDisplay().isAllowOverride());
        }
        if (model.getDisplay().isSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(model.getDisplay().isSmartcardEnabled());
        }
        if (model.getDisplay().isSetKeyboardLayout()) {
            String layout = model.getDisplay().getKeyboardLayout();
            if (layout.isEmpty()) {
                // uniquely represent unset keyboard layout as null
                layout = null;
            }
            staticVm.setVncKeyboardLayout(layout);
        }
    }
    if (model.isSetDomain() && model.getDomain().isSetName()) {
        staticVm.setDomain(model.getDomain().getName());
    }
    if (model.isSetTimezone()) {
        staticVm.setTimeZone(TimeZoneMapping.getWindows(model.getTimezone()));
    }
    if (model.isSetTunnelMigration()) {
        staticVm.setTunnelMigration(model.isTunnelMigration());
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = VmTemplate.class, to = Template.class)
public static Template map(VmTemplate entity, Template incoming) {
    Template model = incoming != null ? incoming : new Template();
    model.setId(entity.getId().toString());
    model.setName(entity.getname());
    model.setDescription(entity.getDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    if (entity.getVmType() != null) {
        model.setType(VmMapper.map(entity.getVmType(), null));
    }
    if (entity.getOrigin() != null) {
        model.setOrigin(VmMapper.map(entity.getOrigin(), null));
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
    }
    if (entity.getOs() != null || entity.getDefaultBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getDefaultBootSequence() != null) {
            for (Boot boot : VmMapper.map(entity.getDefaultBootSequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    model.setCpu(new CPU());
    model.getCpu().setTopology(topology);
    if (entity.getDefaultDisplayType() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(VmMapper.map(entity.getDefaultDisplayType(), null));
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.isAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setVncKeyboardLayout(entity.getVncKeyboardLayout());
    }
    if (entity.getCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getCreationDate(), null));
    }
    if (entity.getDomain() != null && !entity.getDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getDomain());
        model.setDomain(domain);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    model.setTimezone(TimeZoneMapping.getJava(entity.getTimeZone()));
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#method_after
@Mapping(from = VmTemplate.class, to = Template.class)
public static Template map(VmTemplate entity, Template incoming) {
    Template model = incoming != null ? incoming : new Template();
    model.setId(entity.getId().toString());
    model.setName(entity.getname());
    model.setDescription(entity.getDescription());
    model.setMemory((long) entity.getMemSizeMb() * BYTES_PER_MB);
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.isAutoStartup());
    model.getHighAvailability().setPriority(entity.getPriority());
    model.setStateless(entity.isStateless());
    model.setDeleteProtected(entity.isDeleteProtected());
    if (entity.getVmType() != null) {
        model.setType(VmMapper.map(entity.getVmType(), null));
    }
    if (entity.getOrigin() != null) {
        model.setOrigin(VmMapper.map(entity.getOrigin(), null));
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
    }
    if (entity.getOs() != null || entity.getDefaultBootSequence() != null || entity.getKernelUrl() != null || entity.getInitrdUrl() != null || entity.getKernelParams() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getOs() != null) {
            OsType osType = VmMapper.map(entity.getOs(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getDefaultBootSequence() != null) {
            for (Boot boot : VmMapper.map(entity.getDefaultBootSequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getKernelUrl());
        os.setInitrd(entity.getInitrdUrl());
        os.setCmdline(entity.getKernelParams());
        model.setOs(os);
    }
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getNumOfSockets());
    topology.setCores(entity.getNumOfCpus() / entity.getNumOfSockets());
    model.setCpu(new CPU());
    model.getCpu().setTopology(topology);
    if (entity.getDefaultDisplayType() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(VmMapper.map(entity.getDefaultDisplayType(), null));
        model.getDisplay().setMonitors(entity.getNumOfMonitors());
        model.getDisplay().setAllowOverride(entity.isAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
        model.getDisplay().setKeyboardLayout(entity.getVncKeyboardLayout());
    }
    if (entity.getCreationDate() != null) {
        model.setCreationTime(DateMapper.map(entity.getCreationDate(), null));
    }
    if (entity.getDomain() != null && !entity.getDomain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getDomain());
        model.setDomain(domain);
    }
    if (entity.getUsbPolicy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getUsbPolicy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getUsbPolicy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    model.setTimezone(TimeZoneMapping.getJava(entity.getTimeZone()));
    model.setTunnelMigration(entity.getTunnelMigration());
    return model;
}
#end_block

#method_before
private MapSqlParameterSource getInsertOrUpdateParameters(VmTemplate template) {
    return getCustomMapSqlParameterSource().addValue("child_count", template.getchild_count()).addValue("creation_date", template.getCreationDate()).addValue("description", template.getDescription()).addValue("mem_size_mb", template.getMemSizeMb()).addValue("name", template.getname()).addValue("num_of_sockets", template.getNumOfSockets()).addValue("cpu_per_socket", template.getCpuPerSocket()).addValue("os", template.getOs()).addValue("vmt_guid", template.getId()).addValue("vds_group_id", template.getVdsGroupId()).addValue("domain", template.getDomain()).addValue("num_of_monitors", template.getNumOfMonitors()).addValue("allow_console_reconnect", template.isAllowConsoleReconnect()).addValue("status", template.getstatus()).addValue("usb_policy", template.getUsbPolicy()).addValue("time_zone", template.getTimeZone()).addValue("fail_back", template.isFailBack()).addValue("is_auto_suspend", template.isAutoSuspend()).addValue("vm_type", template.getVmType()).addValue("nice_level", template.getNiceLevel()).addValue("default_boot_sequence", template.getDefaultBootSequence()).addValue("default_display_type", template.getDefaultDisplayType()).addValue("priority", template.getPriority()).addValue("auto_startup", template.isAutoStartup()).addValue("is_stateless", template.isStateless()).addValue("is_smartcard_enabled", template.isSmartcardEnabled()).addValue("is_delete_protected", template.isDeleteProtected()).addValue("iso_path", template.getIsoPath()).addValue("origin", template.getOrigin()).addValue("initrd_url", template.getInitrdUrl()).addValue("kernel_url", template.getKernelUrl()).addValue("kernel_params", template.getKernelParams()).addValue("is_disabled", template.isDisabled()).addValue("quota_id", template.getQuotaId()).addValue("migration_support", template.getMigrationSupport().getValue()).addValue("dedicated_vm_for_vds", template.getDedicatedVmForVds()).addValue("vnc_keyboard_layout", template.getVncKeyboardLayout());
}
#method_after
private MapSqlParameterSource getInsertOrUpdateParameters(VmTemplate template) {
    return getCustomMapSqlParameterSource().addValue("child_count", template.getchild_count()).addValue("creation_date", template.getCreationDate()).addValue("description", template.getDescription()).addValue("mem_size_mb", template.getMemSizeMb()).addValue("name", template.getname()).addValue("num_of_sockets", template.getNumOfSockets()).addValue("cpu_per_socket", template.getCpuPerSocket()).addValue("os", template.getOs()).addValue("vmt_guid", template.getId()).addValue("vds_group_id", template.getVdsGroupId()).addValue("domain", template.getDomain()).addValue("num_of_monitors", template.getNumOfMonitors()).addValue("allow_console_reconnect", template.isAllowConsoleReconnect()).addValue("status", template.getstatus()).addValue("usb_policy", template.getUsbPolicy()).addValue("time_zone", template.getTimeZone()).addValue("fail_back", template.isFailBack()).addValue("is_auto_suspend", template.isAutoSuspend()).addValue("vm_type", template.getVmType()).addValue("nice_level", template.getNiceLevel()).addValue("default_boot_sequence", template.getDefaultBootSequence()).addValue("default_display_type", template.getDefaultDisplayType()).addValue("priority", template.getPriority()).addValue("auto_startup", template.isAutoStartup()).addValue("is_stateless", template.isStateless()).addValue("is_smartcard_enabled", template.isSmartcardEnabled()).addValue("is_delete_protected", template.isDeleteProtected()).addValue("iso_path", template.getIsoPath()).addValue("origin", template.getOrigin()).addValue("initrd_url", template.getInitrdUrl()).addValue("kernel_url", template.getKernelUrl()).addValue("kernel_params", template.getKernelParams()).addValue("is_disabled", template.isDisabled()).addValue("quota_id", template.getQuotaId()).addValue("migration_support", template.getMigrationSupport().getValue()).addValue("dedicated_vm_for_vds", template.getDedicatedVmForVds()).addValue("tunnel_migration", template.getTunnelMigration()).addValue("vnc_keyboard_layout", template.getVncKeyboardLayout());
}
#end_block

#method_before
@Override
public VmTemplate mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmTemplate entity = new VmTemplate();
    map(rs, entity);
    entity.setId(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setchild_count(rs.getInt("child_count"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setname(rs.getString("name"));
    entity.setOs(VmOsType.forValue(rs.getInt("os")));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setstatus(VmTemplateStatus.forValue(rs.getInt("status")));
    entity.setvds_group_name(rs.getString("vds_group_name"));
    entity.setstorage_pool_id(NGuid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setstorage_pool_name(rs.getString("storage_pool_name"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setDisabled(rs.getBoolean("is_disabled"));
    return entity;
}
#method_after
@Override
public VmTemplate mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmTemplate entity = new VmTemplate();
    map(rs, entity);
    entity.setId(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setchild_count(rs.getInt("child_count"));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setname(rs.getString("name"));
    entity.setOs(VmOsType.forValue(rs.getInt("os")));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setstatus(VmTemplateStatus.forValue(rs.getInt("status")));
    entity.setvds_group_name(rs.getString("vds_group_name"));
    entity.setstorage_pool_id(NGuid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setstorage_pool_name(rs.getString("storage_pool_name"));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setDisabled(rs.getBoolean("is_disabled"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    return entity;
}
#end_block

#method_before
public static void Init() {
    mUpdateVmTemplate = new ObjectIdentityChecker(VmTemplateHandler.class);
    BlankVmTemplateId = new Guid("00000000-0000-0000-0000-000000000000");
    mUpdateVmTemplate.AddPermittedFields(new String[] { "name", "description", "domain", "os", "osType", "autoSuspend", "interfaces", "memSizeMb", "numOfSockets", "cpuPerSocket", "vdsGroupId", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "timeZone", "diskMap", "defaultBootSequence", "disabled", "isoPath", "diskImageMap", "defaultDisplayType", "priority", "autoStartup", "stateless", "initrdUrl", "kernelUrl", "kernelParams", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicatedVmForVds", "smartcardEnabled", "dbGeneration", "deleteProtected", "quotaDefault", "vncKeyboardLayout" });
}
#method_after
public static void Init() {
    mUpdateVmTemplate = new ObjectIdentityChecker(VmTemplateHandler.class);
    BlankVmTemplateId = new Guid("00000000-0000-0000-0000-000000000000");
    mUpdateVmTemplate.AddPermittedFields(new String[] { "name", "description", "domain", "os", "osType", "autoSuspend", "interfaces", "memSizeMb", "numOfSockets", "cpuPerSocket", "vdsGroupId", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "timeZone", "diskMap", "defaultBootSequence", "disabled", "isoPath", "diskImageMap", "defaultDisplayType", "priority", "autoStartup", "stateless", "initrdUrl", "kernelUrl", "kernelParams", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicatedVmForVds", "smartcardEnabled", "dbGeneration", "deleteProtected", "quotaDefault", "tunnelMigration", "vncKeyboardLayout" });
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (autoStartup ? 1231 : 1237);
    result = prime * result + (autosuspend ? 1231 : 1237);
    result = prime * result + cpusPerSocket;
    result = prime * result + ((creationDate == null) ? 0 : creationDate.hashCode());
    result = prime * result + ((defaultBootSequence == null) ? 0 : defaultBootSequence.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + (failBack ? 1231 : 1237);
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((initrdUrl == null) ? 0 : initrdUrl.hashCode());
    result = prime * result + ((isoPath == null) ? 0 : isoPath.hashCode());
    result = prime * result + ((kernelParams == null) ? 0 : kernelParams.hashCode());
    result = prime * result + ((kernelUrl == null) ? 0 : kernelUrl.hashCode());
    result = prime * result + ((mOs == null) ? 0 : mOs.hashCode());
    result = prime * result + memSizeMB;
    result = prime * result + niceLevel;
    result = prime * result + numOfSockets;
    result = prime * result + numOfMonitors;
    result = prime * result + ((origin == null) ? 0 : origin.hashCode());
    result = prime * result + priority;
    result = prime * result + (stateless ? 1231 : 1237);
    result = prime * result + (smartcardEnabled ? 1231 : 1237);
    result = prime * result + ((timezone == null) ? 0 : timezone.hashCode());
    result = prime * result + ((usbPolicy == null) ? 0 : usbPolicy.hashCode());
    result = prime * result + ((vdsGroupId == null) ? 0 : vdsGroupId.hashCode());
    result = prime * result + ((vmType == null) ? 0 : vmType.hashCode());
    result = prime * result + ((quotaId == null) ? 0 : quotaId.hashCode());
    result = prime * result + (allowConsoleReconnect ? 1231 : 1237);
    result = prime * result + ((migrationSupport == null) ? 0 : migrationSupport.hashCode());
    result = prime * result + ((dedicatedVmForVds == null) ? 0 : dedicatedVmForVds.hashCode());
    result = prime * result + ((vncKeyboardLayout == null) ? 0 : vncKeyboardLayout.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (autoStartup ? 1231 : 1237);
    result = prime * result + (autosuspend ? 1231 : 1237);
    result = prime * result + cpusPerSocket;
    result = prime * result + ((creationDate == null) ? 0 : creationDate.hashCode());
    result = prime * result + ((defaultBootSequence == null) ? 0 : defaultBootSequence.hashCode());
    result = prime * result + ((description == null) ? 0 : description.hashCode());
    result = prime * result + ((domain == null) ? 0 : domain.hashCode());
    result = prime * result + (failBack ? 1231 : 1237);
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((initrdUrl == null) ? 0 : initrdUrl.hashCode());
    result = prime * result + ((isoPath == null) ? 0 : isoPath.hashCode());
    result = prime * result + ((kernelParams == null) ? 0 : kernelParams.hashCode());
    result = prime * result + ((kernelUrl == null) ? 0 : kernelUrl.hashCode());
    result = prime * result + ((mOs == null) ? 0 : mOs.hashCode());
    result = prime * result + memSizeMB;
    result = prime * result + niceLevel;
    result = prime * result + numOfSockets;
    result = prime * result + numOfMonitors;
    result = prime * result + ((origin == null) ? 0 : origin.hashCode());
    result = prime * result + priority;
    result = prime * result + (stateless ? 1231 : 1237);
    result = prime * result + (smartcardEnabled ? 1231 : 1237);
    result = prime * result + ((timezone == null) ? 0 : timezone.hashCode());
    result = prime * result + ((usbPolicy == null) ? 0 : usbPolicy.hashCode());
    result = prime * result + ((vdsGroupId == null) ? 0 : vdsGroupId.hashCode());
    result = prime * result + ((vmType == null) ? 0 : vmType.hashCode());
    result = prime * result + ((quotaId == null) ? 0 : quotaId.hashCode());
    result = prime * result + (allowConsoleReconnect ? 1231 : 1237);
    result = prime * result + ((migrationSupport == null) ? 0 : migrationSupport.hashCode());
    result = prime * result + ((dedicatedVmForVds == null) ? 0 : dedicatedVmForVds.hashCode());
    result = prime * result + ((tunnelMigration == null) ? 0 : tunnelMigration.hashCode());
    result = prime * result + ((vncKeyboardLayout == null) ? 0 : vncKeyboardLayout.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof VmBase)) {
        return false;
    }
    VmBase other = (VmBase) obj;
    if (autoStartup != other.autoStartup) {
        return false;
    }
    if (autosuspend != other.autosuspend) {
        return false;
    }
    if (cpusPerSocket != other.cpusPerSocket) {
        return false;
    }
    if (creationDate == null) {
        if (other.creationDate != null) {
            return false;
        }
    } else if (!creationDate.equals(other.creationDate)) {
        return false;
    }
    if (defaultBootSequence != other.defaultBootSequence) {
        return false;
    }
    if (description == null) {
        if (other.description != null) {
            return false;
        }
    } else if (!description.equals(other.description)) {
        return false;
    }
    if (domain == null) {
        if (other.domain != null) {
            return false;
        }
    } else if (!domain.equals(other.domain)) {
        return false;
    }
    if (failBack != other.failBack) {
        return false;
    }
    if (id == null) {
        if (other.id != null) {
            return false;
        }
    } else if (!id.equals(other.id)) {
        return false;
    }
    if (initrdUrl == null) {
        if (other.initrdUrl != null) {
            return false;
        }
    } else if (!initrdUrl.equals(other.initrdUrl)) {
        return false;
    }
    if (isoPath == null) {
        if (other.isoPath != null) {
            return false;
        }
    } else if (!isoPath.equals(other.isoPath)) {
        return false;
    }
    if (kernelParams == null) {
        if (other.kernelParams != null) {
            return false;
        }
    } else if (!kernelParams.equals(other.kernelParams)) {
        return false;
    }
    if (kernelUrl == null) {
        if (other.kernelUrl != null) {
            return false;
        }
    } else if (!kernelUrl.equals(other.kernelUrl)) {
        return false;
    }
    if (mOs != other.mOs) {
        return false;
    }
    if (memSizeMB != other.memSizeMB) {
        return false;
    }
    if (niceLevel != other.niceLevel) {
        return false;
    }
    if (numOfSockets != other.numOfSockets) {
        return false;
    }
    if (numOfMonitors != other.numOfMonitors) {
        return false;
    }
    if (origin != other.origin) {
        return false;
    }
    if (priority != other.priority) {
        return false;
    }
    if (stateless != other.stateless) {
        return false;
    }
    if (smartcardEnabled != other.smartcardEnabled) {
        return false;
    }
    if (deleteProtected != other.deleteProtected) {
        return false;
    }
    if (timezone == null) {
        if (other.timezone != null) {
            return false;
        }
    } else if (!timezone.equals(other.timezone)) {
        return false;
    }
    if (usbPolicy != other.usbPolicy) {
        return false;
    }
    if (vdsGroupId == null) {
        if (other.vdsGroupId != null) {
            return false;
        }
    } else if (!vdsGroupId.equals(other.vdsGroupId)) {
        return false;
    }
    if (vmType != other.vmType) {
        return false;
    }
    if (quotaId == null) {
        if (other.quotaId != null)
            return false;
    } else if (!quotaId.equals(other.quotaId))
        return false;
    if (allowConsoleReconnect != other.allowConsoleReconnect) {
        return false;
    }
    if (dedicatedVmForVds == null) {
        if (other.dedicatedVmForVds != null) {
            return false;
        }
    } else {
        if (!dedicatedVmForVds.equals(other.dedicatedVmForVds)) {
            return false;
        }
    }
    if (migrationSupport != other.migrationSupport) {
        return false;
    }
    if (vncKeyboardLayout == null) {
        if (other.vncKeyboardLayout != null) {
            return false;
        }
    } else if (!vncKeyboardLayout.equals(other.vncKeyboardLayout)) {
        return false;
    }
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof VmBase)) {
        return false;
    }
    VmBase other = (VmBase) obj;
    if (autoStartup != other.autoStartup) {
        return false;
    }
    if (autosuspend != other.autosuspend) {
        return false;
    }
    if (cpusPerSocket != other.cpusPerSocket) {
        return false;
    }
    if (creationDate == null) {
        if (other.creationDate != null) {
            return false;
        }
    } else if (!creationDate.equals(other.creationDate)) {
        return false;
    }
    if (defaultBootSequence != other.defaultBootSequence) {
        return false;
    }
    if (description == null) {
        if (other.description != null) {
            return false;
        }
    } else if (!description.equals(other.description)) {
        return false;
    }
    if (domain == null) {
        if (other.domain != null) {
            return false;
        }
    } else if (!domain.equals(other.domain)) {
        return false;
    }
    if (failBack != other.failBack) {
        return false;
    }
    if (id == null) {
        if (other.id != null) {
            return false;
        }
    } else if (!id.equals(other.id)) {
        return false;
    }
    if (initrdUrl == null) {
        if (other.initrdUrl != null) {
            return false;
        }
    } else if (!initrdUrl.equals(other.initrdUrl)) {
        return false;
    }
    if (isoPath == null) {
        if (other.isoPath != null) {
            return false;
        }
    } else if (!isoPath.equals(other.isoPath)) {
        return false;
    }
    if (kernelParams == null) {
        if (other.kernelParams != null) {
            return false;
        }
    } else if (!kernelParams.equals(other.kernelParams)) {
        return false;
    }
    if (kernelUrl == null) {
        if (other.kernelUrl != null) {
            return false;
        }
    } else if (!kernelUrl.equals(other.kernelUrl)) {
        return false;
    }
    if (mOs != other.mOs) {
        return false;
    }
    if (memSizeMB != other.memSizeMB) {
        return false;
    }
    if (niceLevel != other.niceLevel) {
        return false;
    }
    if (numOfSockets != other.numOfSockets) {
        return false;
    }
    if (numOfMonitors != other.numOfMonitors) {
        return false;
    }
    if (origin != other.origin) {
        return false;
    }
    if (priority != other.priority) {
        return false;
    }
    if (stateless != other.stateless) {
        return false;
    }
    if (smartcardEnabled != other.smartcardEnabled) {
        return false;
    }
    if (deleteProtected != other.deleteProtected) {
        return false;
    }
    if (timezone == null) {
        if (other.timezone != null) {
            return false;
        }
    } else if (!timezone.equals(other.timezone)) {
        return false;
    }
    if (usbPolicy != other.usbPolicy) {
        return false;
    }
    if (vdsGroupId == null) {
        if (other.vdsGroupId != null) {
            return false;
        }
    } else if (!vdsGroupId.equals(other.vdsGroupId)) {
        return false;
    }
    if (vmType != other.vmType) {
        return false;
    }
    if (quotaId == null) {
        if (other.quotaId != null)
            return false;
    } else if (!quotaId.equals(other.quotaId))
        return false;
    if (allowConsoleReconnect != other.allowConsoleReconnect) {
        return false;
    }
    if (dedicatedVmForVds == null) {
        if (other.dedicatedVmForVds != null) {
            return false;
        }
    } else {
        if (!dedicatedVmForVds.equals(other.dedicatedVmForVds)) {
            return false;
        }
    }
    if (migrationSupport != other.migrationSupport) {
        return false;
    }
    if (tunnelMigration == null) {
        if (other.tunnelMigration != null) {
            return false;
        }
    } else if (!tunnelMigration.equals(other.tunnelMigration)) {
        return false;
    }
    if (vncKeyboardLayout == null) {
        if (other.vncKeyboardLayout != null) {
            return false;
        }
    } else if (!vncKeyboardLayout.equals(other.vncKeyboardLayout)) {
        return false;
    }
    return true;
}
#end_block

#method_before
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vmName", "description", "domain", "os", "osType", "creationDate", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "autoSuspend", "autoStartup", "dedicatedVmForVds", "defaultDisplayType", "priority", "defaultBootSequence", "initrdUrl", "kernelUrl", "kernelParams", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled", "smartcardEnabled", "deleteProtected", "dbGeneration", // images list is relational entity - ignore value changes
    "images", // interfaces is relational entity - ignore value changes
    "interfaces", "useHostCpuFlags", "quotaDefault", "vncKeyboardLayout" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum<?>[] { VMStatus.Down }), Arrays.asList(new String[] { "vdsGroupId", "timeZone", "stateless", "niceLevel", "memSizeMb", "numOfSockets", "cpuPerSocket", "isoPath", "userDefinedProperties", "predefinedProperties", "customProperties" }));
}
#method_after
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vmName", "description", "domain", "os", "osType", "creationDate", "allowConsoleReconnect", "usbPolicy", "autoSuspend", "autoStartup", "dedicatedVmForVds", "priority", "defaultBootSequence", "initrdUrl", "kernelUrl", "kernelParams", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled", "smartcardEnabled", "deleteProtected", "dbGeneration", // images list is relational entity - ignore value changes
    "images", // interfaces is relational entity - ignore value changes
    "interfaces", "useHostCpuFlags", "quotaDefault", "tunnelMigration" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum<?>[] { VMStatus.Down }), Arrays.asList(new String[] { "vdsGroupId", "timeZone", "stateless", "niceLevel", "memSizeMb", "numOfSockets", "cpuPerSocket", "isoPath", "userDefinedProperties", "predefinedProperties", "customProperties", "defaultDisplayType", "numOfMonitors", "vncKeyboardLayout" }));
}
#end_block

#method_before
private MapSqlParameterSource getFullParameterSource(VmStatic vm) {
    return getIdParamterSource(vm.getId()).addValue("description", vm.getDescription()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOs()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_name", vm.getVmName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("domain", vm.getDomain()).addValue("creation_date", vm.getCreationDate()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("is_initialized", vm.isInitialized()).addValue("is_auto_suspend", vm.isAutoSuspend()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.isAllowConsoleReconnect()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout());
}
#method_after
private MapSqlParameterSource getFullParameterSource(VmStatic vm) {
    return getIdParamterSource(vm.getId()).addValue("description", vm.getDescription()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOs()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_name", vm.getVmName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("domain", vm.getDomain()).addValue("creation_date", vm.getCreationDate()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("is_initialized", vm.isInitialized()).addValue("is_auto_suspend", vm.isAutoSuspend()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.isAllowConsoleReconnect()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("tunnel_migration", vm.getTunnelMigration()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout());
}
#end_block

#method_before
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setVmName(rs.getString("vm_name"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    return entity;
}
#method_after
@Override
public VmStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    final VmStatic entity = new VmStatic();
    map(rs, entity);
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setMemSizeMb(rs.getInt("mem_size_mb"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setVmName(rs.getString("vm_name"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setDomain(rs.getString("domain"));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    return entity;
}
#end_block

#method_before
protected final void map(final ResultSet rs, final T entity) throws SQLException {
    entity.setOs(VmOsType.forValue(rs.getInt("os")));
    entity.setDescription(rs.getString("description"));
    entity.setCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("creation_date")));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setAutoSuspend(rs.getBoolean("is_auto_suspend"));
    entity.setPriority(rs.getInt("priority"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
}
#method_after
protected final void map(final ResultSet rs, final T entity) throws SQLException {
    entity.setOs(VmOsType.forValue(rs.getInt("os")));
    entity.setDescription(rs.getString("description"));
    entity.setCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("creation_date")));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setAutoSuspend(rs.getBoolean("is_auto_suspend"));
    entity.setPriority(rs.getInt("priority"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
}
#end_block

#method_before
@Override
public void save(VM vm) {
    getCallsHandler().executeModification("InsertVm", getCustomMapSqlParameterSource().addValue("description", vm.getDescription()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOs()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getVmName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect()).addValue("is_initialized", vm.isInitialized()).addValue("is_auto_suspend", vm.isAutoSuspend()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("guest_agent_nics_hash", vm.getGuestAgentNicsHash()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout()));
}
#method_after
@Override
public void save(VM vm) {
    getCallsHandler().executeModification("InsertVm", getCustomMapSqlParameterSource().addValue("description", vm.getDescription()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOs()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getVmName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect()).addValue("is_initialized", vm.isInitialized()).addValue("is_auto_suspend", vm.isAutoSuspend()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("guest_agent_nics_hash", vm.getGuestAgentNicsHash()).addValue("tunnel_migration", vm.getTunnelMigration()).addValue("vnc_keyboard_layout", vm.getVncKeyboardLayout()));
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setVmName(rs.getString("vm_name"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setVmOs(VmOsType.forValue(rs.getInt("vm_os")));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOs(VmOsType.forValue(rs.getInt("vmt_os")));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
    entity.setMigratingToVds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(NGuid.createGuidFromString(rs.getString("vm_pool_id")));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setAutoSuspend(rs.getBoolean("is_auto_suspend"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(Guid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setSelectionAlgorithm(VdsSelectionAlgorithm.forValue(rs.getInt("selection_algorithm")));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setVmName(rs.getString("vm_name"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setVmOs(VmOsType.forValue(rs.getInt("vm_os")));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOs(VmOsType.forValue(rs.getInt("vmt_os")));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setDbGeneration(rs.getLong("db_generation"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
    entity.setMigratingToVds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(NGuid.createGuidFromString(rs.getString("vm_pool_id")));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setAutoSuspend(rs.getBoolean("is_auto_suspend"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(Guid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setSelectionAlgorithm(VdsSelectionAlgorithm.forValue(rs.getInt("selection_algorithm")));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    entity.setTunnelMigration((Boolean) rs.getObject("tunnel_migration"));
    entity.setVncKeyboardLayout(rs.getString("vnc_keyboard_layout"));
    return entity;
}
#end_block

#method_before
public void setname(String value) {
    if (!StringHelper.EqOp(this.name, value)) {
        this.name = value;
    }
}
#method_after
public void setname(String value) {
    this.name = value;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validateVmNotDuringSnapshot()) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getstorage_ids().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getstorage_ids().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setstorage_ids(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, storage_domains> storageDomains = new HashMap<Guid, storage_domains>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getstatus() == null || storage.getstatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getstorage_domain_type() == StorageDomainType.ImportExport || storage.getstorage_domain_type() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<storage_domains, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
        if (!StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getMemSizeMb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getPriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validateVmNotDuringSnapshot()) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getstorage_ids().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getstorage_ids().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setstorage_ids(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    if (!validate(new StoragePoolValidator(getStoragePool()).isUp())) {
        return false;
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, storage_domains> storageDomains = new HashMap<Guid, storage_domains>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getstatus() == null || storage.getstatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getstorage_domain_type() == StorageDomainType.ImportExport || storage.getstorage_domain_type() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<storage_domains, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
        if (!doesStorageDomainhaveSpaceForRequest(entry.getKey(), entry.getValue())) {
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
protected void AddVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), (VmTemplateStatus.Locked.getValue()), (getParameters().getMasterVm().getUsbPolicy().getValue()), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().isAutoSuspend(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getVncKeyboardLayout()));
    getVmTemplate().setAutoStartup(getParameters().getMasterVm().isAutoStartup());
    getVmTemplate().setPriority(getParameters().getMasterVm().getPriority());
    getVmTemplate().setDefaultDisplayType(getParameters().getMasterVm().getDefaultDisplayType());
    getVmTemplate().setInitrdUrl(getParameters().getMasterVm().getInitrdUrl());
    getVmTemplate().setKernelUrl(getParameters().getMasterVm().getKernelUrl());
    getVmTemplate().setKernelParams(getParameters().getMasterVm().getKernelParams());
    getVmTemplate().setStateless(getParameters().getMasterVm().isStateless());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setDedicatedVmForVds(getParameters().getMasterVm().getDedicatedVmForVds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#method_after
protected void AddVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getMemSizeMb(), getVmTemplateName(), getParameters().getMasterVm().getNumOfSockets(), getParameters().getMasterVm().getCpuPerSocket(), getParameters().getMasterVm().getOs(), getParameters().getMasterVm().getVdsGroupId(), getVmTemplateId(), getParameters().getMasterVm().getDomain(), getParameters().getMasterVm().getNumOfMonitors(), (VmTemplateStatus.Locked.getValue()), (getParameters().getMasterVm().getUsbPolicy().getValue()), getParameters().getMasterVm().getTimeZone(), getParameters().getMasterVm().isAutoSuspend(), getParameters().getMasterVm().getNiceLevel(), getParameters().getMasterVm().isFailBack(), getParameters().getMasterVm().getDefaultBootSequence(), getParameters().getMasterVm().getVmType(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected(), getParameters().getMasterVm().getTunnelMigration(), getParameters().getMasterVm().getVncKeyboardLayout()));
    getVmTemplate().setAutoStartup(getParameters().getMasterVm().isAutoStartup());
    getVmTemplate().setPriority(getParameters().getMasterVm().getPriority());
    getVmTemplate().setDefaultDisplayType(getParameters().getMasterVm().getDefaultDisplayType());
    getVmTemplate().setInitrdUrl(getParameters().getMasterVm().getInitrdUrl());
    getVmTemplate().setKernelUrl(getParameters().getMasterVm().getKernelUrl());
    getVmTemplate().setKernelParams(getParameters().getMasterVm().getKernelParams());
    getVmTemplate().setStateless(getParameters().getMasterVm().isStateless());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setDedicatedVmForVds(getParameters().getMasterVm().getDedicatedVmForVds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#end_block

#method_before
@Override
protected void endWithFailure() {
    // We evaluate 'VmTemplate' so it won't be null in the last 'if'
    // statement.
    // (a template without images doesn't exist in the 'vm_template_view').
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p);
    }
    // if template exist in db remove it
    if (getVmTemplate() != null) {
        DbFacade.getInstance().getVmTemplateDao().remove(getVmTemplateId());
        RemoveNetwork();
    }
    if (!getVmId().equals(Guid.Empty) && getVm() != null) {
        VmHandler.UnLockVm(getVm());
    }
    setSucceeded(true);
}
#method_after
@Override
protected void endWithFailure() {
    // We evaluate 'VmTemplate' so it won't be null in the last 'if'
    // statement.
    // (a template without images doesn't exist in the 'vm_template_view').
    setVmTemplateId(getParameters().getVmTemplateId());
    setVmId(getVmIdFromImageParameters());
    for (VdcActionParametersBase p : getParameters().getImagesParameters()) {
        p.setTaskGroupSuccess(false);
        Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p);
    }
    // if template exist in db remove it
    if (getVmTemplate() != null) {
        DbFacade.getInstance().getVmTemplateDao().remove(getVmTemplateId());
        RemoveNetwork();
    }
    if (!getVmId().equals(Guid.Empty) && getVm() != null) {
        VmHandler.UnLockVm(getVm());
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
public Host update(Host incoming) {
    validateEnums(Host.class, incoming);
    QueryIdResolver<Guid> hostResolver = new QueryIdResolver<Guid>(VdcQueryType.GetVdsByVdsId, GetVdsByVdsIdParameters.class);
    VDS entity = getEntity(hostResolver, true);
    if (incoming.isSetCluster() && (incoming.getCluster().isSetId() || incoming.getCluster().isSetName())) {
        Guid clusterId = lookupClusterId(incoming);
        performAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(clusterId, guid));
    }
    return performUpdate(incoming, entity, map(entity), hostResolver, VdcActionType.UpdateVds, new UpdateParametersProvider());
}
#method_after
@Override
public Host update(Host incoming) {
    validateEnums(Host.class, incoming);
    QueryIdResolver<Guid> hostResolver = new QueryIdResolver<Guid>(VdcQueryType.GetVdsByVdsId, GetVdsByVdsIdParameters.class);
    VDS entity = getEntity(hostResolver, true);
    if (incoming.isSetCluster() && (incoming.getCluster().isSetId() || incoming.getCluster().isSetName())) {
        Guid clusterId = lookupClusterId(incoming);
        if (!clusterId.equals(entity.getvds_group_id())) {
            performAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(clusterId, guid));
        }
    }
    return performUpdate(incoming, entity, map(entity), hostResolver, VdcActionType.UpdateVds, new UpdateParametersProvider());
}
#end_block

#method_before
@Test
public void testPreview() {
    setUriInfo(setUpBasicUriExpectations());
    setUpTryBackExpectations();
    control.replay();
    resource.preview(new Action());
}
#method_after
@Test
public void testPreview() throws Exception {
    setUriInfo(setUpActionExpectations(VdcActionType.TryBackToAllSnapshotsOfVm, TryBackToAllSnapshotsOfVmParameters.class, new String[] { "VmId", "DstSnapshotId" }, new Object[] { VM_ID, SNAPSHOT_ID }, asList(GUIDS[1]), asList(new AsyncTaskStatus(AsyncTaskStatusEnum.finished))));
    Response response = resource.preview(new Action());
    verifyActionResponse(response);
    Action action = (Action) response.getEntity();
    assertTrue(action.isSetStatus());
    assertEquals(CreationStatus.COMPLETE.value(), action.getStatus().getState());
}
#end_block

#method_before
@Test
public void testUndo() {
    setUriInfo(setUpBasicUriExpectations());
    setUpRestoreExpectations();
    control.replay();
    resource.undo(new Action());
}
#method_after
@Test
public void testUndo() throws Exception {
    setUriInfo(setUpActionExpectations(VdcActionType.RestoreAllSnapshots, RestoreAllSnapshotsParameters.class, new String[] { "VmId", "DstSnapshotId" }, new Object[] { VM_ID, SNAPSHOT_ID }, asList(GUIDS[1]), asList(new AsyncTaskStatus(AsyncTaskStatusEnum.finished))));
    Response response = resource.undo(new Action());
    verifyActionResponse(response);
    Action action = (Action) response.getEntity();
    assertTrue(action.isSetStatus());
    assertEquals(CreationStatus.COMPLETE.value(), action.getStatus().getState());
}
#end_block

#method_before
@Test
public void testCommit() {
    setUriInfo(setUpBasicUriExpectations());
    setUpRestoreExpectations();
    control.replay();
    resource.commit(new Action());
}
#method_after
@Test
public void testCommit() throws Exception {
    setUriInfo(setUpActionExpectations(VdcActionType.RestoreAllSnapshots, RestoreAllSnapshotsParameters.class, new String[] { "VmId", "DstSnapshotId" }, new Object[] { VM_ID, SNAPSHOT_ID }, asList(GUIDS[1]), asList(new AsyncTaskStatus(AsyncTaskStatusEnum.finished))));
    Response response = resource.commit(new Action());
    verifyActionResponse(response);
    Action action = (Action) response.getEntity();
    assertTrue(action.isSetStatus());
    assertEquals(CreationStatus.COMPLETE.value(), action.getStatus().getState());
}
#end_block

#method_before
@Override
public Response undo(Action action) {
    action.setAsync(false);
    RestoreAllSnapshotsParameters restoreParams = new RestoreAllSnapshotsParameters(parentId, guid);
    Response response = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action, PollingType.JOB);
    return response;
}
#method_after
@Override
public Response undo(Action action) {
    RestoreAllSnapshotsParameters restoreParams = new RestoreAllSnapshotsParameters(parentId, guid);
    Response response = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action);
    return response;
}
#end_block

#method_before
@Override
public Response commit(Action action) {
    action.setAsync(false);
    RestoreAllSnapshotsParameters restoreParams = new RestoreAllSnapshotsParameters(parentId, guid);
    Response response = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action, PollingType.JOB);
    return response;
}
#method_after
@Override
public Response commit(Action action) {
    RestoreAllSnapshotsParameters restoreParams = new RestoreAllSnapshotsParameters(parentId, guid);
    Response response = doAction(VdcActionType.RestoreAllSnapshots, restoreParams, action);
    return response;
}
#end_block

#method_before
@Override
public Response preview(Action action) {
    action.setAsync(false);
    TryBackToAllSnapshotsOfVmParameters tryBackParams = new TryBackToAllSnapshotsOfVmParameters(parentId, guid);
    Response response = doAction(VdcActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB);
    return response;
}
#method_after
@Override
public Response preview(Action action) {
    TryBackToAllSnapshotsOfVmParameters tryBackParams = new TryBackToAllSnapshotsOfVmParameters(parentId, guid);
    Response response = doAction(VdcActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action);
    return response;
}
#end_block

#method_before
protected VmTemplate getEntity() {
    for (VmTemplate entity : parent.getEntitiesFromExportDomain()) {
        if (guid.equals(entity.getId())) {
            return entity;
        }
    }
    return entityNotFound();
}
#method_after
protected VmTemplate getEntity() {
    if (template != null) {
        return template;
    }
    for (VmTemplate entity : parent.getEntitiesFromExportDomain()) {
        if (guid.equals(entity.getId())) {
            template = entity;
            return entity;
        }
    }
    return entityNotFound();
}
#end_block

#method_before
@Override
public ReadOnlyDevicesResource getDisksResource() {
    return inject(new BackendExportDomainTemplateDisksResource(this, guid));
}
#method_after
@Override
public StorageDomainContentDisksResource getDisksResource() {
    return inject(new BackendExportDomainDisksResource(this));
}
#end_block

#method_before
@Override
public BackendExportDomainVmDisksResource getDisksResource() {
    return inject(new BackendExportDomainVmDisksResource(this, guid));
}
#method_after
@Override
public StorageDomainContentDisksResource getDisksResource() {
    return inject(new BackendExportDomainDisksResource(this));
}
#end_block

#method_before
protected org.ovirt.engine.core.common.businessentities.VM getEntity() {
    for (org.ovirt.engine.core.common.businessentities.VM entity : parent.getEntitiesFromExportDomain()) {
        if (guid.equals(entity.getId())) {
            return entity;
        }
    }
    return entityNotFound();
}
#method_after
protected org.ovirt.engine.core.common.businessentities.VM getEntity() {
    if (vm != null) {
        return vm;
    }
    for (org.ovirt.engine.core.common.businessentities.VM entity : parent.getEntitiesFromExportDomain()) {
        if (guid.equals(entity.getId())) {
            vm = entity;
            return entity;
        }
    }
    return entityNotFound();
}
#end_block

#method_before
@Override
public Map<String, String> getJobMessageProperties() {
    if (jobProperties == null) {
        jobProperties = new HashMap<String, String>();
        VmPool vmPool = getParameters().getVmPool();
        String vmPoolName = vmPool != null ? vmPool.getVmPoolName() : StringUtils.EMPTY;
        jobProperties.put(VdcObjectType.VmPool.name().toLowerCase(), vmPoolName);
        Guid vmTemplateId = getVmTemplateId();
        String templateName = getVmTemplateName();
        if (StringUtils.isEmpty(templateName)) {
            templateName = vmTemplateId == null ? StringUtils.EMPTY : vmTemplateId.toString();
        }
        jobProperties.put(VdcObjectType.VmTemplate.name().toLowerCase(), templateName);
    }
    return jobProperties;
}
#method_after
@Override
public Map<String, String> getJobMessageProperties() {
    if (jobProperties == null) {
        jobProperties = new HashMap<String, String>();
        VmPool vmPool = getParameters().getVmPool();
        String vmPoolName = vmPool == null ? StringUtils.EMPTY : vmPool.getVmPoolName();
        jobProperties.put(VdcObjectType.VmPool.name().toLowerCase(), vmPoolName);
        Guid vmTemplateId = getVmTemplateId();
        String templateName = getVmTemplateName();
        if (StringUtils.isEmpty(templateName)) {
            templateName = vmTemplateId == null ? StringUtils.EMPTY : vmTemplateId.toString();
        }
        jobProperties.put(VdcObjectType.VmTemplate.name().toLowerCase(), templateName);
    }
    return jobProperties;
}
#end_block

#method_before
@Override
protected Guid getPoolId() {
    getVmPoolDAO().update(getVmPool());
    return getVmPool().getvm_pool_id();
}
#method_after
@Override
protected Guid getPoolId() {
    getVmPoolDAO().update(getVmPool());
    return getVmPool().getVmPoolId();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = super.canDoAction();
    oldPool = getVmPoolDAO().get(getVmPool().getvm_pool_id());
    if (returnValue && oldPool == null) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND);
        returnValue = false;
    } else if (returnValue && getParameters().getVmsCount() < 0) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL);
        returnValue = false;
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = super.canDoAction();
    oldPool = getVmPoolDAO().get(getVmPool().getVmPoolId());
    if (returnValue && oldPool == null) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND);
        returnValue = false;
    } else if (returnValue && getParameters().getVmsCount() < 0) {
        addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL);
        returnValue = false;
    }
    return returnValue;
}
#end_block

#method_before
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    initConfigSeverities();
    initUserAccountSeverities();
    checkSeverities();
    initGeneral();
}
#method_after
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    initConfigSeverities();
    initUserAccountSeverities();
    initCommonSeverities();
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
}
#method_after
private static void initGlusterVolumeSeverities() {
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_ADD_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_SERVERS_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_START_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_COMMAND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.GLUSTER_VOLUME_CREATED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_DELETED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_OPTION_RESET_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_PROPERTIES_CHANGED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_ADDED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_BRICK_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_SERVER_REMOVED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STARTED_FROM_CLI, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.GLUSTER_VOLUME_STOPPED_FROM_CLI, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initDefaultSeverities() {
    mSeverities.put(AuditLogType.UNASSIGNED, AuditLogSeverity.NORMAL);
}
#method_after
private static void initDefaultSeverities() {
    severities.put(AuditLogType.UNASSIGNED, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initTaskSeverities() {
    mSeverities.put(AuditLogType.TASK_CLEARING_ASYNC_TASK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TASK_STOPPING_ASYNC_TASK, AuditLogSeverity.NORMAL);
}
#method_after
private static void initTaskSeverities() {
    severities.put(AuditLogType.TASK_CLEARING_ASYNC_TASK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TASK_STOPPING_ASYNC_TASK, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initEngineSeverities() {
    mSeverities.put(AuditLogType.VDC_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDC_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CERTIFICATE_FILE_NOT_FOUND, AuditLogSeverity.ERROR);
}
#method_after
private static void initEngineSeverities() {
    severities.put(AuditLogType.VDC_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDC_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CERTIFICATE_FILE_NOT_FOUND, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initBookmarkSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_BOOKMARK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_BOOKMARK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_BOOKMARK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initBookmarkSeverities() {
    severities.put(AuditLogType.USER_ADD_BOOKMARK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_BOOKMARK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_BOOKMARK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_BOOKMARK_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initVMsPoolSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_ADD_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED, AuditLogSeverity.WARNING);
}
#method_after
private static void initVMsPoolSeverities() {
    severities.put(AuditLogType.USER_ADD_VM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_POOL_WITH_VMS_ADD_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_AD_GROUP_FROM_TIME_LEASED_POOL_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_USER_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initMLASeverities() {
    mSeverities.put(AuditLogType.USER_VDC_LOGIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_VDC_LOGIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDC_LOGOUT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_VDC_LOGOUT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AD_COMPUTER_ACCOUNT_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AD_COMPUTER_ACCOUNT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_PERMISSION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_PERMISSION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_ADUSER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_ADUSER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_ADUSER, AuditLogSeverity.WARNING);
}
#method_after
private static void initMLASeverities() {
    severities.put(AuditLogType.USER_VDC_LOGIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_VDC_LOGIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDC_LOGOUT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_VDC_LOGOUT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_AD_GROUP_TO_TIME_LEASED_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AD_COMPUTER_ACCOUNT_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AD_COMPUTER_ACCOUNT_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_PERMISSION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_PERMISSION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_PERMISSION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACHED_ACTION_GROUP_TO_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACHED_ACTION_GROUP_FROM_ROLE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_ROLE_WITH_ACTION_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_ADUSER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_ADUSER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_ADUSER, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initHostSeverities() {
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#method_after
private static void initHostSeverities() {
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ALERT_FENCE_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_TEST_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_ALERT_FENCE_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    severities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_FAILED_TO_GET_HOST_HARDWARE_INFO, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ALERT_FENCE_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_MEM_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_CPU_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_NETWORK_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_HIGH_SWAP_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_SWAP, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#end_block

#method_before
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_TASKS_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.UPDATE_OVF_FOR_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
}
#method_after
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    severities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.STORAGE_DOMAIN_TASKS_ERROR, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.UPDATE_OVF_FOR_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initQuotaSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DELETE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DELETE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.QUOTA_STORAGE_RESIZE_LOWER_THEN_CONSUMPTION, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MISSING_QUOTA_STORAGE_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MISSING_QUOTA_CLUSTER_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
}
#method_after
private static void initQuotaSeverities() {
    severities.put(AuditLogType.USER_ADD_QUOTA, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_QUOTA, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_QUOTA, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_QUOTA, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DELETE_QUOTA, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DELETE_QUOTA, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.QUOTA_STORAGE_RESIZE_LOWER_THEN_CONSUMPTION, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MISSING_QUOTA_STORAGE_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MISSING_QUOTA_CLUSTER_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
}
#method_after
private static void initVMSeverities() {
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_IMPORT_INFO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_DISK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ADD_DISK, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE_FINISHED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.HA_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.HA_VM_RESTART_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_FAILED_ATTACH_DISK_TO_VM, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initClusterSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_CLUSTER_DEFAULT_HOST_CLEARED, AuditLogSeverity.NORMAL);
}
#method_after
private static void initClusterSeverities() {
    severities.put(AuditLogType.USER_ADD_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.SYSTEM_UPDATE_VDS_GROUP_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_VM_CLUSTER_DEFAULT_HOST_CLEARED, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initTagSeverities() {
    mSeverities.put(AuditLogType.USER_UPDATE_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_EXISTS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_MOVE_TAG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE_FAILED, AuditLogSeverity.NORMAL);
}
#method_after
private static void initTagSeverities() {
    severities.put(AuditLogType.USER_UPDATE_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_UPDATE_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ADD_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ADD_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_REMOVE_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_REMOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VDS_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_VM_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_VM_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_DETACH_USER_GROUP_FROM_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_USER_GROUP_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VM_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_ATTACH_TAG_TO_VDS_EXISTS, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.USER_MOVE_TAG, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.USER_MOVE_TAG_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.UPDATE_TAGS_VM_DEFAULT_DISPLAY_TYPE_FAILED, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initImportExportSeverities() {
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_VM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_TEMPLATE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_INVALID_INTERFACES, AuditLogSeverity.NORMAL);
}
#method_after
private static void initImportExportSeverities() {
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_VM_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_REMOVE_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_IMPORT_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_TEMPLATE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_STARTING_REMOVE_VM, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_VM, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IMPORTEXPORT_FAILED_TO_IMPORT_TEMPLATE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.IMPORTEXPORT_IMPORT_TEMPLATE_INVALID_INTERFACES, AuditLogSeverity.NORMAL);
}
#end_block

#method_before
private static void initNetworkSeverities() {
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    mSeverities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#method_after
private static void initNetworkSeverities() {
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_FROM_VDS_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_BOND_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_MATCH_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_VDS_NETWORK_NOT_MATCH_CLUSTER, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_VM_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_TEMPLATE_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ADD_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_REMOVE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ATTACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DETACH_NETWORK_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDTAE_NETWORK_ON_CLUSTER_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_DISPLAY_TO_VDS_GROUP_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_UPDATE_NETWORK_TO_VDS_INTERFACE_FAILED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_HOST_USING_WRONG_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_HOST_MISSING_CLUSER_VLAN, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_COMMINT_NETWORK_CHANGES_FAILED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.MAC_POOL_EMPTY, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESS_IS_IN_USE, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.MAC_ADDRESSES_POOL_NOT_INITIALIZED, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.BRIDGED_NETWORK_OVER_MULTIPLE_INTERFACES, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.VDS_NETWORKS_OUT_OF_SYNC, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_ACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.NETWORK_DEACTIVATE_VM_INTERFACE_FAILURE, AuditLogSeverity.ERROR);
    // External Events/Alerts
    severities.put(AuditLogType.EXTERNAL_EVENT_NORMAL, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.EXTERNAL_EVENT_WARNING, AuditLogSeverity.WARNING);
    severities.put(AuditLogType.EXTERNAL_EVENT_ERROR, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.EXTERNAL_ALERT, AuditLogSeverity.ALERT);
}
#end_block

#method_before
private static void initConfigSeverities() {
    mSeverities.put(AuditLogType.RELOAD_CONFIGURATIONS_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RELOAD_CONFIGURATIONS_FAILURE, AuditLogSeverity.ERROR);
}
#method_after
private static void initConfigSeverities() {
    severities.put(AuditLogType.RELOAD_CONFIGURATIONS_SUCCESS, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.RELOAD_CONFIGURATIONS_FAILURE, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initUserAccountSeverities() {
    mSeverities.put(AuditLogType.USER_ACCOUNT_DISABLED_OR_LOCKED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACCOUNT_PASSWORD_EXPIRED, AuditLogSeverity.ERROR);
}
#method_after
private static void initUserAccountSeverities() {
    severities.put(AuditLogType.USER_ACCOUNT_DISABLED_OR_LOCKED, AuditLogSeverity.ERROR);
    severities.put(AuditLogType.USER_ACCOUNT_PASSWORD_EXPIRED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initDwhSeverities() {
    mSeverities.put(AuditLogType.DWH_STOPPED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.DWH_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.DWH_ERROR, AuditLogSeverity.ERROR);
}
#method_after
private static void initDwhSeverities() {
    severities.put(AuditLogType.DWH_STOPPED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.DWH_STARTED, AuditLogSeverity.NORMAL);
    severities.put(AuditLogType.DWH_ERROR, AuditLogSeverity.ERROR);
}
#end_block

#method_before
private static void initMessages() {
    ResXResourceReader reader = new ResXResourceReader("bundles/AuditLogMessages");
    for (DictionaryEntry entry : reader) {
        try {
            AuditLogType type = AuditLogType.valueOf(entry.getKey());
            if (!mMessages.containsKey(type)) {
                mMessages.put(type, (String) entry.getValue());
            } else {
                String secondPart = String.format(" First value : %1$s", mMessages.get(type));
                String thirdPart = String.format("Second value : %1$s", entry.getValue());
                log.errorFormat("Type {0} appears more then once in string table.{0}{1}", secondPart, thirdPart);
            }
        } catch (Exception e) {
            log.errorFormat("Cannot convert string {0} to AuditLogType", entry.getKey());
        }
    }
    checkMessages();
}
#method_after
private static void initMessages() {
    ResourceBundle bundle = readMessagesFromBundle();
    for (String key : bundle.keySet()) {
        try {
            AuditLogType type = AuditLogType.valueOf(key);
            if (!messages.containsKey(type)) {
                messages.put(type, bundle.getString(key));
            } else {
                log.errorFormat("The type {0} appears more then once in audit log messages bundle with the values '{1}' and '{2}'", type, messages.get(type), bundle.getString(key));
            }
        } catch (Exception e) {
            log.errorFormat("Cannot convert the string {0} to AuditLogType, the key does not exist in the AuditLogType declared types", bundle.getString(key));
        }
    }
    checkMessages();
}
#end_block

#method_before
static void checkMessages() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != mMessages.size()) {
        for (AuditLogType value : values) {
            if (!mMessages.containsKey(value)) {
                log.infoFormat("AuditLogType: {0} not exist in string table", value.toString());
            }
        }
    }
}
#method_after
static void checkMessages() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != messages.size()) {
        for (AuditLogType value : values) {
            if (!messages.containsKey(value)) {
                log.infoFormat("AuditLogType: {0} not exist in string table", value.toString());
            }
        }
    }
}
#end_block

#method_before
static void checkSeverities() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != mSeverities.size()) {
        for (AuditLogType value : values) {
            if (!mSeverities.containsKey(value)) {
                log.warnFormat("AuditLogType: {0} not have severity. Assumed Normal", value.toString());
            }
        }
    }
}
#method_after
static void checkSeverities() {
    AuditLogType[] values = AuditLogType.values();
    if (values.length != severities.size()) {
        for (AuditLogType value : values) {
            if (!severities.containsKey(value)) {
                log.warnFormat("AuditLogType: {0} not have severity. Assumed Normal", value.toString());
            }
        }
    }
}
#end_block

#method_before
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = mSeverities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        if (auditLogable != null) {
            AuditLog tempVar = null;
            // handle external log messages invoked by plugins via the API
            if (auditLogable.isExternal()) {
                // message is sent as an argument, no need to resolve.
                resolvedMessage = message = loggerString;
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
            } else if ((message = mMessages.get(logType)) != null) {
                // Application log message from AuditLogMessages
                resolvedMessage = resolveMessage(message, auditLogable);
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
            }
            if (tempVar != null) {
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                tempVar.setExternal(auditLogable.isExternal());
                auditLog = tempVar;
            }
        } else {
            auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
        }
        if (auditLog != null) {
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    } else if (auditLogable != null) {
        log.infoFormat("No string for {0} type. Use default Log", auditLogable.getAuditLogTypeValue());
        defaultLog(auditLogable);
    }
}
#method_after
public static void log(AuditLogableBase auditLogable, AuditLogType logType, String loggerString) {
    updateTimeoutLogableObject(auditLogable, logType);
    if (auditLogable == null || auditLogable.getLegal()) {
        String message = null;
        String resolvedMessage = null;
        AuditLogSeverity severity = severities.get(logType);
        if (severity == null) {
            severity = AuditLogSeverity.NORMAL;
            log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType);
        }
        AuditLog auditLog = null;
        if (auditLogable != null) {
            AuditLog tempVar = null;
            // handle external log messages invoked by plugins via the API
            if (auditLogable.isExternal()) {
                // message is sent as an argument, no need to resolve.
                resolvedMessage = message = loggerString;
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName(), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData());
            } else if ((message = messages.get(logType)) != null) {
                // Application log message from AuditLogMessages
                resolvedMessage = resolveMessage(message, auditLogable);
                tempVar = new AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName());
            }
            if (tempVar != null) {
                tempVar.setstorage_domain_id(auditLogable.getStorageDomainId());
                tempVar.setstorage_domain_name(auditLogable.getStorageDomainName());
                tempVar.setstorage_pool_id(auditLogable.getStoragePoolId());
                tempVar.setstorage_pool_name(auditLogable.getStoragePoolName());
                tempVar.setvds_group_id(auditLogable.getVdsGroupId());
                tempVar.setvds_group_name(auditLogable.getVdsGroupName());
                tempVar.setCorrelationId(auditLogable.getCorrelationId());
                tempVar.setJobId(auditLogable.getJobId());
                tempVar.setGlusterVolumeId(auditLogable.getGlusterVolumeId());
                tempVar.setGlusterVolumeName(auditLogable.getGlusterVolumeName());
                tempVar.setExternal(auditLogable.isExternal());
                auditLog = tempVar;
            }
        } else {
            auditLog = new AuditLog(logType, severity, resolvedMessage, null, null, null, null, null, null, null, null);
        }
        if (auditLog != null) {
            getDbFacadeInstance().getAuditLogDao().save(auditLog);
            if (!"".equals(loggerString)) {
                log.infoFormat(loggerString, resolvedMessage);
            }
        }
    } else {
        log.infoFormat("No string for {0} type. Use default Log", auditLogable.getAuditLogTypeValue());
    }
}
#end_block

#method_before
private static void updateTimeoutLogableObject(AuditLogableBase auditLogable, AuditLogType logType) {
    int duplicateEventsIntrvalValue = (auditLogable.isExternal()) ? // Min duration for External Events is 30 sec
    Math.max(auditLogable.getEventFloodInSec(), 30) : logType.getDuplicateEventsIntervalValue();
    if (duplicateEventsIntrvalValue > 0) {
        auditLogable.setEndTime(DateTime.getNow().AddSeconds(logType.getDuplicateEventsIntervalValue()));
        auditLogable.setTimeoutObjectId(ComposeObjectId(auditLogable, logType));
    }
}
#method_after
private static void updateTimeoutLogableObject(AuditLogableBase auditLogable, AuditLogType logType) {
    int duplicateEventsIntrvalValue = (auditLogable.isExternal()) ? // Min duration for External Events is 30 sec
    Math.max(auditLogable.getEventFloodInSec(), 30) : logType.getDuplicateEventsIntervalValue();
    if (duplicateEventsIntrvalValue > 0) {
        auditLogable.setEndTime(DateTime.getNow().AddSeconds(logType.getDuplicateEventsIntervalValue()));
        auditLogable.setTimeoutObjectId(composeObjectId(auditLogable, logType));
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = false;
    _oldVds = DbFacade.getInstance().getVdsDao().get(getVdsId());
    if (_oldVds != null && getParameters().getVdsStaticData() != null) {
        String compatibilityVersion = _oldVds.getvds_group_compatibility_version().toString();
        if (VdsHandler.IsUpdateValid(getParameters().getVdsStaticData(), _oldVds.getStaticData(), _oldVds.getstatus())) {
            if ("".equals(getParameters().getVdsStaticData().getvds_name())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            }
            String vdsName = getParameters().getvds().getvds_name();
            String hostName = getParameters().getvds().gethost_name();
            int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
            // check that VDS name is not null or empty
            if (vdsName == null || vdsName.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
                returnValue = false;
            // check that VDS name is not too long
            } else if (vdsName.length() > maxVdsNameLength) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
                returnValue = false;
            } else if (_oldVds.getstatus() != VDSStatus.InstallFailed && !_oldVds.gethost_name().equals(hostName)) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOSNAME_CANNOT_CHANGE);
                returnValue = false;
            } else // check if a name is updated to an existing vds name
            if (!StringUtils.equals(_oldVds.getvds_name().toLowerCase(), getParameters().getVdsStaticData().getvds_name().toLowerCase()) && VdsHandler.isVdsWithSameNameExistStatic(getParameters().getVdsStaticData().getvds_name())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            } else if (!StringUtils.equals(_oldVds.gethost_name().toLowerCase(), getParameters().getVdsStaticData().gethost_name().toLowerCase()) && VdsHandler.isVdsWithSameHostExistStatic(getParameters().getVdsStaticData().gethost_name())) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else if (getParameters().getInstallVds() && _oldVds.getstatus() != VDSStatus.Maintenance && _oldVds.getstatus() != VDSStatus.NonOperational && _oldVds.getstatus() != VDSStatus.InstallFailed) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL);
            } else if (getParameters().getInstallVds() && StringUtils.isEmpty(getParameters().getRootPassword()) && getParameters().getVdsStaticData().getvds_type() == VDSType.VDS) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!getParameters().getInstallVds() && _oldVds.getport() != getParameters().getVdsStaticData().getport()) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_CHANGE_REQUIRE_INSTALL);
            } else if (!_oldVds.getvds_group_id().equals(getParameters().getVdsStaticData().getvds_group_id())) {
                // Forbid updating group id - this must be done through
                // ChangeVDSClusterCommand
                // This is due to permission check that must be done both on
                // the VDS and on the VDSGroup
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER);
            } else {
                returnValue = true;
            }
            // if all ok check PM is legal
            returnValue = returnValue && IsPowerManagementLegal(getParameters().getVdsStaticData(), compatibilityVersion);
        } else {
            addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.toString());
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = false;
    _oldVds = DbFacade.getInstance().getVdsDao().get(getVdsId());
    if (_oldVds != null && getParameters().getVdsStaticData() != null) {
        String compatibilityVersion = _oldVds.getVdsGroupCompatibilityVersion().toString();
        if (VdsHandler.IsUpdateValid(getParameters().getVdsStaticData(), _oldVds.getStaticData(), _oldVds.getStatus())) {
            if ("".equals(getParameters().getVdsStaticData().getVdsName())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            }
            String vdsName = getParameters().getvds().getVdsName();
            String hostName = getParameters().getvds().getHostName();
            int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
            // check that VDS name is not null or empty
            if (vdsName == null || vdsName.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
                returnValue = false;
            // check that VDS name is not too long
            } else if (vdsName.length() > maxVdsNameLength) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
                returnValue = false;
            } else if (_oldVds.getStatus() != VDSStatus.InstallFailed && !_oldVds.getHostName().equals(hostName)) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOSNAME_CANNOT_CHANGE);
                returnValue = false;
            } else // check if a name is updated to an existing vds name
            if (!StringUtils.equals(_oldVds.getVdsName().toLowerCase(), getParameters().getVdsStaticData().getVdsName().toLowerCase()) && VdsHandler.isVdsWithSameNameExistStatic(getParameters().getVdsStaticData().getVdsName())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_WITH_EXISTING_PARAMS);
            } else if (!StringUtils.equals(_oldVds.getHostName().toLowerCase(), getParameters().getVdsStaticData().getHostName().toLowerCase()) && VdsHandler.isVdsWithSameHostExistStatic(getParameters().getVdsStaticData().getHostName())) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_SAME_HOST_EXIST);
            } else if (getParameters().getInstallVds() && _oldVds.getStatus() != VDSStatus.Maintenance && _oldVds.getStatus() != VDSStatus.NonOperational && _oldVds.getStatus() != VDSStatus.InstallFailed) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL);
            } else if (getParameters().getInstallVds() && StringUtils.isEmpty(getParameters().getRootPassword()) && getParameters().getVdsStaticData().getVdsType() == VDSType.VDS) {
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
            } else if (!getParameters().getInstallVds() && _oldVds.getPort() != getParameters().getVdsStaticData().getPort()) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_CHANGE_REQUIRE_INSTALL);
            } else if (!_oldVds.getVdsGroupId().equals(getParameters().getVdsStaticData().getVdsGroupId())) {
                // Forbid updating group id - this must be done through
                // ChangeVDSClusterCommand
                // This is due to permission check that must be done both on
                // the VDS and on the VDSGroup
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER);
            } else {
                returnValue = true;
            }
            // if all ok check PM is legal
            returnValue = returnValue && IsPowerManagementLegal(getParameters().getVdsStaticData(), compatibilityVersion);
        } else {
            addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.toString());
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.VDS_INVALID_SERVER_ID);
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    updateVdsData();
    if (NeedToUpdateVdsBroker()) {
        InitializeVds();
    }
    if (getParameters().getInstallVds()) {
        InstallVdsParameters tempVar = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        tempVar.setIsReinstallOrUpgrade(getParameters().getIsReinstallOrUpgrade());
        tempVar.setoVirtIsoFile(getParameters().getoVirtIsoFile());
        tempVar.setOverrideFirewall(getParameters().getOverrideFirewall());
        tempVar.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        ArrayList<VdcReturnValueBase> resultList = Backend.getInstance().runInternalMultipleActions(VdcActionType.InstallVds, new ArrayList<VdcActionParametersBase>(Arrays.asList(tempVar)));
        // status, therefore needed to fail the command to revert the status.
        if (!resultList.isEmpty()) {
            VdcReturnValueBase vdcReturnValueBase = resultList.get(0);
            if (vdcReturnValueBase != null && !vdcReturnValueBase.getCanDoAction()) {
                ArrayList<String> canDoActionMessages = vdcReturnValueBase.getCanDoActionMessages();
                if (!canDoActionMessages.isEmpty()) {
                    log.errorFormat("Installation/upgrade of Host {0},{1} failed due to: {2} ", getVdsId(), getVdsName(), StringUtils.join(Backend.getInstance().getErrorsTranslator().TranslateErrorText(canDoActionMessages), ","));
                }
                setSucceeded(false);
                return;
            }
        }
    }
    // set clusters network to be operational (if needed)
    if (_oldVds.getstatus() == VDSStatus.Up) {
        List<NetworkCluster> networkClusters = DbFacade.getInstance().getNetworkClusterDao().getAllForCluster(_oldVds.getvds_group_id());
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(_oldVds.getvds_group_id());
        for (NetworkCluster item : networkClusters) {
            for (Network net : networks) {
                if (net.getId().equals(item.getNetworkId())) {
                    NetworkClusterHelper.setStatus(_oldVds.getvds_group_id(), net);
                }
            }
        }
    }
    AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
    TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    updateVdsData();
    if (NeedToUpdateVdsBroker()) {
        InitializeVds();
    }
    if (getParameters().getInstallVds()) {
        InstallVdsParameters tempVar = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        tempVar.setIsReinstallOrUpgrade(getParameters().getIsReinstallOrUpgrade());
        tempVar.setoVirtIsoFile(getParameters().getoVirtIsoFile());
        tempVar.setOverrideFirewall(getParameters().getOverrideFirewall());
        tempVar.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        ArrayList<VdcReturnValueBase> resultList = Backend.getInstance().runInternalMultipleActions(VdcActionType.InstallVds, new ArrayList<VdcActionParametersBase>(Arrays.asList(tempVar)));
        // status, therefore needed to fail the command to revert the status.
        if (!resultList.isEmpty()) {
            VdcReturnValueBase vdcReturnValueBase = resultList.get(0);
            if (vdcReturnValueBase != null && !vdcReturnValueBase.getCanDoAction()) {
                ArrayList<String> canDoActionMessages = vdcReturnValueBase.getCanDoActionMessages();
                if (!canDoActionMessages.isEmpty()) {
                    log.errorFormat("Installation/upgrade of Host {0},{1} failed due to: {2} ", getVdsId(), getVdsName(), StringUtils.join(Backend.getInstance().getErrorsTranslator().TranslateErrorText(canDoActionMessages), ","));
                }
                setSucceeded(false);
                return;
            }
        }
    }
    // set clusters network to be operational (if needed)
    if (_oldVds.getStatus() == VDSStatus.Up) {
        List<NetworkCluster> networkClusters = DbFacade.getInstance().getNetworkClusterDao().getAllForCluster(_oldVds.getVdsGroupId());
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(_oldVds.getVdsGroupId());
        for (NetworkCluster item : networkClusters) {
            for (Network net : networks) {
                if (net.getId().equals(item.getNetworkId())) {
                    NetworkClusterHelper.setStatus(_oldVds.getVdsGroupId(), net);
                }
            }
        }
    }
    AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
    TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected List<Class<?>> getValidationGroups() {
    addValidationGroup(UpdateEntity.class);
    if (getParameters().getVdsStaticData().getpm_enabled()) {
        addValidationGroup(PowerManagementCheck.class);
    }
    return super.getValidationGroups();
}
#method_after
@Override
protected List<Class<?>> getValidationGroups() {
    addValidationGroup(UpdateEntity.class);
    if (getParameters().getVdsStaticData().isPmEnabled()) {
        addValidationGroup(PowerManagementCheck.class);
    }
    return super.getValidationGroups();
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean result = true;
    boolean hasVms = false;
    oldGroup = getVdsGroupDAO().get(getVdsGroup().getId());
    if (oldGroup == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        result = false;
    }
    // check that if name was changed, it was done to the same cluster
    if (result && !StringUtils.equals(oldGroup.getname(), getVdsGroup().getname())) {
        VDSGroup groupWithName = getVdsGroupDAO().getByName(getVdsGroup().getname());
        if (groupWithName != null && !groupWithName.getId().equals(getVdsGroup().getId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
            result = false;
        }
    }
    if (result && !VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    }
    // decreasing of compatibility version is not allowed
    if (result && getVdsGroup().getcompatibility_version().compareTo(oldGroup.getcompatibility_version()) < 0) {
        result = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION.toString());
    }
    if (result && oldGroup.getStoragePoolId() != null && !oldGroup.getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_CHANGE_STORAGE_POOL);
        result = false;
    }
    // If both original Cpu and new Cpu are null, don't check Cpu validity
    if (result) {
        allForVdsGroup = getVdsDAO().getAllForVdsGroup(oldGroup.getId());
    }
    if (result && (oldGroup.getcpu_name() != null || getVdsGroup().getcpu_name() != null)) {
        // Check that cpu exist
        if (!checkIfCpusExist()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
            addCanDoActionMessage(VdcBllMessages.VAR__TYPE__CLUSTER);
            result = false;
        } else {
            // vds in this cluster, cannot update
            if (!StringUtils.isEmpty(oldGroup.getcpu_name()) && !checkIfCpusSameManufacture(oldGroup) && !allForVdsGroup.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_ILLEGAL);
                result = false;
            }
        }
    }
    if (result) {
        List<VDS> vdss = new ArrayList<VDS>();
        boolean isAddedToStoragePool = oldGroup.getStoragePoolId() == null && getVdsGroup().getStoragePoolId() != null;
        for (VDS vds : allForVdsGroup) {
            if (vds.getstatus() == VDSStatus.Up) {
                if (isAddedToStoragePool) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_VDS_UP);
                    return false;
                } else {
                    vdss.add(vds);
                }
            }
        }
        for (VDS vds : vdss) {
            if (!VersionSupport.checkClusterVersionSupported(getVdsGroup().getcompatibility_version(), vds)) {
                result = false;
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS);
                break;
            } else if (missingServerCpuFlags(vds) != null) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS);
                result = false;
                break;
            }
        }
        if (result) {
            List<VM> vmList = getVmDAO().getAllForVdsGroup(oldGroup.getId());
            boolean notDownVms = false;
            boolean suspendedVms = false;
            hasVms = vmList.size() > 0;
            boolean sameCpuNames = StringUtils.equals(oldGroup.getcpu_name(), getVdsGroup().getcpu_name());
            if (!sameCpuNames) {
                for (VM vm : vmList) {
                    if (vm.getStatus() == VMStatus.Suspended) {
                        suspendedVms = true;
                        break;
                    } else if (vm.getStatus() != VMStatus.Down) {
                        notDownVms = true;
                        break;
                    }
                }
                if (suspendedVms) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_SUSPENDED_VMS);
                    result = false;
                } else if (notDownVms) {
                    int compareResult = compareCpuLevels(oldGroup);
                    if (compareResult < 0) {
                        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_LOWER_CPU_LEVEL);
                        result = false;
                    } else if (compareResult > 0) {
                        // Upgrade of CPU in same compability level is allowed if
                        // there
                        // are running VMs - but we should warn they
                        // cannot not be hibernated
                        AuditLogableBase logable = new AuditLogableBase();
                        logable.AddCustomValue("VdsGroup", getParameters().getVdsGroup().getname());
                        AuditLogDirector.log(logable, AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE);
                    }
                }
            }
        }
    }
    if (result && getVdsGroup().getStoragePoolId() != null) {
        storage_pool storagePool = getStoragePoolDAO().get(getVdsGroup().getStoragePoolId().getValue());
        if (oldGroup.getStoragePoolId() == null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getStoragePoolId().getValue()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else // selection algorithm must be set to none in localfs
            if (getVdsGroup().getselection_algorithm() != VdsSelectionAlgorithm.None) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_SELECTION_ALGORITHM_MUST_BE_SET_TO_NONE_ON_LOCAL_STORAGE.toString());
                result = false;
            } else if (VDSGroup.DEFAULT_VDS_GROUP_ID.equals(getVdsGroup().getId())) {
                addCanDoActionMessage(VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS);
                result = false;
            }
        }
    }
    if (result) {
        result = validateMetrics();
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        } else if (getVdsGroup().supportsGlusterService() && getVdsGroup().supportsVirtService() && !isAllowClusterWithVirtGluster()) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED);
            result = false;
        }
    }
    if (result && hasVms && !getVdsGroup().supportsVirtService()) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS);
        result = false;
    }
    if (result && !getVdsGroup().supportsGlusterService()) {
        List<GlusterVolumeEntity> volumes = getGlusterVolumeDao().getByClusterId(getVdsGroup().getId());
        if (volumes != null && volumes.size() > 0) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES);
            result = false;
        }
    }
    return result;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean result = true;
    boolean hasVms = false;
    oldGroup = getVdsGroupDAO().get(getVdsGroup().getId());
    if (oldGroup == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        result = false;
    }
    // check that if name was changed, it was done to the same cluster
    if (result && !StringUtils.equals(oldGroup.getname(), getVdsGroup().getname())) {
        VDSGroup groupWithName = getVdsGroupDAO().getByName(getVdsGroup().getname());
        if (groupWithName != null && !groupWithName.getId().equals(getVdsGroup().getId())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
            result = false;
        }
    }
    if (result && !VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    }
    // decreasing of compatibility version is not allowed
    if (result && getVdsGroup().getcompatibility_version().compareTo(oldGroup.getcompatibility_version()) < 0) {
        result = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION.toString());
    }
    if (result && oldGroup.getStoragePoolId() != null && !oldGroup.getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_CHANGE_STORAGE_POOL);
        result = false;
    }
    // If both original Cpu and new Cpu are null, don't check Cpu validity
    if (result) {
        allForVdsGroup = getVdsDAO().getAllForVdsGroup(oldGroup.getId());
    }
    if (result && (oldGroup.getcpu_name() != null || getVdsGroup().getcpu_name() != null)) {
        // Check that cpu exist
        if (!checkIfCpusExist()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
            addCanDoActionMessage(VdcBllMessages.VAR__TYPE__CLUSTER);
            result = false;
        } else {
            // vds in this cluster, cannot update
            if (!StringUtils.isEmpty(oldGroup.getcpu_name()) && !checkIfCpusSameManufacture(oldGroup) && !allForVdsGroup.isEmpty()) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_ILLEGAL);
                result = false;
            }
        }
    }
    if (result) {
        List<VDS> vdss = new ArrayList<VDS>();
        boolean isAddedToStoragePool = oldGroup.getStoragePoolId() == null && getVdsGroup().getStoragePoolId() != null;
        for (VDS vds : allForVdsGroup) {
            if (vds.getStatus() == VDSStatus.Up) {
                if (isAddedToStoragePool) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_VDS_UP);
                    return false;
                } else {
                    vdss.add(vds);
                }
            }
        }
        for (VDS vds : vdss) {
            if (!VersionSupport.checkClusterVersionSupported(getVdsGroup().getcompatibility_version(), vds)) {
                result = false;
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS);
                break;
            } else if (missingServerCpuFlags(vds) != null) {
                addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_LOWER_HOSTS);
                result = false;
                break;
            }
        }
        if (result) {
            List<VM> vmList = getVmDAO().getAllForVdsGroup(oldGroup.getId());
            boolean notDownVms = false;
            boolean suspendedVms = false;
            hasVms = vmList.size() > 0;
            boolean sameCpuNames = StringUtils.equals(oldGroup.getcpu_name(), getVdsGroup().getcpu_name());
            if (!sameCpuNames) {
                for (VM vm : vmList) {
                    if (vm.getStatus() == VMStatus.Suspended) {
                        suspendedVms = true;
                        break;
                    } else if (vm.getStatus() != VMStatus.Down) {
                        notDownVms = true;
                        break;
                    }
                }
                if (suspendedVms) {
                    addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_CPU_WITH_SUSPENDED_VMS);
                    result = false;
                } else if (notDownVms) {
                    int compareResult = compareCpuLevels(oldGroup);
                    if (compareResult < 0) {
                        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_LOWER_CPU_LEVEL);
                        result = false;
                    } else if (compareResult > 0) {
                        // Upgrade of CPU in same compability level is allowed if
                        // there
                        // are running VMs - but we should warn they
                        // cannot not be hibernated
                        AuditLogableBase logable = new AuditLogableBase();
                        logable.addCustomValue("VdsGroup", getParameters().getVdsGroup().getname());
                        AuditLogDirector.log(logable, AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE);
                    }
                }
            }
        }
    }
    if (result && getVdsGroup().getStoragePoolId() != null) {
        storage_pool storagePool = getStoragePoolDAO().get(getVdsGroup().getStoragePoolId().getValue());
        if (oldGroup.getStoragePoolId() == null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getStoragePoolId().getValue()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else // selection algorithm must be set to none in localfs
            if (getVdsGroup().getselection_algorithm() != VdsSelectionAlgorithm.None) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_SELECTION_ALGORITHM_MUST_BE_SET_TO_NONE_ON_LOCAL_STORAGE.toString());
                result = false;
            } else if (VDSGroup.DEFAULT_VDS_GROUP_ID.equals(getVdsGroup().getId())) {
                addCanDoActionMessage(VdcBllMessages.DEFAULT_CLUSTER_CANNOT_BE_ON_LOCALFS);
                result = false;
            }
        }
    }
    if (result) {
        result = validateMetrics();
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        } else if (getVdsGroup().supportsGlusterService() && getVdsGroup().supportsVirtService() && !isAllowClusterWithVirtGluster()) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED);
            result = false;
        }
    }
    if (result && hasVms && !getVdsGroup().supportsVirtService()) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_VIRT_WHEN_CLUSTER_CONTAINS_VMS);
        result = false;
    }
    if (result && !getVdsGroup().supportsGlusterService()) {
        List<GlusterVolumeEntity> volumes = getGlusterVolumeDao().getByClusterId(getVdsGroup().getId());
        if (volumes != null && volumes.size() > 0) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES);
            result = false;
        }
    }
    return result;
}
#end_block

#method_before
protected List<String> missingServerCpuFlags(VDS vds) {
    return CpuFlagsManagerHandler.missingServerCpuFlags(getVdsGroup().getcpu_name(), vds.getcpu_flags(), getVdsGroup().getcompatibility_version());
}
#method_after
protected List<String> missingServerCpuFlags(VDS vds) {
    return CpuFlagsManagerHandler.missingServerCpuFlags(getVdsGroup().getcpu_name(), vds.getCpuFlags(), getVdsGroup().getcompatibility_version());
}
#end_block

#method_before
private void cleanUpCompensationData() {
    getBusinessEntitySnapshotDAO().removeAllForCommandId(commandId);
}
#method_after
private void cleanUpCompensationData() {
    if (!(getCompensationContext() instanceof NoOpCompensationContext)) {
        getBusinessEntitySnapshotDAO().removeAllForCommandId(commandId);
    }
}
#end_block

#method_before
private void logRenamedEntity() {
    if (this instanceof RenamedEntityInfoProvider) {
        String entity = "UNKNOWN";
        String oldName = "";
        String newName = "";
        try {
            entity = ReflectionUtils.getMethodValue(this, "getEntityName").toString();
            oldName = ReflectionUtils.getMethodValue(this, "getOldName").toString();
            newName = ReflectionUtils.getMethodValue(this, "getNewName").toString();
            if (!oldName.equals(newName)) {
                // log entity rename details
                AuditLogableBase logable = new AuditLogableBase();
                logable.AddCustomValue("EntityName", entity);
                logable.AddCustomValue("OldName", oldName);
                logable.AddCustomValue("NewName", newName);
                Class<AuditLogableBase>[] partypes = new Class[1];
                partypes[0] = AuditLogableBase.class;
                Object[] arglist = new Object[1];
                arglist[0] = logable;
                ReflectionUtils.callMethod(this, "setId", partypes, arglist);
                AuditLogDirector.log(logable, AuditLogType.ENTITY_RENAMED);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
    }
}
#method_after
private void logRenamedEntity() {
    try {
        if (this instanceof RenamedEntityInfoProvider) {
            RenamedEntityInfoProvider renameable = (RenamedEntityInfoProvider) this;
            String entityType = renameable.getEntityType();
            String oldEntityName = renameable.getEntityOldName();
            String newEntityName = renameable.getEntityNewName();
            if (!StringUtils.equals(oldEntityName, newEntityName)) {
                // log entity rename details
                AuditLogableBase logable = new AuditLogableBase();
                logable.addCustomValue("EntityType", entityType);
                logable.addCustomValue("OldEntityName", oldEntityName);
                logable.addCustomValue("NewEntityName", newEntityName);
                renameable.setEntityId(logable);
                AuditLogDirector.log(logable, AuditLogType.ENTITY_RENAMED);
            }
        }
    } catch (Exception e) {
        log.error("Failed to log entity rename operation.", e);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    boolean returnValue = super.canDoAction() && checkStorageDomain() && checkStorageDomainStatus(StorageDomainStatus.Active) && checkStorageDomainNameLengthValid();
    oldDomain = DbFacade.getInstance().getStorageDomainStaticDao().get(getStorageDomain().getId());
    // storage domain which is about to be updated.
    if (returnValue) {
        getStorageDomain().setLastTimeUsedAsMaster(oldDomain.getLastTimeUsedAsMaster());
    }
    // Collect changed fields to update in a list.
    List<String> props = ObjectIdentityChecker.GetChangedFields(oldDomain, getStorageDomain().getStorageStaticData());
    // Allow change only to name field
    props.remove("storage_name");
    if (returnValue && props.size() > 0) {
        log.warnFormat("There was an attempt to update the following fields although they are not allowed to be updated: {0}", StringUtils.join(props, ","));
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS);
        returnValue = false;
    }
    _storageDomainNameChanged = !StringUtils.equals(oldDomain.getstorage_name(), getStorageDomain().getstorage_name());
    // order to change description in spm
    if (returnValue && _storageDomainNameChanged && getStoragePool() != null && getStoragePool().getstatus() != StoragePoolStatus.Up) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        returnValue = false;
    }
    if (returnValue && _storageDomainNameChanged && IsStorageWithSameNameExists()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
        returnValue = false;
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    boolean returnValue = super.canDoAction() && checkStorageDomain() && checkStorageDomainStatus(StorageDomainStatus.Active) && checkStorageDomainNameLengthValid();
    oldDomain = DbFacade.getInstance().getStorageDomainStaticDao().get(getStorageDomain().getId());
    // storage domain which is about to be updated.
    if (returnValue) {
        getStorageDomain().setLastTimeUsedAsMaster(oldDomain.getLastTimeUsedAsMaster());
    }
    // Collect changed fields to update in a list.
    List<String> props = ObjectIdentityChecker.GetChangedFields(oldDomain, getStorageDomain().getStorageStaticData());
    // Allow change only to name & description field
    props.remove("storage_name");
    props.remove("description");
    if (returnValue && props.size() > 0) {
        log.warnFormat("There was an attempt to update the following fields although they are not allowed to be updated: {0}", StringUtils.join(props, ","));
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS);
        returnValue = false;
    }
    _storageDomainNameChanged = !StringUtils.equals(oldDomain.getstorage_name(), getStorageDomain().getstorage_name());
    // order to change description in spm
    if (returnValue && _storageDomainNameChanged && getStoragePool() != null && getStoragePool().getstatus() != StoragePoolStatus.Up) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        returnValue = false;
    }
    if (returnValue && _storageDomainNameChanged && IsStorageWithSameNameExists()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
        returnValue = false;
    }
    return returnValue;
}
#end_block

#method_before
@Mapping(from = Host.class, to = VdsStatic.class)
public static VdsStatic map(Host model, VdsStatic template) {
    VdsStatic entity = template != null ? template : new VdsStatic();
    if (model.isSetId()) {
        entity.setId(new Guid(model.getId()));
    }
    if (model.isSetName()) {
        entity.setvds_name(model.getName());
    }
    if (model.isSetCluster() && model.getCluster().isSetId()) {
        entity.setvds_group_id(new Guid(model.getCluster().getId()));
    }
    if (model.isSetAddress()) {
        entity.sethost_name(model.getAddress());
    }
    if (model.isSetPort() && model.getPort() > 0) {
        entity.setport(model.getPort());
    } else {
        entity.setport(DEFAULT_VDSM_PORT);
    }
    if (model.isSetPowerManagement()) {
        entity = map(model.getPowerManagement(), entity);
    }
    if (model.isSetStorageManager()) {
        if (model.getStorageManager().getPriority() != null) {
            entity.setVdsSpmPriority(model.getStorageManager().getPriority());
        }
    }
    if (model.isSetDisplay() && model.getDisplay().isSetAddress()) {
        entity.setConsoleAddress("".equals(model.getDisplay().getAddress()) ? null : model.getDisplay().getAddress());
    }
    return entity;
}
#method_after
@Mapping(from = Host.class, to = VdsStatic.class)
public static VdsStatic map(Host model, VdsStatic template) {
    VdsStatic entity = template != null ? template : new VdsStatic();
    if (model.isSetId()) {
        entity.setId(new Guid(model.getId()));
    }
    if (model.isSetName()) {
        entity.setVdsName(model.getName());
    }
    if (model.isSetCluster() && model.getCluster().isSetId()) {
        entity.setVdsGroupId(new Guid(model.getCluster().getId()));
    }
    if (model.isSetAddress()) {
        entity.setHostName(model.getAddress());
    }
    if (model.isSetPort() && model.getPort() > 0) {
        entity.setPort(model.getPort());
    } else {
        entity.setPort(DEFAULT_VDSM_PORT);
    }
    if (model.isSetPowerManagement()) {
        entity = map(model.getPowerManagement(), entity);
    }
    if (model.isSetStorageManager()) {
        if (model.getStorageManager().getPriority() != null) {
            entity.setVdsSpmPriority(model.getStorageManager().getPriority());
        }
    }
    if (model.isSetDisplay() && model.getDisplay().isSetAddress()) {
        entity.setConsoleAddress("".equals(model.getDisplay().getAddress()) ? null : model.getDisplay().getAddress());
    }
    return entity;
}
#end_block

#method_before
@Mapping(from = PowerManagement.class, to = VdsStatic.class)
public static VdsStatic map(PowerManagement model, VdsStatic template) {
    VdsStatic entity = template != null ? template : new VdsStatic();
    if (model.isSetType()) {
        entity.setpm_type(model.getType());
    }
    if (model.isSetEnabled()) {
        entity.setpm_enabled(model.isEnabled());
    }
    if (model.isSetAddress()) {
        entity.setManagmentIp(model.getAddress());
    }
    if (model.isSetUsername()) {
        entity.setpm_user(model.getUsername());
    }
    if (model.isSetPassword()) {
        entity.setpm_password(model.getPassword());
    }
    if (model.isSetOptions()) {
        entity.setpm_options(map(model.getOptions(), null));
    }
    if (model.isSetPmProxies()) {
        String delim = "";
        StringBuilder builder = new StringBuilder();
        for (PmProxy pmProxy : model.getPmProxies().getPmProxy()) {
            builder.append(delim);
            builder.append(pmProxy.getType());
            delim = ",";
        }
        entity.setPmProxyPreferences(builder.toString());
    }
    if (model.isSetAgents()) {
        // Currently only Primary/Secondary agents are supported
        int order = 1;
        for (Agent agent : model.getAgents().getAgents()) {
            if (agent.isSetOrder()) {
                order = agent.getOrder();
            }
            if (order == 1) {
                // Primary
                // in case that order is not defined, secondary will still be defined correctly.
                order++;
                if (agent.isSetType()) {
                    entity.setpm_type(agent.getType());
                }
                if (agent.isSetAddress()) {
                    entity.setManagmentIp(agent.getAddress());
                }
                if (agent.isSetUsername()) {
                    entity.setpm_user(agent.getUsername());
                }
                if (agent.isSetPassword()) {
                    entity.setpm_password(agent.getPassword());
                }
                if (agent.isSetOptions()) {
                    entity.setpm_options(map(agent.getOptions(), null));
                }
            } else if (order == 2) {
                // Secondary
                if (agent.isSetType()) {
                    entity.setPmSecondaryType(agent.getType());
                }
                if (agent.isSetAddress()) {
                    entity.setPmSecondaryIp(agent.getAddress());
                }
                if (agent.isSetUsername()) {
                    entity.setPmSecondaryUser(agent.getUsername());
                }
                if (agent.isSetPassword()) {
                    entity.setPmSecondaryPassword(agent.getPassword());
                }
                if (agent.isSetOptions()) {
                    entity.setPmSecondaryOptions(map(agent.getOptions(), null));
                }
                if (agent.isSetConcurrent()) {
                    entity.setPmSecondaryConcurrent(agent.isConcurrent());
                }
            }
        }
    }
    return entity;
}
#method_after
@Mapping(from = PowerManagement.class, to = VdsStatic.class)
public static VdsStatic map(PowerManagement model, VdsStatic template) {
    VdsStatic entity = template != null ? template : new VdsStatic();
    if (model.isSetType()) {
        entity.setPmType(model.getType());
    }
    if (model.isSetEnabled()) {
        entity.setPmEnabled(model.isEnabled());
    }
    if (model.isSetAddress()) {
        entity.setManagmentIp(model.getAddress());
    }
    if (model.isSetUsername()) {
        entity.setPmUser(model.getUsername());
    }
    if (model.isSetPassword()) {
        entity.setPmPassword(model.getPassword());
    }
    if (model.isSetOptions()) {
        entity.setPmOptions(map(model.getOptions(), null));
    }
    if (model.isSetPmProxies()) {
        String delim = "";
        StringBuilder builder = new StringBuilder();
        for (PmProxy pmProxy : model.getPmProxies().getPmProxy()) {
            builder.append(delim);
            builder.append(pmProxy.getType());
            delim = ",";
        }
        entity.setPmProxyPreferences(builder.toString());
    }
    if (model.isSetAgents()) {
        // Currently only Primary/Secondary agents are supported
        int order = 1;
        for (Agent agent : model.getAgents().getAgents()) {
            if (agent.isSetOrder()) {
                order = agent.getOrder();
            }
            if (order == 1) {
                // Primary
                // in case that order is not defined, secondary will still be defined correctly.
                order++;
                if (agent.isSetType()) {
                    entity.setPmType(agent.getType());
                }
                if (agent.isSetAddress()) {
                    entity.setManagmentIp(agent.getAddress());
                }
                if (agent.isSetUsername()) {
                    entity.setPmUser(agent.getUsername());
                }
                if (agent.isSetPassword()) {
                    entity.setPmPassword(agent.getPassword());
                }
                if (agent.isSetOptions()) {
                    entity.setPmOptions(map(agent.getOptions(), null));
                }
            } else if (order == 2) {
                // Secondary
                if (agent.isSetType()) {
                    entity.setPmSecondaryType(agent.getType());
                }
                if (agent.isSetAddress()) {
                    entity.setPmSecondaryIp(agent.getAddress());
                }
                if (agent.isSetUsername()) {
                    entity.setPmSecondaryUser(agent.getUsername());
                }
                if (agent.isSetPassword()) {
                    entity.setPmSecondaryPassword(agent.getPassword());
                }
                if (agent.isSetOptions()) {
                    entity.setPmSecondaryOptions(map(agent.getOptions(), null));
                }
                if (agent.isSetConcurrent()) {
                    entity.setPmSecondaryConcurrent(agent.isConcurrent());
                }
            }
        }
    }
    return entity;
}
#end_block

#method_before
@Mapping(from = VDS.class, to = Host.class)
public static Host map(VDS entity, Host template) {
    Host model = template != null ? template : new Host();
    model.setId(entity.getId().toString());
    model.setName(entity.getvds_name());
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    model.setAddress(entity.gethost_name());
    if (entity.getport() > 0) {
        model.setPort(entity.getport());
    }
    HostStatus status = map(entity.getstatus(), null);
    model.setStatus(StatusUtils.create(status));
    if (status == HostStatus.NON_OPERATIONAL) {
        model.getStatus().setDetail(entity.getNonOperationalReason().name().toLowerCase());
    }
    StorageManager sm = new StorageManager();
    sm.setPriority(entity.getVdsSpmPriority());
    sm.setValue(entity.getspm_status() == VdsSpmStatus.SPM);
    model.setStorageManager(sm);
    if (entity.getVersion() != null && entity.getVersion().getMajor() != -1 && entity.getVersion().getMinor() != -1 && entity.getVersion().getRevision() != -1 && entity.getVersion().getBuild() != -1) {
        Version version = new Version();
        version.setMajor(entity.getVersion().getMajor());
        version.setMinor(entity.getVersion().getMinor());
        version.setRevision(entity.getVersion().getRevision());
        version.setBuild(entity.getVersion().getBuild());
        version.setFullVersion(entity.getVersion().getRpmName());
        model.setVersion(version);
    }
    model.setOs(getHostOs(entity.gethost_os()));
    model.setKsm(new KSM());
    model.getKsm().setEnabled(Boolean.TRUE.equals(entity.getksm_state()));
    model.setTransparentHugepages(new TransparentHugePages());
    model.getTransparentHugepages().setEnabled(!(entity.getTransparentHugePagesState() == null || entity.getTransparentHugePagesState() == VdsTransparentHugePagesState.Never));
    if (entity.getIScsiInitiatorName() != null) {
        model.setIscsi(new IscsiDetails());
        model.getIscsi().setInitiator(entity.getIScsiInitiatorName());
    }
    model.setPowerManagement(map(entity, (PowerManagement) null));
    model.setHardwareInformation(map(entity, (HardwareInformation) null));
    CPU cpu = new CPU();
    CpuTopology cpuTopology = new CpuTopology();
    if (entity.getcpu_sockets() != null) {
        cpuTopology.setSockets(entity.getcpu_sockets());
        if (entity.getcpu_cores() != null) {
            cpuTopology.setCores(entity.getcpu_cores() / entity.getcpu_sockets());
            if (entity.getCpuThreads() != null) {
                cpuTopology.setThreads(entity.getCpuThreads() / entity.getcpu_cores());
            }
        }
    }
    cpu.setTopology(cpuTopology);
    cpu.setName(entity.getcpu_model());
    if (entity.getcpu_speed_mh() != null) {
        cpu.setSpeed(new BigDecimal(entity.getcpu_speed_mh()));
    }
    model.setCpu(cpu);
    VmSummary vmSummary = new VmSummary();
    vmSummary.setActive(entity.getvm_active());
    vmSummary.setMigrating(entity.getvm_migrating());
    vmSummary.setTotal(entity.getvm_count());
    model.setSummary(vmSummary);
    if (entity.getvds_type() != null) {
        HostType type = map(entity.getvds_type(), null);
        model.setType(type != null ? type.value() : null);
    }
    model.setMemory(Long.valueOf(entity.getphysical_mem_mb() == null ? 0 : entity.getphysical_mem_mb() * BYTES_IN_MEGABYTE));
    model.setMaxSchedulingMemory((int) entity.getMaxSchedulingMemory() * BYTES_IN_MEGABYTE);
    if (entity.getlibvirt_version() != null && entity.getlibvirt_version().getMajor() != -1 && entity.getlibvirt_version().getMinor() != -1 && entity.getlibvirt_version().getRevision() != -1 && entity.getlibvirt_version().getBuild() != -1) {
        Version version = new Version();
        version.setMajor(entity.getlibvirt_version().getMajor());
        version.setMinor(entity.getlibvirt_version().getMinor());
        version.setRevision(entity.getlibvirt_version().getRevision());
        version.setBuild(entity.getlibvirt_version().getBuild());
        version.setFullVersion(entity.getlibvirt_version().getRpmName());
        model.setLibvirtVersion(version);
    }
    if (entity.getConsoleAddress() != null && !"".equals(entity.getConsoleAddress())) {
        model.setDisplay(new Display());
        model.getDisplay().setAddress(entity.getConsoleAddress());
    }
    return model;
}
#method_after
@Mapping(from = VDS.class, to = Host.class)
public static Host map(VDS entity, Host template) {
    Host model = template != null ? template : new Host();
    model.setId(entity.getId().toString());
    model.setName(entity.getVdsName());
    if (entity.getVdsGroupId() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getVdsGroupId().toString());
        model.setCluster(cluster);
    }
    model.setAddress(entity.getHostName());
    if (entity.getPort() > 0) {
        model.setPort(entity.getPort());
    }
    HostStatus status = map(entity.getStatus(), null);
    model.setStatus(StatusUtils.create(status));
    if (status == HostStatus.NON_OPERATIONAL) {
        model.getStatus().setDetail(entity.getNonOperationalReason().name().toLowerCase());
    }
    StorageManager sm = new StorageManager();
    sm.setPriority(entity.getVdsSpmPriority());
    sm.setValue(entity.getSpmStatus() == VdsSpmStatus.SPM);
    model.setStorageManager(sm);
    if (entity.getVersion() != null && entity.getVersion().getMajor() != -1 && entity.getVersion().getMinor() != -1 && entity.getVersion().getRevision() != -1 && entity.getVersion().getBuild() != -1) {
        Version version = new Version();
        version.setMajor(entity.getVersion().getMajor());
        version.setMinor(entity.getVersion().getMinor());
        version.setRevision(entity.getVersion().getRevision());
        version.setBuild(entity.getVersion().getBuild());
        version.setFullVersion(entity.getVersion().getRpmName());
        model.setVersion(version);
    }
    model.setOs(getHostOs(entity.getHostOs()));
    model.setKsm(new KSM());
    model.getKsm().setEnabled(Boolean.TRUE.equals(entity.getKsmState()));
    model.setTransparentHugepages(new TransparentHugePages());
    model.getTransparentHugepages().setEnabled(!(entity.getTransparentHugePagesState() == null || entity.getTransparentHugePagesState() == VdsTransparentHugePagesState.Never));
    if (entity.getIScsiInitiatorName() != null) {
        model.setIscsi(new IscsiDetails());
        model.getIscsi().setInitiator(entity.getIScsiInitiatorName());
    }
    model.setPowerManagement(map(entity, (PowerManagement) null));
    model.setHardwareInformation(map(entity, (HardwareInformation) null));
    CPU cpu = new CPU();
    CpuTopology cpuTopology = new CpuTopology();
    if (entity.getCpuSockets() != null) {
        cpuTopology.setSockets(entity.getCpuSockets());
        if (entity.getCpuCores() != null) {
            cpuTopology.setCores(entity.getCpuCores() / entity.getCpuSockets());
            if (entity.getCpuThreads() != null) {
                cpuTopology.setThreads(entity.getCpuThreads() / entity.getCpuCores());
            }
        }
    }
    cpu.setTopology(cpuTopology);
    cpu.setName(entity.getCpuModel());
    if (entity.getCpuSpeedMh() != null) {
        cpu.setSpeed(new BigDecimal(entity.getCpuSpeedMh()));
    }
    model.setCpu(cpu);
    VmSummary vmSummary = new VmSummary();
    vmSummary.setActive(entity.getVmActive());
    vmSummary.setMigrating(entity.getVmMigrating());
    vmSummary.setTotal(entity.getVmCount());
    model.setSummary(vmSummary);
    if (entity.getVdsType() != null) {
        HostType type = map(entity.getVdsType(), null);
        model.setType(type != null ? type.value() : null);
    }
    model.setMemory(Long.valueOf(entity.getPhysicalMemMb() == null ? 0 : entity.getPhysicalMemMb() * BYTES_IN_MEGABYTE));
    model.setMaxSchedulingMemory((int) entity.getMaxSchedulingMemory() * BYTES_IN_MEGABYTE);
    if (entity.getLibvirtVersion() != null && entity.getLibvirtVersion().getMajor() != -1 && entity.getLibvirtVersion().getMinor() != -1 && entity.getLibvirtVersion().getRevision() != -1 && entity.getLibvirtVersion().getBuild() != -1) {
        Version version = new Version();
        version.setMajor(entity.getLibvirtVersion().getMajor());
        version.setMinor(entity.getLibvirtVersion().getMinor());
        version.setRevision(entity.getLibvirtVersion().getRevision());
        version.setBuild(entity.getLibvirtVersion().getBuild());
        version.setFullVersion(entity.getLibvirtVersion().getRpmName());
        model.setLibvirtVersion(version);
    }
    if (entity.getConsoleAddress() != null && !"".equals(entity.getConsoleAddress())) {
        model.setDisplay(new Display());
        model.getDisplay().setAddress(entity.getConsoleAddress());
    }
    return model;
}
#end_block

#method_before
@Mapping(from = VDS.class, to = PowerManagement.class)
public static PowerManagement map(VDS entity, PowerManagement template) {
    PowerManagement model = template != null ? template : new PowerManagement();
    model.setType(entity.getpm_type());
    model.setEnabled(entity.getpm_enabled());
    model.setAddress(entity.getManagmentIp());
    model.setUsername(entity.getpm_user());
    if (entity.getPmOptionsMap() != null) {
        model.setOptions(map(entity.getPmOptionsMap(), null));
    }
    if (entity.getPmProxyPreferences() != null) {
        PmProxies pmProxies = new PmProxies();
        String[] proxies = StringUtils.split(entity.getPmProxyPreferences(), ",");
        for (String proxy : proxies) {
            PmProxy pmProxy = new PmProxy();
            pmProxy.setType(proxy);
            pmProxies.getPmProxy().add(pmProxy);
        }
        model.setPmProxies(pmProxies);
    }
    if (entity.getpm_enabled()) {
        // Set Primary Agent
        Agent agent = new Agent();
        if (!StringUtils.isEmpty(entity.getManagmentIp())) {
            agent.setType(entity.getpm_type());
            agent.setAddress(entity.getManagmentIp());
            agent.setUsername(entity.getpm_user());
            if (entity.getPmOptionsMap() != null) {
                agent.setOptions(map(entity.getPmOptionsMap(), null));
            }
            agent.setOrder(1);
            model.setAgents(new Agents());
            model.getAgents().getAgents().add(agent);
        }
        // Set Secondary Agent
        if (!StringUtils.isEmpty(entity.getPmSecondaryIp())) {
            agent = new Agent();
            agent.setType(entity.getPmSecondaryType());
            agent.setAddress(entity.getPmSecondaryIp());
            agent.setUsername(entity.getPmSecondaryuser());
            if (entity.getPmOptionsMap() != null) {
                agent.setOptions(map(entity.getPmSecondaryOptionsMap(), null));
            }
            agent.setOrder(2);
            agent.setConcurrent(entity.isPmSecondaryConcurrent());
            model.getAgents().getAgents().add(agent);
        }
    }
    return model;
}
#method_after
@Mapping(from = VDS.class, to = PowerManagement.class)
public static PowerManagement map(VDS entity, PowerManagement template) {
    PowerManagement model = template != null ? template : new PowerManagement();
    model.setType(entity.getPmType());
    model.setEnabled(entity.getpm_enabled());
    model.setAddress(entity.getManagmentIp());
    model.setUsername(entity.getPmUser());
    if (entity.getPmOptionsMap() != null) {
        model.setOptions(map(entity.getPmOptionsMap(), null));
    }
    if (entity.getPmProxyPreferences() != null) {
        PmProxies pmProxies = new PmProxies();
        String[] proxies = StringUtils.split(entity.getPmProxyPreferences(), ",");
        for (String proxy : proxies) {
            PmProxy pmProxy = new PmProxy();
            pmProxy.setType(proxy);
            pmProxies.getPmProxy().add(pmProxy);
        }
        model.setPmProxies(pmProxies);
    }
    if (entity.getpm_enabled()) {
        // Set Primary Agent
        Agent agent = new Agent();
        if (!StringUtils.isEmpty(entity.getManagmentIp())) {
            agent.setType(entity.getPmType());
            agent.setAddress(entity.getManagmentIp());
            agent.setUsername(entity.getPmUser());
            if (entity.getPmOptionsMap() != null) {
                agent.setOptions(map(entity.getPmOptionsMap(), null));
            }
            agent.setOrder(1);
            model.setAgents(new Agents());
            model.getAgents().getAgents().add(agent);
        }
        // Set Secondary Agent
        if (!StringUtils.isEmpty(entity.getPmSecondaryIp())) {
            agent = new Agent();
            agent.setType(entity.getPmSecondaryType());
            agent.setAddress(entity.getPmSecondaryIp());
            agent.setUsername(entity.getPmSecondaryUser());
            if (entity.getPmOptionsMap() != null) {
                agent.setOptions(map(entity.getPmSecondaryOptionsMap(), null));
            }
            agent.setOrder(2);
            agent.setConcurrent(entity.isPmSecondaryConcurrent());
            model.getAgents().getAgents().add(agent);
        }
    }
    return model;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    List<String> macsToRemove = getVmNetworkInterfaceDao().getAllMacsByStoragePool(getStoragePool().getId());
    removeNetworks();
    /**
     * Detach master storage domain last.
     */
    List<storage_domains> storageDomains = DbFacade.getInstance().getStorageDomainDao().getAllForStoragePool(getStoragePool().getId());
    Collections.sort(storageDomains, new Comparator<storage_domains>() {

        @Override
        public int compare(storage_domains o1, storage_domains o2) {
            return o1.getstorage_domain_type().compareTo(o2.getstorage_domain_type());
        }
    });
    if (storageDomains.size() > 0) {
        if (!getParameters().getForceDelete() && getAllRunningVdssInPool().size() > 0) {
            if (!regularRemoveStorageDomains(storageDomains)) {
                setSucceeded(false);
                return;
            }
        } else if (getParameters().getForceDelete()) {
            forceRemoveStorageDomains(storageDomains);
        } else {
            return;
        }
    }
    getStoragePoolDAO().remove(getStoragePool().getId());
    setSucceeded(true);
    if (getSucceeded()) {
        MacPoolManager.getInstance().freeMacs(macsToRemove);
    }
}
#method_after
@Override
protected void executeCommand() {
    List<String> macsToRemove = getVmNetworkInterfaceDao().getAllMacsByDataCenter(getStoragePool().getId());
    removeNetworks();
    /**
     * Detach master storage domain last.
     */
    List<storage_domains> storageDomains = DbFacade.getInstance().getStorageDomainDao().getAllForStoragePool(getStoragePool().getId());
    Collections.sort(storageDomains, new Comparator<storage_domains>() {

        @Override
        public int compare(storage_domains o1, storage_domains o2) {
            return o1.getstorage_domain_type().compareTo(o2.getstorage_domain_type());
        }
    });
    if (storageDomains.size() > 0) {
        if (!getParameters().getForceDelete() && getAllRunningVdssInPool().size() > 0) {
            if (!regularRemoveStorageDomains(storageDomains)) {
                setSucceeded(false);
                return;
            }
        } else if (getParameters().getForceDelete()) {
            forceRemoveStorageDomains(storageDomains);
        } else {
            return;
        }
    }
    getStoragePoolDAO().remove(getStoragePool().getId());
    MacPoolManager.getInstance().freeMacs(macsToRemove);
    setSucceeded(true);
}
#end_block

#method_before
@Test
public void testGetAllMacsByStoragePool() throws Exception {
    List<String> result = dao.getAllMacsByStoragePool(FixturesTool.STORAGE_POOL_NFS_2);
    assertEquals(FixturesTool.MAC_ADDRESS, result.get(0));
}
#method_after
@Test
public void testGetAllMacsByStoragePool() throws Exception {
    List<String> result = dao.getAllMacsByDataCenter(FixturesTool.STORAGE_POOL_NFS_2);
    assertEquals(FixturesTool.MAC_ADDRESS, result.get(0));
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (isEmptyCommand()) {
        setSucceeded(true);
        return;
    }
    T bckndCmdParams = getParameters();
    final SetupNetworksVdsCommandParameters vdsCmdParams = new SetupNetworksVdsCommandParameters(getVdsId(), getNetworks(), getRemovedNetworks(), getBonds(), getRemovedBonds(), getInterfaces());
    vdsCmdParams.setForce(bckndCmdParams.isForce());
    vdsCmdParams.setCheckConnectivity(bckndCmdParams.isCheckConnectivity());
    int timeout = bckndCmdParams.getConectivityTimeout() != null ? bckndCmdParams.getConectivityTimeout() : Config.<Integer>GetValue(ConfigValues.NetworkConnectivityCheckTimeoutInSeconds);
    vdsCmdParams.setConectivityTimeout(timeout);
    FutureVDSCall<VDSReturnValue> setupNetworksTask = createFutureTask(vdsCmdParams);
    if (bckndCmdParams.isCheckConnectivity()) {
        pollInterruptively(setupNetworksTask);
    }
    try {
        VDSReturnValue retVal = setupNetworksTask.get(timeout, TimeUnit.SECONDS);
        if (retVal != null) {
            VdsHandler.handleVdsResult(retVal);
            if (retVal.getSucceeded()) {
                setSucceeded(TransactionSupport.executeInNewTransaction(updateVdsNetworksInTx(bckndCmdParams)));
            }
        }
    } catch (TimeoutException e) {
        log.debugFormat("Setup networks command timed out for {0} seconds", timeout);
    }
}
#method_after
@Override
protected void executeCommand() {
    if (noChangesDetected()) {
        setSucceeded(true);
        return;
    }
    T bckndCmdParams = getParameters();
    final SetupNetworksVdsCommandParameters vdsCmdParams = new SetupNetworksVdsCommandParameters(getVdsId(), getNetworks(), getRemovedNetworks(), getBonds(), getRemovedBonds(), getInterfaces());
    vdsCmdParams.setForce(bckndCmdParams.isForce());
    vdsCmdParams.setCheckConnectivity(bckndCmdParams.isCheckConnectivity());
    int timeout = bckndCmdParams.getConectivityTimeout() != null ? bckndCmdParams.getConectivityTimeout() : Config.<Integer>GetValue(ConfigValues.NetworkConnectivityCheckTimeoutInSeconds);
    vdsCmdParams.setConectivityTimeout(timeout);
    FutureVDSCall<VDSReturnValue> setupNetworksTask = createFutureTask(vdsCmdParams);
    if (bckndCmdParams.isCheckConnectivity()) {
        pollInterruptively(setupNetworksTask);
    }
    try {
        VDSReturnValue retVal = setupNetworksTask.get(timeout, TimeUnit.SECONDS);
        if (retVal != null) {
            VdsHandler.handleVdsResult(retVal);
            if (retVal.getSucceeded()) {
                setSucceeded(TransactionSupport.executeInNewTransaction(updateVdsNetworksInTx(bckndCmdParams)));
            }
        }
    } catch (TimeoutException e) {
        log.debugFormat("Setup networks command timed out for {0} seconds", timeout);
    }
}
#end_block

