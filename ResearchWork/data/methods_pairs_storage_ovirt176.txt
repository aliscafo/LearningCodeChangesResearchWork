204
#method_before
private Set<SupportedAdditionalClusterFeature> getSupportedAdditionalClusterFeatures(Boolean enabled) {
    SupportedAdditionalClusterFeature clusterFeature = new SupportedAdditionalClusterFeature();
    AdditionalFeature feature = new AdditionalFeature(Guid.newGuid(), "libgfapi_supported", Version.v4_1, null, null);
    clusterFeature.setFeature(feature);
    clusterFeature.setEnabled(enabled);
    return Collections.singleton(clusterFeature);
}
#method_after
private Set<SupportedAdditionalClusterFeature> getSupportedAdditionalClusterFeatures(Boolean enabled) {
    SupportedAdditionalClusterFeature clusterFeature = new SupportedAdditionalClusterFeature();
    AdditionalFeature feature = new AdditionalFeature(Guid.newGuid(), VmInfoBuildUtils.VDSM_LIBGF_CAP_NAME, Version.v4_1, null, null);
    clusterFeature.setFeature(feature);
    clusterFeature.setEnabled(enabled);
    return Collections.singleton(clusterFeature);
}
#end_block

#method_before
public static void cleanupSsoSession(SsoContext ssoContext, SsoSession ssoSession, Set<String> associateClientIds) {
    try {
        ssoContext.removeSsoSession(ssoSession.getAccessToken());
        HttpSession existingSession = ssoSession.getHttpSession();
        if (existingSession == null) {
            log.debug("No existing Session found for token: {}, cannot invalidate session", ssoSession.getAccessToken());
        } else {
            log.debug("Existing Session found for token: {}, invalidating session", ssoSession.getAccessToken());
            existingSession.invalidate();
        }
        invokeAuthnLogout(ssoContext, ssoSession);
        SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken());
    } catch (IllegalStateException ex) {
        log.debug("Unable to cleanup SsoSession: {}", ex.getMessage());
    } catch (Exception ex) {
        log.error("Unable to cleanup SsoSession: {}", ex.getMessage());
        log.debug("Exception", ex);
    }
}
#method_after
public static void cleanupSsoSession(SsoContext ssoContext, SsoSession ssoSession, Set<String> associateClientIds) {
    try {
        ssoContext.removeSsoSession(ssoSession.getAccessToken());
        HttpSession existingSession = ssoSession.getHttpSession();
        if (existingSession == null) {
            log.debug("No existing Session found for token: {}, cannot invalidate session", ssoSession.getAccessToken());
        } else {
            log.debug("Existing Session found for token: {}, invalidating session", ssoSession.getAccessToken());
            try {
                existingSession.invalidate();
            } catch (IllegalStateException ex) {
                log.debug("Unable to cleanup SsoSession: {}", ex.getMessage());
            }
        }
        invokeAuthnLogout(ssoContext, ssoSession);
        SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken());
    } catch (Exception ex) {
        log.error("Unable to cleanup SsoSession: {}", ex.getMessage());
        log.debug("Exception", ex);
    }
}
#end_block

#method_before
public static void onCancelUpload(ConfirmationModel model, List<? extends Disk> disks) {
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress(null);
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Disk disk : disks) {
        ImageTransfer updates = new ImageTransfer();
        updates.setPhase(ImageTransferPhase.CANCELLED);
        TransferImageStatusParameters parameters = new TransferImageStatusParameters();
        parameters.setUpdates(updates);
        parameters.setDiskId(disk.getId());
        list.add(parameters);
    }
    Frontend.getInstance().runMultipleAction(ActionType.TransferImageStatus, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        localModel.getCancelCommand().execute();
    }, model);
}
#method_after
public static void onCancelUpload(ConfirmationModel model, List<? extends Disk> disks) {
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress(null);
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Disk disk : disks) {
        ImageTransfer updates = new ImageTransfer();
        updates.setPhase(ImageTransferPhase.CANCELLED);
        TransferImageStatusParameters parameters = new TransferImageStatusParameters();
        parameters.setUpdates(updates);
        parameters.setDiskId(disk.getId());
        list.add(parameters);
    }
    Frontend.getInstance().runMultipleAction(ActionType.TransferImageStatus, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        // parent.cancel();
        localModel.getCancelCommand().execute();
    }, model);
}
#end_block

#method_before
String getPrefixedKey(String key) {
    // $NON-NLS-1$
    return CLIENT_STORAGE_KEY_PREFIX + "_" + key;
}
#method_after
String getPrefixedKey(String key) {
    return CLIENT_STORAGE_KEY_PREFIX + key;
}
#end_block

#method_before
private void updateProperties() {
    final VmPool pool = getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    Frontend.getInstance().runQuery(QueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), new AsyncQuery<>(new AsyncCallback<QueryReturnValue>() {

        @Override
        public void onSuccess(QueryReturnValue result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) result.getReturnValue());
            }
            if (getvm() != null) {
                setTemplate(vmTemplateNameRenderer.render(getvm()));
                setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(getvm().getNumOfCpus(), getvm().getNumOfSockets(), getvm().getCpuPerSocket(), getvm().getThreadsPerCpu()));
                setMonitorCount(getvm().getNumOfMonitors());
                setOS(getvm().getVmOsId());
                // $NON-NLS-1$
                setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                Translator translator = EnumTranslator.getInstance();
                setDefaultDisplayType(translator.translate(getvm().getDefaultDisplayType()));
                setOrigin(translator.translate(getvm().getOrigin()));
                setUsbPolicy(translator.translate(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.getInstance().isWindowsOsType(getvm().getVmOsId()));
                setOptimizedForSystemProfile(translator.translate(getvm().getVmType()));
                setHasTimeZone(AsyncDataProvider.getInstance().isWindowsOsType(getvm().getVmOsId()));
                setTimeZone(getvm().getTimeZone());
                setIsStateless(!pool.isStateful());
                setQuotaName(getvm().getQuotaName());
                setHasDefaultHost(getvm().getDedicatedVmForVdsList().size() > 0);
                if (getHasDefaultHost()) {
                    Frontend.getInstance().runQuery(QueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getClusterName() + " sortby name", SearchType.VDS), new AsyncQuery<QueryReturnValue>(returnValue1 -> {
                        // $NON-NLS-1$
                        String defaultHost1 = "";
                        ArrayList<VDS> hosts = returnValue1.getReturnValue();
                        for (VDS host : hosts) {
                            if (getvm().getDedicatedVmForVdsList().contains(host.getId())) {
                                if (defaultHost1.isEmpty()) {
                                    defaultHost1 = host.getName();
                                } else {
                                    // $NON-NLS-1$
                                    defaultHost1 += ", " + host.getName();
                                }
                            }
                        }
                        setDefaultHost(defaultHost1);
                    }));
                } else {
                    setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
                }
                if (getvm() != null) {
                    PoolGeneralModel.super.updateProperties(getvm().getId());
                }
            } else {
                setTemplate(null);
                setCpuCount(0);
                setMonitorCount(0);
                setOS(0);
                setDefinedMemory(null);
                setMinAllocatedMemory(null);
                setDefaultDisplayType(null);
                setHasDomain(false);
                setDomain(null);
                setHasTimeZone(false);
                setTimeZone(null);
                setUsbPolicy(null);
                setDefaultHost(null);
                setIsStateless(!pool.isStateful());
                // $NON-NLS-1$
                setGraphicsType("");
                setOptimizedForSystemProfile("");
                getUpdateCompleteEvent().raise(this, EventArgs.EMPTY);
            }
        }
    }));
}
#method_after
private void updateProperties() {
    final VmPool pool = getEntity();
    setName(pool.getName());
    setDescription(pool.getVmPoolDescription());
    Frontend.getInstance().runQuery(QueryType.GetVmDataByPoolId, new IdQueryParameters(pool.getVmPoolId()), new AsyncQuery<>(new AsyncCallback<QueryReturnValue>() {

        @Override
        public void onSuccess(QueryReturnValue result) {
            // refactor to "switch ... case...".
            if (result != null) {
                setvm((VM) result.getReturnValue());
            }
            if (getvm() != null) {
                setTemplate(vmTemplateNameRenderer.render(getvm()));
                setCpuInfo(ConstantsManager.getInstance().getMessages().cpuInfoLabel(getvm().getNumOfCpus(), getvm().getNumOfSockets(), getvm().getCpuPerSocket(), getvm().getThreadsPerCpu()));
                setMonitorCount(getvm().getNumOfMonitors());
                setOS(getvm().getVmOsId());
                // $NON-NLS-1$
                setDefinedMemory(getvm().getVmMemSizeMb() + " MB");
                // $NON-NLS-1$
                setMinAllocatedMemory(getvm().getMinAllocatedMem() + " MB");
                Translator translator = EnumTranslator.getInstance();
                setDefaultDisplayType(translator.translate(getvm().getDefaultDisplayType()));
                setOrigin(translator.translate(getvm().getOrigin()));
                setUsbPolicy(translator.translate(getvm().getUsbPolicy()));
                setHasDomain(AsyncDataProvider.getInstance().isWindowsOsType(getvm().getVmOsId()));
                setOptimizedForSystemProfile(translator.translate(getvm().getVmType()));
                setHasTimeZone(AsyncDataProvider.getInstance().isWindowsOsType(getvm().getVmOsId()));
                setTimeZone(getvm().getTimeZone());
                setIsStateless(!pool.isStateful());
                setQuotaName(getvm().getQuotaName());
                setHasDefaultHost(getvm().getDedicatedVmForVdsList().size() > 0);
                if (getHasDefaultHost()) {
                    Frontend.getInstance().runQuery(QueryType.Search, new SearchParameters(// $NON-NLS-1$
                    "Host: cluster = " + getvm().getClusterName() + " sortby name", SearchType.VDS), new AsyncQuery<QueryReturnValue>(returnValue1 -> {
                        // $NON-NLS-1$
                        String defaultHost1 = "";
                        ArrayList<VDS> hosts = returnValue1.getReturnValue();
                        for (VDS host : hosts) {
                            if (getvm().getDedicatedVmForVdsList().contains(host.getId())) {
                                if (defaultHost1.isEmpty()) {
                                    defaultHost1 = host.getName();
                                } else {
                                    // $NON-NLS-1$
                                    defaultHost1 += ", " + host.getName();
                                }
                            }
                        }
                        setDefaultHost(defaultHost1);
                    }));
                } else {
                    setDefaultHost(ConstantsManager.getInstance().getConstants().anyHostInCluster());
                }
                if (getvm() != null) {
                    PoolGeneralModel.super.updateProperties(getvm().getId());
                }
            } else {
                setTemplate(null);
                setCpuCount(0);
                setMonitorCount(0);
                setOS(0);
                setDefinedMemory(null);
                setMinAllocatedMemory(null);
                setDefaultDisplayType(null);
                setHasDomain(false);
                setDomain(null);
                setHasTimeZone(false);
                setTimeZone(null);
                setUsbPolicy(null);
                setDefaultHost(null);
                setIsStateless(!pool.isStateful());
                // $NON-NLS-1$
                setGraphicsType("");
                // $NON-NLS-1$
                setOptimizedForSystemProfile("");
                getUpdateCompleteEvent().raise(this, EventArgs.EMPTY);
            }
        }
    }));
}
#end_block

#method_before
@Override
public void edit(final HostModel object) {
    driver.edit(object);
    setTabIndexes(0);
    object.getFetchResult().getEntityChangedEvent().addListener((ev, sender, args) -> {
        String fetchResultText = object.getFetchResult().getEntity();
        if (ConstantsManager.getInstance().getConstants().errorLoadingFingerprint().equals(fetchResultText)) {
            fetchResult.addStyleName(style.fetchResultErrorLabel());
        } else {
            fetchResult.removeStyleName(style.fetchResultErrorLabel());
        }
        fetchResult.setText(fetchResultText);
    });
    object.getPkSection().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            setPkPasswordSectionVisiblity(false);
        }
    });
    object.getProviders().getSelectedItemChangedEvent().addListener((ev, sender, args) -> object.updateHosts());
    object.getExternalHostProviderEnabled().getEntityChangedEvent().addListener((ev, sender, args) -> {
        boolean showForemanProviders = object.getExternalHostProviderEnabled().getEntity();
        boolean doProvisioning = object.externalProvisionEnabled();
        boolean isProvisioned = showForemanProviders && doProvisioning;
        providersEditor.setVisible(showForemanProviders);
        // showing or hiding radio buttons
        provisionedHostSection.setVisible(isProvisioned);
        discoveredHostSection.setVisible(isProvisioned);
        // disabling ip and name textbox when using provisioned hosts
        hostAddressEditor.setEnabled(!isProvisioned);
        // $NON-NLS-1$
        String disabledLabelStyle = "labelDisabled";
        if (isProvisioned) {
            hostAddressLabel.addStyleName(disabledLabelStyle);
        } else {
            hostAddressLabel.removeStyleName(disabledLabelStyle);
        }
        if (isProvisioned) {
            object.updateHosts();
            object.getIsDiscoveredHosts().setEntity(true);
        } else {
            if (doProvisioning) {
                object.cleanHostParametersFields();
            }
            hideProviderWidgets(object);
            object.getIsDiscoveredHosts().setEntity(null);
        }
    });
    object.getIsDiscoveredHosts().getEntityChangedEvent().addListener((ev, sender, args) -> {
        if (object.getIsDiscoveredHosts().getEntity() != null) {
            if (object.getIsDiscoveredHosts().getEntity()) {
                rbDiscoveredHost.asRadioButton().setValue(true);
                showDiscoveredHostsWidgets(true);
            } else if (!object.getIsDiscoveredHosts().getEntity()) {
                rbProvisionedHost.asRadioButton().setValue(true);
                showProvisionedHostsWidgets(true);
            }
        }
    });
    nameEditor.asValueBox().addKeyDownHandler(event -> Scheduler.get().scheduleDeferred(() -> {
        if (object.getExternalHostProviderEnabled().getEntity() && Boolean.TRUE.equals(object.getIsDiscoveredHosts().getEntity())) {
            ExternalHostGroup dhg = (ExternalHostGroup) object.getExternalHostGroups().getSelectedItem();
            if (dhg != null) {
                String base = nameEditor.asEditor().getSubEditor().getValue();
                if (base == null) {
                    base = constants.empty();
                }
                String generatedHostName = // $NON-NLS-1$
                base + "." + (dhg.getDomainName() != null ? dhg.getDomainName() : constants.empty());
                object.getHost().setEntity(generatedHostName);
            }
        }
    }));
    rbPassword.setValue(true);
    rbPassword.setFocus(true);
    displayPassPkWindow(true);
    fetchSshFingerprint.hideLabel();
    object.setAuthenticationMethod(AuthenticationMethod.Password);
    rbPassword.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.Password);
        displayPassPkWindow(true);
    });
    rbPublicKey.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.PublicKey);
        displayPassPkWindow(false);
    });
    updateHostsButton.setResource(resources.searchButtonImage());
    // Create SPM related controls.
    IEventListener<EventArgs> spmListener = (ev, sender, args) -> createSpmControls(object);
    object.getSpmPriority().getItemsChangedEvent().addListener(spmListener);
    object.getSpmPriority().getSelectedItemChangedEvent().addListener(spmListener);
    createSpmControls(object);
    initExternalHostProviderWidgets(object.showExternalProviderPanel());
    // TODO: remove setIsChangeable when configured ssh username is enabled
    userNameEditor.setEnabled(false);
    networkProviderTab.setVisible(object.showNetworkProviderTab());
    networkProviderWidget.edit(object.getNetworkProviderModel());
    this.fenceAgentsEditor.edit(object.getFenceAgentListModel());
    this.proxySourceEditor.edit(object.getPmProxyPreferencesList());
    addTextAndLinkAlert(fetchPanel, constants.fetchingHostFingerprint(), object.getSSHFingerPrint());
    providerSearchFilterLabel.setText(constants.hostPopupProviderSearchFilter());
    nameEditor.setFocus(true);
    hostedEngineTab.setVisible(object.getIsHeSystem() && object.getIsNew());
    object.getHostedEngineWarning().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        EntityModel entity = (EntityModel) sender;
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            hostedEngineWarningLabel.setVisible(entity.getIsAvailable());
        }
    });
    affinityLabelSelectionWidget.getListWidget().init(object.getLabelList());
    object.getLabelList().getItemsChangedEvent().addListener((ev, sender, args) -> {
        if (object.getLabelList().getSelectedItems() == null) {
            object.getLabelList().setSelectedItems(new ArrayList<>());
        }
        affinityLabelSelectionWidget.getListWidget().refreshItems();
    });
    object.getLabelList().getSelectedItemsChangedEvent().addListener((ev, sender, args) -> {
        if (object.getLabelList().getSelectedItems() != null) {
            affinityLabelSelectionWidget.getListWidget().refreshItems();
        }
    });
}
#method_after
@Override
public void edit(final HostModel object) {
    driver.edit(object);
    setTabIndexes(0);
    object.getFetchResult().getEntityChangedEvent().addListener((ev, sender, args) -> {
        String fetchResultText = object.getFetchResult().getEntity();
        if (ConstantsManager.getInstance().getConstants().errorLoadingFingerprint().equals(fetchResultText)) {
            fetchResult.addStyleName(style.fetchResultErrorLabel());
        } else {
            fetchResult.removeStyleName(style.fetchResultErrorLabel());
        }
        fetchResult.setText(fetchResultText);
    });
    object.getPkSection().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            setPkPasswordSectionVisiblity(false);
        }
    });
    object.getProviders().getSelectedItemChangedEvent().addListener((ev, sender, args) -> object.updateHosts());
    object.getExternalHostProviderEnabled().getEntityChangedEvent().addListener((ev, sender, args) -> {
        boolean showForemanProviders = object.getExternalHostProviderEnabled().getEntity();
        boolean doProvisioning = object.externalProvisionEnabled();
        boolean isProvisioned = showForemanProviders && doProvisioning;
        providersEditor.setVisible(showForemanProviders);
        // showing or hiding radio buttons
        provisionedHostSection.setVisible(isProvisioned);
        discoveredHostSection.setVisible(isProvisioned);
        // disabling ip and name textbox when using provisioned hosts
        hostAddressEditor.setEnabled(!isProvisioned);
        hostAddressLabel.setStyleName(OvirtCss.LABEL_DISABLED, isProvisioned);
        if (isProvisioned) {
            object.updateHosts();
            object.getIsDiscoveredHosts().setEntity(true);
        } else {
            if (doProvisioning) {
                object.cleanHostParametersFields();
            }
            hideProviderWidgets(object);
            object.getIsDiscoveredHosts().setEntity(null);
        }
    });
    object.getIsDiscoveredHosts().getEntityChangedEvent().addListener((ev, sender, args) -> {
        if (object.getIsDiscoveredHosts().getEntity() != null) {
            if (object.getIsDiscoveredHosts().getEntity()) {
                rbDiscoveredHost.asRadioButton().setValue(true);
                showDiscoveredHostsWidgets(true);
            } else if (!object.getIsDiscoveredHosts().getEntity()) {
                rbProvisionedHost.asRadioButton().setValue(true);
                showProvisionedHostsWidgets(true);
            }
        }
    });
    nameEditor.asValueBox().addKeyDownHandler(event -> Scheduler.get().scheduleDeferred(() -> {
        if (object.getExternalHostProviderEnabled().getEntity() && Boolean.TRUE.equals(object.getIsDiscoveredHosts().getEntity())) {
            ExternalHostGroup dhg = (ExternalHostGroup) object.getExternalHostGroups().getSelectedItem();
            if (dhg != null) {
                String base = nameEditor.asEditor().getSubEditor().getValue();
                if (base == null) {
                    base = constants.empty();
                }
                String generatedHostName = // $NON-NLS-1$
                base + "." + (dhg.getDomainName() != null ? dhg.getDomainName() : constants.empty());
                object.getHost().setEntity(generatedHostName);
            }
        }
    }));
    rbPassword.setValue(true);
    rbPassword.setFocus(true);
    displayPassPkWindow(true);
    fetchSshFingerprint.hideLabel();
    object.setAuthenticationMethod(AuthenticationMethod.Password);
    rbPassword.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.Password);
        displayPassPkWindow(true);
    });
    rbPublicKey.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.PublicKey);
        displayPassPkWindow(false);
    });
    updateHostsButton.setResource(resources.searchButtonImage());
    // Create SPM related controls.
    IEventListener<EventArgs> spmListener = (ev, sender, args) -> createSpmControls(object);
    object.getSpmPriority().getItemsChangedEvent().addListener(spmListener);
    object.getSpmPriority().getSelectedItemChangedEvent().addListener(spmListener);
    createSpmControls(object);
    initExternalHostProviderWidgets(object.showExternalProviderPanel());
    // TODO: remove setIsChangeable when configured ssh username is enabled
    userNameEditor.setEnabled(false);
    networkProviderTab.setVisible(object.showNetworkProviderTab());
    networkProviderWidget.edit(object.getNetworkProviderModel());
    this.fenceAgentsEditor.edit(object.getFenceAgentListModel());
    this.proxySourceEditor.edit(object.getPmProxyPreferencesList());
    addTextAndLinkAlert(fetchPanel, constants.fetchingHostFingerprint(), object.getSSHFingerPrint());
    providerSearchFilterLabel.setText(constants.hostPopupProviderSearchFilter());
    nameEditor.setFocus(true);
    hostedEngineTab.setVisible(object.getIsHeSystem() && object.getIsNew());
    object.getHostedEngineWarning().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        EntityModel entity = (EntityModel) sender;
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            hostedEngineWarningLabel.setVisible(entity.getIsAvailable());
        }
    });
    affinityLabelSelectionWidget.init(object.getLabelList());
}
#end_block

#method_before
@Override
protected boolean validate() {
    if (!super.validate()) {
        return false;
    }
    oldPool = vmPoolDao.get(getVmPool().getVmPoolId());
    if (oldPool == null) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND);
    }
    if (getParameters().getVmsCount() < 0) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL);
    }
    if (oldPool.getVmPoolType() != getParameters().getVmPool().getVmPoolType()) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_POOL_TYPE);
    }
    if (oldPool.isStateful() != getParameters().getVmPool().isStateful()) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_POOL_STATEFUL_OPTION);
    }
    if (!oldPool.getName().equals(getParameters().getVmPool().getName())) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_POOL_NAME);
    }
    if (oldPool.isAutoStorageSelect() != (getParameters().getVmPool().isAutoStorageSelect())) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_AUTO_STORAGE_SELECT);
    }
    return true;
}
#method_after
@Override
protected boolean validate() {
    if (!super.validate()) {
        return false;
    }
    oldPool = vmPoolDao.get(getVmPool().getVmPoolId());
    if (oldPool == null) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND);
    }
    if (getParameters().getVmsCount() < 0) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL);
    }
    if (oldPool.getVmPoolType() != getParameters().getVmPool().getVmPoolType()) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_POOL_TYPE);
    }
    if (oldPool.isStateful() != getParameters().getVmPool().isStateful()) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_POOL_STATEFUL_OPTION);
    }
    if (!oldPool.getName().equals(getParameters().getVmPool().getName())) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_POOL_NAME);
    }
    if (oldPool.isAutoStorageSelect() != getParameters().getVmPool().isAutoStorageSelect()) {
        return failValidation(EngineMessage.VM_POOL_CANNOT_CHANGE_AUTO_STORAGE_SELECT);
    }
    return true;
}
#end_block

#method_before
private void addListeners(ListModel<Label> labelList) {
    labelList.getItemsChangedEvent().addListener((ev, sender, args) -> {
        if (labelList.getSelectedItems() == null) {
            labelList.setSelectedItems(new ArrayList<>());
        }
        getListWidget().refreshItems();
        boolean labelsAvailable = labelList.getItems() != null && !labelList.getItems().isEmpty();
        getAddSelectedItemButton().setEnabled(labelsAvailable);
        getSelectionWidget().getFilterListEditor().setEnabled(labelsAvailable);
    });
    labelList.getSelectedItemsChangedEvent().addListener((ev, sender, args) -> {
        if (labelList.getSelectedItems() != null) {
            getListWidget().refreshItems();
        }
    });
}
#method_after
private void addListeners(ListModel<Label> labelList) {
    labelList.getItemsChangedEvent().addListener((ev, sender, args) -> {
        if (labelList.getSelectedItems() == null) {
            labelList.setSelectedItems(new ArrayList<>());
        }
        getListWidget().refreshItems();
        boolean labelsAvailable = !labelList.getItems().isEmpty();
        getAddSelectedItemButton().setEnabled(labelsAvailable);
        getSelectionWidget().getFilterListEditor().setEnabled(labelsAvailable);
    });
    labelList.getSelectedItemsChangedEvent().addListener((ev, sender, args) -> {
        if (labelList.getSelectedItems() != null) {
            getListWidget().refreshItems();
        }
    });
}
#end_block

#method_before
@Override
@ExcludeClassInterceptors
public VdcReturnValueBase runInternalAction(ActionType actionType, ActionParametersBase parameters) {
    return runActionImpl(actionType, parameters, true, null);
}
#method_after
@Override
@ExcludeClassInterceptors
public ActionReturnValue runInternalAction(ActionType actionType, ActionParametersBase parameters) {
    return runActionImpl(actionType, parameters, true, null);
}
#end_block

#method_before
@Override
public VdcReturnValueBase runAction(ActionType actionType, ActionParametersBase parameters) {
    VdcReturnValueBase returnValue = notAllowToRunAction(actionType);
    if (returnValue != null) {
        return returnValue;
    }
    return runActionImpl(actionType, parameters, false, null);
}
#method_after
@Override
public ActionReturnValue runAction(ActionType actionType, ActionParametersBase parameters) {
    ActionReturnValue returnValue = notAllowToRunAction(actionType);
    if (returnValue != null) {
        return returnValue;
    }
    return runActionImpl(actionType, parameters, false, null);
}
#end_block

#method_before
private VdcReturnValueBase notAllowToRunAction(ActionType actionType) {
    // Since reload of configuration values is not fully supported, we have to get this value from DB
    // and can not use the cached configuration.
    String mode = vdcOptionDao.getByNameAndVersion(ConfigValues.EngineMode.name(), ConfigCommon.defaultConfigurationVersion).getOptionValue();
    if (EngineWorkingMode.MAINTENANCE.name().equalsIgnoreCase(mode)) {
        return getErrorCommandReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE);
    } else if (EngineWorkingMode.PREPARE.name().equalsIgnoreCase(mode)) {
        return notAllowedInPrepForMaintMode(actionType);
    }
    return null;
}
#method_after
private ActionReturnValue notAllowToRunAction(ActionType actionType) {
    // Since reload of configuration values is not fully supported, we have to get this value from DB
    // and can not use the cached configuration.
    String mode = vdcOptionDao.getByNameAndVersion(ConfigValues.EngineMode.name(), ConfigCommon.defaultConfigurationVersion).getOptionValue();
    if (EngineWorkingMode.MAINTENANCE.name().equalsIgnoreCase(mode)) {
        return getErrorCommandReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE);
    } else if (EngineWorkingMode.PREPARE.name().equalsIgnoreCase(mode)) {
        return notAllowedInPrepForMaintMode(actionType);
    }
    return null;
}
#end_block

#method_before
private VdcReturnValueBase runActionImpl(ActionType actionType, ActionParametersBase parameters, boolean runAsInternal, CommandContext context) {
    VdcReturnValueBase result;
    // If non-monitored command is invoked with JobId or ActionId as parameters, reject this command on can do action.
    if (!actionType.isActionMonitored() && !isActionExternal(actionType) && (parameters.getJobId() != null || parameters.getStepId() != null)) {
        result = new VdcReturnValueBase();
        result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString());
        result.setValid(false);
        result.setSucceeded(false);
    } else {
        if (!runAsInternal) {
            logExecution(parameters.getSessionId(), String.format("command %s", actionType));
        }
        CommandBase<?> command = CommandsFactory.createCommand(actionType, parameters, context);
        result = runAction(command, runAsInternal);
    }
    return result;
}
#method_after
private ActionReturnValue runActionImpl(ActionType actionType, ActionParametersBase parameters, boolean runAsInternal, CommandContext context) {
    ActionReturnValue result;
    // If non-monitored command is invoked with JobId or ActionId as parameters, reject this command on can do action.
    if (!actionType.isActionMonitored() && !isActionExternal(actionType) && (parameters.getJobId() != null || parameters.getStepId() != null)) {
        result = new ActionReturnValue();
        result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString());
        result.setValid(false);
        result.setSucceeded(false);
    } else {
        if (!runAsInternal) {
            logExecution(parameters.getSessionId(), String.format("command %s", actionType));
        }
        CommandBase<?> command = CommandsFactory.createCommand(actionType, parameters, context);
        result = runAction(command, runAsInternal);
    }
    return result;
}
#end_block

#method_before
protected VdcReturnValueBase runAction(CommandBase<?> command, boolean runAsInternal) {
    VdcReturnValueBase returnValue = evaluateCorrelationId(command);
    if (returnValue != null) {
        return returnValue;
    }
    command.setInternalExecution(runAsInternal);
    executionHandler.prepareCommandForMonitoring(command, command.getActionType(), runAsInternal);
    returnValue = actionExecutor.get().execute(command);
    returnValue.setCorrelationId(command.getParameters().getCorrelationId());
    returnValue.setJobId(command.getJobId());
    return returnValue;
}
#method_after
protected ActionReturnValue runAction(CommandBase<?> command, boolean runAsInternal) {
    ActionReturnValue returnValue = evaluateCorrelationId(command);
    if (returnValue != null) {
        return returnValue;
    }
    command.setInternalExecution(runAsInternal);
    executionHandler.prepareCommandForMonitoring(command, command.getActionType(), runAsInternal);
    returnValue = actionExecutor.get().execute(command);
    returnValue.setCorrelationId(command.getParameters().getCorrelationId());
    returnValue.setJobId(command.getJobId());
    return returnValue;
}
#end_block

#method_before
protected VdcReturnValueBase evaluateCorrelationId(CommandBase<?> commandBase) {
    ActionParametersBase cmdParams = commandBase.getParameters();
    if (cmdParams.getCorrelationId() == null && cmdParams.getParentParameters() != null) {
        cmdParams.setCorrelationId(cmdParams.getParentParameters().getCorrelationId());
    }
    // Evaluate and set the correlationId on the parameters, fails on invalid correlation id
    VdcReturnValueBase returnValue = ExecutionHandler.evaluateCorrelationId(cmdParams);
    if (returnValue != null) {
        log.warn("Validation of action '{}' failed. Reasons: {}", commandBase.getActionType(), StringUtils.join(returnValue.getValidationMessages(), ','));
    }
    // Set the correlation-id on the command
    commandBase.setCorrelationId(cmdParams.getCorrelationId());
    return returnValue;
}
#method_after
protected ActionReturnValue evaluateCorrelationId(CommandBase<?> commandBase) {
    ActionParametersBase cmdParams = commandBase.getParameters();
    if (cmdParams.getCorrelationId() == null && cmdParams.getParentParameters() != null) {
        cmdParams.setCorrelationId(cmdParams.getParentParameters().getCorrelationId());
    }
    // Evaluate and set the correlationId on the parameters, fails on invalid correlation id
    ActionReturnValue returnValue = ExecutionHandler.evaluateCorrelationId(cmdParams);
    if (returnValue != null) {
        log.warn("Validation of action '{}' failed. Reasons: {}", commandBase.getActionType(), StringUtils.join(returnValue.getValidationMessages(), ','));
    }
    // Set the correlation-id on the command
    commandBase.setCorrelationId(cmdParams.getCorrelationId());
    return returnValue;
}
#end_block

#method_before
@Override
public VdcReturnValueBase endAction(ActionType actionType, ActionParametersBase parameters, CommandContext context) {
    return CommandsFactory.createCommand(actionType, parameters, context).endAction();
}
#method_after
@Override
public ActionReturnValue endAction(ActionType actionType, ActionParametersBase parameters, CommandContext context) {
    return CommandsFactory.createCommand(actionType, parameters, context).endAction();
}
#end_block

#method_before
@Override
public VdcQueryReturnValue runInternalQuery(VdcQueryType queryType, VdcQueryParametersBase queryParameters) {
    return runInternalQuery(queryType, queryParameters, null);
}
#method_after
@Override
@ExcludeClassInterceptors
public QueryReturnValue runInternalQuery(QueryType actionType, QueryParametersBase parameters, EngineContext engineContext) {
    return runQueryImpl(actionType, parameters, false, engineContext);
}
#end_block

#method_before
@Override
public VdcQueryReturnValue runQuery(VdcQueryType actionType, VdcQueryParametersBase parameters) {
    return runQueryImpl(actionType, parameters, true, null);
}
#method_after
@Override
public QueryReturnValue runQuery(QueryType actionType, QueryParametersBase parameters) {
    return runQueryImpl(actionType, parameters, true, null);
}
#end_block

#method_before
protected VdcQueryReturnValue runQueryImpl(VdcQueryType actionType, VdcQueryParametersBase parameters, boolean isPerformUserCheck) {
    return runQueryImpl(actionType, parameters, isPerformUserCheck, null);
}
#method_after
protected QueryReturnValue runQueryImpl(QueryType actionType, QueryParametersBase parameters, boolean isPerformUserCheck, EngineContext engineContext) {
    if (isPerformUserCheck) {
        String sessionId = parameters.getSessionId();
        if (StringUtils.isEmpty(sessionId) || sessionDataContainer.getUser(sessionId, parameters.getRefresh()) == null) {
            log.debug("Unable to execute query {} as no user session was found", actionType);
            return getErrorQueryReturnValue(EngineMessage.USER_IS_NOT_LOGGED_IN);
        }
        logExecution(sessionId, String.format("query %s with isFiltered : %s", actionType, parameters.isFiltered()));
    }
    Class<?> clazz = CommandsFactory.getQueryClass(actionType.name());
    if (clazz.isAnnotationPresent(DisableInMaintenanceMode.class)) {
        String mode = vdcOptionDao.getByNameAndVersion(ConfigValues.EngineMode.name(), ConfigCommon.defaultConfigurationVersion).getOptionValue();
        if (EngineWorkingMode.MAINTENANCE.name().equalsIgnoreCase(mode)) {
            return getErrorQueryReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_MAINTENANCE_MODE);
        }
    }
    if (parameters.getCorrelationId() == null) {
        parameters.setCorrelationId(CorrelationIdTracker.getCorrelationId());
    }
    QueriesCommandBase<?> command = createQueryCommand(actionType, parameters, engineContext);
    command.setInternalExecution(!isPerformUserCheck);
    QueryReturnValue returnValue = queryExecutor.get().execute(command, actionType);
    if (returnValue.getCorrelationId() == null) {
        returnValue.setCorrelationId(parameters.getCorrelationId());
    }
    CorrelationIdTracker.setCorrelationId(parameters.getCorrelationId());
    return returnValue;
}
#end_block

#method_before
@Override
public List<VdcReturnValueBase> runMultipleActions(ActionType actionType, List<ActionParametersBase> parameters, boolean isRunOnlyIfAllValidationPass) {
    return runMultipleActions(actionType, parameters, isRunOnlyIfAllValidationPass, false);
}
#method_after
@Override
public List<ActionReturnValue> runMultipleActions(ActionType actionType, List<ActionParametersBase> parameters, boolean isRunOnlyIfAllValidationPass) {
    return runMultipleActions(actionType, parameters, isRunOnlyIfAllValidationPass, false);
}
#end_block

#method_before
@Override
public List<VdcReturnValueBase> runMultipleActions(ActionType actionType, List<ActionParametersBase> parameters, boolean isRunOnlyIfAllValidationPass, boolean waitForResult) {
    VdcReturnValueBase returnValue = notAllowToRunAction(actionType);
    if (returnValue != null) {
        List<VdcReturnValueBase> list = new ArrayList<>();
        list.add(returnValue);
        return list;
    } else {
        return runMultipleActionsImpl(actionType, parameters, false, isRunOnlyIfAllValidationPass, waitForResult, null);
    }
}
#method_after
@Override
public List<ActionReturnValue> runMultipleActions(ActionType actionType, List<ActionParametersBase> parameters, boolean isRunOnlyIfAllValidationPass, boolean waitForResult) {
    ActionReturnValue returnValue = notAllowToRunAction(actionType);
    if (returnValue != null) {
        List<ActionReturnValue> list = new ArrayList<>();
        list.add(returnValue);
        return list;
    } else {
        return runMultipleActionsImpl(actionType, parameters, false, isRunOnlyIfAllValidationPass, waitForResult, null);
    }
}
#end_block

#method_before
@Override
@ExcludeClassInterceptors
public List<VdcReturnValueBase> runInternalMultipleActions(ActionType actionType, List<ActionParametersBase> parameters) {
    return runMultipleActionsImpl(actionType, parameters, true, false, false, null);
}
#method_after
@Override
@ExcludeClassInterceptors
public List<ActionReturnValue> runInternalMultipleActions(ActionType actionType, List<ActionParametersBase> parameters) {
    return runMultipleActionsImpl(actionType, parameters, true, false, false, null);
}
#end_block

#method_before
@Override
@ExcludeClassInterceptors
public List<VdcReturnValueBase> runInternalMultipleActions(ActionType actionType, List<ActionParametersBase> parameters, CommandContext commandContext) {
    return runMultipleActionsImpl(actionType, parameters, true, false, false, commandContext);
}
#method_after
@Override
@ExcludeClassInterceptors
public List<ActionReturnValue> runInternalMultipleActions(ActionType actionType, List<ActionParametersBase> parameters, CommandContext commandContext) {
    return runMultipleActionsImpl(actionType, parameters, true, false, false, commandContext);
}
#end_block

#method_before
private List<VdcReturnValueBase> runMultipleActionsImpl(ActionType actionType, List<ActionParametersBase> parameters, boolean isInternal, boolean isRunOnlyIfAllValidationPass, boolean isWaitForResult, CommandContext commandContext) {
    MultipleActionsRunner runner = multipleActionsRunnersFactory.createMultipleActionsRunner(actionType, parameters, isInternal, commandContext);
    runner.setIsRunOnlyIfAllValidatePass(isRunOnlyIfAllValidationPass);
    runner.setIsWaitForResult(isWaitForResult);
    return runner.execute();
}
#method_after
private List<ActionReturnValue> runMultipleActionsImpl(ActionType actionType, List<ActionParametersBase> parameters, boolean isInternal, boolean isRunOnlyIfAllValidationPass, boolean isWaitForResult, CommandContext commandContext) {
    MultipleActionsRunner runner = multipleActionsRunnersFactory.createMultipleActionsRunner(actionType, parameters, isInternal, commandContext);
    runner.setIsRunOnlyIfAllValidatePass(isRunOnlyIfAllValidationPass);
    runner.setIsWaitForResult(isWaitForResult);
    return runner.execute();
}
#end_block

#method_before
@Override
public VdcReturnValueBase logoff(ActionParametersBase parameters) {
    return runAction(ActionType.LogoutSession, parameters);
}
#method_after
@Override
public ActionReturnValue logoff(ActionParametersBase parameters) {
    return runAction(ActionType.LogoutSession, parameters);
}
#end_block

#method_before
@Override
public VdcQueryReturnValue runPublicQuery(VdcQueryType actionType, VdcQueryParametersBase parameters) {
    parameters.setRefresh(false);
    switch(actionType) {
        case GetAAAProfileList:
        case RegisterVds:
        case CheckDBConnection:
        case GetDbUserBySession:
        case GetEngineSessionIdForSsoToken:
        case ValidateSession:
        case GetDefaultAllowedOrigins:
            return runQueryImpl(actionType, parameters, false);
        case GetConfigurationValue:
            GetConfigurationValueParameters configParameters = (GetConfigurationValueParameters) parameters;
            switch(configParameters.getConfigValue()) {
                case VdcVersion:
                case ProductRPMVersion:
                case ApplicationMode:
                case UserSessionTimeOutInterval:
                case CORSSupport:
                case CORSAllowedOrigins:
                case CORSAllowDefaultOrigins:
                case CORSDefaultOriginSuffixes:
                    return runQueryImpl(actionType, parameters, false);
                default:
                    break;
            }
        default:
            break;
    }
    return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC);
}
#method_after
@Override
public QueryReturnValue runPublicQuery(QueryType actionType, QueryParametersBase parameters) {
    parameters.setRefresh(false);
    switch(actionType) {
        case GetAAAProfileList:
        case RegisterVds:
        case CheckDBConnection:
        case GetDbUserBySession:
        case GetEngineSessionIdForSsoToken:
        case ValidateSession:
        case GetDefaultAllowedOrigins:
            return runQueryImpl(actionType, parameters, false);
        case GetConfigurationValue:
            GetConfigurationValueParameters configParameters = (GetConfigurationValueParameters) parameters;
            switch(configParameters.getConfigValue()) {
                case VdcVersion:
                case ProductRPMVersion:
                case ApplicationMode:
                case UserSessionTimeOutInterval:
                case CORSSupport:
                case CORSAllowedOrigins:
                case CORSAllowDefaultOrigins:
                case CORSDefaultOriginSuffixes:
                    return runQueryImpl(actionType, parameters, false);
                default:
                    break;
            }
        default:
            break;
    }
    return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC);
}
#end_block

#method_before
@Override
@ExcludeClassInterceptors
public VdcReturnValueBase runInternalAction(ActionType actionType, ActionParametersBase parameters, CommandContext context) {
    return runActionImpl(actionType, parameters, true, context);
}
#method_after
@Override
@ExcludeClassInterceptors
public ActionReturnValue runInternalAction(ActionType actionType, ActionParametersBase parameters, CommandContext context) {
    return runActionImpl(actionType, parameters, true, context);
}
#end_block

#method_before
private VdcReturnValueBase getErrorCommandReturnValue(EngineMessage message) {
    VdcReturnValueBase returnValue = new VdcReturnValueBase();
    returnValue.setValid(false);
    returnValue.getValidationMessages().add(message.toString());
    return returnValue;
}
#method_after
private ActionReturnValue getErrorCommandReturnValue(EngineMessage message) {
    ActionReturnValue returnValue = new ActionReturnValue();
    returnValue.setValid(false);
    returnValue.getValidationMessages().add(message.toString());
    return returnValue;
}
#end_block

#method_before
private VdcReturnValueBase notAllowedInPrepForMaintMode(ActionType action) {
    Class<?> clazz = CommandsFactory.getCommandClass(action.name());
    if (clazz.isAnnotationPresent(DisableInPrepareMode.class)) {
        return getErrorCommandReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_PREPARE_MODE);
    }
    return null;
}
#method_after
private ActionReturnValue notAllowedInPrepForMaintMode(ActionType action) {
    Class<?> clazz = CommandsFactory.getCommandClass(action.name());
    if (clazz.isAnnotationPresent(DisableInPrepareMode.class)) {
        return getErrorCommandReturnValue(EngineMessage.ENGINE_IS_RUNNING_IN_PREPARE_MODE);
    }
    return null;
}
#end_block

#method_before
private VdcQueryReturnValue getErrorQueryReturnValue(EngineMessage errorMessage) {
    VdcQueryReturnValue returnValue = new VdcQueryReturnValue();
    returnValue.setSucceeded(false);
    returnValue.setExceptionString(errorMessage.toString());
    return returnValue;
}
#method_after
private QueryReturnValue getErrorQueryReturnValue(EngineMessage errorMessage) {
    QueryReturnValue returnValue = new QueryReturnValue();
    returnValue.setSucceeded(false);
    returnValue.setExceptionString(errorMessage.toString());
    return returnValue;
}
#end_block

#method_before
protected QueriesCommandBase<?> createQueryCommand(VdcQueryType actionType, VdcQueryParametersBase parameters, EngineContext engineContext) {
    return CommandsFactory.createQueryCommand(actionType, parameters, engineContext);
}
#method_after
protected QueriesCommandBase<?> createQueryCommand(QueryType actionType, QueryParametersBase parameters, EngineContext engineContext) {
    return CommandsFactory.createQueryCommand(actionType, parameters, engineContext);
}
#end_block

#method_before
@Override
public VdcReturnValueBase runAction(CommandBase<?> action, ExecutionContext executionContext) {
    ExecutionHandler.setExecutionContextForTasks(action.getContext(), executionContext, action.getContext().getLock());
    return runAction(action, true);
}
#method_after
@Override
public ActionReturnValue runAction(CommandBase<?> action, ExecutionContext executionContext) {
    ExecutionHandler.setExecutionContextForTasks(action.getContext(), executionContext, action.getContext().getLock());
    return runAction(action, true);
}
#end_block

#method_before
protected HostJobStatus pollImage(Guid storagePoolId, Guid storageDomainId, Guid imageGroupId, Guid imageId, int executionGeneration, Guid cmdId, VdcActionType actionType) {
    Image imageInfo = ((DiskImage) vdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVolumeInfo, new GetVolumeInfoVDSCommandParameters(storagePoolId, storageDomainId, imageGroupId, imageId), storagePoolId, null).getReturnValue()).getImage();
    if (imageInfo.getLeaseStatus() != null && !imageInfo.getLeaseStatus().isFree()) {
        log.info("Command {} id: '{}': the volume lease is not FREE - the job is running", actionType, cmdId);
        return HostJobStatus.running;
    }
    if (imageInfo.getGeneration() == executionGeneration + 1) {
        log.info("Command {} id: '{}': the volume lease is free and the generation was incremented - the " + "job execution has completed successfully", actionType, cmdId);
        return HostJobStatus.done;
    }
    if (imageInfo.getGeneration() == executionGeneration + StorageConstants.ENTITY_FENCING_GENERATION_DIFF) {
        log.info("Command {} id: '{}': the volume generation was incremented by the job fencing diff - the job " + "was fenced and its status can be considered as failed", actionType, cmdId);
        return HostJobStatus.failed;
    }
    log.info("Command {} id: '{}': couldn't determine the status of the job by entity polling", actionType, cmdId);
    return null;
}
#method_after
protected HostJobStatus pollImage(Guid storagePoolId, Guid storageDomainId, Guid imageGroupId, Guid imageId, int executionGeneration, Guid cmdId, ActionType actionType) {
    Image imageInfo = ((DiskImage) vdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVolumeInfo, new GetVolumeInfoVDSCommandParameters(storagePoolId, storageDomainId, imageGroupId, imageId), storagePoolId, null).getReturnValue()).getImage();
    if (imageInfo.getLeaseStatus() != null && !imageInfo.getLeaseStatus().isFree()) {
        log.info("Command {} id: '{}': the volume lease is not FREE - the job is running", actionType, cmdId);
        return HostJobStatus.running;
    }
    if (imageInfo.getGeneration() == executionGeneration + 1) {
        log.info("Command {} id: '{}': the volume lease is free and the generation was incremented - the " + "job execution has completed successfully", actionType, cmdId);
        return HostJobStatus.done;
    }
    if (imageInfo.getGeneration() == executionGeneration + StorageConstants.ENTITY_FENCING_GENERATION_DIFF) {
        log.info("Command {} id: '{}': the volume generation was incremented by the job fencing diff - the job " + "was fenced and its status can be considered as failed", actionType, cmdId);
        return HostJobStatus.failed;
    }
    log.info("Command {} id: '{}': couldn't determine the status of the job by entity polling", actionType, cmdId);
    return null;
}
#end_block

#method_before
@Override
public void attemptToFenceJob() {
    log.info("Command {} id: '{}': attempting to fence job {}", getActionType(), getCommandId(), getJobId());
    VdsmImageLocationInfo info = getParameters().getVolInfo();
    FenceVolumeJobCommandParameters p = new FenceVolumeJobCommandParameters(info);
    p.setParentCommand(getActionType());
    p.setParentParameters(getParameters());
    p.setStoragePoolId(getParameters().getStoragePoolId());
    p.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED);
    runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p);
}
#method_after
@Override
public void attemptToFenceJob() {
    log.info("Command {} id: '{}': attempting to fence job {}", getActionType(), getCommandId(), getJobId());
    VdsmImageLocationInfo info = getParameters().getVolInfo();
    FenceVolumeJobCommandParameters p = new FenceVolumeJobCommandParameters(info);
    p.setParentCommand(getActionType());
    p.setParentParameters(getParameters());
    p.setStoragePoolId(getParameters().getStoragePoolId());
    p.setEndProcedure(ActionParametersBase.EndProcedure.COMMAND_MANAGED);
    runInternalActionWithTasksContext(ActionType.FenceVolumeJob, p);
}
#end_block

#method_before
@Override
protected boolean validate() {
    DiskValidator diskValidator = new DiskValidator(getDiskImage());
    if (!validate(diskValidator.isDiskExists()) || !validate(diskValidator.isDiskPluggedToVmsThatAreNotDown(false, getVmsForDisk())) || !validate(diskValidator.isSparsifySupported())) {
        return false;
    }
    if (diskImageDao.getAllSnapshotsForImageGroup(getDiskImage().getId()).size() > 1) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_HAS_SNAPSHOTS);
    }
    DiskImagesValidator diskImagesValidator = new DiskImagesValidator(Collections.singletonList(getDiskImage()));
    return validate(diskImagesValidator.diskImagesNotIllegal()) && validate(diskImagesValidator.diskImagesNotLocked()) && validate(diskImagesValidator.diskImagesHaveNoDerivedDisks(null));
}
#method_after
@Override
protected boolean validate() {
    DiskValidator diskValidator = new DiskValidator(getDiskImage());
    if (!validate(diskValidator.isDiskExists()) || !validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)) || !validate(diskValidator.isSparsifySupported())) {
        return false;
    }
    if (diskImageDao.getAllSnapshotsForImageGroup(getDiskImage().getId()).size() > 1) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_HAS_SNAPSHOTS);
    }
    DiskImagesValidator diskImagesValidator = new DiskImagesValidator(Collections.singletonList(getDiskImage()));
    return validate(diskImagesValidator.diskImagesNotIllegal()) && validate(diskImagesValidator.diskImagesNotLocked()) && validate(diskImagesValidator.diskImagesHaveNoDerivedDisks(null));
}
#end_block

#method_before
@Override
public void attemptToFenceJob() {
    SubchainInfo info = getParameters().getSubchainInfo();
    VdsmImageLocationInfo locationInfo = new VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getBaseImageGeneration());
    FenceVolumeJobCommandParameters parameters = new FenceVolumeJobCommandParameters(locationInfo);
    parameters.setParentCommand(getActionType());
    parameters.setParentParameters(getParameters());
    parameters.setStoragePoolId(getParameters().getStoragePoolId());
    parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED);
    runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters);
}
#method_after
@Override
public void attemptToFenceJob() {
    SubchainInfo info = getParameters().getSubchainInfo();
    VdsmImageLocationInfo locationInfo = new VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getBaseImageGeneration());
    FenceVolumeJobCommandParameters parameters = new FenceVolumeJobCommandParameters(locationInfo);
    parameters.setParentCommand(getActionType());
    parameters.setParentParameters(getParameters());
    parameters.setStoragePoolId(getParameters().getStoragePoolId());
    parameters.setEndProcedure(ActionParametersBase.EndProcedure.COMMAND_MANAGED);
    runInternalActionWithTasksContext(ActionType.FenceVolumeJob, parameters);
}
#end_block

#method_before
@Override
public void attemptToFenceJob() {
    if (isDstVdsmImage()) {
        log.info("Command {} id: '{}': attempting to fence job {}", getActionType(), getCommandId(), getJobId());
        VdsmImageLocationInfo info = (VdsmImageLocationInfo) getParameters().getDstInfo();
        FenceVolumeJobCommandParameters p = new FenceVolumeJobCommandParameters(info);
        p.setParentCommand(getActionType());
        p.setParentParameters(getParameters());
        p.setStoragePoolId(getParameters().getStoragePoolId());
        p.setEndProcedure(EndProcedure.COMMAND_MANAGED);
        runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p);
    }
}
#method_after
@Override
public void attemptToFenceJob() {
    if (isDstVdsmImage()) {
        log.info("Command {} id: '{}': attempting to fence job {}", getActionType(), getCommandId(), getJobId());
        VdsmImageLocationInfo info = (VdsmImageLocationInfo) getParameters().getDstInfo();
        FenceVolumeJobCommandParameters p = new FenceVolumeJobCommandParameters(info);
        p.setParentCommand(getActionType());
        p.setParentParameters(getParameters());
        p.setStoragePoolId(getParameters().getStoragePoolId());
        p.setEndProcedure(EndProcedure.COMMAND_MANAGED);
        runInternalActionWithTasksContext(ActionType.FenceVolumeJob, p);
    }
}
#end_block

#method_before
public static void fillImagesMapBasedOnTemplate(VmTemplate template, List<StorageDomain> domains, Map<Guid, DiskImage> diskInfoDestinationMap, Map<Guid, StorageDomain> destStorages) {
    Map<Guid, StorageDomain> storageDomainsMap = new HashMap<>();
    for (StorageDomain storageDomain : domains) {
        StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
        if (validator.isDomainExistAndActive().isValid() && validator.domainIsValidDestination().isValid()) {
            storageDomainsMap.put(storageDomain.getId(), storageDomain);
        }
    }
    for (DiskImage image : template.getDiskTemplateMap().values()) {
        for (Guid storageId : image.getStorageIds()) {
            if (storageDomainsMap.containsKey(storageId)) {
                ArrayList<Guid> storageIds = new ArrayList<>();
                storageIds.add(storageId);
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
                break;
            }
        }
    }
    if (destStorages != null) {
        for (DiskImage diskImage : diskInfoDestinationMap.values()) {
            Guid storageDomainId = diskImage.getStorageIds().get(0);
            destStorages.put(storageDomainId, storageDomainsMap.get(storageDomainId));
        }
    }
}
#method_after
public static void fillImagesMapBasedOnTemplate(VmTemplate template, List<StorageDomain> domains, Map<Guid, DiskImage> diskInfoDestinationMap, Map<Guid, StorageDomain> destStorages) {
    Map<Guid, StorageDomain> storageDomainsMap = domains.stream().filter(ImagesHandler::isDomainValidDestination).collect(Collectors.toMap(StorageDomain::getId, Function.identity()));
    for (DiskImage image : template.getDiskTemplateMap().values()) {
        for (Guid storageId : image.getStorageIds()) {
            if (storageDomainsMap.containsKey(storageId)) {
                ArrayList<Guid> storageIds = new ArrayList<>();
                storageIds.add(storageId);
                image.setStorageIds(storageIds);
                diskInfoDestinationMap.put(image.getId(), image);
                break;
            }
        }
    }
    if (destStorages != null) {
        for (DiskImage diskImage : diskInfoDestinationMap.values()) {
            Guid storageDomainId = diskImage.getStorageIds().get(0);
            destStorages.put(storageDomainId, storageDomainsMap.get(storageDomainId));
        }
    }
}
#end_block

#method_before
public static Map<Guid, DiskImage> getDiskImagesByIdMap(Collection<DiskImage> diskImages) {
    Map<Guid, DiskImage> result = new HashMap<>();
    if (diskImages != null) {
        for (DiskImage diskImage : diskImages) {
            result.put(diskImage.getImageId(), diskImage);
        }
    }
    return result;
}
#method_after
public static Map<Guid, DiskImage> getDiskImagesByIdMap(Collection<DiskImage> diskImages) {
    return diskImages.stream().collect(Collectors.toMap(d -> d.getImageId(), Function.identity()));
}
#end_block

#method_before
public static List<Guid> getDiskImageIds(List<DiskImage> diskImages) {
    List<Guid> result = new ArrayList<>();
    if (diskImages != null) {
        for (DiskImage diskImage : diskImages) {
            result.add(diskImage.getImageId());
        }
    }
    return result;
}
#method_after
public static List<Guid> getDiskImageIds(List<DiskImage> diskImages) {
    return diskImages.stream().map(DiskImage::getImageId).collect(Collectors.toList());
}
#end_block

#method_before
public boolean isImagesExists(Iterable<DiskImage> images, Guid storagePoolId) {
    for (DiskImage image : images) {
        DiskImage fromIrs = isImageExist(storagePoolId, image);
        if (fromIrs == null) {
            return false;
        }
    }
    return true;
}
#method_after
public boolean isImagesExists(List<DiskImage> images, Guid storagePoolId) {
    return images.stream().allMatch(image -> isImageExist(storagePoolId, image) != null);
}
#end_block

#method_before
public boolean checkImagesConfiguration(Guid storageDomainId, Collection<? extends Disk> disksConfigList, List<String> messages) {
    boolean result = true;
    StorageDomainStatic storageDomain = storageDomainStaticDao.get(storageDomainId);
    for (Disk diskInfo : disksConfigList) {
        if (DiskStorageType.IMAGE == diskInfo.getDiskStorageType()) {
            result = checkImageConfiguration(storageDomain, (DiskImage) diskInfo, messages);
        }
        if (!result) {
            break;
        }
    }
    return result;
}
#method_after
public boolean checkImagesConfiguration(Guid storageDomainId, Collection<? extends Disk> disksConfigList, List<String> messages) {
    StorageDomainStatic storageDomain = storageDomainStaticDao.get(storageDomainId);
    return !disksConfigList.stream().filter(DisksFilter.ONLY_IMAGES).anyMatch(disk -> !checkImageConfiguration(storageDomain, (DiskImage) disk, messages));
}
#end_block

#method_before
public static Set<Guid> getAllStorageIdsForImageIds(Collection<DiskImage> images) {
    Set<Guid> domainsIds = new HashSet<>();
    for (DiskImage image : images) {
        domainsIds.addAll(image.getStorageIds());
    }
    return domainsIds;
}
#method_after
public static Set<Guid> getAllStorageIdsForImageIds(Collection<DiskImage> images) {
    return images.stream().flatMap(image -> image.getStorageIds().stream()).collect(Collectors.toSet());
}
#end_block

#method_before
public void fillImagesBySnapshots(VM vm) {
    for (Disk disk : vm.getDiskMap().values()) {
        if (disk.getDiskStorageType().isInternal()) {
            DiskImage diskImage = (DiskImage) disk;
            diskImage.getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(diskImage.getImageId()));
        }
    }
}
#method_after
public void fillImagesBySnapshots(VM vm) {
    vm.getDiskMap().values().stream().filter(disk -> disk.getDiskStorageType().isInternal()).forEach(disk -> {
        DiskImage diskImage = (DiskImage) disk;
        diskImage.getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(diskImage.getImageId()));
    });
}
#end_block

#method_before
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) {
    Map<Guid, List<DiskImage>> retVal = new HashMap<>();
    for (DiskImage image : images) {
        MultiValueMapUtils.addToMap(image.getId(), image, retVal);
    }
    for (List<DiskImage> list : retVal.values()) {
        sortImageList(list);
    }
    return retVal;
}
#method_after
public static Map<Guid, List<DiskImage>> getImagesLeaf(List<DiskImage> images) {
    Map<Guid, List<DiskImage>> retVal = new HashMap<>();
    images.forEach(image -> MultiValueMapUtils.addToMap(image.getId(), image, retVal));
    retVal.values().forEach(ImagesHandler::sortImageList);
    return retVal;
}
#end_block

#method_before
public static void sortImageList(List<DiskImage> images) {
    List<DiskImage> hold = new ArrayList<>();
    DiskImage curr = null;
    // find the first image
    for (int i = 0; i < images.size(); i++) {
        int pos = getFirstImage(images, images.get(i));
        if (pos == -1) {
            curr = images.get(i);
            hold.add(images.get(i));
            images.remove(images.get(i));
            break;
        }
    }
    while (images.size() > 0) {
        int pos = getNextImage(images, curr);
        if (pos == -1) {
            log.error("Image list error in SortImageList");
            break;
        }
        curr = images.get(pos);
        hold.add(images.get(pos));
        images.remove(images.get(pos));
    }
    for (DiskImage image : hold) {
        images.add(image);
    }
}
#method_after
public static void sortImageList(List<DiskImage> images) {
    List<DiskImage> hold = new ArrayList<>();
    DiskImage curr = null;
    // find the first image
    for (int i = 0; i < images.size(); i++) {
        int pos = getFirstImage(images, images.get(i));
        if (pos == -1) {
            curr = images.get(i);
            hold.add(images.get(i));
            images.remove(images.get(i));
            break;
        }
    }
    while (images.size() > 0) {
        int pos = getNextImage(images, curr);
        if (pos == -1) {
            log.error("Image list error in SortImageList");
            break;
        }
        curr = images.get(pos);
        hold.add(images.get(pos));
        images.remove(images.get(pos));
    }
    images.addAll(hold);
}
#end_block

#method_before
public List<DiskImage> getCinderLeafImages(List<Disk> disks) {
    List<DiskImage> leafCinderDisks = new ArrayList<>();
    List<CinderDisk> cinderDisks = DisksFilter.filterCinderDisks(disks);
    for (CinderDisk cinder : cinderDisks) {
        leafCinderDisks.add(getSnapshotLeaf(cinder.getId()));
    }
    return leafCinderDisks;
}
#method_after
public List<DiskImage> getCinderLeafImages(List<Disk> disks) {
    return disks.stream().filter(DisksFilter.ONLY_CINDER).map(d -> getSnapshotLeaf(d.getId())).collect(Collectors.toList());
}
#end_block

#method_before
public void updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(final Collection<Guid> diskIds, final ImageStatus status, ImageStatus statusForCompensation, final CompensationContext compensationContext) {
    if (compensationContext != null) {
        for (Guid diskId : diskIds) {
            List<DiskImage> diskSnapshots = diskImageDao.getAllSnapshotsForImageGroup(diskId);
            for (DiskImage diskSnapshot : diskSnapshots) {
                diskSnapshot.setImageStatus(statusForCompensation);
                compensationContext.snapshotEntityStatus(diskSnapshot.getImage());
            }
        }
        TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> {
            for (Guid diskId : diskIds) {
                imageDao.updateStatusOfImagesByImageGroupId(diskId, status);
            }
            compensationContext.stateChanged();
            return null;
        });
    } else {
        TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> {
            for (Guid diskId : diskIds) {
                imageDao.updateStatusOfImagesByImageGroupId(diskId, status);
            }
            return null;
        });
    }
}
#method_after
public void updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(final Collection<Guid> diskIds, final ImageStatus status, ImageStatus statusForCompensation, final CompensationContext compensationContext) {
    if (compensationContext != null) {
        diskIds.stream().flatMap(diskId -> diskImageDao.getAllSnapshotsForImageGroup(diskId).stream()).forEach(diskSnapshot -> {
            diskSnapshot.setImageStatus(statusForCompensation);
            compensationContext.snapshotEntityStatus(diskSnapshot.getImage());
        });
        TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> {
            diskIds.forEach(diskId -> imageDao.updateStatusOfImagesByImageGroupId(diskId, status));
            compensationContext.stateChanged();
            return null;
        });
    } else {
        TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> {
            diskIds.forEach(diskId -> imageDao.updateStatusOfImagesByImageGroupId(diskId, status));
            return null;
        });
    }
}
#end_block

#method_before
private static DiskImage getDiskImageById(Guid id, Iterable<DiskImage> diskImages) {
    for (DiskImage diskImage : diskImages) {
        if (diskImage.getId().equals(id)) {
            return diskImage;
        }
    }
    return null;
}
#method_after
private static DiskImage getDiskImageById(Guid id, Collection<DiskImage> diskImages) {
    return diskImages.stream().filter(disk -> disk.getId().equals(id)).findFirst().orElse(null);
}
#end_block

#method_before
public static List<DiskImage> imagesSubtract(Iterable<DiskImage> images, Iterable<DiskImage> imagesToSubtract) {
    List<DiskImage> subtract = new ArrayList<>();
    for (DiskImage image : images) {
        if (getDiskImageById(image.getId(), imagesToSubtract) == null) {
            subtract.add(image);
        }
    }
    return subtract;
}
#method_after
public static List<DiskImage> imagesSubtract(Collection<DiskImage> images, Collection<DiskImage> imagesToSubtract) {
    return images.stream().filter(image -> getDiskImageById(image.getId(), imagesToSubtract) == null).collect(Collectors.toList());
}
#end_block

#method_before
public static List<DiskImage> imagesIntersection(Iterable<DiskImage> images1, Iterable<DiskImage> images2) {
    List<DiskImage> intersection = new ArrayList<>();
    for (DiskImage image : images1) {
        if (getDiskImageById(image.getId(), images2) != null) {
            intersection.add(image);
        }
    }
    return intersection;
}
#method_after
public static List<DiskImage> imagesIntersection(Collection<DiskImage> images1, Collection<DiskImage> images2) {
    return images1.stream().filter(image -> getDiskImageById(image.getId(), images2) != null).collect(Collectors.toList());
}
#end_block

#method_before
public QemuImageInfo getQemuImageInfoFromVdsm(Guid storagePoolId, Guid newStorageDomainID, Guid newImageGroupId, Guid newImageId, Guid vdsId, boolean shouldPrepareAndTeardown) {
    if (vdsId == null) {
        vdsId = vdsCommandsHelper.getHostForExecution(storagePoolId, Collections.emptyList());
    }
    QemuImageInfo qemuImageInfo = null;
    if (shouldPrepareAndTeardown) {
        prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId);
    }
    try {
        qemuImageInfo = (QemuImageInfo) resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue();
    } catch (Exception e) {
        log.error("Unable to get qemu image info from storage", e);
    } finally {
        if (shouldPrepareAndTeardown) {
            try {
                teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId);
            } catch (Exception e) {
                log.warn("Unable to tear down image", e);
            }
        }
    }
    return qemuImageInfo;
}
#method_after
public QemuImageInfo getQemuImageInfoFromVdsm(Guid storagePoolId, Guid newStorageDomainID, Guid newImageGroupId, Guid newImageId, Guid vdsId, boolean shouldPrepareAndTeardown) {
    if (vdsId == null) {
        vdsId = vdsCommandsHelper.getHostForExecution(storagePoolId);
    }
    QemuImageInfo qemuImageInfo = null;
    if (shouldPrepareAndTeardown) {
        prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId);
    }
    try {
        qemuImageInfo = (QemuImageInfo) resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue();
    } catch (Exception e) {
        log.error("Unable to get qemu image info from storage", e);
    } finally {
        if (shouldPrepareAndTeardown) {
            try {
                teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId);
            } catch (Exception e) {
                log.warn("Unable to tear down image", e);
            }
        }
    }
    return qemuImageInfo;
}
#end_block

#method_before
private void chooseHostForExecution(VdsIdVDSCommandParametersBase parametersBase, Guid storagePoolId, CommandBase<?> cmd, Collection<Guid> executedHosts) {
    Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts);
    parametersBase.setVdsId(vdsForExecution);
    if (cmd != null) {
        if (cmd.getCommandStep() != null && cmd.getExecutionContext().getStep() != null) {
            Guid stepId = cmd.getExecutionContext().getStep().getId();
            if (cmd.getParameters().getVdsRunningOn() != null) {
                stepSubjectEntityDao.remove(cmd.getParameters().getVdsRunningOn(), stepId);
            }
            if (vdsForExecution != null) {
                stepSubjectEntityDao.saveAll(Collections.singletonList(new StepSubjectEntity(stepId, VdcObjectType.EXECUTION_HOST, vdsForExecution)));
            }
        }
        cmd.getParameters().setVdsRunningOn(vdsForExecution);
        cmd.persistCommand(cmd.getParameters().getParentCommand(), cmd.getCallback() != null);
    }
}
#method_after
private void chooseHostForExecution(VdsIdVDSCommandParametersBase parametersBase, Guid storagePoolId, CommandBase<?> cmd, Collection<Guid> executedHosts) {
    Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts);
    parametersBase.setVdsId(vdsForExecution);
    if (cmd != null) {
        if (cmd.getCommandStep() != null && cmd.getExecutionContext().getStep() != null) {
            Guid stepId = cmd.getExecutionContext().getStep().getId();
            if (cmd.getParameters().getVdsRunningOn() != null) {
                stepSubjectEntityDao.remove(cmd.getParameters().getVdsRunningOn(), stepId);
            }
            if (vdsForExecution != null) {
                stepSubjectEntityDao.saveAll(Collections.singletonList(new StepSubjectEntity(stepId, VdcObjectType.EXECUTION_HOST, vdsForExecution)));
                updateStepMessage(cmd, vdsForExecution);
            }
        }
        cmd.getParameters().setVdsRunningOn(vdsForExecution);
        cmd.persistCommand(cmd.getParameters().getParentCommand(), cmd.getCallback() != null);
    }
}
#end_block

#method_before
public Guid getHostForExecution(Guid poolId, Collection<Guid> hostsToFilter) {
    List<Guid> hostsForExecution = vdsDao.getAllForStoragePoolAndStatus(poolId, VDSStatus.Up).stream().filter(x -> !hostsToFilter.contains(x.getId())).map(x -> x.getId()).collect(Collectors.toList());
    if (hostsForExecution.isEmpty()) {
        return null;
    }
    return hostsForExecution.get(new Random().nextInt(hostsForExecution.size()));
}
#method_after
public Guid getHostForExecution(Guid poolId) {
    return getHostForExecution(poolId, Collections.emptyList());
}
#end_block

#method_before
@Override
public void attemptToFenceJob() {
    VdsmImageLocationInfo info = (VdsmImageLocationInfo) getParameters().getVolInfo();
    FenceVolumeJobCommandParameters parameters = new FenceVolumeJobCommandParameters(info);
    parameters.setParentCommand(getActionType());
    parameters.setParentParameters(getParameters());
    parameters.setStoragePoolId(getParameters().getStoragePoolId());
    parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED);
    runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters);
}
#method_after
@Override
public void attemptToFenceJob() {
    VdsmImageLocationInfo info = (VdsmImageLocationInfo) getParameters().getVolInfo();
    FenceVolumeJobCommandParameters parameters = new FenceVolumeJobCommandParameters(info);
    parameters.setParentCommand(getActionType());
    parameters.setParentParameters(getParameters());
    parameters.setStoragePoolId(getParameters().getStoragePoolId());
    parameters.setEndProcedure(ActionParametersBase.EndProcedure.COMMAND_MANAGED);
    runInternalActionWithTasksContext(ActionType.FenceVolumeJob, parameters);
}
#end_block

#method_before
public void validateWithDirectLunIdAndInvalidVds() {
    command.getParameters().setDirectLunId(Guid.newGuid());
    doReturn(false).when(command).validateVds();
    assertFalse(command.validate());
}
#method_after
@Test
public void validateWithDirectLunIdAndInvalidVds() {
    command.getParameters().setDirectLunId(Guid.newGuid());
    doReturn(false).when(command).validateVds();
    assertFalse(command.validate());
}
#end_block

#method_before
private List<Map<String, Object>> parseHostDevices(XmlDocument document, List<VmDevice> devices, Guid hostId) {
    List<VmDevice> dbDevices = filterDevices(devices, VmDeviceGeneralType.HOSTDEV);
    if (dbDevices.isEmpty()) {
        Collections.emptyList();
    }
    Map<Map<String, String>, HostDevice> addressToHostDevice = hostDeviceDao.getHostDevicesByHostId(hostId).stream().filter(dev -> !dev.getAddress().isEmpty()).collect(Collectors.toMap(HostDevice::getAddress, device -> device));
    List<Map<String, Object>> result = new ArrayList<>();
    for (XmlNode node : document.selectNodes("//*/hostdev")) {
        Map<String, String> hostAddress = parseHostAddress(node);
        if (hostAddress == null) {
            continue;
        }
        HostDevice hostDevice = addressToHostDevice.get(hostAddress);
        Map<String, Object> dev = new HashMap<>();
        dev.put(VdsProperties.Type, VmDeviceGeneralType.HOSTDEV.getValue());
        dev.put(VdsProperties.Address, parseAddress(node));
        dev.put(VdsProperties.Alias, parseAlias(node));
        dev.put(VdsProperties.Device, hostDevice.getDeviceName());
        VmDevice dbDev = dbDevices.stream().filter(d -> d.getDevice().equals(hostDevice.getDeviceName())).findFirst().orElse(null);
        if (dbDev == null) {
            log.warn("VM host device '{}' does not exist in the database, thus ignored", hostDevice.getDeviceName());
            continue;
        }
        dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString());
        dev.put(VdsProperties.SpecParams, dbDev.getSpecParams());
        result.add(dev);
    }
    return result;
}
#method_after
private List<Map<String, Object>> parseHostDevices(XmlDocument document, List<VmDevice> devices, Guid hostId) {
    List<VmDevice> dbDevices = filterDevices(devices, VmDeviceGeneralType.HOSTDEV);
    if (dbDevices.isEmpty()) {
        return Collections.emptyList();
    }
    Map<Map<String, String>, HostDevice> addressToHostDevice = hostDeviceDao.getHostDevicesByHostId(hostId).stream().filter(dev -> !dev.getAddress().isEmpty()).collect(Collectors.toMap(HostDevice::getAddress, device -> device));
    List<Map<String, Object>> result = new ArrayList<>();
    for (XmlNode node : document.selectNodes("//*/hostdev")) {
        Map<String, String> hostAddress = parseHostAddress(node);
        if (hostAddress == null) {
            continue;
        }
        HostDevice hostDevice = addressToHostDevice.get(hostAddress);
        Map<String, Object> dev = new HashMap<>();
        dev.put(VdsProperties.Type, VmDeviceGeneralType.HOSTDEV.getValue());
        dev.put(VdsProperties.Address, parseAddress(node));
        dev.put(VdsProperties.Alias, parseAlias(node));
        dev.put(VdsProperties.Device, hostDevice.getDeviceName());
        VmDevice dbDev = dbDevices.stream().filter(d -> d.getDevice().equals(hostDevice.getDeviceName())).findFirst().orElse(null);
        if (dbDev == null) {
            log.warn("VM host device '{}' does not exist in the database, thus ignored", hostDevice.getDeviceName());
            continue;
        }
        dev.put(VdsProperties.DeviceId, dbDev.getId().getDeviceId().toString());
        dev.put(VdsProperties.SpecParams, dbDev.getSpecParams());
        result.add(dev);
    }
    return result;
}
#end_block

#method_before
private void getMenuLayout(PrimaryMenuItem[] items, SecondaryMenuItem[] secondaryItems) {
    layoutMap.clear();
    for (PrimaryMenuItem layout : items) {
        if (layout.getHref() != null) {
            // Main menu without sub items.
            MenuLayoutMenuDetails details = new MenuLayoutMenuDetails();
            details.setPrimaryPriority(layout.getIndex());
            // This is to make sure there is no sub menu, don't set the primary title.
            details.setSecondaryTitle(layout.getTitle());
            details.setIcon(layout.getIcon());
            layoutMap.put(layout.getHref(), details);
        }
    }
    for (SecondaryMenuItem subMenu : secondaryItems) {
        MenuLayoutMenuDetails details = new MenuLayoutMenuDetails();
        details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex());
        details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle());
        details.setSecondaryPriority(subMenu.getPriority());
        details.setSecondaryTitle(subMenu.getTitle());
        details.setIcon(subMenu.getIcon());
        layoutMap.put(subMenu.getHref(), details);
    }
}
#method_after
private void getMenuLayout(PrimaryMenuItem[] items, SecondaryMenuItem[] secondaryItems) {
    for (PrimaryMenuItem layout : items) {
        if (layout.getHref() != null) {
            // Main menu without sub items.
            MenuLayoutMenuDetails details = new MenuLayoutMenuDetails();
            details.setPrimaryPriority(layout.getIndex());
            // This is to make sure there is no sub menu, don't set the primary title.
            details.setSecondaryTitle(layout.getTitle());
            details.setIcon(layout.getIcon());
            layoutMap.put(layout.getHref(), details);
        }
    }
    for (SecondaryMenuItem subMenu : secondaryItems) {
        MenuLayoutMenuDetails details = new MenuLayoutMenuDetails();
        details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex());
        details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle());
        details.setSecondaryPriority(subMenu.getIndex());
        details.setSecondaryTitle(subMenu.getTitle());
        details.setIcon(subMenu.getIcon());
        layoutMap.put(subMenu.getHref(), details);
    }
}
#end_block

#method_before
protected void login(HttpServletRequest request, HttpServletResponse response, SsoSession ssoSession) throws Exception {
    log.debug("Entered login queryString: {}", request.getQueryString());
    String redirectUrl;
    String scope = SsoUtils.getScopeRequestParameter(request, "");
    if (SsoUtils.isUserAuthenticated(request)) {
        log.debug("User is authenticated redirecting to interactive-redirect-to-module");
        redirectUrl = request.getContextPath() + SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI;
    } else if (SsoUtils.scopeAsList(scope).contains("ovirt-ext=auth:identity")) {
        redirectUrl = new URLBuilder(SsoUtils.getRedirectUrl(request)).addParameter(SsoConstants.ERROR, SsoConstants.ERR_OVIRT_CODE_NOT_AUTHENTICATED).addParameter(SsoConstants.ERROR_DESCRIPTION, SsoConstants.ERR_CODE_NOT_AUTHENTICATED_MSG).build();
    } else {
        ssoSession.setAuthStack(getAuthSeq(ssoSession));
        if (ssoSession.getAuthStack().isEmpty()) {
            throw new OAuthException(SsoConstants.ERR_CODE_ACCESS_DENIED, ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_VALID_AUTHENTICATION_MECHANISM_FOUND, (Locale) request.getAttribute(SsoConstants.LOCALE)));
        }
        redirectUrl = request.getContextPath() + SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI;
    }
    log.debug("Redirecting to url: {}", redirectUrl);
    response.sendRedirect(redirectUrl);
}
#method_after
protected void login(HttpServletRequest request, HttpServletResponse response, SsoSession ssoSession) throws Exception {
    log.debug("Entered login queryString: {}", request.getQueryString());
    String redirectUrl;
    if (SsoUtils.isUserAuthenticated(request)) {
        log.debug("User is authenticated redirecting to interactive-redirect-to-module");
        redirectUrl = request.getContextPath() + SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI;
    } else if (SsoUtils.scopeAsList(SsoUtils.getScopeRequestParameter(request, "")).contains("ovirt-ext=auth:identity")) {
        redirectUrl = new URLBuilder(SsoUtils.getRedirectUrl(request)).addParameter(SsoConstants.ERROR, SsoConstants.ERR_OVIRT_CODE_NOT_AUTHENTICATED).addParameter(SsoConstants.ERROR_DESCRIPTION, SsoConstants.ERR_CODE_NOT_AUTHENTICATED_MSG).build();
    } else {
        ssoSession.setAuthStack(getAuthSeq(ssoSession));
        if (ssoSession.getAuthStack().isEmpty()) {
            throw new OAuthException(SsoConstants.ERR_CODE_ACCESS_DENIED, ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_VALID_AUTHENTICATION_MECHANISM_FOUND, (Locale) request.getAttribute(SsoConstants.LOCALE)));
        }
        redirectUrl = request.getContextPath() + SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI;
    }
    log.debug("Redirecting to url: {}", redirectUrl);
    response.sendRedirect(redirectUrl);
}
#end_block

#method_before
@Override
protected boolean validate() {
    if (!validate(new VmValidator(getVm()).isVmExists()) || !isDiskExistAndAttachedToVm(getOldDisk()) || !validateDiskVmData()) {
        return false;
    }
    boolean isDiskImageOrCinder = DiskStorageType.IMAGE == getOldDisk().getDiskStorageType() || DiskStorageType.CINDER == getOldDisk().getDiskStorageType();
    if (isDiskImageOrCinder) {
        ValidationResult imagesNotLocked = new DiskImagesValidator((DiskImage) getOldDisk()).diskImagesNotLocked();
        if (!imagesNotLocked.isValid()) {
            return validate(imagesNotLocked);
        }
    }
    DiskValidator oldDiskValidator = getDiskValidator(getOldDisk());
    ValidationResult isHostedEngineDisk = oldDiskValidator.validateNotHostedEngineDisk();
    if (!isHostedEngineDisk.isValid()) {
        return validate(isHostedEngineDisk);
    }
    if (!checkOperationAllowedOnDiskContentType(getOldDisk())) {
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    boolean isDiskInterfaceUpdated = getOldDiskVmElement().getDiskInterface() != getDiskVmElement().getDiskInterface();
    if (!vmsDiskOrSnapshotPluggedTo.isEmpty()) {
        // only virtual drive size can be updated when VMs is running
        if (isAtLeastOneVmIsNotDown(vmsDiskOrSnapshotPluggedTo) && updateParametersRequiringVmDownRequested()) {
            return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN);
        }
        boolean isUpdatedAsBootable = !getOldDiskVmElement().isBoot() && getDiskVmElement().isBoot();
        // multiple boot disk snapshot can be attached to a single vm
        if (isUpdatedAsBootable && !validate(oldDiskValidator.isVmNotContainsBootDisk(getVm()))) {
            return false;
        }
        if (isDiskInterfaceUpdated && !isDiskPassPciAndIdeLimit()) {
            return false;
        }
    }
    if (isDiskImageOrCinder && !validateCanResizeDisk()) {
        return false;
    }
    if (resizeDiskImageRequested() && amendDiskRequested()) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_AMEND_AND_EXTEND_IN_ONE_OPERATION);
    }
    if (amendDiskRequested() && isAllDiskVolumesRaw()) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_AMEND_RAW_DISK);
    }
    DiskVmElementValidator diskVmElementValidator = getDiskVmElementValidator(getNewDisk(), getDiskVmElement());
    return validateCanUpdateShareable() && validateCanUpdateReadOnly() && validateVmPoolProperties() && validateQuota() && validate(diskVmElementValidator.isVirtIoScsiValid(getVm())) && (!isDiskInterfaceUpdated || validate(diskVmElementValidator.isDiskInterfaceSupported(getVm()))) && setAndValidateDiskProfiles() && validatePassDiscardSupported(diskVmElementValidator);
}
#method_after
@Override
protected boolean validate() {
    if (!validate(new VmValidator(getVm()).isVmExists()) || !isDiskExistAndAttachedToVm(getOldDisk()) || !validateDiskVmData()) {
        return false;
    }
    boolean isDiskImageOrCinder = DiskStorageType.IMAGE == getOldDisk().getDiskStorageType() || DiskStorageType.CINDER == getOldDisk().getDiskStorageType();
    if (isDiskImageOrCinder) {
        ValidationResult imagesNotLocked = new DiskImagesValidator((DiskImage) getOldDisk()).diskImagesNotLocked();
        if (!imagesNotLocked.isValid()) {
            return validate(imagesNotLocked);
        }
    }
    DiskValidator oldDiskValidator = getDiskValidator(getOldDisk());
    ValidationResult isHostedEngineDisk = oldDiskValidator.validateNotHostedEngineDisk();
    if (!isHostedEngineDisk.isValid()) {
        return validate(isHostedEngineDisk);
    }
    if (!checkOperationAllowedOnDiskContentType(getOldDisk())) {
        return false;
    }
    if (!canRunActionOnNonManagedVm()) {
        return false;
    }
    boolean isDiskInterfaceUpdated = getOldDiskVmElement().getDiskInterface() != getDiskVmElement().getDiskInterface();
    if (!vmsDiskOrSnapshotPluggedTo.isEmpty()) {
        // only virtual drive size can be updated when VMs is running
        if (isAtLeastOneVmIsNotDown(vmsDiskOrSnapshotPluggedTo) && updateParametersRequiringVmDownRequested()) {
            return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN);
        }
        boolean isUpdatedAsBootable = !getOldDiskVmElement().isBoot() && getDiskVmElement().isBoot();
        // multiple boot disk snapshot can be attached to a single vm
        if (isUpdatedAsBootable && !validate(oldDiskValidator.isVmNotContainsBootDisk(getVm()))) {
            return false;
        }
        if (isDiskInterfaceUpdated && !isDiskPassPciAndIdeLimit()) {
            return false;
        }
    }
    if (isDiskImageOrCinder && !validateCanResizeDisk()) {
        return false;
    }
    if (resizeDiskImageRequested() && amendDiskRequested()) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_AMEND_AND_EXTEND_IN_ONE_OPERATION);
    }
    if (isQcowCompatChangedOnRawDisk()) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_AMEND_RAW_DISK);
    }
    DiskVmElementValidator diskVmElementValidator = getDiskVmElementValidator(getNewDisk(), getDiskVmElement());
    return validateCanUpdateShareable() && validateCanUpdateReadOnly() && validateVmPoolProperties() && validateQuota() && validate(diskVmElementValidator.isVirtIoScsiValid(getVm())) && (!isDiskInterfaceUpdated || validate(diskVmElementValidator.isDiskInterfaceSupported(getVm()))) && setAndValidateDiskProfiles() && validatePassDiscardSupported(diskVmElementValidator);
}
#end_block

#method_before
protected boolean amendDiskRequested() {
    if (getNewDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
        QcowCompat qcowCompat = ((DiskImage) getNewDisk()).getQcowCompat();
        DiskImage unmatchedQcowCompatDisk = getDiskImages(getOldDisk().getId()).stream().filter(disk -> disk.isQcowFormat() && disk.getQcowCompat() == qcowCompat).findFirst().get();
        return unmatchedQcowCompatDisk != null;
    }
    return false;
}
#method_after
protected boolean amendDiskRequested() {
    if (getNewDisk().getDiskStorageType() == DiskStorageType.IMAGE) {
        QcowCompat qcowCompat = ((DiskImage) getNewDisk()).getQcowCompat();
        return getDiskImages(getOldDisk().getId()).stream().anyMatch(disk -> disk.isQcowFormat() && disk.getQcowCompat() != qcowCompat);
    }
    return false;
}
#end_block

#method_before
private void updateLabelList() {
    AsyncDataProvider.getInstance().getLabelList(new AsyncQuery<>(allLabels -> {
        boolean isExistingVmBehavior = getBehavior() instanceof ExistingVmModelBehavior;
        if (isExistingVmBehavior) {
            Guid vmId = ((ExistingVmModelBehavior) getBehavior()).getVm().getId();
            AsyncDataProvider.getInstance().getLabelListByEntityId(new AsyncQuery<>(vmLabelsList -> {
                labelList.setItems(allLabels);
                labelList.setSelectedItems(vmLabelsList);
            }), vmId);
        } else {
            labelList.setItems(allLabels);
            labelList.setSelectedItems(new ArrayList<Label>());
        }
        labelList.setIsChangeable(false);
    }));
}
#method_after
private void updateLabelList() {
    AsyncDataProvider.getInstance().getLabelList(new AsyncQuery<>(allLabels -> {
        boolean isExistingVmBehavior = getBehavior() instanceof ExistingVmModelBehavior;
        if (isExistingVmBehavior) {
            Guid vmId = ((ExistingVmModelBehavior) getBehavior()).getVm().getId();
            AsyncDataProvider.getInstance().getLabelListByEntityId(new AsyncQuery<>(vmLabelsList -> {
                labelList.setItems(allLabels);
                labelList.setSelectedItems(vmLabelsList);
            }), vmId);
        } else {
            labelList.setItems(allLabels);
            labelList.setSelectedItems(new ArrayList<>());
        }
    }));
}
#end_block

#method_before
public void initialize(SystemTreeItemModel SystemTreeSelectedItem) {
    super.initialize();
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getMaxMemorySize().setEntity(VmCommonUtils.getMaxMemorySizeDefault(getMemSize().getEntity()));
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsHeadlessModeEnabled().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getBehavior().enableSinglePCI(false);
    isRngEnabled.setEntity(false);
    rngSourceUrandom.setEntity(true);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangeable(true);
    getCdImage().setIsChangeable(false);
    initGraphicsAndDisplayListeners();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMigrationMode();
    initVncKeyboardLayout();
    initConsoleDisconnectAction();
    updateLabelList();
    behavior.initialize(SystemTreeSelectedItem);
}
#method_after
public void initialize() {
    super.initialize();
    getMemSize().setEntity(256);
    getMinAllocatedMemory().setEntity(256);
    getMaxMemorySize().setEntity(VmCommonUtils.getMaxMemorySizeDefault(getMemSize().getEntity()));
    getIsStateless().setEntity(false);
    getIsRunAndPause().setEntity(false);
    getIsHeadlessModeEnabled().setEntity(false);
    getIsSmartcardEnabled().setEntity(false);
    isConsoleDeviceEnabled.setEntity(false);
    getIsHighlyAvailable().setEntity(false);
    getIsAutoAssign().setEntity(true);
    getIsTemplatePublic().setEntity(true);
    getBehavior().enableSinglePCI(false);
    isRngEnabled.setEntity(false);
    rngSourceUrandom.setEntity(true);
    getHostCpu().setEntity(false);
    getMigrationMode().setIsChangeable(true);
    getCdImage().setIsChangeable(false);
    initGraphicsAndDisplayListeners();
    initFirstBootDevice();
    initNumOfMonitors();
    initAllowConsoleReconnect();
    initMigrationMode();
    initVncKeyboardLayout();
    initConsoleDisconnectAction();
    updateLabelList();
    behavior.initialize();
}
#end_block

#method_before
public void setDataCentersAndClusters(UnitVmModel model, List<StoragePool> dataCenters, List<Cluster> clusters, Guid selectedCluster) {
    if (model.getBehavior().getSystemTreeSelectedItem() != null && model.getBehavior().getSystemTreeSelectedItem().getType() != SystemTreeItemType.System) {
        setupDataCenterWithClustersFromSystemTree(model, dataCenters, clusters, selectedCluster);
    } else {
        setupDataCenterWithClusters(model, dataCenters, clusters, selectedCluster);
    }
}
#method_after
public void setDataCentersAndClusters(UnitVmModel model, List<StoragePool> dataCenters, List<Cluster> clusters, Guid selectedCluster) {
    setupDataCenterWithClusters(model, dataCenters, clusters, selectedCluster);
}
#end_block

#method_before
private void doExport() {
    ExportVmModel model = (ExportVmModel) getWindow();
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VmTemplate a = (VmTemplate) item;
        if (a.getId().equals(Guid.Empty)) {
            continue;
        }
        MoveOrCopyParameters tempVar = new MoveOrCopyParameters(a.getId(), model.getStorage().getSelectedItem().getId());
        tempVar.setForceOverride(model.getForceOverride().getEntity());
        list.add(tempVar);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.ExportVmTemplate, list, result -> {
        ExportVmModel localModel = (ExportVmModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void doExport() {
    ExportVmModel model = (ExportVmModel) getWindow();
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VmTemplate a = (VmTemplate) item;
        if (a.getId().equals(Guid.Empty)) {
            continue;
        }
        MoveOrCopyParameters tempVar = new MoveOrCopyParameters(a.getId(), model.getStorage().getSelectedItem().getId());
        tempVar.setForceOverride(model.getForceOverride().getEntity());
        list.add(tempVar);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.ExportVmTemplate, list, result -> {
        ExportVmModel localModel = (ExportVmModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
protected void addCustomModelsDetailModelList(final List<HasEntity<VmTemplate>> list, int customPosition, final TemplateDiskListModel templateDiskListModel, final TemplateEventListModel templateEventListModel, final PermissionListModel<VmTemplate> permissionListModel) {
    templateDiskListModel.setSystemTreeContext(this);
    list.add(customPosition, templateDiskListModel);
    list.add(templateEventListModel);
    list.add(permissionListModel);
}
#method_after
protected void addCustomModelsDetailModelList(final List<HasEntity<VmTemplate>> list, int customPosition, final TemplateDiskListModel templateDiskListModel, final TemplateEventListModel templateEventListModel, final PermissionListModel<VmTemplate> permissionListModel) {
    list.add(customPosition, templateDiskListModel);
    list.add(templateEventListModel);
    list.add(permissionListModel);
}
#end_block

#method_before
private void vmInitLoaded(VmTemplate template) {
    UnitVmModel model = createModel(createBehavior(template));
    model.setIsAdvancedModeLocalStorageKey(getEditTemplateAdvancedModelKey());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editTemplateTitle());
    model.setHelpTag(HelpTag.edit_template);
    // $NON-NLS-1$
    model.setHashName("edit_template");
    model.getVmType().setSelectedItem(template.getVmType());
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    model.initialize(this.getSystemTreeSelectedItem());
    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
    switchModeCommand.init(model);
    model.getCommands().add(switchModeCommand);
    // $NON-NLS-1$
    UICommand onSaveCommand = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(onSaveCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(cancelCommand);
    model.getIsHighlyAvailable().setEntity(template.isAutoStartup());
    if (template.getDefaultDisplayType() == DisplayType.none) {
        model.getIsHeadlessModeEnabled().setEntity(true);
    }
}
#method_after
private void vmInitLoaded(VmTemplate template) {
    UnitVmModel model = createModel(createBehavior(template));
    model.setIsAdvancedModeLocalStorageKey(getEditTemplateAdvancedModelKey());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editTemplateTitle());
    model.setHelpTag(HelpTag.edit_template);
    // $NON-NLS-1$
    model.setHashName("edit_template");
    model.getVmType().setSelectedItem(template.getVmType());
    model.setCustomPropertiesKeysList(AsyncDataProvider.getInstance().getCustomPropertiesList());
    model.initialize();
    VmBasedWidgetSwitchModeCommand switchModeCommand = new VmBasedWidgetSwitchModeCommand();
    switchModeCommand.init(model);
    model.getCommands().add(switchModeCommand);
    // $NON-NLS-1$
    UICommand onSaveCommand = UICommand.createDefaultOkUiCommand("OnSave", this);
    model.getCommands().add(onSaveCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = UICommand.createCancelUiCommand("Cancel", this);
    model.getCommands().add(cancelCommand);
    model.getIsHighlyAvailable().setEntity(template.isAutoStartup());
    if (template.getDefaultDisplayType() == DisplayType.none) {
        model.getIsHeadlessModeEnabled().setEntity(true);
    }
}
#end_block

#method_before
private void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VmTemplate a = (VmTemplate) item;
        list.add(new VmTemplateManagementParameters(a.getId()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVmTemplate, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VmTemplate a = (VmTemplate) item;
        list.add(new VmTemplateManagementParameters(a.getId()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.RemoveVmTemplate, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
private void createVMFromTemplate() {
    VmTemplate template = getSelectedItem();
    final List<UICommand> commands = new ArrayList<>();
    // $NON-NLS-1$
    commands.add(UICommand.createDefaultOkUiCommand("OnSaveVm", this));
    // $NON-NLS-1$
    commands.add(UICommand.createCancelUiCommand("Cancel", this));
    AsyncDataProvider.getInstance().getTemplateById(new AsyncQuery<>(withVmInit -> setupNewVmModel(new UnitVmModel(new NewVmFromTemplateModelBehavior(withVmInit), TemplateListModel.this), withVmInit.getVmType(), getSystemTreeSelectedItem(), commands)), template.getId());
}
#method_after
private void createVMFromTemplate() {
    VmTemplate template = getSelectedItem();
    final List<UICommand> commands = new ArrayList<>();
    // $NON-NLS-1$
    commands.add(UICommand.createDefaultOkUiCommand("OnSaveVm", this));
    // $NON-NLS-1$
    commands.add(UICommand.createCancelUiCommand("Cancel", this));
    AsyncDataProvider.getInstance().getTemplateById(new AsyncQuery<>(withVmInit -> setupNewVmModel(new UnitVmModel(new NewVmFromTemplateModelBehavior(withVmInit), TemplateListModel.this), withVmInit.getVmType(), commands)), template.getId());
}
#end_block

#method_before
public void postNameUniqueCheck() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem;
    if (model.getBehavior().isExistingTemplateBehavior()) {
        selectedItem = ((TemplateVmModelBehavior) model.getBehavior()).getVmTemplate();
    } else {
        selectedItem = ((ExistingBlankTemplateModelBehavior) model.getBehavior()).getVmTemplate();
    }
    final VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    final String iconForParameters = IconCache.getInstance().getIcon(selectedItem.getLargeIconId()).equals(model.getIcon().getEntity().getIcon()) ? null : IconUtils.filterPredefinedIcons(model.getIcon().getEntity().getIcon());
    // Save changes.
    buildTemplateOnSave(model, template);
    template.setCreatedByUserId(selectedItem.getCreatedByUserId());
    model.startProgress();
    template.setVmInit(model.getVmInitModel().buildCloudInitParameters(model));
    UpdateVmTemplateParameters parameters = new UpdateVmTemplateParameters(template);
    parameters.setVmLargeIcon(iconForParameters);
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    setVmWatchdogToParams(model, parameters);
    BuilderExecutor.build(model, parameters, new UnitToGraphicsDeviceParamsBuilder());
    parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    setVmRngDeviceToParams(model, parameters);
    parameters.setBalloonEnabled(balloonEnabled(model));
    parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
    if (model.getIsHeadlessModeEnabled().getEntity()) {
        parameters.getVmTemplateData().setDefaultDisplayType(DisplayType.none);
    }
    Frontend.getInstance().runAction(VdcActionType.UpdateVmTemplate, parameters, result -> {
        TemplateListModel localModel = (TemplateListModel) result.getState();
        localModel.postUpdateVmTemplate(result.getReturnValue());
    }, this);
}
#method_after
public void postNameUniqueCheck() {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VmTemplate selectedItem;
    if (model.getBehavior().isExistingTemplateBehavior()) {
        selectedItem = ((TemplateVmModelBehavior) model.getBehavior()).getVmTemplate();
    } else {
        selectedItem = ((ExistingBlankTemplateModelBehavior) model.getBehavior()).getVmTemplate();
    }
    final VmTemplate template = (VmTemplate) Cloner.clone(selectedItem);
    final String iconForParameters = IconCache.getInstance().getIcon(selectedItem.getLargeIconId()).equals(model.getIcon().getEntity().getIcon()) ? null : IconUtils.filterPredefinedIcons(model.getIcon().getEntity().getIcon());
    // Save changes.
    buildTemplateOnSave(model, template);
    template.setCreatedByUserId(selectedItem.getCreatedByUserId());
    model.startProgress();
    template.setVmInit(model.getVmInitModel().buildCloudInitParameters(model));
    UpdateVmTemplateParameters parameters = new UpdateVmTemplateParameters(template);
    parameters.setVmLargeIcon(iconForParameters);
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    setVmWatchdogToParams(model, parameters);
    BuilderExecutor.build(model, parameters, new UnitToGraphicsDeviceParamsBuilder());
    parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    setVmRngDeviceToParams(model, parameters);
    parameters.setBalloonEnabled(balloonEnabled(model));
    parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
    if (model.getIsHeadlessModeEnabled().getEntity()) {
        parameters.getVmTemplateData().setDefaultDisplayType(DisplayType.none);
    }
    Frontend.getInstance().runAction(ActionType.UpdateVmTemplate, parameters, result -> {
        TemplateListModel localModel = (TemplateListModel) result.getState();
        localModel.postUpdateVmTemplate(result.getReturnValue());
    }, this);
}
#end_block

#method_before
@Override
protected void updateActionsAvailability() {
    VmTemplate item = getSelectedItem();
    ArrayList items = (getSelectedItems() != null) ? (ArrayList) getSelectedItems() : new ArrayList();
    boolean blankSelected = isBlankTemplateSelected();
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && item != null && item.getStatus() != VmTemplateStatus.Locked);
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VmTemplate.class, VdcActionType.RemoveVmTemplate));
    if (getRemoveCommand().getIsExecutionAllowed() && blankSelected) {
        getRemoveCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeRemoved());
        getRemoveCommand().setIsExecutionAllowed(false);
    }
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VmTemplate.class, VdcActionType.ExportVmTemplate));
    if (getExportCommand().getIsExecutionAllowed() && blankSelected) {
        getExportCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeExported());
        getExportCommand().setIsExecutionAllowed(false);
    }
    getCreateVmFromTemplateCommand().setIsExecutionAllowed(items.size() == 1 && item != null && item.getStatus() != VmTemplateStatus.Locked);
}
#method_after
@Override
protected void updateActionsAvailability() {
    VmTemplate item = getSelectedItem();
    ArrayList items = (getSelectedItems() != null) ? (ArrayList) getSelectedItems() : new ArrayList();
    boolean blankSelected = isBlankTemplateSelected();
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && item != null && item.getStatus() != VmTemplateStatus.Locked);
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VmTemplate.class, ActionType.RemoveVmTemplate));
    if (getRemoveCommand().getIsExecutionAllowed() && blankSelected) {
        getRemoveCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeRemoved());
        getRemoveCommand().setIsExecutionAllowed(false);
    }
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VmTemplate.class, ActionType.ExportVmTemplate));
    if (getExportCommand().getIsExecutionAllowed() && blankSelected) {
        getExportCommand().getExecuteProhibitionReasons().add(ConstantsManager.getInstance().getConstants().blankTemplateCannotBeExported());
        getExportCommand().setIsExecutionAllowed(false);
    }
    getCreateVmFromTemplateCommand().setIsExecutionAllowed(items.size() == 1 && item != null && item.getStatus() != VmTemplateStatus.Locked);
}
#end_block

#method_before
@Override
protected void setupNewVmModel(UnitVmModel model, VmType vmType, SystemTreeItemModel systemTreeItemModel, List<UICommand> uiCommands) {
    super.setupNewVmModel(model, vmType, systemTreeItemModel, uiCommands);
    model.getProvisioning().setEntity(vmType == VmType.Server || vmType == VmType.HighPerformance);
}
#method_after
@Override
protected void setupNewVmModel(UnitVmModel model, VmType vmType, List<UICommand> uiCommands) {
    super.setupNewVmModel(model, vmType, uiCommands);
    model.getProvisioning().setEntity(vmType == VmType.Server || vmType == VmType.HighPerformance);
}
#end_block

#method_before
@Override
public void initialize(SystemTreeItemModel systemTreeSelectedItem) {
    super.initialize(systemTreeSelectedItem);
    getModel().getIsSoundcardEnabled().setIsChangeable(true);
    getModel().getVmType().setIsChangeable(true);
    getModel().getVmId().setIsAvailable(true);
    getModel().getLabelList().setIsAvailable(true);
    loadDataCenters();
    initPriority(0);
    getModel().getVmInitModel().init(null);
    instanceTypeManager = new NewVmInstanceTypeManager(getModel());
}
#method_after
@Override
public void initialize() {
    super.initialize();
    getModel().getIsSoundcardEnabled().setIsChangeable(true);
    getModel().getVmType().setIsChangeable(true);
    getModel().getVmId().setIsAvailable(true);
    getModel().getLabelList().setIsAvailable(true);
    loadDataCenters();
    initPriority(0);
    getModel().getVmInitModel().init(null);
    instanceTypeManager = new NewVmInstanceTypeManager(getModel());
}
#end_block

#method_before
private void updateTemplate() {
    final DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    // Filter according to system tree selection.
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Storage) {
        final StorageDomain storage = (StorageDomain) getSystemTreeSelectedItem().getEntity();
        AsyncDataProvider.getInstance().getTemplateListByDataCenter(asyncQuery(templatesByDataCenter -> AsyncDataProvider.getInstance().getTemplateListByStorage(asyncQuery(templatesByStorage -> {
            VmTemplate blankTemplate = Linq.firstOrNull(templatesByDataCenter, new Linq.IdPredicate<>(Guid.Empty));
            if (blankTemplate != null) {
                templatesByStorage.add(0, blankTemplate);
            }
            List<VmTemplate> templateList = AsyncDataProvider.getInstance().filterTemplatesByArchitecture(templatesByStorage, dataCenterWithCluster.getCluster().getArchitecture());
            postInitTemplate(templateList);
        }), storage.getId())), dataCenter.getId());
    } else {
        AsyncDataProvider.getInstance().getTemplateListByDataCenter(asyncQuery(templates -> postInitTemplate(AsyncDataProvider.getInstance().filterTemplatesByArchitecture(templates, dataCenterWithCluster.getCluster().getArchitecture()))), dataCenter.getId());
    }
}
#method_after
private void updateTemplate() {
    final DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem();
    StoragePool dataCenter = dataCenterWithCluster == null ? null : dataCenterWithCluster.getDataCenter();
    if (dataCenter == null) {
        return;
    }
    AsyncDataProvider.getInstance().getTemplateListByDataCenter(asyncQuery(templates -> postInitTemplate(AsyncDataProvider.getInstance().filterTemplatesByArchitecture(templates, dataCenterWithCluster.getCluster().getArchitecture()))), dataCenter.getId());
}
#end_block

#method_before
private void createDiskBasedOnImage() {
    if (!getParameters().getDiskInfo().isWipeAfterDeleteSet()) {
        getParameters().getDiskInfo().setWipeAfterDelete(getStorageDomain().getWipeAfterDelete());
    }
    // create from blank template, create new vm snapshot id
    AddImageFromScratchParameters parameters = new AddImageFromScratchParameters(Guid.Empty, getParameters().getVmId(), getDiskImageInfo());
    parameters.setQuotaId(getQuotaId());
    parameters.setDiskProfileId(getDiskImageInfo().getDiskProfileId());
    parameters.setDiskAlias(getDiskAlias());
    if (getParameters().isUsePassedImageId()) {
        parameters.setDestinationImageId(getDiskImageInfo().getImageId());
    }
    parameters.setLeaveLocked(getParameters().isShouldRemainLockedOnSuccesfulExecution());
    parameters.setShouldRemainIllegalOnFailedExecution(getParameters().isShouldRemainIllegalOnFailedExecution());
    parameters.setStorageDomainId(getStorageDomainId());
    if (useCallback()) {
        parameters.setParentCommand(VdcActionType.AddDisk);
        parameters.setParentParameters(getParameters());
    } else {
        parameters.setParentCommand(getParameters().getParentCommand());
        parameters.setParentParameters(getParameters().getParentParameters());
    }
    parameters.setEntityInfo(getParameters().getEntityInfo());
    parameters.setStoragePoolId(getStorageDomain().getStoragePoolId());
    setVmSnapshotIdForDisk(parameters);
    VdcReturnValueBase tmpRetValue = runInternalActionWithTasksContext(VdcActionType.AddImageFromScratch, parameters, getLock());
    // Setting lock to null because the lock is released in the child command
    setLock(null);
    getTaskIdList().addAll(tmpRetValue.getInternalVdsmTaskIdList());
    if (getVm() != null) {
        // The disk VM element has to be added before the VM device since as a part of the VM device creation the
        // boot order is determined so the VM device creation depends on the existence of the disk VM element
        getCompensationContext().snapshotEntity(addDiskVmElementForDisk(getDiskVmElement()));
        getCompensationContext().snapshotNewEntity(addManagedDeviceForDisk(getParameters().getDiskInfo().getId()));
        getCompensationContext().stateChanged();
    }
    if (tmpRetValue.getActionReturnValue() != null) {
        DiskImage diskImage = tmpRetValue.getActionReturnValue();
        addDiskPermissions(diskImage);
        getReturnValue().setActionReturnValue(diskImage.getId());
    }
    getReturnValue().setFault(tmpRetValue.getFault());
    setSucceeded(tmpRetValue.getSucceeded());
}
#method_after
private void createDiskBasedOnImage() {
    if (!getParameters().getDiskInfo().isWipeAfterDeleteSet()) {
        getParameters().getDiskInfo().setWipeAfterDelete(getStorageDomain().getWipeAfterDelete());
    }
    // create from blank template, create new vm snapshot id
    AddImageFromScratchParameters parameters = new AddImageFromScratchParameters(Guid.Empty, getParameters().getVmId(), getDiskImageInfo());
    parameters.setQuotaId(getQuotaId());
    parameters.setDiskProfileId(getDiskImageInfo().getDiskProfileId());
    parameters.setDiskAlias(getDiskAlias());
    if (getParameters().isUsePassedImageId()) {
        parameters.setDestinationImageId(getDiskImageInfo().getImageId());
    }
    parameters.setLeaveLocked(getParameters().isShouldRemainLockedOnSuccesfulExecution());
    parameters.setShouldRemainIllegalOnFailedExecution(getParameters().isShouldRemainIllegalOnFailedExecution());
    parameters.setStorageDomainId(getStorageDomainId());
    if (useCallback()) {
        parameters.setParentCommand(ActionType.AddDisk);
        parameters.setParentParameters(getParameters());
    } else {
        parameters.setParentCommand(getParameters().getParentCommand());
        parameters.setParentParameters(getParameters().getParentParameters());
    }
    parameters.setEntityInfo(getParameters().getEntityInfo());
    parameters.setStoragePoolId(getStorageDomain().getStoragePoolId());
    setVmSnapshotIdForDisk(parameters);
    VdcReturnValueBase tmpRetValue = runInternalActionWithTasksContext(ActionType.AddImageFromScratch, parameters, getLock());
    // Setting lock to null because the lock is released in the child command
    setLock(null);
    getTaskIdList().addAll(tmpRetValue.getInternalVdsmTaskIdList());
    if (getVm() != null) {
        // The disk VM element has to be added before the VM device since as a part of the VM device creation the
        // boot order is determined so the VM device creation depends on the existence of the disk VM element
        getCompensationContext().snapshotEntity(addDiskVmElementForDisk(getDiskVmElement()));
        getCompensationContext().snapshotNewEntity(addManagedDeviceForDisk(getParameters().getDiskInfo().getId()));
        getCompensationContext().stateChanged();
    }
    if (tmpRetValue.getActionReturnValue() != null) {
        DiskImage diskImage = tmpRetValue.getActionReturnValue();
        addDiskPermissions(diskImage);
        getReturnValue().setActionReturnValue(diskImage.getId());
    }
    getReturnValue().setFault(tmpRetValue.getFault());
    setSucceeded(tmpRetValue.getSucceeded());
}
#end_block

#method_before
private void createDiskBasedOnCinder() {
    // ToDo: upon using CoCo infra in this commnad, move this logic.
    Future<VdcReturnValueBase> future = CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.AddCinderDisk, buildAddCinderDiskParameters(), cloneContextAndDetachFromParent());
    try {
        setReturnValue(future.get());
        setSucceeded(getReturnValue().getSucceeded());
    } catch (InterruptedException | ExecutionException e) {
        log.error("Error creating Cinder disk '{}': {}", getParameters().getDiskInfo().getDiskAlias(), e.getMessage());
        log.debug("Exception", e);
    }
}
#method_after
private void createDiskBasedOnCinder() {
    // ToDo: upon using CoCo infra in this commnad, move this logic.
    Future<VdcReturnValueBase> future = CommandCoordinatorUtil.executeAsyncCommand(ActionType.AddCinderDisk, buildAddCinderDiskParameters(), cloneContextAndDetachFromParent());
    try {
        setReturnValue(future.get());
        setSucceeded(getReturnValue().getSucceeded());
    } catch (InterruptedException | ExecutionException e) {
        log.error("Error creating Cinder disk '{}': {}", getParameters().getDiskInfo().getDiskAlias(), e.getMessage());
        log.debug("Exception", e);
    }
}
#end_block

#method_before
private VdcActionParametersBase buildAddCinderDiskParameters() {
    AddDiskParameters parameters = new AddDiskParameters(new DiskVmElement(null, getVmId()), getParameters().getDiskInfo());
    parameters.setPlugDiskToVm(getParameters().getPlugDiskToVm());
    parameters.setStorageDomainId(getParameters().getStorageDomainId());
    parameters.setQuotaId(getQuotaId());
    parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED);
    if (getVm() != null) {
        parameters.setVmSnapshotId(snapshotDao.getId(getVmId(), SnapshotType.ACTIVE));
        parameters.setDiskVmElement(getParameters().getDiskVmElement());
    }
    return parameters;
}
#method_after
private ActionParametersBase buildAddCinderDiskParameters() {
    AddDiskParameters parameters = new AddDiskParameters(new DiskVmElement(null, getVmId()), getParameters().getDiskInfo());
    parameters.setPlugDiskToVm(getParameters().getPlugDiskToVm());
    parameters.setStorageDomainId(getParameters().getStorageDomainId());
    parameters.setQuotaId(getQuotaId());
    parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED);
    if (getVm() != null) {
        parameters.setVmSnapshotId(snapshotDao.getId(getVmId(), SnapshotType.ACTIVE));
        parameters.setDiskVmElement(getParameters().getDiskVmElement());
    }
    return parameters;
}
#end_block

#method_before
@Override
protected VdcActionType getChildActionType() {
    return VdcActionType.AddImageFromScratch;
}
#method_after
@Override
protected ActionType getChildActionType() {
    return ActionType.AddImageFromScratch;
}
#end_block

#method_before
private void plugDiskToVmIfNeeded() {
    if (Boolean.TRUE.equals(getParameters().getPlugDiskToVm()) && getVm() != null && getVm().getStatus() != VMStatus.Down) {
        VmDiskOperationParameterBase params = new VmDiskOperationParameterBase(new DiskVmElement(getParameters().getDiskInfo().getId(), getVmId()));
        params.setShouldBeLogged(false);
        VdcReturnValueBase returnValue = runInternalAction(VdcActionType.HotPlugDiskToVm, params);
        if (!returnValue.getSucceeded()) {
            auditLogDirector.log(this, AuditLogType.USER_FAILED_HOTPLUG_DISK);
        }
    }
}
#method_after
private void plugDiskToVmIfNeeded() {
    if (Boolean.TRUE.equals(getParameters().getPlugDiskToVm()) && getVm() != null && getVm().getStatus() != VMStatus.Down) {
        VmDiskOperationParameterBase params = new VmDiskOperationParameterBase(new DiskVmElement(getParameters().getDiskInfo().getId(), getVmId()));
        params.setShouldBeLogged(false);
        VdcReturnValueBase returnValue = runInternalAction(ActionType.HotPlugDiskToVm, params);
        if (!returnValue.getSucceeded()) {
            auditLogDirector.log(this, AuditLogType.USER_FAILED_HOTPLUG_DISK);
        }
    }
}
#end_block

#method_before
private void cleanConnection(StorageServerConnections connection, Guid hostId) {
    // then the id of connection will be empty, and there's nothing to delete.
    if (connection.getId() != null && !connection.getId().equals("")) {
        // $NON-NLS-1$
        Frontend.getInstance().runAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId, false), null, this);
    }
}
#method_after
private void cleanConnection(StorageServerConnections connection, Guid hostId) {
    // then the id of connection will be empty, and there's nothing to delete.
    if (connection.getId() != null && !connection.getId().equals("")) {
        // $NON-NLS-1$
        Frontend.getInstance().runAction(ActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId, false), null, this);
    }
}
#end_block

#method_before
private void updateOvfs() {
    StorageDomain storage = getSelectedItem();
    if (storage != null) {
        StorageDomainParametersBase params = new StorageDomainParametersBase(storage.getId());
        Frontend.getInstance().runAction(VdcActionType.UpdateOvfStoreForStorageDomain, params, null, this);
    }
    cancel();
}
#method_after
private void updateOvfs() {
    StorageDomain storage = getSelectedItem();
    if (storage != null) {
        StorageDomainParametersBase params = new StorageDomainParametersBase(storage.getId());
        Frontend.getInstance().runAction(ActionType.UpdateOvfStoreForStorageDomain, params, null, this);
    }
    cancel();
}
#end_block

#method_before
private void onRemove() {
    if (getSelectedItem() != null) {
        StorageDomain storage = getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.validate()) {
            return;
        }
        VDS host = model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat(model.getFormat().getEntity());
        Frontend.getInstance().runAction(VdcActionType.RemoveStorageDomain, tempVar, null, this);
    }
    cancel();
}
#method_after
private void onRemove() {
    if (getSelectedItem() != null) {
        StorageDomain storage = getSelectedItem();
        RemoveStorageModel model = (RemoveStorageModel) getWindow();
        if (!model.validate()) {
            return;
        }
        VDS host = model.getHostList().getSelectedItem();
        RemoveStorageDomainParameters tempVar = new RemoveStorageDomainParameters(storage.getId());
        tempVar.setVdsId(host.getId());
        tempVar.setDoFormat(model.getFormat().getEntity());
        Frontend.getInstance().runAction(ActionType.RemoveStorageDomain, tempVar, null, this);
    }
    cancel();
}
#end_block

#method_before
private void onDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    StorageDomain storageDomain = getSelectedItem();
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.ForceRemoveStorageDomain, new ArrayList<>(Arrays.asList(new VdcActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void onDestroy() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    StorageDomain storageDomain = getSelectedItem();
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new ArrayList<>(Arrays.asList(new ActionParametersBase[] { new StorageDomainParametersBase(storageDomain.getId()) })), result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
private void scanDisks() {
    StorageDomain storageDomain = getSelectedItem();
    if (storageDomain != null) {
        Frontend.getInstance().runAction(VdcActionType.ScanStorageForUnregisteredDisks, new StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId()));
    }
}
#method_after
private void scanDisks() {
    StorageDomain storageDomain = getSelectedItem();
    if (storageDomain != null) {
        Frontend.getInstance().runAction(ActionType.ScanStorageForUnregisteredDisks, new StorageDomainParametersBase(storageDomain.getStoragePoolId(), storageDomain.getId()));
    }
}
#end_block

#method_before
private void cancelImportConfirm() {
    cancelConfirm();
    getWindow().stopProgress();
    if (fileConnection != null) {
        Frontend.getInstance().runAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            cleanConnection(storageListModel.fileConnection, storageListModel.hostId);
            storageListModel.fileConnection = null;
        }, this);
    }
}
#method_after
private void cancelImportConfirm() {
    cancelConfirm();
    getWindow().stopProgress();
    if (fileConnection != null) {
        Frontend.getInstance().runAction(ActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            cleanConnection(storageListModel.fileConnection, storageListModel.hostId);
            storageListModel.fileConnection = null;
        }, this);
    }
}
#end_block

#method_before
private void updateStorageDomain() {
    Frontend.getInstance().runAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    }, this);
}
#method_after
private void updateStorageDomain() {
    Frontend.getInstance().runAction(ActionType.UpdateStorageDomain, new StorageDomainManagementParameter(this.storageDomain), result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    }, this);
}
#end_block

#method_before
public void saveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setConnection(path);
    connection.setStorageType(posixModel.getType());
    connection.setVfsType(posixModel.getVfsType().getEntity());
    connection.setMountOptions(posixModel.getMountOptions().getEntity());
    if (posixModel instanceof GlusterStorageModel) {
        GlusterStorageModel glusterModel = (GlusterStorageModel) posixModel;
        Guid glusterVolId = null;
        if (glusterModel.getLinkGlusterVolume().getEntity()) {
            glusterVolId = ((GlusterStorageModel) posixModel).getGlusterVolumes().getSelectedItem() != null ? ((GlusterStorageModel) posixModel).getGlusterVolumes().getSelectedItem().getId() : null;
        }
        connection.setGlusterVolumeId(glusterVolId);
    }
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(posixModel.getAddStorageDomainVdcAction());
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId(), false));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    StoragePool dataCenter = model.getDataCenter().getSelectedItem();
    parameter.setStoragePoolId(dataCenter.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        storageListModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageId = vdcReturnValueBase.getActionReturnValue();
        // Attach storage to data center as necessary.
        StorageModel storageModel = (StorageModel) storageListModel.getWindow();
        StoragePool dataCenter1 = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter1.getId().equals(StorageModel.UnassignedDataCenterId)) {
            storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter1.getId(), storageModel.getActivateDomain().getEntity());
        }
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
        storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void saveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setConnection(path);
    connection.setStorageType(posixModel.getType());
    connection.setVfsType(posixModel.getVfsType().getEntity());
    connection.setMountOptions(posixModel.getMountOptions().getEntity());
    if (posixModel instanceof GlusterStorageModel) {
        GlusterStorageModel glusterModel = (GlusterStorageModel) posixModel;
        Guid glusterVolId = null;
        if (glusterModel.getLinkGlusterVolume().getEntity()) {
            glusterVolId = ((GlusterStorageModel) posixModel).getGlusterVolumes().getSelectedItem() != null ? ((GlusterStorageModel) posixModel).getGlusterVolumes().getSelectedItem().getId() : null;
        }
        connection.setGlusterVolumeId(glusterVolId);
    }
    this.connection = connection;
    ArrayList<ActionType> actionTypes = new ArrayList<>();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(ActionType.AddStorageServerConnection);
    actionTypes.add(posixModel.getAddStorageDomainVdcAction());
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId(), false));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    StoragePool dataCenter = model.getDataCenter().getSelectedItem();
    parameter.setStoragePoolId(dataCenter.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        storageListModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageId = vdcReturnValueBase.getActionReturnValue();
        // Attach storage to data center as necessary.
        StorageModel storageModel = (StorageModel) storageListModel.getWindow();
        StoragePool dataCenter1 = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter1.getId().equals(StorageModel.UnassignedDataCenterId)) {
            storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter1.getId(), storageModel.getActivateDomain().getEntity());
        }
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
        storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void updatePath() {
    StorageModel model = (StorageModel) getWindow();
    VDS host = model.getHost().getSelectedItem();
    Guid hostId = Guid.Empty;
    if (host != null) {
        hostId = host.getId();
    }
    IStorageModel storageModel = model.getCurrentStorageItem();
    connection = new StorageServerConnections();
    connection.setId(storageDomain.getStorage());
    connection.setConnection(path);
    connection.setStorageType(storageModel.getType());
    if (storageModel.getType().equals(StorageType.NFS)) {
        updateNFSProperties(storageModel);
    } else if (storageModel instanceof PosixStorageModel) {
        updatePosixProperties(storageModel);
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, hostId, false);
    Frontend.getInstance().runAction(VdcActionType.UpdateStorageServerConnection, parameters, result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    }, this);
}
#method_after
private void updatePath() {
    StorageModel model = (StorageModel) getWindow();
    VDS host = model.getHost().getSelectedItem();
    Guid hostId = Guid.Empty;
    if (host != null) {
        hostId = host.getId();
    }
    IStorageModel storageModel = model.getCurrentStorageItem();
    connection = new StorageServerConnections();
    connection.setId(storageDomain.getStorage());
    connection.setConnection(path);
    connection.setStorageType(storageModel.getType());
    if (storageModel.getType().equals(StorageType.NFS)) {
        updateNFSProperties(storageModel);
    } else if (storageModel instanceof PosixStorageModel) {
        updatePosixProperties(storageModel);
    }
    StorageServerConnectionParametersBase parameters = new StorageServerConnectionParametersBase(connection, hostId, false);
    Frontend.getInstance().runAction(ActionType.UpdateStorageServerConnection, parameters, result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    }, this);
}
#end_block

#method_before
public void saveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections storageConnection = new StorageServerConnections();
    storageConnection.setConnection(path);
    storageConnection.setStorageType(nfsModel.getType());
    if (isConnectionOverriden()) {
        storageConnection.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        storageConnection.setNfsRetrans(nfsModel.getRetransmissions().asConvertible().nullableShort());
        storageConnection.setNfsTimeo(nfsModel.getTimeout().asConvertible().nullableShort());
        storageConnection.setMountOptions(nfsModel.getMountOptions().getEntity());
    }
    connection = storageConnection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    StoragePool dataCenter = model.getDataCenter().getSelectedItem();
    tempVar2.setStoragePoolId(dataCenter.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    IFrontendActionAsyncCallback callback1 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        storageListModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageId = vdcReturnValueBase.getActionReturnValue();
    };
    IFrontendActionAsyncCallback callback3 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        StorageModel storageModel = (StorageModel) storageListModel.getWindow();
        // Attach storage to data center as necessary.
        StoragePool dataCenter1 = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter1.getId().equals(StorageModel.UnassignedDataCenterId)) {
            storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter1.getId(), storageModel.getActivateDomain().getEntity());
        }
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
        storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(callback1, callback2, callback3)), failureCallback, this);
}
#method_after
public void saveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections storageConnection = new StorageServerConnections();
    storageConnection.setConnection(path);
    storageConnection.setStorageType(nfsModel.getType());
    if (isConnectionOverriden()) {
        storageConnection.setNfsVersion((NfsVersion) ((EntityModel) nfsModel.getVersion().getSelectedItem()).getEntity());
        storageConnection.setNfsRetrans(nfsModel.getRetransmissions().asConvertible().nullableShort());
        storageConnection.setNfsTimeo(nfsModel.getTimeout().asConvertible().nullableShort());
        storageConnection.setMountOptions(nfsModel.getMountOptions().getEntity());
    }
    connection = storageConnection;
    ArrayList<ActionType> actionTypes = new ArrayList<>();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(ActionType.AddStorageServerConnection);
    actionTypes.add(ActionType.AddNFSStorageDomain);
    actionTypes.add(ActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    StoragePool dataCenter = model.getDataCenter().getSelectedItem();
    tempVar2.setStoragePoolId(dataCenter.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    IFrontendActionAsyncCallback callback1 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        storageListModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageId = vdcReturnValueBase.getActionReturnValue();
    };
    IFrontendActionAsyncCallback callback3 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        StorageModel storageModel = (StorageModel) storageListModel.getWindow();
        // Attach storage to data center as necessary.
        StoragePool dataCenter1 = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter1.getId().equals(StorageModel.UnassignedDataCenterId)) {
            storageListModel.attachStorageToDataCenter(storageListModel.storageId, dataCenter1.getId(), storageModel.getActivateDomain().getEntity());
        }
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
        storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(callback1, callback2, callback3)), failureCallback, this);
}
#end_block

#method_before
public void saveNewSanStorage() {
    StorageModel model = (StorageModel) getWindow();
    SanStorageModelBase sanModel = (SanStorageModelBase) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    HashSet<String> lunIds = new HashSet<>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(new HashSet<>(lunIds));
    params.setForce(force);
    Frontend.getInstance().runAction(VdcActionType.AddSANStorageDomain, params, result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        StorageModel storageModel = (StorageModel) storageListModel.getWindow();
        storageListModel.storageModel = storageModel.getCurrentStorageItem();
        if (!result.getReturnValue().getSucceeded()) {
            storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
            return;
        }
        StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            Guid storageId = returnValue.getActionReturnValue();
            storageListModel.attachStorageToDataCenter(storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
        }
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    }, this);
}
#method_after
public void saveNewSanStorage() {
    StorageModel model = (StorageModel) getWindow();
    SanStorageModelBase sanModel = (SanStorageModelBase) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    HashSet<String> lunIds = new HashSet<>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(lunIds);
    params.setForce(force);
    Frontend.getInstance().runAction(ActionType.AddSANStorageDomain, params, result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        StorageModel storageModel = (StorageModel) storageListModel.getWindow();
        storageListModel.storageModel = storageModel.getCurrentStorageItem();
        if (!result.getReturnValue().getSucceeded()) {
            storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
            return;
        }
        StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            Guid storageId = returnValue.getActionReturnValue();
            storageListModel.attachStorageToDataCenter(storageId, dataCenter.getId(), storageModel.getActivateDomain().getEntity());
        }
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    }, this);
}
#end_block

#method_before
public void saveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setConnection(path);
    tempVar.setStorageType(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.removeConnection = true;
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        storageListModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.removeConnection = false;
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        if (storageListModel.removeConnection) {
            storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.removeConnection = false;
        }
        storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void saveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setConnection(path);
    tempVar.setStorageType(localModel.getType());
    connection = tempVar;
    ArrayList<ActionType> actionTypes = new ArrayList<>();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(ActionType.AddStorageServerConnection);
    actionTypes.add(ActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.removeConnection = true;
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        storageListModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        storageListModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        storageListModel.removeConnection = false;
        storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        if (storageListModel.removeConnection) {
            storageListModel.cleanConnection(storageListModel.connection, storageListModel.hostId);
            storageListModel.removeConnection = false;
        }
        storageListModel.onFinish(storageListModel.context, false, storageListModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void saveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModelBase sanModel = (SanStorageModelBase) model.getCurrentStorageItem();
    StorageDomain storage = getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setStorageType(isNew ? sanModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? sanModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageFormat(isNew ? sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    saveCommonStorageProperties(model);
    if (isNew) {
        saveNewSanStorage();
    } else {
        Frontend.getInstance().runAction(VdcActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModelBase sanStorageModelBase = (SanStorageModelBase) storageModel.getCurrentStorageItem();
                boolean force = sanStorageModelBase.isForce();
                StorageDomain storageDomain1 = storageListModel.getSelectedItem();
                HashSet<String> lunIds = new HashSet<>();
                for (LunModel lun : sanStorageModelBase.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.getInstance().runAction(VdcActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), new HashSet<>(lunIds), force), null, this);
                }
                Set<String> lunToRefreshIds = new HashSet<>();
                for (LunModel lun : sanStorageModelBase.getLunsToRefresh()) {
                    lunToRefreshIds.add(lun.getLunId());
                }
                if (lunToRefreshIds.size() > 0) {
                    Frontend.getInstance().runAction(VdcActionType.RefreshLunsSize, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunToRefreshIds, false), null, this);
                }
                storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#method_after
private void saveSanStorage(TaskContext context) {
    this.context = context;
    StorageModel model = (StorageModel) getWindow();
    SanStorageModelBase sanModel = (SanStorageModelBase) model.getCurrentStorageItem();
    StorageDomain storage = getSelectedItem();
    boolean isNew = model.getStorage() == null;
    storageDomain = isNew ? new StorageDomainStatic() : (StorageDomainStatic) Cloner.clone(storage.getStorageStaticData());
    storageDomain.setStorageType(isNew ? sanModel.getType() : storageDomain.getStorageType());
    storageDomain.setStorageDomainType(isNew ? sanModel.getRole() : storageDomain.getStorageDomainType());
    storageDomain.setStorageFormat(isNew ? sanModel.getContainer().getFormat().getSelectedItem() : storageDomain.getStorageFormat());
    storageDomain.setDescription(model.getDescription().getEntity());
    storageDomain.setComment(model.getComment().getEntity());
    saveCommonStorageProperties(model);
    if (isNew) {
        saveNewSanStorage();
    } else {
        Frontend.getInstance().runAction(ActionType.UpdateStorageDomain, new StorageDomainManagementParameter(storageDomain), new IFrontendActionAsyncCallback() {

            @Override
            public void executed(FrontendActionAsyncResult result) {
                StorageListModel storageListModel = (StorageListModel) result.getState();
                StorageModel storageModel = (StorageModel) getWindow();
                SanStorageModelBase sanStorageModelBase = (SanStorageModelBase) storageModel.getCurrentStorageItem();
                boolean force = sanStorageModelBase.isForce();
                StorageDomain storageDomain1 = storageListModel.getSelectedItem();
                HashSet<String> lunIds = new HashSet<>();
                for (LunModel lun : sanStorageModelBase.getAddedLuns()) {
                    lunIds.add(lun.getLunId());
                }
                if (lunIds.size() > 0) {
                    Frontend.getInstance().runAction(ActionType.ExtendSANStorageDomain, new ExtendSANStorageDomainParameters(storageDomain1.getId(), new HashSet<>(lunIds), force), null, this);
                }
                Set<String> lunToRefreshIds = new HashSet<>();
                for (LunModel lun : sanStorageModelBase.getLunsToRefresh()) {
                    lunToRefreshIds.add(lun.getLunId());
                }
                if (lunToRefreshIds.size() > 0) {
                    Frontend.getInstance().runAction(ActionType.RefreshLunsSize, new ExtendSANStorageDomainParameters(storageDomain1.getId(), lunToRefreshIds, false), null, this);
                }
                storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel);
            }
        }, this);
    }
}
#end_block

#method_before
private void attachStorageToDataCenter(Guid storageId, Guid dataCenterId, Boolean activateDomain) {
    AttachStorageDomainToPoolParameters params = new AttachStorageDomainToPoolParameters(storageId, dataCenterId);
    if (activateDomain != null) {
        params.setActivate(activateDomain);
    }
    Frontend.getInstance().runAction(VdcActionType.AttachStorageDomainToPool, params, null, this);
}
#method_after
private void attachStorageToDataCenter(Guid storageId, Guid dataCenterId, Boolean activateDomain) {
    AttachStorageDomainToPoolParameters params = new AttachStorageDomainToPoolParameters(storageId, dataCenterId);
    if (activateDomain != null) {
        params.setActivate(activateDomain);
    }
    Frontend.getInstance().runAction(ActionType.AttachStorageDomainToPool, params, null, this);
}
#end_block

#method_before
private void onImportSanDomainApprove() {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    hostId = (Guid) data.get(1);
    ImportSanStorageModel importSanStorageModel = (ImportSanStorageModel) storageModel;
    final List<StorageDomain> storageDomains = importSanStorageModel.getStorageDomains().getSelectedItems();
    ArrayList<VdcActionParametersBase> parametersList = new ArrayList<>(items.size());
    List<IFrontendActionAsyncCallback> callbacks = new LinkedList<>();
    for (final StorageDomain storageDomain : storageDomains) {
        StorageDomainStatic staticData = storageDomain.getStorageStaticData();
        saveDefaultedStorageProperties((StorageModel) getWindow(), staticData);
        StorageDomainManagementParameter parameters = new StorageDomainManagementParameter(staticData);
        parameters.setVdsId(hostId);
        parametersList.add(parameters);
        callbacks.add(result -> {
            VdcReturnValueBase returnValue = result.getReturnValue();
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success) {
                StorageModel model = (StorageModel) getWindow();
                StoragePool dataCenter = model.getDataCenter().getSelectedItem();
                if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                    attachStorageToDataCenter(storageDomain.getId(), dataCenter.getId(), model.getActivateDomain().getEntity());
                }
                boolean isLastDomain = storageDomain == storageDomains.get(storageDomains.size() - 1);
                if (isLastDomain) {
                    onFinish(context, true, storageModel);
                }
            } else {
                onFinish(context, false, storageModel);
            }
        });
    }
    Frontend.getInstance().runMultipleActions(VdcActionType.AddExistingBlockStorageDomain, parametersList, callbacks);
}
#method_after
private void onImportSanDomainApprove() {
    ArrayList<Object> data = (ArrayList<Object>) context.getState();
    hostId = (Guid) data.get(1);
    ImportSanStorageModel importSanStorageModel = (ImportSanStorageModel) storageModel;
    final List<StorageDomain> storageDomains = importSanStorageModel.getStorageDomains().getSelectedItems();
    ArrayList<ActionParametersBase> parametersList = new ArrayList<>(items.size());
    List<IFrontendActionAsyncCallback> callbacks = new LinkedList<>();
    for (final StorageDomain storageDomain : storageDomains) {
        StorageDomainStatic staticData = storageDomain.getStorageStaticData();
        saveDefaultedStorageProperties((StorageModel) getWindow(), staticData);
        StorageDomainManagementParameter parameters = new StorageDomainManagementParameter(staticData);
        parameters.setVdsId(hostId);
        parametersList.add(parameters);
        callbacks.add(result -> {
            VdcReturnValueBase returnValue = result.getReturnValue();
            boolean success = returnValue != null && returnValue.getSucceeded();
            if (success) {
                StorageModel model = (StorageModel) getWindow();
                StoragePool dataCenter = model.getDataCenter().getSelectedItem();
                if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                    attachStorageToDataCenter(storageDomain.getId(), dataCenter.getId(), model.getActivateDomain().getEntity());
                }
                boolean isLastDomain = storageDomain == storageDomains.get(storageDomains.size() - 1);
                if (isLastDomain) {
                    onFinish(context, true, storageModel);
                }
            } else {
                onFinish(context, false, storageModel);
            }
        });
    }
    Frontend.getInstance().runMultipleActions(ActionType.AddExistingBlockStorageDomain, parametersList, callbacks);
}
#end_block

#method_before
public void importFileStorageInit() {
    if (fileConnection != null) {
        // Clean nfs connection
        Frontend.getInstance().runAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                storageListModel.fileConnection = null;
            }
            storageListModel.importFileStoragePostInit();
        }, this);
    } else {
        importFileStoragePostInit();
    }
}
#method_after
public void importFileStorageInit() {
    if (fileConnection != null) {
        // Clean nfs connection
        Frontend.getInstance().runAction(ActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
            StorageListModel storageListModel = (StorageListModel) result.getState();
            VdcReturnValueBase returnVal = result.getReturnValue();
            boolean success = returnVal != null && returnVal.getSucceeded();
            if (success) {
                storageListModel.fileConnection = null;
            }
            storageListModel.importFileStoragePostInit();
        }, this);
    } else {
        importFileStoragePostInit();
    }
}
#end_block

#method_before
public void importFileStorageConnect() {
    Frontend.getInstance().runAction(VdcActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase returnVal = result.getReturnValue();
        boolean success = returnVal != null && returnVal.getSucceeded();
        if (success) {
            storageListModel.fileConnection.setId((String) returnVal.getActionReturnValue());
            if (storageModel.getRole() == StorageDomainType.Data) {
                // $NON-NLS-1$
                checkFileDomainAttachedToDc("OnImportFile", storageListModel.fileConnection);
            } else {
                getExistingStorageDomainList();
            }
        } else {
            postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
        }
    }, this);
}
#method_after
public void importFileStorageConnect() {
    Frontend.getInstance().runAction(ActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
        StorageListModel storageListModel = (StorageListModel) result.getState();
        VdcReturnValueBase returnVal = result.getReturnValue();
        boolean success = returnVal != null && returnVal.getSucceeded();
        if (success) {
            storageListModel.fileConnection.setId((String) returnVal.getActionReturnValue());
            if (storageModel.getRole() == StorageDomainType.Data) {
                // $NON-NLS-1$
                checkFileDomainAttachedToDc("OnImportFile", storageListModel.fileConnection);
            } else {
                getExistingStorageDomainList();
            }
        } else {
            postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg());
        }
    }, this);
}
#end_block

#method_before
public void addExistingFileStorageDomain() {
    StorageDomain sdToAdd = Linq.firstOrNull(storageDomainsToAdd);
    StorageDomainStatic sdsToAdd = sdToAdd.getStorageStaticData();
    storageDomain = sdsToAdd;
    saveBaseStorageProperties((StorageModel) getWindow());
    StorageDomainManagementParameter params = new StorageDomainManagementParameter(sdsToAdd);
    params.setVdsId(hostId);
    Frontend.getInstance().runAction(VdcActionType.AddExistingFileStorageDomain, params, result -> {
        Object[] array = (Object[]) result.getState();
        StorageListModel storageListModel = (StorageListModel) array[0];
        StorageDomain sdToAdd1 = (StorageDomain) array[1];
        VdcReturnValueBase returnVal = result.getReturnValue();
        boolean success = returnVal != null && returnVal.getSucceeded();
        if (success) {
            StorageModel model = (StorageModel) storageListModel.getWindow();
            StoragePool dataCenter = model.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.attachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId(), model.getActivateDomain().getEntity());
                onFinish(storageListModel.context, true, storageListModel.storageModel, null);
            } else {
                postImportFileStorage(storageListModel.context, true, storageListModel.storageModel, null);
            }
        } else {
            // $NON-NLS-1$
            postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, "");
            cleanConnection(fileConnection, hostId);
        }
    }, new Object[] { this, sdToAdd });
}
#method_after
public void addExistingFileStorageDomain() {
    StorageDomain sdToAdd = Linq.firstOrNull(storageDomainsToAdd);
    StorageDomainStatic sdsToAdd = sdToAdd.getStorageStaticData();
    storageDomain = sdsToAdd;
    saveBaseStorageProperties((StorageModel) getWindow());
    StorageDomainManagementParameter params = new StorageDomainManagementParameter(sdsToAdd);
    params.setVdsId(hostId);
    Frontend.getInstance().runAction(ActionType.AddExistingFileStorageDomain, params, result -> {
        Object[] array = (Object[]) result.getState();
        StorageListModel storageListModel = (StorageListModel) array[0];
        StorageDomain sdToAdd1 = (StorageDomain) array[1];
        VdcReturnValueBase returnVal = result.getReturnValue();
        boolean success = returnVal != null && returnVal.getSucceeded();
        if (success) {
            StorageModel model = (StorageModel) storageListModel.getWindow();
            StoragePool dataCenter = model.getDataCenter().getSelectedItem();
            if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
                storageListModel.attachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId(), model.getActivateDomain().getEntity());
                onFinish(storageListModel.context, true, storageListModel.storageModel, null);
            } else {
                postImportFileStorage(storageListModel.context, true, storageListModel.storageModel, null);
            }
        } else {
            // $NON-NLS-1$
            postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, "");
            cleanConnection(fileConnection, hostId);
        }
    }, new Object[] { this, sdToAdd });
}
#end_block

#method_before
public void postImportFileStorage(TaskContext context, boolean isSucceeded, IStorageModel model, String message) {
    Frontend.getInstance().runAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
        VdcReturnValueBase returnValue = result.getReturnValue();
        boolean success = returnValue != null && returnValue.getSucceeded();
        if (success) {
            fileConnection = null;
        }
        Object[] array = (Object[]) result.getState();
        onFinish((TaskContext) array[0], (Boolean) array[1], (IStorageModel) array[2], (String) array[3]);
    }, new Object[] { context, isSucceeded, model, message });
}
#method_after
public void postImportFileStorage(TaskContext context, boolean isSucceeded, IStorageModel model, String message) {
    Frontend.getInstance().runAction(ActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(fileConnection, hostId, false), result -> {
        VdcReturnValueBase returnValue = result.getReturnValue();
        boolean success = returnValue != null && returnValue.getSucceeded();
        if (success) {
            fileConnection = null;
        }
        Object[] array = (Object[]) result.getState();
        onFinish((TaskContext) array[0], (Boolean) array[1], (IStorageModel) array[2], (String) array[3]);
    }, new Object[] { context, isSucceeded, model, message });
}
#end_block

#method_before
private Response addDomain(VdcActionType action, StorageDomain model, StorageDomainStatic entity, Guid hostId, StorageServerConnections connection) {
    Response response = null;
    boolean isConnNew = false;
    if (connection.getStorageType().isFileDomain() && StringUtils.isEmpty(connection.getId())) {
        isConnNew = true;
        connection.setId(addStorageServerConnection(connection, hostId));
    }
    entity.setStorage(connection.getId());
    if (action == VdcActionType.AddNFSStorageDomain || action == VdcActionType.AddPosixFsStorageDomain || action == VdcActionType.AddGlusterFsStorageDomain) {
        org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), connection);
        if (existing != null) {
            StorageDomainMapper.map(model, existing.getStorageStaticData());
            entity = existing.getStorageStaticData();
            action = VdcActionType.AddExistingFileStorageDomain;
        }
    }
    try {
        if (action != VdcActionType.AddExistingFileStorageDomain) {
            validateParameters(model, 2, "name");
        }
        response = performCreate(action, getAddParams(entity, hostId), ID_RESOLVER);
    } catch (WebApplicationException e) {
        // cleanup of created connection
        if (isConnNew) {
            removeStorageServerConnection(connection, hostId);
        }
        throw e;
    }
    return response;
}
#method_after
private Response addDomain(ActionType action, StorageDomain model, StorageDomainStatic entity, Guid hostId, StorageServerConnections connection) {
    Response response = null;
    boolean isConnNew = false;
    if (connection.getStorageType().isFileDomain() && StringUtils.isEmpty(connection.getId())) {
        isConnNew = true;
        connection.setId(addStorageServerConnection(connection, hostId));
    }
    entity.setStorage(connection.getId());
    if (action == ActionType.AddNFSStorageDomain || action == ActionType.AddPosixFsStorageDomain || action == ActionType.AddGlusterFsStorageDomain) {
        org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), connection);
        if (existing != null) {
            StorageDomainMapper.map(model, existing.getStorageStaticData());
            entity = existing.getStorageStaticData();
            action = ActionType.AddExistingFileStorageDomain;
        }
    }
    try {
        if (action != ActionType.AddExistingFileStorageDomain) {
            validateParameters(model, 2, "name");
        }
        response = performCreate(action, getAddParams(entity, hostId), ID_RESOLVER);
    } catch (WebApplicationException e) {
        // cleanup of created connection
        if (isConnNew) {
            removeStorageServerConnection(connection, hostId);
        }
        throw e;
    }
    return response;
}
#end_block

#method_before
private Response addSAN(StorageDomain model, StorageType storageType, StorageDomainStatic entity, Guid hostId) {
    boolean overrideLuns = model.getStorage().isSetOverrideLuns() ? model.getStorage().isOverrideLuns() : false;
    return performCreate(VdcActionType.AddSANStorageDomain, getSanAddParams(entity, hostId, getLunIds(model.getStorage(), storageType, hostId), overrideLuns), ID_RESOLVER);
}
#method_after
private Response addSAN(StorageDomain model, StorageType storageType, StorageDomainStatic entity, Guid hostId) {
    boolean overrideLuns = model.getStorage().isSetOverrideLuns() ? model.getStorage().isOverrideLuns() : false;
    return performCreate(ActionType.AddSANStorageDomain, getSanAddParams(entity, hostId, getLunIds(model.getStorage(), storageType, hostId), overrideLuns), ID_RESOLVER);
}
#end_block

#method_before
private Response addExistingSAN(StorageDomain model, StorageType storageType, Guid hostId) {
    getEntity(VDS.class, VdcQueryType.GetVdsByVdsId, new IdQueryParameters(hostId), "Host: id=" + hostId);
    List<LUNs> existingLuns = getDeviceList(hostId, storageType);
    List<StorageServerConnections> existingStorageServerConnections = getLunsWithInitializedStorageType(existingLuns, storageType);
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> existingStorageDomains = getExistingBlockStorageDomain(hostId, storageType, existingStorageServerConnections);
    StorageDomainStatic storageDomainToImport = getMatchingStorageDomain(asGuid(model.getId()), existingStorageDomains);
    if (storageDomainToImport == null) {
        throw new WebFaultException(new WebApplicationException(), "Storage Domain id " + model.getId() + " Does not exists", Status.NOT_FOUND);
    }
    StorageDomainMapper.map(model, storageDomainToImport);
    StorageDomainManagementParameter parameters = new StorageDomainManagementParameter(storageDomainToImport);
    parameters.setVdsId(hostId);
    return performCreate(VdcActionType.AddExistingBlockStorageDomain, parameters, ID_RESOLVER);
}
#method_after
private Response addExistingSAN(StorageDomain model, StorageType storageType, Guid hostId) {
    getEntity(VDS.class, VdcQueryType.GetVdsByVdsId, new IdQueryParameters(hostId), "Host: id=" + hostId);
    List<LUNs> existingLuns = getDeviceList(hostId, storageType);
    List<StorageServerConnections> existingStorageServerConnections = getLunsWithInitializedStorageType(existingLuns, storageType);
    List<org.ovirt.engine.core.common.businessentities.StorageDomain> existingStorageDomains = getExistingBlockStorageDomain(hostId, storageType, existingStorageServerConnections);
    StorageDomainStatic storageDomainToImport = getMatchingStorageDomain(asGuid(model.getId()), existingStorageDomains);
    if (storageDomainToImport == null) {
        throw new WebFaultException(new WebApplicationException(), "Storage Domain id " + model.getId() + " Does not exists", Status.NOT_FOUND);
    }
    StorageDomainMapper.map(model, storageDomainToImport);
    StorageDomainManagementParameter parameters = new StorageDomainManagementParameter(storageDomainToImport);
    parameters.setVdsId(hostId);
    return performCreate(ActionType.AddExistingBlockStorageDomain, parameters, ID_RESOLVER);
}
#end_block

#method_before
private void connectStorageToHost(Guid hostId, StorageType storageType, LogicalUnit unit) {
    StorageServerConnections cnx = StorageDomainHelper.getConnection(storageType, unit.getAddress(), unit.getTarget(), unit.getUsername(), unit.getPassword(), unit.getPort());
    performAction(VdcActionType.ConnectStorageToVds, new StorageServerConnectionParametersBase(cnx, hostId, false));
}
#method_after
private void connectStorageToHost(Guid hostId, StorageType storageType, LogicalUnit unit) {
    StorageServerConnections cnx = StorageDomainHelper.getConnection(storageType, unit.getAddress(), unit.getTarget(), unit.getUsername(), unit.getPassword(), unit.getPort());
    performAction(ActionType.ConnectStorageToVds, new StorageServerConnectionParametersBase(cnx, hostId, false));
}
#end_block

#method_before
@Override
public Response add(StorageDomain storageDomain) {
    validateParameters(storageDomain, "host.id|name", "type", "storage");
    validateRange("nfs_timeio", storageDomain.getStorage().getNfsTimeo(), 0, 65535);
    validateRange("nfs_retrans", storageDomain.getStorage().getNfsRetrans(), 0, 65535);
    HostStorage storageConnectionFromUser = storageDomain.getStorage();
    Guid hostId = getHostId(storageDomain);
    StorageServerConnections cnx = null;
    if (!storageConnectionFromUser.isSetId()) {
        validateParameters(storageDomain, "storage.type");
        cnx = mapToCnx(storageDomain);
        if (cnx.getStorageType().isFileDomain()) {
            validateParameters(storageConnectionFromUser, "path");
        }
    } else {
        cnx = getStorageServerConnection(storageConnectionFromUser.getId());
        storageDomain.getStorage().setType(mapType(cnx.getStorageType()));
    }
    StorageDomainStatic entity = mapToStatic(storageDomain);
    Response resp = null;
    switch(entity.getStorageType()) {
        case ISCSI:
        case FCP:
            if (storageDomain.isSetImport() && storageDomain.isImport()) {
                validateParameters(storageDomain, "id");
                resp = addExistingSAN(storageDomain, entity.getStorageType(), hostId);
            } else {
                resp = addSAN(storageDomain, entity.getStorageType(), entity, hostId);
            }
            break;
        case NFS:
            if (!storageConnectionFromUser.isSetId()) {
                validateParameters(storageDomain.getStorage(), "address");
            }
            resp = addDomain(VdcActionType.AddNFSStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        case LOCALFS:
            resp = addDomain(VdcActionType.AddLocalStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        case POSIXFS:
            if (!storageConnectionFromUser.isSetId()) {
                validateParameters(storageDomain.getStorage(), "vfsType");
            }
            resp = addDomain(VdcActionType.AddPosixFsStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        case GLUSTERFS:
            if (!storageConnectionFromUser.isSetId()) {
                validateParameters(storageDomain.getStorage(), "vfsType");
            }
            resp = addDomain(VdcActionType.AddGlusterFsStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        default:
            break;
    }
    if (resp != null) {
        addLinks((StorageDomain) resp.getEntity(), getLinksToExclude(storageDomain));
    }
    return resp;
}
#method_after
@Override
public Response add(StorageDomain storageDomain) {
    validateParameters(storageDomain, "host.id|name", "type", "storage");
    validateRange("nfs_timeio", storageDomain.getStorage().getNfsTimeo(), 0, 65535);
    validateRange("nfs_retrans", storageDomain.getStorage().getNfsRetrans(), 0, 65535);
    HostStorage storageConnectionFromUser = storageDomain.getStorage();
    Guid hostId = getHostId(storageDomain);
    StorageServerConnections cnx = null;
    if (!storageConnectionFromUser.isSetId()) {
        validateParameters(storageDomain, "storage.type");
        cnx = mapToCnx(storageDomain);
        if (cnx.getStorageType().isFileDomain()) {
            validateParameters(storageConnectionFromUser, "path");
        }
    } else {
        cnx = getStorageServerConnection(storageConnectionFromUser.getId());
        storageDomain.getStorage().setType(mapType(cnx.getStorageType()));
    }
    StorageDomainStatic entity = mapToStatic(storageDomain);
    Response resp = null;
    switch(entity.getStorageType()) {
        case ISCSI:
        case FCP:
            if (storageDomain.isSetImport() && storageDomain.isImport()) {
                validateParameters(storageDomain, "id");
                resp = addExistingSAN(storageDomain, entity.getStorageType(), hostId);
            } else {
                resp = addSAN(storageDomain, entity.getStorageType(), entity, hostId);
            }
            break;
        case NFS:
            if (!storageConnectionFromUser.isSetId()) {
                validateParameters(storageDomain.getStorage(), "address");
            }
            resp = addDomain(ActionType.AddNFSStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        case LOCALFS:
            resp = addDomain(ActionType.AddLocalStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        case POSIXFS:
            if (!storageConnectionFromUser.isSetId()) {
                validateParameters(storageDomain.getStorage(), "vfsType");
            }
            resp = addDomain(ActionType.AddPosixFsStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        case GLUSTERFS:
            if (!storageConnectionFromUser.isSetId()) {
                validateParameters(storageDomain.getStorage(), "vfsType");
            }
            resp = addDomain(ActionType.AddGlusterFsStorageDomain, storageDomain, entity, hostId, cnx);
            break;
        default:
            break;
    }
    if (resp != null) {
        addLinks((StorageDomain) resp.getEntity(), getLinksToExclude(storageDomain));
    }
    return resp;
}
#end_block

#method_before
private String addStorageServerConnection(StorageServerConnections cnx, Guid hostId) {
    return performAction(VdcActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(cnx, hostId, false), String.class);
}
#method_after
private String addStorageServerConnection(StorageServerConnections cnx, Guid hostId) {
    return performAction(ActionType.AddStorageServerConnection, new StorageServerConnectionParametersBase(cnx, hostId, false), String.class);
}
#end_block

#method_before
private String removeStorageServerConnection(StorageServerConnections cnx, Guid hostId) {
    return performAction(VdcActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(cnx, hostId, false), String.class);
}
#method_after
private String removeStorageServerConnection(StorageServerConnections cnx, Guid hostId) {
    return performAction(ActionType.RemoveStorageServerConnection, new StorageServerConnectionParametersBase(cnx, hostId, false), String.class);
}
#end_block

#method_before
protected void createDefaultDiskProfile() {
    executeInNewTransaction(() -> {
        final DiskProfile diskProfile = diskProfileHelper.createDiskProfile(getStorageDomain().getId(), getStorageDomainName());
        DiskProfileParameters diskProfileParameters = new DiskProfileParameters(diskProfile, true);
        runInternalActionWithTasksContext(VdcActionType.AddDiskProfile, diskProfileParameters);
        getCompensationContext().snapshotNewEntity(diskProfile);
        getCompensationContext().stateChanged();
        return null;
    });
}
#method_after
protected void createDefaultDiskProfile() {
    executeInNewTransaction(() -> {
        final DiskProfile diskProfile = diskProfileHelper.createDiskProfile(getStorageDomain().getId(), getStorageDomainName());
        DiskProfileParameters diskProfileParameters = new DiskProfileParameters(diskProfile, true);
        runInternalActionWithTasksContext(ActionType.AddDiskProfile, diskProfileParameters);
        getCompensationContext().snapshotNewEntity(diskProfile);
        getCompensationContext().stateChanged();
        return null;
    });
}
#end_block

#method_before
@Override
public StorageDomain update(StorageDomain incoming) {
    QueryIdResolver<Guid> storageDomainResolver = new QueryIdResolver<>(VdcQueryType.GetStorageDomainById, IdQueryParameters.class);
    org.ovirt.engine.core.common.businessentities.StorageDomain entity = getEntity(storageDomainResolver, true);
    StorageDomain model = map(entity, new StorageDomain());
    StorageType storageType = entity.getStorageType();
    if (storageType != null) {
        switch(storageType) {
            case ISCSI:
            case FCP:
                extendStorageDomain(incoming, model, storageType);
                break;
            default:
                break;
        }
    }
    return addLinks(performUpdate(incoming, entity, model, storageDomainResolver, VdcActionType.UpdateStorageDomain, new UpdateParametersProvider()), new String[] { "templates", "vms" });
}
#method_after
@Override
public StorageDomain update(StorageDomain incoming) {
    QueryIdResolver<Guid> storageDomainResolver = new QueryIdResolver<>(VdcQueryType.GetStorageDomainById, IdQueryParameters.class);
    org.ovirt.engine.core.common.businessentities.StorageDomain entity = getEntity(storageDomainResolver, true);
    StorageDomain model = map(entity, new StorageDomain());
    StorageType storageType = entity.getStorageType();
    if (storageType != null) {
        switch(storageType) {
            case ISCSI:
            case FCP:
                extendStorageDomain(incoming, model);
                break;
            default:
                break;
        }
    }
    return addLinks(performUpdate(incoming, entity, model, storageDomainResolver, ActionType.UpdateStorageDomain, new UpdateParametersProvider()), new String[] { "templates", "vms" });
}
#end_block

#method_before
@Override
public Response updateOvfStore(Action action) {
    StorageDomainParametersBase params = new StorageDomainParametersBase(guid);
    return performAction(VdcActionType.UpdateOvfStoreForStorageDomain, params);
}
#method_after
@Override
public Response updateOvfStore(Action action) {
    StorageDomainParametersBase params = new StorageDomainParametersBase(guid);
    return performAction(ActionType.UpdateOvfStoreForStorageDomain, params);
}
#end_block

#method_before
@Override
public Response reduceLuns(Action action) {
    List<LogicalUnit> reducedLuns = action.getLogicalUnits().getLogicalUnits();
    List<String> lunIds = reducedLuns.stream().map(LogicalUnit::getId).collect(toList());
    ReduceSANStorageDomainDevicesCommandParameters parameters = new ReduceSANStorageDomainDevicesCommandParameters(guid, lunIds);
    return performAction(VdcActionType.ReduceSANStorageDomainDevices, parameters);
}
#method_after
@Override
public Response reduceLuns(Action action) {
    List<LogicalUnit> reducedLuns = action.getLogicalUnits().getLogicalUnits();
    List<String> lunIds = reducedLuns.stream().map(LogicalUnit::getId).collect(toList());
    ReduceSANStorageDomainDevicesCommandParameters parameters = new ReduceSANStorageDomainDevicesCommandParameters(guid, lunIds);
    return performAction(ActionType.ReduceSANStorageDomainDevices, parameters);
}
#end_block

#method_before
@Override
public Response remove() {
    String host = ParametersHelper.getParameter(httpHeaders, uriInfo, HOST);
    if (host == null) {
        Fault fault = new Fault();
        fault.setReason("host parameter is missing");
        throw new WebApplicationException(Response.status(Status.BAD_REQUEST).entity(fault).build());
    }
    get();
    Guid hostId = getHostId(host);
    boolean destroy = ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, DESTROY, true, false);
    boolean format = ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, FORMAT, true, false);
    if (destroy) {
        StorageDomainParametersBase parameters = new StorageDomainParametersBase(guid);
        parameters.setVdsId(hostId);
        return performAction(VdcActionType.ForceRemoveStorageDomain, parameters);
    } else {
        RemoveStorageDomainParameters parameters = new RemoveStorageDomainParameters(guid);
        parameters.setVdsId(hostId);
        parameters.setDoFormat(format);
        return performAction(VdcActionType.RemoveStorageDomain, parameters);
    }
}
#method_after
@Override
public Response remove() {
    String host = ParametersHelper.getParameter(httpHeaders, uriInfo, HOST);
    if (host == null) {
        Fault fault = new Fault();
        fault.setReason("host parameter is missing");
        throw new WebApplicationException(Response.status(Status.BAD_REQUEST).entity(fault).build());
    }
    get();
    Guid hostId = getHostId(host);
    boolean destroy = ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, DESTROY, true, false);
    boolean format = ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, FORMAT, true, false);
    if (destroy) {
        StorageDomainParametersBase parameters = new StorageDomainParametersBase(guid);
        parameters.setVdsId(hostId);
        return performAction(ActionType.ForceRemoveStorageDomain, parameters);
    } else {
        RemoveStorageDomainParameters parameters = new RemoveStorageDomainParameters(guid);
        parameters.setVdsId(hostId);
        parameters.setDoFormat(format);
        return performAction(ActionType.RemoveStorageDomain, parameters);
    }
}
#end_block

#method_before
@Override
public Response refreshLuns(Action action) {
    List<LogicalUnit> incomingLuns;
    if (action.isSetLogicalUnits()) {
        incomingLuns = action.getLogicalUnits().getLogicalUnits();
    } else {
        incomingLuns = Collections.emptyList();
    }
    ExtendSANStorageDomainParameters params = createParameters(guid, incomingLuns, false);
    return performAction(VdcActionType.RefreshLunsSize, params);
}
#method_after
@Override
public Response refreshLuns(Action action) {
    List<LogicalUnit> incomingLuns;
    if (action.isSetLogicalUnits()) {
        incomingLuns = action.getLogicalUnits().getLogicalUnits();
    } else {
        incomingLuns = Collections.emptyList();
    }
    ExtendSANStorageDomainParameters params = createParameters(guid, incomingLuns, false);
    return performAction(ActionType.RefreshLunsSize, params);
}
#end_block

#method_before
private void extendStorageDomain(StorageDomain incoming, StorageDomain storageDomain, StorageType storageType) {
    if (incoming.getStorage() == null) {
        // LUNs info was not supplied in the request so no need to check whether to extend
        return;
    }
    List<LogicalUnit> existingLuns;
    if (storageDomain.isSetStorage() && storageDomain.getStorage().isSetVolumeGroup() && storageDomain.getStorage().getVolumeGroup().isSetLogicalUnits()) {
        existingLuns = storageDomain.getStorage().getVolumeGroup().getLogicalUnits().getLogicalUnits();
    } else {
        existingLuns = Collections.emptyList();
    }
    List<LogicalUnit> incomingLuns = getIncomingLuns(incoming.getStorage());
    List<LogicalUnit> newLuns = findNewLuns(existingLuns, incomingLuns);
    boolean overrideLuns = incoming.getStorage().isSetOverrideLuns() ? incoming.getStorage().isOverrideLuns() : false;
    if (!newLuns.isEmpty()) {
        // If there are new LUNs, this means the user wants to extend the storage domain.
        addLunsToStorageDomain(newLuns, overrideLuns);
        // Remove the new LUNs from the incoming LUns before update, since they have already been dealt with.
        incomingLuns.removeAll(newLuns);
    }
}
#method_after
private void extendStorageDomain(StorageDomain incoming, StorageDomain storageDomain) {
    if (incoming.getStorage() == null) {
        // LUNs info was not supplied in the request so no need to check whether to extend
        return;
    }
    List<LogicalUnit> existingLuns;
    if (storageDomain.isSetStorage() && storageDomain.getStorage().isSetVolumeGroup() && storageDomain.getStorage().getVolumeGroup().isSetLogicalUnits()) {
        existingLuns = storageDomain.getStorage().getVolumeGroup().getLogicalUnits().getLogicalUnits();
    } else {
        existingLuns = Collections.emptyList();
    }
    List<LogicalUnit> incomingLuns = getIncomingLuns(incoming.getStorage());
    List<LogicalUnit> newLuns = findNewLuns(existingLuns, incomingLuns);
    boolean overrideLuns = incoming.getStorage().isSetOverrideLuns() ? incoming.getStorage().isOverrideLuns() : false;
    if (!newLuns.isEmpty()) {
        // If there are new LUNs, this means the user wants to extend the storage domain.
        addLunsToStorageDomain(newLuns, overrideLuns);
        // Remove the new LUNs from the incoming LUns before update, since they have already been dealt with.
        incomingLuns.removeAll(newLuns);
    }
}
#end_block

#method_before
private void addLunsToStorageDomain(List<LogicalUnit> newLuns, boolean overrideLuns) {
    ExtendSANStorageDomainParameters params = createParameters(guid, newLuns, overrideLuns);
    performAction(VdcActionType.ExtendSANStorageDomain, params);
}
#method_after
private void addLunsToStorageDomain(List<LogicalUnit> newLuns, boolean overrideLuns) {
    ExtendSANStorageDomainParameters params = createParameters(guid, newLuns, overrideLuns);
    performAction(ActionType.ExtendSANStorageDomain, params);
}
#end_block

#method_before
private ExtendSANStorageDomainParameters createParameters(Guid storageDomainId, List<LogicalUnit> newLuns, boolean force) {
    ExtendSANStorageDomainParameters params = new ExtendSANStorageDomainParameters();
    params.setStorageDomainId(storageDomainId);
    Set<String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(toCollection(HashSet::new));
    params.setLunIds(lunIds);
    params.setForce(force);
    return params;
}
#method_after
private ExtendSANStorageDomainParameters createParameters(Guid storageDomainId, List<LogicalUnit> newLuns, boolean force) {
    ExtendSANStorageDomainParameters params = new ExtendSANStorageDomainParameters();
    params.setStorageDomainId(storageDomainId);
    Set<String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(Collectors.toSet());
    params.setLunIds(lunIds);
    params.setForce(force);
    return params;
}
#end_block

#method_before
@Override
public VdcActionParametersBase getParameters(StorageDomain incoming, org.ovirt.engine.core.common.businessentities.StorageDomain entity) {
    // save SD type before mapping
    org.ovirt.engine.core.common.businessentities.StorageDomainType currentType = entity.getStorageStaticData() == null ? null : entity.getStorageStaticData().getStorageDomainType();
    StorageDomainStatic updated = getMapper(modelType, StorageDomainStatic.class).map(incoming, entity.getStorageStaticData());
    // data back to master.
    if (currentType == org.ovirt.engine.core.common.businessentities.StorageDomainType.Master && updated.getStorageDomainType() == org.ovirt.engine.core.common.businessentities.StorageDomainType.Data) {
        updated.setStorageDomainType(org.ovirt.engine.core.common.businessentities.StorageDomainType.Master);
    }
    return new StorageDomainManagementParameter(updated);
}
#method_after
@Override
public ActionParametersBase getParameters(StorageDomain incoming, org.ovirt.engine.core.common.businessentities.StorageDomain entity) {
    // save SD type before mapping
    org.ovirt.engine.core.common.businessentities.StorageDomainType currentType = entity.getStorageStaticData() == null ? null : entity.getStorageStaticData().getStorageDomainType();
    StorageDomainStatic updated = getMapper(modelType, StorageDomainStatic.class).map(incoming, entity.getStorageStaticData());
    // data back to master.
    if (currentType == org.ovirt.engine.core.common.businessentities.StorageDomainType.Master && updated.getStorageDomainType() == org.ovirt.engine.core.common.businessentities.StorageDomainType.Data) {
        updated.setStorageDomainType(org.ovirt.engine.core.common.businessentities.StorageDomainType.Master);
    }
    return new StorageDomainManagementParameter(updated);
}
#end_block

#method_before
@Override
protected boolean validate() {
    if (!checkStoragePool()) {
        return false;
    }
    return super.validate();
}
#method_after
@Override
protected boolean validate() {
    return validateStoragePool();
}
#end_block

#method_before
protected List<LUNs> getDeviceList(Set<String> lunsIds) {
    if (getParameters().getDeviceList() == null) {
        return runGetDeviceList(lunsIds);
    }
    if (lunsIds == null) {
        return getParameters().getDeviceList();
    }
    Set<String> lunsIdsSet = new HashSet<>(lunsIds);
    return getParameters().getDeviceList().stream().filter(lun -> lunsIdsSet.contains(lun.getId())).collect(Collectors.toList());
}
#method_after
protected List<LUNs> getDeviceList(Set<String> lunsIds) {
    if (getParameters().getDeviceList() == null) {
        return runGetDeviceList(lunsIds);
    }
    if (lunsIds == null) {
        return getParameters().getDeviceList();
    }
    return getParameters().getDeviceList().stream().filter(lun -> lunsIds.contains(lun.getId())).collect(Collectors.toList());
}
#end_block

#method_before
public void saveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setConnection(path);
    tempVar.setStorageType(localModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.removeConnection = true;
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.removeConnection = false;
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        if (dataCenterGuideModel.removeConnection) {
            dataCenterGuideModel.cleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
            dataCenterGuideModel.removeConnection = false;
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
public void saveNewLocalStorage() {
    StorageModel model = (StorageModel) getWindow();
    LocalStorageModel localModel = (LocalStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setConnection(path);
    tempVar.setStorageType(localModel.getType());
    connection = tempVar;
    ArrayList<ActionType> actionTypes = new ArrayList<>();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(ActionType.AddStorageServerConnection);
    actionTypes.add(ActionType.AddLocalStorageDomain);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    IFrontendActionAsyncCallback callback1 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.removeConnection = true;
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.removeConnection = false;
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        if (dataCenterGuideModel.removeConnection) {
            dataCenterGuideModel.cleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
            dataCenterGuideModel.removeConnection = false;
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void cleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.getInstance().runAction(VdcActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId, false), null, this);
}
#method_after
private void cleanConnection(StorageServerConnections connection, Guid hostId) {
    Frontend.getInstance().runAction(ActionType.DisconnectStorageServerConnection, new StorageServerConnectionParametersBase(connection, hostId, false), null, this);
}
#end_block

#method_before
public void saveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setConnection(path);
    tempVar.setStorageType(nfsModel.getType());
    connection = tempVar;
    ArrayList<VdcActionType> actionTypes = new ArrayList<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(VdcActionType.AddNFSStorageDomain);
    actionTypes.add(VdcActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    IFrontendActionAsyncCallback callback1 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageId = vdcReturnValueBase.getActionReturnValue();
    };
    IFrontendActionAsyncCallback callback3 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
        // Attach storage to data center as neccessary.
        StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            dataCenterGuideModel.attachStorageToDataCenter(dataCenterGuideModel.storageId, dataCenter.getId());
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.cleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#method_after
public void saveNewNfsStorage() {
    StorageModel model = (StorageModel) getWindow();
    NfsStorageModel nfsModel = (NfsStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections tempVar = new StorageServerConnections();
    tempVar.setConnection(path);
    tempVar.setStorageType(nfsModel.getType());
    connection = tempVar;
    ArrayList<ActionType> actionTypes = new ArrayList<>();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(ActionType.AddStorageServerConnection);
    actionTypes.add(ActionType.AddNFSStorageDomain);
    actionTypes.add(ActionType.DisconnectStorageServerConnection);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    StorageDomainManagementParameter tempVar2 = new StorageDomainManagementParameter(storageDomain);
    tempVar2.setVdsId(host.getId());
    parameters.add(tempVar2);
    parameters.add(new StorageServerConnectionParametersBase(connection, host.getId(), false));
    IFrontendActionAsyncCallback callback1 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageId = vdcReturnValueBase.getActionReturnValue();
    };
    IFrontendActionAsyncCallback callback3 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
        // Attach storage to data center as neccessary.
        StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            dataCenterGuideModel.attachStorageToDataCenter(dataCenterGuideModel.storageId, dataCenter.getId());
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.cleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2, callback3 })), failureCallback, this);
}
#end_block

#method_before
private void onSaveSanStorage() {
    ConfirmationModel confirmationModel = (ConfirmationModel) getConfirmWindow();
    if (confirmationModel != null && !confirmationModel.validate()) {
        return;
    }
    cancelConfirm();
    getWindow().startProgress();
    StorageModel model = (StorageModel) getWindow();
    SanStorageModelBase sanModel = (SanStorageModelBase) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    HashSet<String> lunIds = new HashSet<>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(new HashSet<>(lunIds));
    params.setForce(force);
    Frontend.getInstance().runAction(VdcActionType.AddSANStorageDomain, params, result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
        StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            Guid storageId = returnValue.getActionReturnValue();
            dataCenterGuideModel.attachStorageToDataCenter(storageId, dataCenter.getId());
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    }, this);
}
#method_after
private void onSaveSanStorage() {
    ConfirmationModel confirmationModel = (ConfirmationModel) getConfirmWindow();
    if (confirmationModel != null && !confirmationModel.validate()) {
        return;
    }
    cancelConfirm();
    getWindow().startProgress();
    StorageModel model = (StorageModel) getWindow();
    SanStorageModelBase sanModel = (SanStorageModelBase) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    boolean force = sanModel.isForce();
    HashSet<String> lunIds = new HashSet<>();
    for (LunModel lun : sanModel.getAddedLuns()) {
        lunIds.add(lun.getLunId());
    }
    AddSANStorageDomainParameters params = new AddSANStorageDomainParameters(storageDomain);
    params.setVdsId(host.getId());
    params.setLunIds(new HashSet<>(lunIds));
    params.setForce(force);
    Frontend.getInstance().runAction(ActionType.AddSANStorageDomain, params, result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
        StoragePool dataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!dataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            VdcReturnValueBase returnValue = result.getReturnValue();
            Guid storageId = returnValue.getActionReturnValue();
            dataCenterGuideModel.attachStorageToDataCenter(storageId, dataCenter.getId());
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    }, this);
}
#end_block

#method_before
private void attachStorageToDataCenter(Guid storageId, Guid dataCenterId) {
    Frontend.getInstance().runAction(VdcActionType.AttachStorageDomainToPool, new AttachStorageDomainToPoolParameters(storageId, dataCenterId), null, this);
}
#method_after
private void attachStorageToDataCenter(Guid storageId, Guid dataCenterId) {
    Frontend.getInstance().runAction(ActionType.AttachStorageDomainToPool, new AttachStorageDomainToPoolParameters(storageId, dataCenterId), null, this);
}
#end_block

#method_before
public void onAddCluster() {
    ClusterModel model = (ClusterModel) getWindow();
    Cluster cluster = new Cluster();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate(model.getEnableOvirtService().getEntity())) {
        // cluster is virt enabled
        return;
    }
    // Save changes.
    Version version = model.getVersion().getSelectedItem();
    cluster.setName(model.getName().getEntity());
    cluster.setDescription(model.getDescription().getEntity());
    cluster.setComment(model.getComment().getEntity());
    cluster.setStoragePoolId(model.getDataCenter().getSelectedItem().getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setCpuName(model.getCPU().getSelectedItem().getCpuName());
    }
    cluster.setMaxVdsMemoryOverCommit(model.getMemoryOverCommit());
    cluster.setTransparentHugepages(true);
    cluster.setCompatibilityVersion(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService(model.getEnableOvirtService().getEntity());
    cluster.setGlusterService(model.getEnableGlusterService().getEntity());
    cluster.setOptionalReasonRequired(model.getEnableOptionalReason().getEntity());
    cluster.setMaintenanceReasonRequired(model.getEnableHostMaintenanceReason().getEntity());
    if (model.getClusterPolicy().getSelectedItem() != null) {
        ClusterPolicy selectedPolicy = model.getClusterPolicy().getSelectedItem();
        cluster.setClusterPolicyId(selectedPolicy.getId());
        cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().serialize()));
    }
    model.startProgress();
    Frontend.getInstance().runAction(VdcActionType.AddCluster, new ManagementNetworkOnClusterOperationParameters(cluster), result -> {
        DataCenterGuideModel localModel = (DataCenterGuideModel) result.getState();
        localModel.postOnAddCluster(result.getReturnValue());
    }, this);
}
#method_after
public void onAddCluster() {
    ClusterModel model = (ClusterModel) getWindow();
    Cluster cluster = new Cluster();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate(model.getEnableOvirtService().getEntity())) {
        // cluster is virt enabled
        return;
    }
    // Save changes.
    Version version = model.getVersion().getSelectedItem();
    cluster.setName(model.getName().getEntity());
    cluster.setDescription(model.getDescription().getEntity());
    cluster.setComment(model.getComment().getEntity());
    cluster.setStoragePoolId(model.getDataCenter().getSelectedItem().getId());
    if (model.getCPU().getSelectedItem() != null) {
        cluster.setCpuName(model.getCPU().getSelectedItem().getCpuName());
    }
    cluster.setMaxVdsMemoryOverCommit(model.getMemoryOverCommit());
    cluster.setTransparentHugepages(true);
    cluster.setCompatibilityVersion(version);
    cluster.setMigrateOnError(model.getMigrateOnErrorOption());
    cluster.setVirtService(model.getEnableOvirtService().getEntity());
    cluster.setGlusterService(model.getEnableGlusterService().getEntity());
    cluster.setOptionalReasonRequired(model.getEnableOptionalReason().getEntity());
    cluster.setMaintenanceReasonRequired(model.getEnableHostMaintenanceReason().getEntity());
    if (model.getClusterPolicy().getSelectedItem() != null) {
        ClusterPolicy selectedPolicy = model.getClusterPolicy().getSelectedItem();
        cluster.setClusterPolicyId(selectedPolicy.getId());
        cluster.setClusterPolicyProperties(KeyValueModel.convertProperties(model.getCustomPropertySheet().serialize()));
    }
    model.startProgress();
    Frontend.getInstance().runAction(ActionType.AddCluster, new ManagementNetworkOnClusterOperationParameters(cluster), result -> {
        DataCenterGuideModel localModel = (DataCenterGuideModel) result.getState();
        localModel.postOnAddCluster(result.getReturnValue());
    }, this);
}
#end_block

#method_before
public void onSelectHost() {
    MoveHost model = (MoveHost) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    model.setSelectedHosts(new ArrayList<MoveHostData>());
    for (MoveHostData a : model.getItems()) {
        if (a.getIsSelected()) {
            model.getSelectedHosts().add(a);
        }
    }
    Cluster cluster = model.getCluster().getSelectedItem();
    final List<VdcActionParametersBase> parameterList = new ArrayList<>();
    for (MoveHostData hostData : model.getSelectedHosts()) {
        VDS host = hostData.getEntity();
        // Try to change host's cluster as neccessary.
        if (host.getClusterId() != null && !host.getClusterId().equals(cluster.getId())) {
            parameterList.add(new ChangeVDSClusterParameters(cluster.getId(), host.getId()));
        }
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.ChangeVDSCluster, parameterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            final DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            List<MoveHostData> hosts = ((MoveHost) dataCenterGuideModel.getWindow()).getSelectedHosts();
            List<VdcReturnValueBase> retVals = result.getReturnValue();
            final List<VdcActionParametersBase> activateVdsParameterList = new ArrayList<>();
            if (retVals != null && hosts.size() == retVals.size()) {
                int i = 0;
                for (MoveHostData selectedHostData : hosts) {
                    VDS selectedHost = selectedHostData.getEntity();
                    if (selectedHost.getStatus() == VDSStatus.PendingApproval && retVals.get(i) != null && retVals.get(i).getSucceeded()) {
                        Frontend.getInstance().runAction(VdcActionType.ApproveVds, new ApproveVdsParameters(selectedHost.getId()), null, this);
                    } else if (selectedHostData.getActivateHost()) {
                        activateVdsParameterList.add(new VdsActionParameters(selectedHostData.getEntity().getId()));
                    }
                    i++;
                }
            }
            if (activateVdsParameterList.isEmpty()) {
                dataCenterGuideModel.getWindow().stopProgress();
                dataCenterGuideModel.cancel();
                dataCenterGuideModel.postAction();
            } else {
                final String searchString = getVdsSearchString((MoveHost) dataCenterGuideModel.getWindow());
                Timer timer = new Timer() {

                    public void run() {
                        checkVdsClusterChangeSucceeded(searchString, parameterList, activateVdsParameterList);
                    }
                };
                timer.schedule(2000);
            }
        }
    }, this);
}
#method_after
public void onSelectHost() {
    MoveHost model = (MoveHost) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    model.setSelectedHosts(new ArrayList<MoveHostData>());
    for (MoveHostData a : model.getItems()) {
        if (a.getIsSelected()) {
            model.getSelectedHosts().add(a);
        }
    }
    Cluster cluster = model.getCluster().getSelectedItem();
    final List<ActionParametersBase> parameterList = new ArrayList<>();
    for (MoveHostData hostData : model.getSelectedHosts()) {
        VDS host = hostData.getEntity();
        // Try to change host's cluster as neccessary.
        if (host.getClusterId() != null && !host.getClusterId().equals(cluster.getId())) {
            parameterList.add(new ChangeVDSClusterParameters(cluster.getId(), host.getId()));
        }
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.ChangeVDSCluster, parameterList, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void executed(FrontendMultipleActionAsyncResult result) {
            final DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
            List<MoveHostData> hosts = ((MoveHost) dataCenterGuideModel.getWindow()).getSelectedHosts();
            List<VdcReturnValueBase> retVals = result.getReturnValue();
            final List<ActionParametersBase> activateVdsParameterList = new ArrayList<>();
            if (retVals != null && hosts.size() == retVals.size()) {
                int i = 0;
                for (MoveHostData selectedHostData : hosts) {
                    VDS selectedHost = selectedHostData.getEntity();
                    if (selectedHost.getStatus() == VDSStatus.PendingApproval && retVals.get(i) != null && retVals.get(i).getSucceeded()) {
                        Frontend.getInstance().runAction(ActionType.ApproveVds, new ApproveVdsParameters(selectedHost.getId()), null, this);
                    } else if (selectedHostData.getActivateHost()) {
                        activateVdsParameterList.add(new VdsActionParameters(selectedHostData.getEntity().getId()));
                    }
                    i++;
                }
            }
            if (activateVdsParameterList.isEmpty()) {
                dataCenterGuideModel.getWindow().stopProgress();
                dataCenterGuideModel.cancel();
                dataCenterGuideModel.postAction();
            } else {
                final String searchString = getVdsSearchString((MoveHost) dataCenterGuideModel.getWindow());
                Timer timer = new Timer() {

                    public void run() {
                        checkVdsClusterChangeSucceeded(searchString, parameterList, activateVdsParameterList);
                    }
                };
                timer.schedule(2000);
            }
        }
    }, this);
}
#end_block

#method_before
public void onAddHost() {
    cancelConfirm();
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // Save changes.
    VDS host = new VDS();
    host.setVdsName(model.getName().getEntity());
    host.setHostName(model.getHost().getEntity());
    host.setPort(model.getPort().getEntity());
    host.setSshPort(model.getAuthSshPort().getEntity());
    host.setSshUsername(model.getUserName().getEntity());
    host.setSshKeyFingerprint(model.getFetchSshFingerprint().getEntity());
    host.setClusterId(model.getCluster().getSelectedItem().getId());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    // Save other PM parameters.
    host.setPmEnabled(model.getIsPm().getEntity());
    host.setDisablePowerManagementPolicy(model.getDisableAutomaticPowerManagement().getEntity());
    host.setPmKdumpDetection(model.getPmKdumpDetection().getEntity());
    AddVdsActionParameters addVdsParams = new AddVdsActionParameters();
    addVdsParams.setVdsId(host.getId());
    addVdsParams.setvds(host);
    if (model.getUserPassword().getEntity() != null) {
        addVdsParams.setPassword(model.getUserPassword().getEntity());
    }
    addVdsParams.setOverrideFirewall(model.getOverrideIpTables().getEntity());
    addVdsParams.setFenceAgents(model.getFenceAgentListModel().getFenceAgents());
    model.startProgress();
    Frontend.getInstance().runAction(VdcActionType.AddVds, addVdsParams, result -> {
        DataCenterGuideModel localModel = (DataCenterGuideModel) result.getState();
        localModel.postOnAddHost(result.getReturnValue());
    }, this);
}
#method_after
public void onAddHost() {
    cancelConfirm();
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // Save changes.
    VDS host = new VDS();
    host.setVdsName(model.getName().getEntity());
    host.setHostName(model.getHost().getEntity());
    host.setPort(model.getPort().getEntity());
    host.setSshPort(model.getAuthSshPort().getEntity());
    host.setSshUsername(model.getUserName().getEntity());
    host.setSshKeyFingerprint(model.getFetchSshFingerprint().getEntity());
    host.setClusterId(model.getCluster().getSelectedItem().getId());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    // Save other PM parameters.
    host.setPmEnabled(model.getIsPm().getEntity());
    host.setDisablePowerManagementPolicy(model.getDisableAutomaticPowerManagement().getEntity());
    host.setPmKdumpDetection(model.getPmKdumpDetection().getEntity());
    AddVdsActionParameters addVdsParams = new AddVdsActionParameters();
    addVdsParams.setVdsId(host.getId());
    addVdsParams.setvds(host);
    if (model.getUserPassword().getEntity() != null) {
        addVdsParams.setPassword(model.getUserPassword().getEntity());
    }
    addVdsParams.setOverrideFirewall(model.getOverrideIpTables().getEntity());
    addVdsParams.setFenceAgents(model.getFenceAgentListModel().getFenceAgents());
    model.startProgress();
    Frontend.getInstance().runAction(ActionType.AddVds, addVdsParams, result -> {
        DataCenterGuideModel localModel = (DataCenterGuideModel) result.getState();
        localModel.postOnAddHost(result.getReturnValue());
    }, this);
}
#end_block

#method_before
private void saveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setConnection(path);
    connection.setStorageType(posixModel.getType());
    connection.setVfsType(posixModel.getVfsType().getEntity());
    connection.setMountOptions(posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<VdcActionType> actionTypes = new ArrayList<>();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(VdcActionType.AddStorageServerConnection);
    actionTypes.add(posixModel.getAddStorageDomainVdcAction());
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId(), false));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    StoragePool dataCenter = model.getDataCenter().getSelectedItem();
    parameter.setStoragePoolId(dataCenter.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        dataCenterGuideModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageId = vdcReturnValueBase.getActionReturnValue();
        // Attach storage to data center as necessary.
        StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
        StoragePool selectedDataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!selectedDataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            dataCenterGuideModel.attachStorageToDataCenter(dataCenterGuideModel.storageId, selectedDataCenter.getId());
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.cleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#method_after
private void saveNewPosixStorage() {
    StorageModel model = (StorageModel) getWindow();
    PosixStorageModel posixModel = (PosixStorageModel) model.getCurrentStorageItem();
    VDS host = model.getHost().getSelectedItem();
    hostId = host.getId();
    // Create storage connection.
    StorageServerConnections connection = new StorageServerConnections();
    connection.setConnection(path);
    connection.setStorageType(posixModel.getType());
    connection.setVfsType(posixModel.getVfsType().getEntity());
    connection.setMountOptions(posixModel.getMountOptions().getEntity());
    this.connection = connection;
    ArrayList<ActionType> actionTypes = new ArrayList<>();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    actionTypes.add(ActionType.AddStorageServerConnection);
    actionTypes.add(posixModel.getAddStorageDomainVdcAction());
    parameters.add(new StorageServerConnectionParametersBase(this.connection, host.getId(), false));
    StorageDomainManagementParameter parameter = new StorageDomainManagementParameter(storageDomain);
    parameter.setVdsId(host.getId());
    StoragePool dataCenter = model.getDataCenter().getSelectedItem();
    parameter.setStoragePoolId(dataCenter.getId());
    parameters.add(parameter);
    IFrontendActionAsyncCallback callback1 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageDomain.setStorage((String) vdcReturnValueBase.getActionReturnValue());
        dataCenterGuideModel.connection.setId((String) vdcReturnValueBase.getActionReturnValue());
    };
    IFrontendActionAsyncCallback callback2 = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        VdcReturnValueBase vdcReturnValueBase = result.getReturnValue();
        dataCenterGuideModel.storageId = vdcReturnValueBase.getActionReturnValue();
        // Attach storage to data center as necessary.
        StorageModel storageModel = (StorageModel) dataCenterGuideModel.getWindow();
        StoragePool selectedDataCenter = storageModel.getDataCenter().getSelectedItem();
        if (!selectedDataCenter.getId().equals(StorageModel.UnassignedDataCenterId)) {
            dataCenterGuideModel.attachStorageToDataCenter(dataCenterGuideModel.storageId, selectedDataCenter.getId());
        }
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, true, dataCenterGuideModel.storageModel);
    };
    IFrontendActionAsyncCallback failureCallback = result -> {
        DataCenterGuideModel dataCenterGuideModel = (DataCenterGuideModel) result.getState();
        dataCenterGuideModel.cleanConnection(dataCenterGuideModel.connection, dataCenterGuideModel.hostId);
        dataCenterGuideModel.onFinish(dataCenterGuideModel.context, false, dataCenterGuideModel.storageModel);
    };
    Frontend.getInstance().runMultipleActions(actionTypes, parameters, new ArrayList<>(Arrays.asList(new IFrontendActionAsyncCallback[] { callback1, callback2 })), failureCallback, this);
}
#end_block

#method_before
private void initMenuPopup(List<ActionButtonDefinition<T>> actions) {
    if (menuPopup == null) {
        menuPopup = new DropDownMenu();
    }
    for (final ActionButtonDefinition<T> buttonDef : actions) {
        if (buttonDef instanceof UiMenuBarButtonDefinition) {
            UiMenuBarButtonDefinition<T> menuBarDef = (UiMenuBarButtonDefinition<T>) buttonDef;
            DropDownHeader subMenuHeader = new DropDownHeader(buttonDef.getText());
            menuPopup.add(new Divider());
            menuPopup.add(subMenuHeader);
            initMenuPopup(menuBarDef.getSubActions());
        } else {
            AnchorListItem menuItem = new AnchorListItem(buttonDef.getText());
            menuItem.addClickHandler(new ClickHandler() {

                @Override
                public void onClick(ClickEvent event) {
                    buttonDef.onClick(selectedItemsProvider.getSelectedItems());
                }
            });
            updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems());
            menuPopup.add(menuItem);
            items.add(new Pair<>(menuItem, buttonDef));
        }
    }
    add(menuPopup);
}
#method_after
private void initMenuPopup(List<ActionButtonDefinition<T>> actions) {
    if (menuPopup == null) {
        menuPopup = new DropDownMenu();
    }
    for (final ActionButtonDefinition<T> buttonDef : actions) {
        if (buttonDef instanceof UiMenuBarButtonDefinition) {
            UiMenuBarButtonDefinition<T> menuBarDef = (UiMenuBarButtonDefinition<T>) buttonDef;
            DropDownHeader subMenuHeader = new DropDownHeader(buttonDef.getText());
            menuPopup.add(new Divider());
            menuPopup.add(subMenuHeader);
            initMenuPopup(menuBarDef.getSubActions());
        } else {
            AnchorListItem menuItem = new AnchorListItem(buttonDef.getText());
            menuItem.addClickHandler(e -> {
                buttonDef.onClick(selectedItemsProvider.getSelectedItems());
            });
            updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems());
            menuPopup.add(menuItem);
            items.add(new Pair<>(menuItem, buttonDef));
        }
    }
    add(menuPopup);
}
#end_block

#method_before
@Override
protected boolean validate() {
    if (!super.validate()) {
        return false;
    }
    StorageDomain dom = getStorageDomain();
    if (dom == null) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    }
    VDS vds = getVds();
    StorageDomainToPoolRelationValidator domainPoolValidator = createDomainToPoolValidator(dom);
    if (VDSStatus.Maintenance == vds.getStatus()) {
        return failValidation(EngineMessage.CANNOT_REMOVE_STORAGE_HOST_IN_MAINTENANCE, String.format("$%1$s %2$s", "hostName", vds.getName()));
    }
    if (!checkStorageDomain()) {
        return false;
    }
    boolean localFs = isLocalFs(dom);
    if (!localFs && !validate(domainPoolValidator.isStorageDomainNotInAnyPool())) {
        return false;
    }
    if (localFs && isDomainAttached(dom) && !canDetachDomain(getParameters().getDestroyingPool(), false)) {
        return false;
    }
    if (getParameters().getDoFormat() && !localFs && isStorageDomainAttached(dom)) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_FORMAT_STORAGE_DOMAIN_WITH_ATTACHED_DATA_DOMAIN);
    }
    if (vds == null) {
        if (localFs) {
            if (!initializeVds()) {
                return false;
            }
        } else {
            return failValidation(EngineMessage.CANNOT_REMOVE_STORAGE_DOMAIN_INVALID_HOST_ID);
        }
    }
    if (dom.getStorageType().isOpenStackDomain()) {
        return failValidation(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN);
    }
    return true;
}
#method_after
@Override
protected boolean validate() {
    if (!super.validate()) {
        return false;
    }
    StorageDomain dom = getStorageDomain();
    if (dom == null) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST);
    }
    VDS vds = getVds();
    boolean localFs = isLocalFs(dom);
    if (vds == null) {
        if (localFs) {
            if (!initializeVds()) {
                return false;
            }
        } else {
            return failValidation(EngineMessage.CANNOT_REMOVE_STORAGE_DOMAIN_INVALID_HOST_ID);
        }
    } else if (vds.getStatus() != VDSStatus.Up) {
        return failValidation(EngineMessage.CANNOT_REMOVE_STORAGE_DOMAIN_HOST_NOT_UP, String.format("$%1$s %2$s", "hostName", vds.getName()));
    }
    StorageDomainToPoolRelationValidator domainPoolValidator = createDomainToPoolValidator(dom);
    if (!checkStorageDomain()) {
        return false;
    }
    if (!localFs && !validate(domainPoolValidator.isStorageDomainNotInAnyPool())) {
        return false;
    }
    if (localFs && isDomainAttached(dom) && !canDetachDomain(getParameters().getDestroyingPool(), false)) {
        return false;
    }
    if (getParameters().getDoFormat() && !localFs && isStorageDomainAttached(dom)) {
        return failValidation(EngineMessage.ACTION_TYPE_FAILED_FORMAT_STORAGE_DOMAIN_WITH_ATTACHED_DATA_DOMAIN);
    }
    if (dom.getStorageType().isOpenStackDomain()) {
        return failValidation(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN);
    }
    return true;
}
#end_block

#method_before
protected boolean detachStorage(StorageDomain dom) {
    Guid domId = dom.getId();
    Guid poolId = dom.getStoragePoolId();
    DetachStorageDomainFromPoolParameters params = new DetachStorageDomainFromPoolParameters(domId, poolId);
    params.setDestroyingPool(getParameters().getDestroyingPool());
    return getBackend().runInternalAction(VdcActionType.DetachStorageDomainFromPool, params, cloneContext().withoutCompensationContext().withoutExecutionContext()).getSucceeded();
}
#method_after
protected boolean detachStorage(StorageDomain dom) {
    Guid domId = dom.getId();
    Guid poolId = dom.getStoragePoolId();
    DetachStorageDomainFromPoolParameters params = new DetachStorageDomainFromPoolParameters(domId, poolId);
    params.setDestroyingPool(getParameters().getDestroyingPool());
    return getBackend().runInternalAction(ActionType.DetachStorageDomainFromPool, params, cloneContext().withoutCompensationContext().withoutExecutionContext()).getSucceeded();
}
#end_block

#method_before
@Override
protected void initializeModelHandlers(BookmarkListModel model) {
    super.initializeModelHandlers(model);
    // Clear tag selection when a tag is saved/edited/deleted
    model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection());
    getModel().getSelectionModel().addSelectionChangeHandler(event -> {
        if (!getModel().getSelectedObjects().isEmpty()) {
            BookmarkModelProvider.this.getModel().setSelectedItem(getModel().getSelectedObjects().get(0));
        } else {
            BookmarkModelProvider.this.getModel().setSelectedItem(null);
        }
    });
}
#method_after
@Override
protected void initializeModelHandlers(BookmarkListModel model) {
    super.initializeModelHandlers(model);
    // Clear tag selection when a tag is saved/edited/deleted
    model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection());
    getModel().getSelectionModel().addSelectionChangeHandler(event -> {
        Bookmark bookmark = getModel().getSelectedObjects().isEmpty() ? null : (Bookmark) getModel().getSelectedObjects().get(0);
        BookmarkModelProvider.this.getModel().setSelectedItem(bookmark);
    });
}
#end_block

#method_before
public static boolean check(String blob, String password) throws IOException, GeneralSecurityException {
    final Map<String, String> map;
    try {
        map = getEncryptionMap(blob);
    } catch (JsonParseException e) {
        // password in db wasn't correctly encrypted
        LOG.warn("Invalid format of previous password. Cannot check equality of previous and new password.");
        return false;
    }
    if (!ARTIFACT.equals(map.get(ARTIFACT_KEY))) {
        throw new IllegalArgumentException(String.format("Invalid artifact '%s'", map.get(ARTIFACT_KEY)));
    }
    if (!VERSION.equals(map.get(VERSION_KEY))) {
        throw new IllegalArgumentException(String.format("Invalid version '%s'", map.get(VERSION_KEY)));
    }
    byte[] salt = Base64.decodeBase64(map.get(SALT_KEY));
    return Arrays.equals(Base64.decodeBase64(map.get(SECRET_KEY)), SecretKeyFactory.getInstance(map.get(ALGORITHM_KEY)).generateSecret(new PBEKeySpec(password.toCharArray(), salt, Integer.parseInt(map.get(ITERATIONS_KEY)), salt.length * 8)).getEncoded());
}
#method_after
public static boolean check(String blob, String password) throws IOException, GeneralSecurityException {
    final Map<String, String> map = getEncryptionMap(blob);
    if (map.isEmpty()) {
        LOG.warn("Invalid format of previous password. Cannot check equality of previous and new password.");
        return false;
    }
    if (!ARTIFACT.equals(map.get(ARTIFACT_KEY))) {
        throw new IllegalArgumentException(String.format("Invalid artifact '%s'", map.get(ARTIFACT_KEY)));
    }
    if (!VERSION.equals(map.get(VERSION_KEY))) {
        throw new IllegalArgumentException(String.format("Invalid version '%s'", map.get(VERSION_KEY)));
    }
    byte[] salt = Base64.decodeBase64(map.get(SALT_KEY));
    return Arrays.equals(Base64.decodeBase64(map.get(SECRET_KEY)), SecretKeyFactory.getInstance(map.get(ALGORITHM_KEY)).generateSecret(new PBEKeySpec(password.toCharArray(), salt, Integer.parseInt(map.get(ITERATIONS_KEY)), salt.length * 8)).getEncoded());
}
#end_block

#method_before
private static Map<String, String> getEncryptionMap(String blob) throws IOException {
    return new ObjectMapper().readValue(Base64.decodeBase64(blob), TypeFactory.defaultInstance().constructMapType(HashMap.class, String.class, String.class));
}
#method_after
private static Map<String, String> getEncryptionMap(String blob) throws IOException {
    Map<String, String> map;
    try {
        map = new ObjectMapper().readValue(Base64.decodeBase64(blob), TypeFactory.defaultInstance().constructMapType(HashMap.class, String.class, String.class));
    } catch (JsonParseException e) {
        // password in db wasn't correctly encrypted
        map = Collections.emptyMap();
    }
    return map;
}
#end_block

#method_before
public static void persistUserPassword(HttpServletRequest request, SsoSession ssoSession, String password) {
    try {
        if (ssoSession.getScopeAsList().contains("ovirt-ext=token:password-access") && password != null && StringUtils.isNotEmpty(ssoSession.getClientId())) {
            ssoSession.setPassword(encrypt(request.getServletContext(), ssoSession.getClientId(), password));
        }
    } catch (Exception ex) {
        log.error("Unable to encrypt password: {}", ex.getMessage());
        log.debug("Exception", ex);
    }
}
#method_after
public static void persistUserPassword(HttpServletRequest request, SsoSession ssoSession, String password) {
    try {
        if (ssoSession.getScopeAsList().contains("ovirt-ext=token:password-access") && password != null) {
            ssoSession.setPassword(encrypt(request.getServletContext(), password));
        }
    } catch (Exception ex) {
        log.error("Unable to encrypt password: {}", ex.getMessage());
        log.debug("Exception", ex);
    }
}
#end_block

#method_before
public static String encrypt(ServletContext ctx, String clientId, String rawText) throws Exception {
    ClientInfo clientInfo = getSsoContext(ctx).getClienInfo(clientId);
    try (InputStream in = new FileInputStream(clientInfo.getCertificateLocation())) {
        return EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256, CertificateFactory.getInstance("X.509").generateCertificate(in), 100, rawText.getBytes(StandardCharsets.UTF_8));
    }
}
#method_after
public static String encrypt(ServletContext ctx, String rawText) throws Exception {
    return EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256, getSsoContext(ctx).getEngineCertificate(), 100, rawText.getBytes(StandardCharsets.UTF_8));
}
#end_block

#method_before
private void updateLabelList() {
    AsyncDataProvider.getInstance().getLabelList(new AsyncQuery<>(allLabels -> {
        boolean isExistingVmBehavior = getBehavior() instanceof ExistingVmModelBehavior;
        if (isExistingVmBehavior) {
            Guid vmId = ((ExistingVmModelBehavior) getBehavior()).getVm().getId();
            AsyncDataProvider.getInstance().getLabelListByEntityId(new AsyncQuery<>(vmLabelsList -> {
                labelList.setItems(allLabels);
                labelList.setSelectedItems(vmLabelsList);
            }), vmId);
        } else {
            labelList.setItems(allLabels);
            labelList.setSelectedItems(new ArrayList<>());
        }
        labelList.setIsChangeable(true);
    }));
}
#method_after
private void updateLabelList() {
    AsyncDataProvider.getInstance().getLabelList(new AsyncQuery<>(allLabels -> {
        boolean isExistingVmBehavior = getBehavior() instanceof ExistingVmModelBehavior;
        if (isExistingVmBehavior) {
            Guid vmId = ((ExistingVmModelBehavior) getBehavior()).getVm().getId();
            AsyncDataProvider.getInstance().getLabelListByEntityId(new AsyncQuery<>(vmLabelsList -> {
                labelList.setItems(allLabels);
                labelList.setSelectedItems(vmLabelsList);
            }), vmId);
        } else {
            labelList.setItems(allLabels);
            labelList.setSelectedItems(new ArrayList<>());
        }
    }));
}
#end_block

#method_before
@Override
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> vmIds = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<>();
    ArrayList<Guid> tagsToDetach = new ArrayList<>();
    if (model.getItems() != null && model.getItems().size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    for (Guid a : tagsToAttach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AttachVmsToTag, parameters);
    parameters = new ArrayList<>();
    for (Guid a : tagsToDetach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.DetachVmFromTag, parameters);
    cancel();
}
#method_after
@Override
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> vmIds = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        vmIds.add(vm.getId());
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<>();
    ArrayList<Guid> tagsToDetach = new ArrayList<>();
    if (model.getItems() != null && model.getItems().size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    for (Guid a : tagsToAttach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(ActionType.AttachVmsToTag, parameters);
    parameters = new ArrayList<>();
    for (Guid a : tagsToDetach) {
        parameters.add(new AttachEntityToTagParameters(a, vmIds));
    }
    Frontend.getInstance().runMultipleAction(ActionType.DetachVmFromTag, parameters);
    cancel();
}
#end_block

#method_before
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel window = new ConfirmationModel();
    setWindow(window);
    window.setTitle(ConstantsManager.getInstance().getConstants().removeVirtualMachinesTitle());
    window.setHelpTag(HelpTag.remove_virtual_machine);
    // $NON-NLS-1$
    window.setHashName("remove_virtual_machine");
    vmsRemoveMap = new HashMap<>();
    for (Object selectedItem : getSelectedItems()) {
        VM vm = (VM) selectedItem;
        if (VdcActionUtils.canExecute(Arrays.asList(vm), VM.class, VdcActionType.RemoveVm)) {
            EntityModel removeDisksCheckbox = new EntityModel(true);
            removeDisksCheckbox.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
            removeDisksCheckbox.setMessage(vm.getName());
            if (!Guid.Empty.equals(vm.getVmtGuid())) {
                updateRemoveDisksCheckBox(removeDisksCheckbox, true, false, ConstantsManager.getInstance().getConstants().removeVmDisksTemplateMsg());
            }
            vmsRemoveMap.put(vm.getId(), removeDisksCheckbox);
        }
    }
    window.setItems(vmsRemoveMap.entrySet());
    initRemoveDisksCheckboxes(vmsRemoveMap);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    window.getCommands().add(tempVar2);
}
#method_after
private void remove() {
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel window = new ConfirmationModel();
    setWindow(window);
    window.setTitle(ConstantsManager.getInstance().getConstants().removeVirtualMachinesTitle());
    window.setHelpTag(HelpTag.remove_virtual_machine);
    // $NON-NLS-1$
    window.setHashName("remove_virtual_machine");
    vmsRemoveMap = new HashMap<>();
    for (Object selectedItem : getSelectedItems()) {
        VM vm = (VM) selectedItem;
        if (ActionUtils.canExecute(Arrays.asList(vm), VM.class, ActionType.RemoveVm)) {
            EntityModel removeDisksCheckbox = new EntityModel(true);
            removeDisksCheckbox.setTitle(ConstantsManager.getInstance().getConstants().removeDisksTitle());
            removeDisksCheckbox.setMessage(vm.getName());
            if (!Guid.Empty.equals(vm.getVmtGuid())) {
                updateRemoveDisksCheckBox(removeDisksCheckbox, true, false, ConstantsManager.getInstance().getConstants().removeVmDisksTemplateMsg());
            }
            vmsRemoveMap.put(vm.getId(), removeDisksCheckbox);
        }
    }
    window.setItems(vmsRemoveMap.entrySet());
    initRemoveDisksCheckboxes(vmsRemoveMap);
    // $NON-NLS-1$
    UICommand tempVar = UICommand.createDefaultOkUiCommand("OnRemove", this);
    window.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = UICommand.createCancelUiCommand("Cancel", this);
    window.getCommands().add(tempVar2);
}
#end_block

#method_before
private void postExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    ArrayList<VdcActionParametersBase> parameters = new ArrayList<>();
    model.stopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveOrCopyParameters parameter = new MoveOrCopyParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride(model.getForceOverride().getEntity());
        parameter.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!model.getCollapseSnapshots().getEntity()) {
        if (missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            confirmModel.setHelpTag(HelpTag.template_not_found_on_export_domain);
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnExportNoTemplates", this);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("CancelConfirmation", this);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.startProgress();
            Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, parameters, result -> {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.stopProgress();
                cancel();
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (VdcActionParametersBase item : parameters) {
            MoveOrCopyParameters parameter = (MoveOrCopyParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.startProgress();
        Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, parameters, result -> {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.stopProgress();
            cancel();
        }, model);
    }
}
#method_after
private void postExportGetMissingTemplates(ArrayList<String> missingTemplatesFromVms) {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    ArrayList<ActionParametersBase> parameters = new ArrayList<>();
    model.stopProgress();
    for (Object a : getSelectedItems()) {
        VM vm = (VM) a;
        MoveOrCopyParameters parameter = new MoveOrCopyParameters(vm.getId(), storageDomainId);
        parameter.setForceOverride(model.getForceOverride().getEntity());
        parameter.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameter.setTemplateMustExists(true);
        parameters.add(parameter);
    }
    if (!model.getCollapseSnapshots().getEntity()) {
        if (missingTemplatesFromVms == null || missingTemplatesFromVms.size() > 0) {
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().templatesNotFoundOnExportDomainTitle());
            confirmModel.setHelpTag(HelpTag.template_not_found_on_export_domain);
            // $NON-NLS-1$
            confirmModel.setHashName("template_not_found_on_export_domain");
            confirmModel.setMessage(missingTemplatesFromVms == null ? ConstantsManager.getInstance().getConstants().couldNotReadTemplatesFromExportDomainMsg() : ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainMsg());
            confirmModel.setItems(missingTemplatesFromVms);
            // $NON-NLS-1$
            UICommand tempVar = UICommand.createDefaultOkUiCommand("OnExportNoTemplates", this);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = UICommand.createCancelUiCommand("CancelConfirmation", this);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            model.startProgress();
            Frontend.getInstance().runMultipleAction(ActionType.ExportVm, parameters, result -> {
                ExportVmModel localModel = (ExportVmModel) result.getState();
                localModel.stopProgress();
                cancel();
            }, model);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        for (ActionParametersBase item : parameters) {
            MoveOrCopyParameters parameter = (MoveOrCopyParameters) item;
            parameter.setTemplateMustExists(false);
        }
        model.startProgress();
        Frontend.getInstance().runMultipleAction(ActionType.ExportVm, parameters, result -> {
            ExportVmModel localModel = (ExportVmModel) result.getState();
            localModel.stopProgress();
            cancel();
        }, model);
    }
}
#end_block

#method_before
private void onExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveOrCopyParameters parameters = new MoveOrCopyParameters(a.getId(), storageDomainId);
        parameters.setForceOverride(model.getForceOverride().getEntity());
        parameters.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.ExportVm, list, result -> {
        ExportVmModel localModel = (ExportVmModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void onExportNoTemplates() {
    ExportVmModel model = (ExportVmModel) getWindow();
    Guid storageDomainId = model.getStorage().getSelectedItem().getId();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        MoveOrCopyParameters parameters = new MoveOrCopyParameters(a.getId(), storageDomainId);
        parameters.setForceOverride(model.getForceOverride().getEntity());
        parameters.setCopyCollapse(model.getCollapseSnapshots().getEntity());
        parameters.setTemplateMustExists(false);
        list.add(parameters);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.ExportVm, list, result -> {
        ExportVmModel localModel = (ExportVmModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
private void postNameUniqueCheck() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = getSelectedItem();
    VM newVm = buildVmOnNewTemplate(model, vm);
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newVm, model.getName().getEntity(), model.getDescription().getEntity());
    BuilderExecutor.build(model, addVmTemplateParameters, new UnitToAddVmTemplateParametersBuilder());
    model.startProgress();
    Frontend.getInstance().runAction(VdcActionType.AddVmTemplate, addVmTemplateParameters, result -> {
        getWindow().stopProgress();
        VdcReturnValueBase returnValueBase = result.getReturnValue();
        if (returnValueBase != null && returnValueBase.getSucceeded()) {
            cancel();
        }
    }, this);
}
#method_after
private void postNameUniqueCheck() {
    UnitVmModel model = (UnitVmModel) getWindow();
    VM vm = getSelectedItem();
    VM newVm = buildVmOnNewTemplate(model, vm);
    AddVmTemplateParameters addVmTemplateParameters = new AddVmTemplateParameters(newVm, model.getName().getEntity(), model.getDescription().getEntity());
    BuilderExecutor.build(model, addVmTemplateParameters, new UnitToAddVmTemplateParametersBuilder());
    model.startProgress();
    Frontend.getInstance().runAction(ActionType.AddVmTemplate, addVmTemplateParameters, result -> {
        getWindow().stopProgress();
        VdcReturnValueBase returnValueBase = result.getReturnValue();
        if (returnValueBase != null && returnValueBase.getSucceeded()) {
            cancel();
        }
    }, this);
}
#end_block

#method_before
private void migrate() {
    VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    MigrateModel model = new MigrateModel(this);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().migrateVirtualMachinesTitle());
    model.setHelpTag(HelpTag.migrate_virtual_machine);
    // $NON-NLS-1$
    model.setHashName("migrate_virtual_machine");
    model.setVmsOnSameCluster(true);
    model.setIsAutoSelect(true);
    model.setVmList(new ArrayList<>(getSelectedItems()));
    model.setVm(vm);
    model.initializeModel();
}
#method_after
private void migrate() {
    VM vm = getSelectedItem();
    if (vm == null) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    MigrateModel model = new MigrateModel(this);
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().migrateVirtualMachinesTitle());
    model.setHelpTag(HelpTag.migrate_virtual_machine);
    // $NON-NLS-1$
    model.setHashName("migrate_virtual_machine");
    model.setVmsOnSameCluster(true);
    model.setIsAutoSelect(true);
    model.setVmList(new ArrayList<>(getSelectedItems()));
    model.initializeModel();
}
#end_block

#method_before
private void cancelMigration() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.CancelMigrateVm, list, result -> {
    }, null);
}
#method_after
private void cancelMigration() {
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.CancelMigrateVm, list, result -> {
    }, null);
}
#end_block

#method_before
private void cancelConversion() {
    List<VdcActionParametersBase> parameters = new ArrayList<>();
    for (VM vm : getSelectedItems()) {
        parameters.add(new VmOperationParameterBase(vm.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.CancelConvertVm, parameters);
}
#method_after
private void cancelConversion() {
    List<ActionParametersBase> parameters = new ArrayList<>();
    for (VM vm : getSelectedItems()) {
        parameters.add(new VmOperationParameterBase(vm.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.CancelConvertVm, parameters);
}
#end_block

#method_before
private void onMigrate() {
    MigrateModel model = (MigrateModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress();
    Guid targetClusterId = model.getClusters().getSelectedItem() != null ? model.getClusters().getSelectedItem().getId() : null;
    if (model.getIsAutoSelect()) {
        ArrayList<VdcActionParametersBase> list = new ArrayList<>();
        for (Object item : getSelectedItems()) {
            VM a = (VM) item;
            list.add(new MigrateVmParameters(true, a.getId(), targetClusterId));
        }
        Frontend.getInstance().runMultipleAction(VdcActionType.MigrateVm, list, result -> {
            MigrateModel localModel = (MigrateModel) result.getState();
            localModel.stopProgress();
            cancel();
        }, model);
    } else {
        ArrayList<VdcActionParametersBase> list = new ArrayList<>();
        for (Object item : getSelectedItems()) {
            VM a = (VM) item;
            if (a.getRunOnVds().equals(model.getHosts().getSelectedItem().getId())) {
                continue;
            }
            list.add(new MigrateVmToServerParameters(true, a.getId(), model.getHosts().getSelectedItem().getId(), targetClusterId));
        }
        Frontend.getInstance().runMultipleAction(VdcActionType.MigrateVmToServer, list, result -> {
            MigrateModel localModel = (MigrateModel) result.getState();
            localModel.stopProgress();
            cancel();
        }, model);
    }
}
#method_after
private void onMigrate() {
    MigrateModel model = (MigrateModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress();
    if (model.getIsAutoSelect()) {
        ArrayList<ActionParametersBase> list = new ArrayList<>();
        for (Object item : getSelectedItems()) {
            VM vm = (VM) item;
            list.add(new MigrateVmParameters(true, vm.getId(), vm.getClusterId()));
        }
        Frontend.getInstance().runMultipleAction(ActionType.MigrateVm, list, result -> {
            MigrateModel localModel = (MigrateModel) result.getState();
            localModel.stopProgress();
            cancel();
        }, model);
    } else {
        ArrayList<ActionParametersBase> list = new ArrayList<>();
        for (Object item : getSelectedItems()) {
            VM vm = (VM) item;
            if (vm.getRunOnVds().equals(model.getHosts().getSelectedItem().getId())) {
                continue;
            }
            list.add(new MigrateVmToServerParameters(true, vm.getId(), model.getHosts().getSelectedItem().getId(), vm.getClusterId()));
        }
        Frontend.getInstance().runMultipleAction(ActionType.MigrateVmToServer, list, result -> {
            MigrateModel localModel = (MigrateModel) result.getState();
            localModel.stopProgress();
            cancel();
        }, model);
    }
}
#end_block

#method_before
private void onPowerAction(VdcActionType actionType, PowerActionParametersFactory<?> parametersFactory) {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        list.add(parametersFactory.createActionParameters(vm));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(actionType, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void onPowerAction(ActionType actionType, PowerActionParametersFactory<?> parametersFactory) {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM vm = (VM) item;
        list.add(parametersFactory.createActionParameters(vm));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(actionType, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
private void onShutdown() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    onPowerAction(VdcActionType.ShutdownVm, vm -> new ShutdownVmParameters(vm.getId(), true, model.getReason().getEntity()));
}
#method_after
private void onShutdown() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    onPowerAction(ActionType.ShutdownVm, vm -> new ShutdownVmParameters(vm.getId(), true, model.getReason().getEntity()));
}
#end_block

#method_before
private void onStop() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    onPowerAction(VdcActionType.StopVm, vm -> new StopVmParameters(vm.getId(), StopVmTypeEnum.NORMAL, model.getReason().getEntity()));
}
#method_after
private void onStop() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    onPowerAction(ActionType.StopVm, vm -> new StopVmParameters(vm.getId(), StopVmTypeEnum.NORMAL, model.getReason().getEntity()));
}
#end_block

#method_before
private void onReboot() {
    onPowerAction(VdcActionType.RebootVm, vm -> new VmOperationParameterBase(vm.getId()));
}
#method_after
private void onReboot() {
    onPowerAction(ActionType.RebootVm, vm -> new VmOperationParameterBase(vm.getId()));
}
#end_block

#method_before
private void pause() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.HibernateVm, list, result -> {
    }, null);
}
#method_after
private void pause() {
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new VmOperationParameterBase(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.HibernateVm, list, result -> {
    }, null);
}
#end_block

#method_before
private void run() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new RunVmParams(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.RunVm, list, result -> {
    }, null);
}
#method_after
private void run() {
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VM a = (VM) item;
        list.add(new RunVmParams(a.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.RunVm, list, result -> {
    }, null);
}
#end_block

#method_before
private void onRemove() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    final ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Entry<Guid, EntityModel> entry : vmsRemoveMap.entrySet()) {
        list.add(new RemoveVmParameters(entry.getKey(), false, (Boolean) entry.getValue().getEntity()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVm, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void onRemove() {
    final ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    final ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Entry<Guid, EntityModel> entry : vmsRemoveMap.entrySet()) {
        list.add(new RemoveVmParameters(entry.getKey(), false, (Boolean) entry.getValue().getEntity()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.RemoveVm, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
private void onChangeCD() {
    VM vm = getSelectedItem();
    if (vm == null) {
        cancel();
        return;
    }
    AttachCdModel model = (AttachCdModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (Objects.equals(model.getIsoImage().getSelectedItem(), vm.getCurrentCd())) {
        cancel();
        return;
    }
    String isoName = // $NON-NLS-1$
    Objects.equals(model.getIsoImage().getSelectedItem(), ConsoleModel.getEjectLabel()) ? // $NON-NLS-1$
    "" : model.getIsoImage().getSelectedItem();
    model.startProgress();
    Frontend.getInstance().runAction(VdcActionType.ChangeDisk, new ChangeDiskCommandParameters(vm.getId(), isoName), result -> {
        AttachCdModel attachCdModel = (AttachCdModel) result.getState();
        attachCdModel.stopProgress();
        cancel();
    }, model);
}
#method_after
private void onChangeCD() {
    VM vm = getSelectedItem();
    if (vm == null) {
        cancel();
        return;
    }
    AttachCdModel model = (AttachCdModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (Objects.equals(model.getIsoImage().getSelectedItem(), vm.getCurrentCd())) {
        cancel();
        return;
    }
    String isoName = // $NON-NLS-1$
    Objects.equals(model.getIsoImage().getSelectedItem(), ConsoleModel.getEjectLabel()) ? // $NON-NLS-1$
    "" : model.getIsoImage().getSelectedItem();
    model.startProgress();
    Frontend.getInstance().runAction(ActionType.ChangeDisk, new ChangeDiskCommandParameters(vm.getId(), isoName), result -> {
        AttachCdModel attachCdModel = (AttachCdModel) result.getState();
        attachCdModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
@Override
protected void updateVM(final UnitVmModel model) {
    final VM selectedItem = getSelectedItem();
    // explicitly pass non-editable field from the original VM
    getcurrentVm().setCreatedByUserId(selectedItem.getCreatedByUserId());
    getcurrentVm().setUseLatestVersion(model.getTemplateWithVersion().getSelectedItem().isLatest());
    if (selectedItem.isRunningOrPaused() && !selectedItem.isHostedEngine()) {
        AsyncDataProvider.getInstance().getVmChangedFieldsForNextRun(editedVm, getcurrentVm(), getUpdateVmParameters(false), new AsyncQuery<>(new AsyncCallback<VdcQueryReturnValue>() {

            @Override
            public void onSuccess(VdcQueryReturnValue returnValue) {
                List<String> changedFields = returnValue.getReturnValue();
                final boolean cpuHotPluggable = VmCommonUtils.isCpusToBeHotplugged(selectedItem, getcurrentVm());
                final boolean isHeadlessModeChanged = isHeadlessModeChanged(editedVm, getUpdateVmParameters(false));
                final boolean memoryHotPluggable = VmCommonUtils.isMemoryToBeHotplugged(selectedItem, getcurrentVm());
                if (isHeadlessModeChanged) {
                    changedFields.add(constants.headlessMode());
                }
                // provide warnings if isVmUnpinned()
                if (!changedFields.isEmpty() || isVmUnpinned() || memoryHotPluggable || cpuHotPluggable) {
                    VmNextRunConfigurationModel confirmModel = new VmNextRunConfigurationModel();
                    if (isVmUnpinned()) {
                        confirmModel.setVmUnpinned();
                    }
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle());
                    confirmModel.setHelpTag(HelpTag.edit_next_run_configuration);
                    // $NON-NLS-1$
                    confirmModel.setHashName("edit_next_run_configuration");
                    confirmModel.setChangedFields(changedFields);
                    confirmModel.setCpuPluggable(cpuHotPluggable);
                    confirmModel.setMemoryPluggable(memoryHotPluggable);
                    confirmModel.getCommands().add(// $NON-NLS-1$
                    new UICommand("updateExistingVm", VmListModel.this).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
                    // $NON-NLS-1$
                    confirmModel.getCommands().add(UICommand.createCancelUiCommand("CancelConfirmation", VmListModel.this));
                    setConfirmWindow(confirmModel);
                } else {
                    updateExistingVm(false);
                }
            }

            private boolean isVmUnpinned() {
                if (selectedItem.isRunning()) {
                    if (selectedItem.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST && getcurrentVm().getMigrationSupport() != MigrationSupport.PINNED_TO_HOST) {
                        return true;
                    }
                }
                return false;
            }
        }));
    } else {
        updateExistingVm(false);
    }
}
#method_after
@Override
protected void updateVM(final UnitVmModel model) {
    final VM selectedItem = getSelectedItem();
    // explicitly pass non-editable field from the original VM
    getcurrentVm().setCreatedByUserId(selectedItem.getCreatedByUserId());
    getcurrentVm().setUseLatestVersion(model.getTemplateWithVersion().getSelectedItem().isLatest());
    if (selectedItem.isRunningOrPaused() && !selectedItem.isHostedEngine()) {
        AsyncDataProvider.getInstance().getVmChangedFieldsForNextRun(editedVm, getcurrentVm(), getUpdateVmParameters(false), new AsyncQuery<>(new AsyncCallback<VdcQueryReturnValue>() {

            @Override
            public void onSuccess(VdcQueryReturnValue returnValue) {
                List<String> changedFields = returnValue.getReturnValue();
                final boolean cpuHotPluggable = VmCommonUtils.isCpusToBeHotplugged(selectedItem, getcurrentVm());
                final boolean isHeadlessModeChanged = isHeadlessModeChanged(editedVm, getUpdateVmParameters(false));
                final boolean memoryHotPluggable = VmCommonUtils.isMemoryToBeHotplugged(selectedItem, getcurrentVm());
                final boolean vmLeaseUpdated = !Objects.equals(selectedItem.getLeaseStorageDomainId(), getcurrentVm().getLeaseStorageDomainId());
                if (isHeadlessModeChanged) {
                    changedFields.add(constants.headlessMode());
                }
                // provide warnings if isVmUnpinned()
                if (!changedFields.isEmpty() || isVmUnpinned() || memoryHotPluggable || cpuHotPluggable || vmLeaseUpdated) {
                    VmNextRunConfigurationModel confirmModel = new VmNextRunConfigurationModel();
                    if (isVmUnpinned()) {
                        confirmModel.setVmUnpinned();
                    }
                    confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editNextRunConfigurationTitle());
                    confirmModel.setHelpTag(HelpTag.edit_next_run_configuration);
                    // $NON-NLS-1$
                    confirmModel.setHashName("edit_next_run_configuration");
                    confirmModel.setChangedFields(changedFields);
                    confirmModel.setCpuPluggable(cpuHotPluggable);
                    confirmModel.setMemoryPluggable(memoryHotPluggable);
                    confirmModel.setVmLeaseUpdated(vmLeaseUpdated);
                    confirmModel.getCommands().add(// $NON-NLS-1$
                    new UICommand("updateExistingVm", VmListModel.this).setTitle(ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true));
                    // $NON-NLS-1$
                    confirmModel.getCommands().add(UICommand.createCancelUiCommand("CancelConfirmation", VmListModel.this));
                    setConfirmWindow(confirmModel);
                } else {
                    updateExistingVm(false);
                }
            }

            private boolean isVmUnpinned() {
                if (selectedItem.isRunning()) {
                    if (selectedItem.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST && getcurrentVm().getMigrationSupport() != MigrationSupport.PINNED_TO_HOST) {
                        return true;
                    }
                }
                return false;
            }
        }));
    } else {
        updateExistingVm(false);
    }
}
#end_block

#method_before
private void updateExistingVm(final boolean applyCpuChangesLater) {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // runEditVM: should be true if Cluster hasn't changed or if
    // Cluster has changed and Editing it in the Backend has succeeded:
    VM selectedItem = getSelectedItem();
    Guid oldClusterID = selectedItem.getClusterId();
    Guid newClusterID = model.getSelectedCluster().getId();
    if (!oldClusterID.equals(newClusterID)) {
        ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId(), model.getCustomCompatibilityVersion().getSelectedItem());
        model.startProgress();
        Frontend.getInstance().runAction(VdcActionType.ChangeVMCluster, parameters, result -> {
            final VmListModel<Void> vmListModel = (VmListModel<Void>) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                VM vm = vmListModel.getcurrentVm();
                VmManagementParametersBase updateVmParams = vmListModel.getUpdateVmParameters(applyCpuChangesLater);
                Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, vm.getId()), vmListModel);
            } else {
                vmListModel.getWindow().stopProgress();
            }
        }, this);
    } else {
        model.startProgress();
        VmManagementParametersBase updateVmParams = getUpdateVmParameters(applyCpuChangesLater);
        Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, getcurrentVm().getId()), this);
    }
}
#method_after
private void updateExistingVm(final boolean applyCpuChangesLater) {
    final UnitVmModel model = (UnitVmModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    // runEditVM: should be true if Cluster hasn't changed or if
    // Cluster has changed and Editing it in the Backend has succeeded:
    VM selectedItem = getSelectedItem();
    Guid oldClusterID = selectedItem.getClusterId();
    Guid newClusterID = model.getSelectedCluster().getId();
    if (!oldClusterID.equals(newClusterID)) {
        ChangeVMClusterParameters parameters = new ChangeVMClusterParameters(newClusterID, getcurrentVm().getId(), model.getCustomCompatibilityVersion().getSelectedItem());
        model.startProgress();
        Frontend.getInstance().runAction(ActionType.ChangeVMCluster, parameters, result -> {
            final VmListModel<Void> vmListModel = (VmListModel<Void>) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                VM vm = vmListModel.getcurrentVm();
                VmManagementParametersBase updateVmParams = vmListModel.getUpdateVmParameters(applyCpuChangesLater);
                Frontend.getInstance().runAction(ActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, vm.getId()), vmListModel);
            } else {
                vmListModel.getWindow().stopProgress();
            }
        }, this);
    } else {
        model.startProgress();
        VmManagementParametersBase updateVmParams = getUpdateVmParameters(applyCpuChangesLater);
        Frontend.getInstance().runAction(ActionType.UpdateVm, updateVmParams, new UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, getcurrentVm().getId()), this);
    }
}
#end_block

#method_before
private void changeCD(Object sender, EventArgs e) {
    ChangeCDModel model = (ChangeCDModel) sender;
    // TODO: Patch!
    String isoName = model.getTitle();
    if (Objects.equals(isoName, ConstantsManager.getInstance().getConstants().noCds())) {
        return;
    }
    Object tempVar = getSelectedItem();
    VM vm = (VM) ((tempVar instanceof VM) ? tempVar : null);
    if (vm == null) {
        return;
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.ChangeDisk, new ArrayList<>(Arrays.asList(new VdcActionParametersBase[] { new ChangeDiskCommandParameters(vm.getId(), // $NON-NLS-1$
    Objects.equals(isoName, ConsoleModel.getEjectLabel()) ? "" : isoName) })), result -> {
    }, null);
}
#method_after
private void changeCD(Object sender, EventArgs e) {
    ChangeCDModel model = (ChangeCDModel) sender;
    // TODO: Patch!
    String isoName = model.getTitle();
    if (Objects.equals(isoName, ConstantsManager.getInstance().getConstants().noCds())) {
        return;
    }
    Object tempVar = getSelectedItem();
    VM vm = (VM) ((tempVar instanceof VM) ? tempVar : null);
    if (vm == null) {
        return;
    }
    Frontend.getInstance().runMultipleAction(ActionType.ChangeDisk, new ArrayList<>(Arrays.asList(new ActionParametersBase[] { new ChangeDiskCommandParameters(vm.getId(), // $NON-NLS-1$
    Objects.equals(isoName, ConsoleModel.getEjectLabel()) ? "" : isoName) })), result -> {
    }, null);
}
#end_block

#method_before
@Override
protected void updateActionsAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItemsWithStatusForExclusiveLock() : new ArrayList();
    boolean singleVmSelected = items.size() == 1;
    boolean vmsSelected = items.size() > 0;
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.RunVm));
    getCloneVmCommand().setIsExecutionAllowed(singleVmSelected && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.CloneVm));
    getPauseCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.StopVm));
    getRebootCommand().setIsExecutionAllowed(AsyncDataProvider.getInstance().isRebootCommandExecutionAllowed(items));
    getMigrateCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(singleVmSelected && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(singleVmSelected && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(vmsSelected && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(singleVmSelected && !getSelectedItem().isStateless() && !getSelectedItem().isPreviewSnapshot() && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.CreateAllSnapshotsFromVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(singleVmSelected && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(singleVmSelected && VdcActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(vmsSelected);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || singleVmSelected);
    getConsoleConnectCommand().setIsExecutionAllowed(isConsoleCommandsExecutionAllowed());
    getEditConsoleCommand().setIsExecutionAllowed(singleVmSelected && isConsoleEditEnabled());
    getCancelConvertCommand().setIsExecutionAllowed(isSelectedVmBeingConverted());
}
#method_after
@Override
protected void updateActionsAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItemsWithStatusForExclusiveLock() : new ArrayList();
    boolean singleVmSelected = items.size() == 1;
    boolean vmsSelected = items.size() > 0;
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.RunVm));
    getCloneVmCommand().setIsExecutionAllowed(singleVmSelected && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.CloneVm));
    getPauseCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.StopVm));
    getRebootCommand().setIsExecutionAllowed(AsyncDataProvider.getInstance().isRebootCommandExecutionAllowed(items));
    getMigrateCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecutePartially(items, VmWithStatusForExclusiveLock.class, ActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(singleVmSelected && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(singleVmSelected && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(vmsSelected && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.ExportVm));
    getCreateSnapshotCommand().setIsExecutionAllowed(singleVmSelected && !getSelectedItem().isStateless() && !getSelectedItem().isPreviewSnapshot() && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.CreateAllSnapshotsFromVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(singleVmSelected && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(singleVmSelected && ActionUtils.canExecute(items, VmWithStatusForExclusiveLock.class, ActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(vmsSelected);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || singleVmSelected);
    getConsoleConnectCommand().setIsExecutionAllowed(isConsoleCommandsExecutionAllowed());
    getEditConsoleCommand().setIsExecutionAllowed(singleVmSelected && isConsoleEditEnabled());
    getCancelConvertCommand().setIsExecutionAllowed(isSelectedVmBeingConverted());
}
#end_block

#method_before
private void updateLabelList() {
    AsyncDataProvider.getInstance().getLabelList(new AsyncQuery<>(allLabels -> {
        if (getIsNew()) {
            labelList.setItems(allLabels);
            labelList.setSelectedItems(new ArrayList<>());
        } else {
            AsyncDataProvider.getInstance().getLabelListByEntityId(new AsyncQuery<>(hostLabelsList -> {
                labelList.setItems(allLabels);
                labelList.setSelectedItems(hostLabelsList);
            }), getHostId());
        }
        labelList.setIsChangeable(true);
    }));
}
#method_after
private void updateLabelList() {
    AsyncDataProvider.getInstance().getLabelList(new AsyncQuery<>(allLabels -> {
        if (getIsNew()) {
            labelList.setItems(allLabels);
            labelList.setSelectedItems(new ArrayList<>());
        } else {
            AsyncDataProvider.getInstance().getLabelListByEntityId(new AsyncQuery<>(hostLabelsList -> {
                labelList.setItems(allLabels);
                labelList.setSelectedItems(hostLabelsList);
            }), getHostId());
        }
    }));
}
#end_block

#method_before
void localize() {
    // General tab
    generalTab.setLabel(constants.hostPopupGeneralTabLabel());
    clusterEditor.setLabel(constants.hostPopupClusterLabel());
    nameEditor.setLabel(constants.hostPopupNameLabel());
    userNameEditor.setLabel(constants.hostPopupUsernameLabel());
    commentEditor.setLabel(constants.commentLabel());
    labelEditor.setLabel(constants.affinityLabels());
    hostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    authSshPortEditor.setLabel(constants.hostPopupPortLabel());
    authLabel.setText(constants.hostPopupAuthLabel());
    rootPasswordLabel.setText(constants.hostPopupAuthLabelForExternalHost());
    rbPasswordLabel.setText(constants.hostPopupPasswordLabel());
    rbPublicKeyLabel.setText(constants.hostPopupPublicKeyLabel());
    fingerprintLabel.setText(constants.hostPopupHostFingerprintLabel());
    overrideIpTablesEditor.setLabel(constants.hostPopupOverrideIpTablesLabel());
    externalHostProviderEnabledEditor.setLabel(constants.hostPopupEnableExternalHostProvider());
    externalHostNameEditor.setLabel(constants.hostPopupExternalHostName());
    publicKeyEditor.setTitle(constants.publicKeyUsage());
    // Power Management tab
    powerManagementTab.setLabel(constants.hostPopupPowerManagementTabLabel());
    pmEnabledEditor.setLabel(constants.hostPopupPmEnabledLabel());
    // Auto PM
    disableAutomaticPowerManagementEditor.setLabel(constants.hostPopupPmDisableAutoPM());
    pmKdumpDetectionEditor.setLabel(constants.hostPopupPmKdumpDetection());
    // SPM tab
    spmTab.setLabel(constants.spmTestButtonLabel());
    consoleTab.setLabel(constants.consoleButtonLabel());
    // Network Provider Tab
    networkProviderTab.setLabel(constants.networkProviderButtonLabel());
    externalDiscoveredHostsEditor.setLabel(constants.discoveredHostsLabel());
    externalHostGroupsEditor.setLabel(constants.hostGroupsLabel());
    externalComputeResourceEditor.setLabel(constants.computeResourceLabel());
    // Info icons
    kernelCmdlineUnsafeInterruptsInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineUnsafeInterruptsInfoIcon()));
    kernelCmdlineIommuInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineIommuInfoIcon()));
    kernelCmdlineKvmNestedInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineKvmNestedInfoIcon()));
    kernelCmdlinePciReallocInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlinePciReallocInfoIcon()));
    kernelCmdlineInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineInfoIcon()));
    hostedEngineTab.setLabel(constants.hostedEngineLabel());
    // Affinity Labels Tab
    affinityLabelsTab.setLabel(constants.affinityLabels());
}
#method_after
void localize() {
    // General tab
    generalTab.setLabel(constants.hostPopupGeneralTabLabel());
    clusterEditor.setLabel(constants.hostPopupClusterLabel());
    nameEditor.setLabel(constants.hostPopupNameLabel());
    userNameEditor.setLabel(constants.hostPopupUsernameLabel());
    commentEditor.setLabel(constants.commentLabel());
    labelEditor.setLabel(constants.affinityLabels());
    hostAddressEditor.setLabel(constants.hostPopupHostAddressLabel());
    authSshPortEditor.setLabel(constants.hostPopupPortLabel());
    authLabel.setText(constants.hostPopupAuthLabel());
    rootPasswordLabel.setText(constants.hostPopupAuthLabelForExternalHost());
    rbPasswordLabel.setText(constants.hostPopupPasswordLabel());
    rbPublicKeyLabel.setText(constants.hostPopupPublicKeyLabel());
    fingerprintLabel.setText(constants.hostPopupHostFingerprintLabel());
    overrideIpTablesEditor.setLabel(constants.hostPopupOverrideIpTablesLabel());
    externalHostProviderEnabledEditor.setLabel(constants.hostPopupEnableExternalHostProvider());
    externalHostNameEditor.setLabel(constants.hostPopupExternalHostName());
    publicKeyEditor.setTitle(constants.publicKeyUsage());
    // Power Management tab
    powerManagementTab.setLabel(constants.hostPopupPowerManagementTabLabel());
    pmEnabledEditor.setLabel(constants.hostPopupPmEnabledLabel());
    // Auto PM
    disableAutomaticPowerManagementEditor.setLabel(constants.hostPopupPmDisableAutoPM());
    pmKdumpDetectionEditor.setLabel(constants.hostPopupPmKdumpDetection());
    // SPM tab
    spmTab.setLabel(constants.spmTestButtonLabel());
    consoleTab.setLabel(constants.consoleButtonLabel());
    // Network Provider Tab
    networkProviderTab.setLabel(constants.networkProviderButtonLabel());
    externalDiscoveredHostsEditor.setLabel(constants.discoveredHostsLabel());
    externalHostGroupsEditor.setLabel(constants.hostGroupsLabel());
    externalComputeResourceEditor.setLabel(constants.computeResourceLabel());
    // Info icons
    kernelCmdlineUnsafeInterruptsInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineUnsafeInterruptsInfoIcon()));
    kernelCmdlineIommuInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineIommuInfoIcon()));
    kernelCmdlineKvmNestedInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineKvmNestedInfoIcon()));
    kernelCmdlinePciReallocInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlinePciReallocInfoIcon()));
    kernelCmdlineInfoIcon.setText(SafeHtmlUtils.fromString(constants.kernelCmdlineInfoIcon()));
    // Affinity Labels Tab
    affinityLabelsTab.setLabel(constants.affinityLabels());
}
#end_block

#method_before
@Override
public void edit(final HostModel object) {
    driver.edit(object);
    setTabIndexes(0);
    object.getFetchResult().getEntityChangedEvent().addListener((ev, sender, args) -> {
        String fetchResultText = object.getFetchResult().getEntity();
        if (ConstantsManager.getInstance().getConstants().errorLoadingFingerprint().equals(fetchResultText)) {
            fetchResult.addStyleName(style.fetchResultErrorLabel());
        } else {
            fetchResult.removeStyleName(style.fetchResultErrorLabel());
        }
        fetchResult.setText(fetchResultText);
    });
    object.getPkSection().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            setPkPasswordSectionVisiblity(false);
        }
    });
    object.getProviders().getSelectedItemChangedEvent().addListener((ev, sender, args) -> object.updateHosts());
    object.getExternalHostProviderEnabled().getEntityChangedEvent().addListener((ev, sender, args) -> {
        boolean showForemanProviders = object.getExternalHostProviderEnabled().getEntity();
        boolean doProvisioning = object.externalProvisionEnabled();
        providersEditor.setVisible(showForemanProviders);
        // showing or hiding radio buttons
        provisionedHostSection.setVisible(showForemanProviders && doProvisioning);
        discoveredHostSection.setVisible(showForemanProviders && doProvisioning);
        // disabling ip and name textbox when using provisioned hosts
        hostAddressEditor.setEnabled(!(showForemanProviders && doProvisioning));
        if (showForemanProviders && doProvisioning) {
            object.updateHosts();
            object.getIsDiscoveredHosts().setEntity(true);
        } else {
            if (doProvisioning) {
                object.cleanHostParametersFields();
            }
            hideProviderWidgets(object);
            object.getIsDiscoveredHosts().setEntity(null);
        }
    });
    object.getIsDiscoveredHosts().getEntityChangedEvent().addListener((ev, sender, args) -> {
        if (object.getIsDiscoveredHosts().getEntity() != null) {
            if (object.getIsDiscoveredHosts().getEntity()) {
                rbDiscoveredHost.asRadioButton().setValue(true);
                showDiscoveredHostsWidgets(true);
            } else if (!object.getIsDiscoveredHosts().getEntity()) {
                rbProvisionedHost.asRadioButton().setValue(true);
                showProvisionedHostsWidgets(true);
            }
        }
    });
    nameEditor.asValueBox().addKeyDownHandler(event -> Scheduler.get().scheduleDeferred(() -> {
        if (object.getExternalHostProviderEnabled().getEntity() && Boolean.TRUE.equals(object.getIsDiscoveredHosts().getEntity())) {
            ExternalHostGroup dhg = (ExternalHostGroup) object.getExternalHostGroups().getSelectedItem();
            if (dhg != null) {
                String base = nameEditor.asEditor().getSubEditor().getValue();
                if (base == null) {
                    base = constants.empty();
                }
                String generatedHostName = // $NON-NLS-1$
                base + "." + (dhg.getDomainName() != null ? dhg.getDomainName() : constants.empty());
                object.getHost().setEntity(generatedHostName);
            }
        }
    }));
    rbPassword.setValue(true);
    rbPassword.setFocus(true);
    displayPassPkWindow(true);
    fetchSshFingerprint.hideLabel();
    object.setAuthenticationMethod(AuthenticationMethod.Password);
    rbPassword.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.Password);
        displayPassPkWindow(true);
    });
    rbPublicKey.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.PublicKey);
        displayPassPkWindow(false);
    });
    updateHostsButton.setResource(resources.searchButtonImage());
    // Create SPM related controls.
    IEventListener<EventArgs> spmListener = (ev, sender, args) -> createSpmControls(object);
    object.getSpmPriority().getItemsChangedEvent().addListener(spmListener);
    object.getSpmPriority().getSelectedItemChangedEvent().addListener(spmListener);
    createSpmControls(object);
    initExternalHostProviderWidgets(object.showExternalProviderPanel());
    // TODO: remove setIsChangeable when configured ssh username is enabled
    userNameEditor.setEnabled(false);
    networkProviderTab.setVisible(object.showNetworkProviderTab());
    networkProviderWidget.edit(object.getNetworkProviderModel());
    this.fenceAgentsEditor.edit(object.getFenceAgentListModel());
    this.proxySourceEditor.edit(object.getPmProxyPreferencesList());
    addTextAndLinkAlert(fetchPanel, constants.fetchingHostFingerprint(), object.getSSHFingerPrint());
    providerSearchFilterLabel.setText(constants.hostPopupProviderSearchFilter());
    nameEditor.setFocus(true);
    hostedEngineTab.setVisible(object.getIsHeSystem() && object.getIsNew());
    object.getHostedEngineWarning().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        EntityModel entity = (EntityModel) sender;
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            hostedEngineWarningLabel.setVisible(entity.getIsAvailable());
        }
    });
    hostedEngineTab.setVisible(object.getIsHeSystem());
    affinityLabelsTab.setVisible(true);
}
#method_after
@Override
public void edit(final HostModel object) {
    driver.edit(object);
    setTabIndexes(0);
    object.getFetchResult().getEntityChangedEvent().addListener((ev, sender, args) -> {
        String fetchResultText = object.getFetchResult().getEntity();
        if (ConstantsManager.getInstance().getConstants().errorLoadingFingerprint().equals(fetchResultText)) {
            fetchResult.addStyleName(style.fetchResultErrorLabel());
        } else {
            fetchResult.removeStyleName(style.fetchResultErrorLabel());
        }
        fetchResult.setText(fetchResultText);
    });
    object.getPkSection().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            setPkPasswordSectionVisiblity(false);
        }
    });
    object.getProviders().getSelectedItemChangedEvent().addListener((ev, sender, args) -> object.updateHosts());
    object.getExternalHostProviderEnabled().getEntityChangedEvent().addListener((ev, sender, args) -> {
        boolean showForemanProviders = object.getExternalHostProviderEnabled().getEntity();
        boolean doProvisioning = object.externalProvisionEnabled();
        providersEditor.setVisible(showForemanProviders);
        // showing or hiding radio buttons
        provisionedHostSection.setVisible(showForemanProviders && doProvisioning);
        discoveredHostSection.setVisible(showForemanProviders && doProvisioning);
        // disabling ip and name textbox when using provisioned hosts
        hostAddressEditor.setEnabled(!(showForemanProviders && doProvisioning));
        if (showForemanProviders && doProvisioning) {
            object.updateHosts();
            object.getIsDiscoveredHosts().setEntity(true);
        } else {
            if (doProvisioning) {
                object.cleanHostParametersFields();
            }
            hideProviderWidgets(object);
            object.getIsDiscoveredHosts().setEntity(null);
        }
    });
    object.getIsDiscoveredHosts().getEntityChangedEvent().addListener((ev, sender, args) -> {
        if (object.getIsDiscoveredHosts().getEntity() != null) {
            if (object.getIsDiscoveredHosts().getEntity()) {
                rbDiscoveredHost.asRadioButton().setValue(true);
                showDiscoveredHostsWidgets(true);
            } else if (!object.getIsDiscoveredHosts().getEntity()) {
                rbProvisionedHost.asRadioButton().setValue(true);
                showProvisionedHostsWidgets(true);
            }
        }
    });
    nameEditor.asValueBox().addKeyDownHandler(event -> Scheduler.get().scheduleDeferred(() -> {
        if (object.getExternalHostProviderEnabled().getEntity() && Boolean.TRUE.equals(object.getIsDiscoveredHosts().getEntity())) {
            ExternalHostGroup dhg = (ExternalHostGroup) object.getExternalHostGroups().getSelectedItem();
            if (dhg != null) {
                String base = nameEditor.asEditor().getSubEditor().getValue();
                if (base == null) {
                    base = constants.empty();
                }
                String generatedHostName = // $NON-NLS-1$
                base + "." + (dhg.getDomainName() != null ? dhg.getDomainName() : constants.empty());
                object.getHost().setEntity(generatedHostName);
            }
        }
    }));
    rbPassword.setValue(true);
    rbPassword.setFocus(true);
    displayPassPkWindow(true);
    fetchSshFingerprint.hideLabel();
    object.setAuthenticationMethod(AuthenticationMethod.Password);
    rbPassword.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.Password);
        displayPassPkWindow(true);
    });
    rbPublicKey.addFocusHandler(event -> {
        object.setAuthenticationMethod(AuthenticationMethod.PublicKey);
        displayPassPkWindow(false);
    });
    updateHostsButton.setResource(resources.searchButtonImage());
    // Create SPM related controls.
    IEventListener<EventArgs> spmListener = (ev, sender, args) -> createSpmControls(object);
    object.getSpmPriority().getItemsChangedEvent().addListener(spmListener);
    object.getSpmPriority().getSelectedItemChangedEvent().addListener(spmListener);
    createSpmControls(object);
    initExternalHostProviderWidgets(object.showExternalProviderPanel());
    // TODO: remove setIsChangeable when configured ssh username is enabled
    userNameEditor.setEnabled(false);
    networkProviderTab.setVisible(object.showNetworkProviderTab());
    networkProviderWidget.edit(object.getNetworkProviderModel());
    this.fenceAgentsEditor.edit(object.getFenceAgentListModel());
    this.proxySourceEditor.edit(object.getPmProxyPreferencesList());
    addTextAndLinkAlert(fetchPanel, constants.fetchingHostFingerprint(), object.getSSHFingerPrint());
    providerSearchFilterLabel.setText(constants.hostPopupProviderSearchFilter());
    nameEditor.setFocus(true);
    hostedEngineTab.setVisible(object.getIsHeSystem() && object.getIsNew());
    object.getHostedEngineWarning().getPropertyChangedEvent().addListener((ev, sender, args) -> {
        EntityModel entity = (EntityModel) sender;
        if ("IsAvailable".equals(args.propertyName)) {
            // $NON-NLS-1$
            hostedEngineWarningLabel.setVisible(entity.getIsAvailable());
        }
    });
}
#end_block

#method_before
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    clusterEditor.setTabIndex(nextTabIndex++);
    externalHostProviderEnabledEditor.setTabIndex(nextTabIndex++);
    providersEditor.setTabIndex(nextTabIndex++);
    rbProvisionedHost.setTabIndex(nextTabIndex++);
    rbDiscoveredHost.setTabIndex(nextTabIndex++);
    externalDiscoveredHostsEditor.setTabIndex(nextTabIndex++);
    externalHostGroupsEditor.setTabIndex(nextTabIndex++);
    externalComputeResourceEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    hostAddressEditor.setTabIndex(nextTabIndex++);
    authSshPortEditor.setTabIndex(nextTabIndex++);
    userNameEditor.setTabIndex(nextTabIndex++);
    rbPassword.setTabIndex(nextTabIndex++);
    passwordEditor.setTabIndex(nextTabIndex++);
    return nextTabIndex;
}
#method_after
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    clusterEditor.setTabIndex(nextTabIndex++);
    externalHostProviderEnabledEditor.setTabIndex(nextTabIndex++);
    providersEditor.setTabIndex(nextTabIndex++);
    rbProvisionedHost.setTabIndex(nextTabIndex++);
    rbDiscoveredHost.setTabIndex(nextTabIndex++);
    externalDiscoveredHostsEditor.setTabIndex(nextTabIndex++);
    externalHostGroupsEditor.setTabIndex(nextTabIndex++);
    externalComputeResourceEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    hostAddressEditor.setTabIndex(nextTabIndex++);
    authSshPortEditor.setTabIndex(nextTabIndex++);
    userNameEditor.setTabIndex(nextTabIndex++);
    rbPassword.setTabIndex(nextTabIndex++);
    passwordEditor.setTabIndex(nextTabIndex++);
    // ==Power Management Tab==
    nextTabIndex = powerManagementTab.setTabIndexes(nextTabIndex);
    pmEnabledEditor.setTabIndex(nextTabIndex++);
    pmKdumpDetectionEditor.setTabIndex(nextTabIndex++);
    disableAutomaticPowerManagementEditor.setTabIndex(nextTabIndex++);
    fenceAgentsEditor.setTabIndexes(nextTabIndex++);
    pmExpander.setTabIndexes(nextTabIndex);
    proxySourceEditor.setTabIndexes(nextTabIndex++);
    // ==SPM Tab==
    nextTabIndex = spmTab.setTabIndexes(nextTabIndex);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    consoleAddressEnabled.setTabIndex(nextTabIndex++);
    consoleAddress.setTabIndex(nextTabIndex++);
    // ==Kernel Tab==
    nextTabIndex = kernelTab.setTabIndexes(nextTabIndex);
    kernelCmdlineIommu.setTabIndex(nextTabIndex++);
    kernelCmdlineKvmNested.setTabIndex(nextTabIndex++);
    kernelCmdlineUnsafeInterrupts.setTabIndex(nextTabIndex++);
    kernelCmdlinePciRealloc.setTabIndex(nextTabIndex++);
    kernelCmdlineText.setTabIndex(nextTabIndex++);
    // ==Hosted Engine Tab==
    nextTabIndex = hostedEngineTab.setTabIndexes(nextTabIndex);
    hostedEngineDeployActionsEditor.setTabIndex(nextTabIndex++);
    // ==Affinity Labels Tab==
    nextTabIndex = affinityLabelsTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#end_block

#method_before
private void saveNewVm(final UnitVmModel model) {
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress();
    VM vm = getcurrentVm();
    if (!StringHelper.isNullOrEmpty(model.getVmId().getEntity())) {
        vm.setId(new Guid(model.getVmId().getEntity()));
    }
    vm.setUseLatestVersion(model.getTemplateWithVersion().getSelectedItem().isLatest());
    AddVmParameters parameters = new AddVmParameters(vm);
    parameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    parameters.setBalloonEnabled(balloonEnabled(model));
    parameters.setCopyTemplatePermissions(model.getCopyPermissions().getEntity());
    parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
    parameters.setVmLargeIcon(IconUtils.filterPredefinedIcons(model.getIcon().getEntity().getIcon()));
    parameters.setAffinityLabels(model.getLabelList().getSelectedItems());
    setVmWatchdogToParams(model, parameters);
    setRngDeviceToParams(model, parameters);
    if (model.getIsHeadlessModeEnabled().getEntity()) {
        parameters.getVmStaticData().setDefaultDisplayType(DisplayType.none);
    }
    BuilderExecutor.build(model, parameters, new UnitToGraphicsDeviceParamsBuilder());
    if (!StringHelper.isNullOrEmpty(model.getVmId().getEntity())) {
        parameters.setVmId(new Guid(model.getVmId().getEntity()));
    }
    Frontend.getInstance().runAction(model.getProvisioning().getEntity() ? VdcActionType.AddVmFromTemplate : VdcActionType.AddVm, parameters, createUnitVmModelNetworkAsyncCallback(vm, model), this);
}
#method_after
private void saveNewVm(final UnitVmModel model) {
    if (model.getProgress() != null) {
        return;
    }
    model.startProgress();
    VM vm = getcurrentVm();
    if (!StringHelper.isNullOrEmpty(model.getVmId().getEntity())) {
        vm.setId(new Guid(model.getVmId().getEntity()));
    }
    vm.setUseLatestVersion(model.getTemplateWithVersion().getSelectedItem().isLatest());
    AddVmParameters parameters = new AddVmParameters(vm);
    parameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap());
    parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity());
    parameters.setBalloonEnabled(balloonEnabled(model));
    parameters.setCopyTemplatePermissions(model.getCopyPermissions().getEntity());
    parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity());
    parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity());
    parameters.setVmLargeIcon(IconUtils.filterPredefinedIcons(model.getIcon().getEntity().getIcon()));
    parameters.setAffinityLabels(model.getLabelList().getSelectedItems());
    setVmWatchdogToParams(model, parameters);
    setRngDeviceToParams(model, parameters);
    if (model.getIsHeadlessModeEnabled().getEntity()) {
        parameters.getVmStaticData().setDefaultDisplayType(DisplayType.none);
    }
    BuilderExecutor.build(model, parameters, new UnitToGraphicsDeviceParamsBuilder());
    if (!StringHelper.isNullOrEmpty(model.getVmId().getEntity())) {
        parameters.setVmId(new Guid(model.getVmId().getEntity()));
    }
    Frontend.getInstance().runAction(model.getProvisioning().getEntity() ? ActionType.AddVmFromTemplate : ActionType.AddVm, parameters, createUnitVmModelNetworkAsyncCallback(vm, model), this);
}
#end_block

#method_before
@Override
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> hostIds = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        hostIds.add(vds.getId());
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<>();
    ArrayList<Guid> tagsToDetach = new ArrayList<>();
    if (model.getItems() != null && model.getItems().size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<VdcActionParametersBase> prmsToAttach = new ArrayList<>();
    for (Guid tag_id : tagsToAttach) {
        prmsToAttach.add(new AttachEntityToTagParameters(tag_id, hostIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.AttachVdsToTag, prmsToAttach);
    ArrayList<VdcActionParametersBase> prmsToDetach = new ArrayList<>();
    for (Guid tag_id : tagsToDetach) {
        prmsToDetach.add(new AttachEntityToTagParameters(tag_id, hostIds));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.DetachVdsFromTag, prmsToDetach);
    cancel();
}
#method_after
@Override
public void postOnAssignTags(Map<Guid, Boolean> attachedTags) {
    TagListModel model = (TagListModel) getWindow();
    ArrayList<Guid> hostIds = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        hostIds.add(vds.getId());
    }
    // prepare attach/detach lists
    ArrayList<Guid> tagsToAttach = new ArrayList<>();
    ArrayList<Guid> tagsToDetach = new ArrayList<>();
    if (model.getItems() != null && model.getItems().size() > 0) {
        ArrayList<TagModel> tags = (ArrayList<TagModel>) model.getItems();
        TagModel rootTag = tags.get(0);
        TagModel.recursiveEditAttachDetachLists(rootTag, attachedTags, tagsToAttach, tagsToDetach);
    }
    ArrayList<ActionParametersBase> prmsToAttach = new ArrayList<>();
    for (Guid tag_id : tagsToAttach) {
        prmsToAttach.add(new AttachEntityToTagParameters(tag_id, hostIds));
    }
    Frontend.getInstance().runMultipleAction(ActionType.AttachVdsToTag, prmsToAttach);
    ArrayList<ActionParametersBase> prmsToDetach = new ArrayList<>();
    for (Guid tag_id : tagsToDetach) {
        prmsToDetach.add(new AttachEntityToTagParameters(tag_id, hostIds));
    }
    Frontend.getInstance().runMultipleAction(ActionType.DetachVdsFromTag, prmsToDetach);
    cancel();
}
#end_block

#method_before
public void onManualFence() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        FenceVdsManualyParameters parameters = new FenceVdsManualyParameters(true);
        parameters.setStoragePoolId(vds.getStoragePoolId());
        parameters.setVdsId(vds.getId());
        list.add(parameters);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.FenceVdsManualy, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
public void onManualFence() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    if (!model.validate()) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        FenceVdsManualyParameters parameters = new FenceVdsManualyParameters(true);
        parameters.setStoragePoolId(vds.getStoragePoolId());
        parameters.setVdsId(vds.getId());
        list.add(parameters);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.FenceVdsManualy, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
public void onSaveInternal(boolean approveInitiated) {
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VDS host = model.getIsNew() ? new VDS() : (VDS) Cloner.clone(getSelectedItem());
    // Save changes.
    host.setVdsName(model.getName().getEntity());
    host.setComment(model.getComment().getEntity());
    host.setHostName(model.getHost().getEntity().trim());
    host.setPort(Integer.parseInt(model.getPort().getEntity().toString()));
    host.setSshPort(Integer.parseInt(model.getAuthSshPort().getEntity().toString()));
    boolean sshUsernameSet = model.getUserName().getEntity() != null;
    host.setSshUsername(sshUsernameSet ? model.getUserName().getEntity() : null);
    boolean sshFpSet = model.getFetchSshFingerprint().getEntity() != null;
    host.setSshKeyFingerprint(!sshFpSet ? null : model.getFetchSshFingerprint().getEntity());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    boolean consoleAddressSet = model.getConsoleAddressEnabled().getEntity();
    host.setConsoleAddress(!consoleAddressSet ? null : model.getConsoleAddress().getEntity());
    Guid oldClusterId = host.getClusterId();
    Guid newClusterId = model.getCluster().getSelectedItem().getId();
    host.setClusterId(newClusterId);
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    host.setFenceProxySources(FenceProxySourceTypeHelper.parseFromString(model.getPmProxyPreferences()));
    // Save other PM parameters.
    host.setPmEnabled(model.getIsPm().getEntity());
    host.setDisablePowerManagementPolicy(model.getDisableAutomaticPowerManagement().getEntity());
    host.setPmKdumpDetection(model.getPmKdumpDetection().getEntity());
    host.setCurrentKernelCmdline(model.getKernelCmdline().getEntity());
    host.setKernelCmdlineParsable(model.isKernelCmdlineParsable());
    host.setKernelCmdlineIommu(model.getKernelCmdlineIommu().getEntity());
    host.setKernelCmdlineKvmNested(model.getKernelCmdlineKvmNested().getEntity());
    host.setKernelCmdlineUnsafeInterrupts(model.getKernelCmdlineUnsafeInterrupts().getEntity());
    host.setKernelCmdlinePciRealloc(model.getKernelCmdlinePciRealloc().getEntity());
    cancelConfirm();
    model.startProgress();
    if (model.getIsNew()) {
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setFenceAgents(model.getFenceAgentListModel().getFenceAgents());
        if (model.getUserPassword().getEntity() != null) {
            parameters.setPassword(model.getUserPassword().getEntity());
        }
        parameters.setOverrideFirewall(model.getOverrideIpTables().getEntity());
        parameters.setAuthMethod(model.getAuthenticationMethod());
        Provider<?> networkProvider = model.getNetworkProviders().getSelectedItem();
        if (networkProvider != null) {
            parameters.getVdsStaticData().setOpenstackNetworkProviderId(networkProvider.getId());
            parameters.setNetworkMappings(model.getInterfaceMappings().getEntity());
        }
        if (model.getProviders().getSelectedItem() != null) {
            parameters.getVdsStaticData().setHostProviderId(model.getProviders().getSelectedItem().getId());
        }
        if (Boolean.TRUE.equals(model.getIsDiscoveredHosts().getEntity())) {
            Provider<?> provider = model.getProviders().getSelectedItem();
            ExternalHostGroup hostGroup = (ExternalHostGroup) model.getExternalHostGroups().getSelectedItem();
            ExternalComputeResource computeResource = (ExternalComputeResource) model.getExternalComputeResource().getSelectedItem();
            ExternalDiscoveredHost discoveredHost = (ExternalDiscoveredHost) model.getExternalDiscoveredHosts().getSelectedItem();
            parameters.initVdsActionParametersForProvision(provider.getId(), hostGroup, computeResource, discoveredHost.getMac(), discoveredHost.getName(), discoveredHost.getIp());
        }
        parameters.setHostedEngineDeployConfiguration(new HostedEngineDeployConfiguration(model.getHostedEngineHostModel().getSelectedItem()));
        parameters.setAffinityLabels(model.getLabelList().getSelectedItems());
        Frontend.getInstance().runAction(VdcActionType.AddVds, parameters, result -> {
            Object[] array = (Object[]) result.getState();
            HostListModel<Void> localModel = (HostListModel<Void>) array[0];
            boolean localApproveInitiated = (Boolean) array[1];
            localModel.postOnSaveInternal(result.getReturnValue(), localApproveInitiated);
        }, new Object[] { this, approveInitiated });
    } else {
        // Update VDS -> consists of changing VDS cluster first and then updating rest of VDS properties:
        UpdateVdsActionParameters parameters = new UpdateVdsActionParameters();
        parameters.setvds(host);
        parameters.setVdsId(host.getId());
        // $NON-NLS-1$
        parameters.setPassword("");
        parameters.setInstallHost(false);
        parameters.setAuthMethod(model.getAuthenticationMethod());
        parameters.setFenceAgents(model.getFenceAgentListModel().getFenceAgents());
        parameters.setAffinityLabels(model.getLabelList().getSelectedItems());
        if (model.getExternalHostProviderEnabled().getEntity() && model.getProviders().getSelectedItem() != null) {
            host.setHostProviderId(model.getProviders().getSelectedItem().getId());
        }
        if (!oldClusterId.equals(newClusterId)) {
            Frontend.getInstance().runAction(VdcActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(newClusterId, host.getId()), result -> {
                Object[] array = (Object[]) result.getState();
                HostListModel<Void> localModel = (HostListModel<Void>) array[0];
                UpdateVdsActionParameters localParameters = (UpdateVdsActionParameters) array[1];
                boolean localApproveInitiated = (Boolean) array[2];
                VdcReturnValueBase localReturnValue = result.getReturnValue();
                if (localReturnValue != null && localReturnValue.getSucceeded()) {
                    localModel.postOnSaveInternalChangeCluster(localParameters, localApproveInitiated);
                } else {
                    localModel.getWindow().stopProgress();
                }
            }, new Object[] { this, parameters, approveInitiated });
        } else {
            postOnSaveInternalChangeCluster(parameters, approveInitiated);
        }
    }
}
#method_after
public void onSaveInternal(boolean approveInitiated) {
    HostModel model = (HostModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    VDS host = model.getIsNew() ? new VDS() : (VDS) Cloner.clone(getSelectedItem());
    // Save changes.
    host.setVdsName(model.getName().getEntity());
    host.setComment(model.getComment().getEntity());
    host.setHostName(model.getHost().getEntity().trim());
    host.setPort(Integer.parseInt(model.getPort().getEntity().toString()));
    host.setSshPort(Integer.parseInt(model.getAuthSshPort().getEntity().toString()));
    boolean sshUsernameSet = model.getUserName().getEntity() != null;
    host.setSshUsername(sshUsernameSet ? model.getUserName().getEntity() : null);
    boolean sshFpSet = model.getFetchSshFingerprint().getEntity() != null;
    host.setSshKeyFingerprint(!sshFpSet ? null : model.getFetchSshFingerprint().getEntity());
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    boolean consoleAddressSet = model.getConsoleAddressEnabled().getEntity();
    host.setConsoleAddress(!consoleAddressSet ? null : model.getConsoleAddress().getEntity());
    Guid oldClusterId = host.getClusterId();
    Guid newClusterId = model.getCluster().getSelectedItem().getId();
    host.setClusterId(newClusterId);
    host.setVdsSpmPriority(model.getSpmPriorityValue());
    host.setFenceProxySources(FenceProxySourceTypeHelper.parseFromString(model.getPmProxyPreferences()));
    // Save other PM parameters.
    host.setPmEnabled(model.getIsPm().getEntity());
    host.setDisablePowerManagementPolicy(model.getDisableAutomaticPowerManagement().getEntity());
    host.setPmKdumpDetection(model.getPmKdumpDetection().getEntity());
    host.setCurrentKernelCmdline(model.getKernelCmdline().getEntity());
    host.setKernelCmdlineParsable(model.isKernelCmdlineParsable());
    host.setKernelCmdlineIommu(model.getKernelCmdlineIommu().getEntity());
    host.setKernelCmdlineKvmNested(model.getKernelCmdlineKvmNested().getEntity());
    host.setKernelCmdlineUnsafeInterrupts(model.getKernelCmdlineUnsafeInterrupts().getEntity());
    host.setKernelCmdlinePciRealloc(model.getKernelCmdlinePciRealloc().getEntity());
    cancelConfirm();
    model.startProgress();
    if (model.getIsNew()) {
        AddVdsActionParameters parameters = new AddVdsActionParameters();
        parameters.setVdsId(host.getId());
        parameters.setvds(host);
        parameters.setFenceAgents(model.getFenceAgentListModel().getFenceAgents());
        if (model.getUserPassword().getEntity() != null) {
            parameters.setPassword(model.getUserPassword().getEntity());
        }
        parameters.setOverrideFirewall(model.getOverrideIpTables().getEntity());
        parameters.setAuthMethod(model.getAuthenticationMethod());
        Provider<?> networkProvider = model.getNetworkProviders().getSelectedItem();
        if (networkProvider != null) {
            parameters.getVdsStaticData().setOpenstackNetworkProviderId(networkProvider.getId());
            parameters.setNetworkMappings(model.getInterfaceMappings().getEntity());
        }
        if (model.getProviders().getSelectedItem() != null) {
            parameters.getVdsStaticData().setHostProviderId(model.getProviders().getSelectedItem().getId());
        }
        if (Boolean.TRUE.equals(model.getIsDiscoveredHosts().getEntity())) {
            Provider<?> provider = model.getProviders().getSelectedItem();
            ExternalHostGroup hostGroup = (ExternalHostGroup) model.getExternalHostGroups().getSelectedItem();
            ExternalComputeResource computeResource = (ExternalComputeResource) model.getExternalComputeResource().getSelectedItem();
            ExternalDiscoveredHost discoveredHost = (ExternalDiscoveredHost) model.getExternalDiscoveredHosts().getSelectedItem();
            parameters.initVdsActionParametersForProvision(provider.getId(), hostGroup, computeResource, discoveredHost.getMac(), discoveredHost.getName(), discoveredHost.getIp());
        }
        parameters.setHostedEngineDeployConfiguration(new HostedEngineDeployConfiguration(model.getHostedEngineHostModel().getSelectedItem()));
        parameters.setAffinityLabels(model.getLabelList().getSelectedItems());
        Frontend.getInstance().runAction(ActionType.AddVds, parameters, result -> {
            Object[] array = (Object[]) result.getState();
            HostListModel<Void> localModel = (HostListModel<Void>) array[0];
            boolean localApproveInitiated = (Boolean) array[1];
            localModel.postOnSaveInternal(result.getReturnValue(), localApproveInitiated);
        }, new Object[] { this, approveInitiated });
    } else {
        // Update VDS -> consists of changing VDS cluster first and then updating rest of VDS properties:
        UpdateVdsActionParameters parameters = new UpdateVdsActionParameters();
        parameters.setvds(host);
        parameters.setVdsId(host.getId());
        // $NON-NLS-1$
        parameters.setPassword("");
        parameters.setInstallHost(false);
        parameters.setAuthMethod(model.getAuthenticationMethod());
        parameters.setFenceAgents(model.getFenceAgentListModel().getFenceAgents());
        parameters.setAffinityLabels(model.getLabelList().getSelectedItems());
        if (model.getExternalHostProviderEnabled().getEntity() && model.getProviders().getSelectedItem() != null) {
            host.setHostProviderId(model.getProviders().getSelectedItem().getId());
        }
        if (!oldClusterId.equals(newClusterId)) {
            Frontend.getInstance().runAction(ActionType.ChangeVDSCluster, new ChangeVDSClusterParameters(newClusterId, host.getId()), result -> {
                Object[] array = (Object[]) result.getState();
                HostListModel<Void> localModel = (HostListModel<Void>) array[0];
                UpdateVdsActionParameters localParameters = (UpdateVdsActionParameters) array[1];
                boolean localApproveInitiated = (Boolean) array[2];
                VdcReturnValueBase localReturnValue = result.getReturnValue();
                if (localReturnValue != null && localReturnValue.getSucceeded()) {
                    localModel.postOnSaveInternalChangeCluster(localParameters, localApproveInitiated);
                } else {
                    localModel.getWindow().stopProgress();
                }
            }, new Object[] { this, parameters, approveInitiated });
        } else {
            postOnSaveInternalChangeCluster(parameters, approveInitiated);
        }
    }
}
#end_block

#method_before
public void postOnSaveInternalChangeCluster(UpdateVdsActionParameters parameters, boolean approveInitiated) {
    Frontend.getInstance().runAction(VdcActionType.UpdateVds, parameters, result -> {
        Object[] array = (Object[]) result.getState();
        HostListModel<Void> localModel = (HostListModel<Void>) array[0];
        boolean localApproveInitiated = (Boolean) array[1];
        localModel.postOnSaveInternal(result.getReturnValue(), localApproveInitiated);
    }, new Object[] { this, approveInitiated });
}
#method_after
public void postOnSaveInternalChangeCluster(UpdateVdsActionParameters parameters, boolean approveInitiated) {
    Frontend.getInstance().runAction(ActionType.UpdateVds, parameters, result -> {
        Object[] array = (Object[]) result.getState();
        HostListModel<Void> localModel = (HostListModel<Void>) array[0];
        boolean localApproveInitiated = (Boolean) array[1];
        localModel.postOnSaveInternal(result.getReturnValue(), localApproveInitiated);
    }, new Object[] { this, approveInitiated });
}
#end_block

#method_before
private void onApproveInternal() {
    HostModel model = (HostModel) getWindow();
    VDS vds = getSelectedItem();
    ApproveVdsParameters params = new ApproveVdsParameters(vds.getId());
    if (model.getUserPassword().getEntity() != null) {
        params.setPassword(model.getUserPassword().getEntity().toString());
    }
    params.setAuthMethod(model.getAuthenticationMethod());
    Frontend.getInstance().runMultipleAction(VdcActionType.ApproveVds, new ArrayList<>(Arrays.asList(new VdcActionParametersBase[] { params })), result -> {
    }, null);
}
#method_after
private void onApproveInternal() {
    HostModel model = (HostModel) getWindow();
    VDS vds = getSelectedItem();
    ApproveVdsParameters params = new ApproveVdsParameters(vds.getId());
    if (model.getUserPassword().getEntity() != null) {
        params.setPassword(model.getUserPassword().getEntity().toString());
    }
    params.setAuthMethod(model.getAuthenticationMethod());
    Frontend.getInstance().runMultipleAction(ActionType.ApproveVds, new ArrayList<>(Arrays.asList(new ActionParametersBase[] { params })), result -> {
    }, null);
}
#end_block

#method_before
public void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    boolean force = model.getForce().getEntity();
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new RemoveVdsParameters(vds.getId(), force));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVds, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#method_after
public void onRemove() {
    ConfirmationModel model = (ConfirmationModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    boolean force = model.getForce().getEntity();
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new RemoveVdsParameters(vds.getId(), force));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.RemoveVds, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancel();
    }, model);
}
#end_block

#method_before
public void activate() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    Collections.sort(getSelectedItems(), new HostSpmPriorityComparator());
    for (VDS vds : getSelectedItems()) {
        list.add(new VdsActionParameters(vds.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.ActivateVds, list, result -> {
    }, null);
}
#method_after
public void activate() {
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    Collections.sort(getSelectedItems(), new HostSpmPriorityComparator());
    for (VDS vds : getSelectedItems()) {
        list.add(new VdsActionParameters(vds.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.ActivateVds, list, result -> {
    }, null);
}
#end_block

#method_before
public void onMaintenance() {
    HostMaintenanceConfirmationModel model = (HostMaintenanceConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<Guid> vdss = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        vdss.add(vds.getId());
    }
    MaintenanceNumberOfVdssParameters params = new MaintenanceNumberOfVdssParameters(vdss, false, model.getReason().getEntity(), model.getStopGlusterServices().getEntity(), model.getForce().getEntity());
    model.startProgress();
    Frontend.getInstance().runAction(VdcActionType.MaintenanceNumberOfVdss, params, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        if (result.getReturnValue() != null && result.getReturnValue().getSucceeded()) {
            cancelConfirm();
        }
    }, model);
}
#method_after
public void onMaintenance() {
    HostMaintenanceConfirmationModel model = (HostMaintenanceConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<Guid> vdss = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        vdss.add(vds.getId());
    }
    MaintenanceNumberOfVdssParameters params = new MaintenanceNumberOfVdssParameters(vdss, false, model.getReason().getEntity(), model.getStopGlusterServices().getEntity(), model.getForce().getEntity());
    model.startProgress();
    Frontend.getInstance().runAction(ActionType.MaintenanceNumberOfVdss, params, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        if (result.getReturnValue() != null && result.getReturnValue().getSucceeded()) {
            cancelConfirm();
        }
    }, model);
}
#end_block

#method_before
public void onInstall() {
    final VDS host = getSelectedItem();
    InstallModel model = (InstallModel) getWindow();
    if (!model.validate(host.isOvirtVintageNode())) {
        model.setValidationFailed(new EntityModel<>(true));
        return;
    }
    final UpdateVdsActionParameters param = new UpdateVdsActionParameters();
    param.setvds(host);
    param.setVdsId(host.getId());
    param.setPassword(model.getUserPassword().getEntity());
    param.setReinstallOrUpgrade(true);
    param.setInstallHost(true);
    param.setoVirtIsoFile(null);
    param.setOverrideFirewall(model.getOverrideIpTables().getEntity());
    param.setActivateHost(model.getActivateHostAfterInstall().getEntity());
    param.setAuthMethod(model.getAuthenticationMethod());
    // Explicitly set null, to be clear we don't want to update fence agents.
    param.setFenceAgents(null);
    param.setHostedEngineDeployConfiguration(new HostedEngineDeployConfiguration(model.getHostedEngineHostModel().getSelectedItem()));
    Provider<?> networkProvider = (Provider<?>) model.getNetworkProviders().getSelectedItem();
    if (networkProvider != null) {
        param.getVdsStaticData().setOpenstackNetworkProviderId(networkProvider.getId());
        param.setNetworkMappings((String) model.getInterfaceMappings().getEntity());
    }
    AsyncDataProvider.getInstance().getClusterById(new AsyncQuery<>(returnValue -> Frontend.getInstance().runAction(VdcActionType.InstallVds, param, result -> {
        VdcReturnValueBase returnValue1 = result.getReturnValue();
        if (returnValue1 != null && returnValue1.getSucceeded()) {
            cancel();
        }
    })), host.getClusterId());
}
#method_after
public void onInstall() {
    final VDS host = getSelectedItem();
    InstallModel model = (InstallModel) getWindow();
    if (!model.validate(host.isOvirtVintageNode())) {
        model.setValidationFailed(new EntityModel<>(true));
        return;
    }
    final UpdateVdsActionParameters param = new UpdateVdsActionParameters();
    param.setvds(host);
    param.setVdsId(host.getId());
    param.setPassword(model.getUserPassword().getEntity());
    param.setReinstallOrUpgrade(true);
    param.setInstallHost(true);
    param.setoVirtIsoFile(null);
    param.setOverrideFirewall(model.getOverrideIpTables().getEntity());
    param.setActivateHost(model.getActivateHostAfterInstall().getEntity());
    param.setAuthMethod(model.getAuthenticationMethod());
    // Explicitly set null, to be clear we don't want to update fence agents.
    param.setFenceAgents(null);
    param.setHostedEngineDeployConfiguration(new HostedEngineDeployConfiguration(model.getHostedEngineHostModel().getSelectedItem()));
    Provider<?> networkProvider = (Provider<?>) model.getNetworkProviders().getSelectedItem();
    if (networkProvider != null) {
        param.getVdsStaticData().setOpenstackNetworkProviderId(networkProvider.getId());
        param.setNetworkMappings((String) model.getInterfaceMappings().getEntity());
    }
    AsyncDataProvider.getInstance().getClusterById(new AsyncQuery<>(returnValue -> Frontend.getInstance().runAction(ActionType.InstallVds, param, result -> {
        VdcReturnValueBase returnValue1 = result.getReturnValue();
        if (returnValue1 != null && returnValue1.getSucceeded()) {
            cancel();
        }
    })), host.getClusterId());
}
#end_block

#method_before
public void onSshStop() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        VdsPowerDownParameters param = new VdsPowerDownParameters(vds.getId());
        param.setFallbackToPowerManagement(false);
        param.setKeepPolicyPMEnabled(true);
        list.add(param);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.VdsPowerDown, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#method_after
public void onSshStop() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        VdsPowerDownParameters param = new VdsPowerDownParameters(vds.getId());
        param.setFallbackToPowerManagement(false);
        param.setKeepPolicyPMEnabled(true);
        list.add(param);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.VdsPowerDown, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#end_block

#method_before
public void onSshRestart() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        VdsActionParameters params = new VdsActionParameters(vds.getId());
        params.setPrevVdsStatus(vds.getStatus());
        list.add(params);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.SshHostReboot, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#method_after
public void onSshRestart() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        VdsActionParameters params = new VdsActionParameters(vds.getId());
        params.setPrevVdsStatus(vds.getStatus());
        list.add(params);
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.SshHostReboot, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#end_block

#method_before
public void onRestart() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new FenceVdsActionParameters(vds.getId()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.RestartVds, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#method_after
public void onRestart() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new FenceVdsActionParameters(vds.getId()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.RestartVds, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#end_block

#method_before
public void start() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new FenceVdsActionParameters(vds.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.StartVds, list, result -> {
    }, null);
}
#method_after
public void start() {
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new FenceVdsActionParameters(vds.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.StartVds, list, result -> {
    }, null);
}
#end_block

#method_before
public void onStop() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new FenceVdsActionParameters(vds.getId()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(VdcActionType.StopVds, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#method_after
public void onStop() {
    ConfirmationModel model = (ConfirmationModel) getConfirmWindow();
    if (model.getProgress() != null) {
        return;
    }
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new FenceVdsActionParameters(vds.getId()));
    }
    model.startProgress();
    Frontend.getInstance().runMultipleAction(ActionType.StopVds, list, result -> {
        ConfirmationModel localModel = (ConfirmationModel) result.getState();
        localModel.stopProgress();
        cancelConfirm();
    }, model);
}
#end_block

#method_before
private void refreshCapabilities() {
    ArrayList<VdcActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new VdsActionParameters(vds.getId()));
    }
    Frontend.getInstance().runMultipleAction(VdcActionType.RefreshHost, list, result -> {
    }, null);
}
#method_after
private void refreshCapabilities() {
    ArrayList<ActionParametersBase> list = new ArrayList<>();
    for (Object item : getSelectedItems()) {
        VDS vds = (VDS) item;
        list.add(new VdsActionParameters(vds.getId()));
    }
    Frontend.getInstance().runMultipleAction(ActionType.RefreshHost, list, result -> {
    }, null);
}
#end_block

#method_before
private void enrollCertificate() {
    final VDS host = getSelectedItem();
    Frontend.getInstance().runAction(VdcActionType.HostEnrollCertificate, new VdsActionParameters(host.getId()));
}
#method_after
private void enrollCertificate() {
    final VDS host = getSelectedItem();
    Frontend.getInstance().runAction(ActionType.HostEnrollCertificate, new VdsActionParameters(host.getId()));
}
#end_block

#method_before
private void setGlobalHaMaintenance(boolean enabled) {
    VDS vds = getSelectedItem();
    if (vds == null || !vds.getHighlyAvailableIsConfigured()) {
        return;
    }
    SetHaMaintenanceParameters params = new SetHaMaintenanceParameters(vds.getId(), HaMaintenanceMode.GLOBAL, enabled);
    Frontend.getInstance().runAction(VdcActionType.SetHaMaintenance, params);
}
#method_after
private void setGlobalHaMaintenance(boolean enabled) {
    VDS vds = getSelectedItem();
    if (vds == null || !vds.getHighlyAvailableIsConfigured()) {
        return;
    }
    SetHaMaintenanceParameters params = new SetHaMaintenanceParameters(vds.getId(), HaMaintenanceMode.GLOBAL, enabled);
    Frontend.getInstance().runAction(ActionType.SetHaMaintenance, params);
}
#end_block

#method_before
private void updateActionAvailability() {
    List<VDS> items = getSelectedItems() != null ? getSelectedItems() : new ArrayList<VDS>();
    boolean isAllPMEnabled = items.stream().allMatch(VDS::isPmEnabled);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.UpdateVds));
    getEditWithPMemphasisCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.UpdateVds));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.RemoveVds));
    getActivateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.ActivateVds));
    // or special case where its installation failed but its oVirt node
    boolean approveAvailability = items.size() == 1 && (VdcActionUtils.canExecute(items, VDS.class, VdcActionType.ApproveVds) || (items.get(0).getStatus() == VDSStatus.InstallFailed && items.get(0).isOvirtVintageNode()));
    getApproveCommand().setIsExecutionAllowed(approveAvailability);
    boolean installAvailability = false;
    if (singleHostSelected(items)) {
        VDS host = items.get(0);
        installAvailability = host.getStatus() == VDSStatus.InstallFailed || host.getStatus() == VDSStatus.Maintenance;
    }
    getInstallCommand().setIsExecutionAllowed(installAvailability);
    boolean checkForUpgradeAvailability = false;
    if (singleHostSelected(items)) {
        VDS host = items.get(0);
        checkForUpgradeAvailability = canCheckForHostUpgrade(host);
    }
    getCheckForUpgradeCommand().setIsExecutionAllowed(checkForUpgradeAvailability);
    boolean upgradeAvailability = false;
    if (singleHostSelected(items)) {
        VDS host = items.get(0);
        upgradeAvailability = canUpgradeHost(host);
    }
    getUpgradeCommand().setIsExecutionAllowed(upgradeAvailability);
    getEnrollCertificateCommand().setIsExecutionAllowed(installAvailability);
    getMaintenanceCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.MaintenanceVds));
    getSshRestartCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.SshHostReboot));
    getSshStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.VdsPowerDown));
    getRestartCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.RestartVds) && isAllPMEnabled);
    getStartCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.StartVds) && isAllPMEnabled);
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.StopVds) && isAllPMEnabled);
    setIsPowerManagementEnabled(getRestartCommand().getIsExecutionAllowed() || getStartCommand().getIsExecutionAllowed() || getStopCommand().getIsExecutionAllowed());
    getManualFenceCommand().setIsExecutionAllowed(items.size() == 1);
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getSelectAsSpmCommand().setIsExecutionAllowed(isSelectAsSpmCommandAllowed(items));
    updateConfigureLocalStorageCommandAvailability();
    getRefreshCapabilitiesCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.canExecute(items, VDS.class, VdcActionType.RefreshHostCapabilities));
    boolean numaVisible = false;
    if (getSelectedItem() != null) {
        numaVisible = getSelectedItem().isNumaSupport();
    }
    getNumaSupportCommand().setIsVisible(numaVisible);
    updateHaMaintenanceAvailability();
}
#method_after
private void updateActionAvailability() {
    List<VDS> items = getSelectedItems() != null ? getSelectedItems() : new ArrayList<VDS>();
    boolean isAllPMEnabled = items.stream().allMatch(VDS::isPmEnabled);
    getEditCommand().setIsExecutionAllowed(items.size() == 1 && ActionUtils.canExecute(items, VDS.class, ActionType.UpdateVds));
    getEditWithPMemphasisCommand().setIsExecutionAllowed(items.size() == 1 && ActionUtils.canExecute(items, VDS.class, ActionType.UpdateVds));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.RemoveVds));
    getActivateCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.ActivateVds));
    // or special case where its installation failed but its oVirt node
    boolean approveAvailability = items.size() == 1 && (ActionUtils.canExecute(items, VDS.class, ActionType.ApproveVds) || (items.get(0).getStatus() == VDSStatus.InstallFailed && items.get(0).isOvirtVintageNode()));
    getApproveCommand().setIsExecutionAllowed(approveAvailability);
    boolean installAvailability = false;
    if (singleHostSelected(items)) {
        VDS host = items.get(0);
        installAvailability = host.getStatus() == VDSStatus.InstallFailed || host.getStatus() == VDSStatus.Maintenance;
    }
    getInstallCommand().setIsExecutionAllowed(installAvailability);
    boolean webConsoleAvailability = singleHostSelected(items);
    getHostConsoleCommand().setIsExecutionAllowed(webConsoleAvailability);
    boolean checkForUpgradeAvailability = false;
    if (singleHostSelected(items)) {
        VDS host = items.get(0);
        checkForUpgradeAvailability = canCheckForHostUpgrade(host);
    }
    getCheckForUpgradeCommand().setIsExecutionAllowed(checkForUpgradeAvailability);
    boolean upgradeAvailability = false;
    if (singleHostSelected(items)) {
        VDS host = items.get(0);
        upgradeAvailability = canUpgradeHost(host);
    }
    getUpgradeCommand().setIsExecutionAllowed(upgradeAvailability);
    getEnrollCertificateCommand().setIsExecutionAllowed(installAvailability);
    getMaintenanceCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.MaintenanceVds));
    getSshRestartCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.SshHostReboot));
    getSshStopCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.VdsPowerDown));
    getRestartCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.RestartVds) && isAllPMEnabled);
    getStartCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.StartVds) && isAllPMEnabled);
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.StopVds) && isAllPMEnabled);
    setIsPowerManagementEnabled(getRestartCommand().getIsExecutionAllowed() || getStartCommand().getIsExecutionAllowed() || getStopCommand().getIsExecutionAllowed());
    getManualFenceCommand().setIsExecutionAllowed(items.size() == 1);
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getSelectAsSpmCommand().setIsExecutionAllowed(isSelectAsSpmCommandAllowed(items));
    updateConfigureLocalStorageCommandAvailability();
    getRefreshCapabilitiesCommand().setIsExecutionAllowed(items.size() > 0 && ActionUtils.canExecute(items, VDS.class, ActionType.RefreshHostCapabilities));
    boolean numaVisible = false;
    if (getSelectedItem() != null) {
        numaVisible = getSelectedItem().isNumaSupport();
    }
    getNumaSupportCommand().setIsVisible(numaVisible);
    updateHaMaintenanceAvailability();
}
#end_block

#method_before
private boolean canCheckForHostUpgrade(VDS host) {
    return VdcActionUtils.canExecute(Arrays.asList(host), VDS.class, VdcActionType.HostUpgradeCheck);
}
#method_after
private boolean canCheckForHostUpgrade(VDS host) {
    return ActionUtils.canExecute(Arrays.asList(host), VDS.class, ActionType.HostUpgradeCheck);
}
#end_block

#method_before
private boolean canUpgradeHost(VDS host) {
    return host.isUpdateAvailable() && VdcActionUtils.canExecute(Arrays.asList(host), VDS.class, VdcActionType.UpgradeHost);
}
#method_after
private boolean canUpgradeHost(VDS host) {
    return host.isUpdateAvailable() && ActionUtils.canExecute(Arrays.asList(host), VDS.class, ActionType.UpgradeHost);
}
#end_block

#method_before
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getNewCommand()) {
        newEntity();
    } else if (command == getEditCommand()) {
        edit(false);
    } else if (command == getEditWithPMemphasisCommand()) {
        edit(true);
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getSelectAsSpmCommand()) {
        selectAsSPM();
    } else if (command == getActivateCommand()) {
        activate();
    } else if (command == getMaintenanceCommand()) {
        maintenance();
    } else if (command == getApproveCommand()) {
        approve();
    } else if (command == getInstallCommand()) {
        install();
    } else if (command == getCheckForUpgradeCommand()) {
        checkForUpgrade();
    } else if (command == getUpgradeCommand()) {
        upgrade();
    } else if (command == getSshRestartCommand()) {
        sshRestart();
    } else if (command == getSshStopCommand()) {
        sshStop();
    } else if (command == getRestartCommand()) {
        restart();
    } else if (command == getStartCommand()) {
        start();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getManualFenceCommand()) {
        manualFence();
    } else if (command == getAssignTagsCommand()) {
        assignTags();
    } else if (command == getConfigureLocalStorageCommand()) {
        configureLocalStorage();
    } else if (command == getRefreshCapabilitiesCommand()) {
        refreshCapabilities();
    } else if (command == getEnrollCertificateCommand()) {
        enrollCertificate();
    } else if (command == getNumaSupportCommand()) {
        numaSupport();
    } else if (command == getEnableGlobalHaMaintenanceCommand()) {
        setGlobalHaMaintenance(true);
    } else if (command == getDisableGlobalHaMaintenanceCommand()) {
        setGlobalHaMaintenance(false);
    } else if ("OnAssignTags".equals(command.getName())) {
        // $NON-NLS-1$
        onAssignTags();
    } else if ("OnManualFence".equals(command.getName())) {
        // $NON-NLS-1$
        onManualFence();
    } else if ("OnSaveFalse".equals(command.getName())) {
        // $NON-NLS-1$
        onSaveFalse();
    } else if ("OnSaveInternalFromApprove".equals(command.getName())) {
        // $NON-NLS-1$
        onSaveInternalFromApprove();
    } else if ("OnSaveInternalNotFromApprove".equals(command.getName())) {
        // $NON-NLS-1$
        onSaveInternalNotFromApprove();
    } else if ("Cancel".equals(command.getName())) {
        // $NON-NLS-1$
        cancel();
    } else if ("CancelConfirm".equals(command.getName())) {
        // $NON-NLS-1$
        cancelConfirm();
    } else if ("CancelConfirmFocusPM".equals(command.getName())) {
        // $NON-NLS-1$
        cancelConfirmFocusPM();
    } else if ("OnRemove".equals(command.getName())) {
        // $NON-NLS-1$
        onRemove();
    } else if ("OnMaintenance".equals(command.getName())) {
        // $NON-NLS-1$
        onMaintenance();
    } else if ("OnApprove".equals(command.getName())) {
        // $NON-NLS-1$
        onApprove();
    } else if ("OnInstall".equals(command.getName())) {
        // $NON-NLS-1$
        onInstall();
    } else if ("OnSshRestart".equals(command.getName())) {
        // $NON-NLS-1$
        onSshRestart();
    } else if ("OnSshStop".equals(command.getName())) {
        // $NON-NLS-1$
        onSshStop();
    } else if ("OnRestart".equals(command.getName())) {
        // $NON-NLS-1$
        onRestart();
    } else if ("OnStop".equals(command.getName())) {
        // $NON-NLS-1$
        onStop();
    } else if ("OnConfigureLocalStorage".equals(command.getName())) {
        // $NON-NLS-1$
        onConfigureLocalStorage();
    } else if (NumaSupportModel.SUBMIT_NUMA_SUPPORT.equals(command.getName())) {
        onNumaSupport();
    }
}
#method_after
@Override
public void executeCommand(UICommand command) {
    super.executeCommand(command);
    if (command == getNewCommand()) {
        newEntity();
    } else if (command == getEditCommand()) {
        edit(false);
    } else if (command == getEditWithPMemphasisCommand()) {
        edit(true);
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getSelectAsSpmCommand()) {
        selectAsSPM();
    } else if (command == getActivateCommand()) {
        activate();
    } else if (command == getMaintenanceCommand()) {
        maintenance();
    } else if (command == getApproveCommand()) {
        approve();
    } else if (command == getInstallCommand()) {
        install();
    } else if (command == getCheckForUpgradeCommand()) {
        checkForUpgrade();
    } else if (command == getUpgradeCommand()) {
        upgrade();
    } else if (command == getSshRestartCommand()) {
        sshRestart();
    } else if (command == getSshStopCommand()) {
        sshStop();
    } else if (command == getRestartCommand()) {
        restart();
    } else if (command == getStartCommand()) {
        start();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getManualFenceCommand()) {
        manualFence();
    } else if (command == getAssignTagsCommand()) {
        assignTags();
    } else if (command == getConfigureLocalStorageCommand()) {
        configureLocalStorage();
    } else if (command == getRefreshCapabilitiesCommand()) {
        refreshCapabilities();
    } else if (command == getEnrollCertificateCommand()) {
        enrollCertificate();
    } else if (command == getNumaSupportCommand()) {
        numaSupport();
    } else if (command == getEnableGlobalHaMaintenanceCommand()) {
        setGlobalHaMaintenance(true);
    } else if (command == getDisableGlobalHaMaintenanceCommand()) {
        setGlobalHaMaintenance(false);
    } else if (command == getHostConsoleCommand()) {
        onHostConsole();
    } else if ("OnAssignTags".equals(command.getName())) {
        // $NON-NLS-1$
        onAssignTags();
    } else if ("OnManualFence".equals(command.getName())) {
        // $NON-NLS-1$
        onManualFence();
    } else if ("OnSaveFalse".equals(command.getName())) {
        // $NON-NLS-1$
        onSaveFalse();
    } else if ("OnSaveInternalFromApprove".equals(command.getName())) {
        // $NON-NLS-1$
        onSaveInternalFromApprove();
    } else if ("OnSaveInternalNotFromApprove".equals(command.getName())) {
        // $NON-NLS-1$
        onSaveInternalNotFromApprove();
    } else if ("Cancel".equals(command.getName())) {
        // $NON-NLS-1$
        cancel();
    } else if ("CancelConfirm".equals(command.getName())) {
        // $NON-NLS-1$
        cancelConfirm();
    } else if ("CancelConfirmFocusPM".equals(command.getName())) {
        // $NON-NLS-1$
        cancelConfirmFocusPM();
    } else if ("OnRemove".equals(command.getName())) {
        // $NON-NLS-1$
        onRemove();
    } else if ("OnMaintenance".equals(command.getName())) {
        // $NON-NLS-1$
        onMaintenance();
    } else if ("OnApprove".equals(command.getName())) {
        // $NON-NLS-1$
        onApprove();
    } else if ("OnInstall".equals(command.getName())) {
        // $NON-NLS-1$
        onInstall();
    } else if ("OnSshRestart".equals(command.getName())) {
        // $NON-NLS-1$
        onSshRestart();
    } else if ("OnSshStop".equals(command.getName())) {
        // $NON-NLS-1$
        onSshStop();
    } else if ("OnRestart".equals(command.getName())) {
        // $NON-NLS-1$
        onRestart();
    } else if ("OnStop".equals(command.getName())) {
        // $NON-NLS-1$
        onStop();
    } else if ("OnConfigureLocalStorage".equals(command.getName())) {
        // $NON-NLS-1$
        onConfigureLocalStorage();
    } else if (NumaSupportModel.SUBMIT_NUMA_SUPPORT.equals(command.getName())) {
        onNumaSupport();
    }
}
#end_block

#method_before
private void onNumaSupport() {
    if (getWindow() == null) {
        return;
    }
    NumaSupportModel model = (NumaSupportModel) getWindow();
    ArrayList<VdcActionParametersBase> updateParamsList = model.getUpdateParameters();
    if (!updateParamsList.isEmpty()) {
        Frontend.getInstance().runMultipleAction(VdcActionType.UpdateVmNumaNodes, updateParamsList);
    }
    setWindow(null);
}
#method_after
private void onNumaSupport() {
    if (getWindow() == null) {
        return;
    }
    NumaSupportModel model = (NumaSupportModel) getWindow();
    ArrayList<ActionParametersBase> updateParamsList = model.getUpdateParameters();
    if (!updateParamsList.isEmpty()) {
        Frontend.getInstance().runMultipleAction(ActionType.UpdateVmNumaNodes, updateParamsList);
    }
    setWindow(null);
}
#end_block

#method_before
private void selectAsSPM() {
    ForceSelectSPMParameters params = new ForceSelectSPMParameters(getSelectedItem().getId());
    Frontend.getInstance().runAction(VdcActionType.ForceSelectSPM, params);
}
#method_after
private void selectAsSPM() {
    ForceSelectSPMParameters params = new ForceSelectSPMParameters(getSelectedItem().getId());
    Frontend.getInstance().runAction(ActionType.ForceSelectSPM, params);
}
#end_block

#method_before
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    baseTemplateEditor.setTabIndex(nextTabIndex++);
    instanceTypesEditor.setTabIndexes(nextTabIndex++);
    templateWithVersionEditor.setTabIndexes(nextTabIndex++);
    quotaEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    templateVersionNameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    vmIdEditor.setTabIndex(nextTabIndex++);
    labelEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    copyTemplatePermissionsEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    increaseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    maxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    editMaxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    // ==System Tab==
    nextTabIndex = systemTab.setTabIndexes(nextTabIndex);
    memSizeEditor.setTabIndex(nextTabIndex++);
    maxMemorySizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = vcpusAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    threadsPerCoreEditor.setTabIndex(nextTabIndex++);
    emulatedMachine.setTabIndex(nextTabIndex++);
    customCpu.setTabIndex(nextTabIndex++);
    nextTabIndex = serialNumberPolicyEditor.setTabIndexes(nextTabIndex);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    poolStatefulEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    isHeadlessModeEnabledEditor.setTabIndex(nextTabIndex++);
    displayTypeEditor.setTabIndex(nextTabIndex++);
    graphicsTypeEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    consoleDisconnectActionEditor.setTabIndexes(nextTabIndex++);
    isSingleQxlEnabledEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    ssoMethodNone.setTabIndex(nextTabIndex++);
    ssoMethodGuestAgent.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    isSoundcardEnabledEditor.setTabIndex(nextTabIndex++);
    isConsoleDeviceEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyOverrideEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyEditor.setTabIndex(nextTabIndex++);
    spiceFileTransferEnabledEditor.setTabIndex(nextTabIndex++);
    spiceCopyPasteEnabledEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    overrideMigrationPolicyEditor.setTabIndex(nextTabIndex++);
    migrationPolicyEditor.setTabIndex(nextTabIndex++);
    overrideMigrationDowntimeEditor.setTabIndex(nextTabIndex++);
    migrationDowntimeEditor.setTabIndex(nextTabIndex++);
    autoConvergeEditor.setTabIndex(nextTabIndex++);
    migrateCompressedEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    customCompatibilityVersionEditor.setTabIndex(nextTabIndex++);
    numaNodeCount.setTabIndex(nextTabIndex++);
    numaTuneMode.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    watchdogModelEditor.setTabIndex(nextTabIndex++);
    watchdogActionEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    cpuProfilesEditor.setTabIndex(nextTabIndex++);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    numOfIoThreadsEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    cpuSharesAmountEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    bootMenuEnabledEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Rng Tab==
    nextTabIndex = rngDeviceTab.setTabIndexes(nextTabIndex);
    isRngEnabledEditor.setTabIndex(nextTabIndex++);
    rngPeriodEditor.setTabIndex(nextTabIndex++);
    rngBytesEditor.setTabIndex(nextTabIndex++);
    rngSourceUrandom.setTabIndex(nextTabIndex++);
    rngSourceHwrng.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    // ==Icon Tab==
    nextTabIndex = iconTab.setTabIndexes(nextTabIndex);
    iconEditorWidget.setTabIndex(nextTabIndex++);
    // ==Foreman Tab==
    nextTabIndex = foremanTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#method_after
@Override
public int setTabIndexes(int nextTabIndex) {
    // ==General Tab==
    nextTabIndex = generalTab.setTabIndexes(nextTabIndex);
    oSTypeEditor.setTabIndex(nextTabIndex++);
    baseTemplateEditor.setTabIndex(nextTabIndex++);
    instanceTypesEditor.setTabIndexes(nextTabIndex++);
    templateWithVersionEditor.setTabIndexes(nextTabIndex++);
    quotaEditor.setTabIndex(nextTabIndex++);
    nameEditor.setTabIndex(nextTabIndex++);
    templateVersionNameEditor.setTabIndex(nextTabIndex++);
    descriptionEditor.setTabIndex(nextTabIndex++);
    commentEditor.setTabIndex(nextTabIndex++);
    vmIdEditor.setTabIndex(nextTabIndex++);
    labelEditor.setTabIndex(nextTabIndex++);
    isStatelessEditor.setTabIndex(nextTabIndex++);
    isRunAndPauseEditor.setTabIndex(nextTabIndex++);
    isDeleteProtectedEditor.setTabIndex(nextTabIndex++);
    copyTemplatePermissionsEditor.setTabIndex(nextTabIndex++);
    numOfVmsEditor.setTabIndex(nextTabIndex++);
    prestartedVmsEditor.setTabIndex(nextTabIndex++);
    editPrestartedVmsEditor.setTabIndex(nextTabIndex++);
    increaseNumOfVmsEditor.setTabIndex(nextTabIndex++);
    maxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    editMaxAssignedVmsPerUserEditor.setTabIndex(nextTabIndex++);
    // ==System Tab==
    nextTabIndex = systemTab.setTabIndexes(nextTabIndex);
    memSizeEditor.setTabIndex(nextTabIndex++);
    maxMemorySizeEditor.setTabIndex(nextTabIndex++);
    totalvCPUsEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = vcpusAdvancedParameterExpander.setTabIndexes(nextTabIndex);
    numOfSocketsEditor.setTabIndex(nextTabIndex++);
    corePerSocketEditor.setTabIndex(nextTabIndex++);
    threadsPerCoreEditor.setTabIndex(nextTabIndex++);
    emulatedMachine.setTabIndex(nextTabIndex++);
    customCpu.setTabIndex(nextTabIndex++);
    nextTabIndex = serialNumberPolicyEditor.setTabIndexes(nextTabIndex);
    // == Pools ==
    nextTabIndex = poolTab.setTabIndexes(nextTabIndex);
    poolTypeEditor.setTabIndex(nextTabIndex++);
    poolStatefulEditor.setTabIndex(nextTabIndex++);
    // ==Initial run Tab==
    nextTabIndex = initialRunTab.setTabIndexes(nextTabIndex);
    timeZoneEditor.setTabIndex(nextTabIndex++);
    // ==Console Tab==
    nextTabIndex = consoleTab.setTabIndexes(nextTabIndex);
    isHeadlessModeEnabledEditor.setTabIndex(nextTabIndex++);
    displayTypeEditor.setTabIndex(nextTabIndex++);
    graphicsTypeEditor.setTabIndex(nextTabIndex++);
    vncKeyboardLayoutEditor.setTabIndex(nextTabIndex++);
    usbSupportEditor.setTabIndex(nextTabIndex++);
    consoleDisconnectActionEditor.setTabIndexes(nextTabIndex++);
    isSingleQxlEnabledEditor.setTabIndex(nextTabIndex++);
    numOfMonitorsEditor.setTabIndex(nextTabIndex++);
    isSmartcardEnabledEditor.setTabIndex(nextTabIndex++);
    ssoMethodNone.setTabIndex(nextTabIndex++);
    ssoMethodGuestAgent.setTabIndex(nextTabIndex++);
    nextTabIndex = expander.setTabIndexes(nextTabIndex);
    allowConsoleReconnectEditor.setTabIndex(nextTabIndex++);
    isSoundcardEnabledEditor.setTabIndex(nextTabIndex++);
    isConsoleDeviceEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyOverrideEnabledEditor.setTabIndex(nextTabIndex++);
    spiceProxyEditor.setTabIndex(nextTabIndex++);
    spiceFileTransferEnabledEditor.setTabIndex(nextTabIndex++);
    spiceCopyPasteEnabledEditor.setTabIndex(nextTabIndex++);
    // ==Host Tab==
    nextTabIndex = hostTab.setTabIndexes(nextTabIndex);
    isAutoAssignEditor.setTabIndex(nextTabIndex++);
    specificHost.setTabIndex(nextTabIndex++);
    defaultHostEditor.setTabIndex(nextTabIndex++);
    migrationModeEditor.setTabIndex(nextTabIndex++);
    overrideMigrationPolicyEditor.setTabIndex(nextTabIndex++);
    migrationPolicyEditor.setTabIndex(nextTabIndex++);
    overrideMigrationDowntimeEditor.setTabIndex(nextTabIndex++);
    migrationDowntimeEditor.setTabIndex(nextTabIndex++);
    autoConvergeEditor.setTabIndex(nextTabIndex++);
    migrateCompressedEditor.setTabIndex(nextTabIndex++);
    hostCpuEditor.setTabIndex(nextTabIndex++);
    customCompatibilityVersionEditor.setTabIndex(nextTabIndex++);
    numaNodeCount.setTabIndex(nextTabIndex++);
    numaTuneMode.setTabIndex(nextTabIndex++);
    // ==High Availability Tab==
    nextTabIndex = highAvailabilityTab.setTabIndexes(nextTabIndex);
    isHighlyAvailableEditor.setTabIndex(nextTabIndex++);
    priorityEditor.setTabIndex(nextTabIndex++);
    watchdogModelEditor.setTabIndex(nextTabIndex++);
    watchdogActionEditor.setTabIndex(nextTabIndex++);
    // ==Resource Allocation Tab==
    nextTabIndex = resourceAllocationTab.setTabIndexes(nextTabIndex);
    cpuProfilesEditor.setTabIndex(nextTabIndex++);
    minAllocatedMemoryEditor.setTabIndex(nextTabIndex++);
    numOfIoThreadsEditor.setTabIndex(nextTabIndex++);
    provisioningThinEditor.setTabIndex(nextTabIndex++);
    provisioningCloneEditor.setTabIndex(nextTabIndex++);
    cpuPinning.setTabIndex(nextTabIndex++);
    cpuSharesAmountEditor.setTabIndex(nextTabIndex++);
    nextTabIndex = disksAllocationView.setTabIndexes(nextTabIndex);
    // ==Boot Options Tab==
    nextTabIndex = bootOptionsTab.setTabIndexes(nextTabIndex);
    firstBootDeviceEditor.setTabIndex(nextTabIndex++);
    secondBootDeviceEditor.setTabIndex(nextTabIndex++);
    cdAttachedEditor.setTabIndex(nextTabIndex++);
    cdImageEditor.setTabIndex(nextTabIndex++);
    bootMenuEnabledEditor.setTabIndex(nextTabIndex++);
    kernel_pathEditor.setTabIndex(nextTabIndex++);
    initrd_pathEditor.setTabIndex(nextTabIndex++);
    kernel_parametersEditor.setTabIndex(nextTabIndex++);
    // ==Rng Tab==
    nextTabIndex = rngDeviceTab.setTabIndexes(nextTabIndex);
    isRngEnabledEditor.setTabIndex(nextTabIndex++);
    rngPeriodEditor.setTabIndex(nextTabIndex++);
    rngBytesEditor.setTabIndex(nextTabIndex++);
    rngSourceUrandom.setTabIndex(nextTabIndex++);
    rngSourceHwrng.setTabIndex(nextTabIndex++);
    // ==Custom Properties Tab==
    nextTabIndex = customPropertiesTab.setTabIndexes(nextTabIndex);
    // ==Icon Tab==
    nextTabIndex = iconTab.setTabIndexes(nextTabIndex);
    iconEditorWidget.setTabIndex(nextTabIndex++);
    // ==Foreman Tab==
    nextTabIndex = foremanTab.setTabIndexes(nextTabIndex);
    // ==Affinity Labels Tab==
    nextTabIndex = affinityLabelsTab.setTabIndexes(nextTabIndex);
    return nextTabIndex;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, getCompensationContext());
    VdcReturnValueBase vdcReturnValue = runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), ExecutionHandler.createInternalJobContext(getContext()));
    getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue());
    persistCommand(getParameters().getParentCommand(), getCallback() != null);
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, getCompensationContext());
    VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), ExecutionHandler.createInternalJobContext(getContext()));
    getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue());
    persistCommand(getParameters().getParentCommand(), getCallback() != null);
    setSucceeded(true);
}
#end_block

#method_before
@Override
public boolean performNextOperation(int completedChildCount) {
    if (getParameters().getStage() == LiveMigrateStage.CREATE_SNAPSHOT) {
        updateStage(LiveMigrateStage.LIVE_MIGRATE_DISK_EXEC_START);
        for (LiveMigrateDiskParameters parameters : getParameters().getParametersList()) {
            parameters.setSessionId(getParameters().getSessionId());
            parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED);
            parameters.setParentCommand(getActionType());
            parameters.setParentParameters(getParameters());
            parameters.setDestinationImageId(((DiskImage) getDiskImageByDiskId(parameters.getImageGroupID())).getImageId());
            VdcReturnValueBase vdcReturnValue = runInternalAction(VdcActionType.LiveMigrateDisk, parameters, ExecutionHandler.createInternalJobContext());
            if (!vdcReturnValue.getSucceeded()) {
                imageDao.updateStatusOfImagesByImageGroupId(parameters.getImageGroupID(), ImageStatus.OK);
            }
        }
        updateStage(LiveMigrateStage.LIVE_MIGRATE_DISK_EXEC_COMPLETED);
        return true;
    }
    if (isRemoveAutoGeneratedSnapshotRequired()) {
        updateStage(LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_START);
        removeAutogeneratedSnapshot();
        updateStage(LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END);
        return true;
    }
    return false;
}
#method_after
@Override
public boolean performNextOperation(int completedChildCount) {
    if (getParameters().getStage() == LiveMigrateStage.CREATE_SNAPSHOT) {
        updateStage(LiveMigrateStage.LIVE_MIGRATE_DISK_EXEC_START);
        for (LiveMigrateDiskParameters parameters : getParameters().getParametersList()) {
            parameters.setSessionId(getParameters().getSessionId());
            parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED);
            parameters.setParentCommand(getActionType());
            parameters.setParentParameters(getParameters());
            parameters.setDestinationImageId(((DiskImage) getDiskImageByDiskId(parameters.getImageGroupID())).getImageId());
            VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.LiveMigrateDisk, parameters, ExecutionHandler.createInternalJobContext());
            if (!vdcReturnValue.getSucceeded()) {
                imageDao.updateStatusOfImagesByImageGroupId(parameters.getImageGroupID(), ImageStatus.OK);
            }
        }
        updateStage(LiveMigrateStage.LIVE_MIGRATE_DISK_EXEC_COMPLETED);
        return true;
    }
    if (isRemoveAutoGeneratedSnapshotRequired()) {
        updateStage(LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_START);
        removeAutogeneratedSnapshot();
        updateStage(LiveMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END);
        return true;
    }
    return false;
}
#end_block

#method_before
private void removeAutogeneratedSnapshot() {
    RemoveSnapshotParameters removeSnapshotParameters = new RemoveSnapshotParameters(getParameters().getAutoGeneratedSnapshotId(), getVmId());
    removeSnapshotParameters.setEndProcedure(EndProcedure.COMMAND_MANAGED);
    removeSnapshotParameters.setParentCommand(getActionType());
    removeSnapshotParameters.setParentParameters(getParameters());
    removeSnapshotParameters.setNeedsLocking(false);
    runInternalAction(VdcActionType.RemoveSnapshot, removeSnapshotParameters, ExecutionHandler.createInternalJobContext(getContext()));
}
#method_after
private void removeAutogeneratedSnapshot() {
    RemoveSnapshotParameters removeSnapshotParameters = new RemoveSnapshotParameters(getParameters().getAutoGeneratedSnapshotId(), getVmId());
    removeSnapshotParameters.setEndProcedure(EndProcedure.COMMAND_MANAGED);
    removeSnapshotParameters.setParentCommand(getActionType());
    removeSnapshotParameters.setParentParameters(getParameters());
    removeSnapshotParameters.setNeedsLocking(false);
    runInternalAction(ActionType.RemoveSnapshot, removeSnapshotParameters, ExecutionHandler.createInternalJobContext(getContext()));
}
#end_block

#method_before
protected CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() {
    CreateAllSnapshotsFromVmParameters params = new CreateAllSnapshotsFromVmParameters(getParameters().getVmId(), StorageConstants.LSM_AUTO_GENERATED_SNAPSHOT_DESCRIPTION, false);
    params.setParentCommand(VdcActionType.LiveMigrateVmDisks);
    params.setSnapshotType(SnapshotType.REGULAR);
    params.setParentParameters(getParameters());
    params.setImagesParameters(getParameters().getImagesParameters());
    params.setTaskGroupSuccess(getParameters().getTaskGroupSuccess());
    params.setDisks(getMovedDisks());
    params.setDiskIdsToIgnoreInChecks(getMovedDiskIds());
    params.setNeedsLocking(false);
    params.setEndProcedure(EndProcedure.COMMAND_MANAGED);
    return params;
}
#method_after
protected CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() {
    CreateAllSnapshotsFromVmParameters params = new CreateAllSnapshotsFromVmParameters(getParameters().getVmId(), StorageConstants.LSM_AUTO_GENERATED_SNAPSHOT_DESCRIPTION, false);
    params.setParentCommand(ActionType.LiveMigrateVmDisks);
    params.setSnapshotType(SnapshotType.REGULAR);
    params.setParentParameters(getParameters());
    params.setImagesParameters(getParameters().getImagesParameters());
    params.setTaskGroupSuccess(getParameters().getTaskGroupSuccess());
    params.setDiskIds(getMovedDiskIds());
    params.setDiskIdsToIgnoreInChecks(getMovedDiskIds());
    params.setNeedsLocking(false);
    params.setEndProcedure(EndProcedure.COMMAND_MANAGED);
    return params;
}
#end_block

#method_before
protected boolean validateCreateAllSnapshotsFromVmCommand() {
    VdcReturnValueBase returnValue = CommandHelper.validate(VdcActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), getContext().clone());
    if (!returnValue.isValid()) {
        getReturnValue().setValidationMessages(returnValue.getValidationMessages());
        return false;
    }
    return true;
}
#method_after
protected boolean validateCreateAllSnapshotsFromVmCommand() {
    VdcReturnValueBase returnValue = CommandHelper.validate(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), getContext().clone());
    if (!returnValue.isValid()) {
        getReturnValue().setValidationMessages(returnValue.getValidationMessages());
        return false;
    }
    return true;
}
#end_block

#method_before
@Override
public void endWithFailure() {
    setSucceeded(true);
    ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.OK, ImageStatus.OK, getCompensationContext());
}
#method_after
@Override
public void endWithFailure() {
    setSucceeded(true);
    if (getParameters().getStage() == LiveMigrateStage.CREATE_SNAPSHOT) {
        ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.OK, ImageStatus.OK, getCompensationContext());
    }
}
#end_block

#method_before
public void setHeaderTitle(String title) {
    this.title = title;
    // $NON-NLS-1$ $NON-NLS-2$
    this.myId = title.replace(" ", "_").toLowerCase();
}
#method_after
public void setHeaderTitle(String title) {
    this.title = title;
    // $NON-NLS-1$ $NON-NLS-2$
    this.thisWidgetId = title.replace(" ", "_").toLowerCase();
}
#end_block

#method_before
@Override
public void setRowData(int start, List<? extends AuditLog> values) {
    // Compare the new values with the ones currently displayed, if no changes, don't refresh.
    if (values != null && !valuesEquals(values)) {
        boolean collapsed = checkIfCollapsed();
        currentValues = values;
        content.clear();
        eventPanelHeading = new PanelHeader();
        Heading titleHeading = new Heading(HeadingSize.H4);
        titleHeading.addStyleName(PatternflyConstants.PF_PANEL_TITLE);
        titleAnchor = new Anchor(hashString(myId));
        titleAnchor.setDataParent(hashString(parentId));
        titleAnchor.setDataTarget(hashString(myId));
        titleAnchor.setDataToggle(this.toggle);
        titleAnchor.setText(this.title);
        titleAnchor.addClickHandler(e -> {
            e.preventDefault();
        });
        if (collapsed) {
            titleAnchor.addStyleName(PatternflyConstants.COLLAPSED);
        }
        titleHeading.add(titleAnchor);
        eventPanelHeading.add(titleHeading);
        content.add(eventPanelHeading);
        PanelCollapse eventCollapse = new PanelCollapse();
        eventCollapse.setId(myId);
        eventPanelBody = new PanelBody();
        if (this.containerHeight > 0) {
            eventPanelBody.getElement().getStyle().setProperty(MAX_HEIGHT, containerHeight + Unit.PX.getType());
            eventPanelBody.getElement().getStyle().setOverflowY(Overflow.AUTO);
        }
        eventCollapse.add(eventPanelBody);
        if (collapsed) {
            eventCollapse.getElement().setAttribute(ARIA_EXPANDED, String.valueOf(false));
            eventCollapse.getElement().getStyle().setHeight(0, Unit.PX);
        } else {
            eventCollapse.getElement().setAttribute(ARIA_EXPANDED, String.valueOf(true));
            eventCollapse.addStyleName(Styles.IN);
        }
        content.add(eventCollapse);
        for (final AuditLog auditLog : values) {
            DrawerNotification notification = new DrawerNotification(auditLog);
            for (int i = 0; i < actionLabels.size(); i++) {
                final int index = i;
                ActionAnchorListItem listItem = new ActionAnchorListItem(actionLabels.get(index));
                listItem.addClickHandler(e -> {
                    auditLogActions.get(index).executeCommand(actionCommand.get(index), auditLog);
                });
                notification.addActionButton(listItem);
            }
            eventPanelBody.add(notification);
        }
        if (allActionLabel != null) {
            actionPanel = new FlowPanel();
            actionPanel.addStyleName(PatternflyConstants.PF_DRAWER_ACTION);
            eventCollapse.add(actionPanel);
            Button button = new Button(allActionLabel);
            button.addStyleName(BTN_LINK);
            button.addStyleName(Styles.BTN_BLOCK);
            button.removeStyleName(BTN_DEFAULT);
            button.addClickHandler(event -> {
                allActionCallback.executeCommand(allActionCommand, null);
            });
            actionPanel.add(button);
        }
    }
}
#method_after
@Override
public void setRowData(int start, List<? extends AuditLog> values) {
    // Compare the new values with the ones currently displayed, if no changes, don't refresh.
    if (values != null && !valuesEquals(values)) {
        boolean collapsed = checkIfCollapsed();
        currentValues = values;
        content.clear();
        eventPanelHeading = new PanelHeader();
        Heading titleHeading = new Heading(HeadingSize.H4);
        titleHeading.addStyleName(PatternflyConstants.PF_PANEL_TITLE);
        titleAnchor = new Anchor(hashString(thisWidgetId));
        titleAnchor.setDataParent(hashString(parentWidgetId));
        titleAnchor.setDataTarget(hashString(thisWidgetId));
        titleAnchor.setDataToggle(this.toggle);
        titleAnchor.setText(this.title);
        titleAnchor.addClickHandler(e -> {
            e.preventDefault();
        });
        if (collapsed) {
            titleAnchor.addStyleName(PatternflyConstants.COLLAPSED);
        }
        titleHeading.add(titleAnchor);
        eventPanelHeading.add(titleHeading);
        content.add(eventPanelHeading);
        PanelCollapse eventCollapse = new PanelCollapse();
        eventCollapse.setId(thisWidgetId);
        eventPanelBody = new PanelBody();
        if (this.containerHeight > 0) {
            eventPanelBody.getElement().getStyle().setProperty(MAX_HEIGHT, containerHeight + Unit.PX.getType());
            eventPanelBody.getElement().getStyle().setOverflowY(Overflow.AUTO);
        }
        eventCollapse.add(eventPanelBody);
        if (collapsed) {
            eventCollapse.getElement().setAttribute(ARIA_EXPANDED, String.valueOf(false));
            eventCollapse.getElement().getStyle().setHeight(0, Unit.PX);
        } else {
            eventCollapse.getElement().setAttribute(ARIA_EXPANDED, String.valueOf(true));
            eventCollapse.addStyleName(Styles.IN);
        }
        content.add(eventCollapse);
        for (final AuditLog auditLog : values) {
            DrawerNotification notification = new DrawerNotification(auditLog);
            for (int i = 0; i < actionLabels.size(); i++) {
                final int index = i;
                ActionAnchorListItem listItem = new ActionAnchorListItem(actionLabels.get(index));
                listItem.addClickHandler(e -> {
                    auditLogActions.get(index).executeCommand(actionCommand.get(index), auditLog);
                });
                notification.addActionButton(listItem);
            }
            eventPanelBody.add(notification);
        }
        if (allActionLabel != null) {
            actionPanel = new FlowPanel();
            actionPanel.addStyleName(PatternflyConstants.PF_DRAWER_ACTION);
            eventCollapse.add(actionPanel);
            Button button = new Button(allActionLabel);
            button.addStyleName(BTN_LINK);
            button.addStyleName(Styles.BTN_BLOCK);
            button.removeStyleName(BTN_DEFAULT);
            button.addClickHandler(event -> {
                allActionCallback.executeCommand(allActionCommand, null);
            });
            actionPanel.add(button);
        }
    }
}
#end_block

#method_before
private boolean checkIfCollapsed() {
    boolean result = false;
    if (titleAnchor != null) {
        String styleString = titleAnchor.getStyleName();
        if (styleString != null) {
            // $NON-NLS-1$
            String[] styles = styleString.split(" ");
            for (String style : styles) {
                if (style.equals(PatternflyConstants.COLLAPSED)) {
                    result = true;
                    break;
                }
            }
        }
    } else {
        result = startCollapsed;
    }
    return result;
}
#method_after
private boolean checkIfCollapsed() {
    boolean result = false;
    if (titleAnchor != null) {
        String styleString = titleAnchor.getStyleName();
        if (styleString != null) {
            // $NON-NLS-1$
            String[] styles = styleString.split(" ");
            Optional<String> found = Arrays.asList(styles).stream().filter(s -> s.equals(PatternflyConstants.COLLAPSED)).findFirst();
            result = found.isPresent();
        }
    } else {
        result = startCollapsed;
    }
    return result;
}
#end_block

#method_before
public void setDataToggleInfo(Toggle toggle, String parentId) {
    this.toggle = toggle;
    this.parentId = parentId;
}
#method_after
public void setDataToggleInfo(Toggle toggle, String parentId) {
    this.toggle = toggle;
    this.parentWidgetId = parentId;
}
#end_block

#method_before
@Override
protected void initWidget(Widget widget) {
    super.initWidget(widget);
    // Hide the button, we need it to set the attributes on so jquery and manipulate it.
    clickButton.setDataToggle(Toggle.DROPDOWN);
    clickButton.setVisible(false);
}
#method_after
@Override
protected void initWidget(Widget widget) {
    super.initWidget(widget);
    // Hide the button, we need it to set the attributes on so jquery can manipulate it.
    clickButton.setDataToggle(Toggle.DROPDOWN);
    clickButton.setVisible(false);
}
#end_block

#method_before
@Override
public ActionButton addMenuListItem(final ActionButtonDefinition<T> menuItemDef) {
    ActionAnchorListItem result = new ActionAnchorListItem(menuItemDef.getText());
    // Set menu element ID for better accessibility
    String menuId = menuItemDef.getUniqueId();
    if (menuId != null) {
        result.asWidget().getElement().setId(ElementIdUtils.createElementId(elementId, menuId));
    }
    // Add the button to the context menu
    if (menuItemDef.getCommandLocation().equals(CommandLocation.ContextAndToolBar) || menuItemDef.getCommandLocation().equals(CommandLocation.OnlyFromContext)) {
        actionButtonList.add(menuItemDef);
    }
    // Add button widget click handler
    result.addClickHandler(e -> {
        menuItemDef.onClick(getSelectedItems());
    });
    registerSelectionChangeHandler(menuItemDef);
    // Update button whenever its definition gets re-initialized
    menuItemDef.addInitializeHandler(e -> {
        updateActionButton(result, menuItemDef);
    });
    updateActionButton(result, menuItemDef);
    return result;
}
#method_after
@Override
public ActionButton addMenuListItem(final ActionButtonDefinition<T> menuItemDef) {
    ActionAnchorListItem result = new ActionAnchorListItem(menuItemDef.getText());
    // Set menu item ID for better accessibility
    String menuItemId = menuItemDef.getUniqueId();
    if (menuItemId != null) {
        result.asWidget().getElement().setId(ElementIdUtils.createElementId(elementId, menuItemId));
    }
    // Add the menu item to the context menu
    if (menuItemDef.getCommandLocation().equals(CommandLocation.ContextAndToolBar) || menuItemDef.getCommandLocation().equals(CommandLocation.OnlyFromContext)) {
        actionButtonList.add(menuItemDef);
    }
    // Add menu item widget click handler
    result.addClickHandler(e -> {
        menuItemDef.onClick(getSelectedItems());
    });
    registerSelectionChangeHandler(menuItemDef);
    // Update menu item whenever its definition gets re-initialized
    menuItemDef.addInitializeHandler(e -> {
        updateActionButton(result, menuItemDef);
    });
    updateActionButton(result, menuItemDef);
    return result;
}
#end_block

#method_before
protected void onContextMenu(ContextMenuEvent event) {
    final int eventX = event.getNativeEvent().getClientX();
    final int eventY = event.getNativeEvent().getClientY();
    // Suppress default browser context menu
    event.preventDefault();
    event.stopPropagation();
    // Use deferred command to ensure that the context menu
    // is shown only after other event handlers do their job
    Scheduler.get().scheduleDeferred(() -> {
        // Avoid showing empty context menu
        if (hasActionButtons()) {
            updateContextMenu(menu, actionButtonList);
            menuContainer.addStyleName(OPEN);
            clickButton.getElement().setAttribute(ARIA_EXPANDED, Boolean.TRUE.toString());
            menuContainer.getElement().getStyle().setPosition(Position.ABSOLUTE);
            menuContainer.getElement().getStyle().setTop(Window.getScrollTop() + eventY, Unit.PX);
            menuContainer.getElement().getStyle().setLeft(eventX, Unit.PX);
        }
    });
}
#method_after
protected void onContextMenu(ContextMenuEvent event) {
    final int eventX = event.getNativeEvent().getClientX();
    final int eventY = event.getNativeEvent().getClientY();
    // Suppress default browser context menu
    event.preventDefault();
    event.stopPropagation();
    // Use deferred command to ensure that the context menu
    // is shown only after other event handlers do their job
    Scheduler.get().scheduleDeferred(() -> {
        // Avoid showing empty context menu
        if (hasActionButtons()) {
            updateContextMenu(menu, actionButtonList);
            styleAndPositionMenuContainer(eventX, eventY);
        }
    });
}
#end_block

#method_before
protected AsyncDataProvider<T> getDataProvider() {
    if (null == dataProvider) {
        dataProvider = new AsyncDataProvider<T>(getModel().getSelectionModel()) {

            @Override
            protected void onRangeChanged(HasData<T> display) {
                // We might get here after the ItemsChangedEvent has been triggered
                updateData();
            }
        };
    }
    return dataProvider;
}
#method_after
protected AsyncDataProvider<T> getDataProvider() {
    if (dataProvider == null) {
        dataProvider = new AsyncDataProvider<T>(getModel().getSelectionModel()) {

            @Override
            protected void onRangeChanged(HasData<T> display) {
                // We might get here after the ItemsChangedEvent has been triggered
                updateData();
            }
        };
    }
    return dataProvider;
}
#end_block

#method_before
public SelectionModel<T> getSelectionModel() {
    if (selectionModel == null) {
        if (singleSelectionOnly) {
            selectionModel = new SingleSelectionModel<>(new QueryableEntityKeyProvider<>());
        } else {
            selectionModel = new OrderedMultiSelectionModel<>(new QueryableEntityKeyProvider<>());
        }
    }
    return selectionModel;
}
#method_after
public SelectionModel<T> getSelectionModel() {
    if (isSingleSelectionOnly()) {
        return getSingleSelectionModel();
    } else {
        return getOrderedMultiSelectionModel();
    }
}
#end_block

#method_before
@Override
public List<T> getSelectedItems() {
    SelectionModel<T> selectionModel = getDataProvider().getModel().getSelectionModel();
    if (selectionModel instanceof OrderedMultiSelectionModel) {
        return ((OrderedMultiSelectionModel<T>) selectionModel).getSelectedList();
    } else if (selectionModel instanceof SingleSelectionModel) {
        return Arrays.asList(((SingleSelectionModel<T>) selectionModel).getSelectedObject());
    }
    return Collections.EMPTY_LIST;
}
#method_after
@Override
public List<T> getSelectedItems() {
    if (getDataProvider().getModel().isSingleSelectionOnly()) {
        return (List<T>) Collections.singletonList(getDataProvider().getModel().getSingleSelectionModel().getSelectedObject());
    } else {
        return getDataProvider().getModel().getOrderedMultiSelectionModel().getSelectedList();
    }
}
#end_block

#method_before
@Override
protected void initializeModelHandlers(final TagListModel model) {
    super.initializeModelHandlers(model);
    // Add model reset handler
    model.getResetRequestedEvent().addListener((ev, sender, args) -> {
        if (model.getItems() == null) {
            return;
        }
        Iterator<TagModel> iterator = model.getItems().iterator();
        if (iterator.hasNext()) {
            TagModel root = model.cloneTagModel(iterator.next());
            updateDataProvider(Arrays.asList(root));
        }
    });
    model.getSelectedItemsChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            // The selectedItemsChangedEvent only gets fired when activating/deactiving a tag. Changing
            // the selection in the tag tree does not fire this event.
            TagActivationChangeEvent.fire(TagModelProvider.this, activeTagList(model.getRootNode()));
        }

        private List<TagModel> activeTagList(TagModel model) {
            List<TagModel> result = new ArrayList<>();
            if (model.getSelection()) {
                result.add(model);
            }
            for (TagModel child : model.getChildren()) {
                result.addAll(activeTagList(child));
            }
            return result;
        }
    });
    getModel().getSelectionModel().addSelectionChangeHandler(event -> {
        TagModelProvider.this.setSelectedItems(Arrays.asList(((SingleSelectionModel<TagModel>) getModel().getSelectionModel()).getSelectedObject()));
    });
}
#method_after
@Override
protected void initializeModelHandlers(final TagListModel model) {
    super.initializeModelHandlers(model);
    // Add model reset handler
    model.getResetRequestedEvent().addListener((ev, sender, args) -> {
        if (model.getItems() == null) {
            return;
        }
        Iterator<TagModel> iterator = model.getItems().iterator();
        if (iterator.hasNext()) {
            TagModel root = model.cloneTagModel(iterator.next());
            updateDataProvider(Arrays.asList(root));
        }
    });
    model.getSelectedItemsChangedEvent().addListener(new IEventListener<EventArgs>() {

        @Override
        public void eventRaised(Event<? extends EventArgs> ev, Object sender, EventArgs args) {
            // The selectedItemsChangedEvent only gets fired when activating/deactiving a tag. Changing
            // the selection in the tag tree does not fire this event.
            TagActivationChangeEvent.fire(TagModelProvider.this, activeTagList(model.getRootNode()));
        }

        private List<TagModel> activeTagList(TagModel model) {
            List<TagModel> result = new ArrayList<>();
            if (model.getSelection()) {
                result.add(model);
            }
            for (TagModel child : model.getChildren()) {
                result.addAll(activeTagList(child));
            }
            return result;
        }
    });
    getModel().getSelectionModel().addSelectionChangeHandler(event -> {
        TagModelProvider.this.setSelectedItems(Collections.singletonList(((SingleSelectionModel<TagModel>) getModel().getSelectionModel()).getSelectedObject()));
    });
}
#end_block

#method_before
@Override
protected void onReveal() {
    super.onReveal();
    setSubTabPanelVisible(false);
    getBreadCrumbs().clearActiveSubTab();
    getTable().resetScrollPosition();
    getView().setBreadCrumbs(getBreadCrumbs());
    if (getSearchPanelPresenterWidget() != null) {
        getView().setSearchPanel(getSearchPanelPresenterWidget().getView());
    }
}
#method_after
@Override
protected void onReveal() {
    super.onReveal();
    setSubTabPanelVisible(false);
    getBreadCrumbs().clearActiveSubTab();
    getTable().resetScrollPosition();
    getView().setBreadCrumbs(getBreadCrumbs());
    if (hasSearchPanelPresenterWidget()) {
        setInSlot(TYPE_SetSearchPanel, searchPanelPresenterWidget);
    }
}
#end_block

#method_before
protected void setTags(List<TagModel> tags) {
    if (searchPanelPresenterWidget != null) {
        searchPanelPresenterWidget.setTags(tags);
    }
}
#method_after
protected void setTags(List<TagModel> tags) {
    if (hasSearchPanelPresenterWidget()) {
        searchPanelPresenterWidget.setTags(tags);
    }
}
#end_block

#method_before
@Override
protected void initializeModelHandlers(BookmarkListModel model) {
    super.initializeModelHandlers(model);
    // Clear tag selection when a tag is saved/edited/deleted
    model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection());
    getModel().getSelectionModel().addSelectionChangeHandler(event -> {
        BookmarkModelProvider.this.setSelectedItems(Arrays.asList(((SingleSelectionModel<Bookmark>) getModel().getSelectionModel()).getSelectedObject()));
    });
}
#method_after
@Override
protected void initializeModelHandlers(BookmarkListModel model) {
    super.initializeModelHandlers(model);
    // Clear tag selection when a tag is saved/edited/deleted
    model.getItemSavedEvent().addListener((ev, sender, args) -> clearSelection());
    getModel().getSelectionModel().addSelectionChangeHandler(event -> {
        BookmarkModelProvider.this.setSelectedItems(Collections.singletonList(((SingleSelectionModel<Bookmark>) getModel().getSelectionModel()).getSelectedObject()));
    });
}
#end_block

