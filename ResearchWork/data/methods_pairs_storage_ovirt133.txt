500
#method_before
public void AfterRefreshTreatment() {
    try {
        if (processHardwareCapsNeeded) {
            monitoringStrategy.processHardwareCapabilities(_vds);
            markIsSetNonOperationalExecuted();
        }
        if (refreshedCapabilities) {
            ResourceManager.getInstance().getEventListener().handleVdsVersion(_vds.getId());
            markIsSetNonOperationalExecuted();
        }
        if (_vds.getstatus() == VDSStatus.Maintenance) {
            try {
                ResourceManager.getInstance().getEventListener().vdsMovedToMaintanance(_vds.getId());
            } catch (RuntimeException ex) {
                log.error("Host encounter a problem moving to maintenance mode. The Host status will change to Non operational status.");
                ResourceManager.getInstance().getEventListener().vdsNonOperational(_vds.getId(), _vds.getNonOperationalReason(), true, true, Guid.Empty);
                throw ex;
            }
        } else if (_vds.getstatus() == VDSStatus.NonOperational && _firstStatus != VDSStatus.NonOperational) {
            if (!_vdsManager.isSetNonOperationalExecuted()) {
                ResourceManager.getInstance().getEventListener().vdsNonOperational(_vds.getId(), _vds.getNonOperationalReason(), false, false, Guid.Empty);
            } else {
                log.infoFormat("Host {0} : {1} is already in NonOperational status. SetNonOperationalVds command is skipped.", _vds.getId(), _vds.getvds_name());
            }
        }
        // rerun all vms from rerun list
        for (Guid vm_guid : _vmsToRerun) {
            log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, _vds.getvds_name());
            ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId());
        }
        for (Guid vm_guid : _succededToRunVms) {
            _vdsManager.SuccededToRunVm(vm_guid);
        }
        // run all vms that crushed that marked with auto startup
        for (Guid vm_guid : _autoVmsToRun) {
            // Refrain from auto-start HA VM during its re-run attempts.
            if (!_vmsToRerun.contains(vm_guid)) {
                ResourceManager.getInstance().getEventListener().runFailedAutoStartVM(vm_guid);
            }
        }
        // process all vms that their ip changed.
        for (Map.Entry<VM, VmDynamic> pair : _vmsClientIpChanged.entrySet()) {
            ResourceManager.getInstance().getEventListener().processOnClientIpChange(_vds, pair.getValue().getId());
        }
        // process all vms that powering up.
        for (VmDynamic runningVm : _poweringUpVms) {
            ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getdisplay_ip(), runningVm.getdisplay());
        }
        // process all vms that went down
        for (Guid vm_guid : _vmsMovedToDown) {
            ResourceManager.getInstance().getEventListener().processOnVmStop(vm_guid);
        }
        for (Guid vm_guid : _vmsToRemoveFromAsync) {
            ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid);
        }
    } catch (IRSErrorException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        if (log.isDebugEnabled()) {
            log.error(ExceptionUtils.getMessage(ex), ex);
        }
    } catch (RuntimeException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        log.error(ExceptionUtils.getMessage(ex), ex);
    }
}
#method_after
public void AfterRefreshTreatment() {
    try {
        if (processHardwareCapsNeeded) {
            monitoringStrategy.processHardwareCapabilities(_vds);
            markIsSetNonOperationalExecuted();
        }
        if (refreshedCapabilities) {
            ResourceManager.getInstance().getEventListener().handleVdsVersion(_vds.getId());
            markIsSetNonOperationalExecuted();
        }
        if (_vds.getstatus() == VDSStatus.Maintenance) {
            try {
                ResourceManager.getInstance().getEventListener().vdsMovedToMaintanance(_vds.getId());
            } catch (RuntimeException ex) {
                log.error("Host encounter a problem moving to maintenance mode. The Host status will change to Non operational status.");
                ResourceManager.getInstance().getEventListener().vdsNonOperational(_vds.getId(), _vds.getNonOperationalReason(), true, true, Guid.Empty);
                throw ex;
            }
        } else if (_vds.getstatus() == VDSStatus.NonOperational && _firstStatus != VDSStatus.NonOperational) {
            if (!_vdsManager.isSetNonOperationalExecuted()) {
                ResourceManager.getInstance().getEventListener().vdsNonOperational(_vds.getId(), _vds.getNonOperationalReason(), false, false, Guid.Empty);
            } else {
                log.infoFormat("Host {0} : {1} is already in NonOperational status. SetNonOperationalVds command is skipped.", _vds.getId(), _vds.getvds_name());
            }
        }
        // rerun all vms from rerun list
        for (Guid vm_guid : _vmsToRerun) {
            log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, _vds.getvds_name());
            ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId());
        }
        for (Guid vm_guid : _succededToRunVms) {
            _vdsManager.SuccededToRunVm(vm_guid);
        }
        // run all vms that crushed that marked with auto startup
        for (Guid vm_guid : _autoVmsToRun) {
            // Refrain from auto-start HA VM during its re-run attempts.
            if (!_vmsToRerun.contains(vm_guid)) {
                ResourceManager.getInstance().getEventListener().runFailedAutoStartVM(vm_guid);
            }
        }
        // process all vms that their ip changed.
        for (Entry<VM, VmDynamic> pair : _vmsClientIpChanged.entrySet()) {
            ResourceManager.getInstance().getEventListener().processOnClientIpChange(_vds, pair.getValue().getId());
        }
        // process all vms that powering up.
        for (VmDynamic runningVm : _poweringUpVms) {
            ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getdisplay_ip(), runningVm.getdisplay());
        }
        // process all vms that went down
        for (Guid vm_guid : _vmsMovedToDown) {
            ResourceManager.getInstance().getEventListener().processOnVmStop(vm_guid);
        }
        for (Guid vm_guid : _vmsToRemoveFromAsync) {
            ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid);
        }
    } catch (IRSErrorException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        if (log.isDebugEnabled()) {
            log.error(ExceptionUtils.getMessage(ex), ex);
        }
    } catch (RuntimeException ex) {
        logFailureMessage("ResourceManager::RerunFailedCommand:", ex);
        log.error(ExceptionUtils.getMessage(ex), ex);
    }
}
#end_block

#method_before
// Check if one of the Host interfaces is down, we set the host to non-operational
private void checkVdsInterfaces() {
    if (_vds.getstatus() != VDSStatus.Up) {
        return;
    }
    Map<String, Boolean> activeBonds = new HashMap<String, Boolean>();
    List<network> clusterNetworks = getDbFacade().getNetworkDAO().getAllForCluster(_vds.getvds_group_id());
    boolean setHostDown = false;
    List<String> networks = new ArrayList<String>();
    List<String> nics = new ArrayList<String>();
    Map<String, List<String>> bondNics = new HashMap<String, List<String>>();
    List<VdsNetworkInterface> interfaces = _vds.getInterfaces();
    Map<String, network> networksByName = NetworkUtils.networksByName(clusterNetworks);
    try {
        for (VdsNetworkInterface iface : interfaces) {
            // report if MTU value differ from cluster
            logMTUDifferences(networksByName, iface);
            // Handle nics that are non bonded and not vlan over bond
            setHostDown = isRequiredInterfaceDown(networksByName, networks, nics, iface);
            // Handle bond nics
            if (iface.getBondName() != null) {
                poplate(activeBonds, clusterNetworks, networks, bondNics, iface);
            }
        }
        // only if we didn't already set the host to down
        if (!setHostDown) {
            for (String key : activeBonds.keySet()) {
                if (!activeBonds.get(key)) {
                    setHostDown = true;
                    // add the nics name for audit log
                    for (String name : bondNics.get(key)) {
                        nics.add(name);
                    }
                }
            }
        }
    } catch (Exception e) {
        log.error(String.format("Failure on checkInterfaces on update runtimeinfo for vds: %s", _vds.getvds_name()), e);
    } finally {
        if (setHostDown) {
            // we give 1 minutes to a nic to get up in case the nic get the ip from DHCP server
            if (!hostDownTimes.containsKey(_vds.getId())) {
                hostDownTimes.put(_vds.getId(), System.currentTimeMillis());
                return;
            }
            // if less then 1 minutes, still waiting for DHCP
            int delay = Config.<Integer>GetValue(ConfigValues.NicDHCPDelayGraceInMS) * 1000;
            if (System.currentTimeMillis() < hostDownTimes.get(_vds.getId()) + delay) {
                return;
            }
            // else remove from map (for future checks) and set the host to non-operational
            hostDownTimes.remove(_vds.getId());
            try {
                StringBuilder sNics = new StringBuilder();
                StringBuilder sNetworks = new StringBuilder();
                for (String nic : nics) {
                    sNics.append(nic).append(", ");
                }
                for (String net : networks) {
                    sNetworks.append(net).append(", ");
                }
                String message = String.format("Host '%s' moved to Non-Operational state because interface/s '%s' are down which needed by network/s '%s' in the current cluster", _vds.getvds_name(), sNics.toString(), sNetworks.toString());
                _vdsManager.setStatus(VDSStatus.NonOperational, _vds);
                log.info(message);
                AuditLogableBase logable = new AuditLogableBase(_vds.getId());
                logable.AddCustomValue("Networks", StringHelper.trimEnd(sNetworks.toString(), ',', ' '));
                logable.AddCustomValue("Interfaces", StringHelper.trimEnd(sNics.toString(), ',', ' '));
                auditLog(logable, AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN);
            } catch (Exception e) {
                log.error(String.format("checkInterface: Failure on moving host: %s to non-operational.", _vds.getvds_name()), e);
            }
        } else {
            // no nics are down, remove from list if exists
            hostDownTimes.remove(_vds.getId());
        }
    }
}
#method_after
// Check if one of the Host interfaces is down, we set the host to non-operational
private void checkVdsInterfaces() {
    if (_vds.getstatus() != VDSStatus.Up) {
        return;
    }
    Map<String, Boolean> activeBonds = new HashMap<String, Boolean>();
    List<network> clusterNetworks = getDbFacade().getNetworkDAO().getAllForCluster(_vds.getvds_group_id());
    boolean setHostDown = false;
    List<String> networks = new ArrayList<String>();
    List<String> nics = new ArrayList<String>();
    Map<String, List<String>> bondNics = new HashMap<String, List<String>>();
    List<VdsNetworkInterface> interfaces = _vds.getInterfaces();
    Map<String, network> networksByName = NetworkUtils.networksByName(clusterNetworks);
    try {
        for (VdsNetworkInterface iface : interfaces) {
            // report if MTU value differ from cluster
            logMTUDifferences(networksByName, iface);
            // Handle nics that are non bonded and not vlan over bond
            setHostDown = isRequiredInterfaceDown(networksByName, networks, nics, iface);
            // Handle bond nics
            if (iface.getBondName() != null) {
                poplate(activeBonds, clusterNetworks, networks, bondNics, iface);
            }
        }
        // only if we didn't already set the host to down
        if (!setHostDown) {
            for (String key : activeBonds.keySet()) {
                if (!activeBonds.get(key)) {
                    setHostDown = true;
                    // add the nics name for audit log
                    for (String name : bondNics.get(key)) {
                        nics.add(name);
                    }
                }
            }
        }
    } catch (Exception e) {
        log.error(String.format("Failure on checkInterfaces on update runtimeinfo for vds: %s", _vds.getvds_name()), e);
    } finally {
        if (setHostDown) {
            // we give 1 minutes to a nic to get up in case the nic get the ip from DHCP server
            if (!hostDownTimes.containsKey(_vds.getId())) {
                hostDownTimes.put(_vds.getId(), System.currentTimeMillis());
                return;
            } else {
                int delay = Config.<Integer>GetValue(ConfigValues.NicDHCPDelayGraceInMS) * 1000;
                if (System.currentTimeMillis() < hostDownTimes.get(_vds.getId()) + delay) {
                    // if less then 1 minutes, still waiting for DHCP
                    return;
                } else {
                    // else remove from map (for future checks) and set the host to non-operational
                    hostDownTimes.remove(_vds.getId());
                }
            }
            try {
                StringBuilder sNics = new StringBuilder();
                StringBuilder sNetworks = new StringBuilder();
                for (String nic : nics) {
                    sNics.append(nic).append(", ");
                }
                for (String net : networks) {
                    sNetworks.append(net).append(", ");
                }
                String message = String.format("Host '%s' moved to Non-Operational state because interface/s '%s' are down which needed by network/s '%s' in the current cluster", _vds.getvds_name(), sNics.toString(), sNetworks.toString());
                _vdsManager.setStatus(VDSStatus.NonOperational, _vds);
                log.info(message);
                AuditLogableBase logable = new AuditLogableBase(_vds.getId());
                logable.AddCustomValue("Networks", StringHelper.trimEnd(sNetworks.toString(), ',', ' '));
                logable.AddCustomValue("Interfaces", StringHelper.trimEnd(sNics.toString(), ',', ' '));
                auditLog(logable, AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN);
            } catch (Exception e) {
                log.error(String.format("checkInterface: Failure on moving host: %s to non-operational.", _vds.getvds_name()), e);
            }
        } else {
            // no nics are down, remove from list if exists
            hostDownTimes.remove(_vds.getId());
        }
    }
}
#end_block

#method_before
private void refreshVmStats() {
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debug("vds::refreshVmList entered");
    }
    VdsBrokerCommand<VdsIdAndVdsVDSCommandParametersBase> command;
    if (!_vdsManager.getRefreshStatistics()) {
        command = new ListVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    } else {
        command = new GetAllVmStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    }
    _runningVms = (Map<Guid, Map.Entry<VmDynamic, VmStatistics>>) command.ExecuteWithReturnValue();
    if (command.getVDSReturnValue().getSucceeded()) {
        List<VM> running = checkVmsStatusChanged();
        proceedDownVms();
        // update repository and check if there are any vm in cache that not
        // in vdsm
        updateRepository(running);
        // Going over all returned VMs and updting the data structures
        // accordingly
        // checking the db for incoherent vm status;
        // setVmStatusDownForVmNotFound();
        refreshCommitedMemory();
        if (_vdssToRefresh != null) {
            for (Guid vdsToRefreshId : _vdssToRefresh) {
                VdsManager vdsm = ResourceManager.getInstance().GetVdsManager(vdsToRefreshId);
                vdsm.forceRefreshRunTimeInfo();
            }
        }
        // Handle VM devices were changed (for 3.1 cluster and above)
        if (!VmDeviceCommonUtils.isOldClusterVersion(_vds.getvds_group_compatibility_version())) {
            handleVmDeviceChange();
        }
    } else if (command.getVDSReturnValue().getExceptionObject() != null) {
        if (command.getVDSReturnValue().getExceptionObject() instanceof VDSErrorException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) {
            _saveVdsDynamic = _vdsManager.handleNetworkException((VDSNetworkException) command.getVDSReturnValue().getExceptionObject(), _vds);
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSProtocolException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof RepositoryException) {
            log.errorFormat("Failed to update vms status in database,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
            log.error("Exception: ", command.getVDSReturnValue().getExceptionObject());
            return;
        }
        throw command.getVDSReturnValue().getExceptionObject();
    } else {
        log.errorFormat("refreshCapabilities:GetCapabilitiesVDSCommand failed with no exception!");
    }
}
#method_after
private void refreshVmStats() {
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debug("vds::refreshVmList entered");
    }
    VdsBrokerCommand<VdsIdAndVdsVDSCommandParametersBase> command;
    if (!_vdsManager.getRefreshStatistics()) {
        command = new ListVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    } else {
        command = new GetAllVmStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    }
    _runningVms = (Map<Guid, Entry<VmDynamic, VmStatistics>>) command.ExecuteWithReturnValue();
    if (command.getVDSReturnValue().getSucceeded()) {
        List<VM> running = checkVmsStatusChanged();
        proceedDownVms();
        // update repository and check if there are any vm in cache that not
        // in vdsm
        updateRepository(running);
        // Going over all returned VMs and updting the data structures
        // accordingly
        // checking the db for incoherent vm status;
        // setVmStatusDownForVmNotFound();
        refreshCommitedMemory();
        if (_vdssToRefresh != null) {
            for (Guid vdsToRefreshId : _vdssToRefresh) {
                VdsManager vdsm = ResourceManager.getInstance().GetVdsManager(vdsToRefreshId);
                vdsm.forceRefreshRunTimeInfo();
            }
        }
        // Handle VM devices were changed (for 3.1 cluster and above)
        if (!VmDeviceCommonUtils.isOldClusterVersion(_vds.getvds_group_compatibility_version())) {
            handleVmDeviceChange();
        }
    } else if (command.getVDSReturnValue().getExceptionObject() != null) {
        if (command.getVDSReturnValue().getExceptionObject() instanceof VDSErrorException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) {
            _saveVdsDynamic = _vdsManager.handleNetworkException((VDSNetworkException) command.getVDSReturnValue().getExceptionObject(), _vds);
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSProtocolException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof RepositoryException) {
            log.errorFormat("Failed to update vms status in database,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
            log.error("Exception: ", command.getVDSReturnValue().getExceptionObject());
            return;
        }
        throw command.getVDSReturnValue().getExceptionObject();
    } else {
        log.errorFormat("refreshCapabilities:GetCapabilitiesVDSCommand failed with no exception!");
    }
}
#end_block

#method_before
private void handleVmDeviceChange() {
    List<String> vmsToUpdate = new ArrayList<String>();
    for (Map.Entry<VmDynamic, VmStatistics> vmHelper : _runningVms.values()) {
        VmDynamic vmDynamic = vmHelper.getKey();
        if (vmDynamic != null) {
            VM vm = _vmDict.get(vmDynamic.getId());
            if (vm != null) {
                String dbHash = vm.getHash();
                if ((dbHash == null && vmDynamic.getHash() != null) || (dbHash != null) && !dbHash.equals(vmDynamic.getHash())) {
                    vmsToUpdate.add(vmDynamic.getId().toString());
                    // update new hash value
                    if (_vmDynamicToSave.containsKey(vm.getId())) {
                        _vmDynamicToSave.get(vm.getId()).setHash(vmDynamic.getHash());
                    } else {
                        AddVmDynamicToList(vmDynamic);
                    }
                }
            }
        }
    }
    if (vmsToUpdate.size() > 0) {
        updateVmDevices(vmsToUpdate);
    }
}
#method_after
private void handleVmDeviceChange() {
    List<String> vmsToUpdate = new ArrayList<String>();
    for (Entry<VmDynamic, VmStatistics> vmHelper : _runningVms.values()) {
        VmDynamic vmDynamic = vmHelper.getKey();
        if (vmDynamic != null) {
            VM vm = _vmDict.get(vmDynamic.getId());
            if (vm != null) {
                String dbHash = vm.getHash();
                if ((dbHash == null && vmDynamic.getHash() != null) || (dbHash != null) && !dbHash.equals(vmDynamic.getHash())) {
                    vmsToUpdate.add(vmDynamic.getId().toString());
                    // update new hash value
                    if (_vmDynamicToSave.containsKey(vm.getId())) {
                        _vmDynamicToSave.get(vm.getId()).setHash(vmDynamic.getHash());
                    } else {
                        AddVmDynamicToList(vmDynamic);
                    }
                }
            }
        }
    }
    if (vmsToUpdate.size() > 0) {
        updateVmDevices(vmsToUpdate);
    }
}
#end_block

#method_before
private List<VM> checkVmsStatusChanged() {
    List<VM> running = new ArrayList<VM>();
    if (!_vdsManager.getRefreshStatistics()) {
        List<VmDynamic> tempRunningList = new ArrayList<VmDynamic>();
        for (Map.Entry<VmDynamic, VmStatistics> runningVm : _runningVms.values()) {
            tempRunningList.add(runningVm.getKey());
        }
        for (VmDynamic runningVm : tempRunningList) {
            VM vmToUpdate = null;
            vmToUpdate = _vmDict.get(runningVm.getId());
            if (vmToUpdate == null || (vmToUpdate.getstatus() != runningVm.getstatus() && !(vmToUpdate.getstatus() == VMStatus.SavingState && runningVm.getstatus() == VMStatus.Up))) {
                GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters> command = new GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters>(new GetVmStatsVDSCommandParameters(_vds, runningVm.getId()));
                command.Execute();
                if (command.getVDSReturnValue().getSucceeded()) {
                    _runningVms.put(runningVm.getId(), (Map.Entry<VmDynamic, VmStatistics>) command.getReturnValue());
                } else {
                    _runningVms.remove(runningVm.getId());
                }
            } else {
                // status not changed move to next vm
                running.add(vmToUpdate);
                _runningVms.remove(vmToUpdate.getId());
            }
        }
    }
    return running;
}
#method_after
private List<VM> checkVmsStatusChanged() {
    List<VM> running = new ArrayList<VM>();
    if (!_vdsManager.getRefreshStatistics()) {
        List<VmDynamic> tempRunningList = new ArrayList<VmDynamic>();
        for (Entry<VmDynamic, VmStatistics> runningVm : _runningVms.values()) {
            tempRunningList.add(runningVm.getKey());
        }
        for (VmDynamic runningVm : tempRunningList) {
            VM vmToUpdate = null;
            vmToUpdate = _vmDict.get(runningVm.getId());
            if (vmToUpdate == null || (vmToUpdate.getstatus() != runningVm.getstatus() && !(vmToUpdate.getstatus() == VMStatus.SavingState && runningVm.getstatus() == VMStatus.Up))) {
                GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters> command = new GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters>(new GetVmStatsVDSCommandParameters(_vds, runningVm.getId()));
                command.Execute();
                if (command.getVDSReturnValue().getSucceeded()) {
                    _runningVms.put(runningVm.getId(), (Entry<VmDynamic, VmStatistics>) command.getReturnValue());
                } else {
                    _runningVms.remove(runningVm.getId());
                }
            } else {
                // status not changed move to next vm
                running.add(vmToUpdate);
                _runningVms.remove(vmToUpdate.getId());
            }
        }
    }
    return running;
}
#end_block

#method_before
private void proceedDownVms() {
    for (Map.Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic vm = vm_helper.getKey();
        if (vm.getstatus() != VMStatus.Down) {
            continue;
        }
        VM vmTo = null;
        // _vdsManager.getVm(vm.getvm_guid());
        vmTo = _vmDict.get(vm.getId());
        VMStatus status = VMStatus.Unassigned;
        if (vmTo != null) {
            status = vmTo.getstatus();
            proceedVmBeforeDeletion(vmTo, vm);
            // when going to suspend, delete vm from cache later
            if (status == VMStatus.SavingState) {
                ResourceManager.getInstance().InternalSetVmStatus(vmTo, VMStatus.Suspended);
            }
            clearVm(vmTo);
        }
        VmStatistics vmStatistics = getDbFacade().getVmStatisticsDAO().get(vm.getId());
        if (vmStatistics != null) {
            DestroyVDSCommand<DestroyVmVDSCommandParameters> vdsBrokerCommand = new DestroyVDSCommand<DestroyVmVDSCommandParameters>(new DestroyVmVDSCommandParameters(_vds.getId(), vm.getId(), false, false, 0));
            vdsBrokerCommand.Execute();
            if (vmTo != null && status == VMStatus.SavingState) {
                AfterSuspendTreatment(vm);
            } else if (status != VMStatus.MigratingFrom) {
                HandleVmOnDown(vmTo, vm, vmStatistics);
            }
        }
    }
}
#method_after
private void proceedDownVms() {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic vm = vm_helper.getKey();
        if (vm.getstatus() != VMStatus.Down) {
            continue;
        }
        VM vmTo = null;
        // _vdsManager.getVm(vm.getvm_guid());
        vmTo = _vmDict.get(vm.getId());
        VMStatus status = VMStatus.Unassigned;
        if (vmTo != null) {
            status = vmTo.getstatus();
            proceedVmBeforeDeletion(vmTo, vm);
            // when going to suspend, delete vm from cache later
            if (status == VMStatus.SavingState) {
                ResourceManager.getInstance().InternalSetVmStatus(vmTo, VMStatus.Suspended);
            }
            clearVm(vmTo);
        }
        VmStatistics vmStatistics = getDbFacade().getVmStatisticsDAO().get(vm.getId());
        if (vmStatistics != null) {
            DestroyVDSCommand<DestroyVmVDSCommandParameters> vdsBrokerCommand = new DestroyVDSCommand<DestroyVmVDSCommandParameters>(new DestroyVmVDSCommandParameters(_vds.getId(), vm.getId(), false, false, 0));
            vdsBrokerCommand.Execute();
            if (vmTo != null && status == VMStatus.SavingState) {
                AfterSuspendTreatment(vm);
            } else if (status != VMStatus.MigratingFrom) {
                HandleVmOnDown(vmTo, vm, vmStatistics);
            }
        }
    }
}
#end_block

#method_before
private void updateRepository(List<VM> running) {
    for (Map.Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic runningVm = vm_helper.getKey();
        VM vmToUpdate = null;
        vmToUpdate = _vmDict.get(runningVm.getId());
        // if not migrating here and not down
        if (!inMigrationTo(runningVm, vmToUpdate) && runningVm.getstatus() != VMStatus.Down) {
            if (vmToUpdate != null) {
                if (_vmDict.containsKey(vmToUpdate.getId()) && !StringHelper.EqOp(runningVm.getclient_ip(), vmToUpdate.getclient_ip())) {
                    _vmsClientIpChanged.put(vmToUpdate, runningVm);
                }
            }
            if (vmToUpdate != null) {
                logVmStatusTransition(vmToUpdate, runningVm);
                // open spice for dedicated VMs
                if (vmToUpdate.getstatus() != VMStatus.Up && runningVm.getstatus() == VMStatus.Up || vmToUpdate.getstatus() != VMStatus.PoweringUp && runningVm.getstatus() == VMStatus.PoweringUp) {
                    // if no current client ip already connected.
                    if (runningVm.getdisplay() != null) {
                        _poweringUpVms.add(runningVm);
                    } else {
                        log.errorFormat("VdsBroker.VdsUpdateRunTimeInfo.updateRepository - runningVm.display is null, cannot start spice for it");
                    }
                }
                // "Up" as this means that the power down operation failed:
                if (vmToUpdate.getstatus() == VMStatus.PoweringDown && runningVm.getstatus() == VMStatus.Up) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_POWER_DOWN_FAILED);
                }
                if (vmToUpdate.getstatus() != VMStatus.Up && vmToUpdate.getstatus() != VMStatus.MigratingFrom && runningVm.getstatus() == VMStatus.Up) {
                    // running handling
                    if (log.isDebugEnabled()) {
                        log.debugFormat("removing VM {0} from successful run VMs list", vmToUpdate.getId());
                    }
                    if (!_succededToRunVms.contains(vmToUpdate.getId())) {
                        _succededToRunVms.add(vmToUpdate.getId());
                    }
                }
                afterMigrationFrom(runningVm, vmToUpdate);
                if (vmToUpdate.getstatus() != VMStatus.NotResponding && runningVm.getstatus() == VMStatus.NotResponding) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_NOT_RESPONDING);
                } else /**
                 * check if vm is suspended and remove it from async list
                 */
                if (runningVm.getstatus() == VMStatus.Paused) {
                    _vmsToRemoveFromAsync.add(vmToUpdate.getId());
                    if (vmToUpdate.getstatus() != VMStatus.Paused) {
                        // check exit message to determine wht the vm has
                        // paused
                        AuditLogType logType = AuditLogType.UNASSIGNED;
                        AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                        VmPauseStatus pauseStatus = runningVm.getPauseStatus();
                        if (pauseStatus.equals(VmPauseStatus.NOERR) || pauseStatus.equals(VmPauseStatus.NONE)) {
                        // user requested pause, no log needed
                        } else if (pauseStatus == VmPauseStatus.ENOSPC) {
                            logType = AuditLogType.VM_PAUSED_ENOSPC;
                        } else if (pauseStatus == VmPauseStatus.EIO) {
                            logType = AuditLogType.VM_PAUSED_EIO;
                        } else if (pauseStatus == VmPauseStatus.EPERM) {
                            logType = AuditLogType.VM_PAUSED_EPERM;
                        } else {
                            logType = AuditLogType.VM_PAUSED_ERROR;
                        }
                        if (logType != AuditLogType.UNASSIGNED) {
                            auditLog(logable, logType);
                        }
                    }
                }
            }
            if (vmToUpdate != null || runningVm.getstatus() != VMStatus.MigratingFrom) {
                RefObject<VM> tempRefObj = new RefObject<VM>(vmToUpdate);
                boolean updateSucceed = UpdateVmRunTimeInfo(tempRefObj, runningVm);
                vmToUpdate = tempRefObj.argvalue;
                if (updateSucceed) {
                    AddVmDynamicToList(vmToUpdate.getDynamicData());
                }
            }
            if (vmToUpdate != null) {
                UpdateVmStatistics(vmToUpdate);
                if (_vmDict.containsKey(runningVm.getId())) {
                    running.add(_vmDict.get(runningVm.getId()));
                    if (!_vdsManager.getInitialized()) {
                        ResourceManager.getInstance().RemoveVmFromDownVms(_vds.getId(), runningVm.getId());
                    }
                }
            }
        } else {
            if (runningVm.getstatus() == VMStatus.MigratingTo && vmToUpdate != null) {
                running.add(vmToUpdate);
            }
            VmDynamic vmDynamic = getDbFacade().getVmDynamicDAO().get(runningVm.getId());
            if (vmDynamic == null || vmDynamic.getstatus() != VMStatus.Unknown) {
                _vmDynamicToSave.remove(runningVm.getId());
            }
        }
    }
    // compare between vm in cache and vm from vdsm
    removeVmsFromCache(running);
}
#method_after
private void updateRepository(List<VM> running) {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic runningVm = vm_helper.getKey();
        VM vmToUpdate = null;
        vmToUpdate = _vmDict.get(runningVm.getId());
        // if not migrating here and not down
        if (!inMigrationTo(runningVm, vmToUpdate) && runningVm.getstatus() != VMStatus.Down) {
            if (vmToUpdate != null) {
                if (_vmDict.containsKey(vmToUpdate.getId()) && !StringHelper.EqOp(runningVm.getclient_ip(), vmToUpdate.getclient_ip())) {
                    _vmsClientIpChanged.put(vmToUpdate, runningVm);
                }
            }
            if (vmToUpdate != null) {
                logVmStatusTransition(vmToUpdate, runningVm);
                // open spice for dedicated VMs
                if (vmToUpdate.getstatus() != VMStatus.Up && runningVm.getstatus() == VMStatus.Up || vmToUpdate.getstatus() != VMStatus.PoweringUp && runningVm.getstatus() == VMStatus.PoweringUp) {
                    // if no current client ip already connected.
                    if (runningVm.getdisplay() != null) {
                        _poweringUpVms.add(runningVm);
                    } else {
                        log.errorFormat("VdsBroker.VdsUpdateRunTimeInfo.updateRepository - runningVm.display is null, cannot start spice for it");
                    }
                }
                // "Up" as this means that the power down operation failed:
                if (vmToUpdate.getstatus() == VMStatus.PoweringDown && runningVm.getstatus() == VMStatus.Up) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_POWER_DOWN_FAILED);
                }
                if (vmToUpdate.getstatus() != VMStatus.Up && vmToUpdate.getstatus() != VMStatus.MigratingFrom && runningVm.getstatus() == VMStatus.Up) {
                    // running handling
                    if (log.isDebugEnabled()) {
                        log.debugFormat("removing VM {0} from successful run VMs list", vmToUpdate.getId());
                    }
                    if (!_succededToRunVms.contains(vmToUpdate.getId())) {
                        _succededToRunVms.add(vmToUpdate.getId());
                    }
                }
                afterMigrationFrom(runningVm, vmToUpdate);
                if (vmToUpdate.getstatus() != VMStatus.NotResponding && runningVm.getstatus() == VMStatus.NotResponding) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_NOT_RESPONDING);
                } else /**
                 * check if vm is suspended and remove it from async list
                 */
                if (runningVm.getstatus() == VMStatus.Paused) {
                    _vmsToRemoveFromAsync.add(vmToUpdate.getId());
                    if (vmToUpdate.getstatus() != VMStatus.Paused) {
                        // check exit message to determine wht the vm has
                        // paused
                        AuditLogType logType = AuditLogType.UNASSIGNED;
                        AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                        VmPauseStatus pauseStatus = runningVm.getPauseStatus();
                        if (pauseStatus.equals(VmPauseStatus.NOERR) || pauseStatus.equals(VmPauseStatus.NONE)) {
                        // user requested pause, no log needed
                        } else if (pauseStatus == VmPauseStatus.ENOSPC) {
                            logType = AuditLogType.VM_PAUSED_ENOSPC;
                        } else if (pauseStatus == VmPauseStatus.EIO) {
                            logType = AuditLogType.VM_PAUSED_EIO;
                        } else if (pauseStatus == VmPauseStatus.EPERM) {
                            logType = AuditLogType.VM_PAUSED_EPERM;
                        } else {
                            logType = AuditLogType.VM_PAUSED_ERROR;
                        }
                        if (logType != AuditLogType.UNASSIGNED) {
                            auditLog(logable, logType);
                        }
                    }
                }
            }
            if (vmToUpdate != null || runningVm.getstatus() != VMStatus.MigratingFrom) {
                RefObject<VM> tempRefObj = new RefObject<VM>(vmToUpdate);
                boolean updateSucceed = UpdateVmRunTimeInfo(tempRefObj, runningVm);
                vmToUpdate = tempRefObj.argvalue;
                if (updateSucceed) {
                    AddVmDynamicToList(vmToUpdate.getDynamicData());
                }
            }
            if (vmToUpdate != null) {
                UpdateVmStatistics(vmToUpdate);
                if (_vmDict.containsKey(runningVm.getId())) {
                    running.add(_vmDict.get(runningVm.getId()));
                    if (!_vdsManager.getInitialized()) {
                        ResourceManager.getInstance().RemoveVmFromDownVms(_vds.getId(), runningVm.getId());
                    }
                }
            }
        } else {
            if (runningVm.getstatus() == VMStatus.MigratingTo && vmToUpdate != null) {
                running.add(vmToUpdate);
            }
            VmDynamic vmDynamic = getDbFacade().getVmDynamicDAO().get(runningVm.getId());
            if (vmDynamic == null || vmDynamic.getstatus() != VMStatus.Unknown) {
                _vmDynamicToSave.remove(runningVm.getId());
            }
        }
    }
    // compare between vm in cache and vm from vdsm
    removeVmsFromCache(running);
}
#end_block

#method_before
@Override
public LUNListReturnForXmlRpc getDeviceList(int storageType) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.getDeviceList(storageType);
        LUNListReturnForXmlRpc wrapper = new LUNListReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public LUNListReturnForXmlRpc getDeviceList(int storageType, XmlRpcStruct options) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.getDeviceList(storageType, options.getInnerMap());
        LUNListReturnForXmlRpc wrapper = new LUNListReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
        }
    }
    return validateBricks(getParameters().getBricks());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
            return false;
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
            return false;
        }
    }
    return validateBricks(getParameters().getBricks());
}
#end_block

#method_before
private void InitUsbPolicy() {
    VDSGroup cluster = (VDSGroup) getCluster().getSelectedItem();
    VmOsType osType = (VmOsType) getOSType().getSelectedItem();
    DisplayType displayType = (DisplayType) (getDisplayProtocol().getSelectedItem() != null ? ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_0.compareTo(cluster.getcompatibility_version()) >= 0) {
        if (osType.isWindows()) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (osType.isLinux()) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#method_after
private void InitUsbPolicy() {
    VDSGroup cluster = (VDSGroup) getCluster().getSelectedItem();
    VmOsType osType = (VmOsType) getOSType().getSelectedItem();
    DisplayType displayType = (DisplayType) (getDisplayProtocol().getSelectedItem() != null ? ((EntityModel) getDisplayProtocol().getSelectedItem()).getEntity() : null);
    if (osType == null || cluster == null || displayType == null) {
        return;
    }
    getUsbPolicy().setIsChangable(true);
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) > 0) {
        if (osType.isWindows()) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED));
            getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
            getUsbPolicy().setIsChangable(false);
        }
    }
    if (Version.v3_1.compareTo(cluster.getcompatibility_version()) <= 0) {
        if (osType.isLinux()) {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE));
        } else {
            getUsbPolicy().setItems(Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_LEGACY, UsbPolicy.ENABLED_NATIVE));
        }
    }
    if (displayType != DisplayType.qxl) {
        getUsbPolicy().setIsChangable(false);
    }
    getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED);
}
#end_block

#method_before
@Before
public void setup() throws Exception {
    validator = ValidationUtils.getValidator();
    mockConfig(9000);
}
#method_after
@Before
public void setup() throws Exception {
    validator = ValidationUtils.getValidator();
    IConfigUtilsInterface confUtils = mock(IConfigUtilsInterface.class);
    when(confUtils.GetValue(ConfigValues.MaxMTU, Config.DefaultConfigurationVersion)).thenReturn(TEST_MAX_MTU);
    when(confUtils.GetValue(ConfigValues.ManagementNetwork, Config.DefaultConfigurationVersion)).thenReturn(TEST_MANAGEMENT_NETWORK);
    Config.setConfigUtils(confUtils);
}
#end_block

#method_before
private static String getOvirtIsoPrefix() {
    // (for performance), and with the reloadable configuration feature, the value of the config may change
    if (OVIRT_ISO_PREFIX == null) {
        OVIRT_ISO_PREFIX = Config.<String>GetValue(ConfigValues.OvirtIsoPrefix);
    }
    return OVIRT_ISO_PREFIX;
}
#method_after
private static String getOvirtIsoPrefix() {
    return Config.<String>GetValue(ConfigValues.OvirtIsoPrefix);
}
#end_block

#method_before
private static Pattern getIsoPattern() {
    if (isoPattern == null) {
        isoPattern = Pattern.compile(getOvirtIsoPrefix() + "-.*.iso");
    }
    return isoPattern;
}
#method_after
private static Pattern getIsoPattern() {
    String expectedPattern = getOvirtIsoPrefix() + "-.*.iso";
    if (isoPattern == null || !expectedPattern.equals(isoPattern.toString())) {
        isoPattern = Pattern.compile(expectedPattern);
    }
    return isoPattern;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    return canRemoveAdGroup(getParameters().getAdElementId(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    Guid groupId = getParameters().getAdElementId();
    List<String> reasons = getReturnValue().getCanDoActionMessages();
    boolean returnValue = true;
    if (isLastSuperUserGroup(groupId)) {
        returnValue = false;
        reasons.add(VdcBllMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString());
    }
    if (groupId.equals(MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID)) {
        returnValue = false;
        reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE.name());
    }
    return returnValue;
}
#end_block

#method_before
@SuppressWarnings("rawtypes")
public void assertExecuteQueryCommandResult(Guid requestedUser, boolean includeDiskData, boolean expectedResults) {
    mockQueryParameters(requestedUser, includeDiskData);
    // Mock the result of the DAO
    final VM expectedVM = mockVMFromDAO(requestedUser);
    final DiskImage expectedDisk = mockDisk();
    final ArrayList<DiskImage> snapshots = mockSnapshots();
    DiskImage expectedSnapshot = snapshots.get(0);
    // Mock the disks, if needed
    if (includeDiskData) {
        doAnswer(new Answer() {

            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                expectedDisk.getSnapshots().addAll(snapshots);
                expectedVM.getDiskMap().put(expectedDisk.getinternal_drive_mapping(), expectedDisk);
                expectedVM.getDiskList().add(expectedDisk);
                return null;
            }
        }).when(getQuery()).updateDisksFromDB(expectedVM);
        doNothing().when(getQuery()).fillImagesBySnapshots(expectedVM);
    }
    doNothing().when(getQuery()).updateVmGuestAgentVersion(expectedVM);
    getQuery().executeQueryCommand();
    @SuppressWarnings("unchecked")
    List<VM> actualVMs = (List<VM>) getQuery().getQueryReturnValue().getReturnValue();
    if (!expectedResults) {
        assertTrue("no VMs should have been returned", actualVMs.isEmpty());
    } else {
        assertEquals("wrong number of VMs returned", 1, actualVMs.size());
        VM actualVM = actualVMs.get(0);
        assertEquals("wrong VMs returned", expectedVM, actualVM);
        if (includeDiskData) {
            assertEquals("Wrong number of disks on VM", 1, actualVM.getDiskList().size());
            DiskImage actualDisk = actualVM.getDiskList().get(0);
            assertEquals("Wrong disk on VM", expectedDisk, actualDisk);
            assertEquals("Wrong number of snapshots", 1, actualDisk.getSnapshots().size());
            DiskImage actualSnapshot = actualDisk.getSnapshots().get(0);
            assertEquals("Wrong snapshot", expectedSnapshot, actualSnapshot);
        }
    }
}
#method_after
@SuppressWarnings("rawtypes")
public void assertExecuteQueryCommandResult(Guid requestedUser, boolean includeDiskData, boolean expectedResults) {
    mockQueryParameters(requestedUser, includeDiskData);
    // Mock the result of the DAO
    final VM expectedVM = mockVMFromDAO(requestedUser);
    final DiskImage expectedDisk = mockDisk();
    final ArrayList<DiskImage> snapshots = mockSnapshots();
    DiskImage expectedSnapshot = snapshots.get(0);
    // Mock the disks, if needed
    if (includeDiskData) {
        doAnswer(new Answer() {

            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                expectedDisk.getSnapshots().addAll(snapshots);
                expectedVM.getDiskMap().put(expectedDisk.getId(), expectedDisk);
                expectedVM.getDiskList().add(expectedDisk);
                return null;
            }
        }).when(getQuery()).updateDisksFromDB(expectedVM);
        doNothing().when(getQuery()).fillImagesBySnapshots(expectedVM);
    }
    doNothing().when(getQuery()).updateVmGuestAgentVersion(expectedVM);
    getQuery().executeQueryCommand();
    @SuppressWarnings("unchecked")
    List<VM> actualVMs = (List<VM>) getQuery().getQueryReturnValue().getReturnValue();
    if (!expectedResults) {
        assertTrue("no VMs should have been returned", actualVMs.isEmpty());
    } else {
        assertEquals("wrong number of VMs returned", 1, actualVMs.size());
        VM actualVM = actualVMs.get(0);
        assertEquals("wrong VMs returned", expectedVM, actualVM);
        if (includeDiskData) {
            assertEquals("Wrong number of disks on VM", 1, actualVM.getDiskList().size());
            DiskImage actualDisk = actualVM.getDiskList().get(0);
            assertEquals("Wrong disk on VM", expectedDisk, actualDisk);
            assertEquals("Wrong number of snapshots", 1, actualDisk.getSnapshots().size());
            DiskImage actualSnapshot = actualDisk.getSnapshots().get(0);
            assertEquals("Wrong snapshot", expectedSnapshot, actualSnapshot);
        }
    }
}
#end_block

#method_before
private static DiskImage mockDisk() {
    // Prepare the disk
    Guid diskGuid = Guid.NewGuid();
    Guid itGuid = Guid.NewGuid();
    final DiskImage expectedDisk = new DiskImage();
    expectedDisk.setImageId(diskGuid);
    expectedDisk.setit_guid(itGuid);
    expectedDisk.setInternalDriveMapping(RandomUtils.instance().nextInt());
    return expectedDisk;
}
#method_after
private static DiskImage mockDisk() {
    // Prepare the disk
    Guid diskGuid = Guid.NewGuid();
    Guid itGuid = Guid.NewGuid();
    final DiskImage expectedDisk = new DiskImage();
    expectedDisk.setImageId(diskGuid);
    expectedDisk.setit_guid(itGuid);
    return expectedDisk;
}
#end_block

#method_before
@Before
public void initializeCommand() {
    command = spy(createSpiedCommand());
    mockVds();
    when(command.getActionType()).thenReturn(getCommandActionType());
    doReturn(mock(VmNetworkInterfaceDAO.class)).when(command).getVmNetworkInterfaceDAO();
}
#method_after
@Before
public void initializeCommand() {
    command = spy(createCommand());
    mockVds();
    when(command.getActionType()).thenReturn(getCommandActionType());
    doReturn(mock(VmNetworkInterfaceDAO.class)).when(command).getVmNetworkInterfaceDAO();
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    List<VmTemplate> retval = DbFacade.getInstance().getVmTemplateDAO().getAll(getUserID(), getParameters().isFiltered());
    for (VmTemplate template : retval) {
        AnonymousMethod1(template);
    }
    getQueryReturnValue().setReturnValue(retval);
}
#method_after
@Override
protected void executeQueryCommand() {
    List<VmTemplate> retval = getDbFacade().getVmTemplateDAO().getAll(getUserID(), getParameters().isFiltered());
    for (VmTemplate template : retval) {
        AnonymousMethod1(template);
    }
    getQueryReturnValue().setReturnValue(retval);
}
#end_block

#method_before
public static void GetTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                VmTemplate blankTemplate = null;
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getId().equals(Guid.Empty)) {
                        blankTemplate = template;
                    } else if (template.getstatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new Linq.VmTemplateByNameComparer());
                if (blankTemplate != null) {
                    list.add(0, blankTemplate);
                }
            }
            return list;
        }
    };
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new GetVmTemplatesByStoragePoolIdParameters(dataCenterId), aQuery);
}
#method_after
public static void GetTemplateListByDataCenter(AsyncQuery aQuery, Guid dataCenterId) {
    aQuery.converterCallback = new TemplateConverter();
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesByStoragePoolId, new GetVmTemplatesByStoragePoolIdParameters(dataCenterId), aQuery);
}
#end_block

#method_before
public static void GetVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            ArrayList<VmTemplate> list = new ArrayList<VmTemplate>();
            if (source != null) {
                VmTemplate blankTemplate = null;
                for (VmTemplate template : (ArrayList<VmTemplate>) source) {
                    if (template.getId().equals(Guid.Empty)) {
                        blankTemplate = template;
                    } else if (template.getstatus() == VmTemplateStatus.OK) {
                        list.add(template);
                    }
                }
                Collections.sort(list, new Linq.VmTemplateByNameComparer());
                if (blankTemplate != null) {
                    list.add(0, blankTemplate);
                }
            }
            return list;
        }
    };
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#method_after
public static void GetVmTemplatesWithPermittedAction(AsyncQuery aQuery, ActionGroup actionGroup) {
    aQuery.converterCallback = new TemplateConverter();
    GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new GetEntitiesWithPermittedActionParameters();
    getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup);
    Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery);
}
#end_block

#method_before
/**
 * Update the vm devices according to changes made in vm static for new VM
 */
public static <T extends VmBase> void updateVmDevices(T entity, Guid newId) {
    VmBase newVmBase = getBaseObject(entity, newId);
    if (newVmBase != null) {
        updateCdInVmDevice(newVmBase);
        updateBootOrderInVmDevice(newVmBase);
        updateNumOfMonitorsInVmDevice(null, newVmBase);
        updateUSBSlots(null, newVmBase);
        updateMemoryBalloon(null, newVmBase);
    }
}
#method_after
public static void updateVmDevices(VmManagementParametersBase params, VmBase oldVmBase) {
    VmBase entity = params.getVmStaticData();
    if (entity != null) {
        updateCdInVmDevice(oldVmBase, entity);
        if (oldVmBase.getdefault_boot_sequence() != entity.getdefault_boot_sequence()) {
            updateBootOrderInVmDevice(entity);
        }
        if (oldVmBase.getnum_of_monitors() != entity.getnum_of_monitors()) {
            updateNumOfMonitorsInVmDevice(oldVmBase, entity);
        }
        updateUSBSlots(oldVmBase, entity);
        updateMemoryBalloon(oldVmBase, entity, params.isBalloonEnabled());
    }
}
#end_block

#method_before
public static <T extends VmBase> void updateVmDevices(T entity) {
    VmBase vmBase = getBaseObject(entity, entity.getId());
    if (vmBase != null) {
        updateUSBSlots(vmBase, vmBase);
    }
}
#method_after
public static <T extends VmBase> void updateVmDevices(T entity) {
    if (entity != null) {
        updateUSBSlots(entity, entity);
    }
}
#end_block

#method_before
/**
 * Update the vm devices according to changes made in vm static for new VM
 */
public static <T extends VmBase> void updateVmDevices(T entity, Guid newId) {
    VmBase newVmBase = getBaseObject(entity, newId);
    if (newVmBase != null) {
        updateCdInVmDevice(newVmBase);
        updateBootOrderInVmDevice(newVmBase);
        updateNumOfMonitorsInVmDevice(null, newVmBase);
        updateUSBSlots(null, newVmBase);
        updateMemoryBalloon(null, newVmBase);
    }
}
#method_after
/**
 * Update the vm devices according to changes made in vm static for new VM
 */
public static <T extends VmBase> void updateVmDevices(T entity, Guid newId) {
    if (entity != null) {
        updateCdInVmDevice(entity);
        updateBootOrderInVmDevice(entity);
        updateNumOfMonitorsInVmDevice(null, entity);
        updateUSBSlots(null, entity);
        updateMemoryBalloon(null, entity, true);
    }
}
#end_block

#method_before
public static void copyVmDevices(Guid srcId, Guid dstId, List<DiskImage> disks, List<VmNetworkInterface> ifaces) {
    Guid id;
    VmBase vmBase = DbFacade.getInstance().getVmStaticDAO().get(dstId);
    int diskCount = 0;
    int ifaceCount = 0;
    boolean isVm = (vmBase != null);
    if (!isVm) {
        vmBase = DbFacade.getInstance().getVmTemplateDAO().get(dstId);
    }
    List<VmDevice> devices = dao.getVmDeviceByVmId(srcId);
    String isoPath = vmBase.getiso_path();
    // indicates that VM should have CD either from its own (iso_path) or from the snapshot it was cloned from.
    boolean shouldHaveCD = StringUtils.isNotEmpty(isoPath);
    // indicates if VM has already a non empty CD in DB
    boolean hasAlreadyCD = (!(DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vmBase.getId(), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName())).isEmpty());
    boolean addCD = (!hasAlreadyCD && shouldHaveCD);
    for (VmDevice device : devices) {
        id = Guid.NewGuid();
        Map<String, Object> specParams = new HashMap<String, Object>();
        if (srcId.equals(Guid.Empty)) {
            // update number of monitors
            updateNumOfMonitorsInVmDevice(null, vmBase);
            // add CD if not exists
            if (addCD) {
                setCdPath(specParams, "", isoPath);
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), dstId), VmDeviceType.DISK, VmDeviceType.CDROM, specParams, true, true);
            }
            // updating USB slots
            updateUSBSlots(null, vmBase);
            // add mem balloon if defined
            updateMemoryBalloon(null, vmBase);
            // skip other Blank template devices
            break;
        }
        if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.DISK.getName().equals(device.getDevice())) {
            if (diskCount < disks.size()) {
                id = (disks.get(diskCount++)).getId();
            }
        } else if (VmDeviceType.INTERFACE.getName().equals(device.getType())) {
            if (ifaceCount < ifaces.size()) {
                id = ifaces.get(ifaceCount++).getId();
            }
        } else if (VmDeviceType.VIDEO.getName().equals(device.getType())) {
            specParams.putAll(getMemExpr(vmBase.getnum_of_monitors()));
        } else if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.CDROM.getName().equals(device.getDevice())) {
            // check here is source VM had CD (Vm from snapshot)
            String srcCdPath = (String) device.getSpecParams().get(VdsProperties.Path);
            shouldHaveCD = (!srcCdPath.isEmpty() || shouldHaveCD);
            if (!hasAlreadyCD && shouldHaveCD) {
                setCdPath(specParams, srcCdPath, isoPath);
            } else {
                // CD already exists
                continue;
            }
        }
        device.setId(new VmDeviceId(id, dstId));
        device.setSpecParams(specParams);
        dao.save(device);
    }
    // if VM does not has CD, add an empty CD
    if (!shouldHaveCD) {
        addEmptyCD(dstId);
    }
    // if destination is a VM , update devices boot order
    if (isVm) {
        updateBootOrderInVmDevice(vmBase);
        // create sound card for a desktop VM if not exists
        if (vmBase.getvm_type() == VmType.Desktop) {
            List<VmDevice> list = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdAndType(vmBase.getId(), VmDeviceType.SOUND.getName());
            if (list.size() == 0) {
                VM vm = DbFacade.getInstance().getVmDAO().get(vmBase.getId());
                String soundDevice = VmInfoBuilderBase.getSoundDevice(vm);
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), vmBase.getId()), VmDeviceType.SOUND, VmDeviceType.getSoundDeviceType(soundDevice), new HashMap<String, Object>(), true, true);
            }
        }
    }
}
#method_after
public static void copyVmDevices(Guid srcId, Guid dstId, List<DiskImage> disks, List<VmNetworkInterface> ifaces) {
    Guid id;
    VM vm = DbFacade.getInstance().getVmDAO().get(dstId);
    VmBase vmBase = (vm != null) ? vm.getStaticData() : null;
    int diskCount = 0;
    int ifaceCount = 0;
    boolean isVm = (vmBase != null);
    if (!isVm) {
        vmBase = DbFacade.getInstance().getVmTemplateDAO().get(dstId);
    }
    List<VmDevice> devices = dao.getVmDeviceByVmId(srcId);
    String isoPath = vmBase.getiso_path();
    // indicates that VM should have CD either from its own (iso_path) or from the snapshot it was cloned from.
    boolean shouldHaveCD = StringUtils.isNotEmpty(isoPath);
    // indicates if VM has already a non empty CD in DB
    boolean hasAlreadyCD = (!(DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vmBase.getId(), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName())).isEmpty());
    boolean addCD = (!hasAlreadyCD && shouldHaveCD);
    for (VmDevice device : devices) {
        id = Guid.NewGuid();
        Map<String, Object> specParams = new HashMap<String, Object>();
        if (srcId.equals(Guid.Empty)) {
            // update number of monitors
            updateNumOfMonitorsInVmDevice(null, vmBase);
            // add CD if not exists
            if (addCD) {
                setCdPath(specParams, "", isoPath);
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), dstId), VmDeviceType.DISK, VmDeviceType.CDROM, specParams, true, true);
            }
            // updating USB slots
            updateUSBSlots(null, vmBase);
            // add mem balloon if defined
            updateMemoryBalloon(null, vmBase, vm.isBalloonEnabled());
            // skip other Blank template devices
            break;
        }
        if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.DISK.getName().equals(device.getDevice())) {
            if (diskCount < disks.size()) {
                id = (disks.get(diskCount++)).getId();
            }
        } else if (VmDeviceType.INTERFACE.getName().equals(device.getType())) {
            if (ifaceCount < ifaces.size()) {
                id = ifaces.get(ifaceCount++).getId();
            }
        } else if (VmDeviceType.VIDEO.getName().equals(device.getType())) {
            specParams.putAll(getMemExpr(vmBase.getnum_of_monitors()));
        } else if (VmDeviceType.DISK.getName().equals(device.getType()) && VmDeviceType.CDROM.getName().equals(device.getDevice())) {
            // check here is source VM had CD (Vm from snapshot)
            String srcCdPath = (String) device.getSpecParams().get(VdsProperties.Path);
            shouldHaveCD = (!StringUtils.isEmpty(srcCdPath) || shouldHaveCD);
            if (!hasAlreadyCD && shouldHaveCD) {
                setCdPath(specParams, srcCdPath, isoPath);
            } else {
                // CD already exists
                continue;
            }
        }
        device.setId(new VmDeviceId(id, dstId));
        device.setSpecParams(specParams);
        dao.save(device);
    }
    // if VM does not has CD, add an empty CD
    if (!shouldHaveCD) {
        addEmptyCD(dstId);
    }
    // if destination is a VM , update devices boot order
    if (isVm) {
        updateBootOrderInVmDevice(vmBase);
        // create sound card for a desktop VM if not exists
        if (vmBase.getvm_type() == VmType.Desktop) {
            List<VmDevice> list = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdAndType(vmBase.getId(), VmDeviceType.SOUND.getName());
            if (list.size() == 0) {
                String soundDevice = VmInfoBuilderBase.getSoundDevice(vm);
                addManagedDevice(new VmDeviceId(Guid.NewGuid(), vmBase.getId()), VmDeviceType.SOUND, VmDeviceType.getSoundDeviceType(soundDevice), new HashMap<String, Object>(), true, true);
            }
        }
    }
}
#end_block

#method_before
private static void updateMemoryBalloon(VmBase oldVm, VmBase newVm) {
    boolean hasBalloon = (oldVm != null && oldVm.isBalloonEnabled());
    boolean shouldHaveBalloon = newVm.isBalloonEnabled();
    if (hasBalloon != shouldHaveBalloon) {
        if (!hasBalloon && shouldHaveBalloon) {
            // add a balloon device
            Map<String, Object> specParams = new HashMap<String, Object>();
            specParams.put(VdsProperties.Model, VdsProperties.Virtio);
            addManagedDevice(new VmDeviceId(Guid.NewGuid(), newVm.getId()), VmDeviceType.BALLOON, VmDeviceType.MEMBALLOON, specParams, true, true);
        } else {
            // remove the balloon device
            List<VmDevice> list = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdAndType(newVm.getId(), VmDeviceType.BALLOON.getName());
            removeNumberOfDevices(list, 1);
        }
    }
}
#method_after
private static void updateMemoryBalloon(VmBase oldVm, VmBase newVm, boolean shouldHaveBalloon) {
    Guid id = newVm.getId();
    VM vm = vmDao.get(id);
    boolean hasBalloon = dao.isMemBalloonEnabled(id);
    if (hasBalloon != shouldHaveBalloon) {
        if (!hasBalloon && shouldHaveBalloon) {
            // add a balloon device
            Map<String, Object> specParams = new HashMap<String, Object>();
            specParams.put(VdsProperties.Model, VdsProperties.Virtio);
            addManagedDevice(new VmDeviceId(Guid.NewGuid(), newVm.getId()), VmDeviceType.BALLOON, VmDeviceType.MEMBALLOON, specParams, true, true);
        } else {
            // remove the balloon device
            List<VmDevice> list = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdAndType(newVm.getId(), VmDeviceType.BALLOON.getName());
            removeNumberOfDevices(list, 1);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmMemoryBalloon() {
// TODO Auto-generated method stub
}
#method_after
@Override
protected void buildVmMemoryBalloon() {
// Not supported in old code
}
#end_block

#method_before
public boolean isBalloonEnabled() {
    return mVmStatic.isBalloonEnabled();
}
#method_after
public boolean isBalloonEnabled() {
    return balloonEnabled;
}
#end_block

#method_before
public void setBalloonEnabled(boolean isBallonEnabled) {
    mVmStatic.setBalloonEnabled(isBallonEnabled);
    OnPropertyChanged(new PropertyChangedEventArgs("is_balloon_enabled"));
}
#method_after
public void setBalloonEnabled(boolean isBallonEnabled) {
    balloonEnabled = isBallonEnabled;
    OnPropertyChanged(new PropertyChangedEventArgs("is_balloon_enabled"));
}
#end_block

#method_before
@Override
public boolean isMemBalloonEnabled(Guid vmId) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId);
    Map<String, Object> dbResults = new SimpleJdbcCall(jdbcTemplate).withFunctionName("isMemBalloonEnabled").execute(parameterSource);
    String resultKey = DbFacade.getInstance().getDbEngineDialect().getFunctionReturnKey();
    return dbResults.get(resultKey) != null ? ((Boolean) dbResults.get(resultKey)).booleanValue() : false;
}
#method_after
@Override
public boolean isMemBalloonEnabled(Guid vmId) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId);
    Map<String, Object> dbResults = new SimpleJdbcCall(jdbcTemplate).withFunctionName("isMemBalloonEnabled").execute(parameterSource);
    String resultKey = dialect.getFunctionReturnKey();
    return dbResults.get(resultKey) != null ? ((Boolean) dbResults.get(resultKey)).booleanValue() : false;
}
#end_block

#method_before
public boolean isBalloonEnabled() {
    return this.isBalloonEnabled;
}
#method_after
public boolean isBalloonEnabled() {
    return this.balloonEnabled;
}
#end_block

#method_before
public void setBalloonEnabled(boolean isBalloonEnabled) {
    this.isBalloonEnabled = isBalloonEnabled;
}
#method_after
public void setBalloonEnabled(boolean isBalloonEnabled) {
    this.balloonEnabled = isBalloonEnabled;
}
#end_block

#method_before
private void addCpuPinning(final String compatibilityVersion) {
    final String cpuPinning = vm.getCpuPinning();
    if (Boolean.TRUE.equals(Config.<Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion)) && cpuPinning != null) {
        final XmlRpcStruct pinDict = new XmlRpcStruct();
        for (String pin : cpuPinning.split("_")) {
            final String[] split = pin.split("#");
            pinDict.add(split[0], split[1]);
        }
        createInfo.add(VdsProperties.cpuPinning, pinDict);
    }
}
#method_after
private void addCpuPinning(final String compatibilityVersion) {
    final String cpuPinning = vm.getCpuPinning();
    if (!StringUtils.isEmpty(cpuPinning) && Boolean.TRUE.equals(Config.<Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion)) && cpuPinning != null) {
        final XmlRpcStruct pinDict = new XmlRpcStruct();
        for (String pin : cpuPinning.split("_")) {
            final String[] split = pin.split("#");
            pinDict.add(split[0], split[1]);
        }
        createInfo.add(VdsProperties.cpuPinning, pinDict);
    }
}
#end_block

#method_before
private void addDevice(XmlRpcStruct struct, VmDevice vmDevice, String path) {
    Map<String, Object> specParams = (vmDevice.getSpecParams() == null) ? Collections.<String, Object>emptyMap() : vmDevice.getSpecParams();
    struct.add(VdsProperties.Path, path);
    struct.add(VdsProperties.SpecParams, specParams);
    struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
    addBootOrder(vmDevice, struct);
    devices.add(struct);
    addToManagedDevices(vmDevice);
}
#method_after
private void addDevice(XmlRpcStruct struct, VmDevice vmDevice, String path) {
    Map<String, Object> specParams = (vmDevice.getSpecParams() == null) ? Collections.<String, Object>emptyMap() : vmDevice.getSpecParams();
    if (path != null) {
        struct.add(VdsProperties.Path, path);
    }
    struct.add(VdsProperties.SpecParams, specParams);
    struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
    addBootOrder(vmDevice, struct);
    devices.add(struct);
    addToManagedDevices(vmDevice);
}
#end_block

#method_before
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "");
        XmlRpcStruct struct = new XmlRpcStruct();
        struct.add(VdsProperties.Type, vmDevice.getType());
        struct.add(VdsProperties.Device, vmDevice.getDevice());
        addDevice(struct, vmDevice, null);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            XmlRpcStruct struct = new XmlRpcStruct();
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            addDevice(struct, vmDevice, null);
            // only one memory balloon should exist
            break;
        }
    }
}
#method_after
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "");
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#end_block

#method_before
protected void buildVmProperties() {
    createInfo.add(VdsProperties.vm_guid, vm.getId().toString());
    createInfo.add(VdsProperties.vm_name, vm.getvm_name());
    createInfo.add(VdsProperties.mem_size_mb, vm.getvm_mem_size_mb());
    createInfo.add(VdsProperties.num_of_cpus, (new Integer(vm.getnum_of_cpus())).toString());
    if (Config.<Boolean>GetValue(ConfigValues.SendSMPOnRunVm)) {
        createInfo.add(VdsProperties.cores_per_socket, (Integer.toString(vm.getcpu_per_socket())));
    }
    if (Config.<Boolean>GetValue(ConfigValues.CpuPinningEnabled) && vm.getCpuPinning() != null) {
        createInfo.add(VdsProperties.cpuPinning, vm.getCpuPinning());
    }
    createInfo.add(VdsProperties.emulatedMachine, Config.<String>GetValue(ConfigValues.EmulatedMachine, vm.getvds_group_compatibility_version().toString()));
    // enabled.
    if (Config.<Boolean>GetValue(ConfigValues.SSLEnabled)) {
        createInfo.add(VdsProperties.spiceSslCipherSuite, Config.<String>GetValue(ConfigValues.CipherSuite));
        createInfo.add(VdsProperties.SpiceSecureChannels, Config.<String>GetValue(ConfigValues.SpiceSecureChannels, vm.getvds_group_compatibility_version().toString()));
    }
    createInfo.add(VdsProperties.kvmEnable, vm.getkvm_enable().toString().toLowerCase());
    createInfo.add(VdsProperties.acpiEnable, vm.getacpi_enable().toString().toLowerCase());
    createInfo.add(VdsProperties.Custom, VmPropertiesUtils.getInstance().getVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData()));
    // "qemu", "kvm"
    createInfo.add(VdsProperties.vm_type, "kvm");
    if (vm.getRunAndPause()) {
        createInfo.add(VdsProperties.launch_paused_param, "true");
    }
    if (vm.getvds_group_cpu_flags_data() != null) {
        createInfo.add(VdsProperties.cpuType, vm.getvds_group_cpu_flags_data());
    }
    createInfo.add(VdsProperties.niceLevel, (new Integer(vm.getnice_level())).toString());
    if (vm.getstatus() == VMStatus.Suspended && !StringHelper.isNullOrEmpty(vm.gethibernation_vol_handle())) {
        createInfo.add(VdsProperties.hiberVolHandle, vm.gethibernation_vol_handle());
    }
    createInfo.add(VdsProperties.KeyboardLayout, Config.<String>GetValue(ConfigValues.VncKeyboardLayout));
    if (vm.getvm_os().isLinux()) {
        createInfo.add(VdsProperties.PitReinjection, "false");
    }
    if (vm.getdisplay_type() == DisplayType.vnc) {
        createInfo.add(VdsProperties.TabletEnable, "true");
    }
    createInfo.add(VdsProperties.transparent_huge_pages, vm.getTransparentHugePages() ? "true" : "false");
}
#method_after
protected void buildVmProperties() {
    createInfo.add(VdsProperties.vm_guid, vm.getId().toString());
    createInfo.add(VdsProperties.vm_name, vm.getvm_name());
    createInfo.add(VdsProperties.mem_size_mb, vm.getvm_mem_size_mb());
    createInfo.add(VdsProperties.num_of_cpus, (new Integer(vm.getnum_of_cpus())).toString());
    if (Config.<Boolean>GetValue(ConfigValues.SendSMPOnRunVm)) {
        createInfo.add(VdsProperties.cores_per_socket, (Integer.toString(vm.getcpu_per_socket())));
    }
    final String compatibilityVersion = vm.getvds_group_compatibility_version().toString();
    addCpuPinning(compatibilityVersion);
    createInfo.add(VdsProperties.emulatedMachine, Config.<String>GetValue(ConfigValues.EmulatedMachine, compatibilityVersion));
    // enabled.
    if (Config.<Boolean>GetValue(ConfigValues.SSLEnabled)) {
        createInfo.add(VdsProperties.spiceSslCipherSuite, Config.<String>GetValue(ConfigValues.CipherSuite));
        createInfo.add(VdsProperties.SpiceSecureChannels, Config.<String>GetValue(ConfigValues.SpiceSecureChannels, compatibilityVersion));
    }
    createInfo.add(VdsProperties.kvmEnable, vm.getkvm_enable().toString().toLowerCase());
    createInfo.add(VdsProperties.acpiEnable, vm.getacpi_enable().toString().toLowerCase());
    createInfo.add(VdsProperties.Custom, VmPropertiesUtils.getInstance().getVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData()));
    // "qemu", "kvm"
    createInfo.add(VdsProperties.vm_type, "kvm");
    if (vm.getRunAndPause()) {
        createInfo.add(VdsProperties.launch_paused_param, "true");
    }
    if (vm.getvds_group_cpu_flags_data() != null) {
        createInfo.add(VdsProperties.cpuType, vm.getvds_group_cpu_flags_data());
    }
    createInfo.add(VdsProperties.niceLevel, (new Integer(vm.getnice_level())).toString());
    if (vm.getstatus() == VMStatus.Suspended && !StringHelper.isNullOrEmpty(vm.gethibernation_vol_handle())) {
        createInfo.add(VdsProperties.hiberVolHandle, vm.gethibernation_vol_handle());
    }
    createInfo.add(VdsProperties.KeyboardLayout, Config.<String>GetValue(ConfigValues.VncKeyboardLayout));
    if (vm.getvm_os().isLinux()) {
        createInfo.add(VdsProperties.PitReinjection, "false");
    }
    if (vm.getdisplay_type() == DisplayType.vnc) {
        createInfo.add(VdsProperties.TabletEnable, "true");
    }
    createInfo.add(VdsProperties.transparent_huge_pages, vm.getTransparentHugePages() ? "true" : "false");
}
#end_block

#method_before
protected List<Disk> getSortedDisks() {
    // order first by drive numbers and then order by boot for the bootable
    // drive to be first (important for IDE to be index 0) !
    List<Disk> diskImages = new ArrayList<Disk>(vm.getDiskMap().values());
    Collections.sort(diskImages, new DiskImageByDriveMappingComparator());
    Collections.sort(diskImages, Collections.reverseOrder(new DiskImageByBootComparator()));
    return diskImages;
}
#method_after
protected List<Disk> getSortedDisks() {
    // order first by drive numbers and then order by boot for the bootable
    // drive to be first (important for IDE to be index 0) !
    List<Disk> diskImages = new ArrayList<Disk>(vm.getDiskMap().values());
    Collections.sort(diskImages, new DiskImageByDiskAliasComparator());
    Collections.sort(diskImages, Collections.reverseOrder(new DiskImageByBootComparator()));
    return diskImages;
}
#end_block

#method_before
@Test
public void stringToCpuTune() {
    CpuTune cpuTune = VmMapper.stringToCpuTune("0#0");
    assertNotNull(cpuTune);
    assertNotNull(cpuTune.getVcpupin());
    assertEquals(1, cpuTune.getVcpupin().size());
    assertEquals(0, cpuTune.getVcpupin().get(0).getVcpu());
    assertEquals("0", cpuTune.getVcpupin().get(0).getCpuset());
}
#method_after
@Test
public void stringToCpuTune() {
    CpuTune cpuTune = VmMapper.stringToCpuTune("0#0");
    assertNotNull(cpuTune);
    assertNotNull(cpuTune.getVcpuPin());
    assertEquals(1, cpuTune.getVcpuPin().size());
    assertEquals(0, cpuTune.getVcpuPin().get(0).getVcpu());
    assertEquals("0", cpuTune.getVcpuPin().get(0).getCpuSet());
}
#end_block

#method_before
@Test()
public void stringToVCpupinIntervalsList() {
    VCpuPin pin = VmMapper.stringToVCpupin("1#1-4,6");
    assertEquals(1, pin.getVcpu());
    assertEquals("1-4,6", pin.getCpuset());
}
#method_after
@Test()
public void stringToVCpupinIntervalsList() {
    VCpuPin pin = VmMapper.stringToVCpupin("1#1-4,6");
    assertEquals(1, pin.getVcpu());
    assertEquals("1-4,6", pin.getCpuSet());
}
#end_block

#method_before
@Test()
public void stringToVCpupinSimple() {
    VCpuPin pin = VmMapper.stringToVCpupin("1#1");
    assertEquals(1, pin.getVcpu());
    assertEquals("1", pin.getCpuset());
}
#method_after
@Test()
public void stringToVCpupinSimple() {
    VCpuPin pin = VmMapper.stringToVCpupin("1#1");
    assertEquals(1, pin.getVcpu());
    assertEquals("1", pin.getCpuSet());
}
#end_block

#method_before
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setvm_name(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setdescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setmem_size_mb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getmem_size_mb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setmem_size_mb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setvmt_guid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setvds_group_id(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu() && vm.getCpu().isSetTopology()) {
        if (vm.getCpu().getTopology().getCores() != null) {
            staticVm.setcpu_per_socket(vm.getCpu().getTopology().getCores());
        }
        if (vm.getCpu().getTopology().getSockets() != null) {
            staticVm.setnum_of_sockets(vm.getCpu().getTopology().getSockets());
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setos(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setdefault_boot_sequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setvm_type(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setis_stateless(vm.isStateless());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setauto_startup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setpriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setorigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setdefault_display_type(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setnum_of_monitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowReconnect()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowReconnect());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setdedicated_vm_for_vds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setdomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.settime_zone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetUsb() && vm.getUsb().isSetEnabled()) {
        staticVm.setusb_policy(vm.getUsb().isEnabled() ? UsbPolicy.ENABLED_LEGACY : UsbPolicy.DISABLED);
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    if (vm.isSetCpu() && vm.getCpu().isSetCputune()) {
        staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCputune()));
    }
    return staticVm;
}
#method_after
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setvm_name(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setdescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setmem_size_mb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getmem_size_mb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setmem_size_mb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setvmt_guid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setvds_group_id(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu() && vm.getCpu().isSetTopology()) {
        if (vm.getCpu().getTopology().getCores() != null) {
            staticVm.setcpu_per_socket(vm.getCpu().getTopology().getCores());
        }
        if (vm.getCpu().getTopology().getSockets() != null) {
            staticVm.setnum_of_sockets(vm.getCpu().getTopology().getSockets());
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setos(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setdefault_boot_sequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setvm_type(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setis_stateless(vm.isStateless());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setauto_startup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setpriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setorigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setdefault_display_type(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setnum_of_monitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowReconnect()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowReconnect());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setdedicated_vm_for_vds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setdomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.settime_zone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetUsb() && vm.getUsb().isSetEnabled()) {
        staticVm.setusb_policy(vm.getUsb().isEnabled() ? UsbPolicy.ENABLED_LEGACY : UsbPolicy.DISABLED);
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    if (vm.isSetCpu() && vm.getCpu().isSetCpuTune()) {
        staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getvm_name());
    model.setDescription(entity.getvm_description());
    model.setMemory((long) entity.getmem_size_mb() * BYTES_PER_MB);
    if (entity.getvmt_guid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getvmt_guid().toString());
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
        if (entity.getstatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getvm_os() != null || entity.getboot_sequence() != null || entity.getkernel_url() != null || entity.getinitrd_url() != null || entity.getkernel_params() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getvm_os() != null) {
            OsType osType = VmMapper.map(entity.getos(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getboot_sequence() != null) {
            for (Boot boot : map(entity.getdefault_boot_sequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getkernel_url());
        os.setInitrd(entity.getinitrd_url());
        os.setCmdline(entity.getkernel_params());
        model.setOs(os);
    }
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getnum_of_sockets());
    topology.setCores(entity.getnum_of_cpus() / entity.getnum_of_sockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    cpu.setCputune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getrun_on_vds() != null) {
        model.setHost(new Host());
        model.getHost().setId(entity.getrun_on_vds().toString());
    }
    if (entity.getdisplay_type() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getdisplay_type(), null));
        model.getDisplay().setAddress(entity.getdisplay_ip());
        Integer displayPort = entity.getdisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getdisplay_secure_port();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getnum_of_monitors());
        model.getDisplay().setAllowReconnect(entity.getAllowConsoleReconnect());
    }
    model.setType(map(entity.getvm_type(), null));
    model.setStateless(entity.getis_stateless());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.getauto_startup());
    model.getHighAvailability().setPriority(entity.getpriority());
    if (entity.getorigin() != null) {
        model.setOrigin(map(entity.getorigin(), null));
    }
    if (entity.getvm_creation_date() != null) {
        model.setCreationTime(DateMapper.map(entity.getvm_creation_date(), null));
    }
    if (entity.getelapsed_time() != null) {
        if (entity.getelapsed_time() == 0) {
            model.setStartTime(null);
        } else {
            model.setStartTime(DateMapper.map(new BigDecimal(entity.getelapsed_time()), null));
        }
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getdedicated_vm_for_vds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getdedicated_vm_for_vds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getvm_domain() != null && !entity.getvm_domain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getvm_domain());
        model.setDomain(domain);
    }
    if (entity.getvm_ip() != null && !entity.getvm_ip().isEmpty()) {
        model.setGuestInfo(new GuestInfo());
        model.getGuestInfo().setIps(new IPs());
        for (String item : entity.getvm_ip().split(" ")) {
            if (!item.equals("")) {
                IP ip = new IP();
                ip.setAddress(item.trim());
                model.getGuestInfo().getIps().getIPs().add(ip);
            }
        }
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.gettime_zone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getusb_policy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getusb_policy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getusb_policy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getvm_name());
    model.setDescription(entity.getvm_description());
    model.setMemory((long) entity.getmem_size_mb() * BYTES_PER_MB);
    if (entity.getvmt_guid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getvmt_guid().toString());
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
        if (entity.getstatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getvm_os() != null || entity.getboot_sequence() != null || entity.getkernel_url() != null || entity.getinitrd_url() != null || entity.getkernel_params() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getvm_os() != null) {
            OsType osType = VmMapper.map(entity.getos(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getboot_sequence() != null) {
            for (Boot boot : map(entity.getdefault_boot_sequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getkernel_url());
        os.setInitrd(entity.getinitrd_url());
        os.setCmdline(entity.getkernel_params());
        model.setOs(os);
    }
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getnum_of_sockets());
    topology.setCores(entity.getnum_of_cpus() / entity.getnum_of_sockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getrun_on_vds() != null) {
        model.setHost(new Host());
        model.getHost().setId(entity.getrun_on_vds().toString());
    }
    if (entity.getdisplay_type() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getdisplay_type(), null));
        model.getDisplay().setAddress(entity.getdisplay_ip());
        Integer displayPort = entity.getdisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getdisplay_secure_port();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getnum_of_monitors());
        model.getDisplay().setAllowReconnect(entity.getAllowConsoleReconnect());
    }
    model.setType(map(entity.getvm_type(), null));
    model.setStateless(entity.getis_stateless());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.getauto_startup());
    model.getHighAvailability().setPriority(entity.getpriority());
    if (entity.getorigin() != null) {
        model.setOrigin(map(entity.getorigin(), null));
    }
    if (entity.getvm_creation_date() != null) {
        model.setCreationTime(DateMapper.map(entity.getvm_creation_date(), null));
    }
    if (entity.getelapsed_time() != null) {
        if (entity.getelapsed_time() == 0) {
            model.setStartTime(null);
        } else {
            model.setStartTime(DateMapper.map(new BigDecimal(entity.getelapsed_time()), null));
        }
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getdedicated_vm_for_vds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getdedicated_vm_for_vds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getvm_domain() != null && !entity.getvm_domain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getvm_domain());
        model.setDomain(domain);
    }
    if (entity.getvm_ip() != null && !entity.getvm_ip().isEmpty()) {
        model.setGuestInfo(new GuestInfo());
        model.getGuestInfo().setIps(new IPs());
        for (String item : entity.getvm_ip().split(" ")) {
            if (!item.equals("")) {
                IP ip = new IP();
                ip.setAddress(item.trim());
                model.getGuestInfo().getIps().getIPs().add(ip);
            }
        }
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.gettime_zone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getusb_policy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getusb_policy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getusb_policy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    return model;
}
#end_block

#method_before
static String cpuTuneToString(final CpuTune tune) {
    final StringBuilder builder = new StringBuilder();
    boolean first = true;
    for (final VCpuPin pin : tune.getVcpupin()) {
        if (first) {
            first = false;
        } else {
            builder.append("_");
        }
        builder.append(pin.getVcpu()).append('#').append(pin.getCpuset());
    }
    return builder.toString();
}
#method_after
static String cpuTuneToString(final CpuTune tune) {
    final StringBuilder builder = new StringBuilder();
    boolean first = true;
    for (final VCpuPin pin : tune.getVcpuPin()) {
        if (first) {
            first = false;
        } else {
            builder.append("_");
        }
        builder.append(pin.getVcpu()).append('#').append(pin.getCpuSet());
    }
    return builder.toString();
}
#end_block

#method_before
static CpuTune stringToCpuTune(String cpuPinning) {
    if (cpuPinning == null) {
        return null;
    }
    final CpuTune cpuTune = new CpuTune();
    for (String strCpu : cpuPinning.split("_")) {
        VCpuPin pin = stringToVCpupin(strCpu);
        cpuTune.getVcpupin().add(pin);
    }
    return cpuTune;
}
#method_after
static CpuTune stringToCpuTune(String cpuPinning) {
    if (cpuPinning == null) {
        return null;
    }
    final CpuTune cpuTune = new CpuTune();
    for (String strCpu : cpuPinning.split("_")) {
        VCpuPin pin = stringToVCpupin(strCpu);
        cpuTune.getVcpuPin().add(pin);
    }
    return cpuTune;
}
#end_block

#method_before
static VCpuPin stringToVCpupin(final String strCpu) {
    final String[] strPin = strCpu.split("#");
    if (strPin.length != 2) {
        throw new IllegalArgumentException("Bad format: " + strCpu);
    }
    final VCpuPin pin = new VCpuPin();
    try {
        pin.setVcpu(Integer.parseInt(strPin[0]));
    } catch (NumberFormatException e) {
        throw new IllegalArgumentException("Bad format: " + strCpu, e);
    }
    if (strPin[1].matches("\\^?(\\d(\\-\\d)?)(,\\^?((\\d(\\-\\d)?)))*")) {
        pin.setCpuset(strPin[1]);
    } else {
        throw new IllegalArgumentException("Bad format: " + strPin[1]);
    }
    return pin;
}
#method_after
static VCpuPin stringToVCpupin(final String strCpu) {
    final String[] strPin = strCpu.split("#");
    if (strPin.length != 2) {
        throw new IllegalArgumentException("Bad format: " + strCpu);
    }
    final VCpuPin pin = new VCpuPin();
    try {
        pin.setVcpu(Integer.parseInt(strPin[0]));
    } catch (NumberFormatException e) {
        throw new IllegalArgumentException("Bad format: " + strCpu, e);
    }
    if (strPin[1].matches("\\^?(\\d(\\-\\d)?)(,\\^?((\\d(\\-\\d)?)))*")) {
        pin.setCpuSet(strPin[1]);
    } else {
        throw new IllegalArgumentException("Bad format: " + strPin[1]);
    }
    return pin;
}
#end_block

#method_before
public void WriteStartElement(String namespaceURI, String localName) {
    try {
        writer.writeStartElement(namespaceURI, localName);
    } catch (XMLStreamException e) {
        throw new RuntimeException("Failed to write start element", e);
    }
}
#method_after
public void WriteStartElement(String localName) {
    try {
        writer.writeStartElement(localName);
    } catch (XMLStreamException e) {
        throw new RuntimeException("Failed to write start element", e);
    }
}
#end_block

#method_before
public void writeElement(String namespaceUri, String name, String content) {
    WriteStartElement(namespaceUri, name);
    WriteRaw(content);
    WriteEndElement();
}
#method_after
public void writeElement(String name, String content) {
    WriteStartElement(name);
    WriteRaw(content);
    WriteEndElement();
}
#end_block

#method_before
@Override
public void BuildReference() {
    _writer.WriteStartElement(OVF_URI, "References");
    for (DiskImage image : _images) {
        _writer.WriteStartElement(OVF_URI, "File");
        _writer.WriteAttributeString(OVF_URI, "href", OvfParser.CreateImageFile(image));
        _writer.WriteAttributeString(OVF_URI, "id", image.getImageId().toString());
        _writer.WriteAttributeString(OVF_URI, "size", (new Long(image.getsize())).toString());
        _writer.WriteAttributeString(OVF_URI, "description", StringUtils.defaultString(image.getdescription()));
        _writer.WriteEndElement();
    }
    for (VmNetworkInterface iface : vmBase.getInterfaces()) {
        _writer.WriteStartElement(OVF_URI, "Nic");
        _writer.WriteAttributeString(OVF_URI, "id", iface.getId().toString());
        _writer.WriteEndElement();
    }
    _writer.WriteEndElement();
}
#method_after
@Override
public void BuildReference() {
    _writer.WriteStartElement("References");
    for (DiskImage image : _images) {
        _writer.WriteStartElement("File");
        _writer.WriteAttributeString(OVF_URI, "href", OvfParser.CreateImageFile(image));
        _writer.WriteAttributeString(OVF_URI, "id", image.getImageId().toString());
        _writer.WriteAttributeString(OVF_URI, "size", String.valueOf(image.getsize()));
        _writer.WriteAttributeString(OVF_URI, "description", StringUtils.defaultString(image.getdescription()));
        _writer.WriteEndElement();
    }
    for (VmNetworkInterface iface : vmBase.getInterfaces()) {
        _writer.WriteStartElement("Nic");
        _writer.WriteAttributeString(OVF_URI, "id", iface.getId().toString());
        _writer.WriteEndElement();
    }
    _writer.WriteEndElement();
}
#end_block

#method_before
@Override
public void BuildNetwork() {
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":NetworkSection_Type");
    _writer.WriteStartElement(OVF_URI, "Info");
    _writer.WriteRaw("List of networks");
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Network");
    _writer.WriteAttributeString(OVF_URI, "name", "Network 1");
    _writer.WriteEndElement();
    _writer.WriteEndElement();
}
#method_after
@Override
public void BuildNetwork() {
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":NetworkSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("List of networks");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Network");
    _writer.WriteAttributeString(OVF_URI, "name", "Network 1");
    _writer.WriteEndElement();
    _writer.WriteEndElement();
}
#end_block

#method_before
@Override
public void BuildDisk() {
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":DiskSection_Type");
    _writer.WriteStartElement(OVF_URI, "Info");
    _writer.WriteRaw("List of Virtual Disks");
    _writer.WriteEndElement();
    for (DiskImage image : _images) {
        _writer.WriteStartElement(OVF_URI, "Disk");
        _writer.WriteAttributeString(OVF_URI, "diskId", image.getImageId().toString());
        _writer.WriteAttributeString(OVF_URI, "size", String.valueOf(BytesToGigabyte(image.getsize())));
        _writer.WriteAttributeString(OVF_URI, "actual_size", String.valueOf(BytesToGigabyte(image.getactual_size())));
        _writer.WriteAttributeString(OVF_URI, "vm_snapshot_id", (image.getvm_snapshot_id() != null) ? image.getvm_snapshot_id().getValue().toString() : "");
        if (image.getParentId().equals(Guid.Empty)) {
            _writer.WriteAttributeString(OVF_URI, "parentRef", "");
        } else {
            int i = 0;
            while (_images.get(i).getImageId().equals(image.getParentId())) i++;
            List<DiskImage> res = _images.subList(i, _images.size() - 1);
            if (res.size() > 0) {
                _writer.WriteAttributeString(OVF_URI, "parentRef", OvfParser.CreateImageFile(res.get(0)));
            } else {
                _writer.WriteAttributeString(OVF_URI, "parentRef", "");
            }
        }
        _writer.WriteAttributeString(OVF_URI, "fileRef", OvfParser.CreateImageFile(image));
        String format = "";
        switch(image.getvolume_format()) {
            case RAW:
                format = "http://www.vmware.com/specifications/vmdk.html#sparse";
                break;
            case COW:
                format = "http://www.gnome.org/~markmc/qcow-image-format.html";
                break;
            case Unassigned:
                break;
        }
        _writer.WriteAttributeString(OVF_URI, "format", format);
        _writer.WriteAttributeString(OVF_URI, "volume-format", image.getvolume_format().toString());
        _writer.WriteAttributeString(OVF_URI, "volume-type", image.getvolume_type().toString());
        _writer.WriteAttributeString(OVF_URI, "disk-interface", image.getDiskInterface().toString());
        _writer.WriteAttributeString(OVF_URI, "boot", (new Boolean(image.isBoot())).toString());
        if (image.getDiskAlias() != null) {
            _writer.WriteAttributeString(OVF_URI, "disk-alias", image.getDiskAlias());
        }
        if (image.getDiskDescription() != null) {
            _writer.WriteAttributeString(OVF_URI, "disk-description", image.getDiskDescription());
        }
        _writer.WriteAttributeString(OVF_URI, "wipe-after-delete", (new Boolean(image.isWipeAfterDelete())).toString());
        _writer.WriteEndElement();
    }
    _writer.WriteEndElement();
}
#method_after
@Override
public void BuildDisk() {
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":DiskSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("List of Virtual Disks");
    _writer.WriteEndElement();
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Disk");
        _writer.WriteAttributeString(OVF_URI, "diskId", image.getImageId().toString());
        _writer.WriteAttributeString(OVF_URI, "size", String.valueOf(BytesToGigabyte(image.getsize())));
        _writer.WriteAttributeString(OVF_URI, "actual_size", String.valueOf(BytesToGigabyte(image.getactual_size())));
        _writer.WriteAttributeString(OVF_URI, "vm_snapshot_id", (image.getvm_snapshot_id() != null) ? image.getvm_snapshot_id().getValue().toString() : "");
        if (image.getParentId().equals(Guid.Empty)) {
            _writer.WriteAttributeString(OVF_URI, "parentRef", "");
        } else {
            int i = 0;
            while (_images.get(i).getImageId().equals(image.getParentId())) i++;
            List<DiskImage> res = _images.subList(i, _images.size() - 1);
            if (res.size() > 0) {
                _writer.WriteAttributeString(OVF_URI, "parentRef", OvfParser.CreateImageFile(res.get(0)));
            } else {
                _writer.WriteAttributeString(OVF_URI, "parentRef", "");
            }
        }
        _writer.WriteAttributeString(OVF_URI, "fileRef", OvfParser.CreateImageFile(image));
        String format = "";
        switch(image.getvolume_format()) {
            case RAW:
                format = "http://www.vmware.com/specifications/vmdk.html#sparse";
                break;
            case COW:
                format = "http://www.gnome.org/~markmc/qcow-image-format.html";
                break;
            case Unassigned:
                break;
        }
        _writer.WriteAttributeString(OVF_URI, "format", format);
        _writer.WriteAttributeString(OVF_URI, "volume-format", image.getvolume_format().toString());
        _writer.WriteAttributeString(OVF_URI, "volume-type", image.getvolume_type().toString());
        _writer.WriteAttributeString(OVF_URI, "disk-interface", image.getDiskInterface().toString());
        _writer.WriteAttributeString(OVF_URI, "boot", String.valueOf(image.isBoot()));
        if (image.getDiskAlias() != null) {
            _writer.WriteAttributeString(OVF_URI, "disk-alias", image.getDiskAlias());
        }
        if (image.getDiskDescription() != null) {
            _writer.WriteAttributeString(OVF_URI, "disk-description", image.getDiskDescription());
        }
        _writer.WriteAttributeString(OVF_URI, "wipe-after-delete", (new Boolean(image.isWipeAfterDelete())).toString());
        _writer.WriteEndElement();
    }
    _writer.WriteEndElement();
}
#end_block

#method_before
@Override
public void BuildVirtualSystem() {
    // General Vm
    _writer.WriteStartElement(OVF_URI, "Content");
    _writer.WriteAttributeString(OVF_URI, "id", "out");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":VirtualSystem_Type");
    // General Data
    WriteGeneralData();
    // Application List
    WriteAppList();
    // Content Items
    WriteContentItems();
    // End Content tag
    _writer.WriteEndElement();
}
#method_after
@Override
public void BuildVirtualSystem() {
    // General Vm
    _writer.WriteStartElement("Content");
    _writer.WriteAttributeString(OVF_URI, "id", "out");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":VirtualSystem_Type");
    // General Data
    WriteGeneralData();
    // Application List
    WriteAppList();
    // Content Items
    WriteContentItems();
    // End Content tag
    _writer.WriteEndElement();
}
#end_block

#method_before
protected void writeOtherDevices(VmBase vmBase, XmlTextWriter write) {
    List<VmDevice> devices = vmBase.getUnmanagedDeviceList();
    // sound cards are treated as managed devices but are exported using the OTHER OVF ResourceType
    Collection<VmDevice> managedDevices = vmBase.getManagedVmDeviceMap().values();
    for (VmDevice device : managedDevices) {
        if (VmDeviceType.SOUND.getName().equals(device.getType())) {
            devices.add(device);
        }
    }
    for (VmDevice vmDevice : devices) {
        _writer.WriteStartElement(OVF_URI, "Item");
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.OTHER);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw((String.valueOf(vmDevice.getId().getDeviceId())));
        _writer.WriteEndElement();
        writeVmDeviceInfo(vmDevice);
        // item
        _writer.WriteEndElement();
    }
}
#method_after
protected void writeOtherDevices(VmBase vmBase, XmlTextWriter write) {
    List<VmDevice> devices = vmBase.getUnmanagedDeviceList();
    Collection<VmDevice> managedDevices = vmBase.getManagedVmDeviceMap().values();
    for (VmDevice device : managedDevices) {
        if (VmDeviceCommonUtils.isSpecialDevice(device.getDevice(), device.getType())) {
            devices.add(device);
        }
    }
    for (VmDevice vmDevice : devices) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.OTHER);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(vmDevice.getId().getDeviceId().toString());
        _writer.WriteEndElement();
        writeVmDeviceInfo(vmDevice);
        // item
        _writer.WriteEndElement();
    }
}
#end_block

#method_before
protected void writeMonitors(VmBase vmBase) {
    Collection<VmDevice> devices = vmBase.getManagedVmDeviceMap().values();
    int numOfMonitors = vmBase.getnum_of_monitors();
    int i = 0;
    for (VmDevice vmDevice : devices) {
        if (vmDevice.getType().equals(VmDeviceType.VIDEO.getName())) {
            _writer.WriteStartElement(OVF_URI, "Item");
            _writer.WriteStartElement(RASD_URI, "Caption");
            _writer.WriteRaw("Graphical Controller");
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "InstanceId");
            _writer.WriteRaw((String.valueOf(vmDevice.getId().getDeviceId())));
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "ResourceType");
            _writer.WriteRaw(OvfHardware.Monitor);
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
            // we should write number of monitors for each entry for backward compatibility
            _writer.WriteRaw(String.valueOf(numOfMonitors));
            _writer.WriteEndElement();
            writeVmDeviceInfo(vmDevice);
            // item
            _writer.WriteEndElement();
            if (i++ == numOfMonitors) {
                break;
            }
        }
    }
}
#method_after
protected void writeMonitors(VmBase vmBase) {
    Collection<VmDevice> devices = vmBase.getManagedVmDeviceMap().values();
    int numOfMonitors = vmBase.getnum_of_monitors();
    int i = 0;
    for (VmDevice vmDevice : devices) {
        if (vmDevice.getType().equals(VmDeviceType.VIDEO.getName())) {
            _writer.WriteStartElement("Item");
            _writer.WriteStartElement(RASD_URI, "Caption");
            _writer.WriteRaw("Graphical Controller");
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "InstanceId");
            _writer.WriteRaw(vmDevice.getId().getDeviceId().toString());
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "ResourceType");
            _writer.WriteRaw(OvfHardware.Monitor);
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
            // we should write number of monitors for each entry for backward compatibility
            _writer.WriteRaw(String.valueOf(numOfMonitors));
            _writer.WriteEndElement();
            writeVmDeviceInfo(vmDevice);
            // item
            _writer.WriteEndElement();
            if (i++ == numOfMonitors) {
                break;
            }
        }
    }
}
#end_block

#method_before
protected void writeCd(VmBase vmBase) {
    Collection<VmDevice> devices = vmBase.getManagedVmDeviceMap().values();
    for (VmDevice vmDevice : devices) {
        if (vmDevice.getType().equals(VmDeviceType.CDROM.getName())) {
            _writer.WriteStartElement(OVF_URI, "Item");
            _writer.WriteStartElement(RASD_URI, "Caption");
            _writer.WriteRaw("CDROM");
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "InstanceId");
            _writer.WriteRaw((String.valueOf(vmDevice.getId().getDeviceId())));
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "ResourceType");
            _writer.WriteRaw(OvfHardware.CD);
            _writer.WriteEndElement();
            writeVmDeviceInfo(vmDevice);
            // item
            _writer.WriteEndElement();
            // only one CD is currently supported
            break;
        }
    }
}
#method_after
protected void writeCd(VmBase vmBase) {
    Collection<VmDevice> devices = vmBase.getManagedVmDeviceMap().values();
    for (VmDevice vmDevice : devices) {
        if (vmDevice.getType().equals(VmDeviceType.CDROM.getName())) {
            _writer.WriteStartElement("Item");
            _writer.WriteStartElement(RASD_URI, "Caption");
            _writer.WriteRaw("CDROM");
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "InstanceId");
            _writer.WriteRaw(vmDevice.getId().getDeviceId().toString());
            _writer.WriteEndElement();
            _writer.WriteStartElement(RASD_URI, "ResourceType");
            _writer.WriteRaw(OvfHardware.CD);
            _writer.WriteEndElement();
            writeVmDeviceInfo(vmDevice);
            // item
            _writer.WriteEndElement();
            // only one CD is currently supported
            break;
        }
    }
}
#end_block

#method_before
private void writeVmDeviceInfo(VmDevice vmDevice) {
    _writer.WriteStartElement(OVF_URI, "Type");
    _writer.WriteRaw(String.valueOf(vmDevice.getType()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Device");
    _writer.WriteRaw(String.valueOf(vmDevice.getDevice()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Address");
    _writer.WriteRaw(vmDevice.getAddress());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "BootOrder");
    _writer.WriteRaw(String.valueOf(vmDevice.getBootOrder()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "IsPlugged");
    _writer.WriteRaw(String.valueOf(vmDevice.getIsPlugged()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "IsReadOnly");
    _writer.WriteRaw(String.valueOf(vmDevice.getIsReadOnly()));
    _writer.WriteEndElement();
}
#method_after
private void writeVmDeviceInfo(VmDevice vmDevice) {
    _writer.WriteStartElement(OvfProperties.VMD_TYPE);
    _writer.WriteRaw(String.valueOf(vmDevice.getType()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OvfProperties.VMD_DEVICE);
    _writer.WriteRaw(String.valueOf(vmDevice.getDevice()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OvfProperties.VMD_ADDRESS);
    _writer.WriteRaw(vmDevice.getAddress());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OvfProperties.VMD_BOOT_ORDER);
    _writer.WriteRaw(String.valueOf(vmDevice.getBootOrder()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OvfProperties.VMD_IS_PLUGGED);
    _writer.WriteRaw(String.valueOf(vmDevice.getIsPlugged()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OvfProperties.VMD_IS_READONLY);
    _writer.WriteRaw(String.valueOf(vmDevice.getIsReadOnly()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OvfProperties.VMD_ALIAS);
    _writer.WriteRaw(String.valueOf(vmDevice.getAlias()));
    _writer.WriteEndElement();
    if (vmDevice.getSpecParams() != null && vmDevice.getSpecParams().size() != 0) {
        _writer.WriteStartElement(OvfProperties.VMD_SPEC_PARAMS);
        _writer.WriteMap(vmDevice.getSpecParams());
        _writer.WriteEndElement();
    }
}
#end_block

#method_before
@Override
protected void WriteGeneralData() {
    _writer.WriteStartElement(OVF_URI, "Name");
    _writer.WriteRaw(_vmTemplate.getname());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "TemplateId");
    _writer.WriteRaw(_vmTemplate.getId().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Description");
    _writer.WriteRaw(_vmTemplate.getdescription());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Domain");
    _writer.WriteRaw(_vmTemplate.getdomain());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "CreationDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(_vmTemplate.getcreation_date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "ExportDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(new java.util.Date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "IsAutoSuspend");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getis_auto_suspend()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "TimeZone");
    _writer.WriteRaw(_vmTemplate.gettime_zone());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "VmType");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getvm_type().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "default_display_type");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getdefault_display_type().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "default_boot_sequence");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getdefault_boot_sequence().getValue()));
    _writer.WriteEndElement();
    if (!StringHelper.isNullOrEmpty(_vmTemplate.getinitrd_url())) {
        _writer.WriteStartElement(OVF_URI, "initrd_url");
        _writer.WriteRaw(_vmTemplate.getinitrd_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vmTemplate.getkernel_url())) {
        _writer.WriteStartElement(OVF_URI, "kernel_url");
        _writer.WriteRaw(_vmTemplate.getkernel_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vmTemplate.getkernel_params())) {
        _writer.WriteStartElement(OVF_URI, "kernel_params");
        _writer.WriteRaw(_vmTemplate.getkernel_params());
        _writer.WriteEndElement();
    }
}
#method_after
@Override
protected void WriteGeneralData() {
    _writer.WriteStartElement("Name");
    _writer.WriteRaw(_vmTemplate.getname());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateId");
    _writer.WriteRaw(_vmTemplate.getId().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(_vmTemplate.getdescription());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Domain");
    _writer.WriteRaw(_vmTemplate.getdomain());
    _writer.WriteEndElement();
    _writer.WriteStartElement("CreationDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(_vmTemplate.getcreation_date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("ExportDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(new Date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsAutoSuspend");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getis_auto_suspend()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("TimeZone");
    _writer.WriteRaw(_vmTemplate.gettime_zone());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Origin");
    _writer.WriteRaw(_vmTemplate.getorigin() == null ? "" : String.valueOf(_vmTemplate.getorigin().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("VmType");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getvm_type().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("default_display_type");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getdefault_display_type().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("default_boot_sequence");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getdefault_boot_sequence().getValue()));
    _writer.WriteEndElement();
    if (!StringHelper.isNullOrEmpty(_vmTemplate.getinitrd_url())) {
        _writer.WriteStartElement("initrd_url");
        _writer.WriteRaw(_vmTemplate.getinitrd_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vmTemplate.getkernel_url())) {
        _writer.WriteStartElement("kernel_url");
        _writer.WriteRaw(_vmTemplate.getkernel_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vmTemplate.getkernel_params())) {
        _writer.WriteStartElement("kernel_params");
        _writer.WriteRaw(_vmTemplate.getkernel_params());
        _writer.WriteEndElement();
    }
}
#end_block

#method_before
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(OVF_URI, "id", _vmTemplate.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":OperatingSystemSection_Type");
    _writer.WriteStartElement(OVF_URI, "Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Description");
    _writer.WriteRaw(_vmTemplate.getos().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":VirtualHardwareSection_Type");
    _writer.WriteStartElement(OVF_URI, "Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vmTemplate.getnum_of_cpus(), _vmTemplate.getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement(OVF_URI, "Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vmTemplate.getnum_of_cpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(((Integer) (++_instanceId)).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getnum_of_sockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getcpu_per_socket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement(OVF_URI, "Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", _vmTemplate.getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(((Integer) (++_instanceId)).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getmem_size_mb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement(OVF_URI, "Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(String.format("Drive %1$d", image.getInternalDriveMapping()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(image.getId() + "/" + image.getImageId());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getit_guid().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getappList());
        _writer.WriteEndElement();
        if (image.getstorage_ids() != null && image.getstorage_ids().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getstorage_ids().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getstorage_pool_id() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getstorage_pool_id().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getcreation_date()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getlastModified()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vmTemplate.getInterfaces()) {
        _writer.WriteStartElement(OVF_URI, "Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw("Ethernet adapter on " + iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        _writer.WriteRaw(iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(Integer.toString(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement(OVF_URI, "Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(((Integer) (++_instanceId)).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw(_vmTemplate.getusb_policy().toString());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(_vmTemplate);
    // CD
    writeCd(_vmTemplate);
    // ummanged devices
    writeOtherDevices(_vmTemplate, _writer);
}
#method_after
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(OVF_URI, "id", _vmTemplate.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":OperatingSystemSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(_vmTemplate.getos().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", OVF_PREFIX + ":VirtualHardwareSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vmTemplate.getnum_of_cpus(), _vmTemplate.getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vmTemplate.getnum_of_cpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getnum_of_sockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getcpu_per_socket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", _vmTemplate.getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(_vmTemplate.getmem_size_mb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(String.format("Drive %1$d", image.getInternalDriveMapping()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(image.getId() + "/" + image.getImageId());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getit_guid().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getappList());
        _writer.WriteEndElement();
        if (image.getstorage_ids() != null && image.getstorage_ids().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getstorage_ids().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getstorage_pool_id() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getstorage_pool_id().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getcreation_date()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getlastModified()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vmTemplate.getInterfaces()) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw("Ethernet adapter on " + iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        _writer.WriteRaw(iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(String.valueOf(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(_vmTemplate, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw((_vmTemplate.getusb_policy()) != null ? _vmTemplate.getusb_policy().toString() : UsbPolicy.DISABLED.name());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(_vmTemplate);
    // CD
    writeCd(_vmTemplate);
    // ummanged devices
    writeOtherDevices(_vmTemplate, _writer);
}
#end_block

#method_before
@Override
protected void WriteGeneralData() {
    _writer.WriteStartElement(OVF_URI, "Name");
    _writer.WriteRaw(_vm.getStaticData().getvm_name());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "TemplateId");
    _writer.WriteRaw(_vm.getStaticData().getvmt_guid().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "TemplateName");
    _writer.WriteRaw(_vm.getvmt_name().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Description");
    _writer.WriteRaw(vmBase.getdescription());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Domain");
    _writer.WriteRaw(vmBase.getdomain());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "CreationDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(vmBase.getcreation_date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "ExportDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(new java.util.Date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "IsInitilized");
    _writer.WriteRaw((new Boolean(_vm.getStaticData().getis_initialized())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "IsAutoSuspend");
    _writer.WriteRaw((new Boolean(vmBase.getis_auto_suspend())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "TimeZone");
    _writer.WriteRaw(vmBase.gettime_zone());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "IsStateless");
    _writer.WriteRaw((new Boolean(vmBase.getis_stateless())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Origin");
    _writer.WriteRaw((new Integer(_vm.getorigin().getValue())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "default_boot_sequence");
    _writer.WriteRaw((new Integer(_vm.getdefault_boot_sequence().getValue())).toString());
    _writer.WriteEndElement();
    if (!StringHelper.isNullOrEmpty(_vm.getinitrd_url())) {
        _writer.WriteStartElement(OVF_URI, "initrd_url");
        _writer.WriteRaw(_vm.getinitrd_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vm.getkernel_url())) {
        _writer.WriteStartElement(OVF_URI, "kernel_url");
        _writer.WriteRaw(_vm.getkernel_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vm.getkernel_params())) {
        _writer.WriteStartElement(OVF_URI, "kernel_params");
        _writer.WriteRaw(_vm.getkernel_params());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vm.getapp_list())) {
        _writer.WriteStartElement(OVF_URI, "app_list");
        _writer.WriteRaw(_vm.getapp_list());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement(OVF_URI, "VmType");
    _writer.WriteRaw((new Integer(_vm.getvm_type().getValue())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "DefaultDisplayType");
    _writer.WriteRaw((new Integer(_vm.getdefault_display_type().getValue())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "MinAllocatedMem");
    _writer.WriteRaw((new Integer(_vm.getMinAllocatedMem())).toString());
    _writer.WriteEndElement();
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a map that its keys are aliases to fields that should be OVF
    // logged.
    Map<String, String> aliasesValuesMap = handler.getAliasesValuesMap();
    for (Map.Entry<String, String> entry : aliasesValuesMap.entrySet()) {
        writeLogEvent(entry.getKey(), entry.getValue());
    }
}
#method_after
@Override
protected void WriteGeneralData() {
    _writer.WriteStartElement("Name");
    _writer.WriteRaw(_vm.getStaticData().getvm_name());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateId");
    _writer.WriteRaw(_vm.getStaticData().getvmt_guid().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement("TemplateName");
    _writer.WriteRaw(_vm.getvmt_name().toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(vmBase.getdescription());
    _writer.WriteEndElement();
    _writer.WriteStartElement("Domain");
    _writer.WriteRaw(vmBase.getdomain());
    _writer.WriteEndElement();
    _writer.WriteStartElement("CreationDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(vmBase.getcreation_date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("ExportDate");
    _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(new Date()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsInitilized");
    _writer.WriteRaw(String.valueOf(_vm.getStaticData().getis_initialized()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsAutoSuspend");
    _writer.WriteRaw(String.valueOf(vmBase.getis_auto_suspend()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("TimeZone");
    _writer.WriteRaw(vmBase.gettime_zone());
    _writer.WriteEndElement();
    _writer.WriteStartElement("IsStateless");
    _writer.WriteRaw(String.valueOf(vmBase.getis_stateless()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("Origin");
    _writer.WriteRaw(String.valueOf(_vm.getorigin().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("default_boot_sequence");
    _writer.WriteRaw(String.valueOf(_vm.getdefault_boot_sequence().getValue()));
    _writer.WriteEndElement();
    if (!StringHelper.isNullOrEmpty(_vm.getinitrd_url())) {
        _writer.WriteStartElement("initrd_url");
        _writer.WriteRaw(_vm.getinitrd_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vm.getkernel_url())) {
        _writer.WriteStartElement("kernel_url");
        _writer.WriteRaw(_vm.getkernel_url());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vm.getkernel_params())) {
        _writer.WriteStartElement("kernel_params");
        _writer.WriteRaw(_vm.getkernel_params());
        _writer.WriteEndElement();
    }
    if (!StringHelper.isNullOrEmpty(_vm.getapp_list())) {
        _writer.WriteStartElement("app_list");
        _writer.WriteRaw(_vm.getapp_list());
        _writer.WriteEndElement();
    }
    _writer.WriteStartElement("VmType");
    _writer.WriteRaw(String.valueOf(_vm.getvm_type().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("DefaultDisplayType");
    _writer.WriteRaw(String.valueOf(_vm.getdefault_display_type().getValue()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("MinAllocatedMem");
    _writer.WriteRaw(String.valueOf(_vm.getMinAllocatedMem()));
    _writer.WriteEndElement();
    OvfLogEventHandler<VmStatic> handler = new VMStaticOvfLogHandler(_vm.getStaticData());
    // Gets a map that its keys are aliases to fields that should be OVF
    // logged.
    Map<String, String> aliasesValuesMap = handler.getAliasesValuesMap();
    for (Map.Entry<String, String> entry : aliasesValuesMap.entrySet()) {
        writeLogEvent(entry.getKey(), entry.getValue());
    }
}
#end_block

#method_before
private void writeLogEvent(String name, String value) {
    StringBuilder fullNameSB = new StringBuilder(EXPORT_ONLY_PREFIX);
    fullNameSB.append(name);
    _writer.WriteStartElement(OVF_URI, fullNameSB.toString());
    _writer.WriteRaw(value);
    _writer.WriteEndElement();
}
#method_after
private void writeLogEvent(String name, String value) {
    StringBuilder fullNameSB = new StringBuilder(EXPORT_ONLY_PREFIX);
    fullNameSB.append(name);
    _writer.WriteStartElement(fullNameSB.toString());
    _writer.WriteRaw(value);
    _writer.WriteEndElement();
}
#end_block

#method_before
@Override
protected void WriteAppList() {
    if (_images.size() > 0) {
        if (StringHelper.isNullOrEmpty(_images.get(0).getappList())) {
            return;
        }
        String[] apps = _images.get(0).getappList().split("[,]", -1);
        for (String app : apps) {
            String product = app;
            String version = "";
            Match match = Regex.Match(app, "(.*) ([0-9.]+)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            if (match.Groups().size() > 1) {
                // match.Groups[1].getValue();
                product = match.Groups().get(1).getValue();
            }
            if (match.Groups().size() > 2) {
                // match.Groups[2].getValue();
                version = match.Groups().get(2).getValue();
            }
            _writer.WriteStartElement(OVF_URI, "ProductSection");
            _writer.WriteAttributeString(OVF_URI, "class", product);
            _writer.WriteStartElement(OVF_URI, "Info");
            _writer.WriteRaw(app);
            _writer.WriteEndElement();
            _writer.WriteStartElement(OVF_URI, "Product");
            _writer.WriteRaw(product);
            _writer.WriteEndElement();
            _writer.WriteStartElement(OVF_URI, "Version");
            _writer.WriteRaw(version);
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }
    }
}
#method_after
@Override
protected void WriteAppList() {
    if (_images.size() > 0) {
        if (StringHelper.isNullOrEmpty(_images.get(0).getappList())) {
            return;
        }
        String[] apps = _images.get(0).getappList().split("[,]", -1);
        for (String app : apps) {
            String product = app;
            String version = "";
            Match match = Regex.Match(app, "(.*) ([0-9.]+)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            if (match.Groups().size() > 1) {
                // match.Groups[1].getValue();
                product = match.Groups().get(1).getValue();
            }
            if (match.Groups().size() > 2) {
                // match.Groups[2].getValue();
                version = match.Groups().get(2).getValue();
            }
            _writer.WriteStartElement("ProductSection");
            _writer.WriteAttributeString(OVF_URI, "class", product);
            _writer.WriteStartElement("Info");
            _writer.WriteRaw(app);
            _writer.WriteEndElement();
            _writer.WriteStartElement("Product");
            _writer.WriteRaw(product);
            _writer.WriteEndElement();
            _writer.WriteStartElement("Version");
            _writer.WriteRaw(version);
            _writer.WriteEndElement();
            _writer.WriteEndElement();
        }
    }
}
#end_block

#method_before
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(OVF_URI, "id", vmBase.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:OperatingSystemSection_Type");
    _writer.WriteStartElement(OVF_URI, "Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "Description");
    _writer.WriteRaw(vmBase.getos().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:VirtualHardwareSection_Type");
    _writer.WriteStartElement(OVF_URI, "Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vm.getStaticData().getnum_of_cpus(), _vm.getStaticData().getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(OVF_URI, "System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement(OVF_URI, "Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vm.getStaticData().getnum_of_cpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(((Integer) (++_instanceId)).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw((new Integer(vmBase.getnum_of_sockets())).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw((new Integer(vmBase.getcpu_per_socket())).toString());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement(OVF_URI, "Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", vmBase.getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(((Integer) (++_instanceId)).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw((new Integer(vmBase.getmem_size_mb())).toString());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement(OVF_URI, "Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(String.format("Drive %1$d", image.getInternalDriveMapping()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(OvfParser.CreateImageFile(image));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getit_guid().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getappList());
        _writer.WriteEndElement();
        if (image.getstorage_ids() != null && image.getstorage_ids().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getstorage_ids().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getstorage_pool_id() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getstorage_pool_id().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getcreation_date()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getlastModified()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "last_modified_date");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getlast_modified_date()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vm.getInterfaces()) {
        _writer.WriteStartElement(OVF_URI, "Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw("Ethernet adapter on " + iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        _writer.WriteRaw(iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "MACAddress");
        _writer.WriteRaw(iface.getMacAddress());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(Integer.toString(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement(OVF_URI, "Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(((Integer) (++_instanceId)).toString());
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw(vmBase.getusb_policy().toString());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(vmBase);
    // CD
    writeCd(vmBase);
    // ummanged devices
    writeOtherDevices(vmBase, _writer);
    // End hardware section
    _writer.WriteEndElement();
    writeSnapshotsSection();
}
#method_after
@Override
protected void WriteContentItems() {
    // os
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(OVF_URI, "id", vmBase.getId().toString());
    _writer.WriteAttributeString(OVF_URI, "required", "false");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:OperatingSystemSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw("Guest Operating System");
    _writer.WriteEndElement();
    _writer.WriteStartElement("Description");
    _writer.WriteRaw(vmBase.getos().name());
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // hardware
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:VirtualHardwareSection_Type");
    _writer.WriteStartElement("Info");
    _writer.WriteRaw(String.format("%1$s CPU, %2$s Memeory", _vm.getStaticData().getnum_of_cpus(), _vm.getStaticData().getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement("System");
    _writer.WriteStartElement(VSSD_URI, "VirtualSystemType");
    _writer.WriteRaw(String.format("%1$s %2$s", Config.<String>GetValue(ConfigValues.OvfVirtualSystemType), Config.<String>GetValue(ConfigValues.VdcVersion)));
    _writer.WriteEndElement();
    _writer.WriteEndElement();
    // item cpu
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s virtual cpu", _vm.getStaticData().getnum_of_cpus()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Number of virtual CPU");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.CPU);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "num_of_sockets");
    _writer.WriteRaw(String.valueOf(vmBase.getnum_of_sockets()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "cpu_per_socket");
    _writer.WriteRaw(String.valueOf(vmBase.getcpu_per_socket()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item memory
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw(String.format("%1$s MB of memory", vmBase.getmem_size_mb()));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "Description");
    _writer.WriteRaw("Memory Size");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.Memory);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "AllocationUnits");
    _writer.WriteRaw("MegaBytes");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "VirtualQuantity");
    _writer.WriteRaw(String.valueOf(vmBase.getmem_size_mb()));
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // item drive
    for (DiskImage image : _images) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw(String.format("Drive %1$d", image.getInternalDriveMapping()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(image.getImageId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.DiskImage);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "HostResource");
        _writer.WriteRaw(OvfParser.CreateImageFile(image));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Parent");
        _writer.WriteRaw(image.getParentId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Template");
        _writer.WriteRaw(image.getit_guid().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ApplicationList");
        _writer.WriteRaw(image.getappList());
        _writer.WriteEndElement();
        if (image.getstorage_ids() != null && image.getstorage_ids().size() > 0) {
            _writer.WriteStartElement(RASD_URI, "StorageId");
            _writer.WriteRaw(image.getstorage_ids().get(0).toString());
            _writer.WriteEndElement();
        }
        if (image.getstorage_pool_id() != null) {
            _writer.WriteStartElement(RASD_URI, "StoragePoolId");
            _writer.WriteRaw(image.getstorage_pool_id().getValue().toString());
            _writer.WriteEndElement();
        }
        _writer.WriteStartElement(RASD_URI, "CreationDate");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getcreation_date()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "LastModified");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getlastModified()));
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "last_modified_date");
        _writer.WriteRaw(OvfParser.LocalDateToUtcDateString(image.getlast_modified_date()));
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, image.getId());
        // item
        _writer.WriteEndElement();
    }
    // item network
    for (VmNetworkInterface iface : _vm.getInterfaces()) {
        _writer.WriteStartElement("Item");
        _writer.WriteStartElement(RASD_URI, "Caption");
        _writer.WriteRaw("Ethernet adapter on " + iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "InstanceId");
        _writer.WriteRaw(iface.getId().toString());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceType");
        _writer.WriteRaw(OvfHardware.Network);
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "ResourceSubType");
        if (iface.getType() != null) {
            _writer.WriteRaw(iface.getType().toString());
        }
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Connection");
        _writer.WriteRaw(iface.getNetworkName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "Name");
        _writer.WriteRaw(iface.getName());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "MACAddress");
        _writer.WriteRaw(iface.getMacAddress());
        _writer.WriteEndElement();
        _writer.WriteStartElement(RASD_URI, "speed");
        // version prior to 2.3 may not have speed so we get it by type
        if (iface.getSpeed() != null) {
            _writer.WriteRaw(iface.getSpeed().toString());
        } else {
            _writer.WriteRaw(String.valueOf(VmInterfaceType.forValue(iface.getType()).getSpeed()));
        }
        _writer.WriteEndElement();
        writeManagedDeviceInfo(vmBase, _writer, iface.getId());
        // item
        _writer.WriteEndElement();
    }
    // item usb
    _writer.WriteStartElement("Item");
    _writer.WriteStartElement(RASD_URI, "Caption");
    _writer.WriteRaw("USB Controller");
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "InstanceId");
    _writer.WriteRaw(String.valueOf(++_instanceId));
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "ResourceType");
    _writer.WriteRaw(OvfHardware.USB);
    _writer.WriteEndElement();
    _writer.WriteStartElement(RASD_URI, "UsbPolicy");
    _writer.WriteRaw(vmBase.getusb_policy() != null ? vmBase.getusb_policy().toString() : UsbPolicy.DISABLED.name());
    _writer.WriteEndElement();
    // item
    _writer.WriteEndElement();
    // monitors
    writeMonitors(vmBase);
    // CD
    writeCd(vmBase);
    // ummanged devices
    writeOtherDevices(vmBase, _writer);
    // End hardware section
    _writer.WriteEndElement();
    writeSnapshotsSection();
}
#end_block

#method_before
private void writeSnapshotsSection() {
    List<Snapshot> snapshots = _vm.getSnapshots();
    if (snapshots == null || snapshots.isEmpty()) {
        return;
    }
    _writer.WriteStartElement(OVF_URI, "Section");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:SnapshotsSection_Type");
    for (Snapshot snapshot : snapshots) {
        _writer.WriteStartElement(OVF_URI, "Snapshot");
        _writer.WriteAttributeString(OVF_URI, "id", snapshot.getId().toString());
        _writer.writeElement(OVF_URI, "Type", snapshot.getType().name());
        _writer.writeElement(OVF_URI, "Description", snapshot.getDescription());
        _writer.writeElement(OVF_URI, "CreationDate", OvfParser.LocalDateToUtcDateString(snapshot.getCreationDate()));
        if (snapshot.getAppList() != null) {
            _writer.writeElement(OVF_URI, "ApplicationList", snapshot.getAppList());
        }
        if (snapshot.getVmConfiguration() != null) {
            _writer.writeElement(OVF_URI, "VmConfiguration", Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes()));
        }
        _writer.WriteEndElement();
    }
    _writer.WriteEndElement();
}
#method_after
private void writeSnapshotsSection() {
    List<Snapshot> snapshots = _vm.getSnapshots();
    if (snapshots == null || snapshots.isEmpty()) {
        return;
    }
    _writer.WriteStartElement("Section");
    _writer.WriteAttributeString(XSI_URI, "type", "ovf:SnapshotsSection_Type");
    for (Snapshot snapshot : snapshots) {
        _writer.WriteStartElement("Snapshot");
        _writer.WriteAttributeString(OVF_URI, "id", snapshot.getId().toString());
        _writer.writeElement("Type", snapshot.getType().name());
        _writer.writeElement("Description", snapshot.getDescription());
        _writer.writeElement("CreationDate", OvfParser.LocalDateToUtcDateString(snapshot.getCreationDate()));
        if (snapshot.getAppList() != null) {
            _writer.writeElement("ApplicationList", snapshot.getAppList());
        }
        if (snapshot.getVmConfiguration() != null) {
            _writer.writeElement("VmConfiguration", Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes()));
        }
        _writer.WriteEndElement();
    }
    _writer.WriteEndElement();
}
#end_block

#method_before
private void initListBoxEditors() {
    serverEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getvds_name();
        }
    });
}
#method_after
private void initListBoxEditors() {
    serverEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).gethost_name();
        }
    });
}
#end_block

#method_before
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType().name());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#method_after
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#end_block

#method_before
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.getvds_name());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.StartProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#method_after
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.gethost_name());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.StartProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(DataCenterNetworkPopupPresenterWidget.class, DataCenterNetworkPopupPresenterWidget.ViewDef.class, DataCenterNetworkPopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(DataCenterNetworkPopupPresenterWidget.class, DataCenterNetworkPopupPresenterWidget.ViewDef.class, DataCenterNetworkPopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    TextColumnWithTooltip<GlusterBrickEntity> serverColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getServerName();
        }
    };
    getTable().addColumn(serverColumn, constants.serverVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> directoryColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getBrickDirectory();
        }
    };
    getTable().addColumn(directoryColumn, constants.brickDirectoryVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> freeSpaceColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            // $NON-NLS-1$
            return "???";
        }
    };
    getTable().addColumn(freeSpaceColumn, constants.freeSpaceGBVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> totalSpaceColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            // $NON-NLS-1$
            return "???";
        }
    };
    getTable().addColumn(totalSpaceColumn, constants.totalSpaceGBVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> statusColumn = new EnumColumn<GlusterBrickEntity, GlusterBrickStatus>() {

        @Override
        protected GlusterBrickStatus getRawValue(GlusterBrickEntity object) {
            return object.getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusBrick());
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.addBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getAddBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.removeBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.replaceBrickBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getReplaceBrickCommand();
        }
    });
}
#method_after
void initTable(ApplicationConstants constants) {
    TextColumnWithTooltip<GlusterBrickEntity> serverColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getServerName();
        }
    };
    getTable().addColumn(serverColumn, constants.serverVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> directoryColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getBrickDirectory();
        }
    };
    getTable().addColumn(directoryColumn, constants.brickDirectoryVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> statusColumn = new EnumColumn<GlusterBrickEntity, GlusterBrickStatus>() {

        @Override
        protected GlusterBrickStatus getRawValue(GlusterBrickEntity object) {
            return object.getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusBrick());
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.addBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getAddBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.removeBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.replaceBrickBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getReplaceBrickCommand();
        }
    });
}
#end_block

#method_before
private void ExecuteQuery(VM vm) {
    AsyncQuery _asyncQuery0 = new AsyncQuery();
    _asyncQuery0.setModel(this);
    _asyncQuery0.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model0, Object result0) {
            SpiceConsoleModel thisSpiceConsoleModel = (SpiceConsoleModel) model0;
            VM thisVm = thisSpiceConsoleModel.getEntity();
            storage_domains isoDomain = null;
            if (result0 != null) {
                isoDomain = (storage_domains) result0;
            }
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            queryTypeList.add(VdcQueryType.GetVdsByVdsId);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetVdsCertificateSubjectByVdsId);
            queryTypeList.add(VdcQueryType.GetCACertificate);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SSLEnabled));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.CipherSuite));
            GetConfigurationValueParameters spiceSecureChannelParams = new GetConfigurationValueParameters(ConfigurationValues.SpiceSecureChannels);
            spiceSecureChannelParams.setVersion(thisVm.getvds_group_compatibility_version().toString());
            parametersList.add(spiceSecureChannelParams);
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.EnableSpiceRootCertificateValidation));
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new VdcQueryParametersBase());
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceToggleFullScreenKeys));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceReleaseCursorKeys));
            if (isoDomain != null) {
                queryTypeList.add(VdcQueryType.GetAllIsoImagesList);
                GetAllIsoImagesListParameters getIsoPamams = new GetAllIsoImagesListParameters();
                getIsoPamams.setStorageDomainId(isoDomain.getId());
                getIsoPamams.setForceRefresh(false);
                parametersList.add(getIsoPamams);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, thisSpiceConsoleModel);
        }
    };
    AsyncDataProvider.GetIsoDomainByDataCenterId(_asyncQuery0, vm.getstorage_pool_id());
}
#method_after
private void ExecuteQuery(final VM vm) {
    AsyncQuery _asyncQuery0 = new AsyncQuery();
    _asyncQuery0.setModel(this);
    _asyncQuery0.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model0, Object result0) {
            SpiceConsoleModel thisSpiceConsoleModel = (SpiceConsoleModel) model0;
            VM thisVm = thisSpiceConsoleModel.getEntity();
            storage_domains isoDomain = null;
            if (result0 != null) {
                isoDomain = (storage_domains) result0;
            }
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            queryTypeList.add(VdcQueryType.GetVdsByVdsId);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetVdsCertificateSubjectByVdsId);
            queryTypeList.add(VdcQueryType.GetCACertificate);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SSLEnabled));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.CipherSuite));
            GetConfigurationValueParameters spiceSecureChannelParams = new GetConfigurationValueParameters(ConfigurationValues.SpiceSecureChannels);
            spiceSecureChannelParams.setVersion(thisVm.getvds_group_compatibility_version().toString());
            parametersList.add(spiceSecureChannelParams);
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.EnableSpiceRootCertificateValidation));
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new VdcQueryParametersBase());
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceToggleFullScreenKeys));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceReleaseCursorKeys));
            if (isoDomain != null) {
                queryTypeList.add(VdcQueryType.GetAllIsoImagesListByStoragePoolId);
                GetAllImagesListByStoragePoolIdParameters getIsoPamams = new GetAllImagesListByStoragePoolIdParameters(vm.getstorage_pool_id());
                parametersList.add(getIsoPamams);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, thisSpiceConsoleModel);
        }
    };
    AsyncDataProvider.GetIsoDomainByDataCenterId(_asyncQuery0, vm.getstorage_pool_id());
}
#end_block

#method_before
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterAddHostFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeReplaceBrickStartFailed:
        case GlusterHostRemoveFailed:
        case GlusterAddHostFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // Gluster Host add
        if (getAllVds(getVdsGroupId()).size() > 0) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getUpServer().getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getUpServer().getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    setVdsGroupId(getParameters().getVdsStaticData().getvds_group_id());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        returnValue = false;
    } else {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getvds_name();
        String hostName = vds.gethost_name();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
            returnValue = false;
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
            returnValue = false;
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
            returnValue = false;
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.UseSecureConnectionWithServers) && !FileUtil.fileExists(Config.resolveCertificatePath())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
                returnValue = false;
            } else if (!getParameters().getAddPending() && StringHelper.isNullOrEmpty(getParameters().getRootPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
                returnValue = false;
            } else if (!IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())) {
                returnValue = false;
            } else if (getParameters().getVdsStaticData().getport() < 1 || getParameters().getVdsStaticData().getport() > 65536) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_IS_NOT_LEGAL);
                returnValue = false;
            } else {
                returnValue = returnValue && validateHostUniqueness(vds);
            }
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_IS_UP);
        if (getAllVds(getVdsGroupId()).size() > 0 && getUpServer() == null) {
            returnValue = false;
        }
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    setVdsGroupId(getParameters().getVdsStaticData().getvds_group_id());
    getParameters().setVdsForUniqueId(null);
    // Check if this is a valid cluster
    if (getVdsGroup() == null) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        returnValue = false;
    } else {
        VDS vds = getParameters().getvds();
        String vdsName = vds.getvds_name();
        String hostName = vds.gethost_name();
        int maxVdsNameLength = Config.<Integer>GetValue(ConfigValues.MaxVdsNameLength);
        // check that vds name is not null or empty
        if (vdsName == null || vdsName.isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
            returnValue = false;
        // check that VDS name is not too long
        } else if (vdsName.length() > maxVdsNameLength) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
            returnValue = false;
        // check that VDS hostname does not contain special characters.
        } else if (!ValidationUtils.validHostname(hostName)) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VDS_HOSTNAME);
            returnValue = false;
        } else {
            returnValue = returnValue && validateSingleHostAttachedToLocalStorage();
            if (Config.<Boolean>GetValue(ConfigValues.UseSecureConnectionWithServers) && !FileUtil.fileExists(Config.resolveCertificatePath())) {
                addCanDoActionMessage(VdcBllMessages.VDS_TRY_CREATE_SECURE_CERTIFICATE_NOT_FOUND);
                returnValue = false;
            } else if (!getParameters().getAddPending() && StringHelper.isNullOrEmpty(getParameters().getRootPassword())) {
                // We block vds installations if it's not a RHEV-H and password is empty
                // Note that this may override local host SSH policy. See BZ#688718.
                addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD);
                returnValue = false;
            } else if (!IsPowerManagementLegal(getParameters().getVdsStaticData(), getVdsGroup().getcompatibility_version().toString())) {
                returnValue = false;
            } else if (getParameters().getVdsStaticData().getport() < 1 || getParameters().getVdsStaticData().getport() > 65536) {
                addCanDoActionMessage(VdcBllMessages.VDS_PORT_IS_NOT_LEGAL);
                returnValue = false;
            } else {
                returnValue = returnValue && validateHostUniqueness(vds);
            }
        }
    }
    if (getVdsGroup().supportsGlusterService()) {
        if (getAllVds(getVdsGroupId()).size() > 0 && getUpServer() == null) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE);
            returnValue = false;
        }
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    }
    return returnValue;
}
#end_block

#method_before
@Override
public FutureTask<Map<String, Object>> poll() {
    return vdsServer.futureGetCapabilities();
}
#method_after
@Override
public FutureTask<Map<String, Object>> poll() {
    return vdsServer.futurePing();
}
#end_block

#method_before
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAll().size() > 1 && !hasVolumeOnServer()) {
        String hostName = getVdsDAO().get(getParameters().getVdsId()).gethost_name();
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((ClusterUtils.getInstance().getUpServer(getVdsGroupId())).getId(), hostName, forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!returnValue.getSucceeded()) {
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
        }
    }
}
#method_after
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAll().size() > 1 && !hasVolumeOnServer()) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((ClusterUtils.getInstance().getUpServer(getVdsGroupId())).getId(), getVds().gethost_name(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!returnValue.getSucceeded()) {
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
        }
    }
}
#end_block

#method_before
@Override
public Response replace(Action action) {
    validateParameters(action, "newBrick.serverId", "newBrick.brickDir");
    Mapper<GlusterBrick, GlusterBrickEntity> mapper = getMapper(GlusterBrick.class, GlusterBrickEntity.class);
    return doAction(VdcActionType.ReplaceGlusterVolumeBrick, new GlusterVolumeReplaceBrickActionParameters(asGuid(getVolumeId()), GlusterTaskOperation.START, mapper.map(get(), null), mapper.map(action.getNewBrick(), null), action.isSetForce() ? action.isForce() : false), action);
}
#method_after
@Override
public Response replace(Action action) {
    validateParameters(action, "newBrick.serverId", "newBrick.brickDir");
    Mapper<GlusterBrick, GlusterBrickEntity> mapper = getMapper(GlusterBrick.class, GlusterBrickEntity.class);
    return doAction(VdcActionType.ReplaceGlusterVolumeBrick, new GlusterVolumeReplaceBrickActionParameters(asGuid(getVolumeId()), GlusterTaskOperation.START, mapper.map(get(), null), mapper.map(action.getBrick(), null), action.isSetForce() ? action.isForce() : false), action);
}
#end_block

#method_before
@Override
public GlusterVolume get() {
    return performGet(VdcQueryType.GetGlusterVolumeById, new IdQueryParameters(guid));
}
#method_after
@Override
public GlusterVolume get() {
    return performGet(VdcQueryType.GetGlusterVolumeById, new GetGlusterVolumeByIdQueryParameters(guid));
}
#end_block

#method_before
@Test
public void testReplace() throws Exception {
    setupParentExpectations();
    setUpGetEntityExpectations(1);
    setUriInfo(setUpActionExpectations(VdcActionType.ReplaceGlusterVolumeBrick, GlusterVolumeReplaceBrickActionParameters.class, new String[] { "VolumeId", "NewBrick.ServerId", "NewBrick.BrickDirectory" }, new Object[] { volumeId, serverId, brickDir }));
    resource.setParent(bricksResourceMock);
    Action action = new Action();
    action.setNewBrick(new GlusterBrick());
    action.getNewBrick().setServerId(serverId.toString());
    action.getNewBrick().setBrickDir(brickDir);
    verifyActionResponse(resource.replace(action));
}
#method_after
@Test
public void testReplace() throws Exception {
    setupParentExpectations();
    setUpGetEntityExpectations(1);
    setUriInfo(setUpActionExpectations(VdcActionType.ReplaceGlusterVolumeBrick, GlusterVolumeReplaceBrickActionParameters.class, new String[] { "VolumeId", "NewBrick.ServerId", "NewBrick.BrickDirectory" }, new Object[] { volumeId, serverId, brickDir }));
    resource.setParent(bricksResourceMock);
    Action action = new Action();
    action.setBrick(new GlusterBrick());
    action.getBrick().setServerId(serverId.toString());
    action.getBrick().setBrickDir(brickDir);
    verifyActionResponse(resource.replace(action));
}
#end_block

#method_before
protected void prepareRoleForCommand() {
    // Note that the role is take from the parameters
    roles role = getRole();
    role.setId(Guid.NewGuid());
    role.setInheritable(false);
    for (ActionGroup group : getParameters().getActionGroups()) {
        if (group.isInheritable()) {
            role.setInheritable(true);
            break;
        }
    }
}
#method_after
protected void prepareRoleForCommand() {
    // Note that the role is take from the parameters
    roles role = getRole();
    role.setId(Guid.NewGuid());
    role.setAllowsViewingChildren(false);
    for (ActionGroup group : getParameters().getActionGroups()) {
        if (group.allowsViewingChildren()) {
            role.setAllowsViewingChildren(true);
            break;
        }
    }
}
#end_block

#method_before
/* execute related tests */
@Test
public void testExecuteCommandNoUpdate() {
    mockRoleGroups(ActionGroup.CONFIGURE_HOST_NETWORK);
    getRole().setInheritable(true);
    getCommand().executeCommand();
    verifyRoleSaving(true, false);
}
#method_after
/* execute related tests */
@Test
public void testExecuteCommandNoUpdate() {
    mockRoleGroups(ActionGroup.CONFIGURE_HOST_NETWORK);
    getRole().setAllowsViewingChildren(true);
    getCommand().executeCommand();
    verifyRoleSaving(true, false);
}
#end_block

#method_before
@Test
public void testExecuteCommandNoUpdateSinceRoleWasAlreadyNotInheritable() {
    getRole().setInheritable(false);
    getCommand().executeCommand();
    verifyRoleSaving(false, false);
}
#method_after
@Test
public void testExecuteCommandNoUpdateSinceRoleWasAlreadyNotInheritable() {
    getRole().setAllowsViewingChildren(false);
    getCommand().executeCommand();
    verifyRoleSaving(false, false);
}
#end_block

#method_before
@Test
public void testExecuteCommandWithUpdateAllRolesRemoved() {
    mockRoleGroups();
    getRole().setInheritable(true);
    getCommand().executeCommand();
    verifyRoleSaving(true, true);
}
#method_after
@Test
public void testExecuteCommandWithUpdateAllRolesRemoved() {
    mockRoleGroups();
    getRole().setAllowsViewingChildren(true);
    getCommand().executeCommand();
    verifyRoleSaving(true, true);
}
#end_block

#method_before
@Test
public void testExecuteCommandWithUpdateInheritableRolesRemoved() {
    mockRoleGroups(ActionGroup.CREATE_VM);
    getRole().setInheritable(true);
    getCommand().executeCommand();
    verifyRoleSaving(true, true);
}
#method_after
@Test
public void testExecuteCommandWithUpdateInheritableRolesRemoved() {
    mockRoleGroups(ActionGroup.CREATE_VM);
    getRole().setAllowsViewingChildren(true);
    getCommand().executeCommand();
    verifyRoleSaving(true, true);
}
#end_block

#method_before
@Test
public void testPrepareRoleForCommandNoGroups() {
    command.prepareRoleForCommand();
    assertEquals("Wrong inheritable state for command", shouldBeInheritable, params.getRole().isInheritable());
}
#method_after
@Test
public void testPrepareRoleForCommandNoGroups() {
    command.prepareRoleForCommand();
    assertEquals("Wrong inheritable state for command", shouldBeInheritable, params.getRole().allowsViewingChildren());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    getRole().setId(Guid.NewGuid());
    getRole().setInheritable(false);
    getRoleDao().save(getRole());
    getReturnValue().setActionReturnValue(getRole().getId());
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    getRole().setId(Guid.NewGuid());
    getRole().setAllowsViewingChildren(false);
    getRoleDao().save(getRole());
    getReturnValue().setActionReturnValue(getRole().getId());
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // If the role is already inheritable, adding more action groups won't make it stop being inheritable
    boolean addedInheritableGroup = false;
    List<ActionGroup> groups = getParameters().getActionGroups();
    for (ActionGroup group : groups) {
        addedInheritableGroup |= group.isInheritable();
        getRoleGroupMapDAO().save(new RoleGroupMap(group, getParameters().getRoleId()));
        AppendCustomValue("ActionGroup", group.toString(), ", ");
    }
    // Only adding inheritable groups could make a role inheritable
    if (addedInheritableGroup) {
        roles role = getRole();
        // The role should be updated only if it wasn't inheritable in the first place
        if (!role.isInheritable()) {
            role.setInheritable(true);
            getRoleDao().update(role);
        }
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    boolean addedGroupThatAllowsViewingChildren = false;
    List<ActionGroup> groups = getParameters().getActionGroups();
    for (ActionGroup group : groups) {
        addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren();
        getRoleGroupMapDAO().save(new RoleGroupMap(group, getParameters().getRoleId()));
        AppendCustomValue("ActionGroup", group.toString(), ", ");
    }
    // Only adding groups that allow viewing children could make a role allow viewing its children
    if (addedGroupThatAllowsViewingChildren) {
        roles role = getRole();
        // The role should be updated only if it didn't allow viewing children in the first place
        if (!role.allowsViewingChildren()) {
            role.setAllowsViewingChildren(true);
            getRoleDao().update(role);
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    List<ActionGroup> groupsToDetach = getParameters().getActionGroups();
    for (ActionGroup group : groupsToDetach) {
        getRoleGroupMapDAO().remove(group, getParameters().getRoleId());
        AppendCustomValue("ActionGroup", group.toString(), ", ");
    }
    // If the role wasn't inheritable in the first place, removing action groups won't change that
    roles role = getRole();
    if (role.isInheritable()) {
        boolean shouldBeInheritable = false;
        // Go over all the REMAINING action groups
        List<ActionGroup> groups = getActionGroupsByRoleId(role.getId());
        for (ActionGroup group : groups) {
            if (group.isInheritable()) {
                shouldBeInheritable = true;
                break;
            }
        }
        if (!shouldBeInheritable) {
            role.setInheritable(false);
            getRoleDao().update(role);
        }
    }
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    List<ActionGroup> groupsToDetach = getParameters().getActionGroups();
    for (ActionGroup group : groupsToDetach) {
        getRoleGroupMapDAO().remove(group, getParameters().getRoleId());
        AppendCustomValue("ActionGroup", group.toString(), ", ");
    }
    // If the role didn't allow viewing children in the first place, removing action groups won't change that
    roles role = getRole();
    if (role.allowsViewingChildren()) {
        boolean shouldAllowViewingChildren = false;
        // Go over all the REMAINING action groups
        List<ActionGroup> groups = getActionGroupsByRoleId(role.getId());
        for (ActionGroup group : groups) {
            if (group.allowsViewingChildren()) {
                shouldAllowViewingChildren = true;
                break;
            }
        }
        if (!shouldAllowViewingChildren) {
            role.setAllowsViewingChildren(false);
            getRoleDao().update(role);
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
/* execute related tests */
@Test
public void testExecuteCommandNoUpdate() {
    getRole().setInheritable(true);
    getCommand().executeCommand();
    verifyRoleSaving(false);
}
#method_after
/* execute related tests */
@Test
public void testExecuteCommandNoUpdate() {
    getRole().setAllowsViewingChildren(true);
    getCommand().executeCommand();
    verifyRoleSaving(false);
}
#end_block

#method_before
@Test
public void testExecuteCommandWithUpdate() {
    getRole().setInheritable(false);
    getCommand().executeCommand();
    verifyRoleSaving(true);
}
#method_after
@Test
public void testExecuteCommandWithUpdate() {
    getRole().setAllowsViewingChildren(false);
    getCommand().executeCommand();
    verifyRoleSaving(true);
}
#end_block

#method_before
@Test
public void testExecuteCommandNoUpdateNonInheritableRole() {
    getRole().setInheritable(false);
    getParams().setActionGroups(new ArrayList<ActionGroup>(Collections.singletonList(ActionGroup.CREATE_VM)));
    getCommand().executeCommand();
    verifyRoleSaving(false);
}
#method_after
@Test
public void testExecuteCommandNoUpdateNonInheritableRole() {
    getRole().setAllowsViewingChildren(false);
    getParams().setActionGroups(new ArrayList<ActionGroup>(Collections.singletonList(ActionGroup.CREATE_VM)));
    getCommand().executeCommand();
    verifyRoleSaving(false);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new ReplaceGlusterVolumeBrickActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getAction(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
    if (returnValue.getSucceeded()) {
        replaceVolumeBrickInDb(getParameters().getExistingBrick(), getParameters().getNewBrick());
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new ReplaceGlusterVolumeBrickActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getAction(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
}
#end_block

#method_before
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) {
    VdsStatic server = getVdsStaticDao().get(brick.getServerId());
    if ((server == null || !server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID);
        return false;
    }
    brick.setServerName(server.gethost_name());
    return true;
}
#method_after
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) {
    VdsStatic server = getVdsStaticDao().get(brick.getServerId());
    if ((server == null || !server.getvds_group_id().equals(getVdsGroupId()))) {
        if (addCanDoActionMessage) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID);
        }
        return false;
    }
    brick.setServerName(server.gethost_name());
    return true;
}
#end_block

#method_before
private boolean isValidVolumeBrick(GlusterBrickEntity volumeBrick) {
    for (GlusterBrickEntity brick : getGlusterVolume().getBricks()) {
        if (brick.equals(volumeBrick)) {
            return true;
        }
    }
    return false;
}
#method_after
private boolean isValidVolumeBrick(GlusterBrickEntity volumeBrick) {
    for (GlusterBrickEntity brick : getGlusterVolume().getBricks()) {
        if (brick.getQualifiedName().equals(volumeBrick.getQualifiedName())) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    checkSeverities();
}
#method_after
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    initConfigSeverities();
    checkSeverities();
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_HOST_REMOVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
public static void GetHostList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParameters = new SearchParameters("Host:", SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void GetHostList(AsyncQuery aQuery) {
    GetHostListByStatus(aQuery, null);
}
#end_block

#method_before
@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    VdsActionParameters parameters = createParameters();
    command = spy(new RemoveVdsCommand<VdsActionParameters>(parameters));
    doReturn(vdsDAO).when(command).getVdsDAO();
    doReturn(vmStaticDAO).when(command).getVmStaticDAO();
    doReturn(storagePoolDAO).when(command).getStoragePoolDAO();
    doReturn(vdsDynamicDAO).when(command).getVdsDynamicDAO();
    doReturn(glusterVolumeDao).when(command).getGlusterVolumeDao();
    doReturn(vdsGroupDAO).when(command).getVdsGroupDAO();
}
#method_after
@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    VdsActionParameters parameters = createParameters();
    command = spy(new RemoveVdsCommand<VdsActionParameters>(parameters));
    doReturn(vdsDAO).when(command).getVdsDAO();
    doReturn(vmStaticDAO).when(command).getVmStaticDAO();
    doReturn(storagePoolDAO).when(command).getStoragePoolDAO();
    doReturn(vdsDynamicDAO).when(command).getVdsDynamicDAO();
    doReturn(glusterBrickDao).when(command).getGlusterBrickDao();
    doReturn(vdsGroupDao).when(command).getVdsGroupDAO();
    doReturn(vdsGroup).when(vdsGroupDao).get(Mockito.any(Guid.class));
}
#end_block

#method_before
@Test
public void canDoActionSucceeds() throws Exception {
    mockVdsWithStatus(VDSStatus.Maintenance);
    mockVdsDynamic();
    mockVmsPinnedToHost(Collections.<String>emptyList());
    mockIsGlusterEnabled(false);
    mockHasVolumeOnServer(0);
    runAndAssertCanDoActionSuccess();
}
#method_after
@Test
public void canDoActionSucceeds() throws Exception {
    mockVdsWithStatus(VDSStatus.Maintenance);
    mockVdsDynamic();
    mockVmsPinnedToHost(Collections.<String>emptyList());
    mockIsGlusterEnabled(false);
    mockHasVolumeOnServer(false);
    runAndAssertCanDoActionSuccess();
}
#end_block

#method_before
@Test
public void canDoActionFailsWhenGlusterHostHasVolumes() throws Exception {
    mockVdsWithStatus(VDSStatus.Maintenance);
    mockVdsDynamic();
    mockVmsPinnedToHost(Collections.<String>emptyList());
    mockIsGlusterEnabled(true);
    mockHasVolumeOnServer(3);
    boolean canDoAction = command.canDoAction();
    System.out.println(command.getReturnValue().getCanDoActionMessages());
    assertFalse(canDoAction);
}
#method_after
@Test
public void canDoActionFailsWhenGlusterHostHasVolumes() throws Exception {
    mockVdsWithStatus(VDSStatus.Maintenance);
    mockVdsDynamic();
    mockVmsPinnedToHost(Collections.<String>emptyList());
    mockIsGlusterEnabled(true);
    mockHasVolumeOnServer(true);
    boolean canDoAction = command.canDoAction();
    System.out.println(command.getReturnValue().getCanDoActionMessages());
    assertFalse(canDoAction);
}
#end_block

#method_before
@Test
public void canDoActionFailsWhenVMsPinnedToHost() throws Exception {
    mockVdsWithStatus(VDSStatus.Maintenance);
    mockVdsDynamic();
    mockIsGlusterEnabled(true);
    mockHasVolumeOnServer(2);
    String vmName = "abc";
    mockVmsPinnedToHost(Arrays.asList(vmName));
    ArrayList<String> messages = runAndAssertCanDoActionFailure(VdcBllMessages.ACTION_TYPE_FAILED_DETECTED_PINNED_VMS);
    boolean foundMessage = false;
    for (String message : messages) {
        foundMessage |= message.contains(vmName);
    }
    assertTrue("Can't find VM name in can do action messages", foundMessage);
}
#method_after
@Test
public void canDoActionFailsWhenVMsPinnedToHost() throws Exception {
    mockVdsWithStatus(VDSStatus.Maintenance);
    mockVdsDynamic();
    mockIsGlusterEnabled(true);
    mockHasVolumeOnServer(true);
    String vmName = "abc";
    mockVmsPinnedToHost(Arrays.asList(vmName));
    ArrayList<String> messages = runAndAssertCanDoActionFailure(VdcBllMessages.ACTION_TYPE_FAILED_DETECTED_PINNED_VMS);
    boolean foundMessage = false;
    for (String message : messages) {
        foundMessage |= message.contains(vmName);
    }
    assertTrue("Can't find VM name in can do action messages", foundMessage);
}
#end_block

#method_before
private void mockIsGlusterEnabled(boolean glusterService) {
    VDSGroup vdsGroup = new VDSGroup();
    vdsGroup.setGlusterService(glusterService);
    when(vdsGroupDAO.get(command.getVdsGroupId())).thenReturn(vdsGroup);
}
#method_after
private void mockIsGlusterEnabled(boolean glusterService) {
    when(vdsGroup.supportsGlusterService()).thenReturn(glusterService);
}
#end_block

#method_before
private void mockHasVolumeOnServer(int volumeCount) {
    when(glusterVolumeDao.getBrickCountByServerId(command.getVdsId())).thenReturn(volumeCount);
}
#method_after
private void mockHasVolumeOnServer(boolean isBricksRequired) {
    List<GlusterBrickEntity> bricks = new ArrayList<GlusterBrickEntity>();
    if (isBricksRequired) {
        GlusterBrickEntity brick = new GlusterBrickEntity();
        brick.setVolumeId(new Guid());
        brick.setServerId(command.getVdsId());
        bricks.add(brick);
    }
    when(glusterBrickDao.getGlusterVolumeBricksByServerId(command.getVdsId())).thenReturn(bricks);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = CanRemoveVds(getVdsId(), getReturnValue().getCanDoActionMessages());
    storage_pool storagePool = getStoragePoolDAO().getForVds(getParameters().getVdsId());
    if (returnValue && storagePool != null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!getStorageDomainDAO().getAllForStoragePool(storagePool.getId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_WITH_LOCAL_STORAGE);
            returnValue = false;
        }
    }
    if (isGlusterEnabled() && hasVolumeOnServer()) {
        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
        return false;
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = CanRemoveVds(getVdsId(), getReturnValue().getCanDoActionMessages());
    storage_pool storagePool = getStoragePoolDAO().getForVds(getParameters().getVdsId());
    if (returnValue && storagePool != null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!getStorageDomainDAO().getAllForStoragePool(storagePool.getId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_WITH_LOCAL_STORAGE);
            returnValue = false;
        }
    }
    if (isGlusterEnabled() && hasVolumeOnServer()) {
        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
        returnValue = false;
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    return returnValue;
}
#end_block

#method_before
private void RemoveVdsFromCollection() {
    // ResourceManager.Instance.removeVds(VdsId);
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RemoveVds, new RemoveVdsVDSCommandParameters(getVdsId()));
    if (!returnValue.getSucceeded()) {
        errorType = AuditLogType.USER_FAILED_REMOVE_VDS;
    }
}
#method_after
private void RemoveVdsFromCollection() {
    // ResourceManager.Instance.removeVds(VdsId);
    Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RemoveVds, new RemoveVdsVDSCommandParameters(getVdsId()));
}
#end_block

#method_before
private boolean isGlusterEnabled() {
    VDSGroup vdsGroup = getVdsGroupDAO().get(getVdsGroupId());
    return (vdsGroup.supportsGlusterService());
}
#method_after
private boolean isGlusterEnabled() {
    return (getVdsGroup().supportsGlusterService());
}
#end_block

#method_before
private boolean hasVolumeOnServer() {
    if (getGlusterVolumeDao().getBrickCountByServerId(getVdsId()) > 0) {
        return true;
    } else {
        return false;
    }
}
#method_after
private boolean hasVolumeOnServer() {
    if (getGlusterBrickDao().getGlusterVolumeBricksByServerId(getVdsId()).size() > 0) {
        return true;
    } else {
        return false;
    }
}
#end_block

#method_before
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (getVdsDAO().getAll().size() > 1) {
        if (isGlusterEnabled() && !hasVolumeOnServer()) {
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((ClusterUtils.getInstance().getUpServer(getVdsGroupId())).getId(), getVdsName(), forceAction));
            setSucceeded(returnValue.getSucceeded());
            if (!returnValue.getSucceeded()) {
                errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
            }
        }
    }
}
#method_after
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAll().size() > 1 && !hasVolumeOnServer()) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((ClusterUtils.getInstance().getUpServer(getVdsGroupId())).getId(), getVdsName(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!returnValue.getSucceeded()) {
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
        }
    }
}
#end_block

#method_before
@Override
public Response start(Action action) {
    return doAction(VdcActionType.StartGlusterVolume, new GlusterVolumeActionParameters(guid, action.isForce() == null ? false : action.isForce()), action);
}
#method_after
@Override
public Response start(Action action) {
    return doAction(VdcActionType.StartGlusterVolume, new GlusterVolumeActionParameters(guid, action.isSetForce() ? action.isForce() : false), action);
}
#end_block

#method_before
@Override
public Response stop(Action action) {
    return doAction(VdcActionType.StopGlusterVolume, new GlusterVolumeActionParameters(guid, action.isForce() == null ? false : action.isForce()), action);
}
#method_after
@Override
public Response stop(Action action) {
    return doAction(VdcActionType.StopGlusterVolume, new GlusterVolumeActionParameters(guid, action.isSetForce() ? action.isForce() : false), action);
}
#end_block

#method_before
@Override
public Response rebalance(Action action) {
    boolean fixLayoutOnly = (action.isFixLayout() == null ? false : action.isFixLayout());
    boolean force = (action.isForce() == null ? false : action.isForce());
    return doAction(VdcActionType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceParameters(guid, fixLayoutOnly, force), action);
}
#method_after
@Override
public Response rebalance(Action action) {
    boolean fixLayoutOnly = (action.isSetFixLayout() ? action.isFixLayout() : false);
    boolean force = (action.isSetForce() ? action.isForce() : false);
    return doAction(VdcActionType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceParameters(guid, fixLayoutOnly, force), action);
}
#end_block

#method_before
@Override
public Response resetOption(Action action) {
    Option option = action.getOption();
    validateParameters(option, "name");
    return resetOption(action, option.getName(), action.isForce() == null ? false : action.isForce());
}
#method_after
@Override
public Response resetOption(Action action) {
    Option option = action.getOption();
    validateParameters(option, "name");
    return resetOption(action, option.getName(), action.isSetForce() ? action.isForce() : false);
}
#end_block

#method_before
@Override
public Response resetAllOptions(Action action) {
    return resetOption(action, null, action.isForce() == null ? false : action.isForce());
}
#method_after
@Override
public Response resetAllOptions(Action action) {
    return resetOption(action, null, action.isSetForce() ? action.isForce() : false);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    List<ActionGroup> attachGroups = getParameters().getActionGroups();
    Guid roleId = getParameters().getRoleId();
    roles role = getRoleDao().get(roleId);
    List<String> canDoMessages = getReturnValue().getCanDoActionMessages();
    if (CheckIfRoleIsReadOnly(canDoMessages)) {
        canDoMessages.add(VdcBllMessages.VAR__TYPE__ROLE.toString());
        canDoMessages.add(VdcBllMessages.VAR__ACTION__ATTACH_ACTION_TO.toString());
        return false;
    }
    // Get all groups by ID and check if they already exist
    List<ActionGroup> allGroups = getActionGroupsByRoleId(roleId);
    for (ActionGroup group : attachGroups) {
        if (allGroups.contains(group)) {
            // group already exist
            canDoMessages.add(VdcBllMessages.ERROR_CANNOT_ATTACH_ACTION_GROUP_TO_ROLE_ATTACHED.toString());
            return false;
        } else if (role.getType() != RoleType.ADMIN && group.getRoleType() == RoleType.ADMIN) {
            canDoMessages.add(VdcBllMessages.CANNOT_ADD_ACTION_GROUPS_TO_ROLE_TYPE.toString());
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    List<ActionGroup> attachGroups = getParameters().getActionGroups();
    Guid roleId = getParameters().getRoleId();
    roles role = getRoleDao().get(roleId);
    List<String> canDoMessages = getReturnValue().getCanDoActionMessages();
    if (checkIfRoleIsReadOnly(canDoMessages)) {
        canDoMessages.add(VdcBllMessages.VAR__TYPE__ROLE.toString());
        canDoMessages.add(VdcBllMessages.VAR__ACTION__ATTACH_ACTION_TO.toString());
        return false;
    }
    // Get all groups by ID and check if they already exist
    List<ActionGroup> allGroups = getActionGroupsByRoleId(roleId);
    for (ActionGroup group : attachGroups) {
        if (allGroups.contains(group)) {
            // group already exist
            canDoMessages.add(VdcBllMessages.ERROR_CANNOT_ATTACH_ACTION_GROUP_TO_ROLE_ATTACHED.toString());
            return false;
        } else if (role.getType() != RoleType.ADMIN && group.getRoleType() == RoleType.ADMIN) {
            canDoMessages.add(VdcBllMessages.CANNOT_ADD_ACTION_GROUPS_TO_ROLE_TYPE.toString());
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    roles oldRole = getRoleDao().get(getRole().getId());
    if (oldRole == null) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_ID);
        returnValue = false;
    } else {
        if (CheckIfRoleIsReadOnly(getReturnValue().getCanDoActionMessages())) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
        } else if (!StringHelper.EqOp(getRole().getname(), oldRole.getname()) && getRoleDao().getByName(getRole().getname()) != null) {
            addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_NAME);
            returnValue = false;
        } else // changing role type isn't allowed
        if (getRole().getType() != oldRole.getType()) {
            addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_TYPE);
            returnValue = false;
        }
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE);
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    roles oldRole = getRoleDao().get(getRole().getId());
    if (oldRole == null) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_ID);
        returnValue = false;
    } else {
        if (checkIfRoleIsReadOnly(getReturnValue().getCanDoActionMessages())) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
        } else if (!StringHelper.EqOp(getRole().getname(), oldRole.getname()) && getRoleDao().getByName(getRole().getname()) != null) {
            addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_NAME);
            returnValue = false;
        } else // changing role type isn't allowed
        if (getRole().getType() != oldRole.getType()) {
            addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_TYPE);
            returnValue = false;
        }
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE);
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    Guid roleId = getParameters().getRoleId();
    roles role = getRoleDao().get(roleId);
    if (role == null) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_ACTION_GROUP_TO_ROLE_ATTACHED);
        return false;
    }
    List<String> canDoMessages = getReturnValue().getCanDoActionMessages();
    if (CheckIfRoleIsReadOnly(canDoMessages)) {
        canDoMessages.add(VdcBllMessages.VAR__TYPE__ROLE.toString());
        canDoMessages.add(VdcBllMessages.VAR__ACTION__DETACH_ACTION_TO.toString());
        return false;
    }
    List<ActionGroup> groupsToDetach = getParameters().getActionGroups();
    List<ActionGroup> allGroups = getActionGroupsByRoleId(roleId);
    // Check that target action group exists for this role
    for (ActionGroup group : groupsToDetach) {
        if (!allGroups.contains(group)) {
            canDoMessages.add(VdcBllMessages.ERROR_CANNOT_DETACH_ACTION_GROUP_TO_ROLE_NOT_ATTACHED.toString());
            return false;
        }
    }
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    Guid roleId = getParameters().getRoleId();
    roles role = getRoleDao().get(roleId);
    if (role == null) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_ACTION_GROUP_TO_ROLE_ATTACHED);
        return false;
    }
    List<String> canDoMessages = getReturnValue().getCanDoActionMessages();
    if (checkIfRoleIsReadOnly(canDoMessages)) {
        canDoMessages.add(VdcBllMessages.VAR__TYPE__ROLE.toString());
        canDoMessages.add(VdcBllMessages.VAR__ACTION__DETACH_ACTION_TO.toString());
        return false;
    }
    List<ActionGroup> groupsToDetach = getParameters().getActionGroups();
    List<ActionGroup> allGroups = getActionGroupsByRoleId(roleId);
    // Check that target action group exists for this role
    for (ActionGroup group : groupsToDetach) {
        if (!allGroups.contains(group)) {
            canDoMessages.add(VdcBllMessages.ERROR_CANNOT_DETACH_ACTION_GROUP_TO_ROLE_NOT_ATTACHED.toString());
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    roles roles = getRoleDao().get(getParameters().getRoleId());
    if (roles == null) {
        returnValue = false;
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_REMOVE_ROLE_INVALID_ROLE_ID);
    } else {
        if (CheckIfRoleIsReadOnly(getReturnValue().getCanDoActionMessages())) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE);
            addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
        } else {
            if (getPermissionDAO().getAllForRole(getParameters().getRoleId()).size() != 0) {
                returnValue = false;
                addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_REMOVE_ROLE_ATTACHED_TO_PERMISSION);
            }
        }
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    roles roles = getRoleDao().get(getParameters().getRoleId());
    if (roles == null) {
        returnValue = false;
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_REMOVE_ROLE_INVALID_ROLE_ID);
    } else {
        if (checkIfRoleIsReadOnly(getReturnValue().getCanDoActionMessages())) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE);
            addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
        } else {
            if (getPermissionDAO().getAllForRole(getParameters().getRoleId()).size() != 0) {
                returnValue = false;
                addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_REMOVE_ROLE_ATTACHED_TO_PERMISSION);
            }
        }
    }
    return returnValue;
}
#end_block

#method_before
@Override
public GlusterVolumes list() {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
public GlusterVolumes list() {
    String constraint = QueryHelper.getConstraint(getUriInfo(), "cluster = " + parent.get().getName(), GlusterVolume.class);
    return mapCollection(getBackendCollection(SearchType.GlusterVolume, constraint));
}
#end_block

#method_before
@Override
protected GlusterVolume addParents(GlusterVolume volume) {
    volume.setCluster(new Cluster());
    volume.getCluster().setId(clusterId);
    return volume;
}
#method_after
@Override
protected GlusterVolume addParents(GlusterVolume volume) {
    volume.setCluster(parent.get());
    return volume;
}
#end_block

#method_before
@Override
public Response add(GlusterVolume volume) {
    validateParameters(volume, "name", "volumeType", "glusterBricks");
    GlusterVolumeEntity volumeEntity = getMapper(GlusterVolume.class, GlusterVolumeEntity.class).map(volume, null);
    volumeEntity.setClusterId(Guid.createGuidFromString(clusterId));
    return performCreation(VdcActionType.CreateGlusterVolume, new CreateGlusterVolumeParameters(volumeEntity), new QueryIdResolver(VdcQueryType.GetGlusterVolumeById, GetGlusterVolumeByIdQueryParameters.class), true);
}
#method_after
@Override
public Response add(GlusterVolume volume) {
    validateParameters(volume, "name", "volumeType", "bricks");
    GlusterVolumeEntity volumeEntity = getMapper(GlusterVolume.class, GlusterVolumeEntity.class).map(volume, null);
    volumeEntity.setClusterId(asGuid(parent.get().getId()));
    mapBricks(volume, volumeEntity);
    return performCreation(VdcActionType.CreateGlusterVolume, new CreateGlusterVolumeParameters(volumeEntity), new QueryIdResolver(VdcQueryType.GetGlusterVolumeById, GetGlusterVolumeByIdQueryParameters.class), true);
}
#end_block

#method_before
@Override
protected Response performRemove(String id) {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
protected Response performRemove(String id) {
    return performAction(VdcActionType.DeleteGlusterVolume, new GlusterVolumeParameters(asGuid(id)));
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((serverId == null) ? 0 : serverId.hashCode());
    result = prime * result + ((serverName == null) ? 0 : serverName.hashCode());
    result = prime * result + ((brickDirectory == null) ? 0 : brickDirectory.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getId().hashCode();
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((serverId == null) ? 0 : serverId.hashCode());
    result = prime * result + ((serverName == null) ? 0 : serverName.hashCode());
    result = prime * result + ((brickDirectory == null) ? 0 : brickDirectory.hashCode());
    result = prime * result + ((status == null) ? 0 : status.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterBrickEntity)) {
        return false;
    }
    GlusterBrickEntity brick = (GlusterBrickEntity) obj;
    return ((id != null && id.equals(brick.getId())) && (volumeId != null && volumeId.equals(brick.getVolumeId())) && serverId.equals(brick.getServerId()) && serverName.equals(brick.getServerName()) && brickDirectory.equals(brick.getBrickDirectory()) && status == brick.getStatus());
}
#method_after
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterBrickEntity)) {
        return false;
    }
    GlusterBrickEntity brick = (GlusterBrickEntity) obj;
    return (getId().equals(brick.getId()) && (volumeId != null && volumeId.equals(brick.getVolumeId())) && serverId.equals(brick.getServerId()) && serverName.equals(brick.getServerName()) && brickDirectory.equals(brick.getBrickDirectory()) && status == brick.getStatus());
}
#end_block

#method_before
public Guid getId() {
    return id;
}
#method_after
public Guid getId() {
    if (id == null) {
        id = Guid.NewGuid();
    }
    return id;
}
#end_block

#method_before
@Override
public GlusterVolumeOptionEntity getById(Guid id) {
    return getCallsHandler().executeRead("GetGlusterOptionById", optionRowMapper, getCustomMapSqlParameterSource().addValue("id", id.getUuid()));
}
#method_after
@Override
public GlusterVolumeOptionEntity getById(Guid id) {
    return getCallsHandler().executeRead("GetGlusterOptionById", optionRowMapper, getCustomMapSqlParameterSource().addValue("id", id));
}
#end_block

#method_before
@Override
public List<GlusterVolumeOptionEntity> getOptionsOfVolume(Guid volumeId) {
    return getCallsHandler().executeReadList("GetOptionsByGlusterVolumeGuid", optionRowMapper, getCustomMapSqlParameterSource().addValue("volume_id", volumeId.getUuid()));
}
#method_after
@Override
public List<GlusterVolumeOptionEntity> getOptionsOfVolume(Guid volumeId) {
    return getCallsHandler().executeReadList("GetOptionsByGlusterVolumeGuid", optionRowMapper, getCustomMapSqlParameterSource().addValue("volume_id", volumeId));
}
#end_block

#method_before
private MapSqlParameterSource createVolumeOptionParams(GlusterVolumeOptionEntity option) {
    return getCustomMapSqlParameterSource().addValue("id", option.getId().getUuid()).addValue("volume_id", option.getVolumeId().getUuid()).addValue("option_key", option.getKey()).addValue("option_val", option.getValue());
}
#method_after
private MapSqlParameterSource createVolumeOptionParams(GlusterVolumeOptionEntity option) {
    return getCustomMapSqlParameterSource().addValue("id", option.getId()).addValue("volume_id", option.getVolumeId()).addValue("option_key", option.getKey()).addValue("option_val", option.getValue());
}
#end_block

#method_before
@Override
public GlusterVolumeEntity getByName(Guid clusterId, String volName) {
    GlusterVolumeEntity volume = getCallsHandler().executeRead("GetGlusterVolumeByName", volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId.getUuid()).addValue("vol_name", volName));
    fetchRelatedEntities(volume);
    return volume;
}
#method_after
@Override
public GlusterVolumeEntity getByName(Guid clusterId, String volName) {
    GlusterVolumeEntity volume = getCallsHandler().executeRead("GetGlusterVolumeByName", volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("vol_name", volName));
    fetchRelatedEntities(volume);
    return volume;
}
#end_block

#method_before
@Override
public List<GlusterVolumeEntity> getByClusterId(Guid clusterId) {
    List<GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByClusterGuid", volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId.getUuid()));
    fetchRelatedEntities(volumes);
    return volumes;
}
#method_after
@Override
public List<GlusterVolumeEntity> getByClusterId(Guid clusterId) {
    List<GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByClusterGuid", volumeRowMapper, getCustomMapSqlParameterSource().addValue("cluster_id", clusterId));
    fetchRelatedEntities(volumes);
    return volumes;
}
#end_block

#method_before
@Override
public void removeByName(Guid clusterId, String volName) {
    getCallsHandler().executeModification("DeleteGlusterVolumeByName", getCustomMapSqlParameterSource().addValue("cluster_id", clusterId.getUuid()).addValue("vol_name", volName));
}
#method_after
@Override
public void removeByName(Guid clusterId, String volName) {
    getCallsHandler().executeModification("DeleteGlusterVolumeByName", getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("vol_name", volName));
}
#end_block

#method_before
@Override
public void updateVolumeStatusByName(Guid clusterId, String volumeName, GlusterVolumeStatus status) {
    getCallsHandler().executeModification("UpdateGlusterVolumeStatusByName", getCustomMapSqlParameterSource().addValue("cluster_id", clusterId.getUuid()).addValue("vol_name", volumeName).addValue("status", EnumUtils.nameOrNull(status)));
}
#method_after
@Override
public void updateVolumeStatusByName(Guid clusterId, String volumeName, GlusterVolumeStatus status) {
    getCallsHandler().executeModification("UpdateGlusterVolumeStatusByName", getCustomMapSqlParameterSource().addValue("cluster_id", clusterId).addValue("vol_name", volumeName).addValue("status", EnumUtils.nameOrNull(status)));
}
#end_block

#method_before
private MapSqlParameterSource createVolumeIdParams(Guid id) {
    return getCustomMapSqlParameterSource().addValue("volume_id", id.getUuid());
}
#method_after
private MapSqlParameterSource createVolumeIdParams(Guid id) {
    return getCustomMapSqlParameterSource().addValue("volume_id", id);
}
#end_block

#method_before
private void insertVolumeEntity(GlusterVolumeEntity volume) {
    getCallsHandler().executeModification("InsertGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId().getUuid()).addValue("cluster_id", volume.getClusterId().getUuid()).addValue("vol_name", volume.getName()).addValue("vol_type", EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()));
}
#method_after
private void insertVolumeEntity(GlusterVolumeEntity volume) {
    getCallsHandler().executeModification("InsertGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()));
}
#end_block

#method_before
@Override
public void removeBrick(Guid brickId) {
    getCallsHandler().executeModification("DeleteGlusterVolumeBrick", getCustomMapSqlParameterSource().addValue("id", brickId.getUuid()));
}
#method_after
@Override
public void removeBrick(Guid brickId) {
    getCallsHandler().executeModification("DeleteGlusterVolumeBrick", getCustomMapSqlParameterSource().addValue("id", brickId));
}
#end_block

#method_before
@Override
public void replaceBrick(GlusterBrickEntity oldBrick, GlusterBrickEntity newBrick) {
    getCallsHandler().executeModification("UpdateGlusterVolumeBrick", getCustomMapSqlParameterSource().addValue("id", oldBrick.getId()).addValue("new_id", newBrick.getId()).addValue("new_server_id", newBrick.getServerId().getUuid()).addValue("new_brick_dir", newBrick.getBrickDirectory()).addValue("new_status", EnumUtils.nameOrNull(newBrick.getStatus())));
}
#method_after
@Override
public void replaceBrick(GlusterBrickEntity oldBrick, GlusterBrickEntity newBrick) {
    getCallsHandler().executeModification("UpdateGlusterVolumeBrick", getCustomMapSqlParameterSource().addValue("id", oldBrick.getId()).addValue("new_id", newBrick.getId()).addValue("new_server_id", newBrick.getServerId()).addValue("new_brick_dir", newBrick.getBrickDirectory()).addValue("new_status", EnumUtils.nameOrNull(newBrick.getStatus())));
}
#end_block

#method_before
@Override
public void updateBrickStatus(Guid brickId, GlusterBrickStatus status) {
    getCallsHandler().executeModification("UpdateGlusterVolumeBrickStatus", getCustomMapSqlParameterSource().addValue("id", brickId.getUuid()).addValue("status", EnumUtils.nameOrNull(status)));
}
#method_after
@Override
public void updateBrickStatus(Guid brickId, GlusterBrickStatus status) {
    getCallsHandler().executeModification("UpdateGlusterVolumeBrickStatus", getCustomMapSqlParameterSource().addValue("id", brickId).addValue("status", EnumUtils.nameOrNull(status)));
}
#end_block

#method_before
@Override
public GlusterBrickEntity getById(Guid id) {
    return getCallsHandler().executeRead("GetGlusterBrickById", brickRowMapper, getCustomMapSqlParameterSource().addValue("id", id.getUuid()));
}
#method_after
@Override
public GlusterBrickEntity getById(Guid id) {
    return getCallsHandler().executeRead("GetGlusterBrickById", brickRowMapper, getCustomMapSqlParameterSource().addValue("id", id));
}
#end_block

#method_before
@Override
public List<GlusterBrickEntity> getBricksOfVolume(Guid volumeId) {
    return getCallsHandler().executeReadList("GetBricksByGlusterVolumeGuid", brickRowMapper, getCustomMapSqlParameterSource().addValue("volume_id", volumeId.getUuid()));
}
#method_after
@Override
public List<GlusterBrickEntity> getBricksOfVolume(Guid volumeId) {
    return getCallsHandler().executeReadList("GetBricksByGlusterVolumeGuid", brickRowMapper, getCustomMapSqlParameterSource().addValue("volume_id", volumeId));
}
#end_block

#method_before
private MapSqlParameterSource createBrickParams(GlusterBrickEntity brick) {
    return getCustomMapSqlParameterSource().addValue("id", brick.getId().getUuid()).addValue("volume_id", brick.getVolumeId().getUuid()).addValue("server_id", brick.getServerId().getUuid()).addValue("brick_dir", brick.getBrickDirectory()).addValue("status", EnumUtils.nameOrNull(brick.getStatus()));
}
#method_after
private MapSqlParameterSource createBrickParams(GlusterBrickEntity brick) {
    return getCustomMapSqlParameterSource().addValue("id", brick.getId()).addValue("volume_id", brick.getVolumeId()).addValue("server_id", brick.getServerId()).addValue("brick_dir", brick.getBrickDirectory()).addValue("status", EnumUtils.nameOrNull(brick.getStatus()));
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((key == null) ? 0 : key.hashCode());
    result = prime * result + ((value == null) ? 0 : value.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getId().hashCode();
    result = prime * result + ((volumeId == null) ? 0 : volumeId.hashCode());
    result = prime * result + ((key == null) ? 0 : key.hashCode());
    result = prime * result + ((value == null) ? 0 : value.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterVolumeOptionEntity)) {
        return false;
    }
    GlusterVolumeOptionEntity option = (GlusterVolumeOptionEntity) obj;
    return ((id != null && id.equals(option.getId())) && (volumeId != null && volumeId.equals(option.getVolumeId())) && key.equals(option.getKey()) && value.equals(option.getValue()));
}
#method_after
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof GlusterVolumeOptionEntity)) {
        return false;
    }
    GlusterVolumeOptionEntity option = (GlusterVolumeOptionEntity) obj;
    return (getId().equals(option.getId()) && (volumeId != null && volumeId.equals(option.getVolumeId())) && key.equals(option.getKey()) && value.equals(option.getValue()));
}
#end_block

#method_before
public Guid getId() {
    return id;
}
#method_after
public Guid getId() {
    if (id == null) {
        id = Guid.NewGuid();
    }
    return id;
}
#end_block

#method_before
public int getReplicaCount() {
    return replicaCount;
}
#method_after
public Integer getReplicaCount() {
    return replicaCount;
}
#end_block

#method_before
public void setReplicaCount(int replicaCount) {
    this.replicaCount = replicaCount;
}
#method_after
public void setReplicaCount(Integer replicaCount) {
    this.replicaCount = replicaCount;
}
#end_block

#method_before
public int getStripeCount() {
    return stripeCount;
}
#method_after
public Integer getStripeCount() {
    return stripeCount;
}
#end_block

#method_before
public void setStripeCount(int stripeCount) {
    this.stripeCount = stripeCount;
}
#method_after
public void setStripeCount(Integer stripeCount) {
    this.stripeCount = stripeCount;
}
#end_block

#method_before
@Override
public ActionResource getActionSubresource(String action, String oid) {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
public ActionResource getActionSubresource(String action, String oid) {
    // TODO: To be implemented (pending backend functionality)
    throw new NotImplementedException();
}
#end_block

#method_before
@Override
public Response rebalance(Action action) {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
public Response rebalance(Action action) {
    // TODO: To be implemented (pending backend functionality)
    throw new NotImplementedException();
}
#end_block

#method_before
@Override
public Response resetAllOptions() {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
public Response resetAllOptions(Action action) {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#end_block

#method_before
@Override
protected Response performRemove(String id) {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
protected Response performRemove(String id) {
    // TODO: To be implemented (pending backend functionality)
    throw new NotImplementedException();
}
#end_block

#method_before
@Override
public Response replace(Action action) {
    // TODO: To be implemented
    throw new NotImplementedException();
}
#method_after
@Override
public Response replace(Action action) {
    // TODO: To be implemented (pending backend functionality)
    throw new NotImplementedException();
}
#end_block

#method_before
@Test
public void testGetAllAttachableDisksByPoolWithNoPermissionsFilterDisabled() {
    List<Disk> result = dao.getAllAttachableDisksByPoolId(null, PRIVILEGED_USER_ID, false);
    assertFullGetAllAttachableDisksByPoolId(result);
}
#method_after
@Test
public void testGetAllAttachableDisksByPoolWithNoPermissionsFilterDisabled() {
    List<Disk> result = dao.getAllAttachableDisksByPoolId(null, UNPRIVILEGED_USER_ID, false);
    assertFullGetAllAttachableDisksByPoolId(result);
}
#end_block

#method_before
protected void mapNfsOrLocalOrPosix(StorageDomain model, storage_domains entity) {
    final Storage storage = model.getStorage();
    storage_server_connections cnx = getStorageServerConnection(entity.getstorage());
    if (cnx.getconnection().contains(":")) {
        String[] parts = cnx.getconnection().split(":");
        model.getStorage().setAddress(parts[0]);
        model.getStorage().setPath(parts[1]);
    } else {
        model.getStorage().setPath(cnx.getconnection());
    }
    storage.setMountOptions(cnx.getMountOptions());
    storage.setVfsType(cnx.getVfsType());
    storage.setNfsRetrans(cnx.getNfsRetrans());
    storage.setNfsTimeo(cnx.getNfsTimeo());
    storage.setNfsVersion(cnx.getNfsVersion());
}
#method_after
protected void mapNfsOrLocalOrPosix(StorageDomain model, storage_domains entity) {
    final Storage storage = model.getStorage();
    storage_server_connections cnx = getStorageServerConnection(entity.getstorage());
    if (cnx.getconnection().contains(":")) {
        String[] parts = cnx.getconnection().split(":");
        model.getStorage().setAddress(parts[0]);
        model.getStorage().setPath(parts[1]);
    } else {
        model.getStorage().setPath(cnx.getconnection());
    }
    storage.setMountOptions(cnx.getMountOptions());
    storage.setVfsType(cnx.getVfsType());
    storage.setNfsRetrans(cnx.getNfsRetrans().intValue());
    storage.setNfsTimeo(cnx.getNfsTimeo().intValue());
    storage.setNfsVersion(cnx.getNfsVersion().intValue());
}
#end_block

#method_before
@Mapping(from = StorageDomain.class, to = storage_server_connections.class)
public static storage_server_connections map(StorageDomain model, storage_server_connections template) {
    storage_server_connections entity = template != null ? template : new storage_server_connections();
    if (model.isSetStorage() && model.getStorage().isSetType()) {
        Storage storage = model.getStorage();
        StorageType storageType = StorageType.fromValue(storage.getType());
        if (storageType != null) {
            entity.setstorage_type(map(storageType, null));
            switch(storageType) {
                case ISCSI:
                    break;
                case FCP:
                    break;
                case NFS:
                    if (storage.isSetAddress() && storage.isSetPath()) {
                        entity.setconnection(storage.getAddress() + ":" + storage.getPath());
                    }
                    if (storage.getNfsRetrans() != null) {
                        entity.setNfsRetrans(storage.getNfsRetrans());
                    }
                    if (storage.getNfsTimeo() != null) {
                        entity.setNfsTimeo(storage.getNfsTimeo());
                    }
                    if (storage.getNfsVersion() != null) {
                        entity.setNfsVersion(storage.getNfsVersion());
                    }
                    break;
                case LOCALFS:
                    if (storage.isSetPath()) {
                        entity.setconnection(storage.getPath());
                    }
                    break;
                case POSIXFS:
                    if (storage.isSetAddress() && storage.isSetPath()) {
                        entity.setconnection(storage.getAddress() + ":" + storage.getPath());
                    } else if (storage.isSetPath()) {
                        entity.setconnection(storage.getPath());
                    }
                    if (storage.isSetMountOptions()) {
                        entity.setMountOptions(storage.getMountOptions());
                    }
                    if (storage.isSetVfsType()) {
                        entity.setVfsType(storage.getVfsType());
                    }
                default:
                    break;
            }
        }
    }
    return entity;
}
#method_after
@Mapping(from = StorageDomain.class, to = storage_server_connections.class)
public static storage_server_connections map(StorageDomain model, storage_server_connections template) {
    storage_server_connections entity = template != null ? template : new storage_server_connections();
    if (model.isSetStorage() && model.getStorage().isSetType()) {
        Storage storage = model.getStorage();
        StorageType storageType = StorageType.fromValue(storage.getType());
        if (storageType != null) {
            entity.setstorage_type(map(storageType, null));
            switch(storageType) {
                case ISCSI:
                    break;
                case FCP:
                    break;
                case NFS:
                    if (storage.isSetAddress() && storage.isSetPath()) {
                        entity.setconnection(storage.getAddress() + ":" + storage.getPath());
                    }
                    if (storage.getNfsRetrans() != null) {
                        entity.setNfsRetrans(storage.getNfsRetrans().shortValue());
                    }
                    if (storage.getNfsTimeo() != null) {
                        entity.setNfsTimeo(storage.getNfsTimeo().shortValue());
                    }
                    if (storage.getNfsVersion() != null) {
                        entity.setNfsVersion(storage.getNfsVersion().shortValue());
                    }
                    break;
                case LOCALFS:
                    if (storage.isSetPath()) {
                        entity.setconnection(storage.getPath());
                    }
                    break;
                case POSIXFS:
                    if (storage.isSetAddress() && storage.isSetPath()) {
                        entity.setconnection(storage.getAddress() + ":" + storage.getPath());
                    } else if (storage.isSetPath()) {
                        entity.setconnection(storage.getPath());
                    }
                    if (storage.isSetMountOptions()) {
                        entity.setMountOptions(storage.getMountOptions());
                    }
                    if (storage.isSetVfsType()) {
                        entity.setVfsType(storage.getVfsType());
                    }
                default:
                    break;
            }
        }
    }
    return entity;
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeReplaceBrickStartFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__START);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME_REBALANCE);
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__START);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().isFixLayoutOnly(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
    // addToTaskListInDb(getVdsGroupId(), getGlusterVolumeName(), getParameters().isForceAction());
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().isFixLayoutOnly(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
}
#end_block

#method_before
public void Edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    ClusterModel model = new ClusterModel();
    model.setEntity(cluster);
    model.Init(true, getGlusterModeEnum());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    model.setHashName("edit_cluster");
    model.setOriginalName(cluster.getname());
    model.getName().setEntity(cluster.getname());
    model.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    model.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(model);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result) {
            ClusterModel clusterModel = (ClusterModel) model1;
            ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
            if (volumes.size() != 0) {
                if (cluster.supportsGlusterService()) {
                    clusterModel.getEnableGlusterService().setIsChangable(false);
                }
            }
        }
    };
    AsyncDataProvider.GetVolumeList(asyncQuery, cluster.getname());
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster) {
        model.getName().setIsChangable(false);
        // $NON-NLS-1$
        model.getName().setInfo("Cannot edit Cluster's Name in tree context");
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void Edit() {
    final VDSGroup cluster = (VDSGroup) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    ClusterModel model = new ClusterModel();
    model.setEntity(cluster);
    model.Init(true, getGlusterModeEnum());
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editClusterTitle());
    // $NON-NLS-1$
    model.setHashName("edit_cluster");
    model.setOriginalName(cluster.getname());
    model.getName().setEntity(cluster.getname());
    model.getEnableOvirtService().setEntity(cluster.supportsVirtService());
    model.getEnableOvirtService().setIsChangable(false);
    model.getEnableGlusterService().setEntity(cluster.supportsGlusterService());
    model.getEnableGlusterService().setIsChangable(false);
    AsyncQuery asyncQuery = new AsyncQuery();
    asyncQuery.setModel(model);
    asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result) {
            ClusterModel clusterModel = (ClusterModel) model1;
            ArrayList<GlusterVolumeEntity> volumes = (ArrayList<GlusterVolumeEntity>) result;
            if (volumes.size() > 0) {
                clusterModel.getEnableGlusterService().setIsChangable(false);
            } else {
                clusterModel.getEnableGlusterService().setIsChangable(true);
            }
        }
    };
    AsyncDataProvider.GetVolumeList(asyncQuery, cluster.getname());
    AsyncQuery asyncQuery1 = new AsyncQuery();
    asyncQuery1.setModel(model);
    asyncQuery1.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result) {
            ClusterModel clusterModel = (ClusterModel) model1;
            ArrayList<VM> vmList = (ArrayList<VM>) result;
            if (vmList.size() > 0) {
                clusterModel.getEnableOvirtService().setIsChangable(false);
            } else {
                clusterModel.getEnableOvirtService().setIsChangable(true);
            }
        }
    };
    AsyncDataProvider.GetVmListByClusterName(asyncQuery1, cluster.getname());
    if (getSystemTreeSelectedItem() != null && getSystemTreeSelectedItem().getType() == SystemTreeItemType.Cluster) {
        model.getName().setIsChangable(false);
        // $NON-NLS-1$
        model.getName().setInfo("Cannot edit Cluster's Name in tree context");
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#method_after
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType().name());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#end_block

#method_before
private void onAddBricks() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    // TODO: add the code to do the action (which is currently not available)
    setWindow(null);
}
#method_after
private void onAddBricks() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    if (volumeBrickModel == null) {
        return;
    }
    if (!volumeBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeBrickModel.getBricks().getItems()) {
        GlusterBrickEntity brickEntity = (GlusterBrickEntity) ((EntityModel) model).getEntity();
        brickEntity.setVolumeId(volumeEntity.getId());
        brickList.add(brickEntity);
    }
    volumeBrickModel.setMessage(null);
    if (brickList.size() == 0) {
        volumeBrickModel.setMessage(ConstantsManager.getInstance().getConstants().emptyAddBricksMsg());
        return;
    }
    if (!VolumeBrickModel.validateBrickCount(volumeEntity.getVolumeType(), volumeEntity.getBricks().size() + brickList.size(), volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue())) {
        volumeBrickModel.setMessage(VolumeBrickModel.getValidationFailedMsg(volumeEntity.getVolumeType()));
        return;
    }
    volumeBrickModel.StartProgress(null);
    GlusterVolumeBricksActionParameters parameter = new GlusterVolumeBricksActionParameters(volumeEntity.getId(), brickList, volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue());
    Frontend.RunAction(VdcActionType.AddBricksToGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VolumeBrickModel localModel = (VolumeBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, volumeBrickModel);
}
#end_block

#method_before
private void removeBricks() {
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_bricks");
    model.setMessage(ConstantsManager.getInstance().getConstants().removeBricksMessage());
    if (getSelectedItems() == null) {
        return;
    }
    java.util.ArrayList<String> list = new java.util.ArrayList<String>();
    for (GlusterBrickEntity item : Linq.<GlusterBrickEntity>Cast(getSelectedItems())) {
        list.add(item.getQualifiedName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand command1 = new UICommand("OnRemove", this);
    command1.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command1.setIsDefault(true);
    model.getCommands().add(command1);
    // $NON-NLS-1$
    UICommand command2 = new UICommand("Cancel", this);
    command2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command2.setIsCancel(true);
    model.getCommands().add(command2);
}
#method_after
private void removeBricks() {
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_bricks");
    model.setMessage(ConstantsManager.getInstance().getConstants().removeBricksMessage());
    java.util.ArrayList<String> list = new java.util.ArrayList<String>();
    for (GlusterBrickEntity item : Linq.<GlusterBrickEntity>Cast(getSelectedItems())) {
        list.add(item.getQualifiedName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand command1 = new UICommand("OnRemove", this);
    command1.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command1.setIsDefault(true);
    model.getCommands().add(command1);
    // $NON-NLS-1$
    UICommand command2 = new UICommand("Cancel", this);
    command2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command2.setIsCancel(true);
    model.getCommands().add(command2);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount());
    }
    setSucceeded(returnValue.getSucceeded());
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.AddBricksToGlusterVolume, new GlusterVolumeBricksActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        addGlusterVolumeBricksInDb(getParameters().getBricks(), getParameters().getReplicaCount(), getParameters().getStripeCount());
    }
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
public void setVolumeIdInBricks(List<GlusterBrickEntity> bricks) {
    for (GlusterBrickEntity brick : bricks) {
        brick.setVolumeId(getVolumeId());
    }
}
#method_after
public void setVolumeIdInBricks(List<GlusterBrickEntity> bricks) {
    if (bricks != null) {
        for (GlusterBrickEntity brick : bricks) {
            brick.setVolumeId(getVolumeId());
        }
    }
}
#end_block

#method_before
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
}
#method_after
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
}
#end_block

#method_before
public StatusOnlyReturnForXmlRpc hotPlugNic(XmlRpcStruct info) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.hotplugNic(info.getInnerMap());
        StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public StatusOnlyReturnForXmlRpc hotPlugNic(XmlRpcStruct info) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.hotplugNic(info.getInnerMap());
        StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRemoveBricksFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeRemoveBricksFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getGlusterVolume(), getParameters().getBricks());
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getBricks()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getGlusterVolume(), getParameters().getBricks());
    } else {
        getReturnValue().getExecuteFailedMessages().add(returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
protected void ExecuteVdsBrokerCommand() {
    status = getBroker().glusterVolumeRemoveBricks(getParameters().getVolumeName(), getParameters().getBrickDirectories().toArray(new String[0]));
    ProceedProxyReturnValue();
}
#method_after
@Override
protected void ExecuteVdsBrokerCommand() {
    status = getBroker().glusterVolumeRemoveBrickForce(getParameters().getVolumeName(), getParameters().getBrickDirectories().toArray(new String[0]));
    ProceedProxyReturnValue();
}
#end_block

#method_before
@Mapping(from = GlusterBrick.class, to = GlusterBrickEntity.class)
public static GlusterBrickEntity map(GlusterBrick fromBrick, GlusterBrickEntity toBrick) {
    GlusterBrickEntity brick = (toBrick == null) ? new GlusterBrickEntity() : toBrick;
    brick.setServerId(Guid.createGuidFromString(fromBrick.getServerId()));
    brick.setBrickDirectory(fromBrick.getBrickDir());
    brick.setStatus(GlusterBrickStatus.valueOf(fromBrick.getStatus().name()));
    return brick;
}
#method_after
@Mapping(from = GlusterBrick.class, to = GlusterBrickEntity.class)
public static GlusterBrickEntity map(GlusterBrick fromBrick, GlusterBrickEntity toBrick) {
    GlusterBrickEntity brick = (toBrick == null) ? new GlusterBrickEntity() : toBrick;
    if (fromBrick.isSetServerId()) {
        brick.setServerId(Guid.createGuidFromString(fromBrick.getServerId()));
    }
    if (fromBrick.isSetBrickDir()) {
        brick.setBrickDirectory(fromBrick.getBrickDir());
    }
    return brick;
}
#end_block

#method_before
@Mapping(from = GlusterBrickEntity.class, to = GlusterBrick.class)
public static GlusterBrick map(GlusterBrickEntity fromBrick, GlusterBrick toBrick) {
    GlusterBrick brick = (toBrick == null) ? new GlusterBrick() : toBrick;
    brick.setServerId(fromBrick.getServerId().toString());
    brick.setBrickDir(fromBrick.getBrickDirectory());
    brick.setStatus(GlusterStatus.valueOf(fromBrick.getStatus().name()));
    return brick;
}
#method_after
@Mapping(from = GlusterBrickEntity.class, to = GlusterBrick.class)
public static GlusterBrick map(GlusterBrickEntity fromBrick, GlusterBrick toBrick) {
    GlusterBrick brick = (toBrick == null) ? new GlusterBrick() : toBrick;
    if (fromBrick.getServerId() != null) {
        brick.setServerId(fromBrick.getServerId().toString());
    }
    if (fromBrick.getBrickDirectory() != null) {
        brick.setBrickDir(fromBrick.getBrickDirectory());
    }
    if (fromBrick.getStatus() != null) {
        brick.setState(fromBrick.getStatus().name());
    }
    return brick;
}
#end_block

#method_before
@Override
protected void verify(GlusterBrick model, GlusterBrick transform) {
    assertNotNull(transform);
    assertNotNull(transform.getServerId());
    assertEquals(model.getServerId(), transform.getServerId());
    assertNotNull(transform.getBrickDir());
    assertEquals(model.getBrickDir(), transform.getBrickDir());
    assertNotNull(transform.getStatus());
    assertEquals(model.getStatus(), transform.getStatus());
}
#method_after
@Override
protected void verify(GlusterBrick model, GlusterBrick transform) {
    assertNotNull(transform);
    assertNotNull(transform.getServerId());
    assertEquals(model.getServerId(), transform.getServerId());
    assertNotNull(transform.getBrickDir());
    assertEquals(model.getBrickDir(), transform.getBrickDir());
}
#end_block

#method_before
@Override
protected GlusterVolume postPopulate(GlusterVolume model) {
    // The model is pre-populated with randomly generated values.
    // This won't work for access protocols since it must be a list
    // of valid values that are present in the enum AccessProtocol
    model.setAccessProtocols("GLUSTER,NFS");
    return model;
}
#method_after
@Override
protected GlusterVolume postPopulate(GlusterVolume model) {
    // The model is pre-populated with randomly generated values.
    // This won't work for enum fields like volume type since it
    // must be a valid value from corresponding enum
    model.setVolumeType(GlusterVolumeType.DISTRIBUTE.name());
    List<String> transportTypes = model.getTransportTypes().getTransportTypes();
    transportTypes.clear();
    transportTypes.add(TransportType.TCP.name());
    List<String> accessProtocols = model.getAccessProtocols().getAccessProtocols();
    accessProtocols.clear();
    accessProtocols.add(AccessProtocol.GLUSTER.name());
    accessProtocols.add(AccessProtocol.NFS.name());
    return model;
}
#end_block

#method_before
@Override
protected void verify(GlusterVolume model, GlusterVolume transform) {
    assertNotNull(transform);
    assertNotNull(transform.getId());
    assertEquals(model.getId(), transform.getId());
    assertNotNull(transform.getName());
    assertEquals(model.getName(), transform.getName());
    assertNotNull(transform.getVolumeType());
    assertEquals(model.getVolumeType(), transform.getVolumeType());
    assertNotNull(transform.getTransportType());
    assertEquals(model.getTransportType(), transform.getTransportType());
    assertNotNull(transform.getReplicaCount());
    assertEquals(model.getReplicaCount(), transform.getReplicaCount());
    assertNotNull(transform.getStripeCount());
    assertEquals(model.getStripeCount(), transform.getStripeCount());
    assertNotNull(transform.getStatus());
    assertEquals(model.getStatus(), transform.getStatus());
    verifyBricks(model, transform);
    verifyOptions(model, transform);
}
#method_after
@Override
protected void verify(GlusterVolume model, GlusterVolume transform) {
    assertNotNull(transform);
    assertNotNull(transform.getId());
    assertEquals(model.getId(), transform.getId());
    assertNotNull(transform.getName());
    assertEquals(model.getName(), transform.getName());
    assertNotNull(transform.getVolumeType());
    assertEquals(model.getVolumeType(), transform.getVolumeType());
    assertNotNull(transform.getTransportTypes());
    assertArrayEquals(model.getTransportTypes().getTransportTypes().toArray(), transform.getTransportTypes().getTransportTypes().toArray());
    assertNotNull(transform.getReplicaCount());
    assertEquals(model.getReplicaCount(), transform.getReplicaCount());
    assertNotNull(transform.getStripeCount());
    assertEquals(model.getStripeCount(), transform.getStripeCount());
    verifyOptions(model, transform);
}
#end_block

#method_before
private boolean containsOption(GlusterVolume volume, GlusterOption expectedOption) {
    for (GlusterOption option : volume.getGlusterOptions().getGlusterOptions()) {
        if (option.getKey().equals(expectedOption.getKey()) && option.getValue().equals(expectedOption.getValue())) {
            return true;
        }
    }
    return false;
}
#method_after
private boolean containsOption(GlusterVolume volume, Option expectedOption) {
    for (Option option : volume.getOptions().getOptions()) {
        if (option.getName().equals(expectedOption.getName()) && option.getValue().equals(expectedOption.getValue())) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
private void verifyOptions(GlusterVolume model, GlusterVolume transform) {
    for (GlusterOption modelOption : model.getGlusterOptions().getGlusterOptions()) {
        assertTrue(containsOption(transform, modelOption));
    }
}
#method_after
private void verifyOptions(GlusterVolume model, GlusterVolume transform) {
    for (Option modelOption : model.getOptions().getOptions()) {
        assertTrue(containsOption(transform, modelOption));
    }
}
#end_block

#method_before
@Mapping(from = GlusterVolume.class, to = GlusterVolumeEntity.class)
public static GlusterVolumeEntity map(GlusterVolume fromVolume, GlusterVolumeEntity toVolume) {
    GlusterVolumeEntity volume = toVolume != null ? toVolume : new GlusterVolumeEntity();
    volume.setId(Guid.createGuidFromString(fromVolume.getId()));
    volume.setName(fromVolume.getName());
    volume.setVolumeType(GlusterVolumeType.valueOf(fromVolume.getVolumeType().name()));
    GlusterOptions options = fromVolume.getGlusterOptions();
    for (GlusterOption option : options.getGlusterOptions()) {
        volume.setOption(option.getKey(), option.getValue());
    }
    if (fromVolume.getTransportType() == null) {
        volume.setTransportType(TransportType.ETHERNET);
    } else {
        volume.setTransportType(TransportType.valueOf(fromVolume.getTransportType().name()));
    }
    volume.setAccessProtocols(fromVolume.getAccessProtocols());
    volume.setAccessControlList(fromVolume.getAccessControlList());
    for (GlusterBrick brick : fromVolume.getGlusterBricks().getGlusterBricks()) {
        volume.addBrick(GlusterBrickMapper.map(brick, null));
    }
    volume.setReplicaCount(fromVolume.getReplicaCount());
    volume.setStripeCount(fromVolume.getStripeCount());
    if (fromVolume.getStatus() == null) {
        volume.setStatus(GlusterVolumeStatus.DOWN);
    } else {
        volume.setStatus(GlusterVolumeStatus.valueOf(fromVolume.getStatus().name()));
    }
    return volume;
}
#method_after
@Mapping(from = GlusterVolume.class, to = GlusterVolumeEntity.class)
public static GlusterVolumeEntity map(GlusterVolume fromVolume, GlusterVolumeEntity toVolume) {
    GlusterVolumeEntity volume = toVolume != null ? toVolume : new GlusterVolumeEntity();
    if (fromVolume.isSetId()) {
        volume.setId(Guid.createGuidFromString(fromVolume.getId()));
    }
    if (fromVolume.isSetName()) {
        volume.setName(fromVolume.getName());
    }
    if (fromVolume.isSetVolumeType()) {
        volume.setVolumeType(GlusterVolumeType.valueOf(fromVolume.getVolumeType()));
    }
    if (fromVolume.isSetTransportTypes()) {
        for (String transportType : fromVolume.getTransportTypes().getTransportTypes()) {
            volume.addTransportType(TransportType.valueOf(transportType));
        }
    }
    if (fromVolume.isSetAccessProtocols()) {
        for (String accessProtocol : fromVolume.getAccessProtocols().getAccessProtocols()) {
            volume.addAccessProtocol(AccessProtocol.valueOf(accessProtocol));
        }
    }
    if (fromVolume.isSetAccessControlList()) {
        volume.setAccessControlList(StringUtils.join(fromVolume.getAccessControlList().getAccessControlList(), ","));
    }
    if (fromVolume.isSetReplicaCount()) {
        volume.setReplicaCount(fromVolume.getReplicaCount());
    }
    if (fromVolume.isSetStripeCount()) {
        volume.setStripeCount(fromVolume.getStripeCount());
    }
    if (fromVolume.isSetOptions()) {
        Options options = fromVolume.getOptions();
        if (options.isSetOptions()) {
            for (Option option : options.getOptions()) {
                if (option.isSetName() && option.isSetValue()) {
                    volume.setOption(option.getName(), option.getValue());
                }
            }
        }
    }
    return volume;
}
#end_block

#method_before
@Mapping(from = GlusterVolumeEntity.class, to = GlusterVolume.class)
public static GlusterVolume map(GlusterVolumeEntity fromVolume, GlusterVolume toVolume) {
    GlusterVolume volume = toVolume != null ? toVolume : new GlusterVolume();
    volume.setId(fromVolume.getId().toString());
    volume.setName(fromVolume.getName());
    volume.setVolumeType(org.ovirt.engine.api.model.GlusterVolumeType.valueOf(fromVolume.getVolumeType().name()));
    volume.setTransportType(org.ovirt.engine.api.model.TransportType.valueOf(fromVolume.getTransportType().name()));
    volume.setAccessProtocols(StringHelper.collectionToString(fromVolume.getAccessProtocols(), ","));
    volume.setAccessControlList(fromVolume.getAccessControlList());
    GlusterBricks glusterBricks = new GlusterBricks();
    List<GlusterBrick> bricks = glusterBricks.getGlusterBricks();
    for (GlusterBrickEntity brick : fromVolume.getBricks()) {
        bricks.add(GlusterBrickMapper.map(brick, null));
    }
    volume.setGlusterBricks(glusterBricks);
    volume.setReplicaCount(fromVolume.getReplicaCount());
    volume.setStripeCount(fromVolume.getStripeCount());
    GlusterOptions glusterOptions = new GlusterOptions();
    List<GlusterOption> options = glusterOptions.getGlusterOptions();
    for (GlusterVolumeOptionEntity option : fromVolume.getOptions()) {
        options.add(GlusterOptionMapper.map(option, null));
    }
    volume.setGlusterOptions(glusterOptions);
    volume.setStatus(GlusterStatus.valueOf(fromVolume.getStatus().name()));
    return volume;
}
#method_after
@Mapping(from = GlusterVolumeEntity.class, to = GlusterVolume.class)
public static GlusterVolume map(GlusterVolumeEntity fromVolume, GlusterVolume toVolume) {
    GlusterVolume volume = toVolume != null ? toVolume : new GlusterVolume();
    if (fromVolume.getId() != null) {
        volume.setId(fromVolume.getId().toString());
    }
    if (fromVolume.getName() != null) {
        volume.setName(fromVolume.getName());
    }
    if (fromVolume.getVolumeType() != null) {
        volume.setVolumeType(fromVolume.getVolumeType().name());
    }
    if (fromVolume.getTransportTypes() != null) {
        volume.setTransportTypes(new TransportTypes());
        volume.getTransportTypes().getTransportTypes().addAll(EnumUtils.enumCollectionToStringList(fromVolume.getTransportTypes()));
    }
    if (fromVolume.getAccessProtocols() != null) {
        volume.setAccessProtocols(new AccessProtocols());
        volume.getAccessProtocols().getAccessProtocols().addAll(EnumUtils.enumCollectionToStringList(fromVolume.getAccessProtocols()));
    }
    if (fromVolume.getAccessControlList() != null) {
        volume.getAccessControlList().getAccessControlList().addAll(Arrays.asList(fromVolume.getAccessControlList().split(",")));
    }
    volume.setReplicaCount(fromVolume.getReplicaCount());
    volume.setStripeCount(fromVolume.getStripeCount());
    if (fromVolume.getStatus() != null) {
        volume.setState(fromVolume.getStatus().name());
    }
    if (fromVolume.getOptions() != null) {
        Options glusterOptions = new Options();
        List<Option> options = glusterOptions.getOptions();
        for (GlusterVolumeOptionEntity option : fromVolume.getOptions()) {
            options.add(mapOption(option));
        }
        volume.setOptions(glusterOptions);
    }
    return volume;
}
#end_block

#method_before
private final boolean validatePermissions() {
    return true;
/*
         * // If the user requests filtered execution, his permissions are inconsequential. // If the query supports
         * filtering it should be allowed, and if not - not. if (parameters.isFiltered()) { return !queryType.isAdmin();
         * }
         *
         * // If the query was executed internally, it should be allowed in any event. if (isInternalExecution) { return
         * true; }
         *
         * // In any other event, we have admin execution, which should only be allowed according to the user's //
         * permissions. // Note that is cached per session return getUser().isAdmin();
         */
}
#method_after
private final boolean validatePermissions() {
    return true;
// Due to stability issues, this feature is temporarily disabled.
// Once these issues are solved, we will reenable it.
/*
         * // If the user requests filtered execution, his permissions are inconsequential. // If the query supports
         * filtering it should be allowed, and if not - not. if (parameters.isFiltered()) { return !queryType.isAdmin();
         * }
         *
         * // If the query was executed internally, it should be allowed in any event. if (isInternalExecution) { return
         * true; }
         *
         * // In any other event, we have admin execution, which should only be allowed according to the user's //
         * permissions. // Note that is cached per session return getUser().isAdmin();
         */
}
#end_block

#method_before
private GlusterVolumeEntity getGlusterVolume(Guid id) {
    GlusterVolumeEntity volumeEntity = new GlusterVolumeEntity();
    volumeEntity.setId(id);
    volumeEntity.setName("test-vol");
    volumeEntity.setAccessProtocol(AccessProtocol.GLUSTER);
    volumeEntity.setTransportType(TransportType.ETHERNET);
    volumeEntity.setVolumeType(GlusterVolumeType.DISTRIBUTE);
    return volumeEntity;
}
#method_after
private GlusterVolumeEntity getGlusterVolume(Guid id) {
    GlusterVolumeEntity volumeEntity = new GlusterVolumeEntity();
    HashSet<TransportType> transportType = new HashSet<TransportType>();
    HashSet<AccessProtocol> accessProtocol = new HashSet<AccessProtocol>();
    accessProtocol.add(AccessProtocol.GLUSTER);
    transportType.add(TransportType.TCP);
    volumeEntity.setId(id);
    volumeEntity.setName("test-vol");
    volumeEntity.setAccessProtocols(accessProtocol);
    volumeEntity.setTransportTypes(transportType);
    volumeEntity.setVolumeType(GlusterVolumeType.DISTRIBUTE);
    return volumeEntity;
}
#end_block

#method_before
@Override
public StatusOnlyReturnForXmlRpc setVmTicket(String vmId, String otp64, String sec) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.setVmTicket(vmId, otp64, sec);
        StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public StatusOnlyReturnForXmlRpc setVmTicket(String vmId, String otp64, String sec, String connectionAction, Map<String, String> params) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.setVmTicket(vmId, otp64, sec, connectionAction, params);
        StatusOnlyReturnForXmlRpc wrapper = new StatusOnlyReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
public OneUuidReturnForXmlRpc glusterVolumeCreate(Map<String, Object> volumeData) {
    try {
        return new OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeData));
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public OneUuidReturnForXmlRpc glusterVolumeCreate(String volumeName, String[] brickList, int replicaCount, int stripeCount, String[] transportList) {
    try {
        return new OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList));
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    checkSeverities();
}
#method_after
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    checkSeverities();
}
#end_block

#method_before
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
}
#method_after
private static void initVMSeverities() {
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_INTERNAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_VM_POOL_TO_AD_GROUP_FAILED_INTERNAL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_VM_POOL_TO_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_AD_GROUP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.AUTO_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.AUTO_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CANCEL_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.TEMPLATE_IMPORT_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_NOT_RESPONDING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_TRYING_RERUN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_PAUSED_ENOSPC, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EIO, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_PAUSED_EPERM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_POWER_DOWN_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RUN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PAUSE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_PAUSE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_FINISH_FAILURE_WILL_TRY_AGAIN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_SUSPEND_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOP_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STOP_SUSPENDED_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_SUSPEND_VM_OK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOP_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_STARTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_FINISHED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CHANGE_DISK_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EJECT_VM_FLOPPY, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_DISK_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESUME_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_RESUME_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_STARTED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_INITIATED_RUN_VM_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXPORT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXPORT_TEMPLATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_INITIATED_SHUTDOWN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_SHUTDOWN_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_STOPPED_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_STOPPING_VM_INSTEAD_OF_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_DISK_TO_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_DISK_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VM_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_USER_TO_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ATTACH_USER_TO_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CREATE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_CREATE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_SNAPSHOT_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_TRY_BACK_TO_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_TRY_BACK_TO_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_RESTORE_FROM_SNAPSHOT_FINISH_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_RESTORE_FROM_SNAPSHOT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_PASSWORD_CHANGE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CLEAR_UNKNOWN_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CLEAR_UNKNOWN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_ABORT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_DURING_MOVE_TO_MAINTANANCE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_MIGRATION_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_SET_TO_UNKNOWN_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_LOGGED_OUT_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_USER_FROM_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DETACH_USER_FROM_VM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VM_DOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_CHANGE_FLOPPY_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_FAILED_FROM_TO, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_POOL_WITH_VMS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOGGED_IN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_LOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UNLOCKED_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_MIGRATION_ON_CONNECT_CHECK_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEDICATE_VM_TO_POWERCLIENT_FAILED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VM_CLEARED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CANNOT_HIBERNATE_RUNNING_VMS_AFTER_CLUSTER_CPU_UPGRADE, AuditLogSeverity.WARNING);
}
#end_block

#method_before
@Mapping(from = ActionGroup.class, to = PermitType.class)
public static PermitType map(ActionGroup entity, PermitType template) {
    switch(entity) {
        case CREATE_VM:
            return PermitType.CREATE_VM;
        case DELETE_VM:
            return PermitType.DELETE_VM;
        case EDIT_VM_PROPERTIES:
            return PermitType.EDIT_VM_PROPERTIES;
        case VM_BASIC_OPERATIONS:
            return PermitType.VM_BASIC_OPERATIONS;
        case CHANGE_VM_CD:
            return PermitType.CHANGE_VM_CD;
        case MIGRATE_VM:
            return PermitType.MIGRATE_VM;
        case CONNECT_TO_VM:
            return PermitType.CONNECT_TO_VM;
        case IMPORT_EXPORT_VM:
            return PermitType.IMPORT_EXPORT_VM;
        case CONFIGURE_VM_NETWORK:
            return PermitType.CONFIGURE_VM_NETWORK;
        case CONFIGURE_VM_STORAGE:
            return PermitType.CONFIGURE_VM_STORAGE;
        case MOVE_VM:
            return PermitType.MOVE_VM;
        case MANIPULATE_VM_SNAPSHOTS:
            return PermitType.MANIPULATE_VM_SNAPSHOTS;
        case CREATE_HOST:
            return PermitType.CREATE_HOST;
        case EDIT_HOST_CONFIGURATION:
            return PermitType.EDIT_HOST_CONFIGURATION;
        case DELETE_HOST:
            return PermitType.DELETE_HOST;
        case MANIPUTLATE_HOST:
            return PermitType.MANIPUTLATE_HOST;
        case CONFIGURE_HOST_NETWORK:
            return PermitType.CONFIGURE_HOST_NETWORK;
        case CREATE_TEMPLATE:
            return PermitType.CREATE_TEMPLATE;
        case EDIT_TEMPLATE_PROPERTIES:
            return PermitType.EDIT_TEMPLATE_PROPERTIES;
        case DELETE_TEMPLATE:
            return PermitType.DELETE_TEMPLATE;
        case COPY_TEMPLATE:
            return PermitType.COPY_TEMPLATE;
        case CONFIGURE_TEMPLATE_NETWORK:
            return PermitType.CONFIGURE_TEMPLATE_NETWORK;
        case CREATE_VM_POOL:
            return PermitType.CREATE_VM_POOL;
        case EDIT_VM_POOL_CONFIGURATION:
            return PermitType.EDIT_VM_POOL_CONFIGURATION;
        case DELETE_VM_POOL:
            return PermitType.DELETE_VM_POOL;
        case VM_POOL_BASIC_OPERATIONS:
            return PermitType.VM_POOL_BASIC_OPERATIONS;
        case CREATE_CLUSTER:
            return PermitType.CREATE_CLUSTER;
        case EDIT_CLUSTER_CONFIGURATION:
            return PermitType.EDIT_CLUSTER_CONFIGURATION;
        case DELETE_CLUSTER:
            return PermitType.DELETE_CLUSTER;
        case CONFIGURE_CLUSTER_NETWORK:
            return PermitType.CONFIGURE_CLUSTER_NETWORK;
        case MANIPULATE_USERS:
            return PermitType.MANIPULATE_USERS;
        case MANIPULATE_ROLES:
            return PermitType.MANIPULATE_ROLES;
        case MANIPULATE_PERMISSIONS:
            return PermitType.MANIPULATE_PERMISSIONS;
        case CREATE_STORAGE_DOMAIN:
            return PermitType.CREATE_STORAGE_DOMAIN;
        case EDIT_STORAGE_DOMAIN_CONFIGURATION:
            return PermitType.EDIT_STORAGE_DOMAIN_CONFIGURATION;
        case DELETE_STORAGE_DOMAIN:
            return PermitType.DELETE_STORAGE_DOMAIN;
        case MANIPULATE_STORAGE_DOMAIN:
            return PermitType.MANIPULATE_STORAGE_DOMAIN;
        case CREATE_STORAGE_POOL:
            return PermitType.CREATE_STORAGE_POOL;
        case DELETE_STORAGE_POOL:
            return PermitType.DELETE_STORAGE_POOL;
        case EDIT_STORAGE_POOL_CONFIGURATION:
            return PermitType.EDIT_STORAGE_POOL_CONFIGURATION;
        case CONFIGURE_STORAGE_POOL_NETWORK:
            return PermitType.CONFIGURE_STORAGE_POOL_NETWORK;
        case CONFIGURE_ENGINE:
            return PermitType.CONFIGURE_RHEVM;
        case CONFIGURE_QUOTA:
            return PermitType.CONFIGURE_QUOTA;
        case CONSUME_QUOTA:
            return PermitType.CONSUME_QUOTA;
        case CREATE_GLUSTER_VOLUME:
            return PermitType.CREATE_GLUSTER_VOLUME;
        case MANIPULATE_GLUSTER_VOLUME:
            return PermitType.MANIPULATE_GLUSTER_VOLUME;
        case DELETE_GLUSTER_VOLUME:
            return PermitType.DELETE_GLUSTER_VOLUME;
        default:
            return null;
    }
}
#method_after
@Mapping(from = ActionGroup.class, to = PermitType.class)
public static PermitType map(ActionGroup entity, PermitType template) {
    switch(entity) {
        case CREATE_VM:
            return PermitType.CREATE_VM;
        case DELETE_VM:
            return PermitType.DELETE_VM;
        case EDIT_VM_PROPERTIES:
            return PermitType.EDIT_VM_PROPERTIES;
        case VM_BASIC_OPERATIONS:
            return PermitType.VM_BASIC_OPERATIONS;
        case CHANGE_VM_CD:
            return PermitType.CHANGE_VM_CD;
        case MIGRATE_VM:
            return PermitType.MIGRATE_VM;
        case CONNECT_TO_VM:
            return PermitType.CONNECT_TO_VM;
        case IMPORT_EXPORT_VM:
            return PermitType.IMPORT_EXPORT_VM;
        case CONFIGURE_VM_NETWORK:
            return PermitType.CONFIGURE_VM_NETWORK;
        case CONFIGURE_VM_STORAGE:
            return PermitType.CONFIGURE_VM_STORAGE;
        case MOVE_VM:
            return PermitType.MOVE_VM;
        case MANIPULATE_VM_SNAPSHOTS:
            return PermitType.MANIPULATE_VM_SNAPSHOTS;
        case RECONNECT_TO_VM:
            return PermitType.RECONNECT_TO_VM;
        case CREATE_HOST:
            return PermitType.CREATE_HOST;
        case EDIT_HOST_CONFIGURATION:
            return PermitType.EDIT_HOST_CONFIGURATION;
        case DELETE_HOST:
            return PermitType.DELETE_HOST;
        case MANIPUTLATE_HOST:
            return PermitType.MANIPUTLATE_HOST;
        case CONFIGURE_HOST_NETWORK:
            return PermitType.CONFIGURE_HOST_NETWORK;
        case CREATE_TEMPLATE:
            return PermitType.CREATE_TEMPLATE;
        case EDIT_TEMPLATE_PROPERTIES:
            return PermitType.EDIT_TEMPLATE_PROPERTIES;
        case DELETE_TEMPLATE:
            return PermitType.DELETE_TEMPLATE;
        case COPY_TEMPLATE:
            return PermitType.COPY_TEMPLATE;
        case CONFIGURE_TEMPLATE_NETWORK:
            return PermitType.CONFIGURE_TEMPLATE_NETWORK;
        case CREATE_VM_POOL:
            return PermitType.CREATE_VM_POOL;
        case EDIT_VM_POOL_CONFIGURATION:
            return PermitType.EDIT_VM_POOL_CONFIGURATION;
        case DELETE_VM_POOL:
            return PermitType.DELETE_VM_POOL;
        case VM_POOL_BASIC_OPERATIONS:
            return PermitType.VM_POOL_BASIC_OPERATIONS;
        case CREATE_CLUSTER:
            return PermitType.CREATE_CLUSTER;
        case EDIT_CLUSTER_CONFIGURATION:
            return PermitType.EDIT_CLUSTER_CONFIGURATION;
        case DELETE_CLUSTER:
            return PermitType.DELETE_CLUSTER;
        case CONFIGURE_CLUSTER_NETWORK:
            return PermitType.CONFIGURE_CLUSTER_NETWORK;
        case MANIPULATE_USERS:
            return PermitType.MANIPULATE_USERS;
        case MANIPULATE_ROLES:
            return PermitType.MANIPULATE_ROLES;
        case MANIPULATE_PERMISSIONS:
            return PermitType.MANIPULATE_PERMISSIONS;
        case CREATE_STORAGE_DOMAIN:
            return PermitType.CREATE_STORAGE_DOMAIN;
        case EDIT_STORAGE_DOMAIN_CONFIGURATION:
            return PermitType.EDIT_STORAGE_DOMAIN_CONFIGURATION;
        case DELETE_STORAGE_DOMAIN:
            return PermitType.DELETE_STORAGE_DOMAIN;
        case MANIPULATE_STORAGE_DOMAIN:
            return PermitType.MANIPULATE_STORAGE_DOMAIN;
        case CREATE_STORAGE_POOL:
            return PermitType.CREATE_STORAGE_POOL;
        case DELETE_STORAGE_POOL:
            return PermitType.DELETE_STORAGE_POOL;
        case EDIT_STORAGE_POOL_CONFIGURATION:
            return PermitType.EDIT_STORAGE_POOL_CONFIGURATION;
        case CONFIGURE_STORAGE_POOL_NETWORK:
            return PermitType.CONFIGURE_STORAGE_POOL_NETWORK;
        case CONFIGURE_ENGINE:
            return PermitType.CONFIGURE_RHEVM;
        case CONFIGURE_QUOTA:
            return PermitType.CONFIGURE_QUOTA;
        case CONSUME_QUOTA:
            return PermitType.CONSUME_QUOTA;
        case CREATE_GLUSTER_VOLUME:
            return PermitType.CREATE_GLUSTER_VOLUME;
        case MANIPULATE_GLUSTER_VOLUME:
            return PermitType.MANIPULATE_GLUSTER_VOLUME;
        case DELETE_GLUSTER_VOLUME:
            return PermitType.DELETE_GLUSTER_VOLUME;
        case CREATE_DISK:
            return PermitType.CREATE_DISK;
        case ATTACH_DISK:
            return PermitType.ATTACH_DISK;
        case EDIT_DISK_PROPERTIES:
            return PermitType.EDIT_DISK_PROPERTIES;
        case CONFIGURE_DISK_STORAGE:
            return PermitType.CONFIGURE_DISK_STORAGE;
        case DELETE_DISK:
            return PermitType.DELETE_DISK;
        default:
            return null;
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue = false;
    List<ValidationError> validationErrors = null;
    String vmName = getParameters().getVm().getvm_name();
    if (vmName == null || vmName.isEmpty()) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    } else {
        // check that VM name is not too long
        boolean vmNameValidLength = isVmNameValidLength(getParameters().getVm());
        if (!vmNameValidLength) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        } else if (getVm().getStaticData() != null) {
            VM vm = DbFacade.getInstance().getVmDAO().get(getVm().getStaticData().getId());
            // Checking if a desktop with same name already exists
            VmStatic vmStaticDataFromParams = getParameters().getVmStaticData();
            boolean exists = (Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(vmStaticDataFromParams.getvm_name())).getReturnValue();
            if (exists && (!StringHelper.EqOp(vm.getvm_name(), vmStaticDataFromParams.getvm_name()))) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST);
            } else if (!(validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(getVdsVersion(), vmStaticDataFromParams)).isEmpty()) {
                handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
            } else if (vmStaticDataFromParams.getauto_startup() && vmStaticDataFromParams.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString());
            } else if (VmHandler.isMemorySizeLegal(vmStaticDataFromParams.getos(), vmStaticDataFromParams.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
                if (StringHelper.EqOp(vmStaticDataFromParams.getvm_name(), "")) {
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_NAME_CANNOT_BE_EMPTY.toString());
                } else if (vm != null) {
                    retValue = areUpdatedFieldsLegal(vm, vmStaticDataFromParams);
                    if (!retValue) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
                    } else if (!getVm().getStaticData().getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
                        retValue = false;
                    }
                    if (vmStaticDataFromParams.getdedicated_vm_for_vds() != null) {
                        VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vmStaticDataFromParams.getdedicated_vm_for_vds().toString()));
                        // if vds doesnt exist or not the same cluster
                        if (vds == null || !vds.getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_DEFAULT_VDS_NOT_VALID);
                            retValue = false;
                        }
                    }
                    // Check if number of monitors passed is legal
                    if (!VmHandler.isNumOfMonitorsLegal(vmStaticDataFromParams.getdefault_display_type(), vmStaticDataFromParams.getnum_of_monitors(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (vm.getnum_of_monitors() < vmStaticDataFromParams.getnum_of_monitors()) {
                        List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmId());
                        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getVmId());
                        retValue = retValue && CheckPCIAndIDELimit(vmStaticDataFromParams.getnum_of_monitors(), interfaces, allDisks, getReturnValue().getCanDoActionMessages());
                    }
                    if (!VmTemplateCommand.IsVmPriorityValueLegal(vmStaticDataFromParams.getpriority(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (retValue && vm.getVmPoolId() != null && vmStaticDataFromParams.getis_stateless()) {
                        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
                        retValue = false;
                    }
                }
            }
            if (retValue) {
                retValue = AddVmCommand.CheckCpuSockets(vmStaticDataFromParams.getnum_of_sockets(), vmStaticDataFromParams.getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
            }
            // Check id dedicated host is same as VM cluster
            if (retValue) {
                retValue = isDedicatedVdsOnSameCluster(getParameters().getVmStaticData());
            }
            // check for Vm Payload
            if (retValue && getParameters().getVmPayload() != null) {
                retValue = checkPayload(getParameters().getVmPayload(), vmStaticDataFromParams.getiso_path());
                if (retValue) {
                    // we save the content in base64 string
                    getParameters().getVmPayload().setContent(Base64.encodeBase64String(getParameters().getVmPayload().getContent().getBytes()));
                }
            }
        }
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue = false;
    List<ValidationError> validationErrors = null;
    String vmName = getParameters().getVm().getvm_name();
    if (vmName == null || vmName.isEmpty()) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    } else {
        // check that VM name is not too long
        boolean vmNameValidLength = isVmNameValidLength(getParameters().getVm());
        if (!vmNameValidLength) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        } else if (getVm().getStaticData() != null) {
            VM vm = DbFacade.getInstance().getVmDAO().get(getVm().getStaticData().getId());
            // Checking if a desktop with same name already exists
            VmStatic vmStaticDataFromParams = getParameters().getVmStaticData();
            boolean exists = (Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(vmStaticDataFromParams.getvm_name())).getReturnValue();
            if (exists && (!StringHelper.EqOp(vm.getvm_name(), vmStaticDataFromParams.getvm_name()))) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST);
            } else if (!(validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams)).isEmpty()) {
                handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
            } else if (vmStaticDataFromParams.getauto_startup() && vmStaticDataFromParams.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString());
            } else if (VmHandler.isMemorySizeLegal(vmStaticDataFromParams.getos(), vmStaticDataFromParams.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
                if (StringHelper.EqOp(vmStaticDataFromParams.getvm_name(), "")) {
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_NAME_CANNOT_BE_EMPTY.toString());
                } else if (vm != null) {
                    setCustomDefinedProperties(vmStaticDataFromParams);
                    setCustomDefinedProperties(getVm().getStaticData());
                    retValue = areUpdatedFieldsLegal();
                    if (!retValue) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
                    } else if (!getVm().getStaticData().getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
                        retValue = false;
                    }
                    if (vmStaticDataFromParams.getdedicated_vm_for_vds() != null) {
                        VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vmStaticDataFromParams.getdedicated_vm_for_vds().toString()));
                        // if vds doesnt exist or not the same cluster
                        if (vds == null || !vds.getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_DEFAULT_VDS_NOT_VALID);
                            retValue = false;
                        }
                    }
                    // Check if number of monitors passed is legal
                    if (!VmHandler.isNumOfMonitorsLegal(vmStaticDataFromParams.getdefault_display_type(), vmStaticDataFromParams.getnum_of_monitors(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (vm.getnum_of_monitors() < vmStaticDataFromParams.getnum_of_monitors()) {
                        List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmId());
                        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getVmId());
                        retValue = retValue && CheckPCIAndIDELimit(vmStaticDataFromParams.getnum_of_monitors(), interfaces, allDisks, getReturnValue().getCanDoActionMessages());
                    }
                    if (!VmTemplateCommand.IsVmPriorityValueLegal(vmStaticDataFromParams.getpriority(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (retValue && vm.getVmPoolId() != null && vmStaticDataFromParams.getis_stateless()) {
                        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
                        retValue = false;
                    }
                }
            }
            if (retValue) {
                retValue = AddVmCommand.CheckCpuSockets(vmStaticDataFromParams.getnum_of_sockets(), vmStaticDataFromParams.getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
            }
            // Check id dedicated host is same as VM cluster
            if (retValue) {
                retValue = isDedicatedVdsOnSameCluster(getParameters().getVmStaticData());
            }
            // check for Vm Payload
            if (retValue && getParameters().getVmPayload() != null) {
                retValue = checkPayload(getParameters().getVmPayload(), vmStaticDataFromParams.getiso_path());
                if (retValue) {
                    // we save the content in base64 string
                    getParameters().getVmPayload().setContent(Base64.encodeBase64String(getParameters().getVmPayload().getContent().getBytes()));
                }
            }
        }
    }
    return retValue;
}
#end_block

#method_before
protected boolean areUpdatedFieldsLegal(VM vm, VmStatic vmStaticDataFromParams) {
    boolean retValue;
    setCustomDefinedProperties(vmStaticDataFromParams);
    setCustomDefinedProperties(getVm().getStaticData());
    retValue = VmHandler.mUpdateVmsStatic.IsUpdateValid(getVm().getStaticData(), vmStaticDataFromParams, vm.getstatus());
    return retValue;
}
#method_after
protected boolean areUpdatedFieldsLegal() {
    return VmHandler.mUpdateVmsStatic.IsUpdateValid(getVm().getStaticData(), getParameters().getVmStaticData(), getVm().getstatus());
}
#end_block

#method_before
protected void setCustomDefinedProperties(VmStatic vmStaticDataFromParams) {
    VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsVersion(), vmStaticDataFromParams.getCustomProperties());
    vmStaticDataFromParams.setPredefinedProperties(properties.getPredefinedProperties());
    vmStaticDataFromParams.setUserDefinedProperties(properties.getUseDefinedProperties());
}
#method_after
private void setCustomDefinedProperties(VmStatic vmStaticDataFromParams) {
    VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams.getCustomProperties());
    vmStaticDataFromParams.setPredefinedProperties(properties.getPredefinedProperties());
    vmStaticDataFromParams.setUserDefinedProperties(properties.getUseDefinedProperties());
}
#end_block

#method_before
@Before
public void setUp() {
    VmHandler.Init();
    vm = new VM();
    vmStatic = new VmStatic();
    VmManagementParametersBase params = new VmManagementParametersBase();
    params.setCommandType(VdcActionType.UpdateVm);
    params.setVm(vm);
    command = spy(new UpdateVmCommand<VmManagementParametersBase>(params));
    doNothing().when(command).setCustomDefinedProperties(any(VmStatic.class));
    doReturn(vm).when(command).getVm();
}
#method_after
@Before
public void setUp() {
    VmHandler.Init();
    vm = new VM();
    vmStatic = new VmStatic();
    VmManagementParametersBase params = new VmManagementParametersBase();
    params.setCommandType(VdcActionType.UpdateVm);
    params.setVmStaticData(vmStatic);
    command = spy(new UpdateVmCommand<VmManagementParametersBase>(params));
    doReturn(vm).when(command).getVm();
}
#end_block

#method_before
@Test
public void testUpdateFieldsQuotaEnforcementType() {
    vm.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED);
    vmStatic.setQuotaEnforcementType(QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT);
    assertTrue("Quota enforcement type should be updatable", command.areUpdatedFieldsLegal(vm, vmStatic));
}
#method_after
@Test
public void testUpdateFieldsQuotaEnforcementType() {
    vm.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED);
    vmStatic.setQuotaEnforcementType(QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT);
    assertTrue("Quota enforcement type should be updatable", command.areUpdatedFieldsLegal());
}
#end_block

#method_before
@Test
public void testUpdateFieldsQutoaDefault() {
    vm.setIsQuotaDefault(true);
    vmStatic.setIsQuotaDefault(false);
    assertTrue("Quota default should be updatable", command.areUpdatedFieldsLegal(vm, vmStatic));
}
#method_after
@Test
public void testUpdateFieldsQutoaDefault() {
    vm.setIsQuotaDefault(true);
    vmStatic.setIsQuotaDefault(false);
    assertTrue("Quota default should be updatable", command.areUpdatedFieldsLegal());
}
#end_block

#method_before
@Before
public void initConfig() {
    IConfigUtilsInterface mockConfigUtils = mock(IConfigUtilsInterface.class);
    Config.setConfigUtils(mockConfigUtils);
    when(mockConfigUtils.<String>GetValue(ConfigValues.AuthenticationMethod, Config.DefaultConfigurationVersion)).thenReturn("LDAP");
    when(mockConfigUtils.<String>GetValue(ConfigValues.DBEngine, Config.DefaultConfigurationVersion)).thenReturn("postgres");
    when(mockConfigUtils.<String>GetValue(ConfigValues.LDAPSecurityAuthentication, Config.DefaultConfigurationVersion)).thenReturn("SIMPLE");
    when(mockConfigUtils.<Integer>GetValue(ConfigValues.SearchResultsLimit, Config.DefaultConfigurationVersion)).thenReturn(100);
}
#method_after
public void initConfig() {
    mcr.<String>mockConfigValue(ConfigValues.LDAPSecurityAuthentication, Config.DefaultConfigurationVersion, "SIMPLE");
    mcr.<Integer>mockConfigValue(ConfigValues.SearchResultsLimit, Config.DefaultConfigurationVersion, 100);
    mcr.<String>mockConfigValue(ConfigValues.AuthenticationMethod, Config.DefaultConfigurationVersion, "LDAP");
    mcr.<String>mockConfigValue(ConfigValues.DBEngine, Config.DefaultConfigurationVersion, "postgres");
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Test
public void testSearchQuery() {
    when(getDbFacadeMockInstance().getDbEngineDialect()).thenReturn(new PostgresDbEngineDialect());
    doReturn(DOMAIN).when(getQuery()).getDefaultDomain();
    LdapBroker ldapFactoryMock = mock(LdapBroker.class);
    doReturn(ldapFactoryMock).when(getQuery()).getLdapFactory(DOMAIN);
    LdapReturnValueBase ldapRerunValue = new LdapReturnValueBase();
    ldapRerunValue.setSucceeded(true);
    ldapRerunValue.setReturnValue(Collections.singletonList(result));
    when(ldapFactoryMock.RunAdAction(eq(AdActionType.SearchUserByQuery), argThat(new LdapParametersMatcher("gandalf")))).thenReturn(ldapRerunValue);
    getQuery().setInternalExecution(true);
    getQuery().Execute();
    assertTrue("Query should succeed, but failed with: " + getQuery().getQueryReturnValue().getExceptionString(), getQuery().getQueryReturnValue().getIsSearchValid());
    assertEquals("Wrong user returned", result, ((List<AdUser>) getQuery().getQueryReturnValue().getReturnValue()).get(0));
}
#method_after
@SuppressWarnings("unchecked")
@Test
public void testSearchQuery() {
    initConfig();
    when(getDbFacadeMockInstance().getDbEngineDialect()).thenReturn(new PostgresDbEngineDialect());
    doReturn(DOMAIN).when(getQuery()).getDefaultDomain();
    LdapBroker ldapFactoryMock = mock(LdapBroker.class);
    doReturn(ldapFactoryMock).when(getQuery()).getLdapFactory(DOMAIN);
    LdapReturnValueBase ldapRerunValue = new LdapReturnValueBase();
    ldapRerunValue.setSucceeded(true);
    ldapRerunValue.setReturnValue(Collections.singletonList(result));
    when(ldapFactoryMock.RunAdAction(eq(AdActionType.SearchUserByQuery), argThat(new LdapParametersMatcher("gandalf")))).thenReturn(ldapRerunValue);
    getQuery().setInternalExecution(true);
    getQuery().Execute();
    assertTrue("Query should succeed, but failed with: " + getQuery().getQueryReturnValue().getExceptionString(), getQuery().getQueryReturnValue().getIsSearchValid());
    assertEquals("Wrong user returned", result, ((List<AdUser>) getQuery().getQueryReturnValue().getReturnValue()).get(0));
}
#end_block

#method_before
@Override
public void setUp() throws Exception {
    super.setUp();
    storageDomainId = Guid.NewGuid();
    setUpConfigMock();
}
#method_after
@Override
public void setUp() throws Exception {
    super.setUp();
    storageDomainId = Guid.NewGuid();
}
#end_block

#method_before
@Test
public void testGetStorageDomainIdWithPermissions() {
    Guid storagePoolId = getQueryParameters().getStoragePoolId();
    storage_pool pool = new storage_pool();
    pool.setId(storagePoolId);
    StoragePoolDAO storagePoolDAOMock = mock(StoragePoolDAO.class);
    when(storagePoolDAOMock.get(storagePoolId, getUser().getUserId(), getQueryParameters().isFiltered())).thenReturn(pool);
    when(getQuery().getDbFacade().getStoragePoolDAO()).thenReturn(storagePoolDAOMock);
    storage_domains dataDomain = new storage_domains();
    dataDomain.setId(Guid.NewGuid());
    dataDomain.setstorage_domain_type(StorageDomainType.Data);
    storage_domains isoDomain = new storage_domains();
    isoDomain.setId(storageDomainId);
    isoDomain.setstorage_domain_type(StorageDomainType.ISO);
    StorageDomainDAO storageDomainDAOMock = mock(StorageDomainDAO.class);
    when(storageDomainDAOMock.getAllForStoragePool(storagePoolId)).thenReturn(Arrays.asList(dataDomain, isoDomain));
    when(getQuery().getDbFacade().getStorageDomainDAO()).thenReturn(storageDomainDAOMock);
    assertEquals("wrong storage domain id", storageDomainId, getQuery().getStorageDomainId());
}
#method_after
@Test
public void testGetStorageDomainIdWithPermissions() {
    mockStoragePoolDAO(new storage_pool());
    StorageDomainDAO storageDomainDAOMock = mock(StorageDomainDAO.class);
    when(storageDomainDAOMock.getIsoStorageDomainIdForPool(getQueryParameters().getStoragePoolId())).thenReturn(storageDomainId);
    when(getQuery().getDbFacade().getStorageDomainDAO()).thenReturn(storageDomainDAOMock);
    assertEquals("wrong storage domain id", storageDomainId, getQuery().getStorageDomainId());
}
#end_block

#method_before
@Test
public void testGetStorageDomainIdWithNoPermissions() {
    Guid storagePoolId = getQueryParameters().getStoragePoolId();
    storage_pool pool = new storage_pool();
    pool.setId(storagePoolId);
    StoragePoolDAO storagePoolDAOMock = mock(StoragePoolDAO.class);
    when(storagePoolDAOMock.get(storagePoolId, getUser().getUserId(), getQueryParameters().isFiltered())).thenReturn(pool);
    when(getQuery().getDbFacade().getStoragePoolDAO()).thenReturn(null);
    verifyNoMoreInteractions(getQuery().getDbFacade());
    assertNull("No storage domains should have been returned", null);
}
#method_after
@Test
public void testGetStorageDomainIdWithNoPermissions() {
    mockStoragePoolDAO(null);
    verifyNoMoreInteractions(getQuery().getDbFacade());
    assertNull("No storage domains should have been returned", getQuery().getStorageDomainId());
}
#end_block

#method_before
@Override
protected Guid getStorageDomainId() {
    // Get the storage pool, according to the user's permissions
    // The storage_pool object itself is not needed for this query, it's retrieved only for permission checking
    storage_pool pool = getDbFacade().getStoragePoolDAO().get(getParameters().getStoragePoolId(), getUserID(), getParameters().isFiltered());
    if (pool != null) {
        // Now get all the storage domains
        List<storage_domains> domains = getDbFacade().getStorageDomainDAO().getAllForStoragePool(pool.getId());
        // And find the ISO one
        for (storage_domains domain : domains) {
            if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
                return domain.getId();
            }
        }
    }
    return null;
}
#method_after
@Override
protected Guid getStorageDomainId() {
    if (doesUserHavePemissionsOnStoragePool()) {
        return getDbFacade().getStorageDomainDAO().getIsoStorageDomainIdForPool(getStoragePoolId());
    }
    return null;
}
#end_block

#method_before
@Override
public VM get() {
    VM vm = performGet(VdcQueryType.GetVmByVmId, new GetVmByVmIdParameters(guid));
    setPayload(vm);
    return vm;
}
#method_after
@Override
public VM get() {
    return performGet(VdcQueryType.GetVmByVmId, new GetVmByVmIdParameters(guid));
}
#end_block

#method_before
@Override
public VM update(VM incoming) {
    if (incoming.isSetCluster() && (incoming.getCluster().isSetId() || incoming.getCluster().isSetName())) {
        Guid clusterId = lookupClusterId(incoming);
        if (!clusterId.toString().equals(get().getCluster().getId())) {
            performAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(clusterId, guid));
        }
    }
    // resolve the host's ID, because it will be needed down the line
    if (incoming.isSetPlacementPolicy() && incoming.getPlacementPolicy().isSetHost() && incoming.getPlacementPolicy().getHost().isSetName() && !incoming.getPlacementPolicy().getHost().isSetId()) {
        incoming.getPlacementPolicy().getHost().setId(getHostId(incoming.getPlacementPolicy().getHost().getName()));
    }
    VM retVal = performUpdate(incoming, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class), VdcActionType.UpdateVm, new UpdateParametersProvider());
    setPayload(retVal);
    return retVal;
}
#method_after
@Override
public VM update(VM incoming) {
    if (incoming.isSetCluster() && (incoming.getCluster().isSetId() || incoming.getCluster().isSetName())) {
        Guid clusterId = lookupClusterId(incoming);
        if (!clusterId.toString().equals(get().getCluster().getId())) {
            performAction(VdcActionType.ChangeVMCluster, new ChangeVMClusterParameters(clusterId, guid));
        }
    }
    // resolve the host's ID, because it will be needed down the line
    if (incoming.isSetPlacementPolicy() && incoming.getPlacementPolicy().isSetHost() && incoming.getPlacementPolicy().getHost().isSetName() && !incoming.getPlacementPolicy().getHost().isSetId()) {
        incoming.getPlacementPolicy().getHost().setId(getHostId(incoming.getPlacementPolicy().getHost().getName()));
    }
    return performUpdate(incoming, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class), VdcActionType.UpdateVm, new UpdateParametersProvider());
}
#end_block

#method_before
@Override
protected VM populate(VM model, org.ovirt.engine.core.common.businessentities.VM entity) {
    Set<Detail> details = DetailHelper.getDetails(getHttpHeaders());
    parent.addInlineDetails(details, model);
    addStatistics(model, entity, uriInfo, httpHeaders);
    return model;
}
#method_after
@Override
protected VM populate(VM model, org.ovirt.engine.core.common.businessentities.VM entity) {
    Set<Detail> details = DetailHelper.getDetails(getHttpHeaders());
    parent.addInlineDetails(details, model);
    addStatistics(model, entity, uriInfo, httpHeaders);
    parent.setPayload(model);
    return model;
}
#end_block

#method_before
@Override
public VdcActionParametersBase getParameters(VM incoming, org.ovirt.engine.core.common.businessentities.VM entity) {
    VmStatic updated = getMapper(modelType, VmStatic.class).map(incoming, entity.getStaticData());
    VmManagementParametersBase params = new VmManagementParametersBase(updated);
    if (incoming.isSetVmPayloads()) {
        if (incoming.getVmPayloads().getVmPayload().get(0).isSetType()) {
            VmDeviceType deviceType = VmDeviceType.fromValue(incoming.getVmPayloads().getVmPayload().get(0).getType());
            if (deviceType != null) {
                org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(org.ovirt.engine.api.restapi.types.VmMapper.map(deviceType, null), incoming.getVmPayloads().getVmPayload().get(0).getFile().getName(), incoming.getVmPayloads().getVmPayload().get(0).getFile().getContent());
                params.setVmPayload(vmPayload);
            }
        }
    }
    return params;
}
#method_after
@Override
public VdcActionParametersBase getParameters(VM incoming, org.ovirt.engine.core.common.businessentities.VM entity) {
    VmStatic updated = getMapper(modelType, VmStatic.class).map(incoming, entity.getStaticData());
    VmManagementParametersBase params = new VmManagementParametersBase(updated);
    if (incoming.isSetPayloads()) {
        params.setVmPayload(parent.getPayload(incoming));
    }
    return params;
}
#end_block

#method_before
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setvmt_guid(entity.getId());
    staticVm.setdomain(entity.getdomain());
    staticVm.setvds_group_id(entity.getvds_group_id());
    staticVm.setmem_size_mb(entity.getmem_size_mb());
    staticVm.setos(entity.getos());
    staticVm.setnice_level(entity.getnice_level());
    staticVm.setfail_back(entity.getfail_back());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setis_stateless(entity.getis_stateless());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setdefault_boot_sequence(entity.getdefault_boot_sequence());
    staticVm.setvm_type(entity.getvm_type());
    entity.setdefault_display_type(entity.getdefault_display_type());
    staticVm.setiso_path(entity.getiso_path());
    staticVm.setnum_of_sockets(entity.getnum_of_sockets());
    staticVm.setcpu_per_socket(entity.getcpu_per_socket());
    staticVm.setkernel_url(entity.getkernel_url());
    staticVm.setkernel_params(entity.getkernel_params());
    staticVm.setinitrd_url(entity.getinitrd_url());
    staticVm.sethypervisor_type(entity.gethypervisor_type());
    staticVm.settime_zone(entity.gettime_zone());
    staticVm.setnum_of_monitors(entity.getnum_of_monitors());
    staticVm.setpriority(entity.getpriority());
    staticVm.setusb_policy(entity.getusb_policy());
    return staticVm;
}
#method_after
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setvmt_guid(entity.getId());
    staticVm.setdomain(entity.getdomain());
    staticVm.setvds_group_id(entity.getvds_group_id());
    staticVm.setmem_size_mb(entity.getmem_size_mb());
    staticVm.setos(entity.getos());
    staticVm.setnice_level(entity.getnice_level());
    staticVm.setfail_back(entity.getfail_back());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setis_stateless(entity.getis_stateless());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setdefault_boot_sequence(entity.getdefault_boot_sequence());
    staticVm.setvm_type(entity.getvm_type());
    entity.setdefault_display_type(entity.getdefault_display_type());
    staticVm.setiso_path(entity.getiso_path());
    staticVm.setnum_of_sockets(entity.getnum_of_sockets());
    staticVm.setcpu_per_socket(entity.getcpu_per_socket());
    staticVm.setkernel_url(entity.getkernel_url());
    staticVm.setkernel_params(entity.getkernel_params());
    staticVm.setinitrd_url(entity.getinitrd_url());
    staticVm.sethypervisor_type(entity.gethypervisor_type());
    staticVm.settime_zone(entity.gettime_zone());
    staticVm.setnum_of_monitors(entity.getnum_of_monitors());
    staticVm.setAllowConsoleReconnect(entity.getAllowConsoleReconnect());
    staticVm.setpriority(entity.getpriority());
    staticVm.setusb_policy(entity.getusb_policy());
    return staticVm;
}
#end_block

#method_before
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setvm_name(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setdescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setmem_size_mb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getmem_size_mb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setmem_size_mb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setvmt_guid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setvds_group_id(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu() && vm.getCpu().isSetTopology()) {
        if (vm.getCpu().getTopology().getCores() != null) {
            staticVm.setcpu_per_socket(vm.getCpu().getTopology().getCores());
        }
        if (vm.getCpu().getTopology().getSockets() != null) {
            staticVm.setnum_of_sockets(vm.getCpu().getTopology().getSockets());
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setos(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setdefault_boot_sequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setvm_type(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setis_stateless(vm.isStateless());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setauto_startup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setpriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setorigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setdefault_display_type(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setnum_of_monitors(vm.getDisplay().getMonitors());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setdedicated_vm_for_vds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setdomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.settime_zone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetUsb() && vm.getUsb().isSetEnabled()) {
        staticVm.setusb_policy(vm.getUsb().isEnabled() ? UsbPolicy.Enabled : UsbPolicy.Disabled);
    }
    return staticVm;
}
#method_after
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setvm_name(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setdescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setmem_size_mb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getmem_size_mb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setmem_size_mb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setvmt_guid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setvds_group_id(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu() && vm.getCpu().isSetTopology()) {
        if (vm.getCpu().getTopology().getCores() != null) {
            staticVm.setcpu_per_socket(vm.getCpu().getTopology().getCores());
        }
        if (vm.getCpu().getTopology().getSockets() != null) {
            staticVm.setnum_of_sockets(vm.getCpu().getTopology().getSockets());
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setos(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setdefault_boot_sequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setvm_type(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setis_stateless(vm.isStateless());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setauto_startup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setpriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setorigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setdefault_display_type(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setnum_of_monitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowReconnect()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowReconnect());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setdedicated_vm_for_vds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setdomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.settime_zone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetUsb() && vm.getUsb().isSetEnabled()) {
        staticVm.setusb_policy(vm.getUsb().isEnabled() ? UsbPolicy.Enabled : UsbPolicy.Disabled);
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getvm_name());
    model.setDescription(entity.getvm_description());
    model.setMemory((long) entity.getmem_size_mb() * BYTES_PER_MB);
    if (entity.getvmt_guid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getvmt_guid().toString());
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
        if (entity.getstatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getvm_os() != null || entity.getboot_sequence() != null || entity.getkernel_url() != null || entity.getinitrd_url() != null || entity.getkernel_params() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getvm_os() != null) {
            OsType osType = VmMapper.map(entity.getos(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getboot_sequence() != null) {
            for (Boot boot : map(entity.getdefault_boot_sequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getkernel_url());
        os.setInitrd(entity.getinitrd_url());
        os.setCmdline(entity.getkernel_params());
        model.setOs(os);
    }
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getnum_of_sockets());
    topology.setCores(entity.getnum_of_cpus() / entity.getnum_of_sockets());
    model.setCpu(new CPU());
    model.getCpu().setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getrun_on_vds() != null) {
        model.setHost(new Host());
        model.getHost().setId(entity.getrun_on_vds().toString());
    }
    if (entity.getdisplay_type() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getdisplay_type(), null));
        model.getDisplay().setAddress(entity.getdisplay_ip());
        Integer displayPort = entity.getdisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getdisplay_secure_port();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getnum_of_monitors());
    }
    model.setType(map(entity.getvm_type(), null));
    model.setStateless(entity.getis_stateless());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.getauto_startup());
    model.getHighAvailability().setPriority(entity.getpriority());
    if (entity.getorigin() != null) {
        model.setOrigin(map(entity.getorigin(), null));
    }
    if (entity.getvm_creation_date() != null) {
        model.setCreationTime(DateMapper.map(entity.getvm_creation_date(), null));
    }
    if (entity.getelapsed_time() != null) {
        if (entity.getelapsed_time() == 0) {
            model.setStartTime(null);
        } else {
            model.setStartTime(DateMapper.map(new BigDecimal(entity.getelapsed_time()), null));
        }
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getdedicated_vm_for_vds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getdedicated_vm_for_vds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getvm_domain() != null && !entity.getvm_domain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getvm_domain());
        model.setDomain(domain);
    }
    if (entity.getvm_ip() != null && !entity.getvm_ip().isEmpty()) {
        model.setGuestInfo(new GuestInfo());
        model.getGuestInfo().setIps(new IPs());
        for (String item : entity.getvm_ip().split(" ")) {
            if (!item.equals("")) {
                IP ip = new IP();
                ip.setAddress(item.trim());
                model.getGuestInfo().getIps().getIPs().add(ip);
            }
        }
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.gettime_zone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getusb_policy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(entity.getusb_policy() == UsbPolicy.Enabled ? true : false);
        model.setUsb(usb);
    }
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getvm_name());
    model.setDescription(entity.getvm_description());
    model.setMemory((long) entity.getmem_size_mb() * BYTES_PER_MB);
    if (entity.getvmt_guid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getvmt_guid().toString());
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
        if (entity.getstatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getvm_os() != null || entity.getboot_sequence() != null || entity.getkernel_url() != null || entity.getinitrd_url() != null || entity.getkernel_params() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getvm_os() != null) {
            OsType osType = VmMapper.map(entity.getos(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getboot_sequence() != null) {
            for (Boot boot : map(entity.getdefault_boot_sequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getkernel_url());
        os.setInitrd(entity.getinitrd_url());
        os.setCmdline(entity.getkernel_params());
        model.setOs(os);
    }
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getnum_of_sockets());
    topology.setCores(entity.getnum_of_cpus() / entity.getnum_of_sockets());
    model.setCpu(new CPU());
    model.getCpu().setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getrun_on_vds() != null) {
        model.setHost(new Host());
        model.getHost().setId(entity.getrun_on_vds().toString());
    }
    if (entity.getdisplay_type() != null) {
        model.setDisplay(new Display());
        model.getDisplay().setType(map(entity.getdisplay_type(), null));
        model.getDisplay().setAddress(entity.getdisplay_ip());
        Integer displayPort = entity.getdisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getdisplay_secure_port();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getnum_of_monitors());
        model.getDisplay().setAllowReconnect(entity.getAllowConsoleReconnect());
    }
    model.setType(map(entity.getvm_type(), null));
    model.setStateless(entity.getis_stateless());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.getauto_startup());
    model.getHighAvailability().setPriority(entity.getpriority());
    if (entity.getorigin() != null) {
        model.setOrigin(map(entity.getorigin(), null));
    }
    if (entity.getvm_creation_date() != null) {
        model.setCreationTime(DateMapper.map(entity.getvm_creation_date(), null));
    }
    if (entity.getelapsed_time() != null) {
        if (entity.getelapsed_time() == 0) {
            model.setStartTime(null);
        } else {
            model.setStartTime(DateMapper.map(new BigDecimal(entity.getelapsed_time()), null));
        }
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getdedicated_vm_for_vds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getdedicated_vm_for_vds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getvm_domain() != null && !entity.getvm_domain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getvm_domain());
        model.setDomain(domain);
    }
    if (entity.getvm_ip() != null && !entity.getvm_ip().isEmpty()) {
        model.setGuestInfo(new GuestInfo());
        model.getGuestInfo().setIps(new IPs());
        for (String item : entity.getvm_ip().split(" ")) {
            if (!item.equals("")) {
                IP ip = new IP();
                ip.setAddress(item.trim());
                model.getGuestInfo().getIps().getIPs().add(ip);
            }
        }
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.gettime_zone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getusb_policy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(entity.getusb_policy() == UsbPolicy.Enabled ? true : false);
        model.setUsb(usb);
    }
    return model;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.api.model.VmPayload.class, to = VmPayload.class)
public static VmPayload map(org.ovirt.engine.api.model.VmPayload entity, VmPayload template) {
    VmPayload model = template != null ? template : new VmPayload();
    model.setType(VmDeviceType.valueOf(entity.getType().toUpperCase()));
    model.setFileName(entity.getFile().getName());
    model.setContent(entity.getFile().getContent());
    return model;
}
#method_after
@Mapping(from = VmPayload.class, to = Payload.class)
public static Payload map(VmPayload entity, Payload template) {
    Payload model = template != null ? template : new Payload();
    if (entity.getType() != null) {
        org.ovirt.engine.api.model.VmDeviceType deviceType = map(entity.getType(), null);
        if (deviceType != null) {
            model.setType(deviceType.value());
        }
    }
    PayloadFile file = new PayloadFile();
    file.setName(entity.getFileName());
    file.setContent(entity.getContent());
    model.setFile(file);
    return model;
}
#end_block

#method_before
@Override
public Response add(VM vm) {
    validateParameters(vm, "name", "template.id|name", "cluster.id|name");
    Guid templateId = getTemplateId(vm);
    VmStatic staticVm = getMapper(VM.class, VmStatic.class).map(vm, getMapper(VmTemplate.class, VmStatic.class).map(lookupTemplate(templateId), null));
    if (namedCluster(vm)) {
        staticVm.setvds_group_id(getClusterId(vm));
    }
    // resolve the host's ID, because it will be needed down the line
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost() && vm.getPlacementPolicy().getHost().isSetName() && !vm.getPlacementPolicy().getHost().isSetId()) {
        vm.getPlacementPolicy().getHost().setId(getHostId(vm.getPlacementPolicy().getHost().getName()));
    }
    org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = null;
    if (vm.isSetVmPayloads()) {
        if (vm.getVmPayloads().getVmPayload().get(0).isSetType()) {
            VmDeviceType deviceType = VmDeviceType.fromValue(vm.getVmPayloads().getVmPayload().get(0).getType());
            if (deviceType != null) {
                vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(org.ovirt.engine.api.restapi.types.VmMapper.map(deviceType, null), vm.getVmPayloads().getVmPayload().get(0).getFile().getName(), vm.getVmPayloads().getVmPayload().get(0).getFile().getContent());
            }
        }
    }
    Response response = null;
    Guid storageDomainId = (vm.isSetStorageDomain() && vm.getStorageDomain().isSetId()) ? asGuid(vm.getStorageDomain().getId()) : Guid.Empty;
    if (vm.isSetSnapshots() && vm.getSnapshots().getSnapshots() != null && !vm.getSnapshots().getSnapshots().isEmpty()) {
        // If Vm has snapshots collection - this is a clone vm from snapshot operation
        String snapshotId = getSnapshotId(vm.getSnapshots());
        org.ovirt.engine.core.common.businessentities.VM vmConfiguration = getVmConfiguration(snapshotId);
        getMapper(VM.class, VmStatic.class).map(vm, vmConfiguration.getStaticData());
        // If vm passed in the call has disks attached on them,
        // merge their data with the data of the disks on the configuration
        // The parameters to AddVmFromSnapshot hold an array list of Disks
        // and not List of Disks, as this is a GWT serialization limitation,
        // and this parameter class serves GWT clients as well.
        HashMap<Guid, DiskImage> diskImagesById = getDiskImagesByIdMap(vmConfiguration.getDiskMap().values());
        if (vm.isSetDisks()) {
            prepareImagesForCloneFromSnapshotParams(vm.getDisks(), diskImagesById);
        }
        response = cloneVmFromSnapshot(vmConfiguration.getStaticData(), snapshotId, diskImagesById);
    } else if (vm.isSetDisks() && vm.getDisks().isSetClone() && vm.getDisks().isClone()) {
        response = cloneVmFromTemplate(staticVm, vm.getDisks(), templateId);
    } else if (Guid.Empty.equals(templateId)) {
        response = addVmFromScratch(staticVm, storageDomainId, vm.getDisks(), vmPayload);
    } else {
        response = addVm(staticVm, storageDomainId, vm.getDisks(), templateId, vmPayload);
    }
    return response;
}
#method_after
@Override
public Response add(VM vm) {
    validateParameters(vm, "name", "template.id|name", "cluster.id|name");
    Guid templateId = getTemplateId(vm);
    VmStatic staticVm = getMapper(VM.class, VmStatic.class).map(vm, getMapper(VmTemplate.class, VmStatic.class).map(lookupTemplate(templateId), null));
    if (namedCluster(vm)) {
        staticVm.setvds_group_id(getClusterId(vm));
    }
    // resolve the host's ID, because it will be needed down the line
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost() && vm.getPlacementPolicy().getHost().isSetName() && !vm.getPlacementPolicy().getHost().isSetId()) {
        vm.getPlacementPolicy().getHost().setId(getHostId(vm.getPlacementPolicy().getHost().getName()));
    }
    Response response = null;
    Guid storageDomainId = (vm.isSetStorageDomain() && vm.getStorageDomain().isSetId()) ? asGuid(vm.getStorageDomain().getId()) : Guid.Empty;
    if (vm.isSetSnapshots() && vm.getSnapshots().getSnapshots() != null && !vm.getSnapshots().getSnapshots().isEmpty()) {
        // If Vm has snapshots collection - this is a clone vm from snapshot operation
        String snapshotId = getSnapshotId(vm.getSnapshots());
        org.ovirt.engine.core.common.businessentities.VM vmConfiguration = getVmConfiguration(snapshotId);
        getMapper(VM.class, VmStatic.class).map(vm, vmConfiguration.getStaticData());
        // If vm passed in the call has disks attached on them,
        // merge their data with the data of the disks on the configuration
        // The parameters to AddVmFromSnapshot hold an array list of Disks
        // and not List of Disks, as this is a GWT serialization limitation,
        // and this parameter class serves GWT clients as well.
        HashMap<Guid, DiskImage> diskImagesByImageId = getDiskImagesByIdMap(vmConfiguration.getDiskMap().values());
        if (vm.isSetDisks()) {
            prepareImagesForCloneFromSnapshotParams(vm.getDisks(), diskImagesByImageId);
        }
        response = cloneVmFromSnapshot(vmConfiguration.getStaticData(), snapshotId, diskImagesByImageId);
    } else if (vm.isSetDisks() && vm.getDisks().isSetClone() && vm.getDisks().isClone()) {
        response = cloneVmFromTemplate(staticVm, vm, templateId);
    } else if (Guid.Empty.equals(templateId)) {
        response = addVmFromScratch(staticVm, vm, storageDomainId);
    } else {
        response = addVm(staticVm, vm, storageDomainId, templateId);
    }
    return response;
}
#end_block

#method_before
private void prepareImagesForCloneFromSnapshotParams(Disks disks, Map<Guid, DiskImage> imagesFromConfiguration) {
    if (disks.getDisks() != null) {
        for (Disk disk : disks.getDisks()) {
            DiskImage diskImageFromConfig = imagesFromConfiguration.get(asGuid(disk.getId()));
            DiskImage diskImage = getMapper(Disk.class, DiskImage.class).map(disk, diskImageFromConfig);
            imagesFromConfiguration.put(diskImage.getImageId(), diskImage);
        }
    }
}
#method_after
private void prepareImagesForCloneFromSnapshotParams(Disks disks, Map<Guid, DiskImage> imagesFromConfiguration) {
    if (disks.getDisks() != null) {
        for (Disk disk : disks.getDisks()) {
            DiskImage diskImageFromConfig = imagesFromConfiguration.get(asGuid(disk.getImageId()));
            DiskImage diskImage = getMapper(Disk.class, DiskImage.class).map(disk, diskImageFromConfig);
            imagesFromConfiguration.put(diskImage.getImageId(), diskImage);
        }
    }
}
#end_block

#method_before
private Response cloneVmFromTemplate(VmStatic staticVm, Disks disks, Guid templateId) {
    return performCreation(VdcActionType.AddVmFromTemplate, new AddVmFromTemplateParameters(staticVm, getDisksToClone(disks, templateId), Guid.Empty), new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class));
}
#method_after
private Response cloneVmFromTemplate(VmStatic staticVm, VM vm, Guid templateId) {
    AddVmFromTemplateParameters params = new AddVmFromTemplateParameters(staticVm, getDisksToClone(vm.getDisks(), templateId), Guid.Empty);
    params.setVmPayload(getPayload(vm));
    return performCreation(VdcActionType.AddVmFromTemplate, params, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class));
}
#end_block

#method_before
private HashMap<Guid, DiskImage> getDisksToClone(Disks disks, Guid templateId) {
    HashMap<Guid, DiskImage> disksMap = new HashMap<Guid, DiskImage>();
    if (disks != null && disks.isSetDisks() && disks.getDisks().size() > 0) {
        HashMap<Guid, DiskImage> templatesDisksMap = getTemplateDisks(templateId);
        for (Disk disk : disks.getDisks()) {
            DiskImage templateDisk = templatesDisksMap.get(Guid.createGuidFromString(disk.getId()));
            if (templateDisk != null) {
                disksMap.put(templateDisk.getImageId(), map(disk, templateDisk));
            } else {
                throw new WebApplicationException(Response.Status.NOT_FOUND);
            }
        }
    }
    return disksMap;
}
#method_after
private HashMap<Guid, DiskImage> getDisksToClone(Disks disks, Guid templateId) {
    HashMap<Guid, DiskImage> disksMap = new HashMap<Guid, DiskImage>();
    if (disks != null && disks.isSetDisks() && disks.getDisks().size() > 0) {
        HashMap<Guid, DiskImage> templatesDisksMap = getTemplateDisks(templateId);
        for (Disk disk : disks.getDisks()) {
            DiskImage templateDisk = templatesDisksMap.get(asGuid(disk.getImageId()));
            if (templateDisk != null) {
                disksMap.put(templateDisk.getImageId(), map(disk, templateDisk));
            } else {
                throw new WebApplicationException(Response.Status.NOT_FOUND);
            }
        }
    }
    return disksMap;
}
#end_block

#method_before
protected Response addVm(VmStatic staticVm, Guid storageDomainId, Disks disks, Guid templateId, org.ovirt.engine.core.common.businessentities.VmPayload vmPayload) {
    VmManagementParametersBase params = new VmManagementParametersBase(staticVm);
    params.setVmPayload(vmPayload);
    params.setStorageDomainId(storageDomainId);
    params.setDiskInfoDestinationMap(getDisksToClone(disks, templateId));
    return performCreation(VdcActionType.AddVm, params, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class));
}
#method_after
protected Response addVm(VmStatic staticVm, VM vm, Guid storageDomainId, Guid templateId) {
    VmManagementParametersBase params = new VmManagementParametersBase(staticVm);
    params.setVmPayload(getPayload(vm));
    params.setStorageDomainId(storageDomainId);
    params.setDiskInfoDestinationMap(getDisksToClone(vm.getDisks(), templateId));
    return performCreation(VdcActionType.AddVm, params, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class));
}
#end_block

#method_before
protected Response addVmFromScratch(VmStatic staticVm, Guid storageDomainId, Disks disks, org.ovirt.engine.core.common.businessentities.VmPayload vmPayload) {
    AddVmFromScratchParameters params = new AddVmFromScratchParameters(staticVm, mapDisks(disks), Guid.Empty);
    params.setVmPayload(vmPayload);
    params.setStorageDomainId(storageDomainId);
    return performCreation(VdcActionType.AddVmFromScratch, params, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class));
}
#method_after
protected Response addVmFromScratch(VmStatic staticVm, VM vm, Guid storageDomainId) {
    AddVmFromScratchParameters params = new AddVmFromScratchParameters(staticVm, mapDisks(vm.getDisks()), Guid.Empty);
    params.setVmPayload(getPayload(vm));
    params.setStorageDomainId(storageDomainId);
    return performCreation(VdcActionType.AddVmFromScratch, params, new QueryIdResolver(VdcQueryType.GetVmByVmId, GetVmByVmIdParameters.class));
}
#end_block

#method_before
protected VMs mapCollection(List<org.ovirt.engine.core.common.businessentities.VM> entities) {
    VMs collection = new VMs();
    for (org.ovirt.engine.core.common.businessentities.VM entity : entities) {
        VM vm = map(entity);
        collection.getVMs().add(addLinks(populate(vm, entity)));
        setPayload(vm);
    }
    return collection;
}
#method_after
protected VMs mapCollection(List<org.ovirt.engine.core.common.businessentities.VM> entities) {
    VMs collection = new VMs();
    for (org.ovirt.engine.core.common.businessentities.VM entity : entities) {
        VM vm = map(entity);
        collection.getVMs().add(addLinks(populate(vm, entity)));
    }
    return collection;
}
#end_block

#method_before
private void setPayload(VM vm) {
    // TODO: remove thte try catch...
    try {
        org.ovirt.engine.core.common.businessentities.VmPayload payload = getEntity(org.ovirt.engine.core.common.businessentities.VmPayload.class, VdcQueryType.GetVmPayload, new GetVmByVmIdParameters(new Guid(vm.getId())), null, false);
        if (payload != null) {
            VmPayload p = getMapper(org.ovirt.engine.core.common.businessentities.VmPayload.class, VmPayload.class).map(payload, null);
            VmPayloads payloads = new VmPayloads();
            payloads.getVmPayload().add(p);
            vm.setVmPayloads(payloads);
        }
    } catch (Exception ex) {
    }
}
#method_after
protected void setPayload(VM vm) {
    try {
        VmPayload payload = getEntity(VmPayload.class, VdcQueryType.GetVmPayload, new GetVmByVmIdParameters(new Guid(vm.getId())), null, true);
        if (payload != null) {
            Payload p = getMapper(VmPayload.class, Payload.class).map(payload, null);
            Payloads payloads = new Payloads();
            payloads.getPayload().add(p);
            vm.setPayloads(payloads);
        }
    } catch (WebApplicationException ex) {
        if (ex.getResponse().getStatus() == Response.Status.NOT_FOUND.getStatusCode()) {
        // It's legal to not receive a payload for this VM, so the exception is caught and ignored.
        // (TODO: 'getEntity()' should be refactored to make it the programmer's decision,
        // whether to throw an exception or not in case the entity is not found.) Then
        // this try-catch won't be necessary.
        } else {
            throw ex;
        }
    }
}
#end_block

#method_before
@Override
protected VM populate(VM model, org.ovirt.engine.core.common.businessentities.VM entity) {
    Set<Detail> details = DetailHelper.getDetails(getHttpHeaders());
    model = addInlineDetails(details, model);
    if (details.contains(Detail.STATISTICS)) {
        addInlineStatistics(model);
    }
    return model;
}
#method_after
@Override
protected VM populate(VM model, org.ovirt.engine.core.common.businessentities.VM entity) {
    Set<Detail> details = DetailHelper.getDetails(getHttpHeaders());
    model = addInlineDetails(details, model);
    if (details.contains(Detail.STATISTICS)) {
        addInlineStatistics(model);
    }
    setPayload(model);
    return model;
}
#end_block

#method_before
@Override
protected VM postPopulate(VM from) {
    from.setType(MappingTestHelper.shuffle(VmType.class).value());
    from.setOrigin(OriginType.VMWARE.name().toLowerCase());
    from.getDisplay().setType(MappingTestHelper.shuffle(DisplayType.class).value());
    from.getVmPayloads().getVmPayload().get(0).setType(MappingTestHelper.shuffle(VmDeviceType.class).value());
    for (Boot boot : from.getOs().getBoot()) {
        boot.setDev(MappingTestHelper.shuffle(BootDevice.class).value());
    }
    while (from.getCpu().getTopology().getSockets() == 0) {
        from.getCpu().getTopology().setSockets(MappingTestHelper.rand(100));
    }
    while (from.getCpu().getTopology().getCores() == 0) {
        from.getCpu().getTopology().setCores(MappingTestHelper.rand(100));
    }
    from.setTimezone("Australia/Darwin");
    return from;
}
#method_after
@Override
protected VM postPopulate(VM from) {
    from.setType(MappingTestHelper.shuffle(VmType.class).value());
    from.setOrigin(OriginType.VMWARE.name().toLowerCase());
    from.getDisplay().setType(MappingTestHelper.shuffle(DisplayType.class).value());
    from.getPayloads().getPayload().get(0).setType(MappingTestHelper.shuffle(VmDeviceType.class).value());
    for (Boot boot : from.getOs().getBoot()) {
        boot.setDev(MappingTestHelper.shuffle(BootDevice.class).value());
    }
    while (from.getCpu().getTopology().getSockets() == 0) {
        from.getCpu().getTopology().setSockets(MappingTestHelper.rand(100));
    }
    while (from.getCpu().getTopology().getCores() == 0) {
        from.getCpu().getTopology().setCores(MappingTestHelper.rand(100));
    }
    from.setTimezone("Australia/Darwin");
    return from;
}
#end_block

#method_before
@Override
protected void verify(VM model, VM transform) {
    assertNotNull(transform);
    assertEquals(model.getName(), transform.getName());
    assertEquals(model.getId(), transform.getId());
    assertEquals(model.getDescription(), transform.getDescription());
    assertEquals(model.getType(), transform.getType());
    assertEquals(model.getOrigin(), transform.getOrigin());
    assertTrue(Math.abs(model.getMemory() - transform.getMemory()) <= (1024 * 1024));
    assertNotNull(transform.getTemplate());
    assertEquals(model.getTemplate().getId(), transform.getTemplate().getId());
    assertNotNull(transform.getCluster());
    assertNotNull(transform.getCpu());
    assertNotNull(transform.getCpu().getTopology());
    assertTrue(Math.abs(model.getCpu().getTopology().getCores() - transform.getCpu().getTopology().getCores()) < model.getCpu().getTopology().getSockets());
    assertEquals(model.getCpu().getTopology().getSockets(), transform.getCpu().getTopology().getSockets());
    assertNotNull(transform.getOs());
    assertTrue(transform.getOs().isSetBoot());
    assertEquals(model.getOs().getBoot().size(), transform.getOs().getBoot().size());
    for (int i = 0; i < model.getOs().getBoot().size(); i++) {
        assertEquals(model.getOs().getBoot().get(i).getDev(), transform.getOs().getBoot().get(i).getDev());
    }
    assertEquals(model.getOs().getKernel(), transform.getOs().getKernel());
    assertEquals(model.getOs().getInitrd(), transform.getOs().getInitrd());
    assertEquals(model.getOs().getCmdline(), transform.getOs().getCmdline());
    assertTrue(transform.isSetDisplay());
    assertEquals(model.isSetDisplay(), transform.isSetDisplay());
    assertEquals(model.getDisplay().getType(), transform.getDisplay().getType());
    assertEquals(model.getDisplay().getMonitors(), transform.getDisplay().getMonitors());
    assertEquals(model.getPlacementPolicy().getHost().getId(), transform.getPlacementPolicy().getHost().getId());
    assertTrue(Math.abs(model.getMemoryPolicy().getGuaranteed() - transform.getMemoryPolicy().getGuaranteed()) <= (1024 * 1024));
    assertEquals(model.getDomain().getName(), transform.getDomain().getName());
    assertEquals(model.getTimezone(), transform.getTimezone());
    assertEquals(model.getUsb().isEnabled(), transform.getUsb().isEnabled());
}
#method_after
@Override
protected void verify(VM model, VM transform) {
    assertNotNull(transform);
    assertEquals(model.getName(), transform.getName());
    assertEquals(model.getId(), transform.getId());
    assertEquals(model.getDescription(), transform.getDescription());
    assertEquals(model.getType(), transform.getType());
    assertEquals(model.getOrigin(), transform.getOrigin());
    assertTrue(Math.abs(model.getMemory() - transform.getMemory()) <= (1024 * 1024));
    assertNotNull(transform.getTemplate());
    assertEquals(model.getTemplate().getId(), transform.getTemplate().getId());
    assertNotNull(transform.getCluster());
    assertNotNull(transform.getCpu());
    assertNotNull(transform.getCpu().getTopology());
    assertTrue(Math.abs(model.getCpu().getTopology().getCores() - transform.getCpu().getTopology().getCores()) < model.getCpu().getTopology().getSockets());
    assertEquals(model.getCpu().getTopology().getSockets(), transform.getCpu().getTopology().getSockets());
    assertNotNull(transform.getOs());
    assertTrue(transform.getOs().isSetBoot());
    assertEquals(model.getOs().getBoot().size(), transform.getOs().getBoot().size());
    for (int i = 0; i < model.getOs().getBoot().size(); i++) {
        assertEquals(model.getOs().getBoot().get(i).getDev(), transform.getOs().getBoot().get(i).getDev());
    }
    assertEquals(model.getOs().getKernel(), transform.getOs().getKernel());
    assertEquals(model.getOs().getInitrd(), transform.getOs().getInitrd());
    assertEquals(model.getOs().getCmdline(), transform.getOs().getCmdline());
    assertTrue(transform.isSetDisplay());
    assertEquals(model.isSetDisplay(), transform.isSetDisplay());
    assertEquals(model.getDisplay().getType(), transform.getDisplay().getType());
    assertEquals(model.getDisplay().getMonitors(), transform.getDisplay().getMonitors());
    assertEquals(model.getDisplay().isAllowReconnect(), transform.getDisplay().isAllowReconnect());
    assertEquals(model.getPlacementPolicy().getHost().getId(), transform.getPlacementPolicy().getHost().getId());
    assertTrue(Math.abs(model.getMemoryPolicy().getGuaranteed() - transform.getMemoryPolicy().getGuaranteed()) <= (1024 * 1024));
    assertEquals(model.getDomain().getName(), transform.getDomain().getName());
    assertEquals(model.getTimezone(), transform.getTimezone());
    assertEquals(model.getUsb().isEnabled(), transform.getUsb().isEnabled());
}
#end_block

#method_before
private static void printUsage() {
    System.out.println("Usage:");
    System.out.println("StoreUtils -[enc|dec|pvk] -store=path/to/keystore-file -pass=keystore-pass -string='string to be enc/decrypted' [-alias='cert alias']");
    System.out.println("StoreUtils -pubkey2ssh -store=path/to/keystore-file -pass=keystore-pass -alias='cert alias'");
}
#method_after
private static void printUsage() {
    System.out.println("Usage:");
    System.out.println("StoreUtils -[enc|dec] -store=path/to/keystore-file -pass=keystore-pass -string='string to be enc/decrypted' [-alias='cert alias']");
    System.out.println("StoreUtils -pubkey2ssh -store=path/to/keystore-file -pass=keystore-pass -alias='cert alias'");
}
#end_block

#method_before
private static boolean validate(CLIParse parser) {
    boolean fOK = true;
    if ((!parser.hasArg("enc")) && (!parser.hasArg("dec")) && (!parser.hasArg("pvk")) && (!parser.hasArg("pubkey2ssh"))) {
        System.out.println("What do you wish me to do? -please specify -enc, -dec, -pvk or -pubkey2ssh");
        fOK = false;
    }
    if ((parser.hasArg("enc") || parser.hasArg("dec")) && (!parser.hasArg("string"))) {
        System.out.println("Can't find a string to work with :( -please specify -string='something'.");
        fOK = false;
    }
    if ((!parser.hasArg("store")) || (!new File(parser.getArg("store")).exists())) {
        System.out.println("Can't find a keystore to work with :( -please specify -store with the correct keystore path.");
        fOK = false;
    }
    if (!parser.hasArg("pass")) {
        System.out.println("Can't find a keystore pass :( -please specify -pass with the correct keystore password.");
        fOK = false;
    }
    if (!fOK) {
        printUsage();
    }
    return fOK;
}
#method_after
private static boolean validate(CLIParse parser) {
    boolean fOK = true;
    if ((!parser.hasArg("enc")) && (!parser.hasArg("dec")) && (!parser.hasArg("pvk")) && (!parser.hasArg("pubkey2ssh"))) {
        System.out.println("What do you wish me to do? -please specify -enc, -dec or -pubkey2ssh");
        fOK = false;
    }
    if ((parser.hasArg("enc") || parser.hasArg("dec")) && (!parser.hasArg("string"))) {
        System.out.println("Can't find a string to work with :( -please specify -string='something'.");
        fOK = false;
    }
    if ((!parser.hasArg("store")) || (!new File(parser.getArg("store")).exists())) {
        System.out.println("Can't find a keystore to work with :( -please specify -store with the correct keystore path.");
        fOK = false;
    }
    if (!parser.hasArg("pass")) {
        System.out.println("Can't find a keystore pass :( -please specify -pass with the correct keystore password.");
        fOK = false;
    }
    if (!fOK) {
        printUsage();
    }
    return fOK;
}
#end_block

#method_before
public static void main(String[] args) {
    try {
        CLIParse parser = new CLIParse(args);
        if (parser.hasArg("?") || parser.hasArg("help") || args.length == 0) {
            printUsage();
            return;
        }
        if (!validate(parser)) {
            return;
        }
        String alias = "engine";
        if (parser.hasArg("alias")) {
            alias = parser.getArg("alias");
        }
        if (parser.hasArg("enc")) {
            System.out.println(EncryptionUtils.encrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias).trim().replace("\r\n", ""));
        } else if (parser.hasArg("dec")) {
            System.out.println(EncryptionUtils.decrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pvk")) {
            System.out.write(pvk(parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pubkey2ssh")) {
            System.out.println(ssh(parser.getArg("store"), parser.getArg("pass"), alias));
        }
    } catch (Exception e) {
        System.out.println("Operation failed!");
    }
}
#method_after
public static void main(String[] args) {
    try {
        CLIParse parser = new CLIParse(args);
        if (parser.hasArg("?") || parser.hasArg("help") || args.length == 0) {
            printUsage();
            return;
        }
        if (!validate(parser)) {
            return;
        }
        String alias = "engine";
        if (parser.hasArg("alias")) {
            alias = parser.getArg("alias");
        }
        if (parser.hasArg("enc")) {
            System.out.println(EncryptionUtils.encrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias).trim().replace("\r\n", ""));
        } else if (parser.hasArg("dec")) {
            System.out.println(EncryptionUtils.decrypt(parser.getArg("string"), parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pvk")) {
            System.out.write(pvk(parser.getArg("store"), parser.getArg("pass"), alias));
        } else if (parser.hasArg("pubkey2ssh")) {
            System.out.println(pubkey2ssh(parser.getArg("store"), parser.getArg("pass"), alias));
        }
    } catch (Exception e) {
        System.out.println("Operation failed!");
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // Check that the virtual machine exists:
    final VM vm = getVm();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TICKET);
        return false;
    }
    // Check that the virtual machine is in state that allows connections
    // to the console:
    final VMStatus status = vm.getstatus();
    if (status != VMStatus.Up && status != VMStatus.Paused && status != VMStatus.PoweringUp && status != VMStatus.PoweringDown && status != VMStatus.RebootInProgress) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL);
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TICKET);
        return false;
    }
    // If we are here everything is okay:
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    // Check that the virtual machine exists:
    final VM vm = getVm();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    // Check that the virtual machine is in state that allows connections
    // to the console:
    final VMStatus status = vm.getstatus();
    if (status != VMStatus.Up && status != VMStatus.Paused && status != VMStatus.PoweringUp && status != VMStatus.PoweringDown && status != VMStatus.RebootInProgress) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL);
        return false;
    }
    // subjects:
    return true;
}
#end_block

#method_before
@Override
protected void Perform() {
    // a ticket):
    if (StringHelper.isNullOrEmpty(mTicket)) {
        mTicket = Ticketing.GenerateOTP();
    }
    // Update the dynamic information of the virtual machine in memory (we need it
    // to update the database later):
    // Check that the virtual machine exists:
    final VM vm = getVm();
    final IVdcUser user = getCurrentUser();
    vm.setConsoleUserName(user.getUserName());
    vm.setConsoleUserId(user.getUserId());
    // If the virtual machine has the allow reconnect then we just have to save
    // the user name and the user id to the database, regardless of what was there
    // before and without locking.
    // 
    // In any other situation we try to save the new user to the database and proceed
    // only if the previous user in the database is null. This is needed to prevent
    // races between different users trying to access the console of the same virtual
    // machine simultaneously.
    final VmDynamicDAO dao = DbFacade.getInstance().getVmDynamicDAO();
    if (vm.getAllowConsoleReconnect() || userHasReconnectPermission) {
        dao.update(vm.getDynamicData());
        sendTicket();
    } else {
        final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData());
        if (saved) {
            sendTicket();
        } else {
            dontSendTicket();
        }
    }
}
#method_after
@Override
protected void Perform() {
    // a ticket):
    if (StringHelper.isNullOrEmpty(mTicket)) {
        mTicket = Ticketing.GenerateOTP();
    }
    // Update the dynamic information of the virtual machine in memory (we need it
    // to update the database later):
    final VM vm = getVm();
    final IVdcUser user = getCurrentUser();
    vm.setConsoleUserId(user.getUserId());
    // If the virtual machine has the allow reconnect flag or the user
    // needed additional permissions to connect to the console then we just
    // have to save the user id to the database, regardless of what was
    // there before and without locking.
    // 
    // Note that the fact that the user needed permissions actually means
    // that it has them, otherwise we will not be here, performing the
    // operation.
    // 
    // In any other situation we try to save the new user to the database
    // and proceed only if the previous user in the database is null. This
    // is needed to prevent races between different users trying to access
    // the console of the same virtual machine simultaneously.
    final VmDynamicDAO dao = DbFacade.getInstance().getVmDynamicDAO();
    if (vm.getAllowConsoleReconnect() || neededPermissions) {
        dao.update(vm.getDynamicData());
        sendTicket();
    } else {
        final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData());
        if (saved) {
            sendTicket();
        } else {
            dontSendTicket();
        }
    }
}
#end_block

#method_before
private void dontSendTicket() {
    // Send messages to the log explaining the situation:
    final VM vm = getVm();
    final IVdcUser user = getCurrentUser();
    log.warnFormat("Failed to set console user to \"{0}\" for virtual machine \"{1}\".", user.getUserName(), vm.getvm_name());
    log.warnFormat("This probably means that two users are trying to connect to the console simultaneously.");
    log.warnFormat("The id of user \"{0}\" is \"{1}\".", user.getUserName(), user.getUserId());
    log.warnFormat("The id of virtual machine \"{0}\" is \"{1}\".", vm.getvm_name(), vm.getvm_guid());
    log.warnFormat("The ticket will not be set.");
    // Set the result messages indicating that the operation failed:
    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER);
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TICKET);
    // The command failed:
    setSucceeded(false);
}
#method_after
private void dontSendTicket() {
    // Send messages to the log explaining the situation:
    final VM vm = getVm();
    final IVdcUser user = getCurrentUser();
    log.warnFormat("Can't give console of virtual machine \"{0}\" to user \"{1}\", it has probably been taken by another user.", vm.getId(), user.getUserId());
    // Set the result messages indicating that the operation failed:
    addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER);
    // The command failed:
    setSucceeded(false);
}
#end_block

#method_before
private void sendTicket() {
    // Send the ticket to the virtual machine:
    final boolean sent = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(getVdsId(), getVmId(), mTicket, mValidTime)).getSucceeded();
    // Return the ticket only if sending it to the virtual machine succeeded:
    if (sent) {
        setActionReturnValue(mTicket);
    }
    setSucceeded(sent);
}
#method_after
private void sendTicket() {
    // Send the ticket to the virtual machine:
    final IVdcUser user = getCurrentUser();
    final boolean sent = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(getVdsId(), getVmId(), mTicket, mValidTime, user.getUserName(), user.getUserId())).getSucceeded();
    // Return the ticket only if sending it to the virtual machine succeeded:
    if (sent) {
        setActionReturnValue(mTicket);
    }
    setSucceeded(sent);
}
#end_block

#method_before
@XmlElement(name = "CustomProperties")
public String getCustomProperties() {
    return mVmStatic.getCustomProperties();
}
#method_after
public String getCustomProperties() {
    return mVmStatic.getCustomProperties();
}
#end_block

#method_before
@XmlElement(name = "VmPauseStatus")
public VmPauseStatus getVmPauseStatus() {
    return this.mVmDynamic.getPauseStatus();
}
#method_after
public VmPauseStatus getVmPauseStatus() {
    return this.mVmDynamic.getPauseStatus();
}
#end_block

#method_before
@XmlElement(name = "vm_name")
public String getvm_name() {
    return this.mVmStatic.getvm_name();
}
#method_after
public String getvm_name() {
    return this.mVmStatic.getvm_name();
}
#end_block

#method_before
@XmlElement(name = "vm_mem_size_mb")
public int getvm_mem_size_mb() {
    return this.mVmStatic.getmem_size_mb();
}
#method_after
public int getvm_mem_size_mb() {
    return this.mVmStatic.getmem_size_mb();
}
#end_block

#method_before
@XmlElement(name = "vm_domain")
public String getvm_domain() {
    return this.mVmStatic.getdomain();
}
#method_after
public String getvm_domain() {
    return this.mVmStatic.getdomain();
}
#end_block

#method_before
@XmlElement(name = "vm_os")
public VmOsType getvm_os() {
    return this.mVmStatic.getos();
}
#method_after
public VmOsType getvm_os() {
    return this.mVmStatic.getos();
}
#end_block

#method_before
@XmlElement(name = "vm_creation_date")
public java.util.Date getvm_creation_date() {
    return this.mVmStatic.getcreation_date();
}
#method_after
public Date getvm_creation_date() {
    return this.mVmStatic.getcreation_date();
}
#end_block

#method_before
public void setvm_creation_date(java.util.Date value) {
    this.mVmStatic.setcreation_date(value);
}
#method_after
public void setvm_creation_date(Date value) {
    this.mVmStatic.setcreation_date(value);
}
#end_block

#method_before
@XmlElement(name = "vm_description")
public String getvm_description() {
    return this.mVmStatic.getdescription();
}
#method_after
public String getvm_description() {
    return this.mVmStatic.getdescription();
}
#end_block

#method_before
@XmlElement(name = "num_of_monitors")
public int getnum_of_monitors() {
    return this.mVmStatic.getnum_of_monitors();
}
#method_after
public int getnum_of_monitors() {
    return this.mVmStatic.getnum_of_monitors();
}
#end_block

#method_before
@XmlElement
public boolean getAllowConsoleReconnect() {
    return mVmStatic.getAllowConsoleReconnect();
}
#method_after
public boolean getAllowConsoleReconnect() {
    return this.mVmStatic.getAllowConsoleReconnect();
}
#end_block

#method_before
public void setAllowConsoleReconnect(boolean value) {
    mVmStatic.setAllowConsoleReconnect(value);
}
#method_after
public void setAllowConsoleReconnect(boolean value) {
    this.mVmStatic.setAllowConsoleReconnect(value);
    OnPropertyChanged(new PropertyChangedEventArgs("allowConsoleReconnect"));
}
#end_block

#method_before
@XmlElement(name = "is_initialized")
public boolean getis_initialized() {
    return this.mVmStatic.getis_initialized();
}
#method_after
public boolean getis_initialized() {
    return this.mVmStatic.getis_initialized();
}
#end_block

#method_before
@XmlElement(name = "is_auto_suspend")
public boolean getis_auto_suspend() {
    return this.mVmStatic.getis_auto_suspend();
}
#method_after
public boolean getis_auto_suspend() {
    return this.mVmStatic.getis_auto_suspend();
}
#end_block

#method_before
@XmlElement(name = "num_of_cpus")
public int getnum_of_cpus() {
    return this.mVmStatic.getnum_of_cpus();
}
#method_after
public int getnum_of_cpus() {
    return this.mVmStatic.getnum_of_cpus();
}
#end_block

#method_before
@XmlElement(name = "num_of_sockets")
public int getnum_of_sockets() {
    return this.mVmStatic.getnum_of_sockets();
}
#method_after
public int getnum_of_sockets() {
    return this.mVmStatic.getnum_of_sockets();
}
#end_block

#method_before
@XmlElement(name = "cpu_per_socket")
public int getcpu_per_socket() {
    return this.mVmStatic.getcpu_per_socket();
}
#method_after
public int getcpu_per_socket() {
    return this.mVmStatic.getcpu_per_socket();
}
#end_block

#method_before
@XmlElement(name = "usb_policy")
public UsbPolicy getusb_policy() {
    return mVmStatic.getusb_policy();
}
#method_after
public UsbPolicy getusb_policy() {
    return mVmStatic.getusb_policy();
}
#end_block

#method_before
@XmlElement(name = "auto_startup")
public boolean getauto_startup() {
    return mVmStatic.getauto_startup();
}
#method_after
public boolean getauto_startup() {
    return mVmStatic.getauto_startup();
}
#end_block

#method_before
@XmlElement(name = "dedicated_vm_for_vds")
public NGuid getdedicated_vm_for_vds() {
    return mVmStatic.getdedicated_vm_for_vds();
}
#method_after
public NGuid getdedicated_vm_for_vds() {
    return mVmStatic.getdedicated_vm_for_vds();
}
#end_block

#method_before
@XmlElement(name = "vds_group_id")
public Guid getvds_group_id() {
    return this.mVmStatic.getvds_group_id();
}
#method_after
public Guid getvds_group_id() {
    return this.mVmStatic.getvds_group_id();
}
#end_block

#method_before
@XmlElement(name = "time_zone")
public String gettime_zone() {
    return mVmStatic.gettime_zone();
}
#method_after
public String gettime_zone() {
    return mVmStatic.gettime_zone();
}
#end_block

#method_before
@XmlElement(name = "is_stateless")
public boolean getis_stateless() {
    return mVmStatic.getis_stateless();
}
#method_after
public boolean getis_stateless() {
    return mVmStatic.getis_stateless();
}
#end_block

#method_before
@XmlElement(name = "default_display_type")
public DisplayType getdefault_display_type() {
    return mVmStatic.getdefault_display_type();
}
#method_after
public DisplayType getdefault_display_type() {
    return mVmStatic.getdefault_display_type();
}
#end_block

#method_before
@XmlElement(name = "priority")
public int getpriority() {
    return mVmStatic.getpriority();
}
#method_after
public int getpriority() {
    return mVmStatic.getpriority();
}
#end_block

#method_before
@XmlElement(name = "iso_path")
public String getiso_path() {
    return mVmStatic.getiso_path();
}
#method_after
public String getiso_path() {
    return mVmStatic.getiso_path();
}
#end_block

#method_before
@XmlElement(name = "origin")
public OriginType getorigin() {
    return mVmStatic.getorigin();
}
#method_after
public OriginType getorigin() {
    return mVmStatic.getorigin();
}
#end_block

#method_before
@XmlElement(name = "initrd_url")
public String getinitrd_url() {
    return mVmStatic.getinitrd_url();
}
#method_after
public String getinitrd_url() {
    return mVmStatic.getinitrd_url();
}
#end_block

#method_before
@XmlElement(name = "kernel_url")
public String getkernel_url() {
    return mVmStatic.getkernel_url();
}
#method_after
public String getkernel_url() {
    return mVmStatic.getkernel_url();
}
#end_block

#method_before
@XmlElement(name = "kernel_params")
public String getkernel_params() {
    return mVmStatic.getkernel_params();
}
#method_after
public String getkernel_params() {
    return mVmStatic.getkernel_params();
}
#end_block

#method_before
@XmlElement(name = "status")
public VMStatus getstatus() {
    return this.mVmDynamic.getstatus();
}
#method_after
public VMStatus getstatus() {
    return this.mVmDynamic.getstatus();
}
#end_block

#method_before
@XmlElement(name = "vm_ip")
public String getvm_ip() {
    return this.mVmDynamic.getvm_ip();
}
#method_after
public String getvm_ip() {
    return this.mVmDynamic.getvm_ip();
}
#end_block

#method_before
@XmlElement(name = "vm_host")
public String getvm_host() {
    String vmHost = this.mVmDynamic.getvm_host();
    if (!StringHelper.isNullOrEmpty(this.getvm_ip())) {
        this.mVmDynamic.setvm_host(getvm_ip());
    } else {
        String vmDomain = getvm_domain();
        // vmHost and vmDomain.
        if (StringHelper.isNullOrEmpty(vmHost)) {
            vmHost = StringHelper.isNullOrEmpty(vmDomain) ? getvm_name() : getvm_name() + "." + vmDomain;
            this.mVmDynamic.setvm_host(vmHost);
        } else if (!StringHelper.isNullOrEmpty(vmDomain) && !vmHost.endsWith(vmDomain)) {
            this.mVmDynamic.setvm_host(vmHost + "." + vmDomain);
        }
    }
    return this.mVmDynamic.getvm_host();
}
#method_after
public String getvm_host() {
    String vmHost = this.mVmDynamic.getvm_host();
    if (!StringHelper.isNullOrEmpty(this.getvm_ip())) {
        this.mVmDynamic.setvm_host(getvm_ip());
    } else {
        String vmDomain = getvm_domain();
        // vmHost and vmDomain.
        if (StringHelper.isNullOrEmpty(vmHost)) {
            vmHost = StringHelper.isNullOrEmpty(vmDomain) ? getvm_name() : getvm_name() + "." + vmDomain;
            this.mVmDynamic.setvm_host(vmHost);
        } else if (!StringHelper.isNullOrEmpty(vmDomain) && !vmHost.endsWith(vmDomain)) {
            this.mVmDynamic.setvm_host(vmHost + "." + vmDomain);
        }
    }
    return this.mVmDynamic.getvm_host();
}
#end_block

#method_before
@XmlElement(name = "vm_pid")
public Integer getvm_pid() {
    return this.mVmDynamic.getvm_pid();
}
#method_after
public Integer getvm_pid() {
    return this.mVmDynamic.getvm_pid();
}
#end_block

#method_before
@XmlElement(name = "vm_last_up_time")
public java.util.Date getvm_last_up_time() {
    return this.mVmDynamic.getvm_last_up_time();
}
#method_after
public Date getvm_last_up_time() {
    return this.mVmDynamic.getvm_last_up_time();
}
#end_block

#method_before
public void setvm_last_up_time(java.util.Date value) {
    this.mVmDynamic.setvm_last_up_time(value);
}
#method_after
public void setvm_last_up_time(Date value) {
    this.mVmDynamic.setvm_last_up_time(value);
}
#end_block

#method_before
@XmlElement(name = "vm_last_boot_time")
public java.util.Date getvm_last_boot_time() {
    return this.mVmDynamic.getvm_last_boot_time();
}
#method_after
public Date getvm_last_boot_time() {
    return this.mVmDynamic.getvm_last_boot_time();
}
#end_block

#method_before
public void setvm_last_boot_time(java.util.Date value) {
    this.mVmDynamic.setvm_last_boot_time(value);
}
#method_after
public void setvm_last_boot_time(Date value) {
    this.mVmDynamic.setvm_last_boot_time(value);
}
#end_block

#method_before
@XmlElement(name = "guest_cur_user_name")
public String getguest_cur_user_name() {
    return this.mVmDynamic.getguest_cur_user_name();
}
#method_after
public String getguest_cur_user_name() {
    return this.mVmDynamic.getguest_cur_user_name();
}
#end_block

#method_before
@XmlElement(name = "guest_last_login_time")
public java.util.Date getguest_last_login_time() {
    return this.mVmDynamic.getguest_last_login_time();
}
#method_after
public Date getguest_last_login_time() {
    return this.mVmDynamic.getguest_last_login_time();
}
#end_block

#method_before
public void setguest_last_login_time(java.util.Date value) {
    this.mVmDynamic.setguest_last_login_time(value);
}
#method_after
public void setguest_last_login_time(Date value) {
    this.mVmDynamic.setguest_last_login_time(value);
}
#end_block

#method_before
@XmlElement(name = "guest_cur_user_id")
public NGuid getguest_cur_user_id() {
    return this.mVmDynamic.getguest_cur_user_id();
}
#method_after
public NGuid getguest_cur_user_id() {
    return this.mVmDynamic.getguest_cur_user_id();
}
#end_block

#method_before
@XmlElement
public NGuid getConsoleUserId() {
    return this.mVmDynamic.getConsoleUserId();
}
#method_after
public NGuid getConsoleUserId() {
    return this.mVmDynamic.getConsoleUserId();
}
#end_block

#method_before
@XmlElement(name = "guest_last_logout_time")
public java.util.Date getguest_last_logout_time() {
    return this.mVmDynamic.getguest_last_logout_time();
}
#method_after
public Date getguest_last_logout_time() {
    return this.mVmDynamic.getguest_last_logout_time();
}
#end_block

#method_before
public void setguest_last_logout_time(java.util.Date value) {
    this.mVmDynamic.setguest_last_logout_time(value);
}
#method_after
public void setguest_last_logout_time(Date value) {
    this.mVmDynamic.setguest_last_logout_time(value);
}
#end_block

#method_before
@XmlElement(name = "guest_os")
public String getguest_os() {
    return this.mVmDynamic.getguest_os();
}
#method_after
public String getguest_os() {
    return this.mVmDynamic.getguest_os();
}
#end_block

#method_before
@XmlElement(name = "run_on_vds")
public NGuid getrun_on_vds() {
    return this.mVmDynamic.getrun_on_vds();
}
#method_after
public NGuid getrun_on_vds() {
    return this.mVmDynamic.getrun_on_vds();
}
#end_block

#method_before
@XmlElement(name = "migrating_to_vds")
public NGuid getmigrating_to_vds() {
    return this.mVmDynamic.getmigrating_to_vds();
}
#method_after
public NGuid getmigrating_to_vds() {
    return this.mVmDynamic.getmigrating_to_vds();
}
#end_block

#method_before
@XmlElement(name = "app_list")
public String getapp_list() {
    return this.mVmDynamic.getapp_list();
}
#method_after
public String getapp_list() {
    return this.mVmDynamic.getapp_list();
}
#end_block

#method_before
@XmlElement(name = "display", nillable = true)
public Integer getdisplay() {
    return this.mVmDynamic.getdisplay();
}
#method_after
public Integer getdisplay() {
    return this.mVmDynamic.getdisplay();
}
#end_block

#method_before
@XmlElement(name = "acpi_enable")
public Boolean getacpi_enable() {
    return this.mVmDynamic.getacpi_enable();
}
#method_after
public Boolean getacpi_enable() {
    return this.mVmDynamic.getacpi_enable();
}
#end_block

#method_before
@XmlElement(name = "display_ip")
public String getdisplay_ip() {
    return this.mVmDynamic.getdisplay_ip();
}
#method_after
public String getdisplay_ip() {
    return this.mVmDynamic.getdisplay_ip();
}
#end_block

#method_before
@XmlElement(name = "display_type")
public DisplayType getdisplay_type() {
    return this.mVmDynamic.getdisplay_type();
}
#method_after
public DisplayType getdisplay_type() {
    return this.mVmDynamic.getdisplay_type();
}
#end_block

#method_before
@XmlElement(name = "kvm_enable")
public Boolean getkvm_enable() {
    return this.mVmDynamic.getkvm_enable();
}
#method_after
public Boolean getkvm_enable() {
    return this.mVmDynamic.getkvm_enable();
}
#end_block

#method_before
@XmlElement(name = "session")
public SessionState getsession() {
    return this.mVmDynamic.getsession();
}
#method_after
public SessionState getsession() {
    return this.mVmDynamic.getsession();
}
#end_block

#method_before
@XmlElement(name = "boot_sequence")
public BootSequence getboot_sequence() {
    return this.mVmDynamic.getboot_sequence();
}
#method_after
public BootSequence getboot_sequence() {
    return this.mVmDynamic.getboot_sequence();
}
#end_block

#method_before
@XmlElement(name = "display_secure_port", nillable = true)
public Integer getdisplay_secure_port() {
    return this.mVmDynamic.getdisplay_secure_port();
}
#method_after
public Integer getdisplay_secure_port() {
    return this.mVmDynamic.getdisplay_secure_port();
}
#end_block

#method_before
@XmlElement(name = "ExitStatus")
public VmExitStatus getExitStatus() {
    return this.mVmDynamic.getExitStatus();
}
#method_after
public VmExitStatus getExitStatus() {
    return this.mVmDynamic.getExitStatus();
}
#end_block

#method_before
@XmlElement(name = "ExitMessage")
public String getExitMessage() {
    return this.mVmDynamic.getExitMessage();
}
#method_after
public String getExitMessage() {
    return this.mVmDynamic.getExitMessage();
}
#end_block

#method_before
@XmlElement(name = "utc_diff")
public Integer getutc_diff() {
    return this.mVmDynamic.getutc_diff();
}
#method_after
public Integer getutc_diff() {
    return this.mVmDynamic.getutc_diff();
}
#end_block

#method_before
@XmlElement(name = "last_vds_run_on")
public NGuid getlast_vds_run_on() {
    return this.mVmDynamic.getlast_vds_run_on();
}
#method_after
public NGuid getlast_vds_run_on() {
    return this.mVmDynamic.getlast_vds_run_on();
}
#end_block

#method_before
@XmlElement(name = "client_ip")
public String getclient_ip() {
    return this.mVmDynamic.getclient_ip();
}
#method_after
public String getclient_ip() {
    return this.mVmDynamic.getclient_ip();
}
#end_block

#method_before
@XmlElement(name = "guest_requested_memory")
public Integer getguest_requested_memory() {
    return this.mVmDynamic.getguest_requested_memory();
}
#method_after
public Integer getguest_requested_memory() {
    return this.mVmDynamic.getguest_requested_memory();
}
#end_block

#method_before
@XmlElement(name = "cpu_user")
public Double getcpu_user() {
    return this.mVmStatistics.getcpu_user();
}
#method_after
public Double getcpu_user() {
    return this.mVmStatistics.getcpu_user();
}
#end_block

#method_before
@XmlElement(name = "cpu_sys")
public Double getcpu_sys() {
    return this.mVmStatistics.getcpu_sys();
}
#method_after
public Double getcpu_sys() {
    return this.mVmStatistics.getcpu_sys();
}
#end_block

#method_before
@XmlElement(name = "elapsed_time", nillable = true)
public Double getelapsed_time() {
    return this.mVmStatistics.getelapsed_time();
}
#method_after
public Double getelapsed_time() {
    return this.mVmStatistics.getelapsed_time();
}
#end_block

#method_before
@XmlElement(name = "RoundedElapsedTime", nillable = true)
public Double getRoundedElapsedTime() {
    return this.mVmStatistics.getRoundedElapsedTime();
}
#method_after
public Double getRoundedElapsedTime() {
    return this.mVmStatistics.getRoundedElapsedTime();
}
#end_block

#method_before
@XmlElement(name = "usage_network_percent", nillable = true)
public Integer getusage_network_percent() {
    return this.mVmStatistics.getusage_network_percent();
}
#method_after
public Integer getusage_network_percent() {
    return this.mVmStatistics.getusage_network_percent();
}
#end_block

#method_before
@XmlElement(name = "usage_mem_percent", nillable = true)
public Integer getusage_mem_percent() {
    return this.mVmStatistics.getusage_mem_percent();
}
#method_after
public Integer getusage_mem_percent() {
    return this.mVmStatistics.getusage_mem_percent();
}
#end_block

#method_before
@XmlElement(name = "usage_cpu_percent", nillable = true)
public Integer getusage_cpu_percent() {
    return this.mVmStatistics.getusage_cpu_percent();
}
#method_after
public Integer getusage_cpu_percent() {
    return this.mVmStatistics.getusage_cpu_percent();
}
#end_block

#method_before
@XmlElement(name = "vmt_guid")
public Guid getvmt_guid() {
    return this.mVmStatic.getvmt_guid();
}
#method_after
public Guid getvmt_guid() {
    return this.mVmStatic.getvmt_guid();
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
@XmlElement(name = "vmt_name")
public String getvmt_name() {
    return this.vmt_nameField;
}
#method_after
public String getvmt_name() {
    return this.vmt_nameField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public int getvmt_mem_size_mb() {
    return this.vmt_mem_size_mbField;
}
#method_after
public int getvmt_mem_size_mb() {
    return this.vmt_mem_size_mbField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public VmOsType getvmt_os() {
    return this.vmt_osField;
}
#method_after
public VmOsType getvmt_os() {
    return this.vmt_osField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public java.util.Date getvmt_creation_date() {
    return this.vmt_creation_dateField;
}
#method_after
public Date getvmt_creation_date() {
    return this.vmt_creation_dateField;
}
#end_block

#method_before
public void setvmt_creation_date(java.util.Date value) {
    this.vmt_creation_dateField = value;
}
#method_after
public void setvmt_creation_date(Date value) {
    this.vmt_creation_dateField = value;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public int getvmt_child_count() {
    return this.vmt_child_countField;
}
#method_after
public int getvmt_child_count() {
    return this.vmt_child_countField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public int getvmt_num_of_cpus() {
    return this.vmt_num_of_cpusField;
}
#method_after
public int getvmt_num_of_cpus() {
    return this.vmt_num_of_cpusField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public int getvmt_num_of_sockets() {
    return this.vmt_num_of_socketsField;
}
#method_after
public int getvmt_num_of_sockets() {
    return this.vmt_num_of_socketsField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public int getvmt_cpu_per_socket() {
    return this.vmt_cpu_per_socketField;
}
#method_after
public int getvmt_cpu_per_socket() {
    return this.vmt_cpu_per_socketField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public String getvmt_description() {
    return this.vmt_descriptionField;
}
#method_after
public String getvmt_description() {
    return this.vmt_descriptionField;
}
#end_block

#method_before
@XmlElement(name = "vds_group_compatibility_version")
public Version getvds_group_compatibility_version() {
    return this.vds_group_compatibility_versionField;
}
#method_after
public Version getvds_group_compatibility_version() {
    return this.vds_group_compatibility_versionField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public String getvds_group_name() {
    return this.vds_group_nameField;
}
#method_after
public String getvds_group_name() {
    return this.vds_group_nameField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public String getvds_group_description() {
    return this.vds_group_descriptionField;
}
#method_after
public String getvds_group_description() {
    return this.vds_group_descriptionField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public String getvds_group_cpu_name() {
    return this.vds_group_cpu_nameField;
}
#method_after
public String getvds_group_cpu_name() {
    return this.vds_group_cpu_nameField;
}
#end_block

#method_before
@XmlElement(name = "fail_back")
public boolean getfail_back() {
    return this.mVmStatic.getfail_back();
}
#method_after
public boolean getfail_back() {
    return this.mVmStatic.getfail_back();
}
#end_block

#method_before
@XmlElement(name = "default_boot_sequence")
public BootSequence getdefault_boot_sequence() {
    return this.mVmStatic.getdefault_boot_sequence();
}
#method_after
public BootSequence getdefault_boot_sequence() {
    return this.mVmStatic.getdefault_boot_sequence();
}
#end_block

#method_before
@XmlElement(name = "nice_level")
public int getnice_level() {
    return this.mVmStatic.getnice_level();
}
#method_after
public int getnice_level() {
    return this.mVmStatic.getnice_level();
}
#end_block

#method_before
@XmlElement(name = "MigrationSupport")
public MigrationSupport getMigrationSupport() {
    return this.mVmStatic.getMigrationSupport();
}
#method_after
public MigrationSupport getMigrationSupport() {
    return this.mVmStatic.getMigrationSupport();
}
#end_block

#method_before
@XmlElement(name = "vm_type")
public VmType getvm_type() {
    return this.mVmStatic.getvm_type();
}
#method_after
public VmType getvm_type() {
    return this.mVmStatic.getvm_type();
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
@XmlElement(name = "storage_pool_id")
public Guid getstorage_pool_id() {
    return storage_pool_idField;
}
#method_after
@Override
public Guid getstorage_pool_id() {
    return storage_pool_idField;
}
#end_block

#method_before
public void setstorage_pool_id(Guid value) {
    storage_pool_idField = value;
}
#method_after
@Override
public void setstorage_pool_id(Guid value) {
    storage_pool_idField = value;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
@XmlElement(name = "storage_pool_name")
public String getstorage_pool_name() {
    return storage_pool_nameField;
}
#method_after
public String getstorage_pool_name() {
    return storage_pool_nameField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
// to .NET attributes:
public VdsSelectionAlgorithm getselection_algorithm() {
    return selection_algorithmField;
}
#method_after
public VdsSelectionAlgorithm getselection_algorithm() {
    return selection_algorithmField;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
@XmlElement(name = "Interfaces")
public List<VmNetworkInterface> getInterfaces() {
    return mInterfaces;
}
#method_after
public List<VmNetworkInterface> getInterfaces() {
    return mVmStatic.getInterfaces();
}
#end_block

#method_before
public void setInterfaces(List<VmNetworkInterface> value) {
    mInterfaces = value;
}
#method_after
public void setInterfaces(List<VmNetworkInterface> value) {
    mVmStatic.setInterfaces(value);
}
#end_block

#method_before
public java.util.ArrayList<DiskImage> getImages() {
    return mImages;
}
#method_after
public ArrayList<DiskImage> getImages() {
    return mVmStatic.getImages();
}
#end_block

#method_before
public void setImages(java.util.ArrayList<DiskImage> value) {
    mImages = value;
}
#method_after
public void setImages(ArrayList<DiskImage> value) {
    mVmStatic.setImages(value);
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Events are not available in Java:
// public event PropertyChangedEventHandler PropertyChanged;
protected void OnPropertyChanged(PropertyChangedEventArgs e) {
    /* if (PropertyChanged != null) */
    {
    /* PropertyChanged(this, e); */
    }
}
#method_after
protected void OnPropertyChanged(PropertyChangedEventArgs e) {
}
#end_block

#method_before
public void guestLogoutTimeTreatmentAfterDestroy() {
    if (getguest_last_login_time() != null && (getguest_last_logout_time() == null || getguest_last_login_time().compareTo(getguest_last_logout_time()) > 0)) {
        setguest_last_logout_time(new java.util.Date());
    }
}
#method_after
public void guestLogoutTimeTreatmentAfterDestroy() {
    if (getguest_last_login_time() != null && (getguest_last_logout_time() == null || getguest_last_login_time().compareTo(getguest_last_logout_time()) > 0)) {
        setguest_last_logout_time(new Date());
    }
}
#end_block

#method_before
@XmlElement(name = "ActualDiskWithSnapshotsSize")
public double getActualDiskWithSnapshotsSize() {
    if (_actualDiskWithSnapthotsSize == 0 && getDiskMap() != null) {
        for (DiskImage disk : getDiskMap().values()) {
            _actualDiskWithSnapthotsSize += disk.getActualDiskWithSnapshotsSize();
        }
    }
    return _actualDiskWithSnapthotsSize;
}
#method_after
public double getActualDiskWithSnapshotsSize() {
    if (_actualDiskWithSnapthotsSize == 0 && getDiskMap() != null) {
        for (Disk disk : getDiskMap().values()) {
            if (DiskStorageType.IMAGE == disk.getDiskStorageType()) {
                _actualDiskWithSnapthotsSize += ((DiskImage) disk).getActualDiskWithSnapshotsSize();
            }
        }
    }
    return _actualDiskWithSnapthotsSize;
}
#end_block

#method_before
@XmlElement(name = "DiskSize")
public double getDiskSize() {
    if (_diskSize == 0) {
        for (DiskImage disk : getDiskMap().values()) {
            _diskSize += disk.getsize() / Double.valueOf(1024 * 1024 * 1024);
        }
    }
    return _diskSize;
}
#method_after
public double getDiskSize() {
    if (_diskSize == 0) {
        for (Disk disk : getDiskMap().values()) {
            if (DiskStorageType.IMAGE == disk.getDiskStorageType()) {
                _diskSize += ((DiskImage) disk).getsize() / Double.valueOf(1024 * 1024 * 1024);
            }
        }
    }
    return _diskSize;
}
#end_block

#method_before
public void setStaticData(VmStatic value) {
    mVmStatic = value;
}
#method_after
public void setStaticData(VmStatic value) {
    if (mVmStatic == null) {
        mVmStatic = new VmStatic();
    }
    mVmStatic = value;
}
#end_block

#method_before
@XmlElement
public String getrun_on_vds_name() {
    return run_on_vds_nameField;
}
#method_after
public String getrun_on_vds_name() {
    return run_on_vds_nameField;
}
#end_block

#method_before
public DiskImage getDriveToImageMap(String drive) {
    DiskImage image = null;
    if (mDiskMap.containsKey(drive)) {
        image = mDiskMap.get(drive);
    }
    return image;
}
#method_after
public Disk getDriveToImageMap(String drive) {
    Disk image = null;
    if (mDiskMap.containsKey(drive)) {
        image = mDiskMap.get(drive);
    }
    return image;
}
#end_block

#method_before
public Map<String, DiskImage> getDiskMap() {
    return mDiskMap;
}
#method_after
public Map<String, Disk> getDiskMap() {
    return mDiskMap;
}
#end_block

#method_before
public void setDiskMap(Map<String, DiskImage> diskMap) {
    mDiskMap = diskMap;
}
#method_after
public void setDiskMap(Map<String, Disk> diskMap) {
    mDiskMap = diskMap;
}
#end_block

#method_before
@XmlElement(name = "MinAllocatedMem")
public int getMinAllocatedMem() {
    return mVmStatic.getMinAllocatedMem();
}
#method_after
public int getMinAllocatedMem() {
    return mVmStatic.getMinAllocatedMem();
}
#end_block

#method_before
// This function is left only to leave the option of creating a VM without
// having all the data in the DB
// Currently it is used mainly by tests and VdcClient (for direct acccess to
// the VDS)
public void addDriveToImageMap(String drive, DiskImage image) {
    mDiskMap.put(drive, image);
    _diskList.add(image);
}
#method_after
// This function is left only to leave the option of creating a VM without
// having all the data in the DB
// Currently it is used mainly by tests and VdcClient (for direct access to
// the VDS)
public void addDriveToImageMap(String drive, DiskImage image) {
    mDiskMap.put(drive, image);
    getDiskList().add(image);
}
#end_block

#method_before
// public string qemuAudioDrv;
public void updateRunTimeStatisticsData(VmStatistics vmStatistics, VM vm) {
    setelapsed_time(vmStatistics.getelapsed_time());
    setusage_network_percent(vmStatistics.getusage_network_percent());
    vm.getStatisticsData().setDisksUsage(vmStatistics.getDisksUsage());
    // -------- cpu --------------
    setcpu_sys(vmStatistics.getcpu_sys());
    setcpu_user(vmStatistics.getcpu_user());
    if ((getcpu_sys() != null) && (getcpu_user() != null)) {
        // VB & C# TO JAVA CONVERTER TODO TASK: Arithmetic operations
        // involving nullable type instances are not converted to null-value
        // logic:
        // if statement will overcome Arithmetic operations problem
        Double percent = (getcpu_sys() + getcpu_user()) / new Double(vm.getnum_of_cpus());
        setusage_cpu_percent(percent.intValue());
        if (getusage_cpu_percent() != null && getusage_cpu_percent() > 100) {
            setusage_cpu_percent(100);
        }
    }
    // -------- memory --------------
    setusage_mem_percent(vmStatistics.getusage_mem_percent());
}
#method_after
// public string qemuAudioDrv;
public void updateRunTimeStatisticsData(VmStatistics vmStatistics, VM vm) {
    setelapsed_time(vmStatistics.getelapsed_time());
    setusage_network_percent(vmStatistics.getusage_network_percent());
    vm.getStatisticsData().setDisksUsage(vmStatistics.getDisksUsage());
    // -------- cpu --------------
    setcpu_sys(vmStatistics.getcpu_sys());
    setcpu_user(vmStatistics.getcpu_user());
    if ((getcpu_sys() != null) && (getcpu_user() != null)) {
        Double percent = (getcpu_sys() + getcpu_user()) / new Double(vm.getnum_of_cpus());
        setusage_cpu_percent(percent.intValue());
        if (getusage_cpu_percent() != null && getusage_cpu_percent() > 100) {
            setusage_cpu_percent(100);
        }
    }
    // -------- memory --------------
    setusage_mem_percent(vmStatistics.getusage_mem_percent());
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (super.equals(obj)) {
        return true;
    }
    VM eq = (VM) ((obj instanceof VM) ? obj : null);
    if (eq != null) {
        if (eq.getvm_guid().equals(this.getvm_guid())) {
            return true;
        }
    }
    return false;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (super.equals(obj)) {
        return true;
    }
    VM eq = (VM) ((obj instanceof VM) ? obj : null);
    if (eq != null) {
        if (eq.getId().equals(this.getId())) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
@XmlElement(name = "VmPoolName")
public String getVmPoolName() {
    return mVmPoolName;
// string returnValue = null;
// vm_pool_map map = DbFacade.Instance.GetVmPoolsMapByVmGuid(vm_guid);
// if (map != null)
// {
// vm_pools pool =
// DbFacade.Instance.GetVmPoolByVmPoolId(map.vm_pool_id.Value);
// if (pool != null)
// {
// returnValue = pool.vm_pool_name;
// }
// }
// return returnValue;
}
#method_after
public String getVmPoolName() {
    return mVmPoolName;
}
#end_block

#method_before
// VB & C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond
@XmlElement(name = "VmPoolId", nillable = true)
public NGuid getVmPoolId() {
    return mVmPoolId;
// int? returnValue = null;
// vm_pool_map map = DbFacade.Instance.GetVmPoolsMapByVmGuid(vm_guid);
// if (map != null)
// {
// vm_pools pool =
// DbFacade.Instance.GetVmPoolByVmPoolId(map.vm_pool_id.Value);
// if (pool != null)
// {
// returnValue = pool.vm_pool_id;
// }
// }
// return returnValue;
}
#method_after
public NGuid getVmPoolId() {
    return mVmPoolId;
}
#end_block

#method_before
@XmlElement(name = "TransparentHugePages")
public boolean getTransparentHugePages() {
    return this.transparentHugePages;
}
#method_after
public boolean getTransparentHugePages() {
    return this.transparentHugePages;
}
#end_block

#method_before
@Override
public Object getQueryableId() {
    return getvm_guid();
}
#method_after
@Override
public Object getQueryableId() {
    return getId();
}
#end_block

#method_before
@Override
public java.util.ArrayList<String> getChangeablePropertiesList() {
    return _vmProperties;
}
#method_after
@Override
public ArrayList<String> getChangeablePropertiesList() {
    return _vmProperties;
}
#end_block

#method_before
public java.util.ArrayList<DiskImage> getDiskList() {
    return _diskList;
}
#method_after
public ArrayList<DiskImage> getDiskList() {
    return mVmStatic.getDiskList();
}
#end_block

#method_before
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, java.util.Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vm_name", "description", "domain", "os", "osType", "creation_date", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "is_auto_suspend", "auto_startup", "dedicated_vm_for_vds", "default_display_type", "priority", "default_boot_sequence", "initrd_url", "kernel_url", "kernel_params", "migrationSupport", "minAllocatedMem" });
    mUpdateVmsStatic.AddFields(java.util.Arrays.asList(new Enum[] { VMStatus.Down }), Arrays.asList(new String[] { "vds_group_id", "time_zone", "is_stateless", "nice_level", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "iso_path", "userDefinedProperties", "predefinedProperties", "customProperties" }));
}
#method_after
public static void Init() {
    mUpdateVmsStatic = new ObjectIdentityChecker(VmHandler.class, Arrays.asList(new String[] { "VM", "VmStatic", "VmDynamic" }), VMStatus.class);
    mUpdateVmsStatic.AddPermittedFields(new String[] { "vm_name", "description", "domain", "os", "osType", "creation_date", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "is_auto_suspend", "auto_startup", "dedicated_vm_for_vds", "default_display_type", "priority", "default_boot_sequence", "initrd_url", "kernel_url", "kernel_params", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "vmPayload" });
    mUpdateVmsStatic.AddFields(Arrays.asList(new Enum[] { VMStatus.Down }), Arrays.asList(new String[] { "vds_group_id", "time_zone", "is_stateless", "nice_level", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "iso_path", "userDefinedProperties", "predefinedProperties", "customProperties", "images", "interfaces" }));
}
#end_block

#method_before
public static boolean VerifyAddVm(java.util.ArrayList<String> reasons, int vmsCount, Object vmTemplateId, Guid storagePoolId, Guid storageDomainId, boolean checkVmTemplateImages, boolean checkTemplateLock, int vmPriority) {
    boolean returnValue = true;
    if (MacPoolManager.getInstance().getavailableMacsCount() < vmsCount) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString());
        }
        returnValue = false;
    } else {
        boolean isValid = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(storagePoolId)).getReturnValue()).booleanValue();
        if (isValid) {
            if (!VmTemplateCommand.IsVmPriorityValueLegal(vmPriority, reasons)) {
                returnValue = false;
            } else if (checkVmTemplateImages) {
                returnValue = VmTemplateCommand.isVmTemplateImagesReady((Guid) vmTemplateId, storageDomainId, reasons, true, checkTemplateLock, true, true);
            }
        } else {
            if (reasons != null) {
                reasons.add(VdcBllMessages.IMAGE_REPOSITORY_NOT_FOUND.toString());
            }
            returnValue = false;
        }
    }
    return returnValue;
}
#method_after
public static boolean VerifyAddVm(ArrayList<String> reasons, int vmsCount, VmTemplate vmTemplate, Guid storagePoolId, int vmPriority) {
    boolean returnValue = true;
    if (MacPoolManager.getInstance().getavailableMacsCount() < vmsCount) {
        if (reasons != null) {
            reasons.add(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString());
        }
        returnValue = false;
    } else {
        boolean isValid = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(storagePoolId)).getReturnValue()).booleanValue();
        if (isValid) {
            if (!VmTemplateCommand.IsVmPriorityValueLegal(vmPriority, reasons)) {
                returnValue = false;
            }
        } else if (reasons != null) {
            reasons.add(VdcBllMessages.IMAGE_REPOSITORY_NOT_FOUND.toString());
        }
    }
    return returnValue;
}
#end_block

#method_before
public static void unlockVm(final VmDynamic vm, final CompensationContext compensationContext) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            compensationContext.snapshotEntityStatus(vm, vm.getstatus());
            UnLockVm(vm.getId());
            compensationContext.stateChanged();
            return null;
        }
    });
}
#method_after
public static void unlockVm(final VmDynamic vm, final CompensationContext compensationContext) {
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            compensationContext.snapshotEntityStatus(vm, vm.getstatus());
            vm.setstatus(VMStatus.Down);
            UnLockVm(vm.getId());
            compensationContext.stateChanged();
            return null;
        }
    });
}
#end_block

#method_before
public static void UnLockVm(Guid vmId) {
    VM vm = DbFacade.getInstance().getVmDAO().getById(vmId);
    if (vm.getstatus() == VMStatus.ImageLocked) {
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new SetVmStatusVDSCommandParameters(vmId, VMStatus.Down));
    } else {
        log.errorFormat("Trying to unlock vm {0} in status {1} - not moving to down!", vm.getvm_name(), vm.getstatus());
    }
}
#method_after
public static void UnLockVm(Guid vmId) {
    VM vm = DbFacade.getInstance().getVmDAO().get(vmId);
    if (vm.getstatus() == VMStatus.ImageLocked) {
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new SetVmStatusVDSCommandParameters(vmId, VMStatus.Down));
    } else {
        log.errorFormat("Trying to unlock vm {0} in status {1} - not moving to down!", vm.getvm_name(), vm.getstatus());
    }
}
#end_block

#method_before
public static void updateDisksFromDb(VM vm) {
    List<DiskImage> imageList = DbFacade.getInstance().getDiskImageDAO().getAllForVm(vm.getvm_guid());
    for (DiskImage image : imageList) {
        if (image.getactive() != null && image.getactive()) {
            vm.getDiskMap().put(image.getinternal_drive_mapping(), image);
            vm.getDiskList().add(image);
        }
    }
}
#method_after
public static void updateDisksFromDb(VM vm) {
    List<Disk> imageList = DbFacade.getInstance().getDiskDao().getAllForVm(vm.getId());
    updateDisksForVm(vm, imageList);
}
#end_block

#method_before
private static String getAppName(final String part, final String appName) {
    if (StringUtils.contains(part, appName + "64")) {
        // to its name.
        return appName + "64";
    } else {
        return appName;
    }
}
#method_after
private static String getAppName(final String part, final String appName) {
    if (StringUtils.contains(part, appName + "64")) {
        // to its name.
        return appName + "64";
    }
    return appName;
}
#end_block

#method_before
public static boolean isMemorySizeLegal(VmOsType osType, int memSizeInMB, java.util.ArrayList<String> reasons, String clsuter_version) {
    boolean result = VmValidationUtils.isMemorySizeLegal(osType, memSizeInMB, clsuter_version);
    if (!result) {
        reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_MEMORY_SIZE.toString());
        reasons.add(String.format("$minMemorySize %s", VmValidationUtils.getMinMemorySizeInMb()));
        reasons.add(String.format("$maxMemorySize %s", VmValidationUtils.getMaxMemorySizeInMb(osType, clsuter_version)));
    }
    return result;
}
#method_after
public static boolean isMemorySizeLegal(VmOsType osType, int memSizeInMB, ArrayList<String> reasons, String clsuter_version) {
    boolean result = VmValidationUtils.isMemorySizeLegal(osType, memSizeInMB, clsuter_version);
    if (!result) {
        reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_MEMORY_SIZE.toString());
        reasons.add(String.format("$minMemorySize %s", VmValidationUtils.getMinMemorySizeInMb()));
        reasons.add(String.format("$maxMemorySize %s", VmValidationUtils.getMaxMemorySizeInMb(osType, clsuter_version)));
    }
    return result;
}
#end_block

#method_before
public static boolean IsNotDuplicateInterfaceName(List<VmNetworkInterface> interfaces, final String interfaceName, List<String> messages) {
    // Interface iface = interfaces.FirstOrDefault(i => i.name ==
    // AddVmInterfaceParameters.Interface.name);
    VmNetworkInterface iface = LinqUtils.firstOrNull(interfaces, new Predicate<VmNetworkInterface>() {

        @Override
        public boolean eval(VmNetworkInterface i) {
            return i.getName().equals(interfaceName);
        }
    });
    if (iface != null) {
        messages.add(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREAY_IN_USE.name());
        return false;
    }
    return true;
}
#method_after
public static boolean IsNotDuplicateInterfaceName(List<VmNetworkInterface> interfaces, final String interfaceName, List<String> messages) {
    // Interface iface = interfaces.FirstOrDefault(i => i.name ==
    // AddVmInterfaceParameters.Interface.name);
    VmNetworkInterface iface = LinqUtils.firstOrNull(interfaces, new Predicate<VmNetworkInterface>() {

        @Override
        public boolean eval(VmNetworkInterface i) {
            return i.getName().equals(interfaceName);
        }
    });
    if (iface != null) {
        messages.add(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE.name());
        return false;
    }
    return true;
}
#end_block

#method_before
public void RemoveAsyncRunningVm(Guid vmId) {
    _asyncRunningVms.remove(vmId);
    getEventListener().RemoveAsyncRunningCommand(vmId);
}
#method_after
public void RemoveAsyncRunningVm(Guid vmId) {
    _asyncRunningVms.remove(vmId);
    getEventListener().removeAsyncRunningCommand(vmId);
}
#end_block

#method_before
public void SuccededToRunVm(Guid vmId, Guid vdsId) {
    IVdsEventListener listener = _asyncRunningVms.get(vmId);
    if (listener != null) {
        listener.RunningSucceded(vmId);
    }
    RemoveAsyncRunningVm(vmId);
}
#method_after
public void SuccededToRunVm(Guid vmId, Guid vdsId) {
    IVdsEventListener listener = _asyncRunningVms.get(vmId);
    if (listener != null) {
        listener.runningSucceded(vmId);
    }
    RemoveAsyncRunningVm(vmId);
}
#end_block

#method_before
public void RerunFailedCommand(Guid vmId, Guid vdsId) {
    IVdsEventListener listener = _asyncRunningVms.remove(vmId);
    // remove async record from broker only
    if (listener != null) {
        listener.Rerun(vmId);
    }
}
#method_after
public void RerunFailedCommand(Guid vmId, Guid vdsId) {
    IVdsEventListener listener = _asyncRunningVms.remove(vmId);
    // remove async record from broker only
    if (listener != null) {
        listener.rerun(vmId);
    }
}
#end_block

#method_before
public void RemoveVmFromDownVms(Guid vdsId, Guid vmId) {
    java.util.HashSet<Guid> vms = null;
    if ((vms = _vdsAndVmsList.get(vdsId)) != null) {
        vms.remove(vmId);
    }
}
#method_after
public void RemoveVmFromDownVms(Guid vdsId, Guid vmId) {
    HashSet<Guid> vms = null;
    if ((vms = _vdsAndVmsList.get(vdsId)) != null) {
        vms.remove(vmId);
    }
}
#end_block

#method_before
public void HandleVdsFinishedInit(Guid vdsId) {
    java.util.HashSet<Guid> vms = null;
    if ((vms = _vdsAndVmsList.get(vdsId)) != null) {
        for (Guid vmId : vms) {
            getEventListener().ProcessOnVmStop(vmId);
            log.info("Procceed on vm stop entered: " + vmId.toString());
        }
        _vdsAndVmsList.remove(vdsId);
    }
}
#method_after
public void HandleVdsFinishedInit(Guid vdsId) {
    HashSet<Guid> vms = null;
    if ((vms = _vdsAndVmsList.get(vdsId)) != null) {
        for (Guid vmId : vms) {
            getEventListener().processOnVmStop(vmId);
            log.info("Procceed on vm stop entered: " + vmId.toString());
        }
        _vdsAndVmsList.remove(vdsId);
    }
}
#end_block

#method_before
public void AddVds(VDS vds, boolean isInternal) {
    VdsManager vdsManager = VdsManager.buildVdsManager(vds);
    if (isInternal) {
        VDSStatus status = vds.getstatus();
        switch(vds.getstatus()) {
            case Error:
                status = VDSStatus.Up;
                break;
            case Reboot:
            case NonResponsive:
            case Problematic:
            case Installing:
                status = VDSStatus.Unassigned;
                break;
        }
        if (status != vds.getstatus()) {
            vdsManager.setStatus(status, vds);
            vdsManager.UpdateStatisticsData(vds.getStatisticsData());
        }
        // set pending to 0
        vds.setpending_vcpus_count(0);
        vdsManager.UpdateDynamicData(vds.getDynamicData());
    }
    _vdsManagersDict.put(vds.getvds_id(), vdsManager);
    log.infoFormat("ResourceManager::AddVds - VDS {0} was added to the Resource Manager", vds.getvds_id());
}
#method_after
public void AddVds(VDS vds, boolean isInternal) {
    VdsManager vdsManager = VdsManager.buildVdsManager(vds);
    if (isInternal) {
        VDSStatus status = vds.getstatus();
        switch(vds.getstatus()) {
            case Error:
                status = VDSStatus.Up;
                break;
            case Reboot:
            case NonResponsive:
            case Problematic:
            case Installing:
                status = VDSStatus.Unassigned;
                break;
        }
        if (status != vds.getstatus()) {
            vdsManager.setStatus(status, vds);
            vdsManager.UpdateStatisticsData(vds.getStatisticsData());
        }
        // set pending to 0
        vds.setpending_vcpus_count(0);
        vdsManager.UpdateDynamicData(vds.getDynamicData());
    }
    _vdsManagersDict.put(vds.getId(), vdsManager);
    log.infoFormat("ResourceManager::AddVds - VDS {0} was added to the Resource Manager", vds.getId());
}
#end_block

#method_before
public void SetVmUnknown(VM vm) {
    RemoveAsyncRunningVm(vm.getvm_guid());
    InternalSetVmStatus(vm, VMStatus.Unknown);
    // log VM transition to unknown status
    AuditLogableBase logable = new AuditLogableBase();
    logable.setVmId(vm.getvm_guid());
    AuditLogDirector.log(logable, AuditLogType.VM_SET_TO_UNKNOWN_STATUS);
    storeVm(vm);
}
#method_after
public void SetVmUnknown(VM vm) {
    RemoveAsyncRunningVm(vm.getId());
    InternalSetVmStatus(vm, VMStatus.Unknown);
    // log VM transition to unknown status
    AuditLogableBase logable = new AuditLogableBase();
    logable.setVmId(vm.getId());
    AuditLogDirector.log(logable, AuditLogType.VM_SET_TO_UNKNOWN_STATUS);
    storeVm(vm);
}
#end_block

#method_before
public void SetVmDown(VM vm) {
    RemoveAsyncRunningVm(vm.getvm_guid());
    InternalSetVmStatus(vm, VMStatus.Down);
    storeVm(vm);
}
#method_after
public void SetVmDown(VM vm) {
    RemoveAsyncRunningVm(vm.getId());
    InternalSetVmStatus(vm, VMStatus.Down);
    storeVm(vm);
}
#end_block

#method_before
private void resetVmAttributes(VM vm) {
    vm.setusage_network_percent(0);
    vm.setelapsed_time(Double.valueOf(0));
    vm.setcpu_sys(new Double(0));
    vm.setcpu_user(new Double(0));
    vm.setusage_cpu_percent(0);
    vm.setusage_mem_percent(0);
    vm.setmigrating_to_vds(null);
    vm.setrun_on_vds_name("");
    vm.setguest_cur_user_name(null);
    vm.setguest_cur_user_id(null);
    vm.setConsoleUserName(null);
    vm.setConsoleUserId(null);
    vm.setguest_os(null);
    vm.setvm_ip(null);
    List<VmNetworkInterface> interfaces = vm.getInterfaces();
    for (VmNetworkInterface ifc : interfaces) {
        NetworkStatistics statistics = ifc.getStatistics();
        statistics.setTransmitDropRate(new Double(0));
        statistics.setTransmitRate(new Double(0));
        statistics.setReceiveRate(new Double(0));
        statistics.setReceiveDropRate(new Double(0));
    }
}
#method_after
private void resetVmAttributes(VM vm) {
    vm.setusage_network_percent(0);
    vm.setelapsed_time(Double.valueOf(0));
    vm.setcpu_sys(new Double(0));
    vm.setcpu_user(new Double(0));
    vm.setusage_cpu_percent(0);
    vm.setusage_mem_percent(0);
    vm.setmigrating_to_vds(null);
    vm.setrun_on_vds_name("");
    vm.setguest_cur_user_name(null);
    vm.setguest_cur_user_id(null);
    vm.setConsoleUserId(null);
    vm.setguest_os(null);
    vm.setvm_ip(null);
    List<VmNetworkInterface> interfaces = vm.getInterfaces();
    for (VmNetworkInterface ifc : interfaces) {
        NetworkStatistics statistics = ifc.getStatistics();
        statistics.setTransmitDropRate(new Double(0));
        statistics.setTransmitRate(new Double(0));
        statistics.setReceiveRate(new Double(0));
        statistics.setReceiveDropRate(new Double(0));
    }
}
#end_block

#method_before
public void UpdateVdsDomainsData(Guid vdsId, String vdsName, Guid storagePoolId, java.util.ArrayList<VDSDomainsData> vdsDomainData) {
    IrsBrokerCommand.UpdateVdsDomainsData(vdsId, vdsName, storagePoolId, vdsDomainData);
}
#method_after
public void UpdateVdsDomainsData(Guid vdsId, String vdsName, Guid storagePoolId, ArrayList<VDSDomainsData> vdsDomainData) {
    IrsBrokerCommand.UpdateVdsDomainsData(vdsId, vdsName, storagePoolId, vdsDomainData);
}
#end_block

#method_before
public static void Init() {
    mUpdateVmTemplate = new ObjectIdentityChecker(VmTemplateHandler.class);
    BlankVmTemplateId = new Guid("00000000-0000-0000-0000-000000000000");
    mUpdateVmTemplate.AddPermittedFields(new String[] { "name", "description", "domain", "os", "osType", "is_auto_suspend", "interfaces", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "num_of_cpus", "vds_group_id", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "time_zone", "diskMap", "default_boot_sequence", "iso_path", "diskImageMap", "default_display_type", "priority", "auto_startup", "is_stateless", "initrd_url", "kernel_url", "kernel_params" });
}
#method_after
public static void Init() {
    mUpdateVmTemplate = new ObjectIdentityChecker(VmTemplateHandler.class);
    BlankVmTemplateId = new Guid("00000000-0000-0000-0000-000000000000");
    mUpdateVmTemplate.AddPermittedFields(new String[] { "name", "description", "domain", "os", "osType", "is_auto_suspend", "interfaces", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "num_of_cpus", "vds_group_id", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "time_zone", "diskMap", "default_boot_sequence", "iso_path", "diskImageMap", "default_display_type", "priority", "auto_startup", "is_stateless", "initrd_url", "kernel_url", "kernel_params", "images", "interfaces", "quotaId", "quotaName" });
}
#end_block

#method_before
public static void UpdateDisksFromDb(VmTemplate vmt) {
    vmt.getDiskMap().clear();
    vmt.getDiskImageMap().clear();
    vmt.getDiskList().clear();
    List<DiskImageTemplate> diskList = DbFacade.getInstance().getDiskImageTemplateDAO().getAllByVmTemplate(vmt.getId());
    for (DiskImageTemplate dit : diskList) {
        vmt.getDiskMap().put(dit.getinternal_drive_mapping(), dit);
        // Translation from number of sectors to GB.
        vmt.setSizeGB(Double.valueOf(dit.getsize()) / Double.valueOf((1024 * 1024 * 1024)));
        DiskImage image = DbFacade.getInstance().getDiskImageDAO().getSnapshotById(dit.getId());
        if (image != null) {
            vmt.getDiskImageMap().put(dit.getinternal_drive_mapping(), image);
            vmt.getDiskList().add(image);
        }
    }
}
#method_after
public static void UpdateDisksFromDb(VmTemplate vmt) {
    vmt.getDiskMap().clear();
    vmt.getDiskImageMap().clear();
    vmt.getDiskList().clear();
    List<Disk> diskList = DbFacade.getInstance().getDiskDao().getAllForVm(vmt.getId());
    for (Disk dit : diskList) {
        DiskImage diskImage = (DiskImage) dit;
        vmt.getDiskMap().put(dit.getinternal_drive_mapping(), diskImage);
        // Translation from number of sectors to GB.
        vmt.setSizeGB(Double.valueOf(dit.getsize()) / Double.valueOf((1024 * 1024 * 1024)));
        vmt.getDiskImageMap().put(dit.getinternal_drive_mapping(), diskImage);
        vmt.getDiskList().add(diskImage);
    }
}
#end_block

#method_before
@Override
public VM get(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_guid", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeRead("GetVmByVmGuid", mapper, parameterSource);
}
#method_after
@Override
public VM get(Guid id) {
    return get(id, null, false);
}
#end_block

#method_before
@Override
public VM get(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_guid", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeRead("GetVmByVmGuid", mapper, parameterSource);
}
#method_after
@Override
public VM get(Guid id, Guid userID, boolean isFiltered) {
    return getCallsHandler().executeRead("GetVmByVmGuid", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vm_guid", id).addValue("user_id", userID).addValue("is_filtered", isFiltered));
}
#end_block

#method_before
@Override
public VM getForHibernationImage(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("image_id", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeRead("GetVmByHibernationImageId", mapper, parameterSource);
}
#method_after
@Override
public VM getForHibernationImage(Guid id) {
    return getCallsHandler().executeRead("GetVmByHibernationImageId", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("image_id", id));
}
#end_block

#method_before
@Override
public VM getForImage(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("image_guid", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeRead("GetVmByImageId", mapper, parameterSource);
}
#method_after
@Override
public Map<Boolean, List<VM>> getForImage(Guid id) {
    Map<Boolean, List<VM>> result = new HashMap<Boolean, List<VM>>();
    List<VMWithPlugInfo> vms = getCallsHandler().executeReadList("GetVmsByImageId", VMWithPlugInfoRowMapper.instance, getCustomMapSqlParameterSource().addValue("image_guid", id));
    for (VMWithPlugInfo vm : vms) {
        MultiValueMapUtils.addToMap(vm.isPlugged(), vm.getVM(), result);
    }
    return result;
}
#end_block

#method_before
@Override
public VM getForImageGroup(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("image_group_id", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeRead("GetVmByImageGroupId", mapper, parameterSource);
}
#method_after
@Override
public VM getForImageGroup(Guid id) {
    return getCallsHandler().executeRead("GetVmByImageGroupId", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("image_group_id", id));
}
#end_block

#method_before
@Override
public List<VM> getAllForUser(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", id);
    return getCallsHandler().executeReadList("GetVmsByUserId", new VMRowMapper(), parameterSource);
}
#method_after
@Override
public List<VM> getAllForUser(Guid id) {
    return getCallsHandler().executeReadList("GetVmsByUserId", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", id));
}
#end_block

#method_before
@Override
public List<VM> getAllForUserWithGroupsAndUserRoles(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", id);
    return getCallsHandler().executeReadList("GetVmsByUserIdWithGroupsAndUserRoles", new VMRowMapper(), parameterSource);
}
#method_after
@Override
public List<VM> getAllForUserWithGroupsAndUserRoles(Guid id) {
    return getCallsHandler().executeReadList("GetVmsByUserIdWithGroupsAndUserRoles", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", id));
}
#end_block

#method_before
@Override
public List<VM> getAllForAdGroupByName(String name) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_group_names", name);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetVmsByAdGroupNames", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAllForAdGroupByName(String name) {
    return getCallsHandler().executeReadList("GetVmsByAdGroupNames", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("ad_group_names", name));
}
#end_block

#method_before
@Override
public List<VM> getAllWithTemplate(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vmt_guid", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetVmsByVmtGuid", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAllWithTemplate(Guid id) {
    return getCallsHandler().executeReadList("GetVmsByVmtGuid", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_guid", id));
}
#end_block

#method_before
@Override
public List<VM> getAllRunningForVds(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetVmsRunningOnVds", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAllRunningForVds(Guid id) {
    return getCallsHandler().executeReadList("GetVmsRunningOnVds", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_id", id));
}
#end_block

#method_before
@Override
public List<VM> getAllForDedicatedPowerClientByVds(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("dedicated_vm_for_vds", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetVmsDedicatedToPowerClientByVdsId", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAllForDedicatedPowerClientByVds(Guid id) {
    return getCallsHandler().executeReadList("GetVmsDedicatedToPowerClientByVdsId", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("dedicated_vm_for_vds", id));
}
#end_block

#method_before
@Override
public Map<Guid, VM> getAllRunningByVds(Guid id) {
    HashMap<Guid, VM> map = new HashMap<Guid, VM>();
    List<VM> vms = getAllRunningForVds(id);
    for (VM vm : vms) {
        map.put(vm.getvm_guid(), vm);
    }
    return map;
}
#method_after
@Override
public Map<Guid, VM> getAllRunningByVds(Guid id) {
    HashMap<Guid, VM> map = new HashMap<Guid, VM>();
    for (VM vm : getAllRunningForVds(id)) {
        map.put(vm.getId(), vm);
    }
    return map;
}
#end_block

#method_before
@Override
public List<VM> getAllUsingQuery(String query) {
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return new SimpleJdbcTemplate(jdbcTemplate).query(query, mapper);
}
#method_after
@Override
public List<VM> getAllUsingQuery(String query) {
    return new SimpleJdbcTemplate(jdbcTemplate).query(query, VMRowMapper.instance);
}
#end_block

#method_before
@Override
public List<VM> getAllForStorageDomain(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetVmsByStorageDomainId", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAllForStorageDomain(Guid id) {
    return getCallsHandler().executeReadList("GetVmsByStorageDomainId", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", id));
}
#end_block

#method_before
@Override
public List<VM> getAllRunningForStorageDomain(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", id);
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetRunningVmsByStorageDomainId", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAllRunningForStorageDomain(Guid id) {
    return getCallsHandler().executeReadList("GetRunningVmsByStorageDomainId", VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", id));
}
#end_block

#method_before
@Override
public List<VM> getAll() {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource();
    ParameterizedRowMapper<VM> mapper = new VMRowMapper();
    return getCallsHandler().executeReadList("GetAllFromVms", mapper, parameterSource);
}
#method_after
@Override
public List<VM> getAll() {
    return getCallsHandler().executeReadList("GetAllFromVms", VMRowMapper.instance, getCustomMapSqlParameterSource());
}
#end_block

#method_before
@Override
public void save(VM vm) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", vm.getdescription()).addValue("mem_size_mb", vm.getmem_size_mb()).addValue("os", vm.getos()).addValue("vds_group_id", vm.getvds_group_id()).addValue("vm_guid", vm.getvm_guid()).addValue("vm_name", vm.getvm_name()).addValue("vmt_guid", vm.getvmt_guid()).addValue("num_of_monitors", vm.getnum_of_monitors()).addValue("is_initialized", vm.getis_initialized()).addValue("is_auto_suspend", vm.getis_auto_suspend()).addValue("num_of_sockets", vm.getnum_of_sockets()).addValue("cpu_per_socket", vm.getcpu_per_socket()).addValue("usb_policy", vm.getusb_policy()).addValue("time_zone", vm.gettime_zone()).addValue("auto_startup", vm.getauto_startup()).addValue("is_stateless", vm.getis_stateless()).addValue("dedicated_vm_for_vds", vm.getdedicated_vm_for_vds()).addValue("fail_back", vm.getfail_back()).addValue("vm_type", vm.getvm_type()).addValue("hypervisor_type", vm.gethypervisor_type()).addValue("operation_mode", vm.getoperation_mode()).addValue("nice_level", vm.getnice_level()).addValue("default_boot_sequence", vm.getdefault_boot_sequence()).addValue("default_display_type", vm.getdefault_display_type()).addValue("priority", vm.getpriority()).addValue("iso_path", vm.getiso_path()).addValue("origin", vm.getorigin()).addValue("initrd_url", vm.getinitrd_url()).addValue("kernel_url", vm.getkernel_url()).addValue("kernel_params", vm.getkernel_params()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect());
    getCallsHandler().executeModification("InsertVm", parameterSource);
}
#method_after
@Override
public void save(VM vm) {
    getCallsHandler().executeModification("InsertVm", getCustomMapSqlParameterSource().addValue("description", vm.getdescription()).addValue("mem_size_mb", vm.getmem_size_mb()).addValue("os", vm.getos()).addValue("vds_group_id", vm.getvds_group_id()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getvm_name()).addValue("vmt_guid", vm.getvmt_guid()).addValue("num_of_monitors", vm.getnum_of_monitors()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect()).addValue("is_initialized", vm.getis_initialized()).addValue("is_auto_suspend", vm.getis_auto_suspend()).addValue("num_of_sockets", vm.getnum_of_sockets()).addValue("cpu_per_socket", vm.getcpu_per_socket()).addValue("usb_policy", vm.getusb_policy()).addValue("time_zone", vm.gettime_zone()).addValue("auto_startup", vm.getauto_startup()).addValue("is_stateless", vm.getis_stateless()).addValue("dedicated_vm_for_vds", vm.getdedicated_vm_for_vds()).addValue("fail_back", vm.getfail_back()).addValue("vm_type", vm.getvm_type()).addValue("hypervisor_type", vm.gethypervisor_type()).addValue("operation_mode", vm.getoperation_mode()).addValue("nice_level", vm.getnice_level()).addValue("default_boot_sequence", vm.getdefault_boot_sequence()).addValue("default_display_type", vm.getdefault_display_type()).addValue("priority", vm.getpriority()).addValue("iso_path", vm.getiso_path()).addValue("origin", vm.getorigin()).addValue("initrd_url", vm.getinitrd_url()).addValue("kernel_url", vm.getkernel_url()).addValue("kernel_params", vm.getkernel_params()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()));
}
#end_block

#method_before
@Override
public void remove(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_guid", id);
    getCallsHandler().executeModification("DeleteVm", parameterSource);
}
#method_after
@Override
public void remove(Guid id) {
    getCallsHandler().executeModification("DeleteVm", getCustomMapSqlParameterSource().addValue("vm_guid", id));
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setvm_guid(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setvm_name(rs.getString("vm_name"));
    entity.setvm_mem_size_mb(rs.getInt("vm_mem_size_mb"));
    entity.setvmt_guid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setvm_os(VmOsType.forValue(rs.getInt("vm_os")));
    entity.setvm_description(rs.getString("vm_description"));
    entity.setvds_group_id(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setvm_domain(rs.getString("vm_domain"));
    entity.setvm_creation_date(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setvds_group_name(rs.getString("vds_group_name"));
    entity.setvds_group_description(rs.getString("vds_group_description"));
    entity.setvmt_name(rs.getString("vmt_name"));
    entity.setvmt_mem_size_mb(rs.getInt("vmt_mem_size_mb"));
    entity.setvmt_os(VmOsType.forValue(rs.getInt("vmt_os")));
    entity.setvmt_creation_date(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setvmt_child_count(rs.getInt("vmt_child_count"));
    entity.setvmt_num_of_cpus(rs.getInt("vmt_num_of_cpus"));
    entity.setvmt_num_of_sockets(rs.getInt("vmt_num_of_sockets"));
    entity.setvmt_cpu_per_socket(rs.getInt("vmt_cpu_per_socket"));
    entity.setvmt_description(rs.getString("vmt_description"));
    entity.setstatus(VMStatus.forValue(rs.getInt("status")));
    entity.setvm_ip(rs.getString("vm_ip"));
    entity.setvm_host(rs.getString("vm_host"));
    entity.setvm_pid((Integer) rs.getObject("vm_pid"));
    entity.setvm_last_up_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_up_time")));
    entity.setvm_last_boot_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_boot_time")));
    entity.setguest_cur_user_name(rs.getString("guest_cur_user_name"));
    entity.setConsoleUserName(rs.getString("console_user_name"));
    entity.setguest_last_login_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setguest_cur_user_id(NGuid.createGuidFromString(rs.getString("guest_cur_user_id")));
    entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
    entity.setguest_last_logout_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setguest_os(rs.getString("guest_os"));
    entity.setcpu_user(rs.getDouble("cpu_user"));
    entity.setcpu_sys(rs.getDouble("cpu_sys"));
    entity.setelapsed_time(rs.getDouble("elapsed_time"));
    entity.setusage_network_percent((Integer) rs.getObject("usage_network_percent"));
    entity.setusage_mem_percent((Integer) rs.getObject("usage_mem_percent"));
    entity.setusage_cpu_percent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setrun_on_vds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
    entity.setmigrating_to_vds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
    entity.setapp_list(rs.getString("app_list"));
    entity.setdisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(NGuid.createGuidFromString(rs.getString("vm_pool_id")));
    entity.setnum_of_monitors(rs.getInt("num_of_monitors"));
    entity.setis_initialized(rs.getBoolean("is_initialized"));
    entity.setis_auto_suspend(rs.getBoolean("is_auto_suspend"));
    // entity.setnum_of_cpus(rs.getInt("num_of_cpus"));
    entity.setnum_of_sockets(rs.getInt("num_of_sockets"));
    entity.setcpu_per_socket(rs.getInt("cpu_per_socket"));
    entity.setusb_policy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setacpi_enable((Boolean) rs.getObject("acpi_enable"));
    entity.setsession(SessionState.forValue(rs.getInt("session")));
    entity.setdisplay_ip(rs.getString("display_ip"));
    entity.setdisplay_type(DisplayType.forValue(rs.getInt("display_type")));
    entity.setkvm_enable((Boolean) rs.getObject("kvm_enable"));
    entity.setboot_sequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setrun_on_vds_name(rs.getString("run_on_vds_name"));
    entity.settime_zone(rs.getString("time_zone"));
    entity.setdisplay_secure_port((Integer) rs.getObject("display_secure_port"));
    entity.setutc_diff((Integer) rs.getObject("utc_diff"));
    entity.setauto_startup(rs.getBoolean("auto_startup"));
    entity.setis_stateless(rs.getBoolean("is_stateless"));
    entity.setdedicated_vm_for_vds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setfail_back(rs.getBoolean("fail_back"));
    entity.setlast_vds_run_on(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
    entity.setclient_ip(rs.getString("client_ip"));
    entity.setguest_requested_memory((Integer) rs.getObject("guest_requested_memory"));
    entity.setvds_group_cpu_name(rs.getString("vds_group_cpu_name"));
    entity.setvm_type(VmType.forValue(rs.getInt("vm_type")));
    entity.setstorage_pool_id(Guid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setstorage_pool_name(rs.getString("storage_pool_name"));
    entity.sethypervisor_type(HypervisorType.forValue(rs.getInt("hypervisor_type")));
    entity.setoperation_mode(OperationMode.forValue(rs.getInt("operation_mode")));
    entity.setselection_algorithm(VdsSelectionAlgorithm.forValue(rs.getInt("selection_algorithm")));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setnice_level(rs.getInt("nice_level"));
    entity.sethibernation_vol_handle(rs.getString("hibernation_vol_handle"));
    entity.setdefault_boot_sequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setdefault_display_type(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setpriority(rs.getInt("priority"));
    entity.setiso_path(rs.getString("iso_path"));
    entity.setorigin(OriginType.forValue(rs.getInt("origin")));
    entity.setinitrd_url(rs.getString("initrd_url"));
    entity.setkernel_url(rs.getString("kernel_url"));
    entity.setkernel_params(rs.getString("kernel_params"));
    entity.setvds_group_compatibility_version(new Version(rs.getString("vds_group_compatibility_version")));
    VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
    VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(exitStatus);
    entity.setVmPauseStatus(pauseStatus);
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setvm_name(rs.getString("vm_name"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setvm_mem_size_mb(rs.getInt("vm_mem_size_mb"));
    entity.setvmt_guid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setvm_os(VmOsType.forValue(rs.getInt("vm_os")));
    entity.setvm_description(rs.getString("vm_description"));
    entity.setvds_group_id(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setvm_domain(rs.getString("vm_domain"));
    entity.setvm_creation_date(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setvds_group_name(rs.getString("vds_group_name"));
    entity.setvds_group_description(rs.getString("vds_group_description"));
    entity.setvmt_name(rs.getString("vmt_name"));
    entity.setvmt_mem_size_mb(rs.getInt("vmt_mem_size_mb"));
    entity.setvmt_os(VmOsType.forValue(rs.getInt("vmt_os")));
    entity.setvmt_creation_date(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setvmt_child_count(rs.getInt("vmt_child_count"));
    entity.setvmt_num_of_cpus(rs.getInt("vmt_num_of_cpus"));
    entity.setvmt_num_of_sockets(rs.getInt("vmt_num_of_sockets"));
    entity.setvmt_cpu_per_socket(rs.getInt("vmt_cpu_per_socket"));
    entity.setvmt_description(rs.getString("vmt_description"));
    entity.setstatus(VMStatus.forValue(rs.getInt("status")));
    entity.setvm_ip(rs.getString("vm_ip"));
    entity.setvm_host(rs.getString("vm_host"));
    entity.setvm_pid((Integer) rs.getObject("vm_pid"));
    entity.setvm_last_up_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_up_time")));
    entity.setvm_last_boot_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_boot_time")));
    entity.setguest_cur_user_name(rs.getString("guest_cur_user_name"));
    entity.setguest_last_login_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setguest_cur_user_id(NGuid.createGuidFromString(rs.getString("guest_cur_user_id")));
    entity.setguest_last_logout_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
    entity.setguest_os(rs.getString("guest_os"));
    entity.setcpu_user(rs.getDouble("cpu_user"));
    entity.setcpu_sys(rs.getDouble("cpu_sys"));
    entity.setelapsed_time(rs.getDouble("elapsed_time"));
    entity.setusage_network_percent((Integer) rs.getObject("usage_network_percent"));
    entity.setusage_mem_percent((Integer) rs.getObject("usage_mem_percent"));
    entity.setusage_cpu_percent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setrun_on_vds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
    entity.setmigrating_to_vds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
    entity.setapp_list(rs.getString("app_list"));
    entity.setdisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(NGuid.createGuidFromString(rs.getString("vm_pool_id")));
    entity.setnum_of_monitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setis_initialized(rs.getBoolean("is_initialized"));
    entity.setis_auto_suspend(rs.getBoolean("is_auto_suspend"));
    entity.setnum_of_sockets(rs.getInt("num_of_sockets"));
    entity.setcpu_per_socket(rs.getInt("cpu_per_socket"));
    entity.setusb_policy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setacpi_enable((Boolean) rs.getObject("acpi_enable"));
    entity.setsession(SessionState.forValue(rs.getInt("session")));
    entity.setdisplay_ip(rs.getString("display_ip"));
    entity.setdisplay_type(DisplayType.forValue(rs.getInt("display_type")));
    entity.setkvm_enable((Boolean) rs.getObject("kvm_enable"));
    entity.setboot_sequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setrun_on_vds_name(rs.getString("run_on_vds_name"));
    entity.settime_zone(rs.getString("time_zone"));
    entity.setdisplay_secure_port((Integer) rs.getObject("display_secure_port"));
    entity.setutc_diff((Integer) rs.getObject("utc_diff"));
    entity.setauto_startup(rs.getBoolean("auto_startup"));
    entity.setis_stateless(rs.getBoolean("is_stateless"));
    entity.setdedicated_vm_for_vds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setfail_back(rs.getBoolean("fail_back"));
    entity.setlast_vds_run_on(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
    entity.setclient_ip(rs.getString("client_ip"));
    entity.setguest_requested_memory((Integer) rs.getObject("guest_requested_memory"));
    entity.setvds_group_cpu_name(rs.getString("vds_group_cpu_name"));
    entity.setvm_type(VmType.forValue(rs.getInt("vm_type")));
    entity.setstorage_pool_id(Guid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setstorage_pool_name(rs.getString("storage_pool_name"));
    entity.sethypervisor_type(HypervisorType.forValue(rs.getInt("hypervisor_type")));
    entity.setoperation_mode(OperationMode.forValue(rs.getInt("operation_mode")));
    entity.setselection_algorithm(VdsSelectionAlgorithm.forValue(rs.getInt("selection_algorithm")));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setnice_level(rs.getInt("nice_level"));
    entity.sethibernation_vol_handle(rs.getString("hibernation_vol_handle"));
    entity.setdefault_boot_sequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setdefault_display_type(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setpriority(rs.getInt("priority"));
    entity.setiso_path(rs.getString("iso_path"));
    entity.setorigin(OriginType.forValue(rs.getInt("origin")));
    entity.setinitrd_url(rs.getString("initrd_url"));
    entity.setkernel_url(rs.getString("kernel_url"));
    entity.setkernel_params(rs.getString("kernel_params"));
    entity.setvds_group_compatibility_version(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    return entity;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // Load the description of the virtual machine from the database:
    final Guid vmId = getVmId();
    final VM vm = DbFacade.getInstance().getVmDAO().getById(vmId);
    // Check that the virtual machine exists:
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    // Check that the virtual machine is in state that allows connections
    // to the console:
    final VMStatus status = vm.getstatus();
    if (status != VMStatus.Up && status != VMStatus.Paused && status != VMStatus.PoweringUp && status != VMStatus.PoweringDown && status != VMStatus.RebootInProgress) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL);
        return false;
    }
    // the console to any user:
    if (vm.getAllowConsoleReconnect()) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TICKET);
        return true;
    }
    // to the console, regardless of the previously connected user:
    if (checkUserAuthorization(ActionGroup.RECONNECT_TO_VM, MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, VdcObjectType.System)) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TICKET);
        return true;
    }
    // For normal users, with no special privileges, only the first user that connected to
    // the console is allowed to reconnect:
    final String currentName = getCurrentUser().getUserName();
    final NGuid currentId = getCurrentUser().getUserId();
    final String previousName = vm.getConsoleUserName();
    final NGuid previousId = vm.getConsoleUserId();
    if (previousId != null && !previousId.equals(currentId)) {
        log.warnFormat("User \"{0}\" is trying to set a ticket for virtual machine \"{1}\" but the machine is already in use by \"{2}\".", currentName, vm.getvm_name(), previousName);
        log.warnFormat("The id of user \"{0}\" is \"{1}\".", currentName, currentId);
        log.warnFormat("The id of user \"{0}\" is \"{1}\".", previousName, previousId);
        log.warnFormat("The id of virtual machine \"{0}\" is \"{1}\".", vm.getvm_name(), vmId);
        log.warnFormat("The ticket will not be set.");
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER);
        return false;
    }
    // Try to save the new user to the database and proceed only if the previous user in
    // the database is null (this is needed to prevent races between different users trying
    // to access the console of the same virtual machine simultaneously):
    vm.setConsoleUserName(currentName);
    vm.setConsoleUserId(currentId);
    final boolean saved = DbFacade.getInstance().getVmDynamicDAO().saveFirstConsoleUser(vmId, currentId, currentName);
    if (!saved) {
        log.warnFormat("Failed to set console user to \"{0}\" for virtual machine \"{1}\".", currentName, vm.getvm_name());
        log.warnFormat("This probably means that two users are trying to connect to the console simultaneously.");
        log.warnFormat("The id of user \"{0}\" is \"{1}\".", currentName, currentId);
        log.warnFormat("The id of virtual machine \"{0}\" is \"{1}\".", vm.getvm_name(), vmId);
        log.warnFormat("The ticket will not be set.");
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER);
        return false;
    }
    // If we are here then the connection should be granted:
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TICKET);
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    // Check that the virtual machine exists:
    final VM vm = getVm();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    // Check that the virtual machine is in state that allows connections
    // to the console:
    final VMStatus status = vm.getstatus();
    if (status != VMStatus.Up && status != VMStatus.Paused && status != VMStatus.PoweringUp && status != VMStatus.PoweringDown && status != VMStatus.RebootInProgress) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL);
        return false;
    }
    // Check that the user can connect to the console:
    return canConnectToConsole();
}
#end_block

#method_before
@Override
protected void Perform() {
    // Generate the ticket if needed:
    if (StringHelper.isNullOrEmpty(mTicket)) {
        mTicket = Ticketing.GenerateOTP();
    }
    // Send the ticket to the virtual machine:
    setSucceeded(Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new SetVmTicketVDSCommandParameters(getVdsId(), getVmId(), mTicket, mValidTime)).getSucceeded());
    // Return the ticket:
    setActionReturnValue(mTicket);
}
#method_after
@Override
protected void Perform() {
    // a ticket):
    if (StringHelper.isNullOrEmpty(mTicket)) {
        mTicket = Ticketing.GenerateOTP();
    }
    // Update the dynamic information of the virtual machine in memory (we need it
    // to update the database later):
    // Check that the virtual machine exists:
    final VM vm = getVm();
    final IVdcUser user = getCurrentUser();
    vm.setConsoleUserId(user.getUserId());
    // If the virtual machine has the allow reconnect then we just have to save
    // the user name and the user id to the database, regardless of what was there
    // before and without locking.
    // 
    // In any other situation we try to save the new user to the database and proceed
    // only if the previous user in the database is null. This is needed to prevent
    // races between different users trying to access the console of the same virtual
    // machine simultaneously.
    final VmDynamicDAO dao = DbFacade.getInstance().getVmDynamicDAO();
    if (vm.getAllowConsoleReconnect()) {
        dao.update(vm.getDynamicData());
        sendTicket();
    } else {
        final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData());
        if (saved) {
            sendTicket();
        } else {
            dontSendTicket();
        }
    }
}
#end_block

#method_before
@Override
public void save(VmStatic vm) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", vm.getdescription()).addValue("mem_size_mb", vm.getmem_size_mb()).addValue("os", vm.getos()).addValue("vds_group_id", vm.getvds_group_id()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getvm_name()).addValue("vmt_guid", vm.getvmt_guid()).addValue("domain", vm.getdomain()).addValue("creation_date", vm.getcreation_date()).addValue("num_of_monitors", vm.getnum_of_monitors()).addValue("is_initialized", vm.getis_initialized()).addValue("is_auto_suspend", vm.getis_auto_suspend()).addValue("num_of_sockets", vm.getnum_of_sockets()).addValue("cpu_per_socket", vm.getcpu_per_socket()).addValue("usb_policy", vm.getusb_policy()).addValue("time_zone", vm.gettime_zone()).addValue("auto_startup", vm.getauto_startup()).addValue("is_stateless", vm.getis_stateless()).addValue("dedicated_vm_for_vds", vm.getdedicated_vm_for_vds()).addValue("fail_back", vm.getfail_back()).addValue("vm_type", vm.getvm_type()).addValue("hypervisor_type", vm.gethypervisor_type()).addValue("operation_mode", vm.getoperation_mode()).addValue("nice_level", vm.getnice_level()).addValue("default_boot_sequence", vm.getdefault_boot_sequence()).addValue("default_display_type", vm.getdefault_display_type()).addValue("priority", vm.getpriority()).addValue("iso_path", vm.getiso_path()).addValue("origin", vm.getorigin()).addValue("initrd_url", vm.getinitrd_url()).addValue("kernel_url", vm.getkernel_url()).addValue("kernel_params", vm.getkernel_params()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect());
    getCallsHandler().executeModification("InsertVmStatic", parameterSource);
}
#method_after
@Override
public void save(VmStatic vm) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", vm.getdescription()).addValue("mem_size_mb", vm.getmem_size_mb()).addValue("os", vm.getos()).addValue("vds_group_id", vm.getvds_group_id()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getvm_name()).addValue("vmt_guid", vm.getvmt_guid()).addValue("domain", vm.getdomain()).addValue("creation_date", vm.getcreation_date()).addValue("num_of_monitors", vm.getnum_of_monitors()).addValue("is_initialized", vm.getis_initialized()).addValue("is_auto_suspend", vm.getis_auto_suspend()).addValue("num_of_sockets", vm.getnum_of_sockets()).addValue("cpu_per_socket", vm.getcpu_per_socket()).addValue("usb_policy", vm.getusb_policy()).addValue("time_zone", vm.gettime_zone()).addValue("auto_startup", vm.getauto_startup()).addValue("is_stateless", vm.getis_stateless()).addValue("dedicated_vm_for_vds", vm.getdedicated_vm_for_vds()).addValue("fail_back", vm.getfail_back()).addValue("vm_type", vm.getvm_type()).addValue("hypervisor_type", vm.gethypervisor_type()).addValue("operation_mode", vm.getoperation_mode()).addValue("nice_level", vm.getnice_level()).addValue("default_boot_sequence", vm.getdefault_boot_sequence()).addValue("default_display_type", vm.getdefault_display_type()).addValue("priority", vm.getpriority()).addValue("iso_path", vm.getiso_path()).addValue("origin", vm.getorigin()).addValue("initrd_url", vm.getinitrd_url()).addValue("kernel_url", vm.getkernel_url()).addValue("kernel_params", vm.getkernel_params()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect());
    getCallsHandler().executeModification("InsertVmStatic", parameterSource);
}
#end_block

#method_before
@Override
public void update(VmStatic vm) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", vm.getdescription()).addValue("mem_size_mb", vm.getmem_size_mb()).addValue("os", vm.getos()).addValue("vds_group_id", vm.getvds_group_id()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getvm_name()).addValue("vmt_guid", vm.getvmt_guid()).addValue("domain", vm.getdomain()).addValue("creation_date", vm.getcreation_date()).addValue("num_of_monitors", vm.getnum_of_monitors()).addValue("is_initialized", vm.getis_initialized()).addValue("is_auto_suspend", vm.getis_auto_suspend()).addValue("num_of_sockets", vm.getnum_of_sockets()).addValue("cpu_per_socket", vm.getcpu_per_socket()).addValue("usb_policy", vm.getusb_policy()).addValue("time_zone", vm.gettime_zone()).addValue("auto_startup", vm.getauto_startup()).addValue("is_stateless", vm.getis_stateless()).addValue("dedicated_vm_for_vds", vm.getdedicated_vm_for_vds()).addValue("fail_back", vm.getfail_back()).addValue("vm_type", vm.getvm_type()).addValue("hypervisor_type", vm.gethypervisor_type()).addValue("operation_mode", vm.getoperation_mode()).addValue("nice_level", vm.getnice_level()).addValue("default_boot_sequence", vm.getdefault_boot_sequence()).addValue("default_display_type", vm.getdefault_display_type()).addValue("priority", vm.getpriority()).addValue("iso_path", vm.getiso_path()).addValue("origin", vm.getorigin()).addValue("initrd_url", vm.getinitrd_url()).addValue("kernel_url", vm.getkernel_url()).addValue("kernel_params", vm.getkernel_params()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect());
    getCallsHandler().executeModification("UpdateVmStatic", parameterSource);
}
#method_after
@Override
public void update(VmStatic vm) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", vm.getdescription()).addValue("mem_size_mb", vm.getmem_size_mb()).addValue("os", vm.getos()).addValue("vds_group_id", vm.getvds_group_id()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getvm_name()).addValue("vmt_guid", vm.getvmt_guid()).addValue("domain", vm.getdomain()).addValue("creation_date", vm.getcreation_date()).addValue("num_of_monitors", vm.getnum_of_monitors()).addValue("is_initialized", vm.getis_initialized()).addValue("is_auto_suspend", vm.getis_auto_suspend()).addValue("num_of_sockets", vm.getnum_of_sockets()).addValue("cpu_per_socket", vm.getcpu_per_socket()).addValue("usb_policy", vm.getusb_policy()).addValue("time_zone", vm.gettime_zone()).addValue("auto_startup", vm.getauto_startup()).addValue("is_stateless", vm.getis_stateless()).addValue("dedicated_vm_for_vds", vm.getdedicated_vm_for_vds()).addValue("fail_back", vm.getfail_back()).addValue("vm_type", vm.getvm_type()).addValue("hypervisor_type", vm.gethypervisor_type()).addValue("operation_mode", vm.getoperation_mode()).addValue("nice_level", vm.getnice_level()).addValue("default_boot_sequence", vm.getdefault_boot_sequence()).addValue("default_display_type", vm.getdefault_display_type()).addValue("priority", vm.getpriority()).addValue("iso_path", vm.getiso_path()).addValue("origin", vm.getorigin()).addValue("initrd_url", vm.getinitrd_url()).addValue("kernel_url", vm.getkernel_url()).addValue("kernel_params", vm.getkernel_params()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("quota_id", vm.getQuotaId()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect());
    getCallsHandler().executeModification("UpdateVmStatic", parameterSource);
}
#end_block

#method_before
@Override
public VmTemplate get(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vmt_guid", id);
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", mapper, parameterSource);
}
#method_after
@Override
public VmTemplate get(Guid id) {
    return get(id, null, false);
}
#end_block

#method_before
@Override
public VmTemplate get(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vmt_guid", id);
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", mapper, parameterSource);
}
#method_after
@Override
public VmTemplate get(Guid id, Guid userID, boolean isFiltered) {
    return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_guid", id).addValue("user_id", userID).addValue("is_filtered", isFiltered));
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<VmTemplate> getAll() {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource();
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeReadList("GetAllFromVmTemplates", mapper, parameterSource);
}
#method_after
@Override
public List<VmTemplate> getAll() {
    return getCallsHandler().executeReadList("GetAllFromVmTemplates", VMTemplateRowMapper.instance, getCustomMapSqlParameterSource());
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<VmTemplate> getAllForStorageDomain(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", id);
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeReadList("GetVmTemplatesByStorageDomainId", mapper, parameterSource);
}
#method_after
@Override
public List<VmTemplate> getAllForStorageDomain(Guid storageDomain) {
    return getAllForStorageDomain(storageDomain, null, false);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<VmTemplate> getAllForStorageDomain(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", id);
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeReadList("GetVmTemplatesByStorageDomainId", mapper, parameterSource);
}
#method_after
@Override
public List<VmTemplate> getAllForStorageDomain(Guid storageDomain, Guid userID, boolean isFiltered) {
    return getCallsHandler().executeReadList("GetVmTemplatesByStorageDomainId", VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomain).addValue("user_id", userID).addValue("is_filtered", isFiltered));
}
#end_block

#method_before
@Override
public List<VmTemplate> getAllWithQuery(String query) {
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return new SimpleJdbcTemplate(jdbcTemplate).query(query, mapper);
}
#method_after
@Override
public List<VmTemplate> getAllWithQuery(String query) {
    return new SimpleJdbcTemplate(jdbcTemplate).query(query, VMTemplateRowMapper.instance);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<VmTemplate> getAllForVdsGroup(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_id", id);
    ParameterizedRowMapper<VmTemplate> mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeReadList("GetVmTemplateByVdsGroupId", mapper, parameterSource);
}
#method_after
@Override
public List<VmTemplate> getAllForVdsGroup(Guid id) {
    return getCallsHandler().executeReadList("GetVmTemplateByVdsGroupId", VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_id", id));
}
#end_block

#method_before
@Override
public void save(VmTemplate template) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("child_count", template.getchild_count()).addValue("creation_date", template.getcreation_date()).addValue("description", template.getdescription()).addValue("mem_size_mb", template.getmem_size_mb()).addValue("name", template.getname()).addValue("num_of_sockets", template.getnum_of_sockets()).addValue("cpu_per_socket", template.getcpu_per_socket()).addValue("os", template.getos()).addValue("vmt_guid", template.getId()).addValue("vds_group_id", template.getvds_group_id()).addValue("domain", template.getdomain()).addValue("num_of_monitors", template.getnum_of_monitors()).addValue("allow_console_reconnect", template.getAllowConsoleReconnect()).addValue("status", template.getstatus()).addValue("usb_policy", template.getusb_policy()).addValue("time_zone", template.gettime_zone()).addValue("fail_back", template.getfail_back()).addValue("is_auto_suspend", template.getis_auto_suspend()).addValue("vm_type", template.getvm_type()).addValue("hypervisor_type", template.gethypervisor_type()).addValue("operation_mode", template.getoperation_mode()).addValue("nice_level", template.getnice_level()).addValue("default_boot_sequence", template.getdefault_boot_sequence()).addValue("default_display_type", template.getdefault_display_type()).addValue("priority", template.getpriority()).addValue("auto_startup", template.getauto_startup()).addValue("is_stateless", template.getis_stateless()).addValue("iso_path", template.getiso_path()).addValue("origin", template.getorigin()).addValue("initrd_url", template.getinitrd_url()).addValue("kernel_url", template.getkernel_url()).addValue("kernel_params", template.getkernel_params());
    getCallsHandler().executeModification("InsertVmTemplate", parameterSource);
}
#method_after
@Override
public void save(VmTemplate template) {
    getCallsHandler().executeModification("InsertVmTemplate", getInsertOrUpdateParameters(template));
}
#end_block

#method_before
@Override
public void update(VmTemplate template) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("child_count", template.getchild_count()).addValue("creation_date", template.getcreation_date()).addValue("description", template.getdescription()).addValue("mem_size_mb", template.getmem_size_mb()).addValue("name", template.getname()).addValue("num_of_sockets", template.getnum_of_sockets()).addValue("cpu_per_socket", template.getcpu_per_socket()).addValue("os", template.getos()).addValue("vmt_guid", template.getId()).addValue("vds_group_id", template.getvds_group_id()).addValue("domain", template.getdomain()).addValue("num_of_monitors", template.getnum_of_monitors()).addValue("allow_console_reconnect", template.getAllowConsoleReconnect()).addValue("status", template.getstatus()).addValue("usb_policy", template.getusb_policy()).addValue("time_zone", template.gettime_zone()).addValue("fail_back", template.getfail_back()).addValue("is_auto_suspend", template.getis_auto_suspend()).addValue("vm_type", template.getvm_type()).addValue("hypervisor_type", template.gethypervisor_type()).addValue("operation_mode", template.getoperation_mode()).addValue("nice_level", template.getnice_level()).addValue("default_boot_sequence", template.getdefault_boot_sequence()).addValue("default_display_type", template.getdefault_display_type()).addValue("priority", template.getpriority()).addValue("auto_startup", template.getauto_startup()).addValue("is_stateless", template.getis_stateless()).addValue("iso_path", template.getiso_path()).addValue("origin", template.getorigin()).addValue("initrd_url", template.getinitrd_url()).addValue("kernel_url", template.getkernel_url()).addValue("kernel_params", template.getkernel_params());
    getCallsHandler().executeModification("UpdateVmTemplate", parameterSource);
}
#method_after
@Override
public void update(VmTemplate template) {
    getCallsHandler().executeModification("UpdateVmTemplate", getInsertOrUpdateParameters(template));
}
#end_block

#method_before
@Override
public void updateStatus(Guid id, VmTemplateStatus status) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vmt_guid", id).addValue("status", status);
    getCallsHandler().executeModification("UpdateVmTemplateStatus", parameterSource);
}
#method_after
@Override
public void updateStatus(Guid id, VmTemplateStatus status) {
    getCallsHandler().executeModification("UpdateVmTemplateStatus", getCustomMapSqlParameterSource().addValue("vmt_guid", id).addValue("status", status));
}
#end_block

#method_before
@Override
public void remove(Guid id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vmt_guid", id);
    getCallsHandler().executeModification("DeleteVmTemplates", parameterSource);
}
#method_after
@Override
public void remove(Guid id) {
    getCallsHandler().executeModification("DeleteVmTemplates", getCustomMapSqlParameterSource().addValue("vmt_guid", id));
}
#end_block

#method_before
@Override
public List<VmTemplate> getTemplatesWithPermittedAction(Guid userId, ActionGroup actionGroup) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId());
    VMTemplateRowMapper mapper = new VMTemplateRowMapper();
    return getCallsHandler().executeReadList("fn_perms_get_templates_with_permitted_action", mapper, parameterSource);
}
#method_after
@Override
public List<VmTemplate> getTemplatesWithPermittedAction(Guid userId, ActionGroup actionGroup) {
    return getCallsHandler().executeReadList("fn_perms_get_templates_with_permitted_action", VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId()));
}
#end_block

#method_before
@Override
protected MapSqlParameterSource createFullParametersMapper(VmDynamic vm) {
    return createIdParameterMapper(vm.getId()).addValue("app_list", vm.getapp_list()).addValue("guest_cur_user_id", vm.getguest_cur_user_id()).addValue("guest_cur_user_name", vm.getguest_cur_user_name()).addValue("console_user_id", vm.getConsoleUserId()).addValue("console_user_name", vm.getConsoleUserName()).addValue("guest_last_login_time", vm.getguest_last_login_time()).addValue("guest_last_logout_time", vm.getguest_last_logout_time()).addValue("guest_os", vm.getguest_os()).addValue("migrating_to_vds", vm.getmigrating_to_vds()).addValue("run_on_vds", vm.getrun_on_vds()).addValue("status", vm.getstatus()).addValue("vm_host", vm.getvm_host()).addValue("vm_ip", vm.getvm_ip()).addValue("vm_last_boot_time", vm.getvm_last_boot_time()).addValue("vm_last_up_time", vm.getvm_last_up_time()).addValue("vm_pid", vm.getvm_pid()).addValue("display", vm.getdisplay()).addValue("acpi_enable", vm.getacpi_enable()).addValue("session", vm.getsession()).addValue("display_ip", vm.getdisplay_ip()).addValue("display_type", vm.getdisplay_type()).addValue("kvm_enable", vm.getkvm_enable()).addValue("boot_sequence", vm.getboot_sequence()).addValue("display_secure_port", vm.getdisplay_secure_port()).addValue("utc_diff", vm.getutc_diff()).addValue("last_vds_run_on", vm.getlast_vds_run_on()).addValue("client_ip", vm.getclient_ip()).addValue("guest_requested_memory", vm.getguest_requested_memory()).addValue("hibernation_vol_handle", vm.gethibernation_vol_handle()).addValue("exit_status", vm.getExitStatus().getValue()).addValue("pause_status", vm.getPauseStatus().getValue()).addValue("exit_message", vm.getExitMessage());
}
#method_after
@Override
protected MapSqlParameterSource createFullParametersMapper(VmDynamic vm) {
    return createIdParameterMapper(vm.getId()).addValue("app_list", vm.getapp_list()).addValue("guest_cur_user_id", vm.getguest_cur_user_id()).addValue("guest_cur_user_name", vm.getguest_cur_user_name()).addValue("console_user_id", vm.getConsoleUserId()).addValue("guest_last_login_time", vm.getguest_last_login_time()).addValue("guest_last_logout_time", vm.getguest_last_logout_time()).addValue("guest_os", vm.getguest_os()).addValue("migrating_to_vds", vm.getmigrating_to_vds()).addValue("run_on_vds", vm.getrun_on_vds()).addValue("status", vm.getstatus()).addValue("vm_host", vm.getvm_host()).addValue("vm_ip", vm.getvm_ip()).addValue("vm_last_boot_time", vm.getvm_last_boot_time()).addValue("vm_last_up_time", vm.getvm_last_up_time()).addValue("vm_pid", vm.getvm_pid()).addValue("display", vm.getdisplay()).addValue("acpi_enable", vm.getacpi_enable()).addValue("session", vm.getsession()).addValue("display_ip", vm.getdisplay_ip()).addValue("display_type", vm.getdisplay_type()).addValue("kvm_enable", vm.getkvm_enable()).addValue("boot_sequence", vm.getboot_sequence()).addValue("display_secure_port", vm.getdisplay_secure_port()).addValue("utc_diff", vm.getutc_diff()).addValue("last_vds_run_on", vm.getlast_vds_run_on()).addValue("client_ip", vm.getclient_ip()).addValue("guest_requested_memory", vm.getguest_requested_memory()).addValue("hibernation_vol_handle", vm.gethibernation_vol_handle()).addValue("exit_status", vm.getExitStatus().getValue()).addValue("pause_status", vm.getPauseStatus().getValue()).addValue("exit_message", vm.getExitMessage()).addValue("hash", vm.getHash());
}
#end_block

#method_before
@Override
protected ParameterizedRowMapper<VmDynamic> createEntityRowMapper() {
    return new ParameterizedRowMapper<VmDynamic>() {

        @Override
        public VmDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
            VmDynamic entity = new VmDynamic();
            entity.setapp_list(rs.getString("app_list"));
            entity.setguest_cur_user_id(NGuid.createGuidFromString(rs.getString("guest_cur_user_id")));
            entity.setguest_cur_user_name(rs.getString("guest_cur_user_name"));
            entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
            entity.setConsoleUserName(rs.getString("console_user_name"));
            entity.setguest_last_login_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
            entity.setguest_last_logout_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
            entity.setguest_os(rs.getString("guest_os"));
            entity.setmigrating_to_vds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
            entity.setrun_on_vds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
            entity.setstatus(VMStatus.forValue(rs.getInt("status")));
            entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
            entity.setvm_host(rs.getString("vm_host"));
            entity.setvm_ip(rs.getString("vm_ip"));
            entity.setvm_last_boot_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_boot_time")));
            entity.setvm_last_up_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_up_time")));
            entity.setvm_pid((Integer) rs.getObject("vm_pid"));
            entity.setdisplay((Integer) rs.getObject("display"));
            entity.setacpi_enable((Boolean) rs.getObject("acpi_enable"));
            entity.setsession(SessionState.forValue(rs.getInt("session")));
            entity.setdisplay_ip(rs.getString("display_ip"));
            entity.setdisplay_type(DisplayType.forValue(rs.getInt("display_type")));
            entity.setkvm_enable((Boolean) rs.getObject("kvm_enable"));
            entity.setboot_sequence(BootSequence.forValue(rs.getInt("boot_sequence")));
            entity.setdisplay_secure_port((Integer) rs.getObject("display_secure_port"));
            entity.setutc_diff((Integer) rs.getObject("utc_diff"));
            entity.setlast_vds_run_on(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
            entity.setclient_ip(rs.getString("client_ip"));
            entity.setguest_requested_memory((Integer) rs.getObject("guest_requested_memory"));
            entity.sethibernation_vol_handle(rs.getString("hibernation_vol_handle"));
            VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
            VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
            entity.setExitMessage(rs.getString("exit_message"));
            entity.setExitStatus(exitStatus);
            entity.setPauseStatus(pauseStatus);
            return entity;
        }
    };
}
#method_after
@Override
protected ParameterizedRowMapper<VmDynamic> createEntityRowMapper() {
    return new ParameterizedRowMapper<VmDynamic>() {

        @Override
        public VmDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
            VmDynamic entity = new VmDynamic();
            entity.setapp_list(rs.getString("app_list"));
            entity.setguest_cur_user_id(NGuid.createGuidFromString(rs.getString("guest_cur_user_id")));
            entity.setguest_cur_user_name(rs.getString("guest_cur_user_name"));
            entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
            entity.setguest_last_login_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
            entity.setguest_last_logout_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
            entity.setguest_os(rs.getString("guest_os"));
            entity.setmigrating_to_vds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
            entity.setrun_on_vds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
            entity.setstatus(VMStatus.forValue(rs.getInt("status")));
            entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
            entity.setvm_host(rs.getString("vm_host"));
            entity.setvm_ip(rs.getString("vm_ip"));
            entity.setvm_last_boot_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_boot_time")));
            entity.setvm_last_up_time(DbFacadeUtils.fromDate(rs.getTimestamp("vm_last_up_time")));
            entity.setvm_pid((Integer) rs.getObject("vm_pid"));
            entity.setdisplay((Integer) rs.getObject("display"));
            entity.setacpi_enable((Boolean) rs.getObject("acpi_enable"));
            entity.setsession(SessionState.forValue(rs.getInt("session")));
            entity.setdisplay_ip(rs.getString("display_ip"));
            entity.setdisplay_type(DisplayType.forValue(rs.getInt("display_type")));
            entity.setkvm_enable((Boolean) rs.getObject("kvm_enable"));
            entity.setboot_sequence(BootSequence.forValue(rs.getInt("boot_sequence")));
            entity.setdisplay_secure_port((Integer) rs.getObject("display_secure_port"));
            entity.setutc_diff((Integer) rs.getObject("utc_diff"));
            entity.setlast_vds_run_on(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
            entity.setclient_ip(rs.getString("client_ip"));
            entity.setguest_requested_memory((Integer) rs.getObject("guest_requested_memory"));
            entity.sethibernation_vol_handle(rs.getString("hibernation_vol_handle"));
            VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
            VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
            entity.setExitMessage(rs.getString("exit_message"));
            entity.setExitStatus(exitStatus);
            entity.setPauseStatus(pauseStatus);
            entity.setHash(rs.getString("hash"));
            return entity;
        }
    };
}
#end_block

#method_before
@Override
protected void Perform() {
    // Get a reference to the virtual machine:
    final VM vm = getVm();
    // Send the log on command to the virtual machine:
    final IVdcUser currentUser = getCurrentUser();
    final String domainController = currentUser != null ? currentUser.getDomainControler() : "";
    final String password = currentUser != null ? currentUser.getPassword() : "";
    setSucceeded(Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmLogon, new VmLogonVDSCommandParameters(getVdsId(), vm.getvm_guid(), domainController, getUserName(), password)).getSucceeded());
    // database to reflect that the user is logged on:
    if (getSucceeded() && currentUser != null) {
        vm.setguest_cur_user_name(currentUser.getUserName());
        vm.setguest_cur_user_id(currentUser.getUserId());
        DbFacade.getInstance().getVmDynamicDAO().update(vm.getDynamicData());
    }
}
#method_after
@Override
protected void Perform() {
    // Get a reference to the virtual machine:
    final VM vm = getVm();
    // Send the log on command to the virtual machine:
    final IVdcUser currentUser = getCurrentUser();
    final String domainController = currentUser != null ? currentUser.getDomainControler() : "";
    final String password = currentUser != null ? currentUser.getPassword() : "";
    final boolean sentToVM = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmLogon, new VmLogonVDSCommandParameters(getVdsId(), vm.getId(), domainController, getUserName(), password)).getSucceeded();
    // database to reflect that the user is logged on:
    if (sentToVM && currentUser != null) {
        vm.setguest_cur_user_name(currentUser.getUserName());
        vm.setguest_cur_user_id(currentUser.getUserId());
        DbFacade.getInstance().getVmDynamicDAO().update(vm.getDynamicData());
    }
    // Done:
    setSucceeded(sentToVM);
}
#end_block

#method_before
private void InitRunVmCommand() {
    RunVmParams runVmParameters = getParameters();
    if (!StringHelper.isNullOrEmpty(runVmParameters.getDiskPath())) {
        _cdImagePath = ImagesHandler.cdPathWindowsToLinux(runVmParameters.getDiskPath(), getVm().getstorage_pool_id());
    }
    if (!StringHelper.isNullOrEmpty(runVmParameters.getFloppyPath())) {
        _floppyImagePath = ImagesHandler.cdPathWindowsToLinux(runVmParameters.getFloppyPath(), getVm().getstorage_pool_id());
    }
    if (getVm() != null) {
        Guid destVdsId = (getDestinationVds() != null) ? (Guid) getDestinationVds().getvds_id() : null;
        setVdsSelector(new VdsSelector(getVm(), destVdsId, true));
        refreshBootParameters(runVmParameters);
    }
}
#method_after
private void InitRunVmCommand() {
    RunVmParams runVmParameters = getParameters();
    if (!StringHelper.isNullOrEmpty(runVmParameters.getDiskPath())) {
        _cdImagePath = ImagesHandler.cdPathWindowsToLinux(runVmParameters.getDiskPath(), getVm().getstorage_pool_id());
    }
    if (!StringHelper.isNullOrEmpty(runVmParameters.getFloppyPath())) {
        _floppyImagePath = ImagesHandler.cdPathWindowsToLinux(runVmParameters.getFloppyPath(), getVm().getstorage_pool_id());
    }
    if (getVm() != null) {
        Guid destVdsId = (getDestinationVds() != null) ? (Guid) getDestinationVds().getId() : null;
        setVdsSelector(new VdsSelector(getVm(), destVdsId, true));
        refreshBootParameters(runVmParameters);
    }
}
#end_block

#method_before
private void ResumeVm() {
    mResume = true;
    // Vds = ResourceManager.Instance.getVds(Vm.run_on_vds.Value);
    setVdsId(new Guid(getVm().getrun_on_vds().toString()));
    if (getVds() != null) {
        try {
            IncrementVdsPendingVmsCount();
            VDSReturnValue result = Backend.getInstance().getResourceManager().RunAsyncVdsCommand(VDSCommandType.Resume, new ResumeVDSCommandParameters(getVdsId(), getVm().getvm_guid()), this);
            setActionReturnValue(result.getReturnValue());
            setSucceeded(result.getSucceeded());
        } finally {
            DecrementVdsPendingVmsCount();
        }
    } else {
        setActionReturnValue(getVm().getstatus());
    }
}
#method_after
private void ResumeVm() {
    mResume = true;
    // Vds = ResourceManager.Instance.getVds(Vm.run_on_vds.Value);
    setVdsId(new Guid(getVm().getrun_on_vds().toString()));
    if (getVds() != null) {
        try {
            IncrementVdsPendingVmsCount();
            VDSReturnValue result = Backend.getInstance().getResourceManager().RunAsyncVdsCommand(VDSCommandType.Resume, new ResumeVDSCommandParameters(getVdsId(), getVm().getId()), this);
            setActionReturnValue(result.getReturnValue());
            setSucceeded(result.getSucceeded());
            ExecutionHandler.setAsyncJob(getExecutionContext(), true);
        } finally {
            DecrementVdsPendingVmsCount();
        }
    } else {
        setActionReturnValue(getVm().getstatus());
    }
}
#end_block

#method_before
protected void RunVm() {
    setActionReturnValue(VMStatus.Down);
    if (GetVdsToRunOn()) {
        VMStatus status;
        try {
            IncrementVdsPendingVmsCount();
            AttachCd();
            status = CreateVm();
        } finally {
            DecrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (VM.isStatusUp(status) || status == VMStatus.RestoringState) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds
            // no need to log the command because it is being logged inside
            // the rerun
            log.infoFormat("Failed to run desktop {0}, rerun", getVm().getvm_name());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            Rerun();
        }
    } else {
        FailedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#method_after
protected void RunVm() {
    setActionReturnValue(VMStatus.Down);
    if (GetVdsToRunOn()) {
        VMStatus status = null;
        try {
            IncrementVdsPendingVmsCount();
            AttachCd();
            if (connectLunDisks(getVdsId())) {
                status = CreateVm();
                ExecutionHandler.setAsyncJob(getExecutionContext(), true);
            }
        } finally {
            DecrementVdsPendingVmsCount();
        }
        setActionReturnValue(status);
        if (VM.isStatusUp(status) || status == VMStatus.RestoringState) {
            setSucceeded(true);
        } else {
            // Try to rerun Vm on different vds
            // no need to log the command because it is being logged inside
            // the rerun
            log.infoFormat("Failed to run desktop {0}, rerun", getVm().getvm_name());
            setCommandShouldBeLogged(false);
            setSucceeded(true);
            Rerun();
        }
    } else {
        FailedToRunVm();
        setSucceeded(false);
        _isRerun = false;
    }
}
#end_block

#method_before
@Override
protected void ExecuteVmCommand() {
    setActionReturnValue(VMStatus.Down);
    if (InitVm()) {
        if (getVm().getstatus() == VMStatus.Paused) {
            // resume
            ResumeVm();
        } else {
            // run vm
            if (!_isRerun && Boolean.TRUE.equals(getParameters().getRunAsStateless()) && !getVm().getDiskList().isEmpty() && getVm().getstatus() != VMStatus.Suspended) {
                StatelessVmTreatment();
            } else if (!getParameters().getIsInternal() && !_isRerun && getVm().getstatus() != VMStatus.Suspended && DbFacade.getInstance().getDiskImageDAO().getAllStatelessVmImageMapsForVm(getVm().getvm_guid()).size() > 0) {
                removeVmStatlessImages();
            } else {
                RunVm();
            }
        }
    } else {
        setActionReturnValue(getVm().getstatus());
    }
}
#method_after
@Override
protected void ExecuteVmCommand() {
    setActionReturnValue(VMStatus.Down);
    if (InitVm()) {
        if (getVm().getstatus() == VMStatus.Paused) {
            // resume
            ResumeVm();
        } else {
            // run vm
            if (!_isRerun && Boolean.TRUE.equals(getParameters().getRunAsStateless()) && !getVm().getDiskList().isEmpty() && getVm().getstatus() != VMStatus.Suspended) {
                StatelessVmTreatment();
            } else if (!getParameters().getIsInternal() && !_isRerun && getVm().getstatus() != VMStatus.Suspended && statelessSnapshotExistsForVm()) {
                removeVmStatlessImages();
            } else {
                RunVm();
            }
        }
    } else {
        setActionReturnValue(getVm().getstatus());
    }
}
#end_block

#method_before
private void AttachCd() {
    Guid storagePoolId = getVm().getstorage_pool_id();
    boolean isIsoFound = (findActiveISODomain(storagePoolId) != null);
    if (isIsoFound) {
        if (StringHelper.isNullOrEmpty(getVm().getCdPath())) {
            getVm().setCdPath(getVm().getiso_path());
            GuestToolsVersionTreatment();
            // LINQ Vm.boot_sequence.toString().Contains(cd))
            refreshBootSequenceParameter(getParameters());
            if (getVm().getboot_sequence().toString().indexOf(cd) > -1) {
                getVm().setCdPath(getVm().getiso_path());
            }
            getVm().setCdPath(ImagesHandler.cdPathWindowsToLinux(getVm().getCdPath(), getVm().getstorage_pool_id()));
        }
    } else if (!StringHelper.isNullOrEmpty(getVm().getiso_path())) {
        getVm().setCdPath("");
        log.error("Can not attach CD without active ISO domain");
    }
}
#method_after
private void AttachCd() {
    Guid storagePoolId = getVm().getstorage_pool_id();
    boolean isIsoFound = (findActiveISODomain(storagePoolId) != null);
    if (isIsoFound) {
        if (StringHelper.isNullOrEmpty(getVm().getCdPath())) {
            getVm().setCdPath(getVm().getiso_path());
            GuestToolsVersionTreatment();
            refreshBootSequenceParameter(getParameters());
            if (getVm().getboot_sequence() == BootSequence.CD) {
                getVm().setCdPath(getVm().getiso_path());
            }
            getVm().setCdPath(ImagesHandler.cdPathWindowsToLinux(getVm().getCdPath(), getVm().getstorage_pool_id()));
        }
    } else if (!StringHelper.isNullOrEmpty(getVm().getiso_path())) {
        getVm().setCdPath("");
        log.error("Can not attach CD without active ISO domain");
    }
}
#end_block

#method_before
private void StatelessVmTreatment() {
    /**
     * if one of vm's images is in the DB dont do anything.
     */
    if (DbFacade.getInstance().getDiskImageDAO().getAllStatelessVmImageMapsForVm(getVm().getvm_guid()).size() == 0) {
        log.infoFormat("VdcBll.RunVmCommand.RunVmAsStateless - Creating snapshot for stateless vm {0} - {1}", getVm().getvm_name(), getVm().getvm_guid());
        lockVmWithCompensationIfNeeded();
        CreateAllSnapshotsFromVmParameters tempVar = new CreateAllSnapshotsFromVmParameters(getVm().getvm_guid(), "stateless snapshot");
        tempVar.setShouldBeLogged(false);
        tempVar.setParentCommand(VdcActionType.RunVm);
        tempVar.setEntityId(getParameters().getEntityId());
        CreateAllSnapshotsFromVmParameters p = tempVar;
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, p, getCompensationContext());
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            // RestoreAllSnapshots)
            for (DiskImage disk : getVm().getDiskMap().values()) {
                /**
                 * add new stateless vm image to db
                 */
                DbFacade.getInstance().getDiskImageDAO().addStatelessVmImageMap(new stateless_vm_image_map(disk.getId(), disk.getinternal_drive_mapping(), getVm().getvm_guid()));
            }
            getParameters().getImagesParameters().add(p);
            getReturnValue().getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the EndAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (vdcReturnValue.getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_IS_LOCKED)) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            } else {
                getReturnValue().setFault(vdcReturnValue.getFault());
            }
            log.errorFormat("RunVmAsStateless - {0} - failed to create snapshots", getVm().getvm_name());
        }
    } else {
        log.errorFormat("RunVmAsStateless - {0} - found existing vm images in stateless_vm_image_map table - skipped creating snapshots.", getVm().getvm_name());
        removeVmStatlessImages();
    }
}
#method_after
private void StatelessVmTreatment() {
    if (statelessSnapshotExistsForVm()) {
        log.errorFormat("RunVmAsStateless - {0} - found existing vm images in stateless_vm_image_map table - skipped creating snapshots.", getVm().getvm_name());
        removeVmStatlessImages();
    } else {
        log.infoFormat("VdcBll.RunVmCommand.RunVmAsStateless - Creating snapshot for stateless vm {0} - {1}", getVm().getvm_name(), getVm().getId());
        CreateAllSnapshotsFromVmParameters tempVar = new CreateAllSnapshotsFromVmParameters(getVm().getId(), "stateless snapshot");
        tempVar.setShouldBeLogged(false);
        tempVar.setParentCommand(VdcActionType.RunVm);
        tempVar.setEntityId(getParameters().getEntityId());
        CreateAllSnapshotsFromVmParameters p = tempVar;
        p.setSnapshotType(SnapshotType.STATELESS);
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.CreateAllSnapshotsFromVm, p, new CommandContext(getCompensationContext()));
        setSucceeded(vdcReturnValue.getSucceeded());
        if (vdcReturnValue.getSucceeded()) {
            getParameters().getImagesParameters().add(p);
            getReturnValue().getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            // save RunVmParams so we'll know how to run
            // the stateless VM in the EndAction part.
            VmHandler.updateDisksFromDb(getVm());
        } else {
            if (vdcReturnValue.getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_IS_LOCKED.name())) {
                throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
            }
            getReturnValue().setFault(vdcReturnValue.getFault());
            log.errorFormat("RunVmAsStateless - {0} - failed to create snapshots", getVm().getvm_name());
        }
    }
}
#end_block

#method_before
private void removeVmStatlessImages() {
    isFailedStatlessSnapshot = true;
    VmPoolHandler.removeVmStatelessImages(getVm().getvm_guid());
    setSucceeded(true);
}
#method_after
private void removeVmStatlessImages() {
    isFailedStatlessSnapshot = true;
    VmPoolHandler.removeVmStatelessImages(getVm().getId(), new CommandContext(getExecutionContext()));
    setSucceeded(true);
}
#end_block

#method_before
protected VMStatus CreateVm() {
    // reevaluate boot parameters if VM was executed with 'run once'
    refreshBootParameters(getParameters());
    // Set path for initrd and kernel image.
    if (!StringHelper.isNullOrEmpty(getVm().getinitrd_url())) {
        getVm().setinitrd_url(getIsoPrefixFilePath(getVm().getinitrd_url()));
    }
    if (!StringHelper.isNullOrEmpty(getVm().getkernel_url())) {
        getVm().setkernel_url(getIsoPrefixFilePath(getVm().getkernel_url()));
    }
    return (VMStatus) Backend.getInstance().getResourceManager().RunAsyncVdsCommand(VDSCommandType.CreateVm, initVdsCreateVmParams(), this).getReturnValue();
}
#method_after
protected VMStatus CreateVm() {
    // reevaluate boot parameters if VM was executed with 'run once'
    refreshBootParameters(getParameters());
    // Set path for initrd and kernel image.
    if (!StringHelper.isNullOrEmpty(getVm().getinitrd_url())) {
        getVm().setinitrd_url(getIsoPrefixFilePath(getVm().getinitrd_url()));
    }
    if (!StringHelper.isNullOrEmpty(getVm().getkernel_url())) {
        getVm().setkernel_url(getIsoPrefixFilePath(getVm().getkernel_url()));
    }
    VMStatus vmStatus = (VMStatus) Backend.getInstance().getResourceManager().RunAsyncVdsCommand(VDSCommandType.CreateVm, initVdsCreateVmParams(), this).getReturnValue();
    // After VM was create (or not), we can remove the quota vds group memory.
    removeQuotaCommandLeftOver();
    return vmStatus;
}
#end_block

#method_before
protected boolean InitVm() {
    if (getVm() == null) {
        log.warnFormat("ResourceManager::{0}::No such vm (where id = '{1}' )in database", getClass().getName(), getVmId().toString());
        throw new VdcBLLException(VdcBllErrors.DB_NO_SUCH_VM);
    }
    if ((getVm().getstatus() == VMStatus.ImageIllegal) || (getVm().getstatus() == VMStatus.ImageLocked)) {
        log.warnFormat("ResourceManager::{0}::vm '{1}' has {2}", getClass().getName(), getVmId().toString(), (getVm().getstatus() == VMStatus.ImageLocked ? "a locked image" : "an illegal image"));
        setActionReturnValue(getVm().getstatus());
        return false;
    } else {
        HandleMemoryAdjustments();
        VmHandler.updateDisksFromDb(getVm());
        getVm().setCdPath(_cdImagePath);
        getVm().setFloppyPath(_floppyImagePath);
        getVm().setkvm_enable(getParameters().getKvmEnable());
        getVm().setRunAndPause(getParameters().getRunAndPause());
        getVm().setacpi_enable(getParameters().getAcpiEnable());
        // Clear the first user:
        getVm().setConsoleUserName(null);
        getVm().setConsoleUserId(null);
        getParameters().setRunAsStateless(shouldVmRunAsStateless(getParameters(), getVm()));
        // once command
        if (getParameters().getUseVnc() != null) {
            getVm().setdisplay_type(getParameters().getUseVnc() ? DisplayType.vnc : DisplayType.qxl);
        } else {
            getVm().setdisplay_type(getVm().getdefault_display_type());
        }
        if (getParameters().getReinitialize()) {
            getVm().setUseSysPrep(true);
        }
        // if we attach floppy we don't need the sysprep
        if (!StringHelper.isNullOrEmpty(getVm().getFloppyPath())) {
            DbFacade.getInstance().getVmStaticDAO().update(getVm().getStaticData());
        }
        // get what cpu flags should be passed to vdsm according to cluster
        // cpu name
        getVm().setvds_group_cpu_flags_data(CpuFlagsManagerHandler.GetVDSVerbDataByCpuName(getVm().getvds_group_cpu_name(), getVm().getvds_group_compatibility_version()));
        return true;
    }
}
#method_after
protected boolean InitVm() {
    if (getVm() == null) {
        log.warnFormat("ResourceManager::{0}::No such vm (where id = '{1}' )in database", getClass().getName(), getVmId().toString());
        throw new VdcBLLException(VdcBllErrors.DB_NO_SUCH_VM);
    }
    if ((getVm().getstatus() == VMStatus.ImageIllegal) || (getVm().getstatus() == VMStatus.ImageLocked)) {
        log.warnFormat("ResourceManager::{0}::vm '{1}' has {2}", getClass().getName(), getVmId().toString(), (getVm().getstatus() == VMStatus.ImageLocked ? "a locked image" : "an illegal image"));
        setActionReturnValue(getVm().getstatus());
        return false;
    } else if (!getSnapshotsValidator().vmNotDuringSnapshot(getVmId()).isValid()) {
        log.warnFormat("ResourceManager::{0}::VM {1} is during snapshot", getClass().getName(), getVmId().toString());
        return false;
    } else {
        HandleMemoryAdjustments();
        VmHandler.updateDisksFromDb(getVm());
        getVm().setCdPath(_cdImagePath);
        getVm().setFloppyPath(_floppyImagePath);
        getVm().setkvm_enable(getParameters().getKvmEnable());
        getVm().setRunAndPause(getParameters().getRunAndPause());
        getVm().setacpi_enable(getParameters().getAcpiEnable());
        // Clear the first user:
        getVm().setConsoleUserId(null);
        getParameters().setRunAsStateless(shouldVmRunAsStateless(getParameters(), getVm()));
        // once command
        if (getParameters().getUseVnc() != null) {
            getVm().setdisplay_type(getParameters().getUseVnc() ? DisplayType.vnc : DisplayType.qxl);
        } else {
            getVm().setdisplay_type(getVm().getdefault_display_type());
        }
        if (getParameters().getReinitialize()) {
            getVm().setUseSysPrep(true);
        }
        // if we attach floppy we don't need the sysprep
        if (!StringHelper.isNullOrEmpty(getVm().getFloppyPath())) {
            DbFacade.getInstance().getVmStaticDAO().update(getVm().getStaticData());
        }
        // get what cpu flags should be passed to vdsm according to cluster
        // cpu name
        getVm().setvds_group_cpu_flags_data(CpuFlagsManagerHandler.GetVDSVerbDataByCpuName(getVm().getvds_group_cpu_name(), getVm().getvds_group_compatibility_version()));
        return true;
    }
}
#end_block

#method_before
private void GuestToolsVersionTreatment() {
    boolean attachCd = false;
    String selectedToolsVersion = "";
    String selectedToolsClusterVersion = "";
    VmHandler.UpdateVmGuestAgentVersion(getVm());
    storage_domains isoDomain = null;
    if (!getVm().getvm_os().isLinux() && (null != (isoDomain = LinqUtils.firstOrNull(DbFacade.getInstance().getStorageDomainDAO().getAllForStoragePool(getVm().getstorage_pool_id()), new Predicate<storage_domains>() {

        @Override
        public boolean eval(storage_domains domain) {
            return domain.getstorage_domain_type() == StorageDomainType.ISO;
        }
    })) && isoDomain.getstatus() == StorageDomainStatus.Active && StringHelper.isNullOrEmpty(_cdImagePath))) {
        // get cluster version of the vm tools
        Version vmToolsClusterVersion = null;
        if (getVm().getHasAgent()) {
            Version clusterVer = getVm().getPartialVersion();
            if (Version.OpEquality(clusterVer, new Version("4.4"))) {
                vmToolsClusterVersion = new Version("2.1");
            } else {
                vmToolsClusterVersion = clusterVer;
            }
        }
        // Fetch cached Iso files from active Iso domain.
        List<RepoFileMetaData> repoFilesMap = IsoDomainListSyncronizer.getInstance().getCachedIsoListByDomainId(isoDomain.getid(), FileTypeExtension.ISO);
        Version bestClusterVer = null;
        int bestToolVer = 0;
        for (RepoFileMetaData map : repoFilesMap) {
            String fileName = map.getRepoFileName() != null ? map.getRepoFileName() : "";
            Matcher matchToolPattern = Pattern.compile(IsoDomainListSyncronizer.regexToolPattern).matcher(fileName);
            if (matchToolPattern.find()) {
                // Get cluster version and tool version of Iso tool.
                // TODO: Should be group name string support in java7.
                Version clusterVer = new Version(matchToolPattern.group(1));
                int toolVersion = Integer.parseInt(matchToolPattern.group(3));
                if (clusterVer.compareTo(getVm().getvds_group_compatibility_version()) <= 0) {
                    if ((bestClusterVer == null) || (clusterVer.compareTo(bestClusterVer) > 0)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    } else if ((Version.OpEquality(clusterVer, bestClusterVer)) && (toolVersion > bestToolVer)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    }
                }
            }
        }
        if (bestClusterVer != null && (vmToolsClusterVersion == null || vmToolsClusterVersion.compareTo(bestClusterVer) < 0 || (Version.OpEquality(vmToolsClusterVersion, bestClusterVer) && getVm().getHasAgent() && getVm().getGuestAgentVersion().getBuild() < bestToolVer))) {
            // Vm has no tools or there are new tools
            selectedToolsVersion = (Integer.toString(bestToolVer));
            selectedToolsClusterVersion = bestClusterVer.toString();
            attachCd = true;
        }
    }
    if (attachCd) {
        // if minimalVdsRev isn't empty use new iso files name convention
        // string qumranetToolsPath = minimalVdsRev == string.Empty
        // ?
        // string.Format("{0}{1}.iso", GuestToolsSetupIsoPrefix, revision)
        // :
        // // format is RHEV-ToolsSetup_tools_ver_vds_min_ver
        // string.Format("{0}{1}_{2}.iso", GuestToolsSetupIsoPrefix,
        // revision,
        // minimalVdsRev);
        String qumranetToolsPath = String.format("%1$s%2$s_%3$s.iso", IsoDomainListSyncronizer.guestToolsSetupIsoPrefix, selectedToolsClusterVersion, selectedToolsVersion);
        String isoDir = (String) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsoDirectory, new IrsBaseVDSCommandParameters(getVm().getstorage_pool_id())).getReturnValue();
        qumranetToolsPath = Path.Combine(isoDir, qumranetToolsPath);
        getVm().setCdPath(ImagesHandler.cdPathWindowsToLinux(qumranetToolsPath, getVm().getstorage_pool_id()));
    }
}
#method_after
private void GuestToolsVersionTreatment() {
    boolean attachCd = false;
    String selectedToolsVersion = "";
    String selectedToolsClusterVersion = "";
    VmHandler.UpdateVmGuestAgentVersion(getVm());
    storage_domains isoDomain = null;
    if (!getVm().getvm_os().isLinux() && (null != (isoDomain = LinqUtils.firstOrNull(DbFacade.getInstance().getStorageDomainDAO().getAllForStoragePool(getVm().getstorage_pool_id()), new Predicate<storage_domains>() {

        @Override
        public boolean eval(storage_domains domain) {
            return domain.getstorage_domain_type() == StorageDomainType.ISO;
        }
    })) && isoDomain.getstatus() == StorageDomainStatus.Active && StringHelper.isNullOrEmpty(_cdImagePath))) {
        // get cluster version of the vm tools
        Version vmToolsClusterVersion = null;
        if (getVm().getHasAgent()) {
            Version clusterVer = getVm().getPartialVersion();
            if (Version.OpEquality(clusterVer, new Version("4.4"))) {
                vmToolsClusterVersion = new Version("2.1");
            } else {
                vmToolsClusterVersion = clusterVer;
            }
        }
        // Fetch cached Iso files from active Iso domain.
        List<RepoFileMetaData> repoFilesMap = IsoDomainListSyncronizer.getInstance().getCachedIsoListByDomainId(isoDomain.getId(), FileTypeExtension.ISO);
        Version bestClusterVer = null;
        int bestToolVer = 0;
        for (RepoFileMetaData map : repoFilesMap) {
            String fileName = map.getRepoFileName() != null ? map.getRepoFileName() : "";
            Matcher matchToolPattern = Pattern.compile(IsoDomainListSyncronizer.getRegexToolPattern()).matcher(fileName);
            if (matchToolPattern.find()) {
                // Get cluster version and tool version of Iso tool.
                // TODO: Should be group name string support in java7.
                Version clusterVer = new Version(matchToolPattern.group(1));
                int toolVersion = Integer.parseInt(matchToolPattern.group(3));
                if (clusterVer.compareTo(getVm().getvds_group_compatibility_version()) <= 0) {
                    if ((bestClusterVer == null) || (clusterVer.compareTo(bestClusterVer) > 0)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    } else if ((Version.OpEquality(clusterVer, bestClusterVer)) && (toolVersion > bestToolVer)) {
                        bestToolVer = toolVersion;
                        bestClusterVer = clusterVer;
                    }
                }
            }
        }
        if (bestClusterVer != null && (vmToolsClusterVersion == null || vmToolsClusterVersion.compareTo(bestClusterVer) < 0 || (Version.OpEquality(vmToolsClusterVersion, bestClusterVer) && getVm().getHasAgent() && getVm().getGuestAgentVersion().getBuild() < bestToolVer))) {
            // Vm has no tools or there are new tools
            selectedToolsVersion = (Integer.toString(bestToolVer));
            selectedToolsClusterVersion = bestClusterVer.toString();
            attachCd = true;
        }
    }
    if (attachCd) {
        // if minimalVdsRev isn't empty use new iso files name convention
        // string qumranetToolsPath = minimalVdsRev == string.Empty
        // ?
        // string.Format("{0}{1}.iso", GuestToolsSetupIsoPrefix, revision)
        // :
        // // format is RHEV-ToolsSetup_tools_ver_vds_min_ver
        // string.Format("{0}{1}_{2}.iso", GuestToolsSetupIsoPrefix,
        // revision,
        // minimalVdsRev);
        String qumranetToolsPath = String.format("%1$s%2$s_%3$s.iso", IsoDomainListSyncronizer.getGuestToolsSetupIsoPrefix(), selectedToolsClusterVersion, selectedToolsVersion);
        String isoDir = (String) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsoDirectory, new IrsBaseVDSCommandParameters(getVm().getstorage_pool_id())).getReturnValue();
        qumranetToolsPath = Path.Combine(isoDir, qumranetToolsPath);
        getVm().setCdPath(ImagesHandler.cdPathWindowsToLinux(qumranetToolsPath, getVm().getstorage_pool_id()));
    }
}
#end_block

#method_before
public static boolean CanRunVm(VM vm, java.util.ArrayList<String> message, RunVmParams runParams, VdsSelector vdsSelector) {
    boolean retValue = true;
    List<VmPropertiesUtils.ValidationError> validationErrors = null;
    if (vm == null) {
        retValue = false;
        if (message != null) {
            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString());
        }
    } else if (!(validationErrors = VmPropertiesUtils.validateVMProperties(vm.getStaticData())).isEmpty()) {
        handleCustomPropertiesError(validationErrors, message);
        retValue = false;
    } else {
        BootSequence boot_sequence = ((runParams.getBootSequence()) != null) ? runParams.getBootSequence() : vm.getdefault_boot_sequence();
        List<DiskImage> vmImages = DbFacade.getInstance().getDiskImageDAO().getAllForVm(vm.getvm_guid());
        Guid storagePoolId = vm.getstorage_pool_id();
        // and no other boot devices are configured
        if (vmImages.isEmpty() && StringHelper.EqOp(boot_sequence.toString(), BootSequence.C.toString())) {
            message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK.toString());
            retValue = false;
        } else {
            if ((findActiveISODomain(storagePoolId) == null) && boot_sequence.toString().length() > 0 && (boot_sequence.toString().charAt(0) == cd)) {
                message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
                retValue = false;
            } else // custom properties allowed only from cluster 2.3
            if (!StringHelper.isNullOrEmpty(vm.getStaticData().getCustomProperties()) && !Config.<Boolean>GetValue(ConfigValues.SupportCustomProperties, vm.getvds_group_compatibility_version().getValue())) {
                message.add(VdcBllMessages.CUSTOM_VM_PROPERTIES_INVALID_VALUES_NOT_ALLOWED_IN_CURRENT_CLUSTER.toString());
                retValue = false;
            } else {
                // otherwise the vm cannot be run in vdsm
                if (boot_sequence.toString().indexOf(NETWORK_BOOT_SEQUENCE_CHAR) > -1 && DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getvm_guid()).size() == 0) {
                    message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK.toString());
                    retValue = false;
                } else {
                    if (vmImages.size() > 0) {
                        Guid storageDomainId = vmImages.get(0).getstorage_id().getValue();
                        // if VM is not HA VM
                        if (!ImagesHandler.PerformImagesChecks(vm.getvm_guid(), message, vm.getstorage_pool_id(), storageDomainId, !vm.getauto_startup(), true, false, false, false, false, !vm.getauto_startup() && !storageDomainId.equals(Guid.Empty) || !runParams.getIsInternal() && vm.getauto_startup(), !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup())) {
                            retValue = false;
                        } else // Check if iso and floppy path exists
                        if (!vm.getauto_startup() && !validateIsoPath(findActiveISODomain(vm.getstorage_pool_id()), runParams, message)) {
                            retValue = false;
                        } else {
                            boolean isVmDuringInit = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsVmDuringInitiating, new IsVmDuringInitiatingVDSCommandParameters(vm.getvm_guid())).getReturnValue()).booleanValue();
                            if (vm.isStatusUp() || (vm.getstatus() == VMStatus.NotResponding) || isVmDuringInit) {
                                retValue = false;
                                if (message != null) {
                                    message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING.toString());
                                }
                            } else if (vm.getstatus() == VMStatus.Paused && vm.getrun_on_vds() != null) {
                                VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vm.getrun_on_vds().toString()));
                                if (vds.getstatus() != VDSStatus.Up) {
                                    retValue = false;
                                    if (message != null) {
                                        message.add(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL.toString());
                                    }
                                }
                            }
                            boolean isStatelessVm = shouldVmRunAsStateless(runParams, vm);
                            if (retValue && isStatelessVm && ImagesHandler.isVmInPreview(vmImages)) {
                                retValue = false;
                                message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_WHILE_IN_PREVIEW.toString());
                            }
                            // if the VM itself is stateless or run once as stateless
                            if (retValue && isStatelessVm && vm.getauto_startup()) {
                                retValue = false;
                                message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_HA.toString());
                            }
                            retValue = retValue == false ? retValue : vdsSelector.CanFindVdsToRunOn(message, false);
                            /**
                             * only if can do action ok then check with actions matrix that status is valid for this
                             * action
                             */
                            if (retValue && !VdcActionUtils.CanExecute(new java.util.ArrayList<IVdcQueryable>(java.util.Arrays.asList(new IVdcQueryable[] { vm })), VM.class, VdcActionType.RunVm)) {
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL.toString());
                                retValue = false;
                            }
                        }
                    }
                }
            }
        }
    }
    return retValue;
}
#method_after
public static boolean CanRunVm(VM vm, ArrayList<String> message, RunVmParams runParams, VdsSelector vdsSelector, SnapshotsValidator snapshotsValidator, VmPropertiesUtils vmPropsUtils) {
    boolean retValue = true;
    List<VmPropertiesUtils.ValidationError> validationErrors = null;
    if (vm == null) {
        retValue = false;
        if (message != null) {
            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString());
        }
    } else if (!(validationErrors = vmPropsUtils.validateVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData())).isEmpty()) {
        handleCustomPropertiesError(validationErrors, message);
        retValue = false;
    } else {
        BootSequence boot_sequence = ((runParams.getBootSequence()) != null) ? runParams.getBootSequence() : vm.getdefault_boot_sequence();
        Guid storagePoolId = vm.getstorage_pool_id();
        // Block from running a VM with no HDD when its first boot device is
        // HD
        // and no other boot devices are configured
        List<Disk> vmDisks = getPluggedDisks(vm);
        if (boot_sequence == BootSequence.C && vmDisks.size() == 0) {
            String messageStr = !vmDisks.isEmpty() ? VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_PLUGGED_DISK.toString() : VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK.toString();
            message.add(messageStr);
            retValue = false;
        } else {
            if (boot_sequence == BootSequence.CD && findActiveISODomain(storagePoolId) == null) {
                message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
                retValue = false;
            } else // custom properties allowed only from cluster 2.3
            if (!StringHelper.isNullOrEmpty(vm.getStaticData().getCustomProperties()) && !Config.<Boolean>GetValue(ConfigValues.SupportCustomProperties, vm.getvds_group_compatibility_version().getValue())) {
                message.add(VdcBllMessages.CUSTOM_VM_PROPERTIES_INVALID_VALUES_NOT_ALLOWED_IN_CURRENT_CLUSTER.toString());
                retValue = false;
            } else {
                // otherwise the vm cannot be run in vdsm
                if (boot_sequence == BootSequence.N && DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()).size() == 0) {
                    message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK.toString());
                    retValue = false;
                } else if (vmDisks.size() > 0) {
                    ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vm.getId());
                    if (!vmDuringSnapshotResult.isValid()) {
                        message.add(vmDuringSnapshotResult.getMessage().name());
                        retValue = false;
                    }
                    // if VM is not HA VM
                    if (retValue && !ImagesHandler.PerformImagesChecks(vm, message, vm.getstorage_pool_id(), Guid.Empty, !vm.getauto_startup(), true, false, false, false, false, !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), vmDisks)) {
                        retValue = false;
                    }
                    // Check if iso and floppy path exists
                    if (retValue && !vm.getauto_startup() && !validateIsoPath(findActiveISODomain(vm.getstorage_pool_id()), runParams, message)) {
                        retValue = false;
                    } else if (retValue) {
                        boolean isVmDuringInit = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsVmDuringInitiating, new IsVmDuringInitiatingVDSCommandParameters(vm.getId())).getReturnValue()).booleanValue();
                        if (vm.isStatusUp() || (vm.getstatus() == VMStatus.NotResponding) || isVmDuringInit) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING.toString());
                            }
                        } else if (vm.getstatus() == VMStatus.Paused && vm.getrun_on_vds() != null) {
                            VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vm.getrun_on_vds().toString()));
                            if (vds.getstatus() != VDSStatus.Up) {
                                retValue = false;
                                if (message != null) {
                                    message.add(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL.toString());
                                }
                            }
                        }
                        boolean isStatelessVm = shouldVmRunAsStateless(runParams, vm);
                        if (retValue && isStatelessVm && ImagesHandler.isVmInPreview(vm.getId())) {
                            retValue = false;
                            message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_WHILE_IN_PREVIEW.toString());
                        }
                        // if the VM itself is stateless or run once as stateless
                        if (retValue && isStatelessVm && vm.getauto_startup()) {
                            retValue = false;
                            message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_HA.toString());
                        }
                        retValue = retValue == false ? retValue : vdsSelector.CanFindVdsToRunOn(message, false);
                        /**
                         * only if can do action ok then check with actions matrix that status is valid for this
                         * action
                         */
                        if (retValue && !VdcActionUtils.CanExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
                            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL.toString());
                            retValue = false;
                        }
                    }
                }
            }
        }
    }
    return retValue;
}
#end_block

#method_before
@SuppressWarnings("unchecked")
protected static boolean validateIsoPath(Guid storageDomainId, RunVmParams runParams, java.util.ArrayList<String> messages) {
    if (!StringHelper.isNullOrEmpty(runParams.getDiskPath())) {
        if (storageDomainId == null) {
            messages.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
            return false;
        }
        boolean retValForIso = false;
        VdcQueryReturnValue ret = Backend.getInstance().runInternalQuery(VdcQueryType.GetAllIsoImagesList, new GetAllIsoImagesListParameters(storageDomainId));
        if (ret != null && ret.getReturnValue() != null && ret.getSucceeded()) {
            List<RepoFileMetaData> repoFileNameList = (List<RepoFileMetaData>) ret.getReturnValue();
            if (repoFileNameList != null) {
                for (RepoFileMetaData isoFileMetaData : (List<RepoFileMetaData>) ret.getReturnValue()) {
                    if (isoFileMetaData.getRepoFileName().equals(runParams.getDiskPath())) {
                        retValForIso = true;
                        break;
                    }
                }
            }
        }
        if (!retValForIso) {
            messages.add(VdcBllMessages.ERROR_CANNOT_FIND_ISO_IMAGE_PATH.toString());
            return false;
        }
    }
    if (!StringHelper.isNullOrEmpty(runParams.getFloppyPath())) {
        boolean retValForFloppy = false;
        VdcQueryReturnValue ret = Backend.getInstance().runInternalQuery(VdcQueryType.GetAllFloppyImagesList, new GetAllIsoImagesListParameters(storageDomainId));
        if (ret != null && ret.getReturnValue() != null && ret.getSucceeded()) {
            List<RepoFileMetaData> repoFileNameList = (List<RepoFileMetaData>) ret.getReturnValue();
            if (repoFileNameList != null) {
                for (RepoFileMetaData isoFileMetaData : (List<RepoFileMetaData>) ret.getReturnValue()) {
                    if (isoFileMetaData.getRepoFileName().equals(runParams.getFloppyPath())) {
                        retValForFloppy = true;
                        break;
                    }
                }
            }
        }
        if (!retValForFloppy) {
            messages.add(VdcBllMessages.ERROR_CANNOT_FIND_FLOPPY_IMAGE_PATH.toString());
            return false;
        }
    }
    return true;
}
#method_after
@SuppressWarnings("unchecked")
protected static boolean validateIsoPath(Guid storageDomainId, RunVmParams runParams, ArrayList<String> messages) {
    if (!StringHelper.isNullOrEmpty(runParams.getDiskPath())) {
        if (storageDomainId == null) {
            messages.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
            return false;
        }
        boolean retValForIso = false;
        VdcQueryReturnValue ret = Backend.getInstance().runInternalQuery(VdcQueryType.GetAllIsoImagesList, new GetAllIsoImagesListParameters(storageDomainId));
        if (ret != null && ret.getReturnValue() != null && ret.getSucceeded()) {
            List<RepoFileMetaData> repoFileNameList = (List<RepoFileMetaData>) ret.getReturnValue();
            if (repoFileNameList != null) {
                for (RepoFileMetaData isoFileMetaData : (List<RepoFileMetaData>) ret.getReturnValue()) {
                    if (isoFileMetaData.getRepoFileName().equals(runParams.getDiskPath())) {
                        retValForIso = true;
                        break;
                    }
                }
            }
        }
        if (!retValForIso) {
            messages.add(VdcBllMessages.ERROR_CANNOT_FIND_ISO_IMAGE_PATH.toString());
            return false;
        }
    }
    if (!StringHelper.isNullOrEmpty(runParams.getFloppyPath())) {
        boolean retValForFloppy = false;
        VdcQueryReturnValue ret = Backend.getInstance().runInternalQuery(VdcQueryType.GetAllFloppyImagesList, new GetAllIsoImagesListParameters(storageDomainId));
        if (ret != null && ret.getReturnValue() != null && ret.getSucceeded()) {
            List<RepoFileMetaData> repoFileNameList = (List<RepoFileMetaData>) ret.getReturnValue();
            if (repoFileNameList != null) {
                for (RepoFileMetaData isoFileMetaData : (List<RepoFileMetaData>) ret.getReturnValue()) {
                    if (isoFileMetaData.getRepoFileName().equals(runParams.getFloppyPath())) {
                        retValForFloppy = true;
                        break;
                    }
                }
            }
        }
        if (!retValForFloppy) {
            messages.add(VdcBllMessages.ERROR_CANNOT_FIND_FLOPPY_IMAGE_PATH.toString());
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    // setting the RunVmParams Internal flag according to the command Internal flag.
    // we can not use only the command Internal flag and remove this flag from RunVmParams
    // since canRunVm is static and can not call non-static method isInternalExecution
    getParameters().setIsInternal(isInternalExecution());
    boolean canDoAction = CanRunVm();
    if (!canDoAction) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__RUN);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM);
    }
    return canDoAction;
}
#method_after
@Override
protected boolean canDoAction() {
    // setting the RunVmParams Internal flag according to the command Internal flag.
    // we can not use only the command Internal flag and remove this flag from RunVmParams
    // since canRunVm is static and can not call non-static method isInternalExecution
    getParameters().setIsInternal(isInternalExecution());
    boolean canDoAction = CanRunVm(getVm(), getReturnValue().getCanDoActionMessages(), getParameters(), getVdsSelector(), getSnapshotsValidator(), getVmPropertiesUtils()) && isVmInterfacesAttachedToVmNetworks();
    // check for Vm Payload
    if (canDoAction && getParameters().getVmPayload() != null) {
        canDoAction = checkPayload(getParameters().getVmPayload(), getParameters().getDiskPath());
        if (canDoAction && !StringHelper.isNullOrEmpty(getParameters().getFloppyPath()) && getParameters().getVmPayload().getType() == VmDeviceType.FLOPPY) {
            addCanDoActionMessage(VdcBllMessages.VMPAYLOAD_FLOPPY_EXCEEDED);
            canDoAction = false;
        } else {
            getVm().setVmPayload(getParameters().getVmPayload());
        }
    }
    return canDoAction;
}
#end_block

#method_before
@Override
protected void EndSuccessfully() {
    SetIsVmRunningStateless();
    if (_isVmRunningStateless) {
        if (DbFacade.getInstance().getDiskImageDAO().getAllStatelessVmImageMapsForVm(getVmId()).size() > 0) {
            VdcActionParametersBase createSnapshotParameters = getParameters().getImagesParameters().get(0);
            if (createSnapshotParameters != null) {
                createSnapshotParameters.setTransactionScopeOption(TransactionScopeOption.RequiresNew);
            }
            VdcReturnValueBase vdcReturnValue = Backend.getInstance().EndAction(VdcActionType.CreateAllSnapshotsFromVm, createSnapshotParameters);
            getParameters().setShouldBeLogged(false);
            getParameters().setRunAsStateless(false);
            getParameters().setIsInternal(true);
            setSucceeded(Backend.getInstance().runInternalAction(VdcActionType.RunVm, getParameters()).getSucceeded());
            if (!getSucceeded()) {
                // could not run the vm don't try to run the end action
                // again
                log.warnFormat("Could not run the vm {0} on RunVm.EndSuccessfully", getVm().getvm_name());
                getReturnValue().setEndActionTryAgain(false);
            }
        } else // the stateless-snapshot no longer exists (probably due to
        // ProcessVmPoolOnStopVm
        // treatment) -> no point in running the VM or retrying to
        // EndAction:
        {
            getReturnValue().setEndActionTryAgain(false);
        }
    } else /**
     * Hibernation (VMStatus.Suspended) treatment:
     */
    {
        super.EndSuccessfully();
    }
}
#method_after
@Override
protected void EndSuccessfully() {
    SetIsVmRunningStateless();
    if (_isVmRunningStateless) {
        VdcActionParametersBase createSnapshotParameters = getParameters().getImagesParameters().get(0);
        if (createSnapshotParameters != null) {
            createSnapshotParameters.setTransactionScopeOption(TransactionScopeOption.RequiresNew);
        }
        Backend.getInstance().EndAction(VdcActionType.CreateAllSnapshotsFromVm, createSnapshotParameters);
        getParameters().setShouldBeLogged(false);
        getParameters().setRunAsStateless(false);
        getParameters().setIsInternal(true);
        setSucceeded(Backend.getInstance().runInternalAction(VdcActionType.RunVm, getParameters()).getSucceeded());
        if (!getSucceeded()) {
            // could not run the vm don't try to run the end action
            // again
            log.warnFormat("Could not run the vm {0} on RunVm.EndSuccessfully", getVm().getvm_name());
            getReturnValue().setEndActionTryAgain(false);
        }
    } else /**
     * Hibernation (VMStatus.Suspended) treatment:
     */
    {
        super.EndSuccessfully();
    }
}
#end_block

#method_before
@Override
protected void EndWithFailure() {
    SetIsVmRunningStateless();
    if (_isVmRunningStateless) {
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().endAction(VdcActionType.CreateAllSnapshotsFromVm, getParameters().getImagesParameters().get(0), getCompensationContext());
        if (getVm() != null) {
            VmHandler.updateDisksFromDb(getVm());
            for (DiskImage disk : getVm().getDiskMap().values()) {
                /**
                 * remove stateless vm image from db:
                 */
                DbFacade.getInstance().getDiskImageDAO().removeStatelessVmImageMap(disk.getId());
            }
        } else {
            setCommandShouldBeLogged(false);
            log.warn("RunVmCommand::EndWithFailure [stateless]: Vm is null - not performing full EndAction");
        }
        setSucceeded(vdcReturnValue.getSucceeded());
    // we are not running the VM, of course,
    // since we couldn't create a snpashot.
    } else {
        super.EndWithFailure();
    }
}
#method_after
@Override
protected void EndWithFailure() {
    SetIsVmRunningStateless();
    if (_isVmRunningStateless) {
        VdcReturnValueBase vdcReturnValue = Backend.getInstance().endAction(VdcActionType.CreateAllSnapshotsFromVm, getParameters().getImagesParameters().get(0), new CommandContext(getCompensationContext()));
        setSucceeded(vdcReturnValue.getSucceeded());
    // we are not running the VM, of course,
    // since we couldn't create a snpashot.
    } else {
        super.EndWithFailure();
    }
}
#end_block

#method_before
private void SetIsVmRunningStateless() {
    List<stateless_vm_image_map> list = DbFacade.getInstance().getDiskImageDAO().getAllStatelessVmImageMapsForVm(getVmId());
    _isVmRunningStateless = (list != null && list.size() > 0);
}
#method_after
private void SetIsVmRunningStateless() {
    _isVmRunningStateless = statelessSnapshotExistsForVm();
}
#end_block

#method_before
public static Guid findActiveISODomain(Guid storagePoolId) {
    Guid isoGuid = null;
    List<storage_domains> domains = DbFacade.getInstance().getStorageDomainDAO().getAllForStoragePool(storagePoolId);
    for (storage_domains domain : domains) {
        if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
            storage_domains sd = DbFacade.getInstance().getStorageDomainDAO().getForStoragePool(domain.getid(), storagePoolId);
            if (sd != null && sd.getstatus() == StorageDomainStatus.Active) {
                isoGuid = sd.getid();
                break;
            }
        }
    }
    return isoGuid;
}
#method_after
public static Guid findActiveISODomain(Guid storagePoolId) {
    Guid isoGuid = null;
    List<storage_domains> domains = DbFacade.getInstance().getStorageDomainDAO().getAllForStoragePool(storagePoolId);
    for (storage_domains domain : domains) {
        if (domain.getstorage_domain_type() == StorageDomainType.ISO) {
            storage_domains sd = DbFacade.getInstance().getStorageDomainDAO().getForStoragePool(domain.getId(), storagePoolId);
            if (sd != null && sd.getstatus() == StorageDomainStatus.Active) {
                isoGuid = sd.getId();
                break;
            }
        }
    }
    return isoGuid;
}
#end_block

#method_before
@Override
protected void Perform() {
    // Get a reference to the virtual machine:
    final VM vm = getVm();
    // Send the log off command to the virtual machine:
    setSucceeded(Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmLogoff, new VmLogoffVDSCommandParameters(getVdsId(), vm.getvm_guid(), mForce)).getSucceeded());
    // database to reflect that the user is logged off:
    if (getSucceeded()) {
        vm.setguest_cur_user_name(null);
        vm.setguest_cur_user_id(null);
        DbFacade.getInstance().getVmDynamicDAO().update(vm.getDynamicData());
    }
}
#method_after
@Override
protected void Perform() {
    // Get a reference to the virtual machine:
    final VM vm = getVm();
    // Send the log off command to the virtual machine:
    final boolean sentToVM = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmLogoff, new VmLogoffVDSCommandParameters(getVdsId(), vm.getId(), mForce)).getSucceeded();
    // database to reflect that the user is logged off:
    if (sentToVM) {
        vm.setguest_cur_user_name(null);
        vm.setguest_cur_user_id(null);
        DbFacade.getInstance().getVmDynamicDAO().update(vm.getDynamicData());
    }
    // Done:
    setSucceeded(sentToVM);
}
#end_block

#method_before
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((acpi_enable == null) ? 0 : acpi_enable.hashCode());
    result = prime * result + ((appList == null) ? 0 : appList.hashCode());
    result = prime * result + boot_sequence.hashCode() * prime;
    result = prime * result + ((client_ip == null) ? 0 : client_ip.hashCode());
    result = prime * result + ((display == null) ? 0 : display.hashCode());
    result = prime * result + ((display_ip == null) ? 0 : display_ip.hashCode());
    result = prime * result + ((display_secure_port == null) ? 0 : display_secure_port.hashCode());
    result = prime * result + display_type.hashCode() * prime;
    result = prime * result + ((guest_cur_user_id == null) ? 0 : guest_cur_user_id.hashCode());
    result = prime * result + ((guest_cur_user_name == null) ? 0 : guest_cur_user_name.hashCode());
    result = prime * result + ((consoleUserId == null) ? 0 : consoleUserId.hashCode());
    result = prime * result + ((consoleUserName == null) ? 0 : consoleUserName.hashCode());
    result = prime * result + ((guest_last_login_time == null) ? 0 : guest_last_login_time.hashCode());
    result = prime * result + ((guest_last_logout_time == null) ? 0 : guest_last_logout_time.hashCode());
    result = prime * result + ((guest_os == null) ? 0 : guest_os.hashCode());
    result = prime * result + ((guest_requested_memory == null) ? 0 : guest_requested_memory.hashCode());
    result = prime * result + ((hibernation_vol_handle == null) ? 0 : hibernation_vol_handle.hashCode());
    result = prime * result + ((kvm_enable == null) ? 0 : kvm_enable.hashCode());
    result = prime * result + ((last_vds_run_on == null) ? 0 : last_vds_run_on.hashCode());
    result = prime * result + ((mDisks == null) ? 0 : mDisks.hashCode());
    result = prime * result + ((mExitMessage == null) ? 0 : mExitMessage.hashCode());
    result = prime * result + mExitStatus.hashCode() * prime;
    result = prime * result + (mWin2kHackEnable ? 1231 : 1237);
    result = prime * result + ((migrating_to_vds == null) ? 0 : migrating_to_vds.hashCode());
    result = prime * result + ((pauseStatus == null) ? 0 : pauseStatus.hashCode());
    result = prime * result + ((run_on_vds == null) ? 0 : run_on_vds.hashCode());
    result = prime * result + session.hashCode() * prime;
    result = prime * result + status.hashCode() * prime;
    result = prime * result + ((utc_diff == null) ? 0 : utc_diff.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((vm_host == null) ? 0 : vm_host.hashCode());
    result = prime * result + ((vm_ip == null) ? 0 : vm_ip.hashCode());
    result = prime * result + ((vm_last_boot_time == null) ? 0 : vm_last_boot_time.hashCode());
    result = prime * result + ((vm_last_up_time == null) ? 0 : vm_last_up_time.hashCode());
    result = prime * result + ((vm_pid == null) ? 0 : vm_pid.hashCode());
    return result;
}
#method_after
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((acpi_enable == null) ? 0 : acpi_enable.hashCode());
    result = prime * result + ((appList == null) ? 0 : appList.hashCode());
    result = prime * result + boot_sequence.hashCode() * prime;
    result = prime * result + ((client_ip == null) ? 0 : client_ip.hashCode());
    result = prime * result + ((display == null) ? 0 : display.hashCode());
    result = prime * result + ((display_ip == null) ? 0 : display_ip.hashCode());
    result = prime * result + ((display_secure_port == null) ? 0 : display_secure_port.hashCode());
    result = prime * result + display_type.hashCode() * prime;
    result = prime * result + ((guest_cur_user_id == null) ? 0 : guest_cur_user_id.hashCode());
    result = prime * result + ((guest_cur_user_name == null) ? 0 : guest_cur_user_name.hashCode());
    result = prime * result + ((consoleUserId == null) ? 0 : consoleUserId.hashCode());
    result = prime * result + ((guest_last_login_time == null) ? 0 : guest_last_login_time.hashCode());
    result = prime * result + ((guest_last_logout_time == null) ? 0 : guest_last_logout_time.hashCode());
    result = prime * result + ((guest_os == null) ? 0 : guest_os.hashCode());
    result = prime * result + ((guest_requested_memory == null) ? 0 : guest_requested_memory.hashCode());
    result = prime * result + ((hibernation_vol_handle == null) ? 0 : hibernation_vol_handle.hashCode());
    result = prime * result + ((kvm_enable == null) ? 0 : kvm_enable.hashCode());
    result = prime * result + ((last_vds_run_on == null) ? 0 : last_vds_run_on.hashCode());
    result = prime * result + ((mDisks == null) ? 0 : mDisks.hashCode());
    result = prime * result + ((mExitMessage == null) ? 0 : mExitMessage.hashCode());
    result = prime * result + mExitStatus.hashCode() * prime;
    result = prime * result + (mWin2kHackEnable ? 1231 : 1237);
    result = prime * result + ((migrating_to_vds == null) ? 0 : migrating_to_vds.hashCode());
    result = prime * result + ((pauseStatus == null) ? 0 : pauseStatus.hashCode());
    result = prime * result + ((run_on_vds == null) ? 0 : run_on_vds.hashCode());
    result = prime * result + session.hashCode() * prime;
    result = prime * result + status.hashCode() * prime;
    result = prime * result + ((utc_diff == null) ? 0 : utc_diff.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    result = prime * result + ((vm_host == null) ? 0 : vm_host.hashCode());
    result = prime * result + ((vm_ip == null) ? 0 : vm_ip.hashCode());
    result = prime * result + ((vm_last_boot_time == null) ? 0 : vm_last_boot_time.hashCode());
    result = prime * result + ((vm_last_up_time == null) ? 0 : vm_last_up_time.hashCode());
    result = prime * result + ((vm_pid == null) ? 0 : vm_pid.hashCode());
    return result;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    VmDynamic other = (VmDynamic) obj;
    if (acpi_enable == null) {
        if (other.acpi_enable != null)
            return false;
    } else if (!acpi_enable.equals(other.acpi_enable))
        return false;
    if (appList == null) {
        if (other.appList != null)
            return false;
    } else if (!appList.equals(other.appList))
        return false;
    if (boot_sequence != other.boot_sequence)
        return false;
    if (client_ip == null) {
        if (other.client_ip != null)
            return false;
    } else if (!client_ip.equals(other.client_ip))
        return false;
    if (display == null) {
        if (other.display != null)
            return false;
    } else if (!display.equals(other.display))
        return false;
    if (display_ip == null) {
        if (other.display_ip != null)
            return false;
    } else if (!display_ip.equals(other.display_ip))
        return false;
    if (display_secure_port == null) {
        if (other.display_secure_port != null)
            return false;
    } else if (!display_secure_port.equals(other.display_secure_port))
        return false;
    if (display_type != other.display_type)
        return false;
    if (guest_cur_user_id == null) {
        if (other.guest_cur_user_id != null)
            return false;
    } else if (!guest_cur_user_id.equals(other.guest_cur_user_id))
        return false;
    if (guest_cur_user_name == null) {
        if (other.guest_cur_user_name != null)
            return false;
    } else if (!guest_cur_user_name.equals(other.guest_cur_user_name))
        return false;
    if (consoleUserId == null) {
        if (other.consoleUserId != null)
            return false;
    } else if (!consoleUserId.equals(other.consoleUserId))
        return false;
    if (consoleUserName == null) {
        if (other.consoleUserName != null)
            return false;
    } else if (!consoleUserName.equals(other.consoleUserName))
        return false;
    if (guest_last_login_time == null) {
        if (other.guest_last_login_time != null)
            return false;
    } else if (!guest_last_login_time.equals(other.guest_last_login_time))
        return false;
    if (guest_last_logout_time == null) {
        if (other.guest_last_logout_time != null)
            return false;
    } else if (!guest_last_logout_time.equals(other.guest_last_logout_time))
        return false;
    if (guest_os == null) {
        if (other.guest_os != null)
            return false;
    } else if (!guest_os.equals(other.guest_os))
        return false;
    if (guest_requested_memory == null) {
        if (other.guest_requested_memory != null)
            return false;
    } else if (!guest_requested_memory.equals(other.guest_requested_memory))
        return false;
    if (hibernation_vol_handle == null) {
        if (other.hibernation_vol_handle != null)
            return false;
    } else if (!hibernation_vol_handle.equals(other.hibernation_vol_handle))
        return false;
    if (kvm_enable == null) {
        if (other.kvm_enable != null)
            return false;
    } else if (!kvm_enable.equals(other.kvm_enable))
        return false;
    if (last_vds_run_on == null) {
        if (other.last_vds_run_on != null)
            return false;
    } else if (!last_vds_run_on.equals(other.last_vds_run_on))
        return false;
    if (mDisks == null) {
        if (other.mDisks != null)
            return false;
    } else if (!mDisks.equals(other.mDisks))
        return false;
    if (mExitMessage == null) {
        if (other.mExitMessage != null)
            return false;
    } else if (!mExitMessage.equals(other.mExitMessage))
        return false;
    if (mExitStatus != other.mExitStatus)
        return false;
    if (mWin2kHackEnable != other.mWin2kHackEnable)
        return false;
    if (migrating_to_vds == null) {
        if (other.migrating_to_vds != null)
            return false;
    } else if (!migrating_to_vds.equals(other.migrating_to_vds))
        return false;
    if (pauseStatus != other.pauseStatus)
        return false;
    if (run_on_vds == null) {
        if (other.run_on_vds != null)
            return false;
    } else if (!run_on_vds.equals(other.run_on_vds))
        return false;
    if (session != other.session)
        return false;
    if (status != other.status)
        return false;
    if (utc_diff == null) {
        if (other.utc_diff != null)
            return false;
    } else if (!utc_diff.equals(other.utc_diff))
        return false;
    if (id == null) {
        if (other.id != null)
            return false;
    } else if (!id.equals(other.id))
        return false;
    if (vm_host == null) {
        if (other.vm_host != null)
            return false;
    } else if (!vm_host.equals(other.vm_host))
        return false;
    if (vm_ip == null) {
        if (other.vm_ip != null)
            return false;
    } else if (!vm_ip.equals(other.vm_ip))
        return false;
    if (vm_last_boot_time == null) {
        if (other.vm_last_boot_time != null)
            return false;
    } else if (!vm_last_boot_time.equals(other.vm_last_boot_time))
        return false;
    if (vm_last_up_time == null) {
        if (other.vm_last_up_time != null)
            return false;
    } else if (!vm_last_up_time.equals(other.vm_last_up_time))
        return false;
    if (vm_pid == null) {
        if (other.vm_pid != null)
            return false;
    } else if (!vm_pid.equals(other.vm_pid))
        return false;
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    VmDynamic other = (VmDynamic) obj;
    if (acpi_enable == null) {
        if (other.acpi_enable != null)
            return false;
    } else if (!acpi_enable.equals(other.acpi_enable))
        return false;
    if (appList == null) {
        if (other.appList != null)
            return false;
    } else if (!appList.equals(other.appList))
        return false;
    if (boot_sequence != other.boot_sequence)
        return false;
    if (client_ip == null) {
        if (other.client_ip != null)
            return false;
    } else if (!client_ip.equals(other.client_ip))
        return false;
    if (display == null) {
        if (other.display != null)
            return false;
    } else if (!display.equals(other.display))
        return false;
    if (display_ip == null) {
        if (other.display_ip != null)
            return false;
    } else if (!display_ip.equals(other.display_ip))
        return false;
    if (display_secure_port == null) {
        if (other.display_secure_port != null)
            return false;
    } else if (!display_secure_port.equals(other.display_secure_port))
        return false;
    if (display_type != other.display_type)
        return false;
    if (guest_cur_user_id == null) {
        if (other.guest_cur_user_id != null)
            return false;
    } else if (!guest_cur_user_id.equals(other.guest_cur_user_id))
        return false;
    if (guest_cur_user_name == null) {
        if (other.guest_cur_user_name != null)
            return false;
    } else if (!guest_cur_user_name.equals(other.guest_cur_user_name))
        return false;
    if (consoleUserId == null) {
        if (other.consoleUserId != null)
            return false;
    } else if (!consoleUserId.equals(other.consoleUserId))
        return false;
    if (guest_last_login_time == null) {
        if (other.guest_last_login_time != null)
            return false;
    } else if (!guest_last_login_time.equals(other.guest_last_login_time))
        return false;
    if (guest_last_logout_time == null) {
        if (other.guest_last_logout_time != null)
            return false;
    } else if (!guest_last_logout_time.equals(other.guest_last_logout_time))
        return false;
    if (guest_os == null) {
        if (other.guest_os != null)
            return false;
    } else if (!guest_os.equals(other.guest_os))
        return false;
    if (guest_requested_memory == null) {
        if (other.guest_requested_memory != null)
            return false;
    } else if (!guest_requested_memory.equals(other.guest_requested_memory))
        return false;
    if (hibernation_vol_handle == null) {
        if (other.hibernation_vol_handle != null)
            return false;
    } else if (!hibernation_vol_handle.equals(other.hibernation_vol_handle))
        return false;
    if (kvm_enable == null) {
        if (other.kvm_enable != null)
            return false;
    } else if (!kvm_enable.equals(other.kvm_enable))
        return false;
    if (last_vds_run_on == null) {
        if (other.last_vds_run_on != null)
            return false;
    } else if (!last_vds_run_on.equals(other.last_vds_run_on))
        return false;
    if (mDisks == null) {
        if (other.mDisks != null)
            return false;
    } else if (!mDisks.equals(other.mDisks))
        return false;
    if (mExitMessage == null) {
        if (other.mExitMessage != null)
            return false;
    } else if (!mExitMessage.equals(other.mExitMessage))
        return false;
    if (mExitStatus != other.mExitStatus)
        return false;
    if (mWin2kHackEnable != other.mWin2kHackEnable)
        return false;
    if (migrating_to_vds == null) {
        if (other.migrating_to_vds != null)
            return false;
    } else if (!migrating_to_vds.equals(other.migrating_to_vds))
        return false;
    if (pauseStatus != other.pauseStatus)
        return false;
    if (run_on_vds == null) {
        if (other.run_on_vds != null)
            return false;
    } else if (!run_on_vds.equals(other.run_on_vds))
        return false;
    if (session != other.session)
        return false;
    if (status != other.status)
        return false;
    if (utc_diff == null) {
        if (other.utc_diff != null)
            return false;
    } else if (!utc_diff.equals(other.utc_diff))
        return false;
    if (id == null) {
        if (other.id != null)
            return false;
    } else if (!id.equals(other.id))
        return false;
    if (vm_host == null) {
        if (other.vm_host != null)
            return false;
    } else if (!vm_host.equals(other.vm_host))
        return false;
    if (vm_ip == null) {
        if (other.vm_ip != null)
            return false;
    } else if (!vm_ip.equals(other.vm_ip))
        return false;
    if (vm_last_boot_time == null) {
        if (other.vm_last_boot_time != null)
            return false;
    } else if (!vm_last_boot_time.equals(other.vm_last_boot_time))
        return false;
    if (vm_last_up_time == null) {
        if (other.vm_last_up_time != null)
            return false;
    } else if (!vm_last_up_time.equals(other.vm_last_up_time))
        return false;
    if (vm_pid == null) {
        if (other.vm_pid != null)
            return false;
    } else if (!vm_pid.equals(other.vm_pid))
        return false;
    return true;
}
#end_block

#method_before
@XmlElement(name = "ExitMessage")
public String getExitMessage() {
    return mExitMessage;
}
#method_after
public String getExitMessage() {
    return mExitMessage;
}
#end_block

#method_before
@XmlElement(name = "ExitStatus")
public VmExitStatus getExitStatus() {
    return this.mExitStatus;
}
#method_after
public VmExitStatus getExitStatus() {
    return this.mExitStatus;
}
#end_block

#method_before
@XmlElement(name = "Win2kHackEnable")
public boolean getWin2kHackEnable() {
    return mWin2kHackEnable;
}
#method_after
public boolean getWin2kHackEnable() {
    return mWin2kHackEnable;
}
#end_block

#method_before
@XmlElement
public String getapp_list() {
    return this.appList;
}
#method_after
public String getapp_list() {
    return this.appList;
}
#end_block

#method_before
@XmlElement
public NGuid getguest_cur_user_id() {
    return this.guest_cur_user_id;
}
#method_after
public NGuid getguest_cur_user_id() {
    return this.guest_cur_user_id;
}
#end_block

#method_before
@XmlElement
public String getguest_cur_user_name() {
    return this.guest_cur_user_name;
}
#method_after
public String getguest_cur_user_name() {
    return this.guest_cur_user_name;
}
#end_block

#method_before
@XmlElement
public NGuid getConsoleUserId() {
    return this.consoleUserId;
}
#method_after
public NGuid getConsoleUserId() {
    return this.consoleUserId;
}
#end_block

#method_before
@XmlElement
public String getguest_os() {
    return this.guest_os;
}
#method_after
public String getguest_os() {
    return this.guest_os;
}
#end_block

#method_before
@XmlElement(nillable = true)
public java.util.Date getguest_last_login_time() {
    return this.guest_last_login_time;
}
#method_after
public java.util.Date getguest_last_login_time() {
    return this.guest_last_login_time;
}
#end_block

#method_before
@XmlElement(nillable = true)
public java.util.Date getguest_last_logout_time() {
    return this.guest_last_logout_time;
}
#method_after
public java.util.Date getguest_last_logout_time() {
    return this.guest_last_logout_time;
}
#end_block

#method_before
@XmlElement(nillable = true)
public NGuid getmigrating_to_vds() {
    return this.migrating_to_vds;
}
#method_after
public NGuid getmigrating_to_vds() {
    return this.migrating_to_vds;
}
#end_block

#method_before
@XmlElement(nillable = true)
public NGuid getrun_on_vds() {
    return this.run_on_vds;
}
#method_after
public NGuid getrun_on_vds() {
    return this.run_on_vds;
}
#end_block

#method_before
@XmlElement
public VMStatus getstatus() {
    return this.status;
}
#method_after
public VMStatus getstatus() {
    return this.status;
}
#end_block

#method_before
@XmlElement
public Guid getId() {
    return this.id;
}
#method_after
public Guid getId() {
    return this.id;
}
#end_block

#method_before
@XmlElement
public String getvm_host() {
    return this.vm_host;
}
#method_after
public String getvm_host() {
    return this.vm_host;
}
#end_block

#method_before
@XmlElement
public String getvm_ip() {
    return this.vm_ip;
}
#method_after
public String getvm_ip() {
    return this.vm_ip;
}
#end_block

#method_before
@XmlElement(nillable = true)
public java.util.Date getvm_last_boot_time() {
    return this.vm_last_boot_time;
}
#method_after
public java.util.Date getvm_last_boot_time() {
    return this.vm_last_boot_time;
}
#end_block

#method_before
@XmlElement(nillable = true)
public java.util.Date getvm_last_up_time() {
    return this.vm_last_up_time;
}
#method_after
public java.util.Date getvm_last_up_time() {
    return this.vm_last_up_time;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Integer getvm_pid() {
    return this.vm_pid;
}
#method_after
public Integer getvm_pid() {
    return this.vm_pid;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Integer getdisplay() {
    return this.display;
}
#method_after
public Integer getdisplay() {
    return this.display;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Boolean getacpi_enable() {
    return this.acpi_enable;
}
#method_after
public Boolean getacpi_enable() {
    return this.acpi_enable;
}
#end_block

#method_before
@XmlElement
public String getdisplay_ip() {
    return this.display_ip;
}
#method_after
public String getdisplay_ip() {
    return this.display_ip;
}
#end_block

#method_before
@XmlElement
public DisplayType getdisplay_type() {
    return display_type;
}
#method_after
public DisplayType getdisplay_type() {
    return display_type;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Boolean getkvm_enable() {
    return this.kvm_enable;
}
#method_after
public Boolean getkvm_enable() {
    return this.kvm_enable;
}
#end_block

#method_before
@XmlElement
public SessionState getsession() {
    return this.session;
}
#method_after
public SessionState getsession() {
    return this.session;
}
#end_block

#method_before
@XmlElement
public BootSequence getboot_sequence() {
    return this.boot_sequence;
}
#method_after
public BootSequence getboot_sequence() {
    return this.boot_sequence;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Integer getdisplay_secure_port() {
    return this.display_secure_port;
}
#method_after
public Integer getdisplay_secure_port() {
    return this.display_secure_port;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Integer getutc_diff() {
    return this.utc_diff;
}
#method_after
public Integer getutc_diff() {
    return this.utc_diff;
}
#end_block

#method_before
@XmlElement(nillable = true)
public NGuid getlast_vds_run_on() {
    return this.last_vds_run_on;
}
#method_after
public NGuid getlast_vds_run_on() {
    return this.last_vds_run_on;
}
#end_block

#method_before
@XmlElement
public String getclient_ip() {
    return this.client_ip;
}
#method_after
public String getclient_ip() {
    return this.client_ip;
}
#end_block

#method_before
@XmlElement(nillable = true)
public Integer getguest_requested_memory() {
    return this.guest_requested_memory;
}
#method_after
public Integer getguest_requested_memory() {
    return this.guest_requested_memory;
}
#end_block

#method_before
@XmlElement
public String gethibernation_vol_handle() {
    return this.hibernation_vol_handle;
}
#method_after
public String gethibernation_vol_handle() {
    return this.hibernation_vol_handle;
}
#end_block

#method_before
@XmlElement(name = "PauseStatus")
public VmPauseStatus getPauseStatus() {
    return this.pauseStatus;
}
#method_after
public VmPauseStatus getPauseStatus() {
    return this.pauseStatus;
}
#end_block

#method_before
public VDS getUpServer(Guid clusterId) {
    List<VDS> servers = DbFacade.getInstance().getVdsDAO().getAllForVdsGroupWithStatus(clusterId, VDSStatus.Up);
    if (servers == null || servers.isEmpty()) {
        throw new VdcBLLException(VdcBllErrors.NO_UP_SERVER_FOUND);
    }
    return servers.get(GlusterCoreUtil.random(servers.size() - 1));
}
#method_after
public VDS getUpServer(Guid clusterId) {
    List<VDS> servers = getVdsDao().getAllForVdsGroupWithStatus(clusterId, VDSStatus.Up);
    if (servers == null || servers.isEmpty()) {
        throw new VdcBLLException(VdcBllErrors.NO_UP_SERVER_FOUND);
    }
    return RandomUtils.instance().pickRandom(servers);
}
#end_block

#method_before
@Before
public void mockDbFacadeAndDao() {
    MockitoAnnotations.initMocks(this);
    mockStatic(DbFacade.class);
    mockStatic(VdsDAO.class);
    when(db.getVdsDAO()).thenReturn(vdsDao);
    when(DbFacade.getInstance()).thenReturn(db);
    when(vdsDao.getAllForVdsGroupWithStatus(CLUSTER_ID, VDSStatus.Up)).thenReturn(mockGetAllVdsForwithStatus(VDSStatus.Up));
}
#method_after
@Before
public void mockDbFacadeAndDao() {
    vdsDao = mock(VdsDAO.class);
    when(vdsDao.getAllForVdsGroupWithStatus(CLUSTER_ID, VDSStatus.Up)).thenReturn(mockGetAllVdsForwithStatus(VDSStatus.Up));
    clusterUtils = spy(ClusterUtils.getInstance());
    doReturn(vdsDao).when(clusterUtils).getVdsDao();
}
#end_block

#method_before
@Test
public void testGetAllVdsWithStatus() {
    VDS vds = ClusterUtils.getInstance().getUpServer(CLUSTER_ID);
    assertNotNull(vds);
    assertEquals(vds, getVds(VDSStatus.Up));
}
#method_after
@Test
public void testGetAllVdsWithStatus() {
    VDS vds = clusterUtils.getUpServer(CLUSTER_ID);
    assertNotNull(vds);
    assertEquals(vds, getVds(VDSStatus.Up));
}
#end_block

#method_before
@Test
public void testSave() {
    // Fetch the file from cache table
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(ISO_STORAGE_DOAMIN_ID, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertSame(listOfRepoFiles.isEmpty(), true);
    RepoFileMetaData newRepoFileMap = getNewIsoRepoFile();
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(ISO_STORAGE_DOAMIN_ID, FileTypeExtension.ISO);
    assertSame(listOfRepoFiles.isEmpty(), false);
}
#method_after
@Test
public void testSave() {
    // Fetch the file from cache table
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.STORAGE_DOAMIN_NFS_ISO, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertSame(listOfRepoFiles.isEmpty(), true);
    RepoFileMetaData newRepoFileMap = getNewIsoRepoFile();
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.STORAGE_DOAMIN_NFS_ISO, FileTypeExtension.ISO);
    assertSame(listOfRepoFiles.isEmpty(), false);
}
#end_block

#method_before
@Test
public void testRemove() {
    // Should get one iso file
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    // Remove the file from cache table
    repoFileMetaDataDao.removeRepoDomainFileList(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
    listOfRepoFiles = getActiveIsoDomain();
    assertNotNull(listOfRepoFiles);
    assertSame(true, listOfRepoFiles.isEmpty());
}
#method_after
@Test
public void testRemove() {
    // Should get one iso file
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    // Remove the file from cache table
    repoFileMetaDataDao.removeRepoDomainFileList(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
    listOfRepoFiles = getActiveIsoDomain();
    assertNotNull(listOfRepoFiles);
    assertSame(true, listOfRepoFiles.isEmpty());
}
#end_block

#method_before
@Test
public void testRemoveByRemoveIsoDomain() {
    // Should get one iso file
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    // Test remove Iso
    StorageDomainDAO storageDomainDao = dbFacade.getStorageDomainDAO();
    storageDomainDao.remove(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3);
    listOfRepoFiles = getActiveIsoDomain();
    assertNotNull(listOfRepoFiles);
    assertSame(true, listOfRepoFiles.isEmpty());
}
#method_after
@Test
public void testRemoveByRemoveIsoDomain() {
    // Should get one iso file
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    // Test remove Iso
    StorageDomainDAO storageDomainDao = dbFacade.getStorageDomainDAO();
    storageDomainDao.remove(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3);
    listOfRepoFiles = getActiveIsoDomain();
    assertNotNull(listOfRepoFiles);
    assertSame(true, listOfRepoFiles.isEmpty());
}
#end_block

#method_before
@Test
public void testFileTypeWhenFetchAllIsoDomainInSystem() {
    // Should get one iso file
    List<RepoFileMetaData> listOfAllIsoFiles = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up);
    List<FileTypeExtension> SharedStorageDomainFileType = new ArrayList<FileTypeExtension>();
    List<FileTypeExtension> EmptyStorageDomainFileType = new ArrayList<FileTypeExtension>();
    for (RepoFileMetaData fileMD : listOfAllIsoFiles) {
        Guid repoDomainId = fileMD.getRepoDomainId();
        if (repoDomainId.equals(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3)) {
            // Should have three types of files.
            SharedStorageDomainFileType.add(fileMD.getFileType());
        } else if (repoDomainId.equals(ISO_STORAGE_DOAMIN_ID)) {
            // Should have only one type (UNKNOWN)
            EmptyStorageDomainFileType.add(fileMD.getFileType());
        }
    }
    // Start the check
    // the shared storage domain, should have three types of files.
    assertEquals(SharedStorageDomainFileType.size(), 3);
    assertEquals(SharedStorageDomainFileType.contains(FileTypeExtension.Unknown), true);
    assertEquals(SharedStorageDomainFileType.contains(FileTypeExtension.ISO), true);
    assertEquals(SharedStorageDomainFileType.contains(FileTypeExtension.Floppy), true);
    // The empty storage domain, should not have files, but should be fetched, since we want to refresh it.
    assertEquals(EmptyStorageDomainFileType.size(), 1);
    assertEquals(EmptyStorageDomainFileType.contains(FileTypeExtension.Unknown), true);
}
#method_after
@Test
public void testFileTypeWhenFetchAllIsoDomainInSystem() {
    // Should get one iso file
    List<RepoFileMetaData> listOfAllIsoFiles = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up);
    List<FileTypeExtension> SharedStorageDomainFileType = new ArrayList<FileTypeExtension>();
    List<FileTypeExtension> EmptyStorageDomainFileType = new ArrayList<FileTypeExtension>();
    for (RepoFileMetaData fileMD : listOfAllIsoFiles) {
        Guid repoDomainId = fileMD.getRepoDomainId();
        if (repoDomainId.equals(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3)) {
            // Should have three types of files.
            SharedStorageDomainFileType.add(fileMD.getFileType());
        } else if (repoDomainId.equals(FixturesTool.STORAGE_DOAMIN_NFS_ISO)) {
            // Should have only one type (UNKNOWN)
            EmptyStorageDomainFileType.add(fileMD.getFileType());
        }
    }
    // Start the check
    // the shared storage domain, should have three types of files.
    assertEquals(SharedStorageDomainFileType.size(), 3);
    assertEquals(SharedStorageDomainFileType.contains(FileTypeExtension.Unknown), true);
    assertEquals(SharedStorageDomainFileType.contains(FileTypeExtension.ISO), true);
    assertEquals(SharedStorageDomainFileType.contains(FileTypeExtension.Floppy), true);
    // The empty storage domain, should not have files, but should be fetched, since we want to refresh it.
    assertEquals(EmptyStorageDomainFileType.size(), 1);
    assertEquals(EmptyStorageDomainFileType.contains(FileTypeExtension.Unknown), true);
}
#end_block

#method_before
@Test
public void testFetchAllIsoDomainOldestFile() {
    List<RepoFileMetaData> listOfIsoFiles = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up);
    List<RepoFileMetaData> listOfFloppyFiles = repoFileMetaDataDao.getRepoListForStorageDomain(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.Floppy);
    long minLastRefreshed = new Long("9999999999999").longValue();
    for (RepoFileMetaData fileMD : listOfFloppyFiles) {
        long fileLastRefreshed = fileMD.getLastRefreshed();
        if (fileLastRefreshed < minLastRefreshed) {
            minLastRefreshed = fileLastRefreshed;
        }
    }
    // Check if fetched the oldest file when fetching all repository files.
    boolean isValid = true;
    for (RepoFileMetaData fileMetaData : listOfIsoFiles) {
        if (fileMetaData.getFileType() == FileTypeExtension.Floppy) {
            if (fileMetaData.getLastRefreshed() > minLastRefreshed) {
                isValid = false;
            }
        }
    }
    assertEquals(isValid, true);
}
#method_after
@Test
public void testFetchAllIsoDomainOldestFile() {
    List<RepoFileMetaData> listOfIsoFiles = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up);
    List<RepoFileMetaData> listOfFloppyFiles = repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.Floppy);
    long minLastRefreshed = new Long("9999999999999").longValue();
    for (RepoFileMetaData fileMD : listOfFloppyFiles) {
        long fileLastRefreshed = fileMD.getLastRefreshed();
        if (fileLastRefreshed < minLastRefreshed) {
            minLastRefreshed = fileLastRefreshed;
        }
    }
    // Check if fetched the oldest file when fetching all repository files.
    boolean isValid = true;
    for (RepoFileMetaData fileMetaData : listOfIsoFiles) {
        if (fileMetaData.getFileType() == FileTypeExtension.Floppy) {
            if (fileMetaData.getLastRefreshed() > minLastRefreshed) {
                isValid = false;
            }
        }
    }
    assertEquals(isValid, true);
}
#end_block

#method_before
@Test
public void testInsertRepoFileAndFetchItAgain() {
    RepoFileMetaData newRepoFileMap = getNewIsoRepoFile();
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(ISO_STORAGE_DOAMIN_ID, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertSame(true, !listOfRepoFiles.isEmpty());
    assertSame(true, listOfRepoFiles.get(0).getRepoFileName().equals(newRepoFileMap.getRepoFileName()));
    assertSame(true, listOfRepoFiles.get(0).getLastRefreshed() == newRepoFileMap.getLastRefreshed());
    assertSame(true, listOfRepoFiles.get(0).getSize() == newRepoFileMap.getSize());
    assertSame(true, listOfRepoFiles.get(0).getRepoDomainId().equals(newRepoFileMap.getRepoDomainId()));
}
#method_after
@Test
public void testInsertRepoFileAndFetchItAgain() {
    RepoFileMetaData newRepoFileMap = getNewIsoRepoFile();
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    List<RepoFileMetaData> listOfRepoFiles = repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.STORAGE_DOAMIN_NFS_ISO, FileTypeExtension.ISO);
    assertNotNull(listOfRepoFiles);
    assertSame(true, !listOfRepoFiles.isEmpty());
    assertSame(true, listOfRepoFiles.get(0).getRepoFileName().equals(newRepoFileMap.getRepoFileName()));
    assertSame(true, listOfRepoFiles.get(0).getLastRefreshed() == newRepoFileMap.getLastRefreshed());
    assertSame(true, listOfRepoFiles.get(0).getSize() == newRepoFileMap.getSize());
    assertSame(true, listOfRepoFiles.get(0).getRepoDomainId().equals(newRepoFileMap.getRepoDomainId()));
}
#end_block

#method_before
@Test
public void testUpdateRepoFileByRemoveAndInsert() {
    RepoFileMetaData newRepoFileMap = getNewIsoRepoFile();
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    // Fetch the file from cache table
    List<RepoFileMetaData> listOfRepoFiles = getActiveIsoDomain();
    // Get first file and update its String
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    RepoFileMetaData repoFile = listOfRepoFiles.get(0);
    assertNotNull(repoFile);
    String oldRepoFileName = repoFile.getRepoFileName();
    newRepoFileMap.setRepoFileName("updatedFileName" + newRepoFileMap.getRepoFileName());
    // Remove the file from cache table
    repoFileMetaDataDao.removeRepoDomainFileList(ISO_STORAGE_DOAMIN_ID, FileTypeExtension.ISO);
    // Add the new updated file into the cache table.
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    // Fetch the updated File.
    listOfRepoFiles = getActiveIsoDomain();
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    RepoFileMetaData newRepoFile = listOfRepoFiles.get(0);
    assertNotNull(repoFile);
    // Check if not same file name as in the old file.
    assertNotSame(oldRepoFileName, newRepoFile.getRepoFileName());
}
#method_after
@Test
public void testUpdateRepoFileByRemoveAndInsert() {
    RepoFileMetaData newRepoFileMap = getNewIsoRepoFile();
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    // Fetch the file from cache table
    List<RepoFileMetaData> listOfRepoFiles = getActiveIsoDomain();
    // Get first file and update its String
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    RepoFileMetaData repoFile = listOfRepoFiles.get(0);
    assertNotNull(repoFile);
    String oldRepoFileName = repoFile.getRepoFileName();
    newRepoFileMap.setRepoFileName("updatedFileName" + newRepoFileMap.getRepoFileName());
    // Remove the file from cache table
    repoFileMetaDataDao.removeRepoDomainFileList(FixturesTool.STORAGE_DOAMIN_NFS_ISO, FileTypeExtension.ISO);
    // Add the new updated file into the cache table.
    repoFileMetaDataDao.addRepoFileMap(newRepoFileMap);
    // Fetch the updated File.
    listOfRepoFiles = getActiveIsoDomain();
    assertNotNull(listOfRepoFiles);
    assertNotSame(true, listOfRepoFiles.isEmpty());
    RepoFileMetaData newRepoFile = listOfRepoFiles.get(0);
    assertNotNull(repoFile);
    // Check if not same file name as in the old file.
    assertNotSame(oldRepoFileName, newRepoFile.getRepoFileName());
}
#end_block

#method_before
private static RepoFileMetaData getNewIsoRepoFile() {
    RepoFileMetaData newRepoFileMap = new RepoFileMetaData();
    newRepoFileMap.setFileType(FileTypeExtension.ISO);
    newRepoFileMap.setRepoFileName("isoDomain.iso");
    newRepoFileMap.setLastRefreshed(System.currentTimeMillis());
    newRepoFileMap.setSize(0);
    newRepoFileMap.setDateCreated(null);
    newRepoFileMap.setRepoDomainId(ISO_STORAGE_DOAMIN_ID);
    return newRepoFileMap;
}
#method_after
private static RepoFileMetaData getNewIsoRepoFile() {
    RepoFileMetaData newRepoFileMap = new RepoFileMetaData();
    newRepoFileMap.setFileType(FileTypeExtension.ISO);
    newRepoFileMap.setRepoFileName("isoDomain.iso");
    newRepoFileMap.setLastRefreshed(System.currentTimeMillis());
    newRepoFileMap.setSize(0);
    newRepoFileMap.setDateCreated(null);
    newRepoFileMap.setRepoDomainId(FixturesTool.STORAGE_DOAMIN_NFS_ISO);
    return newRepoFileMap;
}
#end_block

#method_before
private List<RepoFileMetaData> getActiveIsoDomain() {
    return repoFileMetaDataDao.getRepoListForStorageDomain(SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
}
#method_after
private List<RepoFileMetaData> getActiveIsoDomain() {
    return repoFileMetaDataDao.getRepoListForStorageDomain(FixturesTool.SHARED_ISO_STORAGE_DOAMIN_FOR_SP2_AND_SP3, FileTypeExtension.ISO);
}
#end_block

#method_before
@Override
public void Search() {
    if (getEntity() != null) {
        setSearchString(StringFormat.format("Events: volume.name=%1$s", getEntity().getName()));
        super.Search();
    }
}
#method_after
@Override
public void Search() {
    if (getEntity() != null) {
        // $NON-NLS-1$
        setSearchString(StringFormat.format("Events: volume.name=%1$s", getEntity().getName()));
        super.Search();
    }
}
#end_block

#method_before
@Override
protected void EntityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.EntityPropertyChanged(sender, e);
    if (e.PropertyName.equals("gluster_volume_name")) {
        getSearchCommand().Execute();
    }
}
#method_after
@Override
protected void EntityPropertyChanged(Object sender, PropertyChangedEventArgs e) {
    super.EntityPropertyChanged(sender, e);
    if (// $NON-NLS-1$
    e.PropertyName.equals("gluster_volume_name")) {
        getSearchCommand().Execute();
    }
}
#end_block

#method_before
public boolean getTaskGroupSuccess() {
    boolean childrenTasksSuccess = taskGroupSuccess;
    for (VdcActionParametersBase childParameters : getImagesParameters()) {
        childrenTasksSuccess &= childParameters.getTaskGroupSuccess();
    }
    return childrenTasksSuccess;
}
#method_after
public boolean getTaskGroupSuccess() {
    boolean childrenTasksSuccess = taskGroupSuccess;
    for (VdcActionParametersBase childParameters : getImagesParameters()) {
        childrenTasksSuccess &= childParameters.getTaskGroupSuccess();
        if (!childrenTasksSuccess) {
            break;
        }
    }
    return childrenTasksSuccess;
}
#end_block

#method_before
@Ignore
@Test
public void deleteAJob() throws SchedulerException {
    PrintJob pj = new PrintJob();
    Date startTestDate = new Date();
    System.out.println("Start Time=" + startTestDate);
    String jobId = scheduler.scheduleAFixedDelayJob(pj, "onTimer11", new Class[0], new Object[0], 1, 3, TimeUnit.MILLISECONDS);
    // String[] jobs = scheduler.getRawScheduler().getJobNames(Scheduler.DEFAULT_GROUP);
    Set<JobKey> jobKeys = scheduler.getRawScheduler().getJobKeys(jobGroupEquals(Scheduler.DEFAULT_GROUP));
    assertEquals("Number of scheduled jobs", 1, jobKeys.size());
    // delete a valid job
    scheduler.deleteJob(jobId);
    jobKeys = scheduler.getRawScheduler().getJobKeys(jobGroupEquals(Scheduler.DEFAULT_GROUP));
    assertEquals("Number of scheduled jobs", 0, jobKeys.size());
    // delete invalid job
    scheduler.deleteJob("nojob");
}
#method_after
@Ignore
@Test
public void deleteAJob() throws SchedulerException {
    PrintJob pj = new PrintJob();
    Date startTestDate = new Date();
    System.out.println("Start Time=" + startTestDate);
    String jobId = scheduler.scheduleAFixedDelayJob(pj, "onTimer11", new Class[0], new Object[0], 1, 3, TimeUnit.MILLISECONDS);
    Set<JobKey> jobKeys = scheduler.getRawScheduler().getJobKeys(jobGroupEquals(Scheduler.DEFAULT_GROUP));
    assertEquals("Number of scheduled jobs", 1, jobKeys.size());
    // delete a valid job
    scheduler.deleteJob(jobId);
    jobKeys = scheduler.getRawScheduler().getJobKeys(jobGroupEquals(Scheduler.DEFAULT_GROUP));
    assertEquals("Number of scheduled jobs", 0, jobKeys.size());
    // delete invalid job
    scheduler.deleteJob("nojob");
}
#end_block

#method_before
@Override
public void jobWasExecuted(JobExecutionContext context, JobExecutionException exception) {
    // Get the details of the job:
    JobDetail jobdetail = context.getJobDetail();
    JobDataMap data = jobdetail.getJobDataMap();
    // job and if not just exit:
    if (data.containsKey(SchedulerUtilQuartzImpl.FIXED_DELAY_ENABLED)) {
        boolean fixedDelayEnabled = data.getBoolean(SchedulerUtilQuartzImpl.FIXED_DELAY_ENABLED);
        if (!fixedDelayEnabled) {
            return;
        }
    }
    // generate the new trigger time
    long delay = data.getLongValue(SchedulerUtilQuartzImpl.FIXED_DELAY_VALUE);
    TimeUnit delayUnit = (TimeUnit) data.getWrappedMap().get(SchedulerUtilQuartzImpl.FIXED_DELAY_TIME_UNIT);
    Date runTime = SchedulerUtilQuartzImpl.getFutureDate(delay, delayUnit);
    // generate the new trigger
    Trigger oldTrigger = context.getTrigger();
    TriggerKey oldTriggerKey = oldTrigger.getKey();
    Trigger newTrigger = newTrigger().withIdentity(oldTriggerKey).startAt(runTime).build();
    // schedule the new trigger
    sched.rescheduleAJob(oldTriggerKey.getName(), oldTriggerKey.getGroup(), newTrigger);
// SchedulerUtilQuartzImpl.getInstance().rescheduleAJob(oldTriggerName,
// oldTriggerGroup, newTrigger);
}
#method_after
@Override
public void jobWasExecuted(JobExecutionContext context, JobExecutionException exception) {
    // Get the details of the job:
    JobDetail jobdetail = context.getJobDetail();
    JobDataMap data = jobdetail.getJobDataMap();
    // job and if not just exit:
    if (!data.containsKey(SchedulerUtilQuartzImpl.FIXED_DELAY_VALUE)) {
        return;
    }
    // generate the new trigger time
    long delay = data.getLongValue(SchedulerUtilQuartzImpl.FIXED_DELAY_VALUE);
    TimeUnit delayUnit = (TimeUnit) data.getWrappedMap().get(SchedulerUtilQuartzImpl.FIXED_DELAY_TIME_UNIT);
    Date runTime = SchedulerUtilQuartzImpl.getFutureDate(delay, delayUnit);
    // generate the new trigger
    Trigger oldTrigger = context.getTrigger();
    TriggerKey oldTriggerKey = oldTrigger.getKey();
    Trigger newTrigger = newTrigger().withIdentity(oldTriggerKey).startAt(runTime).build();
    // schedule the new trigger
    sched.rescheduleAJob(oldTriggerKey.getName(), oldTriggerKey.getGroup(), newTrigger);
// SchedulerUtilQuartzImpl.getInstance().rescheduleAJob(oldTriggerName,
// oldTriggerGroup, newTrigger);
}
#end_block

#method_before
@Override
public String scheduleAFixedDelayJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, long initialDelay, long taskDelay, TimeUnit timeUnit) {
    String jobName = generateUniqueNameForInstance(instance, methodName);
    JobDetail job = newJob().withIdentity(jobName, Scheduler.DEFAULT_GROUP).ofType(JobWrapper.class).build();
    JobDataMap data = job.getJobDataMap();
    data.put(RUNNABLE_INSTANCE, instance);
    data.put(RUN_METHOD_NAME, methodName);
    data.put(RUN_METHOD_PARAM_TYPE, inputTypes);
    data.put(RUN_METHOD_PARAM, inputParams);
    data.put(FIXED_DELAY_ENABLED, true);
    data.put(FIXED_DELAY_VALUE, taskDelay);
    data.put(FIXED_DELAY_TIME_UNIT, timeUnit);
    Date runTime = getFutureDate(initialDelay, timeUnit);
    String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
    Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).startAt(runTime).build();
    try {
        sched.scheduleJob(job, trigger);
    } catch (SchedulerException se) {
        log.error("failed to schedule job", se);
    }
    return jobName;
}
#method_after
@Override
public String scheduleAFixedDelayJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, long initialDelay, long taskDelay, TimeUnit timeUnit) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    JobDataMap data = job.getJobDataMap();
    data.put(FIXED_DELAY_VALUE, taskDelay);
    data.put(FIXED_DELAY_TIME_UNIT, timeUnit);
    Trigger trigger = createSimpleTrigger(initialDelay, timeUnit, instance);
    try {
        sched.scheduleJob(job, trigger);
    } catch (SchedulerException se) {
        log.error("failed to schedule job", se);
    }
    return job.getKey().getName();
}
#end_block

#method_before
@Override
public String scheduleAOneTimeJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, long initialDelay, TimeUnit timeUnit) {
    String jobName = generateUniqueNameForInstance(instance, methodName);
    JobDetail job = newJob().withIdentity(jobName, Scheduler.DEFAULT_GROUP).ofType(JobWrapper.class).build();
    JobDataMap data = job.getJobDataMap();
    data.put(RUNNABLE_INSTANCE, instance);
    data.put(RUN_METHOD_NAME, methodName);
    data.put(RUN_METHOD_PARAM, inputParams);
    data.put(RUN_METHOD_PARAM_TYPE, inputTypes);
    Date runTime = getFutureDate(initialDelay, timeUnit);
    String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
    Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).startAt(runTime).build();
    try {
        sched.scheduleJob(job, trigger);
    } catch (SchedulerException se) {
        log.error("failed to schedule job", se);
    }
    return jobName;
}
#method_after
@Override
public String scheduleAOneTimeJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, long initialDelay, TimeUnit timeUnit) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    Trigger trigger = createSimpleTrigger(initialDelay, timeUnit, instance);
    try {
        sched.scheduleJob(job, trigger);
    } catch (SchedulerException se) {
        log.error("failed to schedule job", se);
    }
    return job.getKey().getName();
}
#end_block

#method_before
@Override
public String scheduleACronJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, String cronExpression) {
    String jobName = generateUniqueNameForInstance(instance, methodName);
    JobDetail job = newJob().withIdentity(jobName, Scheduler.DEFAULT_GROUP).ofType(JobWrapper.class).build();
    JobDataMap data = job.getJobDataMap();
    data.put(RUNNABLE_INSTANCE, instance);
    data.put(RUN_METHOD_NAME, methodName);
    data.put(RUN_METHOD_PARAM, inputParams);
    data.put(RUN_METHOD_PARAM_TYPE, inputTypes);
    try {
        String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
        Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).build();
        sched.scheduleJob(job, trigger);
    } catch (Exception se) {
        log.error("failed to schedule job", se);
    }
    return jobName;
}
#method_after
@Override
public String scheduleACronJob(Object instance, String methodName, Class<?>[] inputTypes, Object[] inputParams, String cronExpression) {
    JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams);
    try {
        String triggerName = generateUniqueNameForInstance(instance, TRIGGER_PREFIX);
        Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).build();
        sched.scheduleJob(job, trigger);
    } catch (Exception se) {
        log.error("failed to schedule job", se);
    }
    return job.getKey().getName();
}
#end_block

#method_before
private TreeItem createDiskItem(DiskImage disk) {
    EntityModelCellTable<ListModel> table = new EntityModelCellTable<ListModel>(false, diskRowResources, true);
    Column<EntityModel, EntityModel> diskWithMappingColumn = new Column<EntityModel, EntityModel>(createDiskImageWithMappingComoisiteCell()) {

        @Override
        public EntityModel getValue(EntityModel object) {
            return object;
        }
    };
    TextColumn<EntityModel> paddingColumn = new TextColumn<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return "Disk" + asDisk(entity).getinternal_drive_mapping();
        }
    };
    TextColumnWithTooltip<EntityModel> virtualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return asDisk(entity).getSizeInGigabytes() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> actualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return ((Double) asDisk(entity).getActualDiskWithSnapshotsSize()).intValue() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> snapshotsColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return asDisk(entity).getSnapshots().size() + "";
        }
    };
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(diskWithMappingColumn, "diskWithMappingColumn", "39%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(paddingColumn, "paddingColumn", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(virtualSizeColumn, "virtualSizeColumn", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(actualSizeColumn, "actualSizeColumn", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(snapshotsColumn, "snapshotsColumn", "31%");
    EntityModel entityModel = new EntityModel();
    entityModel.setEntity(disk);
    table.setRowData(Arrays.asList(entityModel));
    return new TreeItem(table);
}
#method_after
private TreeItem createDiskItem(DiskImage disk) {
    EntityModelCellTable<ListModel> table = new EntityModelCellTable<ListModel>(false, diskRowResources, true);
    Column<EntityModel, EntityModel> diskWithMappingColumn = new Column<EntityModel, EntityModel>(createDiskImageWithMappingComoisiteCell()) {

        @Override
        public EntityModel getValue(EntityModel object) {
            return object;
        }
    };
    TextColumn<EntityModel> paddingColumn = new TextColumn<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return "Disk" + asDisk(entity).getinternal_drive_mapping();
        }
    };
    TextColumnWithTooltip<EntityModel> virtualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return asDisk(entity).getSizeInGigabytes() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> actualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return ((Double) asDisk(entity).getActualDiskWithSnapshotsSize()).intValue() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> snapshotsColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return asDisk(entity).getSnapshots().size() + "";
        }
    };
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(diskWithMappingColumn, "", "39%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(paddingColumn, "", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(virtualSizeColumn, "", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(actualSizeColumn, "", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(snapshotsColumn, "", "31%");
    EntityModel entityModel = new EntityModel();
    entityModel.setEntity(disk);
    table.setRowData(Arrays.asList(entityModel));
    return new TreeItem(table);
}
#end_block

#method_before
private VmTreeItem createVmItem(VM vm) {
    EntityModelCellTable<ListModel> table = new EntityModelCellTable<ListModel>(false, vmRowResources, true);
    Column<EntityModel, EntityModel> vmImageWithNameColumn = new Column<EntityModel, EntityModel>(createVmImageWithNameCompositeCell()) {

        @Override
        public EntityModel getValue(EntityModel object) {
            return object;
        }
    };
    TextColumnWithTooltip<EntityModel> diskSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return asVm(entity).getDiskList().size() + "";
        }
    };
    TextColumnWithTooltip<EntityModel> virtualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return ((Double) asVm(entity).getDiskSize()).intValue() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> actualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return ((Double) asVm(entity).getActualDiskWithSnapshotsSize()).intValue() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> snapshotsColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            return asVm(entity).getDiskList().size() > 0 ? asVm(entity).getDiskList().get(0).getSnapshots().size() + "" : // $NON-NLS-1$ //$NON-NLS-2$
            "0";
        }
    };
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(vmImageWithNameColumn, "vmImageWithNameColumn", "39%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(diskSizeColumn, "diskSizeColumn", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(virtualSizeColumn, "virtualSizeColumn", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(actualSizeColumn, "actualSizeColumn", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(snapshotsColumn, "snapshotsColumn", "31%");
    table.setSelectionModel(vmSelectionModel);
    EntityModel entityModel = new EntityModel();
    entityModel.setEntity(vm);
    table.setRowData(Arrays.asList(entityModel));
    return new VmTreeItem(table, vm);
}
#method_after
private VmTreeItem createVmItem(VM vm) {
    EntityModelCellTable<ListModel> table = new EntityModelCellTable<ListModel>(false, vmRowResources, true);
    Column<EntityModel, EntityModel> vmImageWithNameColumn = new Column<EntityModel, EntityModel>(createVmImageWithNameCompositeCell()) {

        @Override
        public EntityModel getValue(EntityModel object) {
            return object;
        }
    };
    TextColumnWithTooltip<EntityModel> diskSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return asVm(entity).getDiskList().size() + "";
        }
    };
    TextColumnWithTooltip<EntityModel> virtualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return ((Double) asVm(entity).getDiskSize()).intValue() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> actualSizeColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            // $NON-NLS-1$
            return ((Double) asVm(entity).getActualDiskWithSnapshotsSize()).intValue() + "GB";
        }
    };
    TextColumnWithTooltip<EntityModel> snapshotsColumn = new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel entity) {
            return asVm(entity).getDiskList().size() > 0 ? asVm(entity).getDiskList().get(0).getSnapshots().size() + "" : // $NON-NLS-1$ //$NON-NLS-2$
            "0";
        }
    };
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(vmImageWithNameColumn, "", "39%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(diskSizeColumn, "", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(virtualSizeColumn, "", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(actualSizeColumn, "", "10%");
    // $NON-NLS-1$ //$NON-NLS-2$
    table.addColumn(snapshotsColumn, "", "31%");
    table.setSelectionModel(vmSelectionModel);
    EntityModel entityModel = new EntityModel();
    entityModel.setEntity(vm);
    table.setRowData(Arrays.asList(entityModel));
    return new VmTreeItem(table, vm);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // add user session
    // todo : insert correct values of all arguments, separate
    HandleUserSession(_adUser);
    setActionReturnValue(getCurrentUser());
    getReturnValue().setLoginResult(LoginResult.Autheticated);
    // Permissions for this user might been changed since last login so
    // update hiss isAdmin flag accordingly
    updateUserData();
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    // add user session
    // todo : insert correct values of all arguments, separate
    HandleUserSession(_adUser);
    setActionReturnValue(getCurrentUser());
    getReturnValue().setLoginResult(LoginResult.Autheticated);
    // Permissions for this user might been changed since last login so
    // update his isAdmin flag accordingly
    updateUserData();
    setSucceeded(true);
}
#end_block

#method_before
@Test
public void testAdUserConstrcutor() {
    VdcUser user = new VdcUser(adUser);
    assertFalse("By default, a user should not be an admin", user.isAdmin());
    user.setIsAdmin(true);
    assertTrue("after being set as such, the user should be an admin", user.isAdmin());
}
#method_after
@Test
public void testAdUserConstrcutor() {
    VdcUser user = new VdcUser(adUser);
    assertFalse("By default, a user should not be an admin", user.isAdmin());
    user.setAdmin(true);
    assertTrue("after being set as such, the user should be an admin", user.isAdmin());
}
#end_block

#method_before
@Test
public void testAdUserAndFalseBooleanConstrcutor() {
    VdcUser user = new VdcUser(adUser, false);
    assertFalse("If not set, a user should not be an admin", user.isAdmin());
    user.setIsAdmin(true);
    assertTrue("after being set as such, the user should be an admin", user.isAdmin());
}
#method_after
@Test
public void testAdUserAndFalseBooleanConstrcutor() {
    VdcUser user = new VdcUser(adUser, false);
    assertFalse("If not set, a user should not be an admin", user.isAdmin());
    user.setAdmin(true);
    assertTrue("after being set as such, the user should be an admin", user.isAdmin());
}
#end_block

#method_before
@Test
public void testAdUserAndTrueBooleanConstrcutor() {
    VdcUser user = new VdcUser(adUser, true);
    assertTrue("If set, a user should not be an admin", user.isAdmin());
    user.setIsAdmin(false);
    assertFalse("after being set not to be, the user should be an admin", user.isAdmin());
}
#method_after
@Test
public void testAdUserAndTrueBooleanConstrcutor() {
    VdcUser user = new VdcUser(adUser, true);
    assertTrue("If set, a user should not be an admin", user.isAdmin());
    user.setAdmin(false);
    assertFalse("after being set not to be, the user should be an admin", user.isAdmin());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // add user session
    // todo : insert correct values of all arguments, separate
    HandleUserSession(_adUser);
    setActionReturnValue(getCurrentUser());
    ((VdcLoginReturnValueBase) getReturnValue()).setLoginResult(LoginResult.Autheticated);
    // Permissions for this user might been changed since last login so
    // update hiss isAdmin flag accordingly
    updateUserData();
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    // add user session
    // todo : insert correct values of all arguments, separate
    HandleUserSession(_adUser);
    setActionReturnValue(getCurrentUser());
    ((VdcLoginReturnValueBase) getReturnValue()).setLoginResult(LoginResult.Autheticated);
    // Permissions for this user might been changed since last login so
    // update his isAdmin flag accordingly
    updateUserData();
    setSucceeded(true);
}
#end_block

#method_before
@Override
public void edit(VolumeBrickModel object) {
    table.setRowData(new ArrayList<ListModel>());
    table.edit(object.getBricks());
    Driver.driver.edit(object);
}
#method_after
@Override
public void edit(VolumeBrickModel object) {
    table.edit(object.getBricks());
    Driver.driver.edit(object);
}
#end_block

#method_before
public void addBricks() {
    if (getWindow() != null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(this.getReplicaCount().getEntity());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(this.getReplicaCount().getIsAvailable());
    volumeBrickModel.getStripeCount().setEntity(this.getStripeCount().getEntity());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(this.getStripeCount().getIsAvailable());
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#method_after
public void addBricks() {
    if (getWindow() != null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(getReplicaCount().getEntity());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(getReplicaCount().getIsAvailable());
    volumeBrickModel.getStripeCount().setEntity(getStripeCount().getEntity());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(getStripeCount().getIsAvailable());
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#end_block

#method_before
private void onAddBricks() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    if (!volumeBrickModel.validateAddBricks((GlusterVolumeType) this.getTypeList().getSelectedItem())) {
        return;
    }
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object object : volumeBrickModel.getBricks().getSelectedItems()) {
        EntityModel entityModel = (EntityModel) object;
        brickList.add((GlusterBrickEntity) entityModel.getEntity());
    }
    ListModel brickListModel = new ListModel();
    brickListModel.setItems(brickList);
    setBricks(brickListModel);
    setWindow(null);
}
#method_after
private void onAddBricks() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    if (!volumeBrickModel.validateAddBricks((GlusterVolumeType) getTypeList().getSelectedItem())) {
        return;
    }
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object object : volumeBrickModel.getBricks().getSelectedItems()) {
        EntityModel entityModel = (EntityModel) object;
        brickList.add((GlusterBrickEntity) entityModel.getEntity());
    }
    ListModel brickListModel = new ListModel();
    brickListModel.setItems(brickList);
    setBricks(brickListModel);
    setWindow(null);
}
#end_block

#method_before
private void updateActionAvailability() {
    getRemoveVolumeCommand().setIsExecutionAllowed(getSelectedItem() != null);
    getStartCommand().setIsExecutionAllowed(getSelectedItem() != null);
    getStopCommand().setIsExecutionAllowed(getSelectedItem() != null);
    getRebalanceCommand().setIsExecutionAllowed(getSelectedItem() != null);
}
#method_after
private void updateActionAvailability() {
    GlusterVolumeEntity volume = (GlusterVolumeEntity) getSelectedItem();
    getRemoveVolumeCommand().setIsExecutionAllowed(getSelectedItem() != null);
    getStartCommand().setIsExecutionAllowed(volume != null && volume.getStatus() != GlusterVolumeStatus.UP);
    getStopCommand().setIsExecutionAllowed(getSelectedItem() != null);
    getRebalanceCommand().setIsExecutionAllowed(getSelectedItem() != null);
}
#end_block

#method_before
private void start() {
    if (getSelectedItem() == null) {
        return;
    }
    GlusterVolumeEntity volume = (GlusterVolumeEntity) getSelectedItem();
// Frontend.RunAction(VdcActionType.StartGlusterVolume, new GlusterVolumeParameters(clusterId,
// volume.getName()));
}
#method_after
private void start() {
    if (getSelectedItem() == null) {
        return;
    }
    GlusterVolumeEntity volume = (GlusterVolumeEntity) getSelectedItem();
    Frontend.RunAction(VdcActionType.StartGlusterVolume, new GlusterVolumeActionParameters(volume.getId(), false));
}
#end_block

#method_before
private void onCreateVolume() {
    VolumeModel model = (VolumeModel) getWindow();
    Guid clusterId = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    GlusterVolumeEntity volume = new GlusterVolumeEntity();
    volume.setClusterId(clusterId);
    volume.setName((String) model.getName().getEntity());
    GlusterVolumeType type = (GlusterVolumeType) model.getTypeList().getSelectedItem();
    if (type == GlusterVolumeType.STRIPE || type == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        volume.setStripeCount(Integer.parseInt((String) model.getStripeCount().getEntity()));
    } else if (type == GlusterVolumeType.REPLICATE || type == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        volume.setReplicaCount(Integer.parseInt((String) model.getReplicaCount().getEntity()));
    }
    volume.setVolumeType(type);
    if ((Boolean) model.getTcpTransportType().getEntity())
        volume.getTransportTypes().add(TransportType.TCP);
    if ((Boolean) model.getRdmaTransportType().getEntity())
        volume.getTransportTypes().add(TransportType.RDMA);
    volume.setBricks((List<GlusterBrickEntity>) model.getBricks().getItems());
    if ((Boolean) model.getNfs_accecssProtocol().getEntity())
        volume.enableNFS();
    else
        volume.disableNFS();
    if ((Boolean) model.getCifs_accecssProtocol().getEntity())
        volume.enableCifs();
    else
        volume.disableCifs();
    volume.setAccessControlList((String) model.getAllowAccess().getEntity());
    CreateGlusterVolumeParameters parameter = new CreateGlusterVolumeParameters(volume);
    Frontend.RunAction(VdcActionType.CreateGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
        }
    });
}
#method_after
private void onCreateVolume() {
    VolumeModel model = (VolumeModel) getWindow();
    Guid clusterId = ((VDSGroup) model.getCluster().getSelectedItem()).getId();
    GlusterVolumeEntity volume = new GlusterVolumeEntity();
    volume.setClusterId(clusterId);
    volume.setName((String) model.getName().getEntity());
    GlusterVolumeType type = (GlusterVolumeType) model.getTypeList().getSelectedItem();
    if (type == GlusterVolumeType.STRIPE || type == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        volume.setStripeCount(model.getStripeCountValue());
    } else if (type == GlusterVolumeType.REPLICATE || type == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        volume.setReplicaCount(model.getReplicaCountValue());
    }
    volume.setVolumeType(type);
    if ((Boolean) model.getTcpTransportType().getEntity())
        volume.getTransportTypes().add(TransportType.TCP);
    if ((Boolean) model.getRdmaTransportType().getEntity())
        volume.getTransportTypes().add(TransportType.RDMA);
    volume.setBricks((List<GlusterBrickEntity>) model.getBricks().getItems());
    if ((Boolean) model.getNfs_accecssProtocol().getEntity())
        volume.enableNFS();
    else
        volume.disableNFS();
    if ((Boolean) model.getCifs_accecssProtocol().getEntity())
        volume.enableCifs();
    else
        volume.disableCifs();
    volume.setAccessControlList((String) model.getAllowAccess().getEntity());
    CreateGlusterVolumeParameters parameter = new CreateGlusterVolumeParameters(volume);
    Frontend.RunAction(VdcActionType.CreateGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
        }
    });
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    getQueryReturnValue().setReturnValue(DbFacade.getInstance().getGlusterVolumeDao().getById(getParameters().getVolumeId()));
}
#method_after
@Override
protected void executeQueryCommand() {
    getQueryReturnValue().setReturnValue(getGlusterVolumeDao().getById(getParameters().getVolumeId()));
}
#end_block

#method_before
private void UpdateVmNetworks() {
    VmStatic dbVm = DbFacade.getInstance().getVmStaticDAO().get(getParameters().getVmStaticData().getId());
    // check if the cluster has changed
    if (!dbVm.getvds_group_id().equals(getParameters().getVmStaticData().getvds_group_id())) {
        List<network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(getParameters().getVmStaticData().getvds_group_id());
        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getParameters().getVmStaticData().getId());
        for (final VmNetworkInterface iface : interfaces) {
            // LINQ 29456
            // network net = networks.FirstOrDefault(n => iface.network_name
            // == n.name);
            // // if network not exists in cluster we remove the network to
            // interface connection
            // if (net == null)
            // {
            // iface.network_name = null;
            // DbFacade.Instance.updateVmInterface(iface.InterfaceDynamic);
            // }
            network net = LinqUtils.firstOrNull(networks, new Predicate<network>() {

                @Override
                public boolean eval(network n) {
                    return iface.getNetworkName().equals(n.getname());
                }
            });
            // interface connection
            if (net == null) {
                iface.setNetworkName(null);
                DbFacade.getInstance().getVmNetworkInterfaceDAO().update(iface);
            }
        }
    }
}
#method_after
private void UpdateVmNetworks() {
    VmStatic dbVm = DbFacade.getInstance().getVmStaticDAO().get(getParameters().getVmStaticData().getId());
    // check if the cluster has changed
    if (!dbVm.getvds_group_id().equals(getParameters().getVmStaticData().getvds_group_id())) {
        List<network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(getParameters().getVmStaticData().getvds_group_id());
        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getParameters().getVmStaticData().getId());
        for (final VmNetworkInterface iface : interfaces) {
            network net = LinqUtils.firstOrNull(networks, new Predicate<network>() {

                @Override
                public boolean eval(network n) {
                    return iface.getNetworkName().equals(n.getname());
                }
            });
            // interface connection
            if (net == null) {
                iface.setNetworkName(null);
                DbFacade.getInstance().getVmNetworkInterfaceDAO().update(iface);
            }
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue = false;
    List<ValidationError> validationErrors = null;
    String vmName = getParameters().getVm().getvm_name();
    if (vmName == null || vmName.isEmpty()) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    } else {
        // check that VM name is not too long
        boolean vmNameValidLength = isVmNameValidLength(getParameters().getVm());
        if (!vmNameValidLength) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        } else if (getVm().getStaticData() != null) {
            VM vm = DbFacade.getInstance().getVmDAO().getById(getVm().getStaticData().getId());
            // Checking if a desktop with same name already exists
            VmStatic vmStaticDataFromParams = getParameters().getVmStaticData();
            boolean exists = (Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(vmStaticDataFromParams.getvm_name())).getReturnValue();
            if (exists && (!StringHelper.EqOp(vm.getvm_name(), vmStaticDataFromParams.getvm_name()))) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST);
            } else if (!(validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(DbFacade.getInstance().getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams)).isEmpty()) {
                handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
            } else if (vmStaticDataFromParams.getauto_startup() && vmStaticDataFromParams.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString());
            } else if (VmHandler.isMemorySizeLegal(vmStaticDataFromParams.getos(), vmStaticDataFromParams.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
                if (StringHelper.EqOp(vmStaticDataFromParams.getvm_name(), "")) {
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_NAME_CANNOT_BE_EMPTY.toString());
                } else if (vm != null) {
                    setCustomDefinedProperties(vmStaticDataFromParams);
                    setCustomDefinedProperties(getVm().getStaticData());
                    retValue = VmHandler.mUpdateVmsStatic.IsUpdateValid(getVm().getStaticData(), vmStaticDataFromParams, vm.getstatus());
                    if (!retValue) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
                    } else if (!getVm().getStaticData().getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
                        retValue = false;
                    }
                    if (vmStaticDataFromParams.getdedicated_vm_for_vds() != null) {
                        VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vmStaticDataFromParams.getdedicated_vm_for_vds().toString()));
                        // if vds doesnt exist or not the same cluster
                        if (vds == null || !vds.getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_DEFAULT_VDS_NOT_VALID);
                            retValue = false;
                        }
                    }
                    // Check if number of monitors passed is legal
                    if (!VmHandler.isNumOfMonitorsLegal(vmStaticDataFromParams.getdefault_display_type(), vmStaticDataFromParams.getnum_of_monitors(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (vm.getnum_of_monitors() < vmStaticDataFromParams.getnum_of_monitors()) {
                        // LINQ 29456
                        // List<DiskImageBase> allDisks =
                        // DbFacade.Instance.GetImagesByVmGuid(VmId).Select(a
                        // =>
                        // (DiskImageBase)a).ToList();
                        // List<Interface> interfaces =
                        // DbFacade.Instance.getIterfacesByVmId(VmId);
                        // retValue =
                        // CheckPCIAndIDELimit(VmManagementParameters.VmStaticData.num_of_monitors,
                        // interfaces, allDisks);
                        List allDisks = DbFacade.getInstance().getDiskImageDAO().getAllForVm(getVmId());
                        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getVmId());
                        retValue = retValue && CheckPCIAndIDELimit(vmStaticDataFromParams.getnum_of_monitors(), interfaces, allDisks, getReturnValue().getCanDoActionMessages());
                    }
                    if (!VmTemplateCommand.IsVmPriorityValueLegal(vmStaticDataFromParams.getpriority(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (retValue && vm.getVmPoolId() != null && vmStaticDataFromParams.getis_stateless()) {
                        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
                        retValue = false;
                    }
                }
            }
            if (retValue) {
                retValue = AddVmCommand.CheckCpuSockets(vmStaticDataFromParams.getnum_of_sockets(), vmStaticDataFromParams.getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
            }
            // Check id dedicated host is same as VM cluster
            if (retValue) {
                retValue = isDedicatedVdsOnSameCluster(getParameters().getVmStaticData());
            }
        }
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue = false;
    List<ValidationError> validationErrors = null;
    String vmName = getParameters().getVm().getvm_name();
    if (vmName == null || vmName.isEmpty()) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    } else {
        // check that VM name is not too long
        boolean vmNameValidLength = isVmNameValidLength(getParameters().getVm());
        if (!vmNameValidLength) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        } else if (getVm().getStaticData() != null) {
            VM vm = DbFacade.getInstance().getVmDAO().get(getVm().getStaticData().getId());
            // Checking if a desktop with same name already exists
            VmStatic vmStaticDataFromParams = getParameters().getVmStaticData();
            boolean exists = (Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(vmStaticDataFromParams.getvm_name())).getReturnValue();
            if (exists && (!StringHelper.EqOp(vm.getvm_name(), vmStaticDataFromParams.getvm_name()))) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST);
            } else if (!(validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams)).isEmpty()) {
                handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
            } else if (vmStaticDataFromParams.getauto_startup() && vmStaticDataFromParams.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString());
            } else if (VmHandler.isMemorySizeLegal(vmStaticDataFromParams.getos(), vmStaticDataFromParams.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
                if (StringHelper.EqOp(vmStaticDataFromParams.getvm_name(), "")) {
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_NAME_CANNOT_BE_EMPTY.toString());
                } else if (vm != null) {
                    setCustomDefinedProperties(vmStaticDataFromParams);
                    setCustomDefinedProperties(getVm().getStaticData());
                    retValue = VmHandler.mUpdateVmsStatic.IsUpdateValid(getVm().getStaticData(), vmStaticDataFromParams, vm.getstatus());
                    if (!retValue) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
                    } else if (!getVm().getStaticData().getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
                        retValue = false;
                    }
                    if (vmStaticDataFromParams.getdedicated_vm_for_vds() != null) {
                        VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vmStaticDataFromParams.getdedicated_vm_for_vds().toString()));
                        // if vds doesnt exist or not the same cluster
                        if (vds == null || !vds.getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_DEFAULT_VDS_NOT_VALID);
                            retValue = false;
                        }
                    }
                    // Check if number of monitors passed is legal
                    if (!VmHandler.isNumOfMonitorsLegal(vmStaticDataFromParams.getdefault_display_type(), vmStaticDataFromParams.getnum_of_monitors(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (vm.getnum_of_monitors() < vmStaticDataFromParams.getnum_of_monitors()) {
                        List allDisks = DbFacade.getInstance().getDiskImageDAO().getAllForVm(getVmId());
                        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getVmId());
                        retValue = retValue && CheckPCIAndIDELimit(vmStaticDataFromParams.getnum_of_monitors(), interfaces, allDisks, getReturnValue().getCanDoActionMessages());
                    }
                    if (!VmTemplateCommand.IsVmPriorityValueLegal(vmStaticDataFromParams.getpriority(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (retValue && vm.getVmPoolId() != null && vmStaticDataFromParams.getis_stateless()) {
                        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
                        retValue = false;
                    }
                }
            }
            if (retValue) {
                retValue = AddVmCommand.CheckCpuSockets(vmStaticDataFromParams.getnum_of_sockets(), vmStaticDataFromParams.getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
            }
            // Check id dedicated host is same as VM cluster
            if (retValue) {
                retValue = isDedicatedVdsOnSameCluster(getParameters().getVmStaticData());
            }
        }
    }
    return retValue;
}
#end_block

#method_before
private void setCustomDefinedProperties(VmStatic vmStaticDataFromParams) {
    VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(DbFacade.getInstance().getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams.getCustomProperties());
    vmStaticDataFromParams.setPredefinedProperties(properties.getPredefinedProperties());
    vmStaticDataFromParams.setUserDefinedProperties(properties.getUseDefinedProperties());
}
#method_after
private void setCustomDefinedProperties(VmStatic vmStaticDataFromParams) {
    VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams.getCustomProperties());
    vmStaticDataFromParams.setPredefinedProperties(properties.getPredefinedProperties());
    vmStaticDataFromParams.setUserDefinedProperties(properties.getUseDefinedProperties());
}
#end_block

#method_before
public static boolean CheckPCIAndIDELimit(int monitorsNumber, List<VmNetworkInterface> interfaces, List<DiskImageBase> disks, ArrayList<String> messages) {
    boolean result = true;
    // this adds: monitors + 2 * (interfaces with type rtl_pv) + (all other
    // interfaces) + (all disks that are not IDE)
    // LINQ 29456
    // int pciInUse = monitorsNumber + interfaces.Select(a =>
    // (a.type.HasValue &&
    // (VmInterfaceType)a.type.Value == VmInterfaceType.rtl8139_pv) ? 2 :
    // 1).Sum() +
    // disks.Where(a => a.disk_interface != DiskInterface.IDE).Count();
    int pciInUse = monitorsNumber;
    for (VmNetworkInterface a : interfaces) {
        if (a.getType() != null && VmInterfaceType.forValue(a.getType()) == VmInterfaceType.rtl8139_pv)
            pciInUse += 2;
        else
            pciInUse += 1;
    }
    pciInUse += LinqUtils.filter(disks, new Predicate<DiskImageBase>() {

        @Override
        public boolean eval(DiskImageBase a) {
            return a.getdisk_interface() != DiskInterface.IDE;
        }
    }).size();
    if (pciInUse > MAX_PCI_SLOTS) {
        result = false;
        messages.add(VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_PCI_SLOTS.name());
    } else // DiskInterface.IDE).Count() > MAX_IDE_SLOTS)
    if (MAX_IDE_SLOTS < LinqUtils.filter(disks, new Predicate<DiskImageBase>() {

        @Override
        public boolean eval(DiskImageBase a) {
            return a.getdisk_interface() == DiskInterface.IDE;
        }
    }).size()) {
        result = false;
        messages.add(VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_IDE_SLOTS.name());
    }
    return result;
}
#method_after
public static <T extends Disk> boolean CheckPCIAndIDELimit(int monitorsNumber, List<VmNetworkInterface> interfaces, List<T> disks, ArrayList<String> messages) {
    boolean result = true;
    // this adds: monitors + 2 * (interfaces with type rtl_pv) + (all other
    // interfaces) + (all disks that are not IDE)
    int pciInUse = monitorsNumber;
    for (VmNetworkInterface a : interfaces) {
        if (a.getType() != null && VmInterfaceType.forValue(a.getType()) == VmInterfaceType.rtl8139_pv)
            pciInUse += 2;
        else
            pciInUse += 1;
    }
    pciInUse += LinqUtils.filter(disks, new Predicate<T>() {

        @Override
        public boolean eval(T a) {
            return a.getDiskInterface() != DiskInterface.IDE;
        }
    }).size();
    if (pciInUse > MAX_PCI_SLOTS) {
        result = false;
        messages.add(VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_PCI_SLOTS.name());
    } else if (MAX_IDE_SLOTS < LinqUtils.filter(disks, new Predicate<T>() {

        @Override
        public boolean eval(T a) {
            return a.getDiskInterface() == DiskInterface.IDE;
        }
    }).size()) {
        result = false;
        messages.add(VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_IDE_SLOTS.name());
    }
    return result;
}
#end_block

#method_before
public static boolean UpdateVmInSpm(Guid storagePoolId, List<VM> vmsList, Guid storageDomainId) {
    java.util.HashMap<Guid, KeyValuePairCompat<String, List<Guid>>> vmsAndMetaDictionary = new java.util.HashMap<Guid, KeyValuePairCompat<String, List<Guid>>>(vmsList.size());
    OvfManager ovfManager = new OvfManager();
    for (VM vm : vmsList) {
        java.util.ArrayList<DiskImage> AllVmImages = new java.util.ArrayList<DiskImage>();
        VmHandler.updateDisksFromDb(vm);
        if (vm.getInterfaces() == null || vm.getInterfaces().isEmpty()) {
            vm.setInterfaces(DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()));
        }
        for (DiskImage disk : vm.getDiskMap().values()) {
            AllVmImages.addAll(ImagesHandler.getAllImageSnapshots(disk.getId(), disk.getit_guid()));
        }
        if (StringHelper.isNullOrEmpty(vm.getvmt_name())) {
            VmTemplate t = DbFacade.getInstance().getVmTemplateDAO().get(vm.getvmt_guid());
            vm.setvmt_name(t.getname());
        }
        String vmMeta = "";
        // OVF Uncomment next line when OVF support is added
        RefObject<String> tempRefObject = new RefObject<String>(vmMeta);
        ovfManager.ExportVm(tempRefObject, vm, AllVmImages);
        vmMeta = tempRefObject.argvalue;
        // LINQ 29456
        // vmsAndMetaDictionary.Add(vm.vm_guid, new KeyValuePair<string,
        // List<Guid>>
        // (vmMeta, vm.DiskMap.Values.Select(a =>
        // a.image_group_id.Value).ToList()));
        vmsAndMetaDictionary.put(vm.getId(), new KeyValuePairCompat<String, List<Guid>>(vmMeta, LinqUtils.foreach(vm.getDiskMap().values(), new Function<DiskImage, Guid>() {

            @Override
            public Guid eval(DiskImage a) {
                return a.getimage_group_id().getValue();
            }
        })));
    }
    UpdateVMVDSCommandParameters tempVar = new UpdateVMVDSCommandParameters(storagePoolId, vmsAndMetaDictionary);
    tempVar.setStorageDomainId(storageDomainId);
    return Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVM, tempVar).getSucceeded();
}
#method_after
public static boolean UpdateVmInSpm(Guid storagePoolId, List<VM> vmsList, Guid storageDomainId) {
    java.util.HashMap<Guid, KeyValuePairCompat<String, List<Guid>>> vmsAndMetaDictionary = new java.util.HashMap<Guid, KeyValuePairCompat<String, List<Guid>>>(vmsList.size());
    OvfManager ovfManager = new OvfManager();
    for (VM vm : vmsList) {
        java.util.ArrayList<DiskImage> AllVmImages = new java.util.ArrayList<DiskImage>();
        VmHandler.updateDisksFromDb(vm);
        if (vm.getInterfaces() == null || vm.getInterfaces().isEmpty()) {
            vm.setInterfaces(DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()));
        }
        for (Disk disk : vm.getDiskMap().values()) {
            if (DiskStorageType.IMAGE == disk.getDiskStorageType()) {
                DiskImage diskImage = (DiskImage) disk;
                AllVmImages.addAll(ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getit_guid()));
            }
        }
        if (StringHelper.isNullOrEmpty(vm.getvmt_name())) {
            VmTemplate t = DbFacade.getInstance().getVmTemplateDAO().get(vm.getvmt_guid());
            vm.setvmt_name(t.getname());
        }
        String vmMeta = "";
        // OVF Uncomment next line when OVF support is added
        RefObject<String> tempRefObject = new RefObject<String>(vmMeta);
        ovfManager.ExportVm(tempRefObject, vm, AllVmImages);
        vmMeta = tempRefObject.argvalue;
        vmsAndMetaDictionary.put(vm.getId(), new KeyValuePairCompat<String, List<Guid>>(vmMeta, LinqUtils.foreach(vm.getDiskMap().values(), new Function<Disk, Guid>() {

            @Override
            public Guid eval(Disk a) {
                return a.getId();
            }
        })));
    }
    UpdateVMVDSCommandParameters tempVar = new UpdateVMVDSCommandParameters(storagePoolId, vmsAndMetaDictionary);
    tempVar.setStorageDomainId(storageDomainId);
    return Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVM, tempVar).getSucceeded();
}
#end_block

#method_before
protected boolean HandleHibernatedVm(VdcActionType parentCommand, boolean startPollingTasks) {
    // this is temp code until it will be implmented in SPM
    // LINQ 29456
    // Guid[] imagesList = Vm.hibernation_vol_handle.Split(',').Select(a =>
    // new Guid(a)).ToArray();
    String[] strings = getVm().gethibernation_vol_handle().split(",");
    List<Guid> guids = new LinkedList<Guid>();
    for (String string : strings) {
        guids.add(new Guid(string));
    }
    Guid[] imagesList = guids.toArray(new Guid[0]);
    if (imagesList.length == 6) {
        // get all vm disks in order to check post zero - if one of the
        // disks is marked with wipe_after_delete
        // boolean postZero = false; //LINQ
        // DbFacade.Instance.GetImagesByVmGuid(Vm.vm_guid).Exists(a =>
        // a.wipe_after_delete);
        boolean postZero = LinqUtils.filter(DbFacade.getInstance().getDiskImageDAO().getAllForVm(getVm().getId()), new Predicate<DiskImage>() {

            @Override
            public boolean eval(DiskImage diskImage) {
                return diskImage.getwipe_after_delete();
            }
        }).size() > 0;
        // delete first image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue1 = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[2], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue1.getSucceeded()) {
            return false;
        }
        Guid guid1 = CreateTask(vdsRetValue1.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid1);
        // delete second image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue2 = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[4], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue2.getSucceeded()) {
            if (startPollingTasks) {
                UpdateTasksWithActionParameters();
                AsyncTaskManager.getInstance().StartPollingTask(guid1);
            }
            return false;
        }
        Guid guid2 = CreateTask(vdsRetValue2.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid2);
        if (startPollingTasks) {
            UpdateTasksWithActionParameters();
            AsyncTaskManager.getInstance().StartPollingTask(guid1);
            AsyncTaskManager.getInstance().StartPollingTask(guid2);
        }
    }
    return true;
}
#method_after
protected boolean HandleHibernatedVm(VdcActionType parentCommand, boolean startPollingTasks) {
    // this is temp code until it will be implmented in SPM
    String[] strings = getVm().gethibernation_vol_handle().split(",");
    List<Guid> guids = new LinkedList<Guid>();
    for (String string : strings) {
        guids.add(new Guid(string));
    }
    Guid[] imagesList = guids.toArray(new Guid[0]);
    if (imagesList.length == 6) {
        // get all vm disks in order to check post zero - if one of the
        // disks is marked with wipe_after_delete
        boolean postZero = LinqUtils.filter(DbFacade.getInstance().getDiskImageDAO().getAllForVm(getVm().getId()), new Predicate<DiskImage>() {

            @Override
            public boolean eval(DiskImage diskImage) {
                return diskImage.isWipeAfterDelete();
            }
        }).size() > 0;
        // delete first image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue1 = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[2], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue1.getSucceeded()) {
            return false;
        }
        Guid guid1 = CreateTask(vdsRetValue1.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid1);
        // delete second image
        // the next 'DeleteImageGroup' command should also take care of the
        // image removal:
        VDSReturnValue vdsRetValue2 = Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(imagesList[1], imagesList[0], imagesList[4], postZero, false, getVm().getvds_group_compatibility_version().toString()));
        if (!vdsRetValue2.getSucceeded()) {
            if (startPollingTasks) {
                UpdateTasksWithActionParameters();
                AsyncTaskManager.getInstance().StartPollingTask(guid1);
            }
            return false;
        }
        Guid guid2 = CreateTask(vdsRetValue2.getCreationInfo(), parentCommand);
        getTaskIdList().add(guid2);
        if (startPollingTasks) {
            UpdateTasksWithActionParameters();
            AsyncTaskManager.getInstance().StartPollingTask(guid1);
            AsyncTaskManager.getInstance().StartPollingTask(guid2);
        }
    }
    return true;
}
#end_block

#method_before
protected List<DiskImageBase> getVmDisks() {
    if (_vmDisks == null) {
        _vmDisks = LinqUtils.foreach(DbFacade.getInstance().getDiskImageDAO().getAllForVm(getVmTemplateId()), new Function<DiskImage, DiskImageBase>() {

            @Override
            public DiskImageBase eval(DiskImage diskImageTemplate) {
                return DbFacade.getInstance().getDiskImageDAO().getSnapshotById(diskImageTemplate.getId());
            }
        });
    }
    return _vmDisks;
}
#method_after
protected List<? extends Disk> getVmDisks() {
    if (_vmDisks == null) {
        _vmDisks = DbFacade.getInstance().getDiskImageDAO().getAllForVm(getVmTemplateId());
    }
    return _vmDisks;
}
#end_block

#method_before
protected boolean CanAddVm(ArrayList<String> reasons, Collection<storage_domains> destStorages) {
    VmStatic vmStaticFromParams = getParameters().getVmStaticData();
    boolean returnValue = canAddVm(reasons, 1, vmStaticFromParams.getvm_name(), getStoragePoolId().getValue(), vmStaticFromParams.getpriority());
    if (returnValue) {
        List<ValidationError> validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(DbFacade.getInstance().getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticFromParams);
        if (!validationErrors.isEmpty()) {
            handleCustomPropertiesError(validationErrors, reasons);
            returnValue = false;
        }
    }
    if (returnValue && shouldCheckSpaceInStorageDomains()) {
        if (!getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer())) {
            reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString());
            returnValue = false;
        } else {
            for (storage_domains domain : destStorages) {
                if (!StorageDomainSpaceChecker.isBelowThresholds(domain)) {
                    returnValue = false;
                    reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString());
                    break;
                } else if (!StorageDomainSpaceChecker.hasSpaceForRequest(domain, getNeededDiskSize(domain.getId()))) {
                    returnValue = false;
                    reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString());
                    break;
                }
            }
        }
    }
    if (returnValue) {
        returnValue = isDedicatedVdsOnSameCluster(vmStaticFromParams);
    }
    return returnValue;
}
#method_after
protected boolean CanAddVm(ArrayList<String> reasons, Collection<storage_domains> destStorages) {
    VmStatic vmStaticFromParams = getParameters().getVmStaticData();
    boolean returnValue = canAddVm(reasons, 1, vmStaticFromParams.getvm_name(), getStoragePoolId().getValue(), vmStaticFromParams.getpriority());
    if (returnValue) {
        List<ValidationError> validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticFromParams);
        if (!validationErrors.isEmpty()) {
            handleCustomPropertiesError(validationErrors, reasons);
            returnValue = false;
        }
    }
    if (returnValue && shouldCheckSpaceInStorageDomains()) {
        if (!getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer())) {
            reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString());
            returnValue = false;
        } else {
            for (storage_domains domain : destStorages) {
                if (!StorageDomainSpaceChecker.isBelowThresholds(domain)) {
                    returnValue = false;
                    reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString());
                    break;
                } else if (!StorageDomainSpaceChecker.hasSpaceForRequest(domain, getNeededDiskSize(domain.getId()))) {
                    returnValue = false;
                    reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString());
                    break;
                }
            }
        }
    }
    if (returnValue) {
        returnValue = isDedicatedVdsOnSameCluster(vmStaticFromParams);
    }
    return returnValue;
}
#end_block

#method_before
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getId().equals(VmTemplateHandler.BlankVmTemplateId);
}
#method_after
protected boolean shouldCheckSpaceInStorageDomains() {
    return !getImagesToCheckDestinationStorageDomains().isEmpty() && !LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new All<DiskImage>()).getImageId().equals(VmTemplateHandler.BlankVmTemplateId);
}
#end_block

#method_before
private boolean fillDestMap() {
    if (getParameters().getStorageDomainId() != null && !Guid.Empty.equals(getParameters().getStorageDomainId())) {
        Guid storageId = getParameters().getStorageDomainId();
        for (DiskImage image : getImagesToCheckDestinationStorageDomains()) {
            diskInfoDestinationMap.put(image.getId(), makeNewImage(storageId, image));
        }
        return validateProvidedDestinations();
    }
    ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), diskInfoDestinationMap, destStorages, false);
    return true;
}
#method_after
private boolean fillDestMap() {
    if (getParameters().getStorageDomainId() != null && !Guid.Empty.equals(getParameters().getStorageDomainId())) {
        Guid storageId = getParameters().getStorageDomainId();
        for (DiskImage image : getImagesToCheckDestinationStorageDomains()) {
            diskInfoDestinationMap.put(image.getImageId(), makeNewImage(storageId, image));
        }
        return validateProvidedDestinations();
    }
    ImagesHandler.fillImagesMapBasedOnTemplate(getVmTemplate(), diskInfoDestinationMap, destStorages, false);
    return true;
}
#end_block

#method_before
protected boolean validateIsImagesOnDomains() {
    for (DiskImage image : getImagesToCheckDestinationStorageDomains()) {
        if (!image.getstorage_ids().containsAll(diskInfoDestinationMap.get(image.getId()).getstorage_ids())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
            return false;
        }
    }
    return true;
}
#method_after
protected boolean validateIsImagesOnDomains() {
    for (DiskImage image : getImagesToCheckDestinationStorageDomains()) {
        if (!image.getstorage_ids().containsAll(diskInfoDestinationMap.get(image.getImageId()).getstorage_ids())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
private DiskImage makeNewImage(Guid storageId, DiskImage image) {
    DiskImage newImage = new DiskImage();
    newImage.setId(image.getId());
    newImage.setvolume_format(image.getvolume_format());
    newImage.setvolume_type(image.getvolume_type());
    ArrayList<Guid> storageIds = new ArrayList<Guid>();
    storageIds.add(storageId);
    newImage.setstorage_ids(storageIds);
    newImage.setQuotaId(image.getQuotaId());
    return newImage;
}
#method_after
private DiskImage makeNewImage(Guid storageId, DiskImage image) {
    DiskImage newImage = new DiskImage();
    newImage.setImageId(image.getImageId());
    newImage.setvolume_format(image.getvolume_format());
    newImage.setvolume_type(image.getvolume_type());
    ArrayList<Guid> storageIds = new ArrayList<Guid>();
    storageIds.add(storageId);
    newImage.setstorage_ids(storageIds);
    newImage.setQuotaId(image.getQuotaId());
    return newImage;
}
#end_block

#method_before
@Override
protected void ExecuteVmCommand() {
    ArrayList<String> errorMessages = new ArrayList<String>();
    if (CanAddVm(errorMessages, destStorages.values())) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                AddVmStatic();
                AddVmDynamic();
                AddVmNetwork();
                AddVmStatistics();
                addActiveSnapshot();
                getCompensationContext().stateChanged();
                return null;
            }
        });
        addVmPermission();
        if (AddVmImages()) {
            copyVmDevices();
            setActionReturnValue(getVm().getId());
            setSucceeded(true);
        }
    } else {
        log.errorFormat("Failed to add vm . The reasons are: {0}", StringUtils.join(errorMessages, ','));
    }
}
#method_after
@Override
protected void ExecuteVmCommand() {
    ArrayList<String> errorMessages = new ArrayList<String>();
    if (CanAddVm(errorMessages, destStorages.values())) {
        TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                AddVmStatic();
                AddVmDynamic();
                AddVmNetwork();
                AddVmStatistics();
                addActiveSnapshot();
                getCompensationContext().stateChanged();
                return null;
            }
        });
        addVmPermission();
        if (AddVmImages()) {
            copyVmDevices();
            addDiskPermissions(newDiskImages);
            setActionReturnValue(getVm().getId());
            setSucceeded(true);
        }
    } else {
        log.errorFormat("Failed to add vm . The reasons are: {0}", StringUtils.join(errorMessages, ','));
    }
}
#end_block

#method_before
protected void copyVmDevices() {
    VmDeviceUtils.copyVmDevices(getVmTemplateId(), getVmId(), newDiskImages);
}
#method_after
protected void copyVmDevices() {
    VmDeviceUtils.copyVmDevices(getVmTemplateId(), getVmId(), newDiskImages, _vmInterfaces);
}
#end_block

#method_before
protected void AddVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getorigin() == null) {
        vmStatic.setorigin(OriginType.valueOf(Config.<String>GetValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setcreation_date(new Date());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(DbFacade.getInstance().getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#method_after
protected void AddVmStatic() {
    VmStatic vmStatic = getParameters().getVmStaticData();
    if (vmStatic.getorigin() == null) {
        vmStatic.setorigin(OriginType.valueOf(Config.<String>GetValue(ConfigValues.OriginType)));
    }
    vmStatic.setId(getVmId());
    vmStatic.setQuotaId(getQuotaId());
    vmStatic.setcreation_date(new Date());
    // predefined and user defined fields
    if (vmStatic.getCustomProperties() != null) {
        VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStatic.getCustomProperties());
        String predefinedProperties = properties.getPredefinedProperties();
        String userDefinedProperties = properties.getUseDefinedProperties();
        vmStatic.setPredefinedProperties(predefinedProperties);
        vmStatic.setUserDefinedProperties(userDefinedProperties);
    }
    getVmStaticDao().save(vmStatic);
    getCompensationContext().snapshotNewEntity(vmStatic);
}
#end_block

#method_before
protected boolean AddVmImages() {
    if (getVmTemplate().getDiskMap().size() > 0) {
        if (getVm().getstatus() != VMStatus.Down) {
            log.error("Cannot add images. VM is not Down");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.LockVm(getVmId());
        for (DiskImage dit : getImagesToCheckDestinationStorageDomains()) {
            CreateSnapshotFromTemplateParameters tempVar = new CreateSnapshotFromTemplateParameters(dit.getId(), getParameters().getVmStaticData().getId());
            tempVar.setDestStorageDomainId(diskInfoDestinationMap.get(dit.getId()).getstorage_ids().get(0));
            tempVar.setStorageDomainId(dit.getstorage_ids().get(0));
            tempVar.setVmSnapshotId(getVmSnapshotId());
            tempVar.setParentCommand(VdcActionType.AddVm);
            tempVar.setEntityId(getParameters().getEntityId());
            tempVar.setParentParemeters(getParameters());
            tempVar.setQuotaId(diskInfoDestinationMap.get(dit.getId()).getQuotaId());
            VdcReturnValueBase result = Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshotFromTemplate, tempVar, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            getParameters().getImagesParameters().add(tempVar);
            /**
             * if couldn't create snapshot then stop the transaction and the command
             */
            if (!result.getSucceeded()) {
                throw new VdcBLLException(result.getFault().getError());
            } else {
                getTaskIdList().addAll(result.getInternalTaskIdList());
                newDiskImages.add((DiskImage) result.getActionReturnValue());
            }
        }
    }
    return true;
}
#method_after
protected boolean AddVmImages() {
    if (getVmTemplate().getDiskMap().size() > 0) {
        if (getVm().getstatus() != VMStatus.Down) {
            log.error("Cannot add images. VM is not Down");
            throw new VdcBLLException(VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL);
        }
        VmHandler.LockVm(getVmId());
        for (DiskImage dit : getImagesToCheckDestinationStorageDomains()) {
            CreateSnapshotFromTemplateParameters tempVar = new CreateSnapshotFromTemplateParameters(dit.getImageId(), getParameters().getVmStaticData().getId());
            tempVar.setDestStorageDomainId(diskInfoDestinationMap.get(dit.getImageId()).getstorage_ids().get(0));
            tempVar.setStorageDomainId(dit.getstorage_ids().get(0));
            tempVar.setVmSnapshotId(getVmSnapshotId());
            tempVar.setParentCommand(VdcActionType.AddVm);
            tempVar.setEntityId(getParameters().getEntityId());
            tempVar.setParentParemeters(getParameters());
            tempVar.setQuotaId(diskInfoDestinationMap.get(dit.getImageId()).getQuotaId());
            VdcReturnValueBase result = Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshotFromTemplate, tempVar, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            getParameters().getImagesParameters().add(tempVar);
            /**
             * if couldn't create snapshot then stop the transaction and the command
             */
            if (!result.getSucceeded()) {
                throw new VdcBLLException(result.getFault().getError());
            } else {
                getTaskIdList().addAll(result.getInternalTaskIdList());
                newDiskImages.add((DiskImage) result.getActionReturnValue());
            }
        }
    }
    return true;
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmTemplateId(), VdcObjectType.VmTemplate, getActionType().getActionGroup()));
    permissionList = QuotaHelper.getInstance().addQuotaPermissionSubject(permissionList, getStoragePool(), getQuotaId());
    permissionList.addAll(QuotaHelper.getInstance().getPermissionsForDiskImagesList(diskInfoDestinationMap.values(), getStoragePool()));
    return permissionList;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    List<PermissionSubject> permissionList = new ArrayList<PermissionSubject>();
    permissionList.add(new PermissionSubject(getVdsGroupId(), VdcObjectType.VdsGroups, getActionType().getActionGroup()));
    permissionList.add(new PermissionSubject(getVmTemplateId(), VdcObjectType.VmTemplate, getActionType().getActionGroup()));
    if (getVmTemplate() != null && !getVmTemplate().getDiskList().isEmpty()) {
        addStoragePermissionByQuotaMode(permissionList, GuidUtils.getGuidValue(getStoragePoolId()), GuidUtils.getGuidValue(getStorageDomainId()));
    }
    permissionList = QuotaHelper.getInstance().addQuotaPermissionSubject(permissionList, getStoragePool(), getQuotaId());
    permissionList.addAll(QuotaHelper.getInstance().getPermissionsForDiskImagesList(diskInfoDestinationMap.values(), getStoragePool()));
    return permissionList;
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    Guid objectId = getParameters().getObjectId();
    List<permissions> perms;
    if (getParameters().getDirectOnly()) {
        perms = getPermissionDAO().getAllForEntity(objectId, getUserID(), getParameters().isFiltered());
    } else {
        perms = getPermissionDAO().getTreeForEntity(objectId, getParameters().getVdcObjectType(), getUserID(), getParameters().isFiltered());
    }
    getQueryReturnValue().setReturnValue(perms);
}
#method_after
@Override
protected void executeQueryCommand() {
    Guid objectId = getParameters().getObjectId();
    PermissionDAO dao = getDbFacade().getPermissionDAO();
    List<permissions> perms;
    if (getParameters().getDirectOnly()) {
        perms = dao.getAllForEntity(objectId, getUserID(), getParameters().isFiltered());
    } else {
        perms = dao.getTreeForEntity(objectId, getParameters().getVdcObjectType(), getUserID(), getParameters().isFiltered());
    }
    getQueryReturnValue().setReturnValue(perms);
}
#end_block

