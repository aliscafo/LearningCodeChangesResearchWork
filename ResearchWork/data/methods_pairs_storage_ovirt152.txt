121
#method_before
@Before
public void setupCommand() {
    initSpyCommand();
    mockSnapshotValidator();
    mockDaos();
}
#method_after
@Before
public void setupCommand() {
    initSpyCommand();
    mockDaos();
    mockSnapshotValidator();
}
#end_block

#method_before
/**
 * Initialize Entities
 */
private void initVm(VMStatus vmStatus, NGuid runOnVds, Guid diskImageId) {
    VM vm = new VM();
    vm.setStatus(vmStatus);
    vm.setRunOnVds(runOnVds);
    when(vmDao.get(any(Guid.class))).thenReturn(vm);
    when(vmDao.getVmsListForDisk(diskImageId)).thenReturn(Collections.singletonList(vm));
    setVmInPreview(false);
}
#method_after
/**
 * Initialize Entities
 */
private void initVm(VMStatus vmStatus, NGuid runOnVds, Guid diskImageId) {
    VM vm = new VM();
    vm.setStatus(vmStatus);
    vm.setRunOnVds(runOnVds);
    when(vmDao.get(any(Guid.class))).thenReturn(vm);
    when(vmDao.getVmsListForDisk(diskImageId)).thenReturn(Collections.singletonList(vm));
}
#end_block

#method_before
private void setVmInPreview(boolean isInPreview) {
    when(snapshotDao.exists(any(Guid.class), any(SnapshotStatus.class))).thenReturn(isInPreview);
}
#method_after
private void setVmInPreview(boolean isInPreview) {
    when(snapshotDao.exists(any(Guid.class), eq(SnapshotStatus.IN_PREVIEW))).thenReturn(isInPreview);
}
#end_block

#method_before
private boolean updateParameters() {
    for (MoveDiskParameters moveDiskParameters : getParameters().getParametersList()) {
        DiskImage diskImage = getDiskImageDao().getAncestor(moveDiskParameters.getImageId());
        if (diskImage == null) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST);
        }
        List<VM> allVms = getVmDAO().getVmsListForDisk(diskImage.getId());
        VM vm = !allVms.isEmpty() ? allVms.get(0) : null;
        SnapshotsValidator snapshotsValidator = new SnapshotsValidator();
        if (vm != null && !validate(snapshotsValidator.vmNotInPreview(vm.getId()))) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW);
        } else if (vm == null || isVmDown(vm)) {
            moveParametersList.add(moveDiskParameters);
        } else if (isVmRunning(vm)) {
            MultiValueMapUtils.addToMap(vm.getId(), createLiveMigrateDiskParameters(moveDiskParameters, vm.getId()), vmsLiveMigrateParametersMap);
        } else {
            addCanDoActionMessage(String.format("$%1$s %2$s", "VmName", vm.getVmName()));
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP);
        }
    }
    return true;
}
#method_after
private boolean updateParameters() {
    for (MoveDiskParameters moveDiskParameters : getParameters().getParametersList()) {
        DiskImage diskImage = getDiskImageDao().get(moveDiskParameters.getImageId());
        if (diskImage == null) {
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST);
        }
        List<VM> allVms = getVmDAO().getVmsListForDisk(diskImage.getId());
        VM vm = !allVms.isEmpty() ? allVms.get(0) : null;
        SnapshotsValidator snapshotsValidator = new SnapshotsValidator();
        if (vm != null && !validate(snapshotsValidator.vmNotInPreview(vm.getId()))) {
            return false;
        }
        if (vm == null || isVmDown(vm)) {
            moveParametersList.add(moveDiskParameters);
        } else if (isVmRunning(vm)) {
            MultiValueMapUtils.addToMap(vm.getId(), createLiveMigrateDiskParameters(moveDiskParameters, vm.getId()), vmsLiveMigrateParametersMap);
        } else {
            addCanDoActionMessage(String.format("$%1$s %2$s", "VmName", vm.getVmName()));
            return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP);
        }
    }
    return true;
}
#end_block

#method_before
private boolean isVmRunning(VM vm) {
    return vm.getStatus() == VMStatus.Up && vm.getRunOnVds() != null && !vm.getRunOnVds().equals(Guid.Empty);
}
#method_after
private boolean isVmRunning(VM vm) {
    return vm.getStatus().isUpOrPaused() && vm.getRunOnVds() != null && !vm.getRunOnVds().equals(Guid.Empty);
}
#end_block

#method_before
@Override
protected void revertTasks() {
    // Revert should be performed only for AddVmFromSnapshot at this point.
    if (getParameters().getParentCommand() == VdcActionType.AddVmFromSnapshot) {
        Guid destImageId = getParameters().getDestinationImageId();
        RemoveImageParameters removeImageParams = new RemoveImageParameters(destImageId);
        removeImageParams.setParentParameters(removeImageParams);
        removeImageParams.setParentCommand(VdcActionType.RemoveImage);
        if (getParameters().getParentCommand() == VdcActionType.ImportVm) {
            removeImageParams.setRemoveDuringExecution(false);
            removeImageParams.setRemoveFromDB(true);
        }
        removeImageParams.setEntityId(getDestinationImageId());
        // Setting the image as the monitored entity, so there will not be dependency
        VdcReturnValueBase returnValue = checkAndPerformRollbackUsingCommand(VdcActionType.RemoveImage, removeImageParams);
        if (returnValue.getSucceeded()) {
            // Starting to monitor the the tasks - RemoveImage is an internal command
            // which adds the taskId on the internal task ID list
            startPollingAsyncTasks(returnValue.getInternalTaskIdList());
        }
    } else {
        unLockImage();
    }
}
#method_after
@Override
protected void revertTasks() {
    // Revert should be performed only for AddVmFromSnapshot at this point.
    if (getParameters().getParentCommand() == VdcActionType.AddVmFromSnapshot || getParameters().getParentCommand() == VdcActionType.ImportVm) {
        Guid destImageId = getParameters().getDestinationImageId();
        RemoveImageParameters removeImageParams = new RemoveImageParameters(destImageId);
        removeImageParams.setParentParameters(removeImageParams);
        removeImageParams.setParentCommand(VdcActionType.RemoveImage);
        if (getParameters().getParentCommand() == VdcActionType.ImportVm) {
            removeImageParams.setRemoveDuringExecution(false);
            removeImageParams.setRemoveFromDB(true);
        }
        removeImageParams.setEntityId(getDestinationImageId());
        // Setting the image as the monitored entity, so there will not be dependency
        VdcReturnValueBase returnValue = checkAndPerformRollbackUsingCommand(VdcActionType.RemoveImage, removeImageParams);
        if (returnValue.getSucceeded()) {
            // Starting to monitor the the tasks - RemoveImage is an internal command
            // which adds the taskId on the internal task ID list
            startPollingAsyncTasks(returnValue.getInternalTaskIdList());
        }
    } else {
        unLockImage();
    }
}
#end_block

#method_before
@Override
protected VDSReturnValue performImageVdsmOperation() {
    boolean isShouldBeLocked = getParameters().getParentCommand() != VdcActionType.RemoveVmFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveVmTemplateFromImportExport;
    if (isShouldBeLocked) {
        // the image status should be set to ILLEGAL, so that in case compensation runs the image status will
        // be revert to ILLEGAL, as we can't tell were the task started on vdsm side or not.
        getDiskImage().setimageStatus(ImageStatus.ILLEGAL);
        lockImageWithCompensation();
    }
    // Releasing the lock for cases it was set by the parent command. The lock can be released because the image
    // status was already changed to lock.
    freeLock();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(getDiskImage().getstorage_pool_id().getValue(), getStorageDomainId().getValue(), getDiskImage().getId().getValue(), getDiskImage().isWipeAfterDelete(), getParameters().getForceDelete(), getStoragePool().getcompatibility_version().toString()));
    return returnValue;
}
#method_after
@Override
protected VDSReturnValue performImageVdsmOperation() {
    boolean isShouldBeLocked = getParameters().getParentCommand() != VdcActionType.RemoveVmFromImportExport && getParameters().getParentCommand() != VdcActionType.RemoveVmTemplateFromImportExport;
    if (isShouldBeLocked) {
        // the image status should be set to ILLEGAL, so that in case compensation runs the image status will
        // be revert to be ILLEGAL, as we can't tell whether the task started on vdsm side or not.
        getDiskImage().setimageStatus(ImageStatus.ILLEGAL);
        lockImageWithCompensation();
    }
    // Releasing the lock for cases it was set by the parent command. The lock can be released because the image
    // status was already changed to lock.
    freeLock();
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, new DeleteImageGroupVDSCommandParameters(getDiskImage().getstorage_pool_id().getValue(), getStorageDomainId().getValue(), getDiskImage().getId().getValue(), getDiskImage().isWipeAfterDelete(), getParameters().getForceDelete(), getStoragePool().getcompatibility_version().toString()));
    return returnValue;
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    Guid newActiveSnapshotId = Guid.NewGuid();
    Guid createdSnapshotId = getSnapshotDao().getId(getVmId(), SnapshotType.ACTIVE);
    getParameters().setSnapshotType(determineSnapshotType());
    getParameters().setInitialVmStatus(getVm().getStatus());
    getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId);
    new SnapshotsManager().addSnapshot(createdSnapshotId, getParameters().getDescription(), getParameters().getSnapshotType(), getVm(), getCompensationContext());
    freeLock();
    setActionReturnValue(createdSnapshotId);
    if (getDisksList().isEmpty()) {
        getParameters().setTaskGroupSuccess(true);
        endSuccessfully();
    } else {
        for (DiskImage image : getDisksList()) {
            ImagesActionsParametersBase tempVar = new ImagesActionsParametersBase(image.getImageId());
            tempVar.setDescription(getParameters().getDescription());
            tempVar.setSessionId(getParameters().getSessionId());
            tempVar.setQuotaId(image.getQuotaId());
            tempVar.setVmSnapshotId(newActiveSnapshotId);
            tempVar.setEntityId(getParameters().getEntityId());
            VdcActionType parentCommand = getParameters().getParentCommand() != VdcActionType.Unknown ? getParameters().getParentCommand() : VdcActionType.CreateAllSnapshotsFromVm;
            tempVar.setParentCommand(parentCommand);
            ImagesActionsParametersBase p = tempVar;
            VdcActionParametersBase parrentParamsForTask = getParametersForTask(parentCommand, getParameters());
            p.setParentParameters(parrentParamsForTask);
            getParameters().getImagesParameters().add(p);
            VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshot, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            if (vdcReturnValue.getSucceeded()) {
                getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            } else {
                throw new VdcBLLException(vdcReturnValue.getFault().getError(), "CreateAllSnapshotsFromVmCommand::executeVmCommand: Failed to create snapshot!");
            }
        }
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeVmCommand() {
    Guid newActiveSnapshotId = Guid.NewGuid();
    Guid createdSnapshotId = getSnapshotDao().getId(getVmId(), SnapshotType.ACTIVE);
    getParameters().setSnapshotType(determineSnapshotType());
    getParameters().setInitialVmStatus(getVm().getStatus());
    getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId);
    setActionReturnValue(createdSnapshotId);
    if (getDisksList().isEmpty()) {
        getParameters().setTaskGroupSuccess(true);
        new SnapshotsManager().addSnapshot(createdSnapshotId, getParameters().getDescription(), SnapshotStatus.OK, getParameters().getSnapshotType(), getVm(), true, getCompensationContext());
        // at the moment there's no need to execute vdsm Snapshot command for diskless snapshots,
        // when support for ram snapshot will be introduced, this vdsm command should be executed
        // for diskless snapshots as well (currently executed within endSuccesfully() method.
        incrementVmGeneration();
    } else {
        new SnapshotsManager().addSnapshot(createdSnapshotId, getParameters().getDescription(), getParameters().getSnapshotType(), getVm(), getCompensationContext());
        freeLock();
        for (DiskImage image : getDisksList()) {
            ImagesActionsParametersBase tempVar = new ImagesActionsParametersBase(image.getImageId());
            tempVar.setDescription(getParameters().getDescription());
            tempVar.setSessionId(getParameters().getSessionId());
            tempVar.setQuotaId(image.getQuotaId());
            tempVar.setVmSnapshotId(newActiveSnapshotId);
            tempVar.setEntityId(getParameters().getEntityId());
            VdcActionType parentCommand = getParameters().getParentCommand() != VdcActionType.Unknown ? getParameters().getParentCommand() : VdcActionType.CreateAllSnapshotsFromVm;
            tempVar.setParentCommand(parentCommand);
            ImagesActionsParametersBase p = tempVar;
            VdcActionParametersBase parrentParamsForTask = getParametersForTask(parentCommand, getParameters());
            p.setParentParameters(parrentParamsForTask);
            getParameters().getImagesParameters().add(p);
            VdcReturnValueBase vdcReturnValue = Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshot, p, ExecutionHandler.createDefaultContexForTasks(getExecutionContext()));
            if (vdcReturnValue.getSucceeded()) {
                getTaskIdList().addAll(vdcReturnValue.getInternalTaskIdList());
            } else {
                throw new VdcBLLException(vdcReturnValue.getFault().getError(), "CreateAllSnapshotsFromVmCommand::executeVmCommand: Failed to create snapshot!");
            }
        }
    }
    setSucceeded(true);
}
#end_block

#method_before
@Override
protected void endVmCommand() {
    // The following code must be executed in an inner transaction to make the changes visible
    // to the RunVm command that might occur afterwards
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            final boolean taskGroupSucceeded = getParameters().getTaskGroupSuccess();
            Guid createdSnapshotId = getSnapshotDao().getId(getVmId(), getParameters().getSnapshotType(), SnapshotStatus.LOCKED);
            if (taskGroupSucceeded) {
                getSnapshotDao().updateStatus(createdSnapshotId, SnapshotStatus.OK);
                if (getParameters().getParentCommand() != VdcActionType.RunVm && getVm() != null && getVm().isStatusUp() && getVm().getRunOnVds() != null) {
                    performLiveSnapshot(createdSnapshotId);
                }
            } else {
                revertToActiveSnapshot(createdSnapshotId);
            }
            getVmStaticDAO().incrementDbGeneration(getVm().getId());
            endActionOnDisks();
            setSucceeded(taskGroupSucceeded);
            getReturnValue().setEndActionTryAgain(false);
            return null;
        }
    });
    // (during the snapshot creation process the VM couldn't be started (rerun))
    if (getVm() != null && getVm().isAutoStartup() && isVmDownUnintentionally() && getParameters().getInitialVmStatus() != VMStatus.Down) {
        Backend.getInstance().runInternalAction(VdcActionType.RunVm, new RunVmParams(getVmId()), ExecutionHandler.createInternalJobContext());
    }
}
#method_after
@Override
protected void endVmCommand() {
    // The following code must be executed in an inner transaction to make the changes visible
    // to the RunVm command that might occur afterwards
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            final boolean taskGroupSucceeded = getParameters().getTaskGroupSuccess();
            Guid createdSnapshotId = getSnapshotDao().getId(getVmId(), getParameters().getSnapshotType(), SnapshotStatus.LOCKED);
            if (taskGroupSucceeded) {
                getSnapshotDao().updateStatus(createdSnapshotId, SnapshotStatus.OK);
                if (getParameters().getParentCommand() != VdcActionType.RunVm && getVm() != null && getVm().isStatusUp() && getVm().getRunOnVds() != null) {
                    performLiveSnapshot(createdSnapshotId);
                }
            } else {
                revertToActiveSnapshot(createdSnapshotId);
            }
            incrementVmGeneration();
            endActionOnDisks();
            setSucceeded(taskGroupSucceeded);
            getReturnValue().setEndActionTryAgain(false);
            return null;
        }
    });
    // (during the snapshot creation process the VM couldn't be started (rerun))
    if (getVm() != null && getVm().isAutoStartup() && isVmDownUnintentionally() && getParameters().getInitialVmStatus() != VMStatus.Down) {
        Backend.getInstance().runInternalAction(VdcActionType.RunVm, new RunVmParams(getVmId()), ExecutionHandler.createInternalJobContext());
    }
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<event_notification_methods> getAllEventNotificationMethods() {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource();
    ParameterizedRowMapper<event_notification_methods> mapper = new ParameterizedRowMapper<event_notification_methods>() {

        @Override
        public event_notification_methods mapRow(ResultSet rs, int rowNum) throws SQLException {
            event_notification_methods entity = new event_notification_methods();
            entity.setmethod_id(rs.getInt("method_id"));
            entity.setmethod_type(EventNotificationMethods.EMAIL);
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetAllFromevent_notification_methods", mapper, parameterSource);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public List<EventNotificationMethod> getAllEventNotificationMethods() {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource();
    ParameterizedRowMapper<EventNotificationMethod> mapper = new ParameterizedRowMapper<EventNotificationMethod>() {

        @Override
        public EventNotificationMethod mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventNotificationMethod entity = new EventNotificationMethod();
            entity.setmethod_id(rs.getInt("method_id"));
            entity.setmethod_type(EventNotificationMethods.EMAIL);
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetAllFromevent_notification_methods", mapper, parameterSource);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<event_notification_methods> getEventNotificationMethodsById(int method_id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("method_id", method_id);
    ParameterizedRowMapper<event_notification_methods> mapper = new ParameterizedRowMapper<event_notification_methods>() {

        @Override
        public event_notification_methods mapRow(ResultSet rs, int rowNum) throws SQLException {
            event_notification_methods entity = new event_notification_methods();
            entity.setmethod_id(rs.getInt("method_id"));
            entity.setmethod_type(EventNotificationMethods.EMAIL);
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetEventNotificationMethodById", mapper, parameterSource);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public List<EventNotificationMethod> getEventNotificationMethodsById(int method_id) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("method_id", method_id);
    ParameterizedRowMapper<EventNotificationMethod> mapper = new ParameterizedRowMapper<EventNotificationMethod>() {

        @Override
        public EventNotificationMethod mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventNotificationMethod entity = new EventNotificationMethod();
            entity.setmethod_id(rs.getInt("method_id"));
            entity.setmethod_type(EventNotificationMethods.EMAIL);
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetEventNotificationMethodById", mapper, parameterSource);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<event_notification_methods> getEventNotificationMethodsByType(String method_type) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("method_type", method_type);
    ParameterizedRowMapper<event_notification_methods> mapper = new ParameterizedRowMapper<event_notification_methods>() {

        @Override
        public event_notification_methods mapRow(ResultSet rs, int rowNum) throws SQLException {
            event_notification_methods entity = new event_notification_methods();
            entity.setmethod_id(rs.getInt("method_id"));
            entity.setmethod_type(EventNotificationMethods.EMAIL);
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetEventNotificationMethodByType", mapper, parameterSource);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public List<EventNotificationMethod> getEventNotificationMethodsByType(String method_type) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("method_type", method_type);
    ParameterizedRowMapper<EventNotificationMethod> mapper = new ParameterizedRowMapper<EventNotificationMethod>() {

        @Override
        public EventNotificationMethod mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventNotificationMethod entity = new EventNotificationMethod();
            entity.setmethod_id(rs.getInt("method_id"));
            entity.setmethod_type(EventNotificationMethods.EMAIL);
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetEventNotificationMethodByType", mapper, parameterSource);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<EventMap> getAllEventMaps() {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource();
    ParameterizedRowMapper<EventMap> mapper = new ParameterizedRowMapper<EventMap>() {

        @Override
        public EventMap mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventMap entity = new EventMap();
            entity.setevent_up_name(rs.getString("event_up_name"));
            entity.setevent_down_name(rs.getString("event_down_name"));
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetAllFromevent_map", mapper, parameterSource);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public List<EventMap> getAllEventMaps() {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource();
    ParameterizedRowMapper<EventMap> mapper = new ParameterizedRowMapper<EventMap>() {

        @Override
        public EventMap mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventMap entity = new EventMap();
            entity.setEventUpName(rs.getString("event_up_name"));
            entity.setEventDownName(rs.getString("event_down_name"));
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetAllFromevent_map", mapper, parameterSource);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public List<EventMap> getEventMapByName(String event_up_name) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("event_name", event_up_name);
    ParameterizedRowMapper<EventMap> mapper = new ParameterizedRowMapper<EventMap>() {

        @Override
        public EventMap mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventMap entity = new EventMap();
            entity.setevent_up_name(rs.getString("event_up_name"));
            entity.setevent_down_name(rs.getString("event_down_name"));
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetEventMapByName", mapper, parameterSource);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public List<EventMap> getEventMapByName(String event_up_name) {
    MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("event_name", event_up_name);
    ParameterizedRowMapper<EventMap> mapper = new ParameterizedRowMapper<EventMap>() {

        @Override
        public EventMap mapRow(ResultSet rs, int rowNum) throws SQLException {
            EventMap entity = new EventMap();
            entity.setEventUpName(rs.getString("event_up_name"));
            entity.setEventDownName(rs.getString("event_down_name"));
            return entity;
        }
    };
    return getCallsHandler().executeReadList("GetEventMapByName", mapper, parameterSource);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue;
    // check if user is not already subscribed to this event with same
    // method and address
    Guid subscriberId = getParameters().getEventSubscriber().getsubscriber_id();
    String event_name = getParameters().getEventSubscriber().getevent_up_name();
    int method_id = getParameters().getEventSubscriber().getmethod_id();
    List<event_subscriber> subscriptions = DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId);
    if (IsAlreadySubscribed(subscriptions, subscriberId, event_name, method_id)) {
        addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED);
        retValue = false;
    } else {
        // get notification method
        List<event_notification_methods> event_notification_methods = (DbFacade.getInstance().getEventDao().getEventNotificationMethodsById(method_id));
        if (event_notification_methods.size() > 0) {
            // validate event
            List<EventMap> event_map = DbFacade.getInstance().getEventDao().getEventMapByName(event_name);
            if (event_map.size() > 0) {
                String domain = getParameters().getDomain();
                // Validate user
                DbUser user = DbFacade.getInstance().getDbUserDao().get(subscriberId);
                if (user == null) {
                    // If an exception is thrown while trying, handle it and and fail with the relevant message
                    try {
                        user = UserCommandBase.initUser(new VdcUser(subscriberId, "", domain), getParameters().getSessionId());
                        if (user == null) {
                            addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
                            retValue = false;
                        } else {
                            retValue = ValidateAdd(event_notification_methods, getParameters().getEventSubscriber(), user);
                        }
                    } catch (VdcBLLException vdcBllException) {
                        addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
                        retValue = false;
                    }
                } else {
                    retValue = ValidateAdd(event_notification_methods, getParameters().getEventSubscriber(), user);
                }
            } else {
                addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT);
                retValue = false;
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD);
            retValue = false;
        }
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue;
    // check if user is not already subscribed to this event with same
    // method and address
    Guid subscriberId = getParameters().getEventSubscriber().getsubscriber_id();
    String eventName = getParameters().getEventSubscriber().getevent_up_name();
    int methodId = getParameters().getEventSubscriber().getmethod_id();
    List<event_subscriber> subscriptions = DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId);
    if (IsAlreadySubscribed(subscriptions, subscriberId, eventName, methodId)) {
        addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED);
        retValue = false;
    } else {
        // get notification method
        List<EventNotificationMethod> eventNotificationMethods = (DbFacade.getInstance().getEventDao().getEventNotificationMethodsById(methodId));
        if (eventNotificationMethods.size() > 0) {
            // validate event
            List<EventMap> eventMap = DbFacade.getInstance().getEventDao().getEventMapByName(eventName);
            if (eventMap.size() > 0) {
                String domain = getParameters().getDomain();
                // Validate user
                DbUser user = DbFacade.getInstance().getDbUserDao().get(subscriberId);
                if (user == null) {
                    // If an exception is thrown while trying, handle it and and fail with the relevant message
                    try {
                        user = UserCommandBase.initUser(new VdcUser(subscriberId, "", domain), getParameters().getSessionId());
                        if (user == null) {
                            addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
                            retValue = false;
                        } else {
                            retValue = ValidateAdd(eventNotificationMethods, getParameters().getEventSubscriber(), user);
                        }
                    } catch (VdcBLLException vdcBllException) {
                        addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DIRECTORY);
                        retValue = false;
                    }
                } else {
                    retValue = ValidateAdd(eventNotificationMethods, getParameters().getEventSubscriber(), user);
                }
            } else {
                addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT);
                retValue = false;
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD);
            retValue = false;
        }
    }
    return retValue;
}
#end_block

#method_before
@Override
public List<event_notification_methods> getAllEventNotificationMethods() {
    return notificationMethodsDAO.getAll();
}
#method_after
@Override
public List<EventNotificationMethod> getAllEventNotificationMethods() {
    return notificationMethodsDAO.getAll();
}
#end_block

#method_before
@Override
public List<event_notification_methods> getEventNotificationMethodsById(int method_id) {
    return notificationMethodsDAO.getEventNotificationMethodsById(method_id);
}
#method_after
@Override
public List<EventNotificationMethod> getEventNotificationMethodsById(int method_id) {
    return notificationMethodsDAO.getEventNotificationMethodsById(method_id);
}
#end_block

#method_before
@Override
public List<event_notification_methods> getEventNotificationMethodsByType(String method_type) {
    return notificationMethodsDAO.getEventNotificationMethodsByType(method_type);
}
#method_after
@Override
public List<EventNotificationMethod> getEventNotificationMethodsByType(String method_type) {
    return notificationMethodsDAO.getEventNotificationMethodsByType(method_type);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue;
    // get notification method
    List<event_notification_methods> event_notification_methods = (DbFacade.getInstance().getEventDao().getEventNotificationMethodsById(getParameters().getEventSubscriber().getmethod_id()));
    if (event_notification_methods.size() > 0) {
        // validate event
        List<EventMap> event_map = DbFacade.getInstance().getEventDao().getEventMapByName(getParameters().getEventSubscriber().getevent_up_name());
        if (event_map.size() > 0) {
            // Validate user
            DbUser user = DbFacade.getInstance().getDbUserDao().get(getParameters().getEventSubscriber().getsubscriber_id());
            if (user == null) {
                addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB);
                retValue = false;
            } else {
                retValue = ValidateRemove(event_notification_methods, getParameters().getEventSubscriber(), user);
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT);
            retValue = false;
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD);
        retValue = false;
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue;
    // get notification method
    List<EventNotificationMethod> event_notification_methods = (DbFacade.getInstance().getEventDao().getEventNotificationMethodsById(getParameters().getEventSubscriber().getmethod_id()));
    if (event_notification_methods.size() > 0) {
        // validate event
        List<EventMap> event_map = DbFacade.getInstance().getEventDao().getEventMapByName(getParameters().getEventSubscriber().getevent_up_name());
        if (event_map.size() > 0) {
            // Validate user
            DbUser user = DbFacade.getInstance().getDbUserDao().get(getParameters().getEventSubscriber().getsubscriber_id());
            if (user == null) {
                addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB);
                retValue = false;
            } else {
                retValue = ValidateRemove(event_notification_methods, getParameters().getEventSubscriber(), user);
            }
        } else {
            addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT);
            retValue = false;
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD);
        retValue = false;
    }
    return retValue;
}
#end_block

#method_before
protected SessionFactory getSessionFactory() {
    if (sessionFactory == null) {
        sessionFactory = new AnnotationConfiguration().addAnnotatedClass(action_version_map.class).addAnnotatedClass(ad_groups.class).addAnnotatedClass(async_tasks.class).addAnnotatedClass(AuditLog.class).addAnnotatedClass(bookmarks.class).addAnnotatedClass(DbUser.class).addAnnotatedClass(DiskImage.class).addAnnotatedClass(DiskImageDynamic.class).addAnnotatedClass(EventMap.class).addAnnotatedClass(event_notification_hist.class).addAnnotatedClass(event_notification_methods.class).addAnnotatedClass(event_subscriber.class).addAnnotatedClass(image_storage_domain_map.class).addAnnotatedClass(image_vm_map.class).addAnnotatedClass(LUN_storage_server_connection_map.class).addAnnotatedClass(LUNs.class).addAnnotatedClass(network_cluster.class).addAnnotatedClass(Network.class).addAnnotatedClass(permissions.class).addAnnotatedClass(RoleGroupMap.class).addAnnotatedClass(Role.class).addAnnotatedClass(RoleGroupMap.class).addAnnotatedClass(storage_domain_dynamic.class).addAnnotatedClass(storage_domain_static.class).addAnnotatedClass(storage_pool.class).addAnnotatedClass(storage_pool_iso_map.class).addAnnotatedClass(storage_server_connections.class).addAnnotatedClass(tags.class).addAnnotatedClass(tags_user_group_map.class).addAnnotatedClass(tags_user_map.class).addAnnotatedClass(tags_vds_map.class).addAnnotatedClass(tags_vm_map.class).addAnnotatedClass(tags_vm_pool_map.class).addAnnotatedClass(user_sessions.class).addAnnotatedClass(VdcOption.class).addAnnotatedClass(VdsDynamic.class).addAnnotatedClass(VDSGroup.class).addAnnotatedClass(VdsStatic.class).addAnnotatedClass(VdsStatistics.class).addAnnotatedClass(vm_pool_map.class).addAnnotatedClass(vm_pools.class).addAnnotatedClass(vm_template_image_map.class).addAnnotatedClass(VmDynamic.class).addAnnotatedClass(VmStatic.class).addAnnotatedClass(storage_pool_iso_map.class).addAnnotatedClass(VmTemplate.class).configure().buildSessionFactory();
    }
    return sessionFactory;
}
#method_after
protected SessionFactory getSessionFactory() {
    if (sessionFactory == null) {
        sessionFactory = new AnnotationConfiguration().addAnnotatedClass(LdapGroup.class).addAnnotatedClass(ActionVersionMap.class).addAnnotatedClass(AsyncTasks.class).addAnnotatedClass(AuditLog.class).addAnnotatedClass(Bookmark.class).addAnnotatedClass(DbUser.class).addAnnotatedClass(DiskImage.class).addAnnotatedClass(DiskImageDynamic.class).addAnnotatedClass(EventMap.class).addAnnotatedClass(event_notification_hist.class).addAnnotatedClass(EventNotificationMethod.class).addAnnotatedClass(event_subscriber.class).addAnnotatedClass(image_storage_domain_map.class).addAnnotatedClass(image_vm_map.class).addAnnotatedClass(LUN_storage_server_connection_map.class).addAnnotatedClass(LUNs.class).addAnnotatedClass(NetworkCluster.class).addAnnotatedClass(Network.class).addAnnotatedClass(permissions.class).addAnnotatedClass(RoleGroupMap.class).addAnnotatedClass(Role.class).addAnnotatedClass(RoleGroupMap.class).addAnnotatedClass(StorageDomainDynamic.class).addAnnotatedClass(StorageDomainStatic.class).addAnnotatedClass(storage_pool.class).addAnnotatedClass(StoragePoolIsoMap.class).addAnnotatedClass(StorageServerConnections.class).addAnnotatedClass(tags.class).addAnnotatedClass(TagsUserGroupMap.class).addAnnotatedClass(TagsUserMap.class).addAnnotatedClass(TagsVdsMap.class).addAnnotatedClass(TagsVmMap.class).addAnnotatedClass(TagsVmPoolMap.class).addAnnotatedClass(user_sessions.class).addAnnotatedClass(VdcOption.class).addAnnotatedClass(VdsDynamic.class).addAnnotatedClass(VDSGroup.class).addAnnotatedClass(VdsStatic.class).addAnnotatedClass(VdsStatistics.class).addAnnotatedClass(VmPoolMap.class).addAnnotatedClass(vm_pools.class).addAnnotatedClass(VmDynamic.class).addAnnotatedClass(VmStatic.class).addAnnotatedClass(StoragePoolIsoMap.class).addAnnotatedClass(VmTemplate.class).configure().buildSessionFactory();
    }
    return sessionFactory;
}
#end_block

#method_before
@Test
public void testGetAllEventNotificationMethods() {
    List<event_notification_methods> result = dao.getAllEventNotificationMethods();
    assertNotNull(result);
    assertFalse(result.isEmpty());
    assertEquals(NOTIFICATION_METHOD_COUNT, result.size());
}
#method_after
@Test
public void testGetAllEventNotificationMethods() {
    List<EventNotificationMethod> result = dao.getAllEventNotificationMethods();
    assertNotNull(result);
    assertFalse(result.isEmpty());
    assertEquals(NOTIFICATION_METHOD_COUNT, result.size());
}
#end_block

#method_before
@Test
public void testGetEventNotificationMethodsById() {
    List<event_notification_methods> result = dao.getEventNotificationMethodsById(1);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    assertEquals(1, result.size());
}
#method_after
@Test
public void testGetEventNotificationMethodsById() {
    List<EventNotificationMethod> result = dao.getEventNotificationMethodsById(1);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    assertEquals(1, result.size());
}
#end_block

#method_before
@Test
public void testGetEventNotificationMethodsByType() {
    String target = "Email";
    List<event_notification_methods> result = dao.getEventNotificationMethodsByType(target);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (event_notification_methods method : result) {
        assertEquals(EventNotificationMethods.EMAIL, method.getmethod_type());
    }
}
#method_after
@Test
public void testGetEventNotificationMethodsByType() {
    String target = "Email";
    List<EventNotificationMethod> result = dao.getEventNotificationMethodsByType(target);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (EventNotificationMethod method : result) {
        assertEquals(EventNotificationMethods.EMAIL, method.getmethod_type());
    }
}
#end_block

#method_before
@Test
public void testGetEventMapByName() {
    List<EventMap> result = dao.getEventMapByName("TestRun");
    assertNotNull(result);
    for (EventMap mapping : result) {
        assertEquals("TestRun", mapping.getevent_up_name());
    }
}
#method_after
@Test
public void testGetEventMapByName() {
    List<EventMap> result = dao.getEventMapByName("TestRun");
    assertNotNull(result);
    for (EventMap mapping : result) {
        assertEquals("TestRun", mapping.getEventUpName());
    }
}
#end_block

#method_before
void initTable() {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new HostStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VDS> nameColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_name();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameHost(), "150px");
    TextColumnWithTooltip<VDS> hostColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.gethost_name();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(hostColumn, constants.ipHost(), "150px");
    TextColumnWithTooltip<VDS> clusterColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_group_name();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterHost(), "150px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> dcColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                return object.getstorage_pool_name();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(dcColumn, constants.dcHost(), "150px");
    }
    TextColumnWithTooltip<VDS> statusColumn = new EnumColumn<VDS, VDSStatus>() {

        @Override
        public VDSStatus getRawValue(VDS object) {
            return object.getstatus();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.statusHost(), "100px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> loadColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                // $NON-NLS-1$
                return object.getvm_active() != null ? object.getvm_active().toString() : "0";
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(loadColumn, constants.runningVms(), "80px");
    }
    PercentColumn<VDS> memColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_mem_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memColumn, constants.memoryHost(), "60px");
    PercentColumn<VDS> cpuColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_cpu_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpuHost(), "60px");
    PercentColumn<VDS> netColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_network_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(netColumn, constants.networkHost(), "60px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> spmColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                int value = object.getVdsSpmPriority();
                int lowValue = defaultSpmPriority / 2;
                int highValue = defaultSpmPriority + (maxSpmPriority - defaultSpmPriority) / 2;
                if (object.getspm_status() != VdsSpmStatus.None) {
                    return object.getspm_status().name();
                }
                if (value == -1) {
                    return constants.spmNeverText();
                } else if (value == lowValue) {
                    return constants.spmLowText();
                } else if (value == defaultSpmPriority) {
                    return constants.spmNormalText();
                } else if (value == highValue) {
                    return constants.spmHighText();
                }
                return constants.spmCustomText();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(spmColumn, constants.spmPriorityHost(), "100px");
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.newHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.editHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.removeHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.activateHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getActivateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.maintenanceHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getMaintenanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.confirmRebootedHost(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getManualFenceCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.approveHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getApproveCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.configureLocalStorageHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureLocalStorageCommand();
        }
    });
    List<ActionButtonDefinition<VDS>> pmSubActions = new LinkedList<ActionButtonDefinition<VDS>>();
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.restartHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRestartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.startHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.stopHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.pmHost(), pmSubActions, CommandLocation.OnlyFromToolBar));
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.assignTagsHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getAssignTagsCommand();
        }
    });
    if (ReportInit.getInstance().isReportsEnabled()) {
        List<ActionButtonDefinition<VDS>> resourceSubActions = // $NON-NLS-1$
        ReportActionsHelper.getInstance().getResourceSubActions("Host", getModelProvider());
        if (resourceSubActions != null && resourceSubActions.size() > 0) {
            getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.showReportHost(), resourceSubActions));
        }
    }
}
#method_after
void initTable() {
    getTable().enableColumnResizing();
    // $NON-NLS-1$
    getTable().addColumn(new HostStatusColumn(), constants.empty(), "30px");
    TextColumnWithTooltip<VDS> nameColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_name();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(nameColumn, constants.nameHost(), "150px");
    TextColumnWithTooltip<VDS> hostColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.gethost_name();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(hostColumn, constants.ipHost(), "150px");
    TextColumnWithTooltip<VDS> clusterColumn = new TextColumnWithTooltip<VDS>() {

        @Override
        public String getValue(VDS object) {
            return object.getvds_group_name();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(clusterColumn, constants.clusterHost(), "150px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> dcColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                return object.getstorage_pool_name();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(dcColumn, constants.dcHost(), "150px");
    }
    TextColumnWithTooltip<VDS> statusColumn = new EnumColumn<VDS, VDSStatus>() {

        @Override
        public VDSStatus getRawValue(VDS object) {
            return object.getstatus();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(statusColumn, constants.statusHost(), "100px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> vmCountColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                // $NON-NLS-1$
                return object.getvm_active() != null ? object.getvm_active().toString() : "0";
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(vmCountColumn, constants.runningVms(), "80px");
    }
    PercentColumn<VDS> memColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_mem_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(memColumn, constants.memoryHost(), "60px");
    PercentColumn<VDS> cpuColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_cpu_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(cpuColumn, constants.cpuHost(), "60px");
    PercentColumn<VDS> netColumn = new PercentColumn<VDS>() {

        @Override
        public Integer getProgressValue(VDS object) {
            return object.getusage_network_percent();
        }
    };
    // $NON-NLS-1$
    getTable().addColumn(netColumn, constants.networkHost(), "60px");
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        TextColumnWithTooltip<VDS> spmColumn = new TextColumnWithTooltip<VDS>() {

            @Override
            public String getValue(VDS object) {
                int value = object.getVdsSpmPriority();
                int lowValue = defaultSpmPriority / 2;
                int highValue = defaultSpmPriority + (maxSpmPriority - defaultSpmPriority) / 2;
                if (object.getspm_status() != VdsSpmStatus.None) {
                    return object.getspm_status().name();
                }
                if (value == -1) {
                    return constants.spmNeverText();
                } else if (value == lowValue) {
                    return constants.spmLowText();
                } else if (value == defaultSpmPriority) {
                    return constants.spmNormalText();
                } else if (value == highValue) {
                    return constants.spmHighText();
                }
                return constants.spmCustomText();
            }
        };
        // $NON-NLS-1$
        getTable().addColumn(spmColumn, constants.spmPriorityHost(), "100px");
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.newHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getNewCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.editHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getEditCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.removeHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRemoveCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.activateHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getActivateCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.maintenanceHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getMaintenanceCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.confirmRebootedHost(), CommandLocation.OnlyFromFromContext) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getManualFenceCommand();
        }
    });
    // TODO: separator
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.approveHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getApproveCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.configureLocalStorageHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getConfigureLocalStorageCommand();
        }
    });
    List<ActionButtonDefinition<VDS>> pmSubActions = new LinkedList<ActionButtonDefinition<VDS>>();
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.restartHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getRestartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.startHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStartCommand();
        }
    });
    pmSubActions.add(new WebAdminButtonDefinition<VDS>(constants.stopHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getStopCommand();
        }
    });
    if (ApplicationModeHelper.getUiMode() != ApplicationMode.GlusterOnly) {
        getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.pmHost(), pmSubActions, CommandLocation.OnlyFromToolBar));
    }
    getTable().addActionButton(new WebAdminButtonDefinition<VDS>(constants.assignTagsHost()) {

        @Override
        protected UICommand resolveCommand() {
            return getMainModel().getAssignTagsCommand();
        }
    });
    if (ReportInit.getInstance().isReportsEnabled()) {
        List<ActionButtonDefinition<VDS>> resourceSubActions = // $NON-NLS-1$
        ReportActionsHelper.getInstance().getResourceSubActions("Host", getModelProvider());
        if (resourceSubActions != null && resourceSubActions.size() > 0) {
            getTable().addActionButton(new WebAdminMenuBarButtonDefinition<VDS>(constants.showReportHost(), resourceSubActions));
        }
    }
}
#end_block

#method_before
@Override
protected MapSqlParameterSource createFullParametersMapper(VmDynamic vm) {
    return createIdParameterMapper(vm.getId()).addValue("app_list", vm.getapp_list()).addValue("guest_cur_user_name", vm.getguest_cur_user_name()).addValue("console_cur_user_name", vm.getConsole_current_user_name()).addValue("console_user_id", vm.getConsoleUserId()).addValue("guest_last_login_time", vm.getguest_last_login_time()).addValue("guest_last_logout_time", vm.getguest_last_logout_time()).addValue("guest_os", vm.getguest_os()).addValue("migrating_to_vds", vm.getmigrating_to_vds()).addValue("run_on_vds", vm.getrun_on_vds()).addValue("status", vm.getstatus()).addValue("vm_host", vm.getvm_host()).addValue("vm_ip", vm.getvm_ip()).addValue("last_start_time", vm.getLastStartTime()).addValue("vm_pid", vm.getvm_pid()).addValue("display", vm.getdisplay()).addValue("acpi_enable", vm.getacpi_enable()).addValue("session", vm.getsession()).addValue("display_ip", vm.getdisplay_ip()).addValue("display_type", vm.getdisplay_type()).addValue("kvm_enable", vm.getkvm_enable()).addValue("boot_sequence", vm.getboot_sequence()).addValue("display_secure_port", vm.getdisplay_secure_port()).addValue("utc_diff", vm.getutc_diff()).addValue("last_vds_run_on", vm.getlast_vds_run_on()).addValue("client_ip", vm.getclient_ip()).addValue("guest_requested_memory", vm.getguest_requested_memory()).addValue("hibernation_vol_handle", vm.gethibernation_vol_handle()).addValue("exit_status", vm.getExitStatus().getValue()).addValue("pause_status", vm.getPauseStatus().getValue()).addValue("exit_message", vm.getExitMessage()).addValue("hash", vm.getHash());
}
#method_after
@Override
protected MapSqlParameterSource createFullParametersMapper(VmDynamic vm) {
    return createIdParameterMapper(vm.getId()).addValue("app_list", vm.getapp_list()).addValue("guest_cur_user_name", vm.getguest_cur_user_name()).addValue("console_cur_user_name", vm.getConsole_current_user_name()).addValue("console_user_id", vm.getConsoleUserId()).addValue("guest_last_login_time", vm.getguest_last_login_time()).addValue("guest_last_logout_time", vm.getguest_last_logout_time()).addValue("guest_os", vm.getguest_os()).addValue("migrating_to_vds", vm.getmigrating_to_vds()).addValue("run_on_vds", vm.getrun_on_vds()).addValue("status", vm.getstatus()).addValue("vm_host", vm.getvm_host()).addValue("vm_ip", vm.getvm_ip()).addValue("last_start_time", vm.getLastStartTime()).addValue("vm_pid", vm.getvm_pid()).addValue("display", vm.getdisplay()).addValue("acpi_enable", vm.getacpi_enable()).addValue("session", vm.getsession()).addValue("display_ip", vm.getdisplay_ip()).addValue("display_type", vm.getdisplay_type()).addValue("kvm_enable", vm.getkvm_enable()).addValue("boot_sequence", vm.getboot_sequence()).addValue("display_secure_port", vm.getdisplay_secure_port()).addValue("utc_diff", vm.getutc_diff()).addValue("last_vds_run_on", vm.getlast_vds_run_on()).addValue("client_ip", vm.getclient_ip()).addValue("guest_requested_memory", vm.getguest_requested_memory()).addValue("hibernation_vol_handle", vm.gethibernation_vol_handle()).addValue("exit_status", vm.getExitStatus().getValue()).addValue("pause_status", vm.getPauseStatus().getValue()).addValue("exit_message", vm.getExitMessage()).addValue("hash", vm.getHash()).addValue("guest_agent_nics_hash", vm.getGuestAgentNicsHash());
}
#end_block

#method_before
@Override
protected ParameterizedRowMapper<VmDynamic> createEntityRowMapper() {
    return new ParameterizedRowMapper<VmDynamic>() {

        @Override
        public VmDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
            VmDynamic entity = new VmDynamic();
            entity.setapp_list(rs.getString("app_list"));
            entity.setguest_cur_user_name(rs.getString("guest_cur_user_name"));
            entity.setConsole_current_user_name(rs.getString("console_cur_user_name"));
            entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
            entity.setguest_last_login_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
            entity.setguest_last_logout_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
            entity.setguest_os(rs.getString("guest_os"));
            entity.setmigrating_to_vds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
            entity.setrun_on_vds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
            entity.setstatus(VMStatus.forValue(rs.getInt("status")));
            entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
            entity.setvm_host(rs.getString("vm_host"));
            entity.setvm_ip(rs.getString("vm_ip"));
            entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
            entity.setvm_pid((Integer) rs.getObject("vm_pid"));
            entity.setdisplay((Integer) rs.getObject("display"));
            entity.setacpi_enable((Boolean) rs.getObject("acpi_enable"));
            entity.setsession(SessionState.forValue(rs.getInt("session")));
            entity.setdisplay_ip(rs.getString("display_ip"));
            entity.setdisplay_type(DisplayType.forValue(rs.getInt("display_type")));
            entity.setkvm_enable((Boolean) rs.getObject("kvm_enable"));
            entity.setboot_sequence(BootSequence.forValue(rs.getInt("boot_sequence")));
            entity.setdisplay_secure_port((Integer) rs.getObject("display_secure_port"));
            entity.setutc_diff((Integer) rs.getObject("utc_diff"));
            entity.setlast_vds_run_on(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
            entity.setclient_ip(rs.getString("client_ip"));
            entity.setguest_requested_memory((Integer) rs.getObject("guest_requested_memory"));
            entity.sethibernation_vol_handle(rs.getString("hibernation_vol_handle"));
            VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
            VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
            entity.setExitMessage(rs.getString("exit_message"));
            entity.setExitStatus(exitStatus);
            entity.setPauseStatus(pauseStatus);
            entity.setHash(rs.getString("hash"));
            return entity;
        }
    };
}
#method_after
@Override
protected ParameterizedRowMapper<VmDynamic> createEntityRowMapper() {
    return new ParameterizedRowMapper<VmDynamic>() {

        @Override
        public VmDynamic mapRow(ResultSet rs, int rowNum) throws SQLException {
            VmDynamic entity = new VmDynamic();
            entity.setapp_list(rs.getString("app_list"));
            entity.setguest_cur_user_name(rs.getString("guest_cur_user_name"));
            entity.setConsole_current_user_name(rs.getString("console_cur_user_name"));
            entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
            entity.setguest_last_login_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
            entity.setguest_last_logout_time(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
            entity.setguest_os(rs.getString("guest_os"));
            entity.setmigrating_to_vds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
            entity.setrun_on_vds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
            entity.setstatus(VMStatus.forValue(rs.getInt("status")));
            entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
            entity.setvm_host(rs.getString("vm_host"));
            entity.setvm_ip(rs.getString("vm_ip"));
            entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
            entity.setvm_pid((Integer) rs.getObject("vm_pid"));
            entity.setdisplay((Integer) rs.getObject("display"));
            entity.setacpi_enable((Boolean) rs.getObject("acpi_enable"));
            entity.setsession(SessionState.forValue(rs.getInt("session")));
            entity.setdisplay_ip(rs.getString("display_ip"));
            entity.setdisplay_type(DisplayType.forValue(rs.getInt("display_type")));
            entity.setkvm_enable((Boolean) rs.getObject("kvm_enable"));
            entity.setboot_sequence(BootSequence.forValue(rs.getInt("boot_sequence")));
            entity.setdisplay_secure_port((Integer) rs.getObject("display_secure_port"));
            entity.setutc_diff((Integer) rs.getObject("utc_diff"));
            entity.setlast_vds_run_on(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
            entity.setclient_ip(rs.getString("client_ip"));
            entity.setguest_requested_memory((Integer) rs.getObject("guest_requested_memory"));
            entity.sethibernation_vol_handle(rs.getString("hibernation_vol_handle"));
            VmExitStatus exitStatus = VmExitStatus.forValue(rs.getInt("exit_status"));
            VmPauseStatus pauseStatus = VmPauseStatus.forValue(rs.getInt("pause_status"));
            entity.setExitMessage(rs.getString("exit_message"));
            entity.setExitStatus(exitStatus);
            entity.setPauseStatus(pauseStatus);
            entity.setHash(rs.getString("hash"));
            entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
            return entity;
        }
    };
}
#end_block

#method_before
public static void updateVMStatisticsData(VmStatistics vm, XmlRpcStruct xmlRpcStruct) {
    if (xmlRpcStruct.contains(VdsProperties.vm_guid)) {
        try {
            vm.setId(new Guid((String) xmlRpcStruct.getItem(VdsProperties.vm_guid)));
        } catch (FormatException e) {
            log.info("vm id is not in uuid format, ", e);
            vm.setId(new Guid());
        }
    }
    vm.setelapsed_time(AssignDoubleValue(xmlRpcStruct, VdsProperties.elapsed_time));
    // ------------- vm network statistics -----------------------
    if (xmlRpcStruct.containsKey(VdsProperties.vm_network)) {
        Map networkStruct = (Map) xmlRpcStruct.getItem(VdsProperties.vm_network);
        vm.setInterfaceStatistics(new ArrayList<VmNetworkInterface>());
        for (Object tempNic : networkStruct.values()) {
            XmlRpcStruct nic = new XmlRpcStruct((Map) tempNic);
            VmNetworkInterface stats = new VmNetworkInterface();
            vm.getInterfaceStatistics().add(stats);
            if (nic.containsKey(VdsProperties.if_name)) {
                stats.setName((String) ((nic.getItem(VdsProperties.if_name) instanceof String) ? nic.getItem(VdsProperties.if_name) : null));
            }
            Double rx_rate = AssignDoubleValue(nic, VdsProperties.rx_rate);
            Double rx_dropped = AssignDoubleValue(nic, VdsProperties.rx_dropped);
            Double tx_rate = AssignDoubleValue(nic, VdsProperties.tx_rate);
            Double tx_dropped = AssignDoubleValue(nic, VdsProperties.tx_dropped);
            stats.getStatistics().setReceiveRate(rx_rate != null ? rx_rate : 0);
            stats.getStatistics().setReceiveDropRate(rx_dropped != null ? rx_dropped : 0);
            stats.getStatistics().setTransmitRate(tx_rate != null ? tx_rate : 0);
            stats.getStatistics().setTransmitDropRate(tx_dropped != null ? tx_dropped : 0);
            stats.setMacAddress((String) ((nic.getItem(VdsProperties.mac_addr) instanceof String) ? nic.getItem(VdsProperties.mac_addr) : null));
            stats.setSpeed(AssignIntValue(nic, VdsProperties.if_speed));
        }
    }
    if (xmlRpcStruct.contains(VdsProperties.VM_DISKS_USAGE)) {
        initDisksUsage(xmlRpcStruct, vm);
    }
    // ------------- vm cpu statistics -----------------------
    vm.setcpu_sys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vm.setcpu_user(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    // ------------- vm memory statistics -----------------------
    vm.setusage_mem_percent(AssignIntValue(xmlRpcStruct, VdsProperties.vm_usage_mem_percent));
}
#method_after
public static void updateVMStatisticsData(VmStatistics vm, XmlRpcStruct xmlRpcStruct) {
    if (xmlRpcStruct.contains(VdsProperties.vm_guid)) {
        try {
            vm.setId(new Guid((String) xmlRpcStruct.getItem(VdsProperties.vm_guid)));
        } catch (FormatException e) {
            log.info("vm id is not in uuid format, ", e);
            vm.setId(new Guid());
        }
    }
    vm.setelapsed_time(AssignDoubleValue(xmlRpcStruct, VdsProperties.elapsed_time));
    // ------------- vm network statistics -----------------------
    if (xmlRpcStruct.containsKey(VdsProperties.vm_network)) {
        Map networkStruct = (Map) xmlRpcStruct.getItem(VdsProperties.vm_network);
        vm.setInterfaceStatistics(new ArrayList<VmNetworkInterface>());
        for (Object tempNic : networkStruct.values()) {
            XmlRpcStruct nic = new XmlRpcStruct((Map) tempNic);
            VmNetworkInterface stats = new VmNetworkInterface();
            vm.getInterfaceStatistics().add(stats);
            if (nic.containsKey(VdsProperties.VM_INTERFACE_NAME)) {
                stats.setName((String) ((nic.getItem(VdsProperties.VM_INTERFACE_NAME) instanceof String) ? nic.getItem(VdsProperties.VM_INTERFACE_NAME) : null));
            }
            Double rx_rate = AssignDoubleValue(nic, VdsProperties.rx_rate);
            Double rx_dropped = AssignDoubleValue(nic, VdsProperties.rx_dropped);
            Double tx_rate = AssignDoubleValue(nic, VdsProperties.tx_rate);
            Double tx_dropped = AssignDoubleValue(nic, VdsProperties.tx_dropped);
            stats.getStatistics().setReceiveRate(rx_rate != null ? rx_rate : 0);
            stats.getStatistics().setReceiveDropRate(rx_dropped != null ? rx_dropped : 0);
            stats.getStatistics().setTransmitRate(tx_rate != null ? tx_rate : 0);
            stats.getStatistics().setTransmitDropRate(tx_dropped != null ? tx_dropped : 0);
            stats.setMacAddress((String) ((nic.getItem(VdsProperties.mac_addr) instanceof String) ? nic.getItem(VdsProperties.mac_addr) : null));
            stats.setSpeed(AssignIntValue(nic, VdsProperties.if_speed));
        }
    }
    if (xmlRpcStruct.contains(VdsProperties.VM_DISKS_USAGE)) {
        initDisksUsage(xmlRpcStruct, vm);
    }
    // ------------- vm cpu statistics -----------------------
    vm.setcpu_sys(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_sys));
    vm.setcpu_user(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_user));
    // ------------- vm memory statistics -----------------------
    vm.setusage_mem_percent(AssignIntValue(xmlRpcStruct, VdsProperties.vm_usage_mem_percent));
}
#end_block

#method_before
public static void updateVDSDynamicData(VDS vds, XmlRpcStruct xmlRpcStruct) {
    updateNetworkData(vds, xmlRpcStruct);
    vds.setcpu_cores(AssignIntValue(xmlRpcStruct, VdsProperties.cpu_cores));
    vds.setcpu_sockets(AssignIntValue(xmlRpcStruct, VdsProperties.cpu_sockets));
    vds.setcpu_model(AssignStringValue(xmlRpcStruct, VdsProperties.cpu_model));
    vds.setcpu_speed_mh(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_speed_mh));
    vds.setphysical_mem_mb(AssignIntValue(xmlRpcStruct, VdsProperties.physical_mem_mb));
    vds.setkvm_enabled(AssignBoolValue(xmlRpcStruct, VdsProperties.kvm_enabled));
    vds.setreserved_mem(AssignIntValue(xmlRpcStruct, VdsProperties.reservedMem));
    Integer guestOverhead = AssignIntValue(xmlRpcStruct, VdsProperties.guestOverhead);
    vds.setguest_overhead(guestOverhead != null ? guestOverhead : 0);
    vds.setcpu_flags(AssignStringValue(xmlRpcStruct, VdsProperties.cpu_flags));
    UpdatePackagesVersions(vds, xmlRpcStruct);
    vds.setsupported_cluster_levels(AssignStringValueFromArray(xmlRpcStruct, VdsProperties.supported_cluster_levels));
    vds.setsupported_engines(AssignStringValueFromArray(xmlRpcStruct, VdsProperties.supported_engines));
    vds.setIScsiInitiatorName(AssignStringValue(xmlRpcStruct, VdsProperties.iSCSIInitiatorName));
    // default value if hooks is not in the xml rpc struct
    String hooksStr = "";
    if (xmlRpcStruct.containsKey(VdsProperties.hooks)) {
        hooksStr = xmlRpcStruct.getItem(VdsProperties.hooks).toString();
    }
    vds.setHooksStr(hooksStr);
}
#method_after
public static void updateVDSDynamicData(VDS vds, XmlRpcStruct xmlRpcStruct) {
    updateNetworkData(vds, xmlRpcStruct);
    vds.setCpuThreads(AssignIntValue(xmlRpcStruct, VdsProperties.cpuThreads));
    vds.setcpu_cores(AssignIntValue(xmlRpcStruct, VdsProperties.cpu_cores));
    vds.setcpu_sockets(AssignIntValue(xmlRpcStruct, VdsProperties.cpu_sockets));
    vds.setcpu_model(AssignStringValue(xmlRpcStruct, VdsProperties.cpu_model));
    vds.setcpu_speed_mh(AssignDoubleValue(xmlRpcStruct, VdsProperties.cpu_speed_mh));
    vds.setphysical_mem_mb(AssignIntValue(xmlRpcStruct, VdsProperties.physical_mem_mb));
    vds.setkvm_enabled(AssignBoolValue(xmlRpcStruct, VdsProperties.kvm_enabled));
    vds.setreserved_mem(AssignIntValue(xmlRpcStruct, VdsProperties.reservedMem));
    Integer guestOverhead = AssignIntValue(xmlRpcStruct, VdsProperties.guestOverhead);
    vds.setguest_overhead(guestOverhead != null ? guestOverhead : 0);
    vds.setcpu_flags(AssignStringValue(xmlRpcStruct, VdsProperties.cpu_flags));
    UpdatePackagesVersions(vds, xmlRpcStruct);
    vds.setsupported_cluster_levels(AssignStringValueFromArray(xmlRpcStruct, VdsProperties.supported_cluster_levels));
    vds.setsupported_engines(AssignStringValueFromArray(xmlRpcStruct, VdsProperties.supported_engines));
    vds.setIScsiInitiatorName(AssignStringValue(xmlRpcStruct, VdsProperties.iSCSIInitiatorName));
    // default value if hooks is not in the xml rpc struct
    String hooksStr = "";
    if (xmlRpcStruct.containsKey(VdsProperties.hooks)) {
        hooksStr = xmlRpcStruct.getItem(VdsProperties.hooks).toString();
    }
    vds.setHooksStr(hooksStr);
}
#end_block

#method_before
@Override
protected void executeVmCommand() {
    VM vm = getVm();
    vm.setConsoleCurrentUserName(getParameters().getConsoleUserName());
    final VmDynamicDAO dao = DbFacade.getInstance().getVmDynamicDao();
    dao.update(vm.getDynamicData());
    setSucceeded(true);
}
#method_after
@Override
protected void executeVmCommand() {
    VM vm = getVm();
    vm.setConsoleCurrentUserName(getParameters().getConsoleUserName());
    VDSParametersBase updateVmDynamicParams = new UpdateVmDynamicDataVDSCommandParameters(getVdsId(), vm.getDynamicData());
    runVdsCommand(VDSCommandType.UpdateVmDynamicData, updateVmDynamicParams);
    setSucceeded(true);
}
#end_block

#method_before
@Override
public void save(VM vm) {
    getCallsHandler().executeModification("InsertVm", getCustomMapSqlParameterSource().addValue("description", vm.getDescription()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOs()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getVmName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect()).addValue("is_initialized", vm.isInitialized()).addValue("is_auto_suspend", vm.isAutoSuspend()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()));
}
#method_after
@Override
public void save(VM vm) {
    getCallsHandler().executeModification("InsertVm", getCustomMapSqlParameterSource().addValue("description", vm.getDescription()).addValue("mem_size_mb", vm.getMemSizeMb()).addValue("os", vm.getOs()).addValue("vds_group_id", vm.getVdsGroupId()).addValue("vm_guid", vm.getId()).addValue("vm_name", vm.getVmName()).addValue("vmt_guid", vm.getVmtGuid()).addValue("num_of_monitors", vm.getNumOfMonitors()).addValue("allow_console_reconnect", vm.getAllowConsoleReconnect()).addValue("is_initialized", vm.isInitialized()).addValue("is_auto_suspend", vm.isAutoSuspend()).addValue("num_of_sockets", vm.getNumOfSockets()).addValue("cpu_per_socket", vm.getCpuPerSocket()).addValue("usb_policy", vm.getUsbPolicy()).addValue("time_zone", vm.getTimeZone()).addValue("auto_startup", vm.isAutoStartup()).addValue("is_stateless", vm.isStateless()).addValue("is_smartcard_enabled", vm.isSmartcardEnabled()).addValue("is_delete_protected", vm.isDeleteProtected()).addValue("dedicated_vm_for_vds", vm.getDedicatedVmForVds()).addValue("fail_back", vm.isFailBack()).addValue("vm_type", vm.getVmType()).addValue("nice_level", vm.getNiceLevel()).addValue("default_boot_sequence", vm.getDefaultBootSequence()).addValue("default_display_type", vm.getDefaultDisplayType()).addValue("priority", vm.getPriority()).addValue("iso_path", vm.getIsoPath()).addValue("origin", vm.getOrigin()).addValue("initrd_url", vm.getInitrdUrl()).addValue("kernel_url", vm.getKernelUrl()).addValue("kernel_params", vm.getKernelParams()).addValue("migration_support", vm.getMigrationSupport().getValue()).addValue("predefined_properties", vm.getPredefinedProperties()).addValue("userdefined_properties", vm.getUserDefinedProperties()).addValue("min_allocated_mem", vm.getMinAllocatedMem()).addValue("cpu_pinning", vm.getCpuPinning()).addValue("host_cpu_flags", vm.isUseHostCpuFlags()).addValue("guest_agent_nics_hash", vm.getGuestAgentNicsHash()));
}
#end_block

#method_before
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setVmName(rs.getString("vm_name"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setVmOs(VmOsType.forValue(rs.getInt("vm_os")));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOs(VmOsType.forValue(rs.getInt("vmt_os")));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
    entity.setMigratingToVds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(NGuid.createGuidFromString(rs.getString("vm_pool_id")));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setAutoSuspend(rs.getBoolean("is_auto_suspend"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(Guid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setSelectionAlgorithm(VdsSelectionAlgorithm.forValue(rs.getInt("selection_algorithm")));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    return entity;
}
#method_after
@Override
public VM mapRow(ResultSet rs, int rowNum) throws SQLException {
    VM entity = new VM();
    entity.setId(Guid.createGuidFromString(rs.getString("vm_guid")));
    entity.setVmName(rs.getString("vm_name"));
    entity.setQuotaId(Guid.createGuidFromString(rs.getString("quota_id")));
    entity.setQuotaName(rs.getString("quota_name"));
    entity.setQuotaEnforcementType(QuotaEnforcementTypeEnum.forValue(rs.getInt("quota_enforcement_type")));
    entity.setVmMemSizeMb(rs.getInt("vm_mem_size_mb"));
    entity.setVmtGuid(Guid.createGuidFromString(rs.getString("vmt_guid")));
    entity.setVmOs(VmOsType.forValue(rs.getInt("vm_os")));
    entity.setVmDescription(rs.getString("vm_description"));
    entity.setVdsGroupId(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setVmDomain(rs.getString("vm_domain"));
    entity.setVmCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vm_creation_date")));
    entity.setVdsGroupName(rs.getString("vds_group_name"));
    entity.setVdsGroupDescription(rs.getString("vds_group_description"));
    entity.setVmtName(rs.getString("vmt_name"));
    entity.setVmtMemSizeMb(rs.getInt("vmt_mem_size_mb"));
    entity.setVmtOs(VmOsType.forValue(rs.getInt("vmt_os")));
    entity.setVmtCreationDate(DbFacadeUtils.fromDate(rs.getTimestamp("vmt_creation_date")));
    entity.setVmtChildCount(rs.getInt("vmt_child_count"));
    entity.setVmtNumOfCpus(rs.getInt("vmt_num_of_cpus"));
    entity.setVmtNumOfSockets(rs.getInt("vmt_num_of_sockets"));
    entity.setVmtCpuPerSocket(rs.getInt("vmt_cpu_per_socket"));
    entity.setVmtDescription(rs.getString("vmt_description"));
    entity.setStatus(VMStatus.forValue(rs.getInt("status")));
    entity.setVmIp(rs.getString("vm_ip"));
    entity.setVmHost(rs.getString("vm_host"));
    entity.setVmPid((Integer) rs.getObject("vm_pid"));
    entity.setLastStartTime(DbFacadeUtils.fromDate(rs.getTimestamp("last_start_time")));
    entity.setGuestCurrentUserName(rs.getString("guest_cur_user_name"));
    entity.setConsoleCurrentUserName(rs.getString("console_cur_user_name"));
    entity.setGuestLastLoginTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_login_time")));
    entity.setGuestLastLogoutTime(DbFacadeUtils.fromDate(rs.getTimestamp("guest_last_logout_time")));
    entity.setConsoleUserId(NGuid.createGuidFromString(rs.getString("console_user_id")));
    entity.setGuestOs(rs.getString("guest_os"));
    entity.setCpuUser(rs.getDouble("cpu_user"));
    entity.setCpuSys(rs.getDouble("cpu_sys"));
    entity.setElapsedTime(rs.getDouble("elapsed_time"));
    entity.setUsageNetworkPercent((Integer) rs.getObject("usage_network_percent"));
    entity.setUsageMemPercent((Integer) rs.getObject("usage_mem_percent"));
    entity.setUsageCpuPercent((Integer) rs.getObject("usage_cpu_percent"));
    entity.setRunOnVds(NGuid.createGuidFromString(rs.getString("run_on_vds")));
    entity.setMigratingToVds(NGuid.createGuidFromString(rs.getString("migrating_to_vds")));
    entity.setAppList(rs.getString("app_list"));
    entity.setDisplay((Integer) rs.getObject("display"));
    entity.setVmPoolName(rs.getString("vm_pool_name"));
    entity.setVmPoolId(NGuid.createGuidFromString(rs.getString("vm_pool_id")));
    entity.setNumOfMonitors(rs.getInt("num_of_monitors"));
    entity.setAllowConsoleReconnect(rs.getBoolean("allow_console_reconnect"));
    entity.setInitialized(rs.getBoolean("is_initialized"));
    entity.setAutoSuspend(rs.getBoolean("is_auto_suspend"));
    entity.setNumOfSockets(rs.getInt("num_of_sockets"));
    entity.setCpuPerSocket(rs.getInt("cpu_per_socket"));
    entity.setUsbPolicy(UsbPolicy.forValue(rs.getInt("usb_policy")));
    entity.setAcpiEnable((Boolean) rs.getObject("acpi_enable"));
    entity.setSession(SessionState.forValue(rs.getInt("session")));
    entity.setDisplayIp(rs.getString("display_ip"));
    entity.setDisplayType(DisplayType.forValue(rs.getInt("display_type")));
    entity.setKvmEnable((Boolean) rs.getObject("kvm_enable"));
    entity.setBootSequence(BootSequence.forValue(rs.getInt("boot_sequence")));
    entity.setRunOnVdsName(rs.getString("run_on_vds_name"));
    entity.setTimeZone(rs.getString("time_zone"));
    entity.setDisplaySecurePort((Integer) rs.getObject("display_secure_port"));
    entity.setUtcDiff((Integer) rs.getObject("utc_diff"));
    entity.setAutoStartup(rs.getBoolean("auto_startup"));
    entity.setStateless(rs.getBoolean("is_stateless"));
    entity.setSmartcardEnabled(rs.getBoolean("is_smartcard_enabled"));
    entity.setDeleteProtected(rs.getBoolean("is_delete_protected"));
    entity.setDedicatedVmForVds(NGuid.createGuidFromString(rs.getString("dedicated_vm_for_vds")));
    entity.setFailBack(rs.getBoolean("fail_back"));
    entity.setLastVdsRunOn(NGuid.createGuidFromString(rs.getString("last_vds_run_on")));
    entity.setClientIp(rs.getString("client_ip"));
    entity.setGuestRequestedMemory((Integer) rs.getObject("guest_requested_memory"));
    entity.setVdsGroupCpuName(rs.getString("vds_group_cpu_name"));
    entity.setVmType(VmType.forValue(rs.getInt("vm_type")));
    entity.setStoragePoolId(Guid.createGuidFromString(rs.getString("storage_pool_id")));
    entity.setStoragePoolName(rs.getString("storage_pool_name"));
    entity.setSelectionAlgorithm(VdsSelectionAlgorithm.forValue(rs.getInt("selection_algorithm")));
    entity.setTransparentHugePages(rs.getBoolean("transparent_hugepages"));
    entity.setNiceLevel(rs.getInt("nice_level"));
    entity.setHibernationVolHandle(rs.getString("hibernation_vol_handle"));
    entity.setDefaultBootSequence(BootSequence.forValue(rs.getInt("default_boot_sequence")));
    entity.setDefaultDisplayType(DisplayType.forValue(rs.getInt("default_display_type")));
    entity.setPriority(rs.getInt("priority"));
    entity.setIsoPath(rs.getString("iso_path"));
    entity.setOrigin(OriginType.forValue(rs.getInt("origin")));
    entity.setInitrdUrl(rs.getString("initrd_url"));
    entity.setKernelUrl(rs.getString("kernel_url"));
    entity.setKernelParams(rs.getString("kernel_params"));
    entity.setVdsGroupCompatibilityVersion(new Version(rs.getString("vds_group_compatibility_version")));
    entity.setExitMessage(rs.getString("exit_message"));
    entity.setExitStatus(VmExitStatus.forValue(rs.getInt("exit_status")));
    entity.setVmPauseStatus(VmPauseStatus.forValue(rs.getInt("pause_status")));
    entity.setMigrationSupport(MigrationSupport.forValue(rs.getInt("migration_support")));
    String predefinedProperties = rs.getString("predefined_properties");
    String userDefinedProperties = rs.getString("userdefined_properties");
    entity.setPredefinedProperties(predefinedProperties);
    entity.setUserDefinedProperties(userDefinedProperties);
    entity.setCustomProperties(VmPropertiesUtils.getInstance().customProperties(predefinedProperties, userDefinedProperties));
    entity.setMinAllocatedMem(rs.getInt("min_allocated_mem"));
    entity.setHash(rs.getString("hash"));
    entity.setCpuPinning(rs.getString("cpu_pinning"));
    entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags"));
    entity.setGuestAgentNicsHash(rs.getInt("guest_agent_nics_hash"));
    return entity;
}
#end_block

#method_before
private void SaveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.UpdateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.UpdateStatisticsData(stat);
        CheckVdsMemoryThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    updateAllInTransaction(_vmDynamicToSave.values(), getDbFacade().getVmDynamicDao());
    updateAllInTransaction(_vmStatisticsToSave.values(), getDbFacade().getVmStatisticsDao());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    updateAllInTransaction(allVmInterfaceStatistics, getDbFacade().getVmNetworkStatisticsDao());
    updateAllInTransaction(_vmDiskImageDynamicToSave.values(), getDbFacade().getDiskImageDynamicDao());
    saveVmDevicesToDb();
}
#method_after
private void SaveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.UpdateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.UpdateStatisticsData(stat);
        CheckVdsMemoryThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    updateAllInTransaction(_vmDynamicToSave.values(), getDbFacade().getVmDynamicDao());
    updateAllInTransaction(_vmStatisticsToSave.values(), getDbFacade().getVmStatisticsDao());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    updateAllInTransaction(allVmInterfaceStatistics, getDbFacade().getVmNetworkStatisticsDao());
    updateAllInTransaction(_vmDiskImageDynamicToSave.values(), getDbFacade().getDiskImageDynamicDao());
    saveVmDevicesToDb();
    saveVmGuestAgentNetworkDevices();
}
#end_block

#method_before
private void refreshVmStats() {
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debug("vds::refreshVmList entered");
    }
    VdsBrokerCommand<VdsIdAndVdsVDSCommandParametersBase> command;
    if (!_vdsManager.getRefreshStatistics()) {
        command = new ListVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    } else {
        command = new GetAllVmStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    }
    _runningVms = (Map<Guid, Entry<VmDynamic, VmStatistics>>) command.ExecuteWithReturnValue();
    if (command.getVDSReturnValue().getSucceeded()) {
        List<VM> running = checkVmsStatusChanged();
        proceedDownVms();
        // update repository and check if there are any vm in cache that not
        // in vdsm
        updateRepository(running);
        // Going over all returned VMs and updting the data structures
        // accordingly
        // checking the db for incoherent vm status;
        // setVmStatusDownForVmNotFound();
        refreshCommitedMemory();
        // Handle VM devices were changed (for 3.1 cluster and above)
        if (!VmDeviceCommonUtils.isOldClusterVersion(_vds.getvds_group_compatibility_version())) {
            handleVmDeviceChange();
        }
    } else if (command.getVDSReturnValue().getExceptionObject() != null) {
        if (command.getVDSReturnValue().getExceptionObject() instanceof VDSErrorException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) {
            _saveVdsDynamic = _vdsManager.handleNetworkException((VDSNetworkException) command.getVDSReturnValue().getExceptionObject(), _vds);
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSProtocolException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        }
        throw command.getVDSReturnValue().getExceptionObject();
    } else {
        log.errorFormat("refreshCapabilities:GetCapabilitiesVDSCommand failed with no exception!");
    }
}
#method_after
private void refreshVmStats() {
    if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
        log.debug("vds::refreshVmList entered");
    }
    VdsBrokerCommand<VdsIdAndVdsVDSCommandParametersBase> command;
    if (!_vdsManager.getRefreshStatistics()) {
        command = new ListVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    } else {
        command = new GetAllVmStatsVDSCommand<VdsIdAndVdsVDSCommandParametersBase>(new VdsIdAndVdsVDSCommandParametersBase(_vds));
    }
    _runningVms = (Map<Guid, VmInternalData>) command.ExecuteWithReturnValue();
    if (command.getVDSReturnValue().getSucceeded()) {
        List<VM> running = checkVmsStatusChanged();
        proceedDownVms();
        // update repository and check if there are any vm in cache that not
        // in vdsm
        updateRepository(running);
        // Going over all returned VMs and updting the data structures
        // accordingly
        // checking the db for incoherent vm status;
        // setVmStatusDownForVmNotFound();
        refreshCommitedMemory();
        // Handle VM devices were changed (for 3.1 cluster and above)
        if (!VmDeviceCommonUtils.isOldClusterVersion(_vds.getvds_group_compatibility_version())) {
            handleVmDeviceChange();
        }
        prepareGuestAgentNetworkDevicesForUpdate();
    } else if (command.getVDSReturnValue().getExceptionObject() != null) {
        if (command.getVDSReturnValue().getExceptionObject() instanceof VDSErrorException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSNetworkException) {
            _saveVdsDynamic = _vdsManager.handleNetworkException((VDSNetworkException) command.getVDSReturnValue().getExceptionObject(), _vds);
        } else if (command.getVDSReturnValue().getExceptionObject() instanceof VDSProtocolException) {
            log.errorFormat("Failed vds listing,  vds = {0} : {1}, error = {2}", _vds.getId(), _vds.getvds_name(), command.getVDSReturnValue().getExceptionString());
        }
        throw command.getVDSReturnValue().getExceptionObject();
    } else {
        log.errorFormat("refreshCapabilities:GetCapabilitiesVDSCommand failed with no exception!");
    }
}
#end_block

#method_before
private void handleVmDeviceChange() {
    // Go over all the vms and detemine which ones require updating
    List<String> vmsToUpdateFromVds = new ArrayList<String>();
    for (Entry<VmDynamic, VmStatistics> vmHelper : _runningVms.values()) {
        VmDynamic vmDynamic = vmHelper.getKey();
        if (vmDynamic != null) {
            VM vm = _vmDict.get(vmDynamic.getId());
            if (vm != null) {
                String dbHash = vm.getHash();
                if ((dbHash == null && vmDynamic.getHash() != null) || (dbHash != null) && !dbHash.equals(vmDynamic.getHash())) {
                    vmsToUpdateFromVds.add(vmDynamic.getId().toString());
                    // update new hash value
                    if (_vmDynamicToSave.containsKey(vm.getId())) {
                        _vmDynamicToSave.get(vm.getId()).setHash(vmDynamic.getHash());
                    } else {
                        AddVmDynamicToList(vmDynamic);
                    }
                }
            }
        }
    }
    if (vmsToUpdateFromVds.size() > 0) {
        // If there are vms that require updating,
        // get the new info from VDSM in one call, and then update them all
        updateVmDevices(vmsToUpdateFromVds);
    }
}
#method_after
private void handleVmDeviceChange() {
    // Go over all the vms and detemine which ones require updating
    List<String> vmsToUpdateFromVds = new ArrayList<String>();
    for (VmInternalData vmInternalData : _runningVms.values()) {
        VmDynamic vmDynamic = vmInternalData.getVmDynamic();
        if (vmDynamic != null) {
            VM vm = _vmDict.get(vmDynamic.getId());
            if (vm != null) {
                String dbHash = vm.getHash();
                if ((dbHash == null && vmDynamic.getHash() != null) || (dbHash != null) && !dbHash.equals(vmDynamic.getHash())) {
                    vmsToUpdateFromVds.add(vmDynamic.getId().toString());
                    // update new hash value
                    if (_vmDynamicToSave.containsKey(vm.getId())) {
                        _vmDynamicToSave.get(vm.getId()).setHash(vmDynamic.getHash());
                    } else {
                        AddVmDynamicToList(vmDynamic);
                    }
                }
            }
        }
    }
    if (vmsToUpdateFromVds.size() > 0) {
        // If there are vms that require updating,
        // get the new info from VDSM in one call, and then update them all
        updateVmDevices(vmsToUpdateFromVds);
    }
}
#end_block

#method_before
private List<VM> checkVmsStatusChanged() {
    List<VM> running = new ArrayList<VM>();
    if (!_vdsManager.getRefreshStatistics()) {
        List<VmDynamic> tempRunningList = new ArrayList<VmDynamic>();
        for (Entry<VmDynamic, VmStatistics> runningVm : _runningVms.values()) {
            tempRunningList.add(runningVm.getKey());
        }
        for (VmDynamic runningVm : tempRunningList) {
            VM vmToUpdate = null;
            vmToUpdate = _vmDict.get(runningVm.getId());
            if (vmToUpdate == null || (vmToUpdate.getStatus() != runningVm.getstatus() && !(vmToUpdate.getStatus() == VMStatus.SavingState && runningVm.getstatus() == VMStatus.Up))) {
                GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters> command = new GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters>(new GetVmStatsVDSCommandParameters(_vds, runningVm.getId()));
                command.Execute();
                if (command.getVDSReturnValue().getSucceeded()) {
                    _runningVms.put(runningVm.getId(), (Entry<VmDynamic, VmStatistics>) command.getReturnValue());
                } else {
                    _runningVms.remove(runningVm.getId());
                }
            } else {
                // status not changed move to next vm
                running.add(vmToUpdate);
                _runningVms.remove(vmToUpdate.getId());
            }
        }
    }
    return running;
}
#method_after
private List<VM> checkVmsStatusChanged() {
    List<VM> running = new ArrayList<VM>();
    if (!_vdsManager.getRefreshStatistics()) {
        List<VmDynamic> tempRunningList = new ArrayList<VmDynamic>();
        for (VmInternalData runningVm : _runningVms.values()) {
            tempRunningList.add(runningVm.getVmDynamic());
        }
        for (VmDynamic runningVm : tempRunningList) {
            VM vmToUpdate = null;
            vmToUpdate = _vmDict.get(runningVm.getId());
            if (vmToUpdate == null || (vmToUpdate.getStatus() != runningVm.getstatus() && !(vmToUpdate.getStatus() == VMStatus.SavingState && runningVm.getstatus() == VMStatus.Up))) {
                GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters> command = new GetVmStatsVDSCommand<GetVmStatsVDSCommandParameters>(new GetVmStatsVDSCommandParameters(_vds, runningVm.getId()));
                command.Execute();
                if (command.getVDSReturnValue().getSucceeded()) {
                    _runningVms.put(runningVm.getId(), (VmInternalData) command.getReturnValue());
                } else {
                    _runningVms.remove(runningVm.getId());
                }
            } else {
                // status not changed move to next vm
                running.add(vmToUpdate);
                _runningVms.remove(vmToUpdate.getId());
            }
        }
    }
    return running;
}
#end_block

#method_before
private void proceedDownVms() {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic vm = vm_helper.getKey();
        if (vm.getstatus() != VMStatus.Down) {
            continue;
        }
        VM vmTo = null;
        // _vdsManager.getVm(vm.getvm_guid());
        vmTo = _vmDict.get(vm.getId());
        VMStatus status = VMStatus.Unassigned;
        if (vmTo != null) {
            status = vmTo.getStatus();
            proceedVmBeforeDeletion(vmTo, vm);
            // when going to suspend, delete vm from cache later
            if (status == VMStatus.SavingState) {
                ResourceManager.getInstance().InternalSetVmStatus(vmTo, VMStatus.Suspended);
            }
            clearVm(vmTo);
        }
        VmStatistics vmStatistics = getDbFacade().getVmStatisticsDao().get(vm.getId());
        if (vmStatistics != null) {
            DestroyVDSCommand<DestroyVmVDSCommandParameters> vdsBrokerCommand = new DestroyVDSCommand<DestroyVmVDSCommandParameters>(new DestroyVmVDSCommandParameters(_vds.getId(), vm.getId(), false, false, 0));
            vdsBrokerCommand.Execute();
            if (vmTo != null && status == VMStatus.SavingState) {
                AfterSuspendTreatment(vm);
            } else if (status != VMStatus.MigratingFrom) {
                HandleVmOnDown(vmTo, vm, vmStatistics);
            }
        }
    }
}
#method_after
private void proceedDownVms() {
    for (VmInternalData vmInternalData : _runningVms.values()) {
        VmDynamic vm = vmInternalData.getVmDynamic();
        if (vm.getstatus() != VMStatus.Down) {
            continue;
        }
        VM vmTo = null;
        // _vdsManager.getVm(vm.getvm_guid());
        vmTo = _vmDict.get(vm.getId());
        VMStatus status = VMStatus.Unassigned;
        if (vmTo != null) {
            status = vmTo.getStatus();
            proceedVmBeforeDeletion(vmTo, vm);
            // when going to suspend, delete vm from cache later
            if (status == VMStatus.SavingState) {
                ResourceManager.getInstance().InternalSetVmStatus(vmTo, VMStatus.Suspended);
            }
            clearVm(vmTo);
        }
        VmStatistics vmStatistics = getDbFacade().getVmStatisticsDao().get(vm.getId());
        if (vmStatistics != null) {
            DestroyVDSCommand<DestroyVmVDSCommandParameters> vdsBrokerCommand = new DestroyVDSCommand<DestroyVmVDSCommandParameters>(new DestroyVmVDSCommandParameters(_vds.getId(), vm.getId(), false, false, 0));
            vdsBrokerCommand.Execute();
            if (vmTo != null && status == VMStatus.SavingState) {
                AfterSuspendTreatment(vm);
            } else if (status != VMStatus.MigratingFrom) {
                HandleVmOnDown(vmTo, vm, vmStatistics);
            }
        }
    }
}
#end_block

#method_before
private void updateRepository(List<VM> running) {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic runningVm = vm_helper.getKey();
        VM vmToUpdate = null;
        vmToUpdate = _vmDict.get(runningVm.getId());
        // if not migrating here and not down
        if (!inMigrationTo(runningVm, vmToUpdate) && runningVm.getstatus() != VMStatus.Down) {
            if (vmToUpdate != null) {
                if (_vmDict.containsKey(vmToUpdate.getId()) && !StringHelper.EqOp(runningVm.getclient_ip(), vmToUpdate.getClientIp())) {
                    _vmsClientIpChanged.put(vmToUpdate, runningVm);
                }
            }
            if (vmToUpdate != null) {
                logVmStatusTransition(vmToUpdate, runningVm);
                // open spice for dedicated VMs
                if (vmToUpdate.getStatus() != VMStatus.Up && runningVm.getstatus() == VMStatus.Up || vmToUpdate.getStatus() != VMStatus.PoweringUp && runningVm.getstatus() == VMStatus.PoweringUp) {
                    // if no current client ip already connected.
                    if (runningVm.getdisplay() != null) {
                        _poweringUpVms.add(runningVm);
                    } else {
                        log.errorFormat("VdsBroker.VdsUpdateRunTimeInfo.updateRepository - runningVm.display is null, cannot start spice for it");
                    }
                }
                // "Up" as this means that the power down operation failed:
                if (vmToUpdate.getStatus() == VMStatus.PoweringDown && runningVm.getstatus() == VMStatus.Up) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_POWER_DOWN_FAILED);
                }
                if (vmToUpdate.getStatus() != VMStatus.Up && vmToUpdate.getStatus() != VMStatus.MigratingFrom && runningVm.getstatus() == VMStatus.Up) {
                    // running handling
                    if (log.isDebugEnabled()) {
                        log.debugFormat("removing VM {0} from successful run VMs list", vmToUpdate.getId());
                    }
                    if (!_succededToRunVms.contains(vmToUpdate.getId())) {
                        _succededToRunVms.add(vmToUpdate.getId());
                    }
                }
                afterMigrationFrom(runningVm, vmToUpdate);
                if (vmToUpdate.getStatus() != VMStatus.NotResponding && runningVm.getstatus() == VMStatus.NotResponding) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_NOT_RESPONDING);
                } else /**
                 * check if vm is suspended and remove it from async list
                 */
                if (runningVm.getstatus() == VMStatus.Paused) {
                    _vmsToRemoveFromAsync.add(vmToUpdate.getId());
                    if (vmToUpdate.getStatus() != VMStatus.Paused) {
                        // check exit message to determine wht the vm has
                        // paused
                        AuditLogType logType = AuditLogType.UNASSIGNED;
                        AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                        VmPauseStatus pauseStatus = runningVm.getPauseStatus();
                        if (pauseStatus.equals(VmPauseStatus.NOERR) || pauseStatus.equals(VmPauseStatus.NONE)) {
                        // user requested pause, no log needed
                        } else if (pauseStatus == VmPauseStatus.ENOSPC) {
                            logType = AuditLogType.VM_PAUSED_ENOSPC;
                        } else if (pauseStatus == VmPauseStatus.EIO) {
                            logType = AuditLogType.VM_PAUSED_EIO;
                        } else if (pauseStatus == VmPauseStatus.EPERM) {
                            logType = AuditLogType.VM_PAUSED_EPERM;
                        } else {
                            logType = AuditLogType.VM_PAUSED_ERROR;
                        }
                        if (logType != AuditLogType.UNASSIGNED) {
                            auditLog(logable, logType);
                        }
                    }
                }
            }
            if (vmToUpdate != null || runningVm.getstatus() != VMStatus.MigratingFrom) {
                RefObject<VM> tempRefObj = new RefObject<VM>(vmToUpdate);
                boolean updateSucceed = UpdateVmRunTimeInfo(tempRefObj, runningVm);
                vmToUpdate = tempRefObj.argvalue;
                if (updateSucceed) {
                    AddVmDynamicToList(vmToUpdate.getDynamicData());
                }
            }
            if (vmToUpdate != null) {
                UpdateVmStatistics(vmToUpdate);
                if (_vmDict.containsKey(runningVm.getId())) {
                    running.add(_vmDict.get(runningVm.getId()));
                    if (!_vdsManager.getInitialized()) {
                        ResourceManager.getInstance().RemoveVmFromDownVms(_vds.getId(), runningVm.getId());
                    }
                }
            }
        } else {
            if (runningVm.getstatus() == VMStatus.MigratingTo && vmToUpdate != null) {
                running.add(vmToUpdate);
            }
            VmDynamic vmDynamic = getDbFacade().getVmDynamicDao().get(runningVm.getId());
            if (vmDynamic == null || vmDynamic.getstatus() != VMStatus.Unknown) {
                _vmDynamicToSave.remove(runningVm.getId());
            }
        }
    }
    // compare between vm in cache and vm from vdsm
    removeVmsFromCache(running);
}
#method_after
private void updateRepository(List<VM> running) {
    for (VmInternalData vmInternalData : _runningVms.values()) {
        VmDynamic runningVm = vmInternalData.getVmDynamic();
        VM vmToUpdate = null;
        vmToUpdate = _vmDict.get(runningVm.getId());
        // if not migrating here and not down
        if (!inMigrationTo(runningVm, vmToUpdate) && runningVm.getstatus() != VMStatus.Down) {
            if (vmToUpdate != null) {
                if (_vmDict.containsKey(vmToUpdate.getId()) && !StringHelper.EqOp(runningVm.getclient_ip(), vmToUpdate.getClientIp())) {
                    _vmsClientIpChanged.put(vmToUpdate, runningVm);
                }
            }
            if (vmToUpdate != null) {
                logVmStatusTransition(vmToUpdate, runningVm);
                // open spice for dedicated VMs
                if (vmToUpdate.getStatus() != VMStatus.Up && runningVm.getstatus() == VMStatus.Up || vmToUpdate.getStatus() != VMStatus.PoweringUp && runningVm.getstatus() == VMStatus.PoweringUp) {
                    // if no current client ip already connected.
                    if (runningVm.getdisplay() != null) {
                        _poweringUpVms.add(runningVm);
                    } else {
                        log.errorFormat("VdsBroker.VdsUpdateRunTimeInfo.updateRepository - runningVm.display is null, cannot start spice for it");
                    }
                }
                // "Up" as this means that the power down operation failed:
                if (vmToUpdate.getStatus() == VMStatus.PoweringDown && runningVm.getstatus() == VMStatus.Up) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_POWER_DOWN_FAILED);
                }
                if (vmToUpdate.getStatus() != VMStatus.Up && vmToUpdate.getStatus() != VMStatus.MigratingFrom && runningVm.getstatus() == VMStatus.Up) {
                    // running handling
                    if (log.isDebugEnabled()) {
                        log.debugFormat("removing VM {0} from successful run VMs list", vmToUpdate.getId());
                    }
                    if (!_succededToRunVms.contains(vmToUpdate.getId())) {
                        _succededToRunVms.add(vmToUpdate.getId());
                    }
                }
                afterMigrationFrom(runningVm, vmToUpdate);
                if (vmToUpdate.getStatus() != VMStatus.NotResponding && runningVm.getstatus() == VMStatus.NotResponding) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_NOT_RESPONDING);
                } else /**
                 * check if vm is suspended and remove it from async list
                 */
                if (runningVm.getstatus() == VMStatus.Paused) {
                    _vmsToRemoveFromAsync.add(vmToUpdate.getId());
                    if (vmToUpdate.getStatus() != VMStatus.Paused) {
                        // check exit message to determine wht the vm has
                        // paused
                        AuditLogType logType = AuditLogType.UNASSIGNED;
                        AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                        VmPauseStatus pauseStatus = runningVm.getPauseStatus();
                        if (pauseStatus.equals(VmPauseStatus.NOERR) || pauseStatus.equals(VmPauseStatus.NONE)) {
                        // user requested pause, no log needed
                        } else if (pauseStatus == VmPauseStatus.ENOSPC) {
                            logType = AuditLogType.VM_PAUSED_ENOSPC;
                        } else if (pauseStatus == VmPauseStatus.EIO) {
                            logType = AuditLogType.VM_PAUSED_EIO;
                        } else if (pauseStatus == VmPauseStatus.EPERM) {
                            logType = AuditLogType.VM_PAUSED_EPERM;
                        } else {
                            logType = AuditLogType.VM_PAUSED_ERROR;
                        }
                        if (logType != AuditLogType.UNASSIGNED) {
                            auditLog(logable, logType);
                        }
                    }
                }
            }
            if (vmToUpdate != null || runningVm.getstatus() != VMStatus.MigratingFrom) {
                RefObject<VM> tempRefObj = new RefObject<VM>(vmToUpdate);
                boolean updateSucceed = UpdateVmRunTimeInfo(tempRefObj, runningVm);
                vmToUpdate = tempRefObj.argvalue;
                if (updateSucceed) {
                    AddVmDynamicToList(vmToUpdate.getDynamicData());
                }
            }
            if (vmToUpdate != null) {
                UpdateVmStatistics(vmToUpdate);
                if (_vmDict.containsKey(runningVm.getId())) {
                    running.add(_vmDict.get(runningVm.getId()));
                    if (!_vdsManager.getInitialized()) {
                        ResourceManager.getInstance().RemoveVmFromDownVms(_vds.getId(), runningVm.getId());
                    }
                }
            }
        } else {
            if (runningVm.getstatus() == VMStatus.MigratingTo && vmToUpdate != null) {
                running.add(vmToUpdate);
            }
            VmDynamic vmDynamic = getDbFacade().getVmDynamicDao().get(runningVm.getId());
            if (vmDynamic == null || vmDynamic.getstatus() != VMStatus.Unknown) {
                _vmDynamicToSave.remove(runningVm.getId());
            }
        }
    }
    // compare between vm in cache and vm from vdsm
    removeVmsFromCache(running);
}
#end_block

#method_before
private void removeVmsFromCache(List<VM> running) {
    Guid vmGuid;
    for (VM vmToRemove : _vmDict.values()) {
        if (running.contains(vmToRemove)) {
            continue;
        }
        proceedVmBeforeDeletion(vmToRemove, null);
        boolean isInMigration = false;
        if (vmToRemove.getStatus() == VMStatus.MigratingFrom) {
            isInMigration = true;
            vmToRemove.setRunOnVds(vmToRemove.getmigrating_to_vds());
            log.infoFormat("Setting VM {0} {1} to status unknown", vmToRemove.getVmName(), vmToRemove.getId());
            ResourceManager.getInstance().InternalSetVmStatus(vmToRemove, VMStatus.Unknown);
            AddVmDynamicToList(vmToRemove.getDynamicData());
            AddVmStatisticsToList(vmToRemove.getStatisticsData());
            AddVmInterfaceStatisticsToList(vmToRemove.getInterfaces());
        } else {
            clearVm(vmToRemove);
        }
        log.infoFormat("vm {0} running in db and not running in vds - add to rerun treatment. vds {1}", vmToRemove.getVmName(), _vds.getvds_name());
        vmGuid = vmToRemove.getId();
        if (!isInMigration && !_vmsToRerun.contains(vmGuid) && ResourceManager.getInstance().IsVmInAsyncRunningList(vmGuid)) {
            _vmsToRerun.add(vmGuid);
        } else // or reported from vdsm with error code
        if (vmToRemove.isAutoStartup() && !_autoVmsToRun.contains(vmGuid) && (!_runningVms.containsKey(vmGuid) || (_runningVms.containsKey(vmGuid) && _runningVms.get(vmGuid).getKey().getExitStatus() != VmExitStatus.Normal))) {
            _autoVmsToRun.add(vmGuid);
        }
    }
}
#method_after
private void removeVmsFromCache(List<VM> running) {
    Guid vmGuid;
    for (VM vmToRemove : _vmDict.values()) {
        if (running.contains(vmToRemove)) {
            continue;
        }
        proceedVmBeforeDeletion(vmToRemove, null);
        boolean isInMigration = false;
        if (vmToRemove.getStatus() == VMStatus.MigratingFrom) {
            isInMigration = true;
            vmToRemove.setRunOnVds(vmToRemove.getmigrating_to_vds());
            log.infoFormat("Setting VM {0} {1} to status unknown", vmToRemove.getVmName(), vmToRemove.getId());
            ResourceManager.getInstance().InternalSetVmStatus(vmToRemove, VMStatus.Unknown);
            AddVmDynamicToList(vmToRemove.getDynamicData());
            AddVmStatisticsToList(vmToRemove.getStatisticsData());
            AddVmInterfaceStatisticsToList(vmToRemove.getInterfaces());
        } else {
            clearVm(vmToRemove);
        }
        log.infoFormat("vm {0} running in db and not running in vds - add to rerun treatment. vds {1}", vmToRemove.getVmName(), _vds.getvds_name());
        vmGuid = vmToRemove.getId();
        if (!isInMigration && !_vmsToRerun.contains(vmGuid) && ResourceManager.getInstance().IsVmInAsyncRunningList(vmGuid)) {
            _vmsToRerun.add(vmGuid);
        } else // or reported from vdsm with error code
        if (vmToRemove.isAutoStartup() && !_autoVmsToRun.contains(vmGuid) && (!_runningVms.containsKey(vmGuid) || (_runningVms.containsKey(vmGuid) && _runningVms.get(vmGuid).getVmDynamic().getExitStatus() != VmExitStatus.Normal))) {
            _autoVmsToRun.add(vmGuid);
        }
    }
}
#end_block

#method_before
private void UpdateVmStatistics(VM vmToUpdate) {
    // check if time for vm statistics refresh - update cache and DB
    if (_vdsManager.getRefreshStatistics()) {
        VmStatistics vmStatistics = _runningVms.get(vmToUpdate.getId()).getValue();
        vmToUpdate.updateRunTimeStatisticsData(vmStatistics, vmToUpdate);
        AddVmStatisticsToList(vmToUpdate.getStatisticsData());
        UpdateInterfaceStatistics(vmToUpdate, vmStatistics);
        for (DiskImageDynamic imageDynamic : _runningVms.get(vmToUpdate.getId()).getKey().getDisks()) {
            _vmDiskImageDynamicToSave.put(imageDynamic.getId(), imageDynamic);
        }
    }
}
#method_after
private void UpdateVmStatistics(VM vmToUpdate) {
    // check if time for vm statistics refresh - update cache and DB
    if (_vdsManager.getRefreshStatistics()) {
        VmStatistics vmStatistics = _runningVms.get(vmToUpdate.getId()).getVmStatistics();
        vmToUpdate.updateRunTimeStatisticsData(vmStatistics, vmToUpdate);
        AddVmStatisticsToList(vmToUpdate.getStatisticsData());
        UpdateInterfaceStatistics(vmToUpdate, vmStatistics);
        for (DiskImageDynamic imageDynamic : _runningVms.get(vmToUpdate.getId()).getVmDynamic().getDisks()) {
            _vmDiskImageDynamicToSave.put(imageDynamic.getId(), imageDynamic);
        }
    }
}
#end_block

#method_before
@Override
protected void executeQueryCommand() {
    List<VM> vmList = getDbFacade().getVmDao().getAllForNetwork(getParameters().getNetworkId());
    List<VmNetworkInterface> vmNetworkInterfaceList = getDbFacade().getVmNetworkInterfaceDao().getAllForNetwork(getParameters().getNetworkId());
    final Map<Guid, VM> vmsById = Entities.businessEntitiesById(vmList);
    List<PairQueryable<VmNetworkInterface, VM>> vmInterfaceVmPairs = new ArrayList<PairQueryable<VmNetworkInterface, VM>>();
    for (VmNetworkInterface vmNetworkInterface : vmNetworkInterfaceList) {
        VM vm = vmsById.get(vmNetworkInterface.getVmId());
        if (getParameters().getRunningVms() == null || VM.isStatusDown(vm.getStatus()) != getParameters().getRunningVms()) {
            vmInterfaceVmPairs.add(new PairQueryable<VmNetworkInterface, VM>(vmNetworkInterface, vm));
        }
    }
    getQueryReturnValue().setReturnValue(vmInterfaceVmPairs);
}
#method_after
@Override
protected void executeQueryCommand() {
    List<VM> vmList = getDbFacade().getVmDao().getAllForNetwork(getParameters().getNetworkId());
    List<VmNetworkInterface> vmNetworkInterfaceList = getDbFacade().getVmNetworkInterfaceDao().getAllForNetwork(getParameters().getNetworkId());
    final Map<Guid, VM> vmsById = Entities.businessEntitiesById(vmList);
    List<PairQueryable<VmNetworkInterface, VM>> vmInterfaceVmPairs = new ArrayList<PairQueryable<VmNetworkInterface, VM>>();
    for (VmNetworkInterface vmNetworkInterface : vmNetworkInterfaceList) {
        VM vm = vmsById.get(vmNetworkInterface.getVmId());
        if (getParameters().getRunningVms() == null || getParameters().getRunningVms().equals(vm.isStatusUp())) {
            vmInterfaceVmPairs.add(new PairQueryable<VmNetworkInterface, VM>(vmNetworkInterface, vm));
        }
    }
    getQueryReturnValue().setReturnValue(vmInterfaceVmPairs);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getstorage_pool_id().equals(getVdsGroup().getstorage_pool_id())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getos(), getParameters().getMasterVm().getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getpriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validate(new SnapshotsValidator().vmNotDuringSnapshot(getVmId()))) {
        return false;
    }
    if (getVm().getstatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getusb_policy(), getParameters().getVm().getos(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getstorage_ids().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getstorage_ids().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setstorage_ids(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getVm(), getReturnValue().getCanDoActionMessages(), getVm().getstorage_pool_id(), srcStorageDomainId, false, true, true, true, true, false, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, storage_domains> storageDomains = new HashMap<Guid, storage_domains>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getstorage_pool_id());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getstatus() == null || storage.getstatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getstorage_domain_type() == StorageDomainType.ImportExport || storage.getstorage_domain_type() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<storage_domains, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
        if (!StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getnum_of_sockets(), getParameters().getMasterVm().getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    if (getVdsGroup() == null || !getVm().getStoragePoolId().equals(getVdsGroup().getStoragePoolId())) {
        addCanDoActionMessage(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID);
        return false;
    }
    for (DiskImage diskImage : getVm().getDiskList()) {
        mImages.add(diskImage);
    }
    if (!VmHandler.isMemorySizeLegal(getParameters().getMasterVm().getos(), getParameters().getMasterVm().getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
        return false;
    }
    if (!IsVmPriorityValueLegal(getParameters().getMasterVm().getpriority(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (!validate(new SnapshotsValidator().vmNotDuringSnapshot(getVmId()))) {
        return false;
    }
    if (getVm().getStatus() != VMStatus.Down) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM.toString());
        return false;
    }
    if (isVmTemlateWithSameNameExist(getVmTemplateName())) {
        addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_CREATE_DUPLICATE_NAME);
        return false;
    }
    // Check that the USB policy is legal
    if (!VmHandler.isUsbPolicyLegal(getParameters().getVm().getUsbPolicy(), getParameters().getVm().getOs(), getVdsGroup(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    Map<Guid, List<DiskImage>> sourceImageDomainsImageMap = new HashMap<Guid, List<DiskImage>>();
    for (DiskImage image : mImages) {
        MultiValueMapUtils.addToMap(image.getstorage_ids().get(0), image, sourceImageDomainsImageMap);
        if (!diskInfoDestinationMap.containsKey(image.getId())) {
            Guid destStorageId = getParameters().getDestinationStorageDomainId() != null ? getParameters().getDestinationStorageDomainId() : image.getstorage_ids().get(0);
            ArrayList<Guid> storageIds = new ArrayList<Guid>();
            storageIds.add(destStorageId);
            image.setstorage_ids(storageIds);
            diskInfoDestinationMap.put(image.getId(), image);
        }
    }
    for (Guid srcStorageDomainId : sourceImageDomainsImageMap.keySet()) {
        boolean checkIsValid = true;
        if (!ImagesHandler.PerformImagesChecks(getVm(), getReturnValue().getCanDoActionMessages(), getVm().getStoragePoolId(), srcStorageDomainId, false, true, true, true, true, false, true, checkIsValid, sourceImageDomainsImageMap.get(srcStorageDomainId))) {
            return false;
        }
        checkIsValid = false;
    }
    Map<Guid, storage_domains> storageDomains = new HashMap<Guid, storage_domains>();
    Set<Guid> destImageDomains = getStorageGuidSet();
    destImageDomains.removeAll(sourceImageDomainsImageMap.keySet());
    for (Guid destImageDomain : destImageDomains) {
        storage_domains storage = DbFacade.getInstance().getStorageDomainDao().getForStoragePool(destImageDomain, getVm().getStoragePoolId());
        if (storage == null) {
            // domain is not in the same storage pool as the vm
            if (DbFacade.getInstance().getStorageDomainStaticDao().get(destImageDomain) == null) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.toString());
            } else {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_IN_STORAGE_POOL);
            }
            return false;
        }
        if (storage.getstatus() == null || storage.getstatus() != StorageDomainStatus.Active) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL.toString());
            return false;
        }
        if (storage.getstorage_domain_type() == StorageDomainType.ImportExport || storage.getstorage_domain_type() == StorageDomainType.ISO) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
            return false;
        }
        storageDomains.put(destImageDomain, storage);
    }
    // update vm snapshots for storage free space check
    ImagesHandler.fillImagesBySnapshots(getVm());
    Map<storage_domains, Integer> domainMap = StorageDomainValidator.getSpaceRequirementsForStorageDomains(ImagesHandler.filterImageDisks(getVm().getDiskMap().values(), true, false), storageDomains, diskInfoDestinationMap);
    for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
        if (!StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue())) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
            return false;
        }
    }
    return AddVmCommand.CheckCpuSockets(getParameters().getMasterVm().getnum_of_sockets(), getParameters().getMasterVm().getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
}
#end_block

#method_before
protected void AddVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getmem_size_mb(), getVmTemplateName(), getParameters().getMasterVm().getnum_of_sockets(), getParameters().getMasterVm().getcpu_per_socket(), getParameters().getMasterVm().getos(), getParameters().getMasterVm().getvds_group_id(), getVmTemplateId(), getParameters().getMasterVm().getdomain(), getParameters().getMasterVm().getnum_of_monitors(), (VmTemplateStatus.Locked.getValue()), (getParameters().getMasterVm().getusb_policy().getValue()), getParameters().getMasterVm().gettime_zone(), getParameters().getMasterVm().getis_auto_suspend(), getParameters().getMasterVm().getnice_level(), getParameters().getMasterVm().getfail_back(), getParameters().getMasterVm().getdefault_boot_sequence(), getParameters().getMasterVm().getvm_type(), getParameters().getMasterVm().isSmartcardEnabled()));
    getVmTemplate().setauto_startup(getParameters().getMasterVm().getauto_startup());
    getVmTemplate().setpriority(getParameters().getMasterVm().getpriority());
    getVmTemplate().setdefault_display_type(getParameters().getMasterVm().getdefault_display_type());
    getVmTemplate().setinitrd_url(getParameters().getMasterVm().getinitrd_url());
    getVmTemplate().setkernel_url(getParameters().getMasterVm().getkernel_url());
    getVmTemplate().setkernel_params(getParameters().getMasterVm().getkernel_params());
    getVmTemplate().setis_stateless(getParameters().getMasterVm().getis_stateless());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setdedicated_vm_for_vds(getParameters().getMasterVm().getdedicated_vm_for_vds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#method_after
protected void AddVmTemplateToDb() {
    // TODO: add timezone handling
    setVmTemplate(new VmTemplate(0, new Date(), getParameters().getDescription(), getParameters().getMasterVm().getmem_size_mb(), getVmTemplateName(), getParameters().getMasterVm().getnum_of_sockets(), getParameters().getMasterVm().getcpu_per_socket(), getParameters().getMasterVm().getos(), getParameters().getMasterVm().getvds_group_id(), getVmTemplateId(), getParameters().getMasterVm().getdomain(), getParameters().getMasterVm().getnum_of_monitors(), (VmTemplateStatus.Locked.getValue()), (getParameters().getMasterVm().getusb_policy().getValue()), getParameters().getMasterVm().gettime_zone(), getParameters().getMasterVm().getis_auto_suspend(), getParameters().getMasterVm().getnice_level(), getParameters().getMasterVm().getfail_back(), getParameters().getMasterVm().getdefault_boot_sequence(), getParameters().getMasterVm().getvm_type(), getParameters().getMasterVm().isSmartcardEnabled(), getParameters().getMasterVm().isDeleteProtected()));
    getVmTemplate().setauto_startup(getParameters().getMasterVm().getauto_startup());
    getVmTemplate().setpriority(getParameters().getMasterVm().getpriority());
    getVmTemplate().setdefault_display_type(getParameters().getMasterVm().getdefault_display_type());
    getVmTemplate().setinitrd_url(getParameters().getMasterVm().getinitrd_url());
    getVmTemplate().setkernel_url(getParameters().getMasterVm().getkernel_url());
    getVmTemplate().setkernel_params(getParameters().getMasterVm().getkernel_params());
    getVmTemplate().setis_stateless(getParameters().getMasterVm().getis_stateless());
    getVmTemplate().setQuotaId(getParameters().getMasterVm().getQuotaId());
    getVmTemplate().setdedicated_vm_for_vds(getParameters().getMasterVm().getdedicated_vm_for_vds());
    getVmTemplate().setMigrationSupport(getParameters().getMasterVm().getMigrationSupport());
    DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate());
    getCompensationContext().snapshotNewEntity(getVmTemplate());
    setActionReturnValue(getVmTemplate().getId());
}
#end_block

#method_before
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    if (permissionCheckSubject == null) {
        permissionCheckSubject = new ArrayList<PermissionSubject>();
        Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getstorage_pool_id() == null ? null : getVdsGroup().getstorage_pool_id().getValue();
        permissionCheckSubject.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup()));
    }
    return permissionCheckSubject;
}
#method_after
@Override
public List<PermissionSubject> getPermissionCheckSubjects() {
    if (permissionCheckSubject == null) {
        permissionCheckSubject = new ArrayList<PermissionSubject>();
        Guid storagePoolId = getVdsGroup() == null || getVdsGroup().getStoragePoolId() == null ? null : getVdsGroup().getStoragePoolId().getValue();
        permissionCheckSubject.add(new PermissionSubject(storagePoolId, VdcObjectType.StoragePool, getActionType().getActionGroup()));
    }
    return permissionCheckSubject;
}
#end_block

#method_before
public boolean isValidVmNetwork(VmNetworkInterface iface, Map<String, Network> networksByName) {
    String networkName = iface.getNetworkName();
    if (networkName == null) {
        return true;
    }
    return (networksByName.containsKey(networkName) && networksByName.get(networkName).isVmNetwork());
}
#method_after
public boolean isValidVmNetwork(VmNetworkInterface iface, Map<String, Network> networksByName) {
    String networkName = iface.getNetworkName();
    return networkName == null || ((networksByName.containsKey(networkName) && networksByName.get(networkName).isVmNetwork()));
}
#end_block

#method_before
private void UpdateVmNetworks() {
    // check if the cluster has changed
    if (!getVm().getVdsGroupId().equals(getParameters().getVmStaticData().getvds_group_id())) {
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(getParameters().getVmStaticData().getvds_group_id());
        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(getParameters().getVmStaticData().getId());
        for (final VmNetworkInterface iface : interfaces) {
            Network net = LinqUtils.firstOrNull(networks, new Predicate<Network>() {

                @Override
                public boolean eval(Network n) {
                    return n.getname().equals(iface.getNetworkName());
                }
            });
            // interface connection
            if (net == null) {
                iface.setNetworkName(null);
                DbFacade.getInstance().getVmNetworkInterfaceDao().update(iface);
            }
        }
    }
}
#method_after
private void UpdateVmNetworks() {
    // check if the cluster has changed
    if (!getVm().getVdsGroupId().equals(getParameters().getVmStaticData().getvds_group_id())) {
        List<Network> networks = DbFacade.getInstance().getNetworkDao().getAllForCluster(getParameters().getVmStaticData().getvds_group_id());
        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(getParameters().getVmStaticData().getId());
        for (final VmNetworkInterface iface : interfaces) {
            Network net = LinqUtils.firstOrNull(networks, new Predicate<Network>() {

                @Override
                public boolean eval(Network n) {
                    return n.getName().equals(iface.getNetworkName());
                }
            });
            // interface connection
            if (net == null) {
                iface.setNetworkName(null);
                DbFacade.getInstance().getVmNetworkInterfaceDao().update(iface);
            }
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = sourceDomainValidator.isDomainExistAndActive(getReturnValue().getCanDoActionMessages());
    }
    if (retVal && getSourceDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        tempVar.setGetAll(true);
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, DiskImageList> templates = (Map) qretVal.getReturnValue();
            DiskImageList images = new DiskImageList();
            for (VmTemplate t : templates.keySet()) {
                if (t.getId().equals(getVmTemplate().getId())) {
                    images = templates.get(t);
                    getVmTemplate().setInterfaces(t.getInterfaces());
                    break;
                }
            }
            ArrayList<DiskImage> list = new ArrayList<DiskImage>(Arrays.asList(images.getDiskImages()));
            getParameters().setImages(list);
            getVmTemplate().setImages(list);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            Map<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : list) {
                storage_domains storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validator.isDomainExistAndActive(getReturnValue().getCanDoActionMessages()) && validator.domainIsValidDestination(getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                }
                storage_domain_static targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getstorage_type(), image);
                retVal = ImagesHandler.CheckImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setstorage_pool_id(getParameters().getStoragePoolId());
                    image.setstorage_ids(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getname()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getsize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            retVal = StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue());
            if (!retVal) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
                break;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(getVmTemplate().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retVal = true;
    if (getVmTemplate() == null) {
        retVal = false;
    } else {
        setDescription(getVmTemplateName());
    }
    // check that the storage pool is valid
    retVal = retVal && checkStoragePool();
    if (retVal) {
        // set the source domain and check that it is ImportExport type and active
        setSourceDomainId(getParameters().getSourceDomainId());
        StorageDomainValidator sourceDomainValidator = new StorageDomainValidator(getSourceDomain());
        retVal = sourceDomainValidator.isDomainExistAndActive(getReturnValue().getCanDoActionMessages());
    }
    if (retVal && getSourceDomain().getstorage_domain_type() != StorageDomainType.ImportExport) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL);
        retVal = false;
    }
    if (retVal) {
        // Set the template images from the Export domain and change each image id storage is to the import domain
        GetAllFromExportDomainQueryParameters tempVar = new GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId());
        VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetTemplatesFromExportDomain, tempVar);
        retVal = qretVal.getSucceeded();
        if (retVal) {
            Map<VmTemplate, DiskImageList> templates = (Map) qretVal.getReturnValue();
            DiskImageList images = new DiskImageList();
            for (VmTemplate t : templates.keySet()) {
                if (t.getId().equals(getVmTemplate().getId())) {
                    images = templates.get(t);
                    getVmTemplate().setInterfaces(t.getInterfaces());
                    break;
                }
            }
            ArrayList<DiskImage> list = new ArrayList<DiskImage>(Arrays.asList(images.getDiskImages()));
            getParameters().setImages(list);
            getVmTemplate().setImages(list);
            ensureDomainMap(getParameters().getImages(), getParameters().getDestDomainId());
            Map<Guid, DiskImage> imageMap = new HashMap<Guid, DiskImage>();
            for (DiskImage image : list) {
                storage_domains storageDomain = getStorageDomain(imageToDestinationDomainMap.get(image.getId()));
                StorageDomainValidator validator = new StorageDomainValidator(storageDomain);
                retVal = validator.isDomainExistAndActive(getReturnValue().getCanDoActionMessages()) && validator.domainIsValidDestination(getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                }
                StorageDomainStatic targetDomain = storageDomain.getStorageStaticData();
                changeRawToCowIfSparseOnBlockDevice(targetDomain.getstorage_type(), image);
                retVal = ImagesHandler.CheckImageConfiguration(targetDomain, image, getReturnValue().getCanDoActionMessages());
                if (!retVal) {
                    break;
                } else {
                    image.setstorage_pool_id(getParameters().getStoragePoolId());
                    image.setstorage_ids(new ArrayList<Guid>(Arrays.asList(getParameters().getSourceDomainId())));
                    imageMap.put(image.getImageId(), image);
                }
            }
            getVmTemplate().setDiskImageMap(imageMap);
        }
    }
    if (retVal && getParameters().isImportAsNewEntity()) {
        initImportClonedTemplate();
    }
    if (retVal) {
        VmTemplate duplicateTemplate = getVmTemplateDAO().get(getParameters().getVmTemplate().getId());
        // check that the template does not exists in the target domain
        if (duplicateTemplate != null) {
            addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_IMPORT_TEMPLATE_EXISTS);
            getReturnValue().getCanDoActionMessages().add(String.format("$TemplateName %1$s", duplicateTemplate.getname()));
            retVal = false;
        } else if (isVmTemplateWithSameNameExist()) {
            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_IMPORT_TEMPLATE_NAME_EXISTS);
            retVal = false;
        }
    }
    if (retVal && getParameters().getImages() != null && !getParameters().getImages().isEmpty()) {
        Map<storage_domains, Integer> domainMap = getSpaceRequirementsForStorageDomains(new ArrayList<DiskImage>(getVmTemplate().getDiskImageMap().values()));
        if (domainMap.isEmpty()) {
            int sz = 0;
            if (getVmTemplate().getDiskImageMap() != null) {
                for (DiskImage image : getVmTemplate().getDiskImageMap().values()) {
                    sz += image.getsize();
                }
            }
            domainMap.put(getStorageDomain(), sz);
        }
        for (Map.Entry<storage_domains, Integer> entry : domainMap.entrySet()) {
            retVal = StorageDomainSpaceChecker.hasSpaceForRequest(entry.getKey(), entry.getValue());
            if (!retVal) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW);
                break;
            }
        }
    }
    if (retVal) {
        retVal = validateMacAddress(getVmTemplate().getInterfaces());
    }
    if (!retVal) {
        addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT);
        addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_TEMPLATE);
    }
    return retVal;
}
#end_block

#method_before
@Override
protected void ReadHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        int resourceType = Integer.parseInt(node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText);
        switch(resourceType) {
            // CPU
            case 3:
                _vmTemplate.setnum_of_sockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
                _vmTemplate.setcpu_per_socket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
                break;
            // Memory
            case 4:
                _vmTemplate.setmem_size_mb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                break;
            // Image
            case 17:
                final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
                DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                    @Override
                    public boolean eval(DiskImage diskImage) {
                        return diskImage.getImageId().equals(guid);
                    }
                });
                image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                    image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
                }
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                    image.setit_guid(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
                }
                image.setappList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText)) {
                    image.setstorage_ids(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText))));
                }
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                    image.setstorage_pool_id(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
                }
                final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
                if (creationDate != null) {
                    image.setcreation_date(creationDate);
                }
                final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
                if (lastModified != null) {
                    image.setlastModified(lastModified);
                }
                readVmDevice(node, _vmTemplate, image.getId(), Boolean.TRUE);
                break;
            // Network
            case 10:
                VmNetworkInterface iface = getNetwotkInterface(node);
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText)) {
                    iface.setType(Integer.parseInt(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText));
                }
                String resourceSubNetworkName = node.SelectSingleNode("rasd:Connection", _xmlNS).InnerText;
                if (StringUtils.isNotEmpty(resourceSubNetworkName)) {
                    iface.setNetworkName(resourceSubNetworkName);
                } else {
                    iface.setNetworkName(null);
                }
                XmlNode linkedNode = node.SelectSingleNode("rasd:Linked", _xmlNS);
                if (linkedNode != null) {
                    iface.setLinked(Boolean.valueOf(linkedNode.InnerText));
                } else {
                    iface.setLinked(true);
                }
                iface.setName(node.SelectSingleNode("rasd:Name", _xmlNS).InnerText);
                iface.setSpeed((node.SelectSingleNode("rasd:speed", _xmlNS) != null) ? Integer.parseInt(node.SelectSingleNode("rasd:speed", _xmlNS).InnerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
                _vmTemplate.getInterfaces().add(iface);
                readVmDevice(node, _vmTemplate, iface.getId(), Boolean.TRUE);
                break;
            // CDROM
            case 15:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // USB
            case 23:
                _vmTemplate.setusb_policy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
                break;
            // Monitor
            case 20:
                _vmTemplate.setnum_of_monitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // OTHER
            case 0:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.FALSE);
                break;
        }
    }
}
#method_after
@Override
protected void ReadHardwareSection(XmlNode section) {
    XmlNodeList list = section.SelectNodes("Item");
    for (XmlNode node : list) {
        int resourceType = Integer.parseInt(node.SelectSingleNode("rasd:ResourceType", _xmlNS).InnerText);
        switch(resourceType) {
            // CPU
            case 3:
                _vmTemplate.setnum_of_sockets(Integer.parseInt(node.SelectSingleNode("rasd:num_of_sockets", _xmlNS).InnerText));
                _vmTemplate.setcpu_per_socket(Integer.parseInt(node.SelectSingleNode("rasd:cpu_per_socket", _xmlNS).InnerText));
                break;
            // Memory
            case 4:
                _vmTemplate.setmem_size_mb(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                break;
            // Image
            case 17:
                final Guid guid = new Guid(node.SelectSingleNode("rasd:InstanceId", _xmlNS).InnerText);
                DiskImage image = LinqUtils.firstOrNull(_images, new Predicate<DiskImage>() {

                    @Override
                    public boolean eval(DiskImage diskImage) {
                        return diskImage.getImageId().equals(guid);
                    }
                });
                image.setId(OvfParser.GetImageGrupIdFromImageFile(node.SelectSingleNode("rasd:HostResource", _xmlNS).InnerText));
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText)) {
                    image.setParentId(new Guid(node.SelectSingleNode("rasd:Parent", _xmlNS).InnerText));
                }
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText)) {
                    image.setit_guid(new Guid(node.SelectSingleNode("rasd:Template", _xmlNS).InnerText));
                }
                image.setappList(node.SelectSingleNode("rasd:ApplicationList", _xmlNS).InnerText);
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText)) {
                    image.setstorage_ids(new ArrayList<Guid>(Arrays.asList(new Guid(node.SelectSingleNode("rasd:StorageId", _xmlNS).InnerText))));
                }
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText)) {
                    image.setstorage_pool_id(new Guid(node.SelectSingleNode("rasd:StoragePoolId", _xmlNS).InnerText));
                }
                final Date creationDate = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:CreationDate", _xmlNS).InnerText);
                if (creationDate != null) {
                    image.setcreation_date(creationDate);
                }
                final Date lastModified = OvfParser.UtcDateStringToLocaDate(node.SelectSingleNode("rasd:LastModified", _xmlNS).InnerText);
                if (lastModified != null) {
                    image.setlastModified(lastModified);
                }
                readVmDevice(node, _vmTemplate, image.getId(), Boolean.TRUE);
                break;
            // Network
            case 10:
                VmNetworkInterface iface = getNetwotkInterface(node);
                if (!StringHelper.isNullOrEmpty(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText)) {
                    iface.setType(Integer.parseInt(node.SelectSingleNode("rasd:ResourceSubType", _xmlNS).InnerText));
                }
                String resourceSubNetworkName = node.SelectSingleNode(OvfProperties.VMD_CONNECTION, _xmlNS).InnerText;
                iface.setNetworkName(StringUtils.defaultIfEmpty(resourceSubNetworkName, null));
                XmlNode linkedNode = node.SelectSingleNode(OvfProperties.VMD_LINKED, _xmlNS);
                iface.setLinked(linkedNode == null ? true : Boolean.valueOf(linkedNode.InnerText));
                iface.setName(node.SelectSingleNode("rasd:Name", _xmlNS).InnerText);
                iface.setSpeed((node.SelectSingleNode("rasd:speed", _xmlNS) != null) ? Integer.parseInt(node.SelectSingleNode("rasd:speed", _xmlNS).InnerText) : VmInterfaceType.forValue(iface.getType()).getSpeed());
                _vmTemplate.getInterfaces().add(iface);
                readVmDevice(node, _vmTemplate, iface.getId(), Boolean.TRUE);
                break;
            // CDROM
            case 15:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // USB
            case 23:
                _vmTemplate.setusb_policy(UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).InnerText));
                break;
            // Monitor
            case 20:
                _vmTemplate.setnum_of_monitors(Integer.parseInt(node.SelectSingleNode("rasd:VirtualQuantity", _xmlNS).InnerText));
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.TRUE);
                break;
            // OTHER
            case 0:
                readVmDevice(node, _vmTemplate, Guid.NewGuid(), Boolean.FALSE);
                break;
        }
    }
}
#end_block

#method_before
protected boolean isUserAuthorizedToRunAction() {
    // Skip check if this is an internal action:
    if (isInternalExecution()) {
        if (log.isDebugEnabled()) {
            log.debugFormat("Permission check skipped for internal action {0}.", getActionType());
        }
        return true;
    }
    // Skip check if multilevel administration is disabled:
    if (!MultiLevelAdministrationHandler.isMultilevelAdministrationOn()) {
        if (log.isDebugEnabled()) {
            log.debugFormat("Permission check for action {0} skipped because multilevel administration is disabled.", getActionType());
        }
        return true;
    }
    // Deny the permissions if there is no logged in user:
    if (getCurrentUser() == null) {
        addCanDoActionMessage(VdcBllMessages.USER_IS_NOT_LOGGED_IN);
        return false;
    }
    // Get identifiers and types of the objects whose permissions have to be
    // checked:
    final List<PermissionSubject> permSubjects = getPermissionCheckSubjects();
    if (permSubjects == null || permSubjects.isEmpty()) {
        if (log.isDebugEnabled()) {
            log.debugFormat("The set of objects to check is null or empty for action {0}.", getActionType());
        }
        addCanDoActionMessage(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION);
        return false;
    }
    if (isQuotaDependant()) {
        addQuotaPermissionSubject(permSubjects);
    }
    for (PermissionSubject permSubject : permSubjects) {
        final Guid objectId = permSubject.getObjectId();
        final VdcObjectType objectType = permSubject.getObjectType();
        final ActionGroup objectActionGroup = permSubject.getActionGroup();
        // if objectId is null we can't check permission
        if (objectId == null) {
            if (log.isDebugEnabled()) {
                log.debugFormat("The object to check is null for action {0}.", getActionType());
            }
            addCanDoActionMessage(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION);
            return false;
        }
        // Check that an action group is defined for this action;
        if (objectActionGroup == null) {
            if (log.isDebugEnabled()) {
                log.debugFormat("No action group is defined for action {0}.", getActionType());
            }
            return false;
        }
        // Check the authorization:
        if (!checkUserAuthorization(getCurrentUser().getUserId(), objectActionGroup, objectId, objectType)) {
            addCanDoActionMessage(permSubject.getMessage());
            return false;
        }
    }
    // If we are here then we should grant the permission:
    return true;
}
#method_after
protected boolean isUserAuthorizedToRunAction() {
    // Skip check if this is an internal action:
    if (isInternalExecution()) {
        if (log.isDebugEnabled()) {
            log.debugFormat("Permission check skipped for internal action {0}.", getActionType());
        }
        return true;
    }
    // Skip check if multilevel administration is disabled:
    if (!MultiLevelAdministrationHandler.isMultilevelAdministrationOn()) {
        if (log.isDebugEnabled()) {
            log.debugFormat("Permission check for action {0} skipped because multilevel administration is disabled.", getActionType());
        }
        return true;
    }
    // Deny the permissions if there is no logged in user:
    if (getCurrentUser() == null) {
        addCanDoActionMessage(VdcBllMessages.USER_IS_NOT_LOGGED_IN);
        return false;
    }
    // Get identifiers and types of the objects whose permissions have to be
    // checked:
    final List<PermissionSubject> permSubjects = getPermissionCheckSubjects();
    if (permSubjects == null || permSubjects.isEmpty()) {
        if (log.isDebugEnabled()) {
            log.debugFormat("The set of objects to check is null or empty for action {0}.", getActionType());
        }
        addCanDoActionMessage(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION);
        return false;
    }
    if (isQuotaDependant()) {
        addQuotaPermissionSubject(permSubjects);
    }
    // If we are here then we should grant the permission:
    return checkPermissions(permSubjects);
}
#end_block

#method_before
protected SPMAsyncTask concreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    VdcActionParametersBase parametersForTask = getParametersForTask(parentCommand, getParameters());
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new async_tasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), parametersForTask, asyncTaskCreationInfo.getStepId(), getCommandId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType()));
    p.setEntityId(getParameters().getEntityId());
    return AsyncTaskManager.getInstance().CreateTask(internalGetTaskType(), p);
}
#method_after
protected SPMAsyncTask concreteCreateTask(AsyncTaskCreationInfo asyncTaskCreationInfo, VdcActionType parentCommand) {
    VdcActionParametersBase parametersForTask = getParametersForTask(parentCommand, getParameters());
    AsyncTaskParameters p = new AsyncTaskParameters(asyncTaskCreationInfo, new AsyncTasks(parentCommand, AsyncTaskResultEnum.success, AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getTaskID(), parametersForTask, asyncTaskCreationInfo.getStepId(), getCommandId(), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType()));
    p.setEntityId(getParameters().getEntityId());
    return AsyncTaskManager.getInstance().CreateTask(internalGetTaskType(), p);
}
#end_block

#method_before
@Mapping(from = DbUser.class, to = User.class)
public static User map(DbUser entity, User template) {
    User model = template != null ? template : new User();
    model.setName(entity.getname());
    model.setUserName(entity.getusername());
    model.setId(entity.getuser_id().toString());
    model.setLastName(entity.getsurname());
    model.setEmail(entity.getemail());
    model.setDepartment(entity.getdepartment());
    if (entity.getgroups() != null) {
        model.setGroups(new Groups());
        // string.split for an empty string returns an array of size 1
        if (entity.getgroups().trim().length() > 0) {
            for (String name : entity.getgroups().split(",")) {
                Group group = new Group();
                group.setName(name);
                model.getGroups().getGroups().add(group);
            }
        }
    }
    if (!StringHelper.isNullOrEmpty(entity.getdomain())) {
        Domain dom = new Domain();
        dom.setName(entity.getdomain());
        dom.setId(new NGuid(entity.getdomain().getBytes(), true).toString());
        model.setDomain(dom);
    }
    return model;
}
#method_after
@Mapping(from = DbUser.class, to = User.class)
public static User map(DbUser entity, User template) {
    User model = template != null ? template : new User();
    model.setName(entity.getname());
    model.setUserName(entity.getusername());
    model.setId(entity.getuser_id().toString());
    model.setLastName(entity.getsurname());
    model.setEmail(entity.getemail());
    model.setDepartment(entity.getdepartment());
    if (entity.getgroups() != null && entity.getgroups().trim().length() > 0) {
        model.setGroups(new Groups());
        for (String name : entity.getgroups().split(",")) {
            Group group = new Group();
            group.setName(name);
            model.getGroups().getGroups().add(group);
        }
    }
    if (!StringHelper.isNullOrEmpty(entity.getdomain())) {
        Domain dom = new Domain();
        dom.setName(entity.getdomain());
        dom.setId(new NGuid(entity.getdomain().getBytes(), true).toString());
        model.setDomain(dom);
    }
    return model;
}
#end_block

#method_before
protected VDS getVds(Guid id) {
    VDS vds = new VDS();
    vds.setId(id);
    vds.setvds_group_compatibility_version(VDS_COMPATIBILITY_VERSION);
    return vds;
}
#method_after
protected VDS getVds(Guid id) {
    VDS vds = new VDS();
    vds.setId(id);
    return vds;
}
#end_block

#method_before
public boolean getCheckValue(Iterable<T> items, SelectionModel selectionModel) {
    if (!items.iterator().hasNext()) {
        return false;
    }
    boolean allSelected = true;
    for (T entity : items) {
        if (!selectionModel.isSelected(entity)) {
            allSelected = false;
        }
    }
    return allSelected;
}
#method_after
public boolean getCheckValue(Iterable<T> items, SelectionModel selectionModel) {
    if (!items.iterator().hasNext()) {
        return false;
    }
    boolean allSelected = true;
    for (T entity : items) {
        if (!selectionModel.isSelected(entity)) {
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
@SuppressWarnings("unchecked")
protected void executeQueryCommand() {
    Map<String, String> glusterServers = null;
    VDS upServer = getClusterUtils().getUpServer(getParameters().getClusterId());
    if (upServer != null) {
        VDSReturnValue returnValue = getBackendInstance().RunVdsCommand(VDSCommandType.GlusterServersList, new VdsIdVDSCommandParametersBase(upServer.getId()));
        glusterServers = getAddedGlusterServers((List<GlusterServerInfo>) returnValue.getReturnValue());
    } else {
        glusterServers = new HashMap<String, String>();
    }
    getQueryReturnValue().setReturnValue(glusterServers);
}
#method_after
@Override
@SuppressWarnings("unchecked")
protected void executeQueryCommand() {
    Map<String, String> glusterServers = new HashMap<String, String>();
    VDS upServer = getClusterUtils().getUpServer(getParameters().getClusterId());
    if (upServer != null) {
        VDSReturnValue returnValue = getBackendInstance().RunVdsCommand(VDSCommandType.GlusterServersList, new VdsIdVDSCommandParametersBase(upServer.getId()));
        glusterServers = getAddedGlusterServers((List<GlusterServerInfo>) returnValue.getReturnValue());
    }
    getQueryReturnValue().setReturnValue(glusterServers);
}
#end_block

#method_before
private boolean runBootstrapCommand(boolean doFinal) {
    boolean fRes = false;
    String command = _bootstrapCommand.replace("{RunFlag}", doFinal ? "True" : "False");
    if (!doFinal) {
        serverInstallationTime = DateTime.getUtcNow().toString("yyyy-MM-ddTHH:mm:ss");
    } else {
        if (!_rebootAfterInstallation) {
            command = command.replace(" -b ", " ");
        }
    }
    // NOTICE: the time is also used as ticket for registration
    // time will be correct only at !doFinal
    command = command.replace("{utc_time}", serverInstallationTime);
    log.infoFormat("Installation of {0}. Sending SSH Command {1} < {2}. (Stage: {3})", _serverName, command, s_bootstrapPackage.getFileNoUse(), getCurrentInstallStage());
    InputStream in = null;
    try {
        in = new FileInputStream(s_bootstrapPackage.getFile());
        fRes = _wrapper.executeCommand(command, in);
    } catch (Exception e) {
        log.error("Error during executing bootstrap", e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close bootstrap file", e);
            }
        }
    }
    log.infoFormat("Script ended, result is {1}", fRes ? "Success" : "Failed");
    return fRes;
}
#method_after
private boolean runBootstrapCommand(boolean doFinal) {
    boolean fRes = false;
    String command = _bootstrapCommand.replace("{RunFlag}", doFinal ? "True" : "False");
    if (!doFinal) {
        serverInstallationTime = DateTime.getUtcNow().toString("yyyy-MM-ddTHH:mm:ss");
    } else {
        if (!_rebootAfterInstallation) {
            command = command.replace(" -b ", " ");
        }
    }
    // NOTICE: the time is also used as ticket for registration
    // time will be correct only at !doFinal
    command = command.replace("{utc_time}", serverInstallationTime);
    log.infoFormat("Installation of {0}. Sending SSH Command {1} < {2}. (Stage: {3})", _serverName, command, s_bootstrapPackage.getFileNoUse(), getCurrentInstallStage());
    InputStream in = null;
    try {
        in = new FileInputStream(s_bootstrapPackage.getFile());
        fRes = _wrapper.executeCommand(command, in);
    } catch (Exception e) {
        log.error("Error during executing bootstrap", e);
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                log.error("Cannot close bootstrap file", e);
            }
        }
    }
    log.infoFormat("Script ended, result is {0}", fRes ? "Success" : "Failed");
    return fRes;
}
#end_block

#method_before
public static String SignCertificateRequest(String request, String label, String hostname) throws IOException {
    File pkicertdir = new File(Config.resolveCABasePath(), "certs");
    File pkireqdir = new File(Config.resolveCABasePath(), "requests");
    String reqFileName = String.format("%1$sreq.pem", label);
    String certFileName = String.format("%1$scert.pem", label);
    OutputStream os = null;
    try {
        os = new FileOutputStream(new File(pkireqdir, reqFileName));
        os.write(request.getBytes("UTF-8"));
    } finally {
        if (os == null) {
            try {
                os.close();
            } catch (IOException e) {
                log.error("error during close", e);
            }
        }
    }
    if (!new OpenSslCAWrapper().SignCertificateRequest(reqFileName, hostname, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, certFileName)) {
        throw new RuntimeException("Certificate enrollment failed");
    }
    return FileUtil.readAllText(new File(pkicertdir, certFileName).getPath());
}
#method_after
public static String SignCertificateRequest(String request, String label, String hostname) throws IOException {
    File pkicertdir = new File(Config.resolveCABasePath(), "certs");
    File pkireqdir = new File(Config.resolveCABasePath(), "requests");
    String reqFileName = String.format("%1$sreq.pem", label);
    String certFileName = String.format("%1$scert.pem", label);
    OutputStream os = null;
    try {
        os = new FileOutputStream(new File(pkireqdir, reqFileName));
        os.write(request.getBytes("UTF-8"));
    } finally {
        if (os != null) {
            try {
                os.close();
            } catch (IOException e) {
                log.error("error during close", e);
            }
        }
    }
    if (!new OpenSslCAWrapper().SignCertificateRequest(reqFileName, hostname, Config.<Integer>GetValue(ConfigValues.VdsCertificateValidityInYears) * 365, certFileName)) {
        throw new RuntimeException("Certificate enrollment failed");
    }
    return FileUtil.readAllText(new File(pkicertdir, certFileName).getPath());
}
#end_block

#method_before
private void SplitSearchString(String source, RefObject<String> prefix, RefObject<String> search) {
    ArrayList<TagModel> tags = (ArrayList<TagModel>) getTagList().getSelectedItems();
    SystemTreeItemModel model = (SystemTreeItemModel) getSystemTree().getSelectedItem();
    // $NON-NLS-1$
    prefix.argvalue = "";
    // Split for tags.
    if (tags != null && tags.size() > 0) {
        // $NON-NLS-1$
        Regex regex = new Regex("tag\\s*=\\s*(?:[\\w-]+)(?:\\sor\\s)?", RegexOptions.IgnoreCase);
        // $NON-NLS-1$
        String[] array = source.split("[:]", -1);
        String entityClause = array[0];
        String searchClause = array[1];
        // $NON-NLS-1$
        String tagsClause = "";
        for (TagModel tag : tags) {
            // $NON-NLS-1$
            tagsClause += ("tag=" + tag.getName().getEntity());
            if (tag != tags.get(tags.size() - 1)) {
                // $NON-NLS-1$
                tagsClause += " or ";
            }
        }
        // $NON-NLS-1$
        prefix.argvalue = StringFormat.format("%1$s: %2$s ", entityClause, tagsClause);
        // $NON-NLS-1$
        search.argvalue = regex.replace(searchClause, "").trim();
    } else // Split for system tree.
    if (model != null && model.getType() != SystemTreeItemType.System) {
        // $NON-NLS-1$ //$NON-NLS-2$
        getAutoCompleteModel().setFilter(new String[] { "or", "and" });
        switch(model.getType()) {
            case DataCenter:
                {
                    if (dataCenterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("DataCenter: name = %1$s", model.getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: datacenter.name = %1$s", model.getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: datacenter = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: datacenter = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: datacenter = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: datacenter = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: event_datacenter = %1$s", model.getTitle());
                    } else if (diskList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Disk: datacenter.name = %1$s and disk_type = image", model.getTitle());
                    } else if (quotaList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Quota: storagepoolname = %1$s", model.getTitle());
                    } else if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: datacenter = %1$s", model.getTitle());
                    }
                }
                break;
            case Clusters:
                {
                    if (clusterList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Cluster: datacenter.name = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Cluster:
            case Cluster_Gluster:
                {
                    if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: name = %1$s", model.getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: cluster = %1$s", model.getTitle());
                    } else if (volumeList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Volume: cluster = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: cluster.name = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: cluster = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: cluster = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: cluster = %1$s", model.getTitle());
                    } else if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: Cluster_network.cluster_name = %1$s", model.getTitle());
                    }
                }
                break;
            case Hosts:
                {
                    if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: cluster = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Host:
                {
                    if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: name = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: host.name = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: Hosts.name = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: Hosts.name = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: host.name = %1$s", model.getTitle());
                    } else if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: host = %1$s", model.getTitle());
                    }
                }
                break;
            case Volumes:
                {
                    if (volumeList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Volume: cluster = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Volume:
                {
                    if (volumeList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Volume: name = %1$s", model.getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: volume.name = %1$s", model.getTitle());
                    } else if (dataCenterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("DataCenter: volume.name = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: Volumes.name = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: volume.name = %1$s", model.getTitle());
                    }
                }
                break;
            case Storages:
                {
                    if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: datacenter = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Storage:
                {
                    if (dataCenterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("DataCenter: storage.name = %1$s", model.getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: storage.name = %1$s", model.getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: storage.name = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: name = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: storage.name = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Templates: storage.name = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: event_storage = %1$s", model.getTitle());
                    } else if (diskList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Disk: storages.name = %1$s", model.getTitle());
                    }
                }
                break;
            case Templates:
                {
                    if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: datacenter = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case VMs:
                {
                    if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: cluster = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Networks:
                {
                    if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: datacenter = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Network:
                {
                    if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Cluster: Cluster_network.network_name = %1$s Datacenter.name = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Host : Nic.network_name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Vm : Vnic.network_name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Template : Vnic.network_name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    }
                }
                break;
        }
        // $NON-NLS-1$
        prefix.argvalue = prefix.argvalue + " ";
        // $NON-NLS-1$
        search.argvalue = "";
    } else {
        search.argvalue = source;
        getAutoCompleteModel().setFilter(null);
    }
}
#method_after
private void SplitSearchString(String source, RefObject<String> prefix, RefObject<String> search) {
    ArrayList<TagModel> tags = (ArrayList<TagModel>) getTagList().getSelectedItems();
    SystemTreeItemModel model = (SystemTreeItemModel) getSystemTree().getSelectedItem();
    // $NON-NLS-1$
    prefix.argvalue = "";
    // Split for tags.
    if (tags != null && tags.size() > 0) {
        // $NON-NLS-1$
        Regex regex = new Regex("tag\\s*=\\s*(?:[\\w-]+)(?:\\sor\\s)?", RegexOptions.IgnoreCase);
        // $NON-NLS-1$
        String[] array = source.split("[:]", -1);
        String entityClause = array[0];
        String searchClause = array[1];
        // $NON-NLS-1$
        String tagsClause = "";
        for (TagModel tag : tags) {
            // $NON-NLS-1$
            tagsClause += ("tag=" + tag.getName().getEntity());
            if (tag != tags.get(tags.size() - 1)) {
                // $NON-NLS-1$
                tagsClause += " or ";
            }
        }
        // $NON-NLS-1$
        prefix.argvalue = StringFormat.format("%1$s: %2$s ", entityClause, tagsClause);
        // $NON-NLS-1$
        search.argvalue = regex.replace(searchClause, "").trim();
    } else // Split for system tree.
    if (model != null && model.getType() != SystemTreeItemType.System) {
        // $NON-NLS-1$ //$NON-NLS-2$
        getAutoCompleteModel().setFilter(new String[] { "or", "and" });
        switch(model.getType()) {
            case DataCenter:
                {
                    if (dataCenterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("DataCenter: name = %1$s", model.getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: datacenter.name = %1$s", model.getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: datacenter = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: datacenter = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: datacenter = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: datacenter = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: event_datacenter = %1$s", model.getTitle());
                    } else if (diskList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Disk: datacenter.name = %1$s and disk_type = image", model.getTitle());
                    } else if (quotaList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Quota: storagepoolname = %1$s", model.getTitle());
                    } else if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: datacenter = %1$s", model.getTitle());
                    }
                }
                break;
            case Clusters:
                {
                    if (clusterList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Cluster: datacenter.name = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Cluster:
            case Cluster_Gluster:
                {
                    if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: name = %1$s", model.getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: cluster = %1$s", model.getTitle());
                    } else if (volumeList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Volume: cluster = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: cluster.name = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: cluster = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: cluster = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: cluster = %1$s", model.getTitle());
                    } else if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: Cluster_network.cluster_name = %1$s", model.getTitle());
                    }
                }
                break;
            case Hosts:
                {
                    if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: cluster = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Host:
                {
                    if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: name = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: host.name = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: Hosts.name = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: Hosts.name = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: host.name = %1$s", model.getTitle());
                    } else if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: Host_network.host_name = %1$s", model.getTitle());
                    }
                }
                break;
            case Volumes:
                {
                    if (volumeList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Volume: cluster = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Volume:
                {
                    if (volumeList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Volume: name = %1$s", model.getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: volume.name = %1$s", model.getTitle());
                    } else if (dataCenterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("DataCenter: volume.name = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: Volumes.name = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: volume.name = %1$s", model.getTitle());
                    }
                }
                break;
            case Storages:
                {
                    if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: datacenter = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Storage:
                {
                    if (dataCenterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("DataCenter: storage.name = %1$s", model.getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Cluster: storage.name = %1$s", model.getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Host: storage.name = %1$s", model.getTitle());
                    } else if (storageList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Storage: name = %1$s", model.getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: storage.name = %1$s", model.getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Templates: storage.name = %1$s", model.getTitle());
                    } else if (eventList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Events: event_storage = %1$s", model.getTitle());
                    } else if (diskList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Disk: storages.name = %1$s", model.getTitle());
                    }
                }
                break;
            case Templates:
                {
                    if (templateList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Template: datacenter = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case VMs:
                {
                    if (vmList.IsSearchStringMatch(source)) {
                        // $NON-NLS-1$
                        prefix.argvalue = StringFormat.format("Vms: cluster = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Networks:
                {
                    if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: datacenter = %1$s", model.getParent().getTitle());
                    }
                }
                break;
            case Network:
                {
                    if (networkList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Network: name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (clusterList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Cluster: Cluster_network.network_name = %1$s Datacenter.name = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (hostList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Host : Nic.network_name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (vmList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Vm : Vnic.network_name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    } else if (templateList.IsSearchStringMatch(source)) {
                        prefix.argvalue = // $NON-NLS-1$
                        StringFormat.format("Template : Vnic.network_name = %1$s datacenter = %2$s", model.getTitle(), model.getParent().getTitle());
                    }
                }
                break;
        }
        // $NON-NLS-1$
        prefix.argvalue = prefix.argvalue + " ";
        // $NON-NLS-1$
        search.argvalue = "";
    } else {
        search.argvalue = source;
        getAutoCompleteModel().setFilter(null);
    }
}
#end_block

#method_before
private void updateActionAvailability() {
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || getSelectedItems() == null || getSelectedItems().size() == 0 || getSelectedItems().size() == volumeEntity.getBricks().size()) {
        getRemoveBricksCommand().setIsExecutionAllowed(false);
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && volumeEntity.getBricks().size() == VolumeListModel.REPLICATE_COUNT_DEFAULT) {
        getRemoveBricksCommand().setIsExecutionAllowed(false);
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && getSelectedItems() == null && getSelectedItems().size() > 1) {
        getRemoveBricksCommand().setIsExecutionAllowed(false);
    } else {
        getRemoveBricksCommand().setIsExecutionAllowed(true);
    }
    getReplaceBrickCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1);
    getBrickAdvancedDetailsCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1);
}
#method_after
private void updateActionAvailability() {
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || getSelectedItems() == null || getSelectedItems().size() == 0 || getSelectedItems().size() == volumeEntity.getBricks().size()) {
        getRemoveBricksCommand().setIsExecutionAllowed(false);
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && volumeEntity.getBricks().size() == VolumeListModel.REPLICATE_COUNT_DEFAULT) {
        getRemoveBricksCommand().setIsExecutionAllowed(false);
    } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && getSelectedItems() == null && getSelectedItems().size() > 1) {
        getRemoveBricksCommand().setIsExecutionAllowed(false);
    } else {
        getRemoveBricksCommand().setIsExecutionAllowed(true);
    }
    getReplaceBrickCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1);
    getBrickAdvancedDetailsCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1 && ((GlusterVolumeEntity) getEntity()).isOnline());
}
#end_block

#method_before
private void showBrickAdvancedDetails() {
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    final GlusterBrickEntity brickEntity = (GlusterBrickEntity) getSelectedItem();
    final BrickAdvancedDetailsModel brickModel = new BrickAdvancedDetailsModel();
    setWindow(brickModel);
    brickModel.setTitle(ConstantsManager.getInstance().getConstants().advancedDetailsBrickTitle());
    // $NON-NLS-1$
    brickModel.setHashName("brick_advanced");
    brickModel.StartProgress(null);
    AsyncQuery aQuery = new AsyncQuery();
    aQuery.setModel(this);
    aQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            brickModel.StopProgress();
            GlusterVolumeAdvancedDetails advDetails = (GlusterVolumeAdvancedDetails) result;
            brickModel.getBrick().setEntity(brickEntity.getQualifiedName());
            if (advDetails != null && advDetails.getBrickDetails() != null && advDetails.getBrickDetails().size() == 1) {
                BrickDetails brickDetails = advDetails.getBrickDetails().get(0);
                brickModel.getBrickProperties().setProperties(brickDetails.getBrickProperties());
                ArrayList<EntityModel> clients = new ArrayList<EntityModel>();
                for (GlusterClientInfo client : brickDetails.getClients()) {
                    clients.add(new EntityModel(client));
                }
                brickModel.getClients().setItems(clients);
                brickModel.getMemoryStatistics().updateMemoryStatistics(brickDetails.getMemoryStatus().getMallInfo());
                ArrayList<EntityModel> memoryPools = new ArrayList<EntityModel>();
                for (Mempool mempool : brickDetails.getMemoryStatus().getMemPools()) {
                    memoryPools.add(new EntityModel(mempool));
                }
                brickModel.getMemoryPools().setItems(memoryPools);
            }
        }
    };
    AsyncDataProvider.GetGlusterVolumeBrickDetails(aQuery, volumeEntity.getClusterId(), volumeEntity.getName(), brickEntity.getQualifiedName());
    // $NON-NLS-1$
    UICommand command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().close());
    command.setIsDefault(true);
    brickModel.getCommands().add(command);
}
#method_after
private void showBrickAdvancedDetails() {
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    final GlusterBrickEntity brickEntity = (GlusterBrickEntity) getSelectedItem();
    final BrickAdvancedDetailsModel brickModel = new BrickAdvancedDetailsModel();
    setWindow(brickModel);
    brickModel.setTitle(ConstantsManager.getInstance().getConstants().advancedDetailsBrickTitle());
    // $NON-NLS-1$
    brickModel.setHashName("brick_advanced");
    brickModel.StartProgress(null);
    AsyncDataProvider.GetGlusterVolumeBrickDetails(new AsyncQuery(this, new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            brickModel.StopProgress();
            GlusterVolumeAdvancedDetails advDetails = (GlusterVolumeAdvancedDetails) result;
            brickModel.getBrick().setEntity(brickEntity.getQualifiedName());
            if (advDetails != null && advDetails.getBrickDetails() != null && advDetails.getBrickDetails().size() == 1) {
                BrickDetails brickDetails = advDetails.getBrickDetails().get(0);
                brickModel.getBrickProperties().setProperties(brickDetails.getBrickProperties());
                ArrayList<EntityModel> clients = new ArrayList<EntityModel>();
                for (GlusterClientInfo client : brickDetails.getClients()) {
                    clients.add(new EntityModel(client));
                }
                brickModel.getClients().setItems(clients);
                brickModel.getMemoryStatistics().updateMemoryStatistics(brickDetails.getMemoryStatus().getMallInfo());
                ArrayList<EntityModel> memoryPools = new ArrayList<EntityModel>();
                for (Mempool mempool : brickDetails.getMemoryStatus().getMemPools()) {
                    memoryPools.add(new EntityModel(mempool));
                }
                brickModel.getMemoryPools().setItems(memoryPools);
            }
        }
    }), volumeEntity.getClusterId(), volumeEntity.getName(), brickEntity.getQualifiedName());
    // $NON-NLS-1$
    UICommand command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().close());
    command.setIsDefault(true);
    brickModel.getCommands().add(command);
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabNetworkPresenter.class, MainTabNetworkPresenter.ViewDef.class, MainTabNetworkView.class, MainTabNetworkPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(SetupNetworksInterfacePopupPresenterWidget.class, SetupNetworksInterfacePopupPresenterWidget.ViewDef.class, SetupNetworksInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(SetupNetworksManagementPopupPresenterWidget.class, SetupNetworksManagementPopupPresenterWidget.ViewDef.class, SetupNetworksManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(HostManagementConfirmationPopupPresenterWidget.class, HostManagementConfirmationPopupPresenterWidget.ViewDef.class, HostManagementConfirmationPopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
}
#end_block

#method_before
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setvmt_guid(entity.getId());
    staticVm.setdomain(entity.getdomain());
    staticVm.setvds_group_id(entity.getvds_group_id());
    staticVm.setmem_size_mb(entity.getmem_size_mb());
    staticVm.setos(entity.getos());
    staticVm.setnice_level(entity.getnice_level());
    staticVm.setfail_back(entity.getfail_back());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setis_stateless(entity.getis_stateless());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setdefault_boot_sequence(entity.getdefault_boot_sequence());
    staticVm.setvm_type(entity.getvm_type());
    entity.setdefault_display_type(entity.getdefault_display_type());
    staticVm.setiso_path(entity.getiso_path());
    staticVm.setnum_of_sockets(entity.getnum_of_sockets());
    staticVm.setcpu_per_socket(entity.getcpu_per_socket());
    staticVm.setkernel_url(entity.getkernel_url());
    staticVm.setkernel_params(entity.getkernel_params());
    staticVm.setinitrd_url(entity.getinitrd_url());
    staticVm.sethypervisor_type(entity.gethypervisor_type());
    staticVm.settime_zone(entity.gettime_zone());
    staticVm.setnum_of_monitors(entity.getnum_of_monitors());
    staticVm.setAllowConsoleReconnect(entity.getAllowConsoleReconnect());
    staticVm.setpriority(entity.getpriority());
    staticVm.setusb_policy(entity.getusb_policy());
    return staticVm;
}
#method_after
@Mapping(from = VmTemplate.class, to = VmStatic.class)
public static VmStatic map(VmTemplate entity, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    staticVm.setId(NGuid.Empty);
    staticVm.setvmt_guid(entity.getId());
    staticVm.setdomain(entity.getdomain());
    staticVm.setvds_group_id(entity.getvds_group_id());
    staticVm.setmem_size_mb(entity.getmem_size_mb());
    staticVm.setos(entity.getos());
    staticVm.setnice_level(entity.getnice_level());
    staticVm.setfail_back(entity.getfail_back());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setis_stateless(entity.getis_stateless());
    staticVm.setSmartcardEnabled(entity.isSmartcardEnabled());
    staticVm.setauto_startup(entity.getauto_startup());
    staticVm.setdefault_boot_sequence(entity.getdefault_boot_sequence());
    staticVm.setvm_type(entity.getvm_type());
    entity.setdefault_display_type(entity.getdefault_display_type());
    staticVm.setiso_path(entity.getiso_path());
    staticVm.setnum_of_sockets(entity.getnum_of_sockets());
    staticVm.setcpu_per_socket(entity.getcpu_per_socket());
    staticVm.setkernel_url(entity.getkernel_url());
    staticVm.setkernel_params(entity.getkernel_params());
    staticVm.setinitrd_url(entity.getinitrd_url());
    staticVm.sethypervisor_type(entity.gethypervisor_type());
    staticVm.settime_zone(entity.gettime_zone());
    staticVm.setnum_of_monitors(entity.getnum_of_monitors());
    staticVm.setAllowConsoleReconnect(entity.getAllowConsoleReconnect());
    staticVm.setpriority(entity.getpriority());
    staticVm.setusb_policy(entity.getusb_policy());
    return staticVm;
}
#end_block

#method_before
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setvm_name(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setdescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setmem_size_mb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getmem_size_mb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setmem_size_mb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setvmt_guid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setvds_group_id(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setcpu_per_socket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setnum_of_sockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setos(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setdefault_boot_sequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setvm_type(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setis_stateless(vm.isStateless());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setauto_startup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setpriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setorigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setdefault_display_type(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setnum_of_monitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setdedicated_vm_for_vds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setdomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.settime_zone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetUsb() && vm.getUsb().isSetEnabled()) {
        staticVm.setusb_policy(vm.getUsb().isEnabled() ? UsbPolicy.ENABLED_LEGACY : UsbPolicy.DISABLED);
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    return staticVm;
}
#method_after
@Mapping(from = VM.class, to = VmStatic.class)
public static VmStatic map(VM vm, VmStatic template) {
    VmStatic staticVm = template != null ? template : new VmStatic();
    if (vm.isSetName()) {
        staticVm.setvm_name(vm.getName());
    }
    if (vm.isSetId()) {
        staticVm.setId(new Guid(vm.getId()));
    }
    if (vm.isSetDescription()) {
        staticVm.setdescription(vm.getDescription());
    }
    if (vm.isSetMemory()) {
        staticVm.setmem_size_mb((int) (vm.getMemory() / BYTES_PER_MB));
    } else if (staticVm.getmem_size_mb() == 0) {
        // TODO: Get rid of this logic code when Backend supports default memory.
        staticVm.setmem_size_mb(DEFAULT_MEMORY_SIZE);
    }
    if (vm.isSetTemplate() && vm.getTemplate().getId() != null) {
        staticVm.setvmt_guid(new Guid(vm.getTemplate().getId()));
    }
    if (vm.isSetCluster() && vm.getCluster().getId() != null) {
        staticVm.setvds_group_id(new Guid(vm.getCluster().getId()));
    }
    if (vm.isSetCpu()) {
        if (vm.getCpu().isSetTopology()) {
            if (vm.getCpu().getTopology().getCores() != null) {
                staticVm.setcpu_per_socket(vm.getCpu().getTopology().getCores());
            }
            if (vm.getCpu().getTopology().getSockets() != null) {
                staticVm.setnum_of_sockets(vm.getCpu().getTopology().getSockets());
            }
        }
        if (vm.getCpu().isSetCpuTune()) {
            staticVm.setCpuPinning(cpuTuneToString(vm.getCpu().getCpuTune()));
        }
    }
    if (vm.isSetOs()) {
        if (vm.getOs().isSetType()) {
            OsType osType = OsType.fromValue(vm.getOs().getType());
            if (osType != null) {
                staticVm.setos(map(osType, null));
            }
        }
        if (vm.getOs().isSetBoot() && vm.getOs().getBoot().size() > 0) {
            staticVm.setdefault_boot_sequence(map(vm.getOs().getBoot(), null));
        }
        if (vm.getOs().isSetKernel()) {
            staticVm.setkernel_url(vm.getOs().getKernel());
        }
        if (vm.getOs().isSetInitrd()) {
            staticVm.setinitrd_url(vm.getOs().getInitrd());
        }
        if (vm.getOs().isSetCmdline()) {
            staticVm.setkernel_params(vm.getOs().getCmdline());
        }
    }
    if (vm.isSetType()) {
        VmType vmType = VmType.fromValue(vm.getType());
        if (vmType != null) {
            staticVm.setvm_type(map(vmType, null));
        }
    }
    if (vm.isSetStateless()) {
        staticVm.setis_stateless(vm.isStateless());
    }
    if (vm.isSetHighAvailability()) {
        HighAvailability ha = vm.getHighAvailability();
        if (ha.isSetEnabled()) {
            staticVm.setauto_startup(ha.isEnabled());
        }
        if (ha.isSetPriority()) {
            staticVm.setpriority(ha.getPriority());
        }
    }
    if (vm.isSetOrigin()) {
        staticVm.setorigin(map(vm.getOrigin(), (OriginType) null));
    }
    if (vm.isSetDisplay()) {
        if (vm.getDisplay().isSetType()) {
            DisplayType displayType = DisplayType.fromValue(vm.getDisplay().getType());
            if (displayType != null) {
                staticVm.setdefault_display_type(map(displayType, null));
            }
        }
        if (vm.getDisplay().isSetMonitors()) {
            staticVm.setnum_of_monitors(vm.getDisplay().getMonitors());
        }
        if (vm.getDisplay().isSetAllowOverride()) {
            staticVm.setAllowConsoleReconnect(vm.getDisplay().isAllowOverride());
        }
        if (vm.getDisplay().isSetSmartcardEnabled()) {
            staticVm.setSmartcardEnabled(vm.getDisplay().isSmartcardEnabled());
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetAffinity()) {
        VmAffinity vmAffinity = VmAffinity.fromValue(vm.getPlacementPolicy().getAffinity());
        if (vmAffinity != null) {
            staticVm.setMigrationSupport(map(vmAffinity, null));
        }
    }
    if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost()) {
        staticVm.setdedicated_vm_for_vds(createGuidFromString(vm.getPlacementPolicy().getHost().getId()));
    }
    if (vm.isSetDomain() && vm.getDomain().isSetName()) {
        staticVm.setdomain(vm.getDomain().getName());
    }
    if (vm.isSetMemoryPolicy() && vm.getMemoryPolicy().isSetGuaranteed()) {
        Long memGuaranteed = vm.getMemoryPolicy().getGuaranteed() / BYTES_PER_MB;
        staticVm.setMinAllocatedMem(memGuaranteed.intValue());
    }
    if (vm.isSetTimezone()) {
        staticVm.settime_zone(TimeZoneMapping.getWindows(vm.getTimezone()));
    }
    if (vm.isSetCustomProperties() && vm.getCustomProperties().isSetCustomProperty()) {
        staticVm.setCustomProperties(CustomPropertiesParser.parse(vm.getCustomProperties().getCustomProperty()));
    }
    if (vm.isSetUsb() && vm.getUsb().isSetEnabled()) {
        staticVm.setusb_policy(vm.getUsb().isEnabled() ? UsbPolicy.ENABLED_LEGACY : UsbPolicy.DISABLED);
    }
    if (vm.isSetQuota() && vm.getQuota().isSetId()) {
        staticVm.setQuotaId(new Guid(vm.getQuota().getId()));
    }
    return staticVm;
}
#end_block

#method_before
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getvm_name());
    model.setDescription(entity.getvm_description());
    model.setMemory((long) entity.getmem_size_mb() * BYTES_PER_MB);
    if (entity.getvmt_guid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getvmt_guid().toString());
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
        if (entity.getstatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getvm_os() != null || entity.getboot_sequence() != null || entity.getkernel_url() != null || entity.getinitrd_url() != null || entity.getkernel_params() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getvm_os() != null) {
            OsType osType = VmMapper.map(entity.getos(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getboot_sequence() != null) {
            for (Boot boot : map(entity.getdefault_boot_sequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getkernel_url());
        os.setInitrd(entity.getinitrd_url());
        os.setCmdline(entity.getkernel_params());
        model.setOs(os);
    }
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getnum_of_sockets());
    topology.setCores(entity.getnum_of_cpus() / entity.getnum_of_sockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getrun_on_vds() != null) {
        model.setHost(new Host());
        model.getHost().setId(entity.getrun_on_vds().toString());
    }
    if (entity.getdefault_display_type() != null) {
        model.setDisplay(new Display());
        if (isValidSessionState(entity) && entity.getDynamicData() != null) {
            model.getDisplay().setType(map(entity.getDynamicData().getdisplay_type(), null));
        } else {
            model.getDisplay().setType(map(entity.getdefault_display_type(), null));
        }
        model.getDisplay().setAddress(entity.getdisplay_ip());
        Integer displayPort = entity.getdisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getdisplay_secure_port();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getnum_of_monitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
    }
    model.setType(map(entity.getvm_type(), null));
    model.setStateless(entity.getis_stateless());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.getauto_startup());
    model.getHighAvailability().setPriority(entity.getpriority());
    if (entity.getorigin() != null) {
        model.setOrigin(map(entity.getorigin(), null));
    }
    if (entity.getvm_creation_date() != null) {
        model.setCreationTime(DateMapper.map(entity.getvm_creation_date(), null));
    }
    if (entity.getDynamicData() != null && entity.getDynamicData().getLastStartTime() != null) {
        model.setStartTime(DateMapper.map(entity.getDynamicData().getLastStartTime(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getdedicated_vm_for_vds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getdedicated_vm_for_vds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getvm_domain() != null && !entity.getvm_domain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getvm_domain());
        model.setDomain(domain);
    }
    if (entity.getvm_ip() != null && !entity.getvm_ip().isEmpty()) {
        model.setGuestInfo(new GuestInfo());
        model.getGuestInfo().setIps(new IPs());
        for (String item : entity.getvm_ip().split(" ")) {
            if (!item.equals("")) {
                IP ip = new IP();
                ip.setAddress(item.trim());
                model.getGuestInfo().getIps().getIPs().add(ip);
            }
        }
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.gettime_zone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getusb_policy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getusb_policy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getusb_policy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    return model;
}
#method_after
@Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VM.class)
public static VM map(org.ovirt.engine.core.common.businessentities.VM entity, VM template) {
    VM model = template != null ? template : new VM();
    model.setId(entity.getId().toString());
    model.setName(entity.getvm_name());
    model.setDescription(entity.getvm_description());
    model.setMemory((long) entity.getmem_size_mb() * BYTES_PER_MB);
    if (entity.getvmt_guid() != null) {
        model.setTemplate(new Template());
        model.getTemplate().setId(entity.getvmt_guid().toString());
    }
    if (entity.getstatus() != null) {
        model.setStatus(StatusUtils.create(map(entity.getstatus(), null)));
        if (entity.getstatus() == VMStatus.Paused) {
            model.getStatus().setDetail(entity.getVmPauseStatus().name().toLowerCase());
        }
    }
    if (entity.getvm_os() != null || entity.getboot_sequence() != null || entity.getkernel_url() != null || entity.getinitrd_url() != null || entity.getkernel_params() != null) {
        OperatingSystem os = new OperatingSystem();
        if (entity.getvm_os() != null) {
            OsType osType = VmMapper.map(entity.getos(), null);
            if (osType != null) {
                os.setType(osType.value());
            }
        }
        if (entity.getboot_sequence() != null) {
            for (Boot boot : map(entity.getdefault_boot_sequence(), null)) {
                os.getBoot().add(boot);
            }
        }
        os.setKernel(entity.getkernel_url());
        os.setInitrd(entity.getinitrd_url());
        os.setCmdline(entity.getkernel_params());
        model.setOs(os);
    }
    if (entity.getvds_group_id() != null) {
        Cluster cluster = new Cluster();
        cluster.setId(entity.getvds_group_id().toString());
        model.setCluster(cluster);
    }
    CpuTopology topology = new CpuTopology();
    topology.setSockets(entity.getnum_of_sockets());
    topology.setCores(entity.getnum_of_cpus() / entity.getnum_of_sockets());
    final CPU cpu = new CPU();
    model.setCpu(cpu);
    cpu.setCpuTune(stringToCpuTune(entity.getCpuPinning()));
    cpu.setTopology(topology);
    if (entity.getVmPoolId() != null) {
        VmPool pool = new VmPool();
        pool.setId(entity.getVmPoolId().toString());
        model.setVmPool(pool);
    }
    if (entity.getrun_on_vds() != null) {
        model.setHost(new Host());
        model.getHost().setId(entity.getrun_on_vds().toString());
    }
    if (entity.getdefault_display_type() != null) {
        model.setDisplay(new Display());
        if (getIsVmRunning(entity) && entity.getDynamicData() != null) {
            model.getDisplay().setType(map(entity.getDynamicData().getdisplay_type(), null));
        } else {
            model.getDisplay().setType(map(entity.getdefault_display_type(), null));
        }
        model.getDisplay().setAddress(entity.getdisplay_ip());
        Integer displayPort = entity.getdisplay();
        model.getDisplay().setPort(displayPort == null || displayPort == -1 ? null : displayPort);
        Integer displaySecurePort = entity.getdisplay_secure_port();
        model.getDisplay().setSecurePort(displaySecurePort == null || displaySecurePort == -1 ? null : displaySecurePort);
        model.getDisplay().setMonitors(entity.getnum_of_monitors());
        model.getDisplay().setAllowOverride(entity.getAllowConsoleReconnect());
        model.getDisplay().setSmartcardEnabled(entity.isSmartcardEnabled());
    }
    model.setType(map(entity.getvm_type(), null));
    model.setStateless(entity.getis_stateless());
    model.setHighAvailability(new HighAvailability());
    model.getHighAvailability().setEnabled(entity.getauto_startup());
    model.getHighAvailability().setPriority(entity.getpriority());
    if (entity.getorigin() != null) {
        model.setOrigin(map(entity.getorigin(), null));
    }
    if (entity.getvm_creation_date() != null) {
        model.setCreationTime(DateMapper.map(entity.getvm_creation_date(), null));
    }
    if (entity.getDynamicData() != null && entity.getDynamicData().getLastStartTime() != null) {
        model.setStartTime(DateMapper.map(entity.getDynamicData().getLastStartTime(), null));
    }
    model.setPlacementPolicy(new VmPlacementPolicy());
    if (entity.getdedicated_vm_for_vds() != null) {
        model.getPlacementPolicy().setHost(new Host());
        model.getPlacementPolicy().getHost().setId(entity.getdedicated_vm_for_vds().toString());
    }
    VmAffinity vmAffinity = map(entity.getMigrationSupport(), null);
    if (vmAffinity != null) {
        model.getPlacementPolicy().setAffinity(vmAffinity.value());
    }
    if (entity.getvm_domain() != null && !entity.getvm_domain().isEmpty()) {
        Domain domain = new Domain();
        domain.setName(entity.getvm_domain());
        model.setDomain(domain);
    }
    if (entity.getvm_ip() != null && !entity.getvm_ip().isEmpty()) {
        model.setGuestInfo(new GuestInfo());
        model.getGuestInfo().setIps(new IPs());
        for (String item : entity.getvm_ip().split(" ")) {
            if (!item.equals("")) {
                IP ip = new IP();
                ip.setAddress(item.trim());
                model.getGuestInfo().getIps().getIPs().add(ip);
            }
        }
    }
    MemoryPolicy policy = new MemoryPolicy();
    policy.setGuaranteed(new Long(entity.getMinAllocatedMem()) * BYTES_PER_MB);
    model.setMemoryPolicy(policy);
    model.setTimezone(TimeZoneMapping.getJava(entity.gettime_zone()));
    if (!StringHelper.isNullOrEmpty(entity.getCustomProperties())) {
        CustomProperties hooks = new CustomProperties();
        hooks.getCustomProperty().addAll(CustomPropertiesParser.parse(entity.getCustomProperties(), false));
        model.setCustomProperties(hooks);
    }
    if (entity.getusb_policy() != null) {
        Usb usb = new Usb();
        usb.setEnabled(UsbMapperUtils.getIsUsbEnabled(entity.getusb_policy()));
        UsbType usbType = UsbMapperUtils.getUsbType(entity.getusb_policy());
        if (usbType != null) {
            usb.setType(usbType.value());
        }
        model.setUsb(usb);
    }
    if (entity.getQuotaId() != null) {
        Quota quota = new Quota();
        quota.setId(entity.getQuotaId().toString());
        model.setQuota(quota);
    }
    return model;
}
#end_block

#method_before
@Override
public Response add(VM vm) {
    validateParameters(vm, "name", "cluster.id|name");
    validateEnums(VM.class, vm);
    Response response = null;
    if (isCreateFromSnapshot(vm)) {
        response = createVmFromSnapshot(vm);
    } else {
        validateParameters(vm, "template.id|name");
        Guid templateId = getTemplateId(vm);
        VmStatic staticVm = getMapper(VM.class, VmStatic.class).map(vm, getMapper(VmTemplate.class, VmStatic.class).map(lookupTemplate(templateId), null));
        if (namedCluster(vm)) {
            staticVm.setvds_group_id(getClusterId(vm));
        }
        UsbPolicy usbPolicy = UsbResourceUtils.getUsbPolicy(vm.getUsb(), lookupCluster(staticVm.getvds_group_id()));
        if (usbPolicy != null) {
            staticVm.setusb_policy(usbPolicy);
        }
        if (!isFiltered()) {
            // resolve the host's ID, because it will be needed down the line
            if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost() && vm.getPlacementPolicy().getHost().isSetName() && !vm.getPlacementPolicy().getHost().isSetId()) {
                staticVm.setdedicated_vm_for_vds(createGuidFromString(getHostId(vm.getPlacementPolicy().getHost().getName())));
            }
        } else {
            vm.setPlacementPolicy(null);
        }
        Guid storageDomainId = (vm.isSetStorageDomain() && vm.getStorageDomain().isSetId()) ? asGuid(vm.getStorageDomain().getId()) : Guid.Empty;
        if (vm.isSetDisks() && vm.getDisks().isSetClone() && vm.getDisks().isClone()) {
            response = cloneVmFromTemplate(staticVm, vm, templateId);
        } else if (Guid.Empty.equals(templateId)) {
            response = addVmFromScratch(staticVm, vm, storageDomainId);
        } else {
            response = addVm(staticVm, vm, storageDomainId, templateId);
        }
    }
    return removeRestrictedInfoFromResponse(response);
}
#method_after
@Override
public Response add(VM vm) {
    validateParameters(vm, "name", "cluster.id|name");
    validateEnums(VM.class, vm);
    Response response = null;
    if (isCreateFromSnapshot(vm)) {
        response = createVmFromSnapshot(vm);
    } else {
        validateParameters(vm, "template.id|name");
        Guid templateId = getTemplateId(vm);
        VmStatic staticVm = getMapper(VM.class, VmStatic.class).map(vm, getMapper(VmTemplate.class, VmStatic.class).map(lookupTemplate(templateId), null));
        if (namedCluster(vm)) {
            staticVm.setvds_group_id(getClusterId(vm));
        }
        UsbPolicy usbPolicy = UsbResourceUtils.getUsbPolicy(vm.getUsb(), lookupCluster(staticVm.getvds_group_id()));
        if (usbPolicy != null) {
            staticVm.setusb_policy(usbPolicy);
        }
        if (!isFiltered()) {
            // resolve the host's ID, because it will be needed down the line
            if (vm.isSetPlacementPolicy() && vm.getPlacementPolicy().isSetHost() && vm.getPlacementPolicy().getHost().isSetName() && !vm.getPlacementPolicy().getHost().isSetId()) {
                staticVm.setdedicated_vm_for_vds(asGuid(getHostId(vm.getPlacementPolicy().getHost().getName())));
            }
        } else {
            vm.setPlacementPolicy(null);
        }
        Guid storageDomainId = (vm.isSetStorageDomain() && vm.getStorageDomain().isSetId()) ? asGuid(vm.getStorageDomain().getId()) : Guid.Empty;
        if (vm.isSetDisks() && vm.getDisks().isSetClone() && vm.getDisks().isClone()) {
            response = cloneVmFromTemplate(staticVm, vm, templateId);
        } else if (Guid.Empty.equals(templateId)) {
            response = addVmFromScratch(staticVm, vm, storageDomainId);
        } else {
            response = addVm(staticVm, vm, storageDomainId, templateId);
        }
    }
    return removeRestrictedInfoFromResponse(response);
}
#end_block

#method_before
protected VM getVmWithoutConfiguration() {
    VM vm = getVmDao().get(snapshot.getVmId());
    List<VmNetworkInterface> interfaces = getVmNetworkInterfaceDao().getAllForVm(vm.getId());
    vm.setInterfaces(interfaces);
    List<DiskImage> disks = getDiskImageDao().getAllSnapshotsForVmSnapshot(snapshot.getId());
    vm.setImages(new ArrayList<DiskImage>(disks));
    // OvfReader sets disks as active during import which is required by VmHandler.updateDisksForVm to prepare the VM disks.
    for (DiskImage currDisk : disks) {
        currDisk.setactive(true);
    }
    return vm;
}
#method_after
protected VM getVmWithoutConfiguration() {
    VM vm = getVmDao().get(snapshot.getVmId());
    List<VmNetworkInterface> interfaces = getVmNetworkInterfaceDao().getAllForVm(vm.getId());
    vm.setInterfaces(interfaces);
    List<DiskImage> disks = getDiskImageDao().getAllSnapshotsForVmSnapshot(snapshot.getId());
    vm.setImages(new ArrayList<DiskImage>(disks));
    // VM disks.
    for (DiskImage currDisk : disks) {
        currDisk.setactive(true);
    }
    return vm;
}
#end_block

#method_before
private void prepareMocks(StopGlusterVolumeProfileCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getGlusterVolume(stoppedVolumeId)).when(volumeDao).getById(stoppedVolumeId);
    doReturn(getGlusterVolume(startedVolumeId)).when(volumeDao).getById(startedVolumeId);
    doReturn(null).when(volumeDao).getById(null);
}
#method_after
private void prepareMocks(StopGlusterVolumeProfileCommand command) {
    doReturn(volumeDao).when(command).getGlusterVolumeDao();
    doReturn(getVds(VDSStatus.Up)).when(command).getUpServer();
    doReturn(getGlusterVolume(STOPPED_VOLUME_ID)).when(volumeDao).getById(STOPPED_VOLUME_ID);
    doReturn(getGlusterVolume(STARTED_VOLUME_ID)).when(volumeDao).getById(STARTED_VOLUME_ID);
    doReturn(null).when(volumeDao).getById(null);
}
#end_block

#method_before
private GlusterVolumeEntity getGlusterVolume(Guid volumeId) {
    GlusterVolumeEntity volumeEntity = new GlusterVolumeEntity();
    volumeEntity.setId(volumeId);
    volumeEntity.setName("test-vol");
    volumeEntity.addAccessProtocol(AccessProtocol.GLUSTER);
    volumeEntity.addTransportType(TransportType.TCP);
    volumeEntity.setVolumeType(GlusterVolumeType.DISTRIBUTE);
    volumeEntity.setStatus((volumeId.equals(startedVolumeId)) ? GlusterStatus.UP : GlusterStatus.DOWN);
    volumeEntity.setClusterId(CLUSTER_ID);
    return volumeEntity;
}
#method_after
private GlusterVolumeEntity getGlusterVolume(Guid volumeId) {
    GlusterVolumeEntity volumeEntity = new GlusterVolumeEntity();
    volumeEntity.setId(volumeId);
    volumeEntity.setName("test-vol");
    volumeEntity.addAccessProtocol(AccessProtocol.GLUSTER);
    volumeEntity.addTransportType(TransportType.TCP);
    volumeEntity.setVolumeType(GlusterVolumeType.DISTRIBUTE);
    volumeEntity.setStatus((volumeId.equals(STARTED_VOLUME_ID)) ? GlusterStatus.UP : GlusterStatus.DOWN);
    volumeEntity.setClusterId(CLUSTER_ID);
    return volumeEntity;
}
#end_block

#method_before
@Test
public void canDoActionSucceedsOnStoppedVolume() {
    cmd = spy(new StopGlusterVolumeProfileCommand(new GlusterVolumeParameters(stoppedVolumeId)));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionSucceedsOnStoppedVolume() {
    cmd = spy(new StopGlusterVolumeProfileCommand(new GlusterVolumeParameters(STOPPED_VOLUME_ID)));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#end_block

#method_before
@Test
public void canDoActionSucceedsOnStartedVolume() {
    cmd = spy(new StopGlusterVolumeProfileCommand(new GlusterVolumeParameters(startedVolumeId)));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#method_after
@Test
public void canDoActionSucceedsOnStartedVolume() {
    cmd = spy(new StopGlusterVolumeProfileCommand(new GlusterVolumeParameters(STARTED_VOLUME_ID)));
    prepareMocks(cmd);
    assertTrue(cmd.canDoAction());
}
#end_block

#method_before
private static void initHostSeverities() {
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_TEST_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_OPERATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#method_after
private static void initHostSeverities() {
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_HOST_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_HOST_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAME, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_ERROR_UPDATING_NAMES_ALL_TAKEN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_NAME_IS_ACTIVE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_AUTO_APPROVE_PATTERN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_EMPTY_ID, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_REGISTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_REGISTER_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_REGISTER_EXISTING_VDS_UPDATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_IS_NOT_CONFIGURED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_TEST_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_OPERATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_OPERATION_SKIPPED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_STATUS_VERIFICATION_FAILED, AuditLogSeverity.ALERT);
    mSeverities.put(AuditLogType.VDS_RUN_IN_NO_KVM_MODE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_VERSION_NOT_SUPPORTED_FOR_CLUSTER, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CPU_FLAGS_NX_IS_MISSING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_CPU_RETRIEVE_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_NETWORK, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_DOMAIN_DELAY_INTERVAL, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_RECOVER_FAILED_VMS_UNKNOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MAINTENANCE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE_MIGRATION_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_SHUTDOWN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_SHUTDOWN, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_RESTART, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_RESTART, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_START, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_VDS_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_VDS_STOP, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_SLOW_STORAGE_RESPONSE_TIME, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_FAILED_TO_RUN_VMS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_WARNING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_INSTALL_IN_PROGRESS_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_INITIATED_RUN_VM_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_APPROVE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_APPROVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_INITIALIZING, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_ADD_VM_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_DETECTED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_HOSTED_ON_VDS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_STATUS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_MANUAL_FENCE_FAILED_CALL_FENCE_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_VDS_MAINTENANCE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ALERT_FENCING_NO_PROXY_HOST, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_LOW_MEM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_STORAGE_CONNECTION_FAILED_BUT_LAST_VDS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGES_CONNECTION_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_STORAGE_VDS_STATS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.VDS_LOW_DISK_SPACE_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_ACTIVATE_FAILED_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_SET_NON_OPERATIONAL_VM_NETWORK_IS_BRIDGELESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.VDS_TIME_DRIFT_ALERT, AuditLogSeverity.WARNING);
}
#end_block

#method_before
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
}
#method_after
@SuppressWarnings("deprecation")
private static void initStorageSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAIN_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ATTACH_STORAGE_DOMAINS_TO_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_EXTENDED_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_CONNECT_HOSTS_TO_LUN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_VG, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_REMOVE_VG_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_FAILED_CHANGE_STORAGE_POOL_STATUS, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_NO_HOST_FOR_SPM, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_SEARCHING_NEW_SPM, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_WITH_ERROR, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FORCE_REMOVE_STORAGE_DOMAIN_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_DONE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED_NO_MASTER, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECONSTRUCT_MASTER_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.SYSTEM_MASTER_DOMAIN_NOT_IN_SYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_MOVE_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_HOTUNPLUG_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_HOTUNPLUG_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_COPY_TEMPLATE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_COPIED_TEMPLATE_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_MOVED_VM_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_SUCCESS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_MOVED_VM_DISK_FINISHED_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_FINISHED_REMOVE_DISK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FINISHED_FAILED_REMOVE_DISK, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_FAILURE, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.IRS_DISK_SPACE_LOW, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_SUCCEEDED, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_DEACTIVATED_STORAGE_DOMAIN, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_PROBLEMATIC_FROM_NON_OPERATIONAL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.RECOVERY_STORAGE_POOL, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_SERVERS_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.CONNECT_STORAGE_POOL_FAILED, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_ERROR, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.REFRESH_REPOSITORY_FILE_LIST_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_VG_METADATA_CRITICALLY_FULL, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.STORAGE_ALERT_SMALL_VG_METADATA, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_ACTIVATE_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.SYSTEM_CHANGE_STORAGE_POOL_STATUS_RESET_IRS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATED_STORAGE_DOMAIN_ASYNC, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_ACTIVATE_STORAGE_DOMAIN_FAILED_ASYNC, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.STORAGE_DOMAIN_TASKS_ERROR, AuditLogSeverity.WARNING);
}
#end_block

#method_before
private static void initQuotaSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DELETE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DELETE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.QUOTA_STORAGE_RESIZE_LOWER_THEN_CONSUMPTION, AuditLogSeverity.WARNING);
}
#method_after
private static void initQuotaSeverities() {
    mSeverities.put(AuditLogType.USER_ADD_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_ADD_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_UPDATE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_UPDATE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_DELETE_QUOTA, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.USER_FAILED_DELETE_QUOTA, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_VDS_GROUP_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.QUOTA_STORAGE_RESIZE_LOWER_THEN_CONSUMPTION, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MISSING_QUOTA_STORAGE_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
    mSeverities.put(AuditLogType.MISSING_QUOTA_CLUSTER_PARAMETERS_PERMISSIVE_MODE, AuditLogSeverity.WARNING);
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__STOP_VOLUME_PROFILE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME);
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__STOP_PROFILE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StopGlusterVolumeProfile, new GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StopGlusterVolumeProfile, new GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName()));
    setSucceeded(returnValue.getSucceeded());
    if (!getSucceeded()) {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_PROFILE_STOP_FAILED, returnValue.getVdsError().getMessage());
    }
}
#end_block

#method_before
@Override
protected void buildVmVideoCards() {
    createInfo.add(VdsProperties.display, vm.getdisplay_type().toString());
    // check if display type was changed in given parameters
    if (vm.getdisplay_type() != vm.getdefault_display_type()) {
        if (vm.getdisplay_type() == DisplayType.vnc) {
            // check spice to vnc change
            XmlRpcStruct struct = new XmlRpcStruct();
            // create a monitor as an unmanaged device
            struct.add(VdsProperties.Type, VmDeviceType.VIDEO.getName());
            struct.add(VdsProperties.Device, VmDeviceType.CIRRUS.getName());
            struct.add(VdsProperties.SpecParams, getNewMonitorSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(Guid.NewGuid()));
            devices.add(struct);
        }
    } else {
        // get vm device for Video Cards from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceType.VIDEO.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unmanaged devices (handled separately)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            XmlRpcStruct struct = new XmlRpcStruct();
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            addAddress(vmDevice, struct);
            struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            addToManagedDevices(vmDevice);
            devices.add(struct);
        }
    }
}
#method_after
@Override
protected void buildVmVideoCards() {
    createInfo.add(VdsProperties.display, vm.getdisplay_type().toString());
    // check if display type was changed in given parameters
    if (vm.getdisplay_type() != vm.getdefault_display_type()) {
        if (vm.getdisplay_type() == DisplayType.vnc) {
            // check spice to vnc change
            XmlRpcStruct struct = new XmlRpcStruct();
            // create a monitor as an unmanaged device
            struct.add(VdsProperties.Type, VmDeviceType.VIDEO.getName());
            struct.add(VdsProperties.Device, VmDeviceType.CIRRUS.getName());
            struct.add(VdsProperties.SpecParams, getNewMonitorSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(Guid.NewGuid()));
            devices.add(struct);
        }
    } else {
        // get vm device for Video Cards from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceType.VIDEO.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unmanaged devices (handled separately)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            XmlRpcStruct struct = new XmlRpcStruct();
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            addAddress(vmDevice, struct);
            struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            addToManagedDevices(vmDevice);
            devices.add(struct);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmCD() {
    XmlRpcStruct struct;
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.CDROM) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        struct = new XmlRpcStruct();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if CD was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getCdPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        struct = new XmlRpcStruct();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getCdPath());
    } else {
        // get vm device for this CD from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            struct = new XmlRpcStruct();
            String cdPath = vm.getCdPath();
            addCdDetails(vmDevice, struct);
            addAddress(vmDevice, struct);
            addDevice(struct, vmDevice, cdPath == null ? "" : cdPath);
            // currently only one is supported, may change in future releases
            break;
        }
    }
}
#method_after
@Override
protected void buildVmCD() {
    XmlRpcStruct struct;
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.CDROM) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        struct = new XmlRpcStruct();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if CD was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getCdPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        struct = new XmlRpcStruct();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getCdPath());
    } else {
        // get vm device for this CD from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.DISK.getName(), VmDeviceType.CDROM.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            struct = new XmlRpcStruct();
            String cdPath = vm.getCdPath();
            addCdDetails(vmDevice, struct);
            addAddress(vmDevice, struct);
            addDevice(struct, vmDevice, cdPath == null ? "" : cdPath);
            // currently only one is supported, may change in future releases
            break;
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmFloppy() {
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.FLOPPY) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        XmlRpcStruct struct = new XmlRpcStruct();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if Floppy was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getFloppyPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        XmlRpcStruct struct = new XmlRpcStruct();
        addFloppyDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getFloppyPath());
    } else {
        // get vm device for this Floppy from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            XmlRpcStruct struct = new XmlRpcStruct();
            String file = vm.getFloppyPath();
            addFloppyDetails(vmDevice, struct);
            addDevice(struct, vmDevice, file);
        }
    }
}
#method_after
@Override
protected void buildVmFloppy() {
    // check if we have payload CD
    if (vm.getVmPayload() != null && vm.getVmPayload().getType() == VmDeviceType.FLOPPY) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        XmlRpcStruct struct = new XmlRpcStruct();
        addCdDetails(vmDevice, struct);
        addDevice(struct, vmDevice, "");
    } else // check first if Floppy was given as a parameter
    if (vm.isRunOnce() && !StringUtils.isEmpty(vm.getFloppyPath())) {
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, (vm.getVmPayload() == null) ? null : vm.getVmPayload().getSpecParams(), true, true, true, "");
        XmlRpcStruct struct = new XmlRpcStruct();
        addFloppyDetails(vmDevice, struct);
        addDevice(struct, vmDevice, vm.getFloppyPath());
    } else {
        // get vm device for this Floppy from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            // instead of the blank cd
            if (!VmPayload.isPayload(vmDevice.getSpecParams()) && vmDevices.size() > 1) {
                continue;
            }
            XmlRpcStruct struct = new XmlRpcStruct();
            String file = vm.getFloppyPath();
            addFloppyDetails(vmDevice, struct);
            addDevice(struct, vmDevice, file);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmDrives() {
    // \\int ideCount = 0, pciCount = 0;
    List<Disk> disks = getSortedDisks();
    for (Disk disk : disks) {
        XmlRpcStruct struct = new XmlRpcStruct();
        // get vm device for this disk from DB
        VmDevice vmDevice = DbFacade.getInstance().getVmDeviceDAO().get(new VmDeviceId(disk.getId(), vm.getId()));
        // skip unamanged devices (handled separtely)
        if (!vmDevice.getIsManaged()) {
            continue;
        }
        if (vmDevice.getIsPlugged()) {
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            switch(disk.getDiskInterface()) {
                case IDE:
                    struct.add(VdsProperties.Iface, "ide");
                    // \\ideCount++;
                    break;
                case VirtIO:
                    struct.add(VdsProperties.Iface, VdsProperties.Virtio);
                    // \\pciCount++;
                    break;
                default:
                    // ISCI not supported
                    logUnsupportedInterfaceType();
                    break;
            }
            // Insure that boot disk is created first.
            if (disk.isBoot()) {
                struct.add(VdsProperties.Index, 0);
            }
            addAddress(vmDevice, struct);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                struct.add(VdsProperties.PoolId, diskImage.getstorage_pool_id().toString());
                struct.add(VdsProperties.DomainId, diskImage.getstorage_ids().get(0).toString());
                struct.add(VdsProperties.ImageId, diskImage.getId().toString());
                struct.add(VdsProperties.VolumeId, diskImage.getImageId().toString());
                struct.add(VdsProperties.Format, diskImage.getvolume_format().toString().toLowerCase());
                struct.add(VdsProperties.PropagateErrors, disk.getPropagateErrors().toString().toLowerCase());
            } else {
                LunDisk lunDisk = (LunDisk) disk;
                struct.add(VdsProperties.Guid, lunDisk.getLun().getLUN_id());
                struct.add(VdsProperties.Format, VolumeFormat.RAW.toString().toLowerCase());
                struct.add(VdsProperties.PropagateErrors, PropagateErrors.Off.toString().toLowerCase());
            }
            addBootOrder(vmDevice, struct);
            struct.add(VdsProperties.Shareable, String.valueOf(disk.isShareable()));
            struct.add(VdsProperties.Optional, Boolean.FALSE.toString());
            struct.add(VdsProperties.ReadOnly, String.valueOf(vmDevice.getIsReadOnly()));
            struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#method_after
@Override
protected void buildVmDrives() {
    // \\int ideCount = 0, pciCount = 0;
    List<Disk> disks = getSortedDisks();
    for (Disk disk : disks) {
        XmlRpcStruct struct = new XmlRpcStruct();
        // get vm device for this disk from DB
        VmDevice vmDevice = DbFacade.getInstance().getVmDeviceDao().get(new VmDeviceId(disk.getId(), vm.getId()));
        // skip unamanged devices (handled separtely)
        if (!vmDevice.getIsManaged()) {
            continue;
        }
        if (vmDevice.getIsPlugged()) {
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            switch(disk.getDiskInterface()) {
                case IDE:
                    struct.add(VdsProperties.Iface, "ide");
                    // \\ideCount++;
                    break;
                case VirtIO:
                    struct.add(VdsProperties.Iface, VdsProperties.Virtio);
                    // \\pciCount++;
                    break;
                default:
                    // ISCI not supported
                    logUnsupportedInterfaceType();
                    break;
            }
            // Insure that boot disk is created first.
            if (disk.isBoot()) {
                struct.add(VdsProperties.Index, 0);
            }
            addAddress(vmDevice, struct);
            if (disk.getDiskStorageType() == DiskStorageType.IMAGE) {
                DiskImage diskImage = (DiskImage) disk;
                struct.add(VdsProperties.PoolId, diskImage.getstorage_pool_id().toString());
                struct.add(VdsProperties.DomainId, diskImage.getstorage_ids().get(0).toString());
                struct.add(VdsProperties.ImageId, diskImage.getId().toString());
                struct.add(VdsProperties.VolumeId, diskImage.getImageId().toString());
                struct.add(VdsProperties.Format, diskImage.getvolume_format().toString().toLowerCase());
                struct.add(VdsProperties.PropagateErrors, disk.getPropagateErrors().toString().toLowerCase());
            } else {
                LunDisk lunDisk = (LunDisk) disk;
                struct.add(VdsProperties.Guid, lunDisk.getLun().getLUN_id());
                struct.add(VdsProperties.Format, VolumeFormat.RAW.toString().toLowerCase());
                struct.add(VdsProperties.PropagateErrors, PropagateErrors.Off.toString().toLowerCase());
            }
            addBootOrder(vmDevice, struct);
            struct.add(VdsProperties.Shareable, String.valueOf(disk.isShareable()));
            struct.add(VdsProperties.Optional, Boolean.FALSE.toString());
            struct.add(VdsProperties.ReadOnly, String.valueOf(vmDevice.getIsReadOnly()));
            struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmNetworkInterfaces() {
    Boolean useRtl8139_pv = Config.<Boolean>GetValue(ConfigValues.UseRtl8139_pv, vm.getvds_group_compatibility_version().toString());
    Map<VmDeviceId, VmDevice> devicesByDeviceId = Entities.businessEntitiesById(DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.INTERFACE.getName(), VmDeviceType.BRIDGE.getName()));
    for (VmNetworkInterface vmInterface : vm.getInterfaces()) {
        // get vm device for this disk from DB
        VmDevice vmDevice = devicesByDeviceId.get(new VmDeviceId(vmInterface.getId(), vmInterface.getVmId().getValue()));
        if (vmDevice != null && vmDevice.getIsManaged() && vmDevice.getIsPlugged()) {
            XmlRpcStruct struct = new XmlRpcStruct();
            VmInterfaceType ifaceType = VmInterfaceType.rtl8139;
            if (vmInterface.getType() != null) {
                ifaceType = VmInterfaceType.forValue(vmInterface.getType());
            }
            if (ifaceType == VmInterfaceType.rtl8139_pv) {
                if (!useRtl8139_pv) {
                    if (vm.getHasAgent()) {
                        addNetworkInterfaceProperties(struct, vmInterface, vmDevice, VmInterfaceType.pv.name(), vm.getvds_group_compatibility_version());
                    } else {
                        addNetworkInterfaceProperties(struct, vmInterface, vmDevice, VmInterfaceType.rtl8139.name(), vm.getvds_group_compatibility_version());
                    }
                } else {
                    addNetworkInterfaceProperties(struct, vmInterface, vmDevice, VmInterfaceType.pv.name(), vm.getvds_group_compatibility_version());
                    // Doual Mode: in this case we have to insert 2 interfaces with the same entries except nicModel
                    XmlRpcStruct rtl8139Struct = new XmlRpcStruct();
                    addNetworkInterfaceProperties(rtl8139Struct, vmInterface, vmDevice, VmInterfaceType.rtl8139.name(), vm.getvds_group_compatibility_version());
                    devices.add(rtl8139Struct);
                }
            } else {
                addNetworkInterfaceProperties(struct, vmInterface, vmDevice, ifaceType.toString(), vm.getvds_group_compatibility_version());
            }
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#method_after
@Override
protected void buildVmNetworkInterfaces() {
    Boolean useRtl8139_pv = Config.<Boolean>GetValue(ConfigValues.UseRtl8139_pv, vm.getvds_group_compatibility_version().toString());
    Map<VmDeviceId, VmDevice> devicesByDeviceId = Entities.businessEntitiesById(DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.INTERFACE.getName(), VmDeviceType.BRIDGE.getName()));
    for (VmNetworkInterface vmInterface : vm.getInterfaces()) {
        // get vm device for this disk from DB
        VmDevice vmDevice = devicesByDeviceId.get(new VmDeviceId(vmInterface.getId(), vmInterface.getVmId().getValue()));
        if (vmDevice != null && vmDevice.getIsManaged() && vmDevice.getIsPlugged()) {
            XmlRpcStruct struct = new XmlRpcStruct();
            VmInterfaceType ifaceType = VmInterfaceType.rtl8139;
            if (vmInterface.getType() != null) {
                ifaceType = VmInterfaceType.forValue(vmInterface.getType());
            }
            if (ifaceType == VmInterfaceType.rtl8139_pv) {
                if (!useRtl8139_pv) {
                    if (vm.getHasAgent()) {
                        addNetworkInterfaceProperties(struct, vmInterface, vmDevice, VmInterfaceType.pv.name(), vm.getvds_group_compatibility_version());
                    } else {
                        addNetworkInterfaceProperties(struct, vmInterface, vmDevice, VmInterfaceType.rtl8139.name(), vm.getvds_group_compatibility_version());
                    }
                } else {
                    addNetworkInterfaceProperties(struct, vmInterface, vmDevice, VmInterfaceType.pv.name(), vm.getvds_group_compatibility_version());
                    // Doual Mode: in this case we have to insert 2 interfaces with the same entries except nicModel
                    XmlRpcStruct rtl8139Struct = new XmlRpcStruct();
                    addNetworkInterfaceProperties(rtl8139Struct, vmInterface, vmDevice, VmInterfaceType.rtl8139.name(), vm.getvds_group_compatibility_version());
                    devices.add(rtl8139Struct);
                }
            } else {
                addNetworkInterfaceProperties(struct, vmInterface, vmDevice, ifaceType.toString(), vm.getvds_group_compatibility_version());
            }
            devices.add(struct);
            addToManagedDevices(vmDevice);
        }
    }
}
#end_block

#method_before
@Override
protected void buildVmSoundDevices() {
    if (vm.getvm_type() == VmType.Desktop) {
        // get vm device for Sound device from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceType.SOUND.getName());
        for (VmDevice vmDevice : vmDevices) {
            XmlRpcStruct struct = new XmlRpcStruct();
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            addAddress(vmDevice, struct);
            devices.add(struct);
        }
    }
}
#method_after
@Override
protected void buildVmSoundDevices() {
    if (vm.getvm_type() == VmType.Desktop) {
        // get vm device for Sound device from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceType.SOUND.getName());
        for (VmDevice vmDevice : vmDevices) {
            XmlRpcStruct struct = new XmlRpcStruct();
            struct.add(VdsProperties.Type, vmDevice.getType());
            struct.add(VdsProperties.Device, vmDevice.getDevice());
            struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
            struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
            addAddress(vmDevice, struct);
            devices.add(struct);
        }
    }
}
#end_block

#method_before
@Override
protected void buildUnmanagedDevices() {
    @SuppressWarnings("unchecked")
    Map<String, String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? (Map<String, String>) createInfo.getItem(VdsProperties.Custom) : new HashMap<String, String>();
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getUnmanagedDevicesByVmId(vm.getId());
    if (vmDevices.size() > 0) {
        StringBuilder id = new StringBuilder();
        for (VmDevice vmDevice : vmDevices) {
            XmlRpcStruct struct = new XmlRpcStruct();
            id.append(VdsProperties.Device);
            id.append("_");
            id.append(vmDevice.getDeviceId());
            if (VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) {
                struct.add(VdsProperties.Type, vmDevice.getType());
                struct.add(VdsProperties.Device, vmDevice.getDevice());
                addAddress(vmDevice, struct);
                struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
                struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
                devices.add(struct);
            } else {
                customMap.put(id.toString(), vmDevice.toString());
            }
        }
    }
    createInfo.add(VdsProperties.Custom, customMap);
    XmlRpcStruct[] devArray = new XmlRpcStruct[devices.size()];
    createInfo.add(DEVICES, devices.toArray(devArray));
}
#method_after
@Override
protected void buildUnmanagedDevices() {
    @SuppressWarnings("unchecked")
    Map<String, String> customMap = (createInfo.containsKey(VdsProperties.Custom)) ? (Map<String, String>) createInfo.getItem(VdsProperties.Custom) : new HashMap<String, String>();
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getUnmanagedDevicesByVmId(vm.getId());
    if (vmDevices.size() > 0) {
        StringBuilder id = new StringBuilder();
        for (VmDevice vmDevice : vmDevices) {
            XmlRpcStruct struct = new XmlRpcStruct();
            id.append(VdsProperties.Device);
            id.append("_");
            id.append(vmDevice.getDeviceId());
            if (VmDeviceCommonUtils.isInWhiteList(vmDevice.getType(), vmDevice.getDevice())) {
                struct.add(VdsProperties.Type, vmDevice.getType());
                struct.add(VdsProperties.Device, vmDevice.getDevice());
                addAddress(vmDevice, struct);
                struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
                struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
                devices.add(struct);
            } else {
                customMap.put(id.toString(), vmDevice.toString());
            }
        }
    }
    createInfo.add(VdsProperties.Custom, customMap);
    XmlRpcStruct[] devArray = new XmlRpcStruct[devices.size()];
    createInfo.add(DEVICES, devices.toArray(devArray));
}
#end_block

#method_before
private void buildVmUsbControllers() {
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.CONTROLLER.getName(), VmDeviceType.USB.getName());
    for (VmDevice vmDevice : vmDevices) {
        XmlRpcStruct struct = new XmlRpcStruct();
        struct.add(VdsProperties.Type, vmDevice.getType());
        struct.add(VdsProperties.Device, vmDevice.getDevice());
        setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct);
        struct.add(VdsProperties.SpecParams, new HashMap<String, Object>());
        struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
        addAddress(vmDevice, struct);
        String model = (String) struct.getItem(VdsProperties.Model);
        // This is a workaround until libvirt will fix the requirement to order these controllers
        if (model != null && isFirstMasterController(model)) {
            devices.add(0, struct);
        } else {
            devices.add(struct);
        }
    }
}
#method_after
private void buildVmUsbControllers() {
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.CONTROLLER.getName(), VmDeviceType.USB.getName());
    for (VmDevice vmDevice : vmDevices) {
        XmlRpcStruct struct = new XmlRpcStruct();
        struct.add(VdsProperties.Type, vmDevice.getType());
        struct.add(VdsProperties.Device, vmDevice.getDevice());
        setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct);
        struct.add(VdsProperties.SpecParams, new HashMap<String, Object>());
        struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
        addAddress(vmDevice, struct);
        String model = (String) struct.getItem(VdsProperties.Model);
        // This is a workaround until libvirt will fix the requirement to order these controllers
        if (model != null && isFirstMasterController(model)) {
            devices.add(0, struct);
        } else {
            devices.add(struct);
        }
    }
}
#end_block

#method_before
private void buildVmUsbSlots() {
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.REDIR.getName(), VmDeviceType.SPICEVMC.getName());
    for (VmDevice vmDevice : vmDevices) {
        XmlRpcStruct struct = new XmlRpcStruct();
        struct.add(VdsProperties.Type, vmDevice.getType());
        struct.add(VdsProperties.Device, vmDevice.getDevice());
        struct.add(VdsProperties.Bus, USB_BUS);
        struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
        struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
        addAddress(vmDevice, struct);
        devices.add(struct);
    }
}
#method_after
private void buildVmUsbSlots() {
    List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.REDIR.getName(), VmDeviceType.SPICEVMC.getName());
    for (VmDevice vmDevice : vmDevices) {
        XmlRpcStruct struct = new XmlRpcStruct();
        struct.add(VdsProperties.Type, vmDevice.getType());
        struct.add(VdsProperties.Device, vmDevice.getDevice());
        struct.add(VdsProperties.Bus, USB_BUS);
        struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams());
        struct.add(VdsProperties.DeviceId, String.valueOf(vmDevice.getId().getDeviceId()));
        addAddress(vmDevice, struct);
        devices.add(struct);
    }
}
#end_block

#method_before
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "");
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDAO().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#method_after
@Override
protected void buildVmMemoryBalloon() {
    if (vm.isRunOnce() && vm.isBalloonEnabled()) {
        Map<String, Object> specParams = new HashMap<String, Object>();
        specParams.put(VdsProperties.Model, VdsProperties.Virtio);
        VmDevice vmDevice = new VmDevice(new VmDeviceId(Guid.NewGuid(), vm.getId()), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName(), "", 0, specParams, true, true, true, "");
        addMemBalloonDevice(vmDevice);
    } else {
        // get vm device for this Balloon from DB
        List<VmDevice> vmDevices = DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceType.BALLOON.getName(), VmDeviceType.MEMBALLOON.getName());
        for (VmDevice vmDevice : vmDevices) {
            // skip unamanged devices (handled separtely)
            if (!vmDevice.getIsManaged()) {
                continue;
            }
            addMemBalloonDevice(vmDevice);
            // only one memory balloon should exist
            break;
        }
    }
}
#end_block

#method_before
private List<VdsNetworkInterface> nicsToInterfaces(List<HostNIC> hostNics) {
    List<VdsNetworkInterface> ifaces = new ArrayList<VdsNetworkInterface>(hostNics.size());
    for (HostNIC nic : hostNics) {
        VdsNetworkInterface iface = map(nic, null);
        ifaces.add(iface);
        if (nic.isSetBonding() && nic.getBonding().isSetSlaves()) {
            for (HostNIC slave : nic.getBonding().getSlaves().getSlaves()) {
                VdsNetworkInterface slaveIface = map(lookupNic(slave.getId()), null);
                slaveIface.setBondName(nic.getName());
                ifaces.add(slaveIface);
            }
        }
    }
    return ifaces;
}
#method_after
private List<VdsNetworkInterface> nicsToInterfaces(List<HostNIC> hostNics) {
    List<VdsNetworkInterface> ifaces = new ArrayList<VdsNetworkInterface>(hostNics.size());
    for (HostNIC nic : hostNics) {
        VdsNetworkInterface iface = map(nic, null);
        ifaces.add(iface);
        if (nic.isSetBonding() && nic.getBonding().isSetSlaves()) {
            for (HostNIC slave : nic.getBonding().getSlaves().getSlaves()) {
                VdsNetworkInterface slaveIface = map(slave, lookupInterface(slave.getId()));
                slaveIface.setBondName(nic.getName());
                ifaces.add(slaveIface);
            }
        }
    }
    return ifaces;
}
#end_block

#method_before
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getGlusterVolumeDao();
    server = dbFacade.getVdsStaticDAO().get(SERVER_ID);
    existingDistVol = dao.getById(EXISTING_VOL_DIST_ID);
    existingReplVol = dao.getById(EXISTING_VOL_REPL_ID);
}
#method_after
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getGlusterVolumeDao();
    server = dbFacade.getVdsStaticDao().get(SERVER_ID);
    existingDistVol = dao.getById(EXISTING_VOL_DIST_ID);
    existingReplVol = dao.getById(EXISTING_VOL_REPL_ID);
}
#end_block

#method_before
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getGlusterBrickDao();
    server = dbFacade.getVdsStaticDAO().get(SERVER_ID);
}
#method_after
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = dbFacade.getGlusterBrickDao();
    server = dbFacade.getVdsStaticDao().get(SERVER_ID);
}
#end_block

#method_before
private void SaveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.UpdateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.UpdateStatisticsData(stat);
        CheckVdsMemoryThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDAO().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    updateAllInTransaction(_vmDynamicToSave.values(), getDbFacade().getVmDynamicDAO());
    updateAllInTransaction(_vmStatisticsToSave.values(), getDbFacade().getVmStatisticsDAO());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    updateAllInTransaction(allVmInterfaceStatistics, getDbFacade().getVmNetworkStatisticsDAO());
    updateAllInTransaction(_vmDiskImageDynamicToSave.values(), getDbFacade().getDiskImageDynamicDAO());
    saveVmDevicesToDb();
}
#method_after
private void SaveDataToDb() {
    if (_saveVdsDynamic) {
        _vdsManager.UpdateDynamicData(_vds.getDynamicData());
    }
    if (_saveVdsStatistics) {
        VdsStatistics stat = _vds.getStatisticsData();
        _vdsManager.UpdateStatisticsData(stat);
        CheckVdsMemoryThreshold(stat);
        final List<VdsNetworkStatistics> statistics = new LinkedList<VdsNetworkStatistics>();
        for (VdsNetworkInterface iface : _vds.getInterfaces()) {
            statistics.add(iface.getStatistics());
        }
        if (!statistics.isEmpty()) {
            TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

                @Override
                public Void runInTransaction() {
                    getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics);
                    return null;
                }
            });
        }
    }
    updateAllInTransaction(_vmDynamicToSave.values(), getDbFacade().getVmDynamicDao());
    updateAllInTransaction(_vmStatisticsToSave.values(), getDbFacade().getVmStatisticsDao());
    final List<VmNetworkStatistics> allVmInterfaceStatistics = new LinkedList<VmNetworkStatistics>();
    for (List<VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) {
        for (VmNetworkInterface iface : list) {
            allVmInterfaceStatistics.add(iface.getStatistics());
        }
    }
    updateAllInTransaction(allVmInterfaceStatistics, getDbFacade().getVmNetworkStatisticsDao());
    updateAllInTransaction(_vmDiskImageDynamicToSave.values(), getDbFacade().getDiskImageDynamicDao());
    saveVmDevicesToDb();
}
#end_block

#method_before
private void saveVmDevicesToDb() {
    List<VmDevice> list = new ArrayList<VmDevice>(vmDeviceToSave.values());
    Collections.sort(list);
    updateAllInTransaction("UpdateVmDeviceRuntimeInfo", list, getDbFacade().getVmDeviceDAO());
    if (!removedDeviceIds.isEmpty()) {
        TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getDbFacade().getVmDeviceDAO().removeAll(removedDeviceIds);
                return null;
            }
        });
    }
    if (!newVmDevices.isEmpty()) {
        TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getDbFacade().getVmDeviceDAO().saveAll(newVmDevices);
                return null;
            }
        });
    }
}
#method_after
private void saveVmDevicesToDb() {
    List<VmDevice> list = new ArrayList<VmDevice>(vmDeviceToSave.values());
    Collections.sort(list);
    updateAllInTransaction("UpdateVmDeviceRuntimeInfo", list, getDbFacade().getVmDeviceDao());
    if (!removedDeviceIds.isEmpty()) {
        TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getDbFacade().getVmDeviceDao().removeAll(removedDeviceIds);
                return null;
            }
        });
    }
    if (!newVmDevices.isEmpty()) {
        TransactionSupport.executeInScope(TransactionScopeOption.Required, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                getDbFacade().getVmDeviceDao().saveAll(newVmDevices);
                return null;
            }
        });
    }
}
#end_block

#method_before
private void markIsSetNonOperationalExecuted() {
    if (!_vdsManager.isSetNonOperationalExecuted()) {
        VdsDynamic vdsDynamic = getDbFacade().getVdsDynamicDAO().get(_vds.getId());
        if (vdsDynamic.getstatus() == VDSStatus.NonOperational) {
            _vdsManager.setIsSetNonOperationalExecuted(true);
        }
    }
}
#method_after
private void markIsSetNonOperationalExecuted() {
    if (!_vdsManager.isSetNonOperationalExecuted()) {
        VdsDynamic vdsDynamic = getDbFacade().getVdsDynamicDao().get(_vds.getId());
        if (vdsDynamic.getstatus() == VDSStatus.NonOperational) {
            _vdsManager.setIsSetNonOperationalExecuted(true);
        }
    }
}
#end_block

#method_before
// Check if one of the Host interfaces is down, we set the host to non-operational
private void checkVdsInterfaces() {
    if (_vds.getstatus() != VDSStatus.Up) {
        return;
    }
    Map<String, Boolean> bondsWithStatus = new HashMap<String, Boolean>();
    List<Network> clusterNetworks = getDbFacade().getNetworkDAO().getAllForCluster(_vds.getvds_group_id());
    List<String> networks = new ArrayList<String>();
    List<String> brokenNics = new ArrayList<String>();
    Map<String, List<String>> bondsWithListOfNics = new HashMap<String, List<String>>();
    List<VdsNetworkInterface> interfaces = _vds.getInterfaces();
    Map<String, Network> networksByName = NetworkUtils.networksByName(clusterNetworks);
    try {
        for (VdsNetworkInterface iface : interfaces) {
            // Handle nics that are non bonded and not vlan over bond
            if (isRequiredInterfaceDown(networksByName, iface)) {
                brokenNics.add(iface.getName());
                networks.add(iface.getNetworkName());
            }
            // Handle bond nics
            if (iface.getBondName() != null) {
                populate(bondsWithStatus, clusterNetworks, networks, bondsWithListOfNics, iface);
            }
        }
        // only if we didn't already set the host to down
        if (brokenNics.isEmpty()) {
            for (String key : bondsWithStatus.keySet()) {
                if (!bondsWithStatus.get(key)) {
                    // add the nics name for audit log
                    for (String name : bondsWithListOfNics.get(key)) {
                        brokenNics.add(name);
                    }
                }
            }
        }
    } catch (Exception e) {
        log.error(String.format("Failure on checkInterfaces on update runtimeinfo for vds: %s", _vds.getvds_name()), e);
    } finally {
        if (!brokenNics.isEmpty()) {
            // we give 1 minutes to a nic to get up in case the nic get the ip from DHCP server
            if (!hostDownTimes.containsKey(_vds.getId())) {
                hostDownTimes.put(_vds.getId(), System.currentTimeMillis());
                return;
            }
            // if less then 1 minutes, still waiting for DHCP
            int delay = Config.<Integer>GetValue(ConfigValues.NicDHCPDelayGraceInMS) * 1000;
            if (System.currentTimeMillis() < hostDownTimes.get(_vds.getId()) + delay) {
                return;
            }
            // if we could retreive it within the timeout, remove from map (for future checks) and set the host to
            // non-operational
            hostDownTimes.remove(_vds.getId());
            try {
                StringBuilder sNics = new StringBuilder();
                StringBuilder sNetworks = new StringBuilder();
                for (String nic : brokenNics) {
                    sNics.append(nic).append(", ");
                }
                for (String net : networks) {
                    sNetworks.append(net).append(", ");
                }
                String message = String.format("Host '%s' moved to Non-Operational state because interface/s '%s' are down which needed by network/s '%s' in the current cluster", _vds.getvds_name(), sNics.toString(), sNetworks.toString());
                _vdsManager.setStatus(VDSStatus.NonOperational, _vds);
                log.info(message);
                AuditLogableBase logable = new AuditLogableBase(_vds.getId());
                logable.AddCustomValue("Networks", StringHelper.trimEnd(sNetworks.toString(), ',', ' '));
                logable.AddCustomValue("Interfaces", StringHelper.trimEnd(sNics.toString(), ',', ' '));
                auditLog(logable, AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN);
            } catch (Exception e) {
                log.error(String.format("checkInterface: Failure on moving host: %s to non-operational.", _vds.getvds_name()), e);
            }
        } else {
            // no nics are down, remove from list if exists
            hostDownTimes.remove(_vds.getId());
        }
    }
}
#method_after
// Check if one of the Host interfaces is down, we set the host to non-operational
private void checkVdsInterfaces() {
    if (_vds.getstatus() != VDSStatus.Up) {
        return;
    }
    Map<String, Boolean> bondsWithStatus = new HashMap<String, Boolean>();
    List<Network> clusterNetworks = getDbFacade().getNetworkDao().getAllForCluster(_vds.getvds_group_id());
    List<String> networks = new ArrayList<String>();
    List<String> brokenNics = new ArrayList<String>();
    Map<String, List<String>> bondsWithListOfNics = new HashMap<String, List<String>>();
    List<VdsNetworkInterface> interfaces = _vds.getInterfaces();
    Map<String, Network> networksByName = NetworkUtils.networksByName(clusterNetworks);
    try {
        for (VdsNetworkInterface iface : interfaces) {
            // Handle nics that are non bonded and not vlan over bond
            if (isRequiredInterfaceDown(networksByName, iface)) {
                brokenNics.add(iface.getName());
                networks.add(iface.getNetworkName());
            }
            // Handle bond nics
            if (iface.getBondName() != null) {
                populate(bondsWithStatus, clusterNetworks, networks, bondsWithListOfNics, iface);
            }
        }
        // only if we didn't already set the host to down
        if (brokenNics.isEmpty()) {
            for (String key : bondsWithStatus.keySet()) {
                if (!bondsWithStatus.get(key)) {
                    // add the nics name for audit log
                    for (String name : bondsWithListOfNics.get(key)) {
                        brokenNics.add(name);
                    }
                }
            }
        }
    } catch (Exception e) {
        log.error(String.format("Failure on checkInterfaces on update runtimeinfo for vds: %s", _vds.getvds_name()), e);
    } finally {
        if (!brokenNics.isEmpty()) {
            // we give 1 minutes to a nic to get up in case the nic get the ip from DHCP server
            if (!hostDownTimes.containsKey(_vds.getId())) {
                hostDownTimes.put(_vds.getId(), System.currentTimeMillis());
                return;
            }
            // if less then 1 minutes, still waiting for DHCP
            int delay = Config.<Integer>GetValue(ConfigValues.NicDHCPDelayGraceInMS) * 1000;
            if (System.currentTimeMillis() < hostDownTimes.get(_vds.getId()) + delay) {
                return;
            }
            // if we could retreive it within the timeout, remove from map (for future checks) and set the host to
            // non-operational
            hostDownTimes.remove(_vds.getId());
            try {
                StringBuilder sNics = new StringBuilder();
                StringBuilder sNetworks = new StringBuilder();
                for (String nic : brokenNics) {
                    sNics.append(nic).append(", ");
                }
                for (String net : networks) {
                    sNetworks.append(net).append(", ");
                }
                String message = String.format("Host '%s' moved to Non-Operational state because interface/s '%s' are down which needed by network/s '%s' in the current cluster", _vds.getvds_name(), sNics.toString(), sNetworks.toString());
                _vdsManager.setStatus(VDSStatus.NonOperational, _vds);
                log.info(message);
                AuditLogableBase logable = new AuditLogableBase(_vds.getId());
                logable.AddCustomValue("Networks", StringHelper.trimEnd(sNetworks.toString(), ',', ' '));
                logable.AddCustomValue("Interfaces", StringHelper.trimEnd(sNics.toString(), ',', ' '));
                auditLog(logable, AuditLogType.VDS_SET_NONOPERATIONAL_IFACE_DOWN);
            } catch (Exception e) {
                log.error(String.format("checkInterface: Failure on moving host: %s to non-operational.", _vds.getvds_name()), e);
            }
        } else {
            // no nics are down, remove from list if exists
            hostDownTimes.remove(_vds.getId());
        }
    }
}
#end_block

#method_before
private void processVmDevices(XmlRpcStruct vm) {
    if (vm == null || vm.getItem(VdsProperties.vm_guid) == null) {
        log.errorFormat("Recieved NULL VM or VM id when processing VM devices, abort.");
        return;
    }
    Guid vmId = new Guid((String) vm.getItem(VdsProperties.vm_guid));
    HashSet<Guid> processedDevices = new HashSet<Guid>();
    Object[] objects = (Object[]) vm.getItem(VdsProperties.Devices);
    List<VmDevice> devices = getDbFacade().getVmDeviceDAO().getVmDeviceByVmId(vmId);
    Map<VmDeviceId, VmDevice> deviceMap = new HashMap<VmDeviceId, VmDevice>();
    for (VmDevice device : devices) {
        deviceMap.put(device.getId(), device);
    }
    for (Object o : objects) {
        XmlRpcStruct device = new XmlRpcStruct((Map<String, Object>) o);
        Guid deviceId = getDeviceId(device);
        if ((device.getItem(VdsProperties.Address)) == null) {
            logDeviceInformation(vmId, device);
            continue;
        }
        VmDevice vmDevice = deviceMap.get(new VmDeviceId(deviceId, vmId));
        if (deviceId == null || vmDevice == null) {
            deviceId = addNewVmDevice(vmId, device);
        } else {
            String alias = StringUtils.defaultIfEmpty((String) device.getItem(VdsProperties.Alias), "");
            vmDevice.setAddress(((Map<String, String>) device.getItem(VdsProperties.Address)).toString());
            vmDevice.setAlias(alias);
            addVmDeviceToList(vmDevice);
        }
        processedDevices.add(deviceId);
    }
    handleRemovedDevices(vmId, processedDevices, devices);
}
#method_after
private void processVmDevices(XmlRpcStruct vm) {
    if (vm == null || vm.getItem(VdsProperties.vm_guid) == null) {
        log.errorFormat("Recieved NULL VM or VM id when processing VM devices, abort.");
        return;
    }
    Guid vmId = new Guid((String) vm.getItem(VdsProperties.vm_guid));
    HashSet<Guid> processedDevices = new HashSet<Guid>();
    Object[] objects = (Object[]) vm.getItem(VdsProperties.Devices);
    List<VmDevice> devices = getDbFacade().getVmDeviceDao().getVmDeviceByVmId(vmId);
    Map<VmDeviceId, VmDevice> deviceMap = new HashMap<VmDeviceId, VmDevice>();
    for (VmDevice device : devices) {
        deviceMap.put(device.getId(), device);
    }
    for (Object o : objects) {
        XmlRpcStruct device = new XmlRpcStruct((Map<String, Object>) o);
        Guid deviceId = getDeviceId(device);
        if ((device.getItem(VdsProperties.Address)) == null) {
            logDeviceInformation(vmId, device);
            continue;
        }
        VmDevice vmDevice = deviceMap.get(new VmDeviceId(deviceId, vmId));
        if (deviceId == null || vmDevice == null) {
            deviceId = addNewVmDevice(vmId, device);
        } else {
            String alias = StringUtils.defaultIfEmpty((String) device.getItem(VdsProperties.Alias), "");
            vmDevice.setAddress(((Map<String, String>) device.getItem(VdsProperties.Address)).toString());
            vmDevice.setAlias(alias);
            addVmDeviceToList(vmDevice);
        }
        processedDevices.add(deviceId);
    }
    handleRemovedDevices(vmId, processedDevices, devices);
}
#end_block

#method_before
private void proceedDownVms() {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic vm = vm_helper.getKey();
        if (vm.getstatus() != VMStatus.Down) {
            continue;
        }
        VM vmTo = null;
        // _vdsManager.getVm(vm.getvm_guid());
        vmTo = _vmDict.get(vm.getId());
        VMStatus status = VMStatus.Unassigned;
        if (vmTo != null) {
            status = vmTo.getstatus();
            proceedVmBeforeDeletion(vmTo, vm);
            // when going to suspend, delete vm from cache later
            if (status == VMStatus.SavingState) {
                ResourceManager.getInstance().InternalSetVmStatus(vmTo, VMStatus.Suspended);
            }
            clearVm(vmTo);
        }
        VmStatistics vmStatistics = getDbFacade().getVmStatisticsDAO().get(vm.getId());
        if (vmStatistics != null) {
            DestroyVDSCommand<DestroyVmVDSCommandParameters> vdsBrokerCommand = new DestroyVDSCommand<DestroyVmVDSCommandParameters>(new DestroyVmVDSCommandParameters(_vds.getId(), vm.getId(), false, false, 0));
            vdsBrokerCommand.Execute();
            if (vmTo != null && status == VMStatus.SavingState) {
                AfterSuspendTreatment(vm);
            } else if (status != VMStatus.MigratingFrom) {
                HandleVmOnDown(vmTo, vm, vmStatistics);
            }
        }
    }
}
#method_after
private void proceedDownVms() {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic vm = vm_helper.getKey();
        if (vm.getstatus() != VMStatus.Down) {
            continue;
        }
        VM vmTo = null;
        // _vdsManager.getVm(vm.getvm_guid());
        vmTo = _vmDict.get(vm.getId());
        VMStatus status = VMStatus.Unassigned;
        if (vmTo != null) {
            status = vmTo.getstatus();
            proceedVmBeforeDeletion(vmTo, vm);
            // when going to suspend, delete vm from cache later
            if (status == VMStatus.SavingState) {
                ResourceManager.getInstance().InternalSetVmStatus(vmTo, VMStatus.Suspended);
            }
            clearVm(vmTo);
        }
        VmStatistics vmStatistics = getDbFacade().getVmStatisticsDao().get(vm.getId());
        if (vmStatistics != null) {
            DestroyVDSCommand<DestroyVmVDSCommandParameters> vdsBrokerCommand = new DestroyVDSCommand<DestroyVmVDSCommandParameters>(new DestroyVmVDSCommandParameters(_vds.getId(), vm.getId(), false, false, 0));
            vdsBrokerCommand.Execute();
            if (vmTo != null && status == VMStatus.SavingState) {
                AfterSuspendTreatment(vm);
            } else if (status != VMStatus.MigratingFrom) {
                HandleVmOnDown(vmTo, vm, vmStatistics);
            }
        }
    }
}
#end_block

#method_before
private void updateRepository(List<VM> running) {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic runningVm = vm_helper.getKey();
        VM vmToUpdate = null;
        vmToUpdate = _vmDict.get(runningVm.getId());
        // if not migrating here and not down
        if (!inMigrationTo(runningVm, vmToUpdate) && runningVm.getstatus() != VMStatus.Down) {
            if (vmToUpdate != null) {
                if (_vmDict.containsKey(vmToUpdate.getId()) && !StringHelper.EqOp(runningVm.getclient_ip(), vmToUpdate.getclient_ip())) {
                    _vmsClientIpChanged.put(vmToUpdate, runningVm);
                }
            }
            if (vmToUpdate != null) {
                logVmStatusTransition(vmToUpdate, runningVm);
                // open spice for dedicated VMs
                if (vmToUpdate.getstatus() != VMStatus.Up && runningVm.getstatus() == VMStatus.Up || vmToUpdate.getstatus() != VMStatus.PoweringUp && runningVm.getstatus() == VMStatus.PoweringUp) {
                    // if no current client ip already connected.
                    if (runningVm.getdisplay() != null) {
                        _poweringUpVms.add(runningVm);
                    } else {
                        log.errorFormat("VdsBroker.VdsUpdateRunTimeInfo.updateRepository - runningVm.display is null, cannot start spice for it");
                    }
                }
                // "Up" as this means that the power down operation failed:
                if (vmToUpdate.getstatus() == VMStatus.PoweringDown && runningVm.getstatus() == VMStatus.Up) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_POWER_DOWN_FAILED);
                }
                if (vmToUpdate.getstatus() != VMStatus.Up && vmToUpdate.getstatus() != VMStatus.MigratingFrom && runningVm.getstatus() == VMStatus.Up) {
                    // running handling
                    if (log.isDebugEnabled()) {
                        log.debugFormat("removing VM {0} from successful run VMs list", vmToUpdate.getId());
                    }
                    if (!_succededToRunVms.contains(vmToUpdate.getId())) {
                        _succededToRunVms.add(vmToUpdate.getId());
                    }
                }
                afterMigrationFrom(runningVm, vmToUpdate);
                if (vmToUpdate.getstatus() != VMStatus.NotResponding && runningVm.getstatus() == VMStatus.NotResponding) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_NOT_RESPONDING);
                } else /**
                 * check if vm is suspended and remove it from async list
                 */
                if (runningVm.getstatus() == VMStatus.Paused) {
                    _vmsToRemoveFromAsync.add(vmToUpdate.getId());
                    if (vmToUpdate.getstatus() != VMStatus.Paused) {
                        // check exit message to determine wht the vm has
                        // paused
                        AuditLogType logType = AuditLogType.UNASSIGNED;
                        AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                        VmPauseStatus pauseStatus = runningVm.getPauseStatus();
                        if (pauseStatus.equals(VmPauseStatus.NOERR) || pauseStatus.equals(VmPauseStatus.NONE)) {
                        // user requested pause, no log needed
                        } else if (pauseStatus == VmPauseStatus.ENOSPC) {
                            logType = AuditLogType.VM_PAUSED_ENOSPC;
                        } else if (pauseStatus == VmPauseStatus.EIO) {
                            logType = AuditLogType.VM_PAUSED_EIO;
                        } else if (pauseStatus == VmPauseStatus.EPERM) {
                            logType = AuditLogType.VM_PAUSED_EPERM;
                        } else {
                            logType = AuditLogType.VM_PAUSED_ERROR;
                        }
                        if (logType != AuditLogType.UNASSIGNED) {
                            auditLog(logable, logType);
                        }
                    }
                }
            }
            if (vmToUpdate != null || runningVm.getstatus() != VMStatus.MigratingFrom) {
                RefObject<VM> tempRefObj = new RefObject<VM>(vmToUpdate);
                boolean updateSucceed = UpdateVmRunTimeInfo(tempRefObj, runningVm);
                vmToUpdate = tempRefObj.argvalue;
                if (updateSucceed) {
                    AddVmDynamicToList(vmToUpdate.getDynamicData());
                }
            }
            if (vmToUpdate != null) {
                UpdateVmStatistics(vmToUpdate);
                if (_vmDict.containsKey(runningVm.getId())) {
                    running.add(_vmDict.get(runningVm.getId()));
                    if (!_vdsManager.getInitialized()) {
                        ResourceManager.getInstance().RemoveVmFromDownVms(_vds.getId(), runningVm.getId());
                    }
                }
            }
        } else {
            if (runningVm.getstatus() == VMStatus.MigratingTo && vmToUpdate != null) {
                running.add(vmToUpdate);
            }
            VmDynamic vmDynamic = getDbFacade().getVmDynamicDAO().get(runningVm.getId());
            if (vmDynamic == null || vmDynamic.getstatus() != VMStatus.Unknown) {
                _vmDynamicToSave.remove(runningVm.getId());
            }
        }
    }
    // compare between vm in cache and vm from vdsm
    removeVmsFromCache(running);
}
#method_after
private void updateRepository(List<VM> running) {
    for (Entry<VmDynamic, VmStatistics> vm_helper : _runningVms.values()) {
        VmDynamic runningVm = vm_helper.getKey();
        VM vmToUpdate = null;
        vmToUpdate = _vmDict.get(runningVm.getId());
        // if not migrating here and not down
        if (!inMigrationTo(runningVm, vmToUpdate) && runningVm.getstatus() != VMStatus.Down) {
            if (vmToUpdate != null) {
                if (_vmDict.containsKey(vmToUpdate.getId()) && !StringHelper.EqOp(runningVm.getclient_ip(), vmToUpdate.getclient_ip())) {
                    _vmsClientIpChanged.put(vmToUpdate, runningVm);
                }
            }
            if (vmToUpdate != null) {
                logVmStatusTransition(vmToUpdate, runningVm);
                // open spice for dedicated VMs
                if (vmToUpdate.getstatus() != VMStatus.Up && runningVm.getstatus() == VMStatus.Up || vmToUpdate.getstatus() != VMStatus.PoweringUp && runningVm.getstatus() == VMStatus.PoweringUp) {
                    // if no current client ip already connected.
                    if (runningVm.getdisplay() != null) {
                        _poweringUpVms.add(runningVm);
                    } else {
                        log.errorFormat("VdsBroker.VdsUpdateRunTimeInfo.updateRepository - runningVm.display is null, cannot start spice for it");
                    }
                }
                // "Up" as this means that the power down operation failed:
                if (vmToUpdate.getstatus() == VMStatus.PoweringDown && runningVm.getstatus() == VMStatus.Up) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_POWER_DOWN_FAILED);
                }
                if (vmToUpdate.getstatus() != VMStatus.Up && vmToUpdate.getstatus() != VMStatus.MigratingFrom && runningVm.getstatus() == VMStatus.Up) {
                    // running handling
                    if (log.isDebugEnabled()) {
                        log.debugFormat("removing VM {0} from successful run VMs list", vmToUpdate.getId());
                    }
                    if (!_succededToRunVms.contains(vmToUpdate.getId())) {
                        _succededToRunVms.add(vmToUpdate.getId());
                    }
                }
                afterMigrationFrom(runningVm, vmToUpdate);
                if (vmToUpdate.getstatus() != VMStatus.NotResponding && runningVm.getstatus() == VMStatus.NotResponding) {
                    AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                    auditLog(logable, AuditLogType.VM_NOT_RESPONDING);
                } else /**
                 * check if vm is suspended and remove it from async list
                 */
                if (runningVm.getstatus() == VMStatus.Paused) {
                    _vmsToRemoveFromAsync.add(vmToUpdate.getId());
                    if (vmToUpdate.getstatus() != VMStatus.Paused) {
                        // check exit message to determine wht the vm has
                        // paused
                        AuditLogType logType = AuditLogType.UNASSIGNED;
                        AuditLogableBase logable = new AuditLogableBase(_vds.getId(), vmToUpdate.getId());
                        VmPauseStatus pauseStatus = runningVm.getPauseStatus();
                        if (pauseStatus.equals(VmPauseStatus.NOERR) || pauseStatus.equals(VmPauseStatus.NONE)) {
                        // user requested pause, no log needed
                        } else if (pauseStatus == VmPauseStatus.ENOSPC) {
                            logType = AuditLogType.VM_PAUSED_ENOSPC;
                        } else if (pauseStatus == VmPauseStatus.EIO) {
                            logType = AuditLogType.VM_PAUSED_EIO;
                        } else if (pauseStatus == VmPauseStatus.EPERM) {
                            logType = AuditLogType.VM_PAUSED_EPERM;
                        } else {
                            logType = AuditLogType.VM_PAUSED_ERROR;
                        }
                        if (logType != AuditLogType.UNASSIGNED) {
                            auditLog(logable, logType);
                        }
                    }
                }
            }
            if (vmToUpdate != null || runningVm.getstatus() != VMStatus.MigratingFrom) {
                RefObject<VM> tempRefObj = new RefObject<VM>(vmToUpdate);
                boolean updateSucceed = UpdateVmRunTimeInfo(tempRefObj, runningVm);
                vmToUpdate = tempRefObj.argvalue;
                if (updateSucceed) {
                    AddVmDynamicToList(vmToUpdate.getDynamicData());
                }
            }
            if (vmToUpdate != null) {
                UpdateVmStatistics(vmToUpdate);
                if (_vmDict.containsKey(runningVm.getId())) {
                    running.add(_vmDict.get(runningVm.getId()));
                    if (!_vdsManager.getInitialized()) {
                        ResourceManager.getInstance().RemoveVmFromDownVms(_vds.getId(), runningVm.getId());
                    }
                }
            }
        } else {
            if (runningVm.getstatus() == VMStatus.MigratingTo && vmToUpdate != null) {
                running.add(vmToUpdate);
            }
            VmDynamic vmDynamic = getDbFacade().getVmDynamicDao().get(runningVm.getId());
            if (vmDynamic == null || vmDynamic.getstatus() != VMStatus.Unknown) {
                _vmDynamicToSave.remove(runningVm.getId());
            }
        }
    }
    // compare between vm in cache and vm from vdsm
    removeVmsFromCache(running);
}
#end_block

#method_before
private boolean inMigrationTo(VmDynamic runningVm, VM vmToUpdate) {
    boolean returnValue = false;
    if (runningVm.getstatus() == VMStatus.MigratingTo) {
        /**
         * inMigration
         */
        log.infoFormat("vds::refreshVmList vm id '{0}' is migrating to vds '{1}' ignoring it in the refresh till migration is done", runningVm.getId(), _vds.getvds_name());
        returnValue = true;
    } else if ((vmToUpdate == null && runningVm.getstatus() != VMStatus.MigratingFrom)) {
        // check if the vm exists on another vds
        VmDynamic vmDynamic = getDbFacade().getVmDynamicDAO().get(runningVm.getId());
        if (vmDynamic != null && vmDynamic.getrun_on_vds() != null && !vmDynamic.getrun_on_vds().equals(_vds.getId()) && runningVm.getstatus() != VMStatus.Up) {
            log.infoFormat("vds::refreshVmList vm id '{0}' status = {1} on vds {2} ignoring it in the refresh till migration is done", runningVm.getId(), runningVm.getstatus(), _vds.getvds_name());
            returnValue = true;
        }
    }
    return returnValue;
}
#method_after
private boolean inMigrationTo(VmDynamic runningVm, VM vmToUpdate) {
    boolean returnValue = false;
    if (runningVm.getstatus() == VMStatus.MigratingTo) {
        /**
         * inMigration
         */
        log.infoFormat("vds::refreshVmList vm id '{0}' is migrating to vds '{1}' ignoring it in the refresh till migration is done", runningVm.getId(), _vds.getvds_name());
        returnValue = true;
    } else if ((vmToUpdate == null && runningVm.getstatus() != VMStatus.MigratingFrom)) {
        // check if the vm exists on another vds
        VmDynamic vmDynamic = getDbFacade().getVmDynamicDao().get(runningVm.getId());
        if (vmDynamic != null && vmDynamic.getrun_on_vds() != null && !vmDynamic.getrun_on_vds().equals(_vds.getId()) && runningVm.getstatus() != VMStatus.Up) {
            log.infoFormat("vds::refreshVmList vm id '{0}' status = {1} on vds {2} ignoring it in the refresh till migration is done", runningVm.getId(), runningVm.getstatus(), _vds.getvds_name());
            returnValue = true;
        }
    }
    return returnValue;
}
#end_block

#method_before
private boolean UpdateVmRunTimeInfo(RefObject<VM> vmToUpdate, VmDynamic vmNewDynamicData) {
    boolean returnValue = false;
    if (vmToUpdate.argvalue == null) {
        vmToUpdate.argvalue = getDbFacade().getVmDAO().get(vmNewDynamicData.getId());
        // if vm exists in db update info
        if (vmToUpdate.argvalue != null) {
            // TODO: This is done to keep consistency with VmDAO.getById(Guid).
            // It should probably be removed, but some research is required.
            vmToUpdate.argvalue.setInterfaces(getDbFacade().getVmNetworkInterfaceDAO().getAllForVm(vmToUpdate.argvalue.getId()));
            _vmDict.put(vmToUpdate.argvalue.getId(), vmToUpdate.argvalue);
            if (vmNewDynamicData.getstatus() == VMStatus.Up) {
                if (!_succededToRunVms.contains(vmToUpdate.argvalue.getId())) {
                    _succededToRunVms.add(vmToUpdate.argvalue.getId());
                }
            }
        }
    }
    if (vmToUpdate.argvalue != null) {
        // check if dynamic data changed - update cache and DB
        List<String> props = ObjectIdentityChecker.GetChangedFields(vmToUpdate.argvalue.getDynamicData(), vmNewDynamicData);
        // dont check fields:
        props.remove("vm_host");
        props.remove("guest_cur_user_name");
        props.remove("run_on_vds");
        props.remove("disks");
        props.remove("boot_sequence");
        props.remove("last_vds_run_on");
        props.remove("hibernation_vol_handle");
        props.remove("exitMessage");
        if (vmNewDynamicData.getstatus() != VMStatus.Up) {
            props.remove("app_list");
            vmNewDynamicData.setapp_list(vmToUpdate.argvalue.getapp_list());
        } else if (props.contains("status") && vmToUpdate.argvalue.getDynamicData().getstatus() == VMStatus.SavingState) {
            vmNewDynamicData.setstatus(VMStatus.SavingState);
            props.remove("status");
        }
        // if anything else changed
        if (props.size() > 0) {
            vmToUpdate.argvalue.updateRunTimeDynamicData(vmNewDynamicData, _vds.getId(), _vds.getvds_name());
            returnValue = true;
        }
    } else {
        // line.
        if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
            log.info("VDS::UpdateVmRunTimeInfo Error: found VM on a VDS that is not in the database!");
        }
    }
    return returnValue;
}
#method_after
private boolean UpdateVmRunTimeInfo(RefObject<VM> vmToUpdate, VmDynamic vmNewDynamicData) {
    boolean returnValue = false;
    if (vmToUpdate.argvalue == null) {
        vmToUpdate.argvalue = getDbFacade().getVmDao().get(vmNewDynamicData.getId());
        // if vm exists in db update info
        if (vmToUpdate.argvalue != null) {
            // TODO: This is done to keep consistency with VmDAO.getById(Guid).
            // It should probably be removed, but some research is required.
            vmToUpdate.argvalue.setInterfaces(getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vmToUpdate.argvalue.getId()));
            _vmDict.put(vmToUpdate.argvalue.getId(), vmToUpdate.argvalue);
            if (vmNewDynamicData.getstatus() == VMStatus.Up) {
                if (!_succededToRunVms.contains(vmToUpdate.argvalue.getId())) {
                    _succededToRunVms.add(vmToUpdate.argvalue.getId());
                }
            }
        }
    }
    if (vmToUpdate.argvalue != null) {
        // check if dynamic data changed - update cache and DB
        List<String> props = ObjectIdentityChecker.GetChangedFields(vmToUpdate.argvalue.getDynamicData(), vmNewDynamicData);
        // dont check fields:
        props.remove("vm_host");
        props.remove("guest_cur_user_name");
        props.remove("run_on_vds");
        props.remove("disks");
        props.remove("boot_sequence");
        props.remove("last_vds_run_on");
        props.remove("hibernation_vol_handle");
        props.remove("exitMessage");
        if (vmNewDynamicData.getstatus() != VMStatus.Up) {
            props.remove("app_list");
            vmNewDynamicData.setapp_list(vmToUpdate.argvalue.getapp_list());
        } else if (props.contains("status") && vmToUpdate.argvalue.getDynamicData().getstatus() == VMStatus.SavingState) {
            vmNewDynamicData.setstatus(VMStatus.SavingState);
            props.remove("status");
        }
        // if anything else changed
        if (props.size() > 0) {
            vmToUpdate.argvalue.updateRunTimeDynamicData(vmNewDynamicData, _vds.getId(), _vds.getvds_name());
            returnValue = true;
        }
    } else {
        // line.
        if (Config.<Boolean>GetValue(ConfigValues.DebugTimerLogging)) {
            log.info("VDS::UpdateVmRunTimeInfo Error: found VM on a VDS that is not in the database!");
        }
    }
    return returnValue;
}
#end_block

#method_before
private void UpdateInterfaceStatistics(VM vm, VmStatistics statistics) {
    if (statistics.getInterfaceStatistics() == null) {
        return;
    }
    if (vm.getInterfaces() == null || vm.getInterfaces().isEmpty()) {
        vm.setInterfaces(getDbFacade().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()));
    }
    List<String> macs = new ArrayList<String>();
    vm.setusage_network_percent(0);
    for (VmNetworkInterface ifStats : statistics.getInterfaceStatistics()) {
        boolean firstTime = !macs.contains(ifStats.getMacAddress());
        VmNetworkInterface vmIface = null;
        for (VmNetworkInterface tempIf : vm.getInterfaces()) {
            if (tempIf.getMacAddress().equals(ifStats.getMacAddress())) {
                vmIface = tempIf;
                break;
            }
        }
        if (vmIface == null) {
            continue;
        }
        // if rtl+pv it will get here 2 times (we take the max one)
        if (firstTime) {
            vmIface.getStatistics().setReceiveRate(ifStats.getStatistics().getReceiveRate());
            vmIface.getStatistics().setReceiveDropRate(ifStats.getStatistics().getReceiveDropRate());
            vmIface.getStatistics().setTransmitRate(ifStats.getStatistics().getTransmitRate());
            vmIface.getStatistics().setTransmitDropRate(ifStats.getStatistics().getTransmitDropRate());
        } else {
            vmIface.getStatistics().setReceiveRate(Math.max(vmIface.getStatistics().getReceiveRate(), ifStats.getStatistics().getReceiveRate()));
            vmIface.getStatistics().setReceiveDropRate(Math.max(vmIface.getStatistics().getReceiveDropRate(), ifStats.getStatistics().getReceiveDropRate()));
            vmIface.getStatistics().setTransmitRate(Math.max(vmIface.getStatistics().getTransmitRate(), ifStats.getStatistics().getTransmitRate()));
            vmIface.getStatistics().setTransmitDropRate(Math.max(vmIface.getStatistics().getTransmitDropRate(), ifStats.getStatistics().getTransmitDropRate()));
        }
        vmIface.setVmId(vm.getId());
        if (ifStats.getSpeed() != null && vmIface.getStatistics().getReceiveRate() != null && vmIface.getStatistics().getReceiveRate() > 0) {
            double rx_percent = vmIface.getStatistics().getReceiveRate();
            double tx_percent = vmIface.getStatistics().getTransmitRate();
            vm.setusage_network_percent(Math.max(vm.getusage_network_percent(), (int) Math.max(rx_percent, tx_percent)));
        }
        if (firstTime) {
            macs.add(ifStats.getMacAddress());
        }
    }
    vm.setusage_network_percent((vm.getusage_network_percent() > 100) ? 100 : vm.getusage_network_percent());
    AddVmInterfaceStatisticsToList(vm.getInterfaces());
}
#method_after
private void UpdateInterfaceStatistics(VM vm, VmStatistics statistics) {
    if (statistics.getInterfaceStatistics() == null) {
        return;
    }
    if (vm.getInterfaces() == null || vm.getInterfaces().isEmpty()) {
        vm.setInterfaces(getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()));
    }
    List<String> macs = new ArrayList<String>();
    vm.setusage_network_percent(0);
    for (VmNetworkInterface ifStats : statistics.getInterfaceStatistics()) {
        boolean firstTime = !macs.contains(ifStats.getMacAddress());
        VmNetworkInterface vmIface = null;
        for (VmNetworkInterface tempIf : vm.getInterfaces()) {
            if (tempIf.getMacAddress().equals(ifStats.getMacAddress())) {
                vmIface = tempIf;
                break;
            }
        }
        if (vmIface == null) {
            continue;
        }
        // if rtl+pv it will get here 2 times (we take the max one)
        if (firstTime) {
            vmIface.getStatistics().setReceiveRate(ifStats.getStatistics().getReceiveRate());
            vmIface.getStatistics().setReceiveDropRate(ifStats.getStatistics().getReceiveDropRate());
            vmIface.getStatistics().setTransmitRate(ifStats.getStatistics().getTransmitRate());
            vmIface.getStatistics().setTransmitDropRate(ifStats.getStatistics().getTransmitDropRate());
        } else {
            vmIface.getStatistics().setReceiveRate(Math.max(vmIface.getStatistics().getReceiveRate(), ifStats.getStatistics().getReceiveRate()));
            vmIface.getStatistics().setReceiveDropRate(Math.max(vmIface.getStatistics().getReceiveDropRate(), ifStats.getStatistics().getReceiveDropRate()));
            vmIface.getStatistics().setTransmitRate(Math.max(vmIface.getStatistics().getTransmitRate(), ifStats.getStatistics().getTransmitRate()));
            vmIface.getStatistics().setTransmitDropRate(Math.max(vmIface.getStatistics().getTransmitDropRate(), ifStats.getStatistics().getTransmitDropRate()));
        }
        vmIface.setVmId(vm.getId());
        if (ifStats.getSpeed() != null && vmIface.getStatistics().getReceiveRate() != null && vmIface.getStatistics().getReceiveRate() > 0) {
            double rx_percent = vmIface.getStatistics().getReceiveRate();
            double tx_percent = vmIface.getStatistics().getTransmitRate();
            vm.setusage_network_percent(Math.max(vm.getusage_network_percent(), (int) Math.max(rx_percent, tx_percent)));
        }
        if (firstTime) {
            macs.add(ifStats.getMacAddress());
        }
    }
    vm.setusage_network_percent((vm.getusage_network_percent() > 100) ? 100 : vm.getusage_network_percent());
    AddVmInterfaceStatisticsToList(vm.getInterfaces());
}
#end_block

#method_before
public static <T> ArrayList<T> Intersection(ArrayList<ArrayList<T>> lists) {
    ArrayList<T> result = new ArrayList<T>();
    if (lists != null) {
        for (ArrayList<T> list : lists) {
            result.retainAll(list);
        }
    }
    return result;
}
#method_after
public static <T> ArrayList<T> Intersection(ArrayList<ArrayList<T>> lists) {
    ArrayList<T> result = new ArrayList<T>();
    if (lists != null && !lists.isEmpty()) {
        result.addAll(lists.get(0));
        for (ArrayList<T> list : lists) {
            result.retainAll(list);
        }
    }
    return result;
}
#end_block

#method_before
private void _openSession(String server, long hardTimeout, long softTimeout) throws Exception {
    log.debug(String.format("_openSession enter (%1$s, %2$d, %3$d)", server, hardTimeout, softTimeout));
    try {
        if (this.client != null) {
            log.debug("_openSession already has client");
        } else {
            this.client = new SSHClient();
            this.client.setHardTimeout(hardTimeout);
            this.client.setSoftTimeout(softTimeout);
            // port until API supports port
            this.client.setHost(server, this.port);
            log.debug("connecting");
            this.client.connect();
        }
    } catch (Exception e) {
        log.debug(String.format("Could not connect to server %1$s: %2$s", this.client.getDisplayHost(), e.getMessage()), e);
        throw e;
    }
    log.debug("_openSession return");
}
#method_after
private void _openSession(String server, long hardTimeout, long softTimeout) throws Exception {
    log.debug(String.format("_openSession enter (%1$s, %2$d, %3$d)", server, hardTimeout, softTimeout));
    try {
        if (this.client != null) {
            log.debug("_openSession already has client");
        } else {
            this.client = new SSHClient();
            this.client.setHardTimeout(hardTimeout);
            this.client.setSoftTimeout(softTimeout);
            // port until API supports port
            this.client.setHost(server, this.port);
            log.debug("connecting");
            this.client.connect();
        }
    } catch (Exception e) {
        log.debug(String.format("Could not connect to server %1$s", this.client.getDisplayHost()), e);
        throw e;
    }
    log.debug("_openSession return");
}
#end_block

#method_before
private MapSqlParameterSource getInsertOrUpdateParams(final VdsStatic vds) {
    return getCustomMapSqlParameterSource().addValue("host_name", vds.gethost_name()).addValue("ip", vds.getManagmentIp()).addValue("vds_unique_id", vds.getUniqueID()).addValue("port", vds.getport()).addValue("vds_group_id", vds.getvds_group_id()).addValue("vds_id", vds.getId()).addValue("vds_name", vds.getvds_name()).addValue("server_SSL_enabled", vds.getserver_SSL_enabled()).addValue("vds_type", vds.getvds_type()).addValue("vds_strength", vds.getvds_strength()).addValue("pm_type", vds.getpm_type()).addValue("pm_user", vds.getpm_user()).addValue("pm_password", encryptPassword(vds.getpm_password())).addValue("pm_port", vds.getpm_port()).addValue("pm_options", vds.getpm_options()).addValue("pm_enabled", vds.getpm_enabled()).addValue("otp_validity", vds.getOtpValidity()).addValue("vds_spm_priority", vds.getVdsSpmPriority()).addValue("fingerprint", vds.getFingerprint());
}
#method_after
private MapSqlParameterSource getInsertOrUpdateParams(final VdsStatic vds) {
    return getCustomMapSqlParameterSource().addValue("host_name", vds.gethost_name()).addValue("ip", vds.getManagmentIp()).addValue("vds_unique_id", vds.getUniqueID()).addValue("port", vds.getport()).addValue("vds_group_id", vds.getvds_group_id()).addValue("vds_id", vds.getId()).addValue("vds_name", vds.getvds_name()).addValue("server_SSL_enabled", vds.getserver_SSL_enabled()).addValue("vds_type", vds.getvds_type()).addValue("vds_strength", vds.getvds_strength()).addValue("pm_type", vds.getpm_type()).addValue("pm_user", vds.getpm_user()).addValue("pm_password", encryptPassword(vds.getpm_password())).addValue("pm_port", vds.getpm_port()).addValue("pm_options", vds.getpm_options()).addValue("pm_enabled", vds.getpm_enabled()).addValue("otp_validity", vds.getOtpValidity()).addValue("vds_spm_priority", vds.getVdsSpmPriority()).addValue("sshKeyFingerprint", vds.getSSHKeyFingerprint());
}
#end_block

#method_before
public static String encryptPassword(String password) {
    if (StringUtils.isEmpty(password)) {
        return password;
    }
    String keyFile = Config.resolveKeyStorePath();
    String passwd = Config.<String>GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion);
    String alias = Config.<String>GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion);
    try {
        return EncryptionUtils.encrypt((String) password, keyFile, passwd, alias);
    } catch (Exception e) {
        throw new SecurityException(e);
    }
}
#method_after
public static String encryptPassword(String password) {
    if (StringUtils.isEmpty(password)) {
        return password;
    }
    String keyFile = Config.resolveKeyStorePath();
    String passwd = Config.<String>GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion);
    String alias = Config.<String>GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion);
    try {
        return EncryptionUtils.encrypt(password, keyFile, passwd, alias);
    } catch (Exception e) {
        throw new SecurityException(e);
    }
}
#end_block

#method_before
public static String decryptPassword(String password) {
    if (StringUtils.isEmpty(password)) {
        return password;
    }
    String keyFile = Config.resolveKeyStorePath();
    String passwd = Config.<String>GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion);
    String alias = Config.<String>GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion);
    try {
        return EncryptionUtils.decrypt((String) password, keyFile, passwd, alias);
    } catch (Exception e) {
        log.debugFormat("Failed to decrypt password, error message: {0}", e.getMessage());
        return password;
    }
}
#method_after
public static String decryptPassword(String password) {
    if (StringUtils.isEmpty(password)) {
        return password;
    }
    String keyFile = Config.resolveKeyStorePath();
    String passwd = Config.<String>GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion);
    String alias = Config.<String>GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion);
    try {
        return EncryptionUtils.decrypt(password, keyFile, passwd, alias);
    } catch (Exception e) {
        log.debugFormat("Failed to decrypt password, error message: {0}", e.getMessage());
        return password;
    }
}
#end_block

#method_before
@Override
public VdsStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    VdsStatic entity = new VdsStatic();
    entity.sethost_name(rs.getString("host_name"));
    entity.setManagmentIp(rs.getString("ip"));
    entity.setUniqueID(rs.getString("vds_unique_id"));
    entity.setport(rs.getInt("port"));
    entity.setvds_group_id(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setId(Guid.createGuidFromString(rs.getString("vds_id")));
    entity.setvds_name(rs.getString("vds_name"));
    entity.setserver_SSL_enabled(rs.getBoolean("server_SSL_enabled"));
    entity.setvds_type(VDSType.forValue(rs.getInt("vds_type")));
    entity.setvds_strength(rs.getInt("vds_strength"));
    entity.setpm_type(rs.getString("pm_type"));
    entity.setpm_user(rs.getString("pm_user"));
    entity.setpm_password(decryptPassword(rs.getString("pm_password")));
    entity.setpm_port((Integer) rs.getObject("pm_port"));
    entity.setpm_options(rs.getString("pm_options"));
    entity.setpm_enabled(rs.getBoolean("pm_enabled"));
    entity.setOtpValidity(rs.getLong("otp_validity"));
    entity.setFingerprint(rs.getString("fingerprint"));
    return entity;
}
#method_after
@Override
public VdsStatic mapRow(ResultSet rs, int rowNum) throws SQLException {
    VdsStatic entity = new VdsStatic();
    entity.sethost_name(rs.getString("host_name"));
    entity.setManagmentIp(rs.getString("ip"));
    entity.setUniqueID(rs.getString("vds_unique_id"));
    entity.setport(rs.getInt("port"));
    entity.setvds_group_id(Guid.createGuidFromString(rs.getString("vds_group_id")));
    entity.setId(Guid.createGuidFromString(rs.getString("vds_id")));
    entity.setvds_name(rs.getString("vds_name"));
    entity.setserver_SSL_enabled(rs.getBoolean("server_SSL_enabled"));
    entity.setvds_type(VDSType.forValue(rs.getInt("vds_type")));
    entity.setvds_strength(rs.getInt("vds_strength"));
    entity.setpm_type(rs.getString("pm_type"));
    entity.setpm_user(rs.getString("pm_user"));
    entity.setpm_password(decryptPassword(rs.getString("pm_password")));
    entity.setpm_port((Integer) rs.getObject("pm_port"));
    entity.setpm_options(rs.getString("pm_options"));
    entity.setpm_enabled(rs.getBoolean("pm_enabled"));
    entity.setOtpValidity(rs.getLong("otp_validity"));
    entity.setSSHKeyFingerprint(rs.getString("sshKeyFingerprint"));
    return entity;
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    VdsStatic other = (VdsStatic) obj;
    if (hostname == null) {
        if (other.hostname != null)
            return false;
    } else if (!hostname.equals(other.hostname))
        return false;
    if (id == null) {
        if (other.id != null)
            return false;
    } else if (!id.equals(other.id))
        return false;
    if (ip == null) {
        if (other.ip != null)
            return false;
    } else if (!ip.equals(other.ip))
        return false;
    if (name == null) {
        if (other.name != null)
            return false;
    } else if (!name.equals(other.name))
        return false;
    if (otpValidity != other.otpValidity)
        return false;
    if (pmEnabled != other.pmEnabled)
        return false;
    if (pmOptions == null) {
        if (other.pmOptions != null)
            return false;
    } else if (!pmOptions.equals(other.pmOptions))
        return false;
    if (pmOptionsMap == null) {
        if (other.pmOptionsMap != null)
            return false;
    } else if (!pmOptionsMap.equals(other.pmOptionsMap))
        return false;
    if (pmPassword == null) {
        if (other.pmPassword != null)
            return false;
    } else if (!pmPassword.equals(other.pmPassword))
        return false;
    if (pmPort == null) {
        if (other.pmPort != null)
            return false;
    } else if (!pmPort.equals(other.pmPort))
        return false;
    if (pmType == null) {
        if (other.pmType != null)
            return false;
    } else if (!pmType.equals(other.pmType))
        return false;
    if (pmUser == null) {
        if (other.pmUser != null)
            return false;
    } else if (!pmUser.equals(other.pmUser))
        return false;
    if (port != other.port)
        return false;
    if (serverSslEnabled == null) {
        if (other.serverSslEnabled != null)
            return false;
    } else if (!serverSslEnabled.equals(other.serverSslEnabled))
        return false;
    if (uniqueId == null) {
        if (other.uniqueId != null)
            return false;
    } else if (!uniqueId.equals(other.uniqueId))
        return false;
    if (vdsGroupId == null) {
        if (other.vdsGroupId != null)
            return false;
    } else if (!vdsGroupId.equals(other.vdsGroupId))
        return false;
    if (vdsStrength == null) {
        if (other.vdsStrength != null)
            return false;
    } else if (!vdsStrength.equals(other.vdsStrength))
        return false;
    if (vdsType != other.vdsType)
        return false;
    if (fingerprint == null) {
        if (other.fingerprint != null)
            return false;
    } else if (!fingerprint.equals(other.fingerprint))
        return false;
    return true;
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    VdsStatic other = (VdsStatic) obj;
    if (hostname == null) {
        if (other.hostname != null)
            return false;
    } else if (!hostname.equals(other.hostname))
        return false;
    if (id == null) {
        if (other.id != null)
            return false;
    } else if (!id.equals(other.id))
        return false;
    if (ip == null) {
        if (other.ip != null)
            return false;
    } else if (!ip.equals(other.ip))
        return false;
    if (name == null) {
        if (other.name != null)
            return false;
    } else if (!name.equals(other.name))
        return false;
    if (otpValidity != other.otpValidity)
        return false;
    if (pmEnabled != other.pmEnabled)
        return false;
    if (pmOptions == null) {
        if (other.pmOptions != null)
            return false;
    } else if (!pmOptions.equals(other.pmOptions))
        return false;
    if (pmOptionsMap == null) {
        if (other.pmOptionsMap != null)
            return false;
    } else if (!pmOptionsMap.equals(other.pmOptionsMap))
        return false;
    if (pmPassword == null) {
        if (other.pmPassword != null)
            return false;
    } else if (!pmPassword.equals(other.pmPassword))
        return false;
    if (pmPort == null) {
        if (other.pmPort != null)
            return false;
    } else if (!pmPort.equals(other.pmPort))
        return false;
    if (pmType == null) {
        if (other.pmType != null)
            return false;
    } else if (!pmType.equals(other.pmType))
        return false;
    if (pmUser == null) {
        if (other.pmUser != null)
            return false;
    } else if (!pmUser.equals(other.pmUser))
        return false;
    if (port != other.port)
        return false;
    if (serverSslEnabled == null) {
        if (other.serverSslEnabled != null)
            return false;
    } else if (!serverSslEnabled.equals(other.serverSslEnabled))
        return false;
    if (uniqueId == null) {
        if (other.uniqueId != null)
            return false;
    } else if (!uniqueId.equals(other.uniqueId))
        return false;
    if (vdsGroupId == null) {
        if (other.vdsGroupId != null)
            return false;
    } else if (!vdsGroupId.equals(other.vdsGroupId))
        return false;
    if (vdsStrength == null) {
        if (other.vdsStrength != null)
            return false;
    } else if (!vdsStrength.equals(other.vdsStrength))
        return false;
    if (vdsType != other.vdsType)
        return false;
    if (sshKeyFingerprint == null) {
        if (other.sshKeyFingerprint != null)
            return false;
    } else if (!sshKeyFingerprint.equals(other.sshKeyFingerprint))
        return false;
    return true;
}
#end_block

#method_before
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = prepareDAO(dbFacade.getVdsStaticDAO());
    dynamicDao = prepareDAO(dbFacade.getVdsDynamicDAO());
    statisticsDao = prepareDAO(dbFacade.getVdsStatisticsDAO());
    existingVds = dao.get(EXISTING_VDS_ID);
    newStaticVds = new VdsStatic();
    newStaticVds.sethost_name("farkle.redhat.com");
    newStaticVds.setvds_group_id(existingVds.getvds_group_id());
    newStaticVds.setFingerprint("b5:ad:16:19:06:9f:b3:41:69:eb:1c:42:1d:12:b5:31");
}
#method_after
@Override
public void setUp() throws Exception {
    super.setUp();
    dao = prepareDAO(dbFacade.getVdsStaticDAO());
    dynamicDao = prepareDAO(dbFacade.getVdsDynamicDAO());
    statisticsDao = prepareDAO(dbFacade.getVdsStatisticsDAO());
    existingVds = dao.get(EXISTING_VDS_ID);
    newStaticVds = new VdsStatic();
    newStaticVds.sethost_name("farkle.redhat.com");
    newStaticVds.setvds_group_id(existingVds.getvds_group_id());
    newStaticVds.setSSHKeyFingerprint("b5:ad:16:19:06:9f:b3:41:69:eb:1c:42:1d:12:b5:31");
}
#end_block

#method_before
@Override
@Before
public void setUp() throws Exception {
    super.setUp();
    dao = prepareDAO(dbFacade.getAsyncTaskDAO());
    params = new VdcActionParametersBase();
    params.setSessionId("ASESSIONID");
    params.setTransactionScopeOption(TransactionScopeOption.RequiresNew);
    // create some test data
    newAsyncTask = new async_tasks();
    newAsyncTask.settask_id(Guid.NewGuid());
    newAsyncTask.setaction_type(VdcActionType.AddDisk);
    newAsyncTask.setstatus(AsyncTaskStatusEnum.running);
    newAsyncTask.setresult(AsyncTaskResultEnum.success);
    newAsyncTask.setaction_parameters(params);
    newAsyncTask.setCommandId(Guid.NewGuid());
    existingAsyncTask = dao.get(FixturesTool.EXISTING_TASK);
}
#method_after
@Override
@Before
public void setUp() throws Exception {
    super.setUp();
    dao = prepareDAO(dbFacade.getAsyncTaskDAO());
    params = new VdcActionParametersBase();
    params.setSessionId("ASESSIONID");
    params.setTransactionScopeOption(TransactionScopeOption.RequiresNew);
    // create some test data
    newAsyncTask = new async_tasks();
    newAsyncTask.settask_id(Guid.NewGuid());
    newAsyncTask.setaction_type(VdcActionType.AddDisk);
    newAsyncTask.setstatus(AsyncTaskStatusEnum.running);
    newAsyncTask.setresult(AsyncTaskResultEnum.success);
    newAsyncTask.setaction_parameters(params);
    newAsyncTask.setCommandId(Guid.NewGuid());
    existingAsyncTask = dao.get(FixturesTool.EXISTING_TASK_ID);
}
#end_block

#method_before
public static void DoCompressionCheck(VDS vds, VmDynamic vm) {
    if (Config.<Boolean>GetValue(ConfigValues.PowerClientSpiceDynamicCompressionManagement)) {
        // compression always enabled on VDS
        if (vds.getvds_type() != VDSType.PowerClient) {
            return;
        } else {
            String compression_enabled = "on";
            if (StringHelper.EqOp(vds.gethost_name(), vm.getclient_ip())) {
                compression_enabled = "off";
            }
            log.infoFormat("VdcBLL.VmHandler.DoCompressionCheck - sending monitor command for vmid: {0} - set_red_image_compression and set_red_streaming_video to {1}", vm.getId(), compression_enabled);
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmMonitorCommand, new VmMonitorCommandVDSCommandParameters(vds.getId(), vm.getId(), "set_red_image_compression " + compression_enabled));
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmMonitorCommand, new VmMonitorCommandVDSCommandParameters(vds.getId(), vm.getId(), "set_red_streaming_video " + compression_enabled));
        }
    }
}
#method_after
public static void DoCompressionCheck(VDS vds, VmDynamic vm) {
    if (Config.<Boolean>GetValue(ConfigValues.PowerClientSpiceDynamicCompressionManagement)) {
        // compression always enabled on VDS
        if (vds.getvds_type() != VDSType.PowerClient) {
            return;
        } else {
            String compression_enabled = "on";
            if (StringUtils.equals(vds.gethost_name(), vm.getclient_ip())) {
                compression_enabled = "off";
            }
            log.infoFormat("VdcBLL.VmHandler.DoCompressionCheck - sending monitor command for vmid: {0} - set_red_image_compression and set_red_streaming_video to {1}", vm.getId(), compression_enabled);
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmMonitorCommand, new VmMonitorCommandVDSCommandParameters(vds.getId(), vm.getId(), "set_red_image_compression " + compression_enabled));
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.VmMonitorCommand, new VmMonitorCommandVDSCommandParameters(vds.getId(), vm.getId(), "set_red_streaming_video " + compression_enabled));
        }
    }
}
#end_block

#method_before
@Override
public void RunningSucceded() {
    DecreasePendingVms(getCurrentVdsId());
    setSucceeded(true);
    setActionReturnValue(VMStatus.Up);
    log();
    ExecutionHandler.setAsyncJob(getExecutionContext(), false);
    ExecutionHandler.endJob(getExecutionContext(), true);
    for (Guid vdsId : getRunVdssList()) {
        if (!getCurrentVdsId().equals(vdsId)) {
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.FailedToRunVm, new FailedToRunVmVDSCommandParameters(vdsId));
        }
    }
    if (getVm().getlast_vds_run_on() == null || !getVm().getlast_vds_run_on().equals(getCurrentVdsId())) {
        getVm().setlast_vds_run_on(getCurrentVdsId());
    }
    if (!StringHelper.isNullOrEmpty(getVm().gethibernation_vol_handle())) {
        HandleHibernatedVm(getActionType(), true);
        // In order to prevent a race where VdsUpdateRuntimeInfo saves the Vm Dynamic as UP prior to execution of
        // this method (which is a part of the cached VM command,
        // so the state this method is aware to is RESTORING, in case of RunVmCommand after the VM got suspended.
        // In addition, as the boolean return value of HandleHIbernateVm is ignored here, it is safe to set the
        // status to up.
        getVm().setstatus(VMStatus.Up);
        getVm().sethibernation_vol_handle(null);
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new UpdateVmDynamicDataVDSCommandParameters(getCurrentVdsId(), getVm().getDynamicData()));
    }
}
#method_after
@Override
public void RunningSucceded() {
    DecreasePendingVms(getCurrentVdsId());
    setSucceeded(true);
    setActionReturnValue(VMStatus.Up);
    log();
    ExecutionHandler.setAsyncJob(getExecutionContext(), false);
    ExecutionHandler.endJob(getExecutionContext(), true);
    for (Guid vdsId : getRunVdssList()) {
        if (!getCurrentVdsId().equals(vdsId)) {
            Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.FailedToRunVm, new FailedToRunVmVDSCommandParameters(vdsId));
        }
    }
    if (getVm().getlast_vds_run_on() == null || !getVm().getlast_vds_run_on().equals(getCurrentVdsId())) {
        getVm().setlast_vds_run_on(getCurrentVdsId());
    }
    if (StringUtils.isNotEmpty(getVm().gethibernation_vol_handle())) {
        HandleHibernatedVm(getActionType(), true);
        // In order to prevent a race where VdsUpdateRuntimeInfo saves the Vm Dynamic as UP prior to execution of
        // this method (which is a part of the cached VM command,
        // so the state this method is aware to is RESTORING, in case of RunVmCommand after the VM got suspended.
        // In addition, as the boolean return value of HandleHIbernateVm is ignored here, it is safe to set the
        // status to up.
        getVm().setstatus(VMStatus.Up);
        getVm().sethibernation_vol_handle(null);
        Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new UpdateVmDynamicDataVDSCommandParameters(getCurrentVdsId(), getVm().getDynamicData()));
    }
}
#end_block

#method_before
protected boolean connectLunDisks(Guid hostId) {
    if (getVm().getDiskMap().isEmpty()) {
        VmHandler.updateDisksFromDb(getVm());
    }
    List<LunDisk> lunDisks = ImagesHandler.filterDiskBasedOnLuns(getVm().getDiskMap().values());
    for (LunDisk lunDisk : lunDisks) {
        LUNs lun = lunDisk.getLun();
        lun.setLunConnections(new ArrayList<storage_server_connections>(DbFacade.getInstance().getStorageServerConnectionDAO().getAllForLun(lun.getLUN_id())));
        if (!lun.getLunConnections().isEmpty()) {
            if (!StorageHelperDirector.getInstance().getItem(lun.getLunConnections().get(0).getstorage_type()).ConnectStorageToLunByVdsId(null, hostId, lun, getVm().getstorage_pool_id())) {
                log.infoFormat("Failed to connect  a lun disk to vdsm {0} skiping it", hostId);
                return false;
            }
        }
    }
    return true;
}
#method_after
protected boolean connectLunDisks(Guid hostId) {
    if (getVm().getDiskMap().isEmpty()) {
        VmHandler.updateDisksFromDb(getVm());
    }
    List<LunDisk> lunDisks = ImagesHandler.filterDiskBasedOnLuns(getVm().getDiskMap().values());
    for (LunDisk lunDisk : lunDisks) {
        LUNs lun = lunDisk.getLun();
        lun.setLunConnections(new ArrayList<storage_server_connections>(DbFacade.getInstance().getStorageServerConnectionDAO().getAllForLun(lun.getLUN_id())));
        if (!lun.getLunConnections().isEmpty() && !StorageHelperDirector.getInstance().getItem(lun.getLunConnections().get(0).getstorage_type()).ConnectStorageToLunByVdsId(null, hostId, lun, getVm().getstorage_pool_id())) {
            log.infoFormat("Failed to connect  a lun disk to vdsm {0} skiping it", hostId);
            return false;
        }
    }
    return true;
}
#end_block

#method_before
@Override
protected boolean ConcreteCheckExistingStorageDomain(Pair<storage_domain_static, SANState> domainFromIrs) {
    boolean returnValue = false;
    if (!StringUtils.isEmpty(getStorageDomain().getStorageStaticData().getstorage()) && !StringUtils.isEmpty(domainFromIrs.getFirst().getstorage())) {
        returnValue = (StringUtils.equals(domainFromIrs.getFirst().getstorage(), getStorageDomain().getStorageStaticData().getstorage()));
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ADD_EXISTING_STORAGE_DOMAIN_CONNECTION_DATA_ILLEGAL);
    } else if (domainFromIrs.getSecond() != null && SANState.OK != domainFromIrs.getSecond()) {
        returnValue = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_ADD_EXISTING_STORAGE_DOMAIN_LUNS_PROBLEM.toString());
    }
    return returnValue;
}
#method_after
@Override
protected boolean ConcreteCheckExistingStorageDomain(Pair<storage_domain_static, SANState> domainFromIrs) {
    boolean returnValue = false;
    if (StringUtils.isNotEmpty(getStorageDomain().getStorageStaticData().getstorage()) && StringUtils.isNotEmpty(domainFromIrs.getFirst().getstorage())) {
        returnValue = (StringUtils.equals(domainFromIrs.getFirst().getstorage(), getStorageDomain().getStorageStaticData().getstorage()));
    }
    if (!returnValue) {
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ADD_EXISTING_STORAGE_DOMAIN_CONNECTION_DATA_ILLEGAL);
    } else if (domainFromIrs.getSecond() != null && SANState.OK != domainFromIrs.getSecond()) {
        returnValue = false;
        getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ERROR_CANNOT_ADD_EXISTING_STORAGE_DOMAIN_LUNS_PROBLEM.toString());
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    if (isActivateDeactivateAllowedForVmStatus(getVm().getstatus())) {
        // Hot activation in the host needs to be called only if the Vm is UP
        if (VmHandler.isHotPlugNicAllowedForVmStatus(getVm().getstatus())) {
            setVdsId(getVm().getrun_on_vds().getValue());
            returnValue = canPerformHotPlug();
            if (returnValue && !networkAttachedToVds(getNetworkName(), getVdsId())) {
                addCanDoActionMessage(VdcBllMessages.ACTIVATE_DEACTIVATE_NETWORK_NOT_IN_VDS);
                returnValue = false;
            }
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.ACTIVATE_DEACTIVATE_NIC_VM_STATUS_ILLEGAL);
        returnValue = false;
    }
    if (returnValue) {
        vmDevice = getVmDeviceDao().get(new VmDeviceId(getParameters().getNicId(), getParameters().getVmId()));
        if (vmDevice == null) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.VM_INTERFACE_NOT_EXIST);
        }
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = true;
    if (isActivateDeactivateAllowedForVmStatus(getVm().getstatus())) {
        // HotPlug in the host needs to be called only if the Vm is UP
        if (VmHandler.isHotPlugNicAllowedForVmStatus(getVm().getstatus())) {
            setVdsId(getVm().getrun_on_vds().getValue());
            returnValue = canPerformHotPlug();
            if (returnValue && !networkAttachedToVds(getNetworkName(), getVdsId())) {
                addCanDoActionMessage(VdcBllMessages.ACTIVATE_DEACTIVATE_NETWORK_NOT_IN_VDS);
                returnValue = false;
            }
        }
    } else {
        addCanDoActionMessage(VdcBllMessages.ACTIVATE_DEACTIVATE_NIC_VM_STATUS_ILLEGAL);
        returnValue = false;
    }
    if (returnValue) {
        vmDevice = getVmDeviceDao().get(new VmDeviceId(getParameters().getNicId(), getParameters().getVmId()));
        if (vmDevice == null) {
            returnValue = false;
            addCanDoActionMessage(VdcBllMessages.VM_INTERFACE_NOT_EXIST);
        }
    }
    return returnValue;
}
#end_block

#method_before
protected boolean isAllowClusterWithVirtGluster() {
    Boolean allowVirGluster = Config.<Boolean>GetValue(ConfigValues.AllowClusterWithVirtGlusterEnabled);
    if (allowVirGluster == null) {
        allowVirGluster = Boolean.TRUE;
    }
    return allowVirGluster;
}
#method_after
protected boolean isAllowClusterWithVirtGluster() {
    Boolean allowVirGluster = Config.<Boolean>GetValue(ConfigValues.AllowClusterWithVirtGlusterEnabled);
    return allowVirGluster;
}
#end_block

#method_before
@Test
public void vdsGroupWithVirtGlusterServicesNotAllowed() {
    createCommandWithVirtGlusterEnabled();
    when(vdsGroupDAO.get(any(Guid.class))).thenReturn(createVdsGroupWithNoCpuName());
    when(vdsGroupDAO.getByName(anyString())).thenReturn(createVdsGroupWithNoCpuName());
    when(cmd.isAllowClusterWithVirtGluster()).thenReturn(false);
    cpuExists();
    allQueriesEmpty();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED);
}
#method_after
@Test
public void vdsGroupWithVirtGlusterServicesNotAllowed() {
    createCommandWithVirtGlusterEnabled();
    when(vdsGroupDAO.get(any(Guid.class))).thenReturn(createVdsGroupWithNoCpuName());
    when(vdsGroupDAO.getByName(anyString())).thenReturn(createVdsGroupWithNoCpuName());
    mcr.mockConfigValue(ConfigValues.AllowClusterWithVirtGlusterEnabled, Boolean.FALSE);
    cpuExists();
    allQueriesEmpty();
    canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_ENABLING_BOTH_VIRT_AND_GLUSTER_SERVICES_NOT_ALLOWED);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    boolean returnValue = super.canDoAction() && CheckStorageDomain() && checkStorageDomainStatus(StorageDomainStatus.Active) && CheckStorageDomainNameLengthValid();
    storage_domain_static oldDomain = DbFacade.getInstance().getStorageDomainStaticDAO().get(getStorageDomain().getId());
    // storage domain which is about to be updated.
    if (returnValue) {
        getStorageDomain().setLastTimeUsedAsMaster(oldDomain.getLastTimeUsedAsMaster());
    }
    // Collect changed fields to update in a list.
    List<String> props = ObjectIdentityChecker.GetChangedFields(oldDomain, getStorageDomain().getStorageStaticData());
    // Allow change only to name field
    props.remove("storage_name");
    if (returnValue && props.size() > 0) {
        log.errorFormat("There was an attempt to update the following fields although they are not allowed to be updated: {0}", StringUtils.join(props, ","));
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS);
        returnValue = false;
    }
    _storageDomainNameChanged = !StringHelper.EqOp(oldDomain.getstorage_name(), getStorageDomain().getstorage_name());
    // order to change description in spm
    if (returnValue && _storageDomainNameChanged && getStoragePool() != null && !((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(getStoragePool().getId())).getReturnValue()).booleanValue()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        returnValue = false;
    }
    if (returnValue && _storageDomainNameChanged && IsStorageWithSameNameExists()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
        returnValue = false;
    }
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE);
    boolean returnValue = super.canDoAction() && CheckStorageDomain() && checkStorageDomainStatus(StorageDomainStatus.Active) && CheckStorageDomainNameLengthValid();
    storage_domain_static oldDomain = DbFacade.getInstance().getStorageDomainStaticDAO().get(getStorageDomain().getId());
    // storage domain which is about to be updated.
    if (returnValue) {
        getStorageDomain().setLastTimeUsedAsMaster(oldDomain.getLastTimeUsedAsMaster());
    }
    // Collect changed fields to update in a list.
    List<String> props = ObjectIdentityChecker.GetChangedFields(oldDomain, getStorageDomain().getStorageStaticData());
    // Allow change only to name field
    props.remove("storage_name");
    if (returnValue && props.size() > 0) {
        log.warnFormat("There was an attempt to update the following fields although they are not allowed to be updated: {0}", StringUtils.join(props, ","));
        addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS);
        returnValue = false;
    }
    _storageDomainNameChanged = !StringHelper.EqOp(oldDomain.getstorage_name(), getStorageDomain().getstorage_name());
    // order to change description in spm
    if (returnValue && _storageDomainNameChanged && getStoragePool() != null && !((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsValid, new IrsBaseVDSCommandParameters(getStoragePool().getId())).getReturnValue()).booleanValue()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND);
        returnValue = false;
    }
    if (returnValue && _storageDomainNameChanged && IsStorageWithSameNameExists()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NAME_ALREADY_EXIST);
        returnValue = false;
    }
    return returnValue;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue = true;
    if (disk == null) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk && ((DiskImage) disk).getimageStatus() == ImageStatus.ILLEGAL) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
        return false;
    }
    retValue = retValue && acquireLockInternal() && isVmExist() && isVmUpOrDown() && isDiskCanBeAddedToVm(disk) && isDiskPassPCIAndIDELimit(disk);
    if (retValue && getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (retValue && disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getstorage_pool_id()).getcompatibility_version().getValue())) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (retValue && !disk.isShareable() && disk.getNumberOfVms() > 0) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHARABLE_DISK_ALREADY_ATTACHED);
    }
    if (retValue && isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getstorage_ids().get(0), getVm().getstorage_pool_id())) == null) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (retValue && isImageDisk) {
        retValue = validate(new SnapshotsValidator().vmNotDuringSnapshot(getVm().getId()));
    }
    if (retValue && getParameters().isPlugUnPlug() && getVm().getstatus() != VMStatus.Down) {
        retValue = isOSSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue = true;
    if (disk == null) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_DOES_NOT_EXIST);
    }
    boolean isImageDisk = disk.getDiskStorageType() == DiskStorageType.IMAGE;
    if (isImageDisk && ((DiskImage) disk).getimageStatus() == ImageStatus.ILLEGAL) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_DISK_OPERATION);
        return false;
    }
    retValue = retValue && acquireLockInternal() && isVmExist() && isVmUpOrDown() && isDiskCanBeAddedToVm(disk) && isDiskPassPCIAndIDELimit(disk);
    if (retValue && getVmDeviceDao().exists(new VmDeviceId(disk.getId(), getVmId()))) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_ALREADY_ATTACHED);
    }
    if (retValue && disk.isShareable() && !isVersionSupportedForShareable(disk, getStoragePoolDAO().get(getVm().getstorage_pool_id()).getcompatibility_version().getValue())) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL);
    }
    if (retValue && !disk.isShareable() && disk.getNumberOfVms() > 0) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_SHAREABLE_DISK_ALREADY_ATTACHED);
    }
    if (retValue && isImageDisk && getStoragePoolIsoMapDao().get(new StoragePoolIsoMapId(((DiskImage) disk).getstorage_ids().get(0), getVm().getstorage_pool_id())) == null) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH);
    }
    if (retValue && isImageDisk) {
        retValue = validate(new SnapshotsValidator().vmNotDuringSnapshot(getVm().getId()));
    }
    if (retValue && getParameters().isPlugUnPlug() && getVm().getstatus() != VMStatus.Down) {
        retValue = isOSSupportingHotPlug() && isHotPlugSupported() && isInterfaceSupportedForPlugUnPlug(disk);
    }
    return retValue;
}
#end_block

#method_before
@Override
protected void executeCommand() {
    InitializeStorageDomain();
    // save storage if got from parameters in order to save first empty
    // storage in db and use it later
    String storage = ((getStorageDomain().getstorage()) != null) ? getStorageDomain().getstorage() : "";
    // set domain storage to empty because not nullable in db and for shared
    // status to be locked
    getStorageDomain().setstorage("");
    AddStorageDomainInDb();
    getStorageDomain().setstorage(storage);
    if (StringUtils.isEmpty(getStorageDomain().getstorage())) {
        getStorageDomain().setstorage(CreateVG());
    }
    if (!StringUtils.isEmpty(getStorageDomain().getstorage()) && (AddStorageDomainInIrs())) {
        DbFacade.getInstance().getStorageDomainStaticDAO().update(getStorageDomain().getStorageStaticData());
        UpdateStorageDomainDynamicFromIrs();
        ProceedVGLunsInDb();
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    InitializeStorageDomain();
    // save storage if got from parameters in order to save first empty
    // storage in db and use it later
    String storage = ((getStorageDomain().getstorage()) != null) ? getStorageDomain().getstorage() : "";
    // set domain storage to empty because not nullable in db and for shared
    // status to be locked
    getStorageDomain().setstorage("");
    AddStorageDomainInDb();
    getStorageDomain().setstorage(storage);
    if (StringUtils.isEmpty(getStorageDomain().getstorage())) {
        getStorageDomain().setstorage(CreateVG());
    }
    if (StringUtils.isNotEmpty(getStorageDomain().getstorage()) && (AddStorageDomainInIrs())) {
        DbFacade.getInstance().getStorageDomainStaticDAO().update(getStorageDomain().getStorageStaticData());
        UpdateStorageDomainDynamicFromIrs();
        ProceedVGLunsInDb();
        setSucceeded(true);
    }
}
#end_block

#method_before
protected void performLiveSnapshot(Guid createdSnapshotId) {
    try {
        TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                List<Disk> pluggedDisks = new VmRunHandler().getPluggedDisks(getVm(), DbFacade.getInstance().getDiskDao().getAllForVm(getVm().getId()));
                runVdsCommand(VDSCommandType.Snapshot, new SnapshotVDSCommandParameters(getVm().getrun_on_vds().getValue(), getVm().getId(), ImagesHandler.filterImageDisks(pluggedDisks, false, true)));
                return null;
            }
        });
    } catch (VdcBLLException e) {
        if (e.getErrorCode() == VdcBllErrors.SNAPSHOT_FAILED) {
            getParameters().setTaskGroupSuccess(false);
            log.errorFormat("Wasn't able to live snpashot due to error: {0}, rolling back.", ExceptionUtils.getMessage(e));
            revertToActiveSnapshot(createdSnapshotId);
        } else {
            throw e;
        }
    }
}
#method_after
protected void performLiveSnapshot(Guid createdSnapshotId) {
    try {
        TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new TransactionMethod<Void>() {

            @Override
            public Void runInTransaction() {
                List<Disk> pluggedDisks = VmRunHandler.getInstance().getPluggedDisks(getVm());
                runVdsCommand(VDSCommandType.Snapshot, new SnapshotVDSCommandParameters(getVm().getrun_on_vds().getValue(), getVm().getId(), ImagesHandler.filterImageDisks(pluggedDisks, false, true)));
                return null;
            }
        });
    } catch (VdcBLLException e) {
        if (e.getErrorCode() == VdcBllErrors.SNAPSHOT_FAILED) {
            getParameters().setTaskGroupSuccess(false);
            log.errorFormat("Wasn't able to live snpashot due to error: {0}, rolling back.", ExceptionUtils.getMessage(e));
            revertToActiveSnapshot(createdSnapshotId);
        } else {
            throw e;
        }
    }
}
#end_block

#method_before
private void handleRemovedDevices(Guid vmId, HashSet<Guid> processedDevices, List<VmDevice> devices) {
    for (VmDevice device : devices) {
        if (!processedDevices.contains(device.getDeviceId())) {
            if (device.getIsManaged()) {
                if (!device.getIsPlugged()) {
                    log.errorFormat("VM {0} managed non pluggable device was removed unexpetedly from libvirt: {1}", vmId, device.toString());
                } else {
                    device.setAddress("");
                    addVmDeviceToList(device);
                    log.debugFormat("VM {0} managed pluggable device was unplugged : {1}", vmId, device.toString());
                }
            } else {
                removedDeviceIds.add(device.getId());
                log.debugFormat("VM {0} unmanaged device was marked for remove : {1}", vmId, device.toString());
            }
        }
    }
}
#method_after
private void handleRemovedDevices(Guid vmId, HashSet<Guid> processedDevices, List<VmDevice> devices) {
    for (VmDevice device : devices) {
        if (!processedDevices.contains(device.getDeviceId())) {
            if (device.getIsManaged()) {
                if (!device.getIsPlugged()) {
                    log.errorFormat("VM {0} managed non pluggable device was removed unexpectedly from libvirt: {1}", vmId, device.toString());
                } else {
                    device.setAddress("");
                    addVmDeviceToList(device);
                    log.debugFormat("VM {0} managed pluggable device was unplugged : {1}", vmId, device.toString());
                }
            } else {
                removedDeviceIds.add(device.getId());
                log.debugFormat("VM {0} unmanaged device was marked for remove : {1}", vmId, device.toString());
            }
        }
    }
}
#end_block

#method_before
@Override
public String getQuotaName() {
    return quota.getQuotaName();
}
#method_after
public String getQuotaName() {
    return quota.getQuotaName();
}
#end_block

#method_before
public static int GetRoundedPriority(int priority, int maxPriority) {
    int medium = maxPriority / 2;
    int[] levels = new int[] { 1, medium, maxPriority };
    for (int i = 0; i < levels.length; i++) {
        int lengthToLess = levels[i] - priority;
        int lengthToMore = levels[i + 1] - priority;
        if (lengthToMore < 0) {
            continue;
        }
        return Math.abs(lengthToLess) < lengthToMore ? levels[i] : levels[i + 1];
    }
    return 0;
// aQuery.asyncCallback.OnSuccess(aQuery.getModel(), aQuery.converterCallback.Convert(priority,aQuery));
}
#method_after
public static int GetRoundedPriority(int priority, int maxPriority) {
    int medium = maxPriority / 2;
    int[] levels = new int[] { 1, medium, maxPriority };
    for (int i = 0; i < levels.length; i++) {
        int lengthToLess = levels[i] - priority;
        int lengthToMore = levels[i + 1] - priority;
        if (lengthToMore < 0) {
            continue;
        }
        return Math.abs(lengthToLess) < lengthToMore ? levels[i] : levels[i + 1];
    }
    return 0;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    VmStatic vm = getVm().getStaticData();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    switch(DbFacade.getInstance().getVmDynamicDAO().get(getParameters().getVmId()).getstatus()) {
        case Up:
        case Down:
        case ImageLocked:
            break;
        default:
            addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_ADD_INTERFACE_WHEN_VM_STATUS_NOT_UP_DOWN_LOCKED);
            return false;
    }
    List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getParameters().getVmId());
    if (!VmHandler.IsNotDuplicateInterfaceName(interfaces, getParameters().getInterface().getName(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getInterface().getVmTemplateId() != null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_TEMPLATE_CANNOT_BE_SET);
        return false;
    }
    // check that not exceeded PCI and IDE limit
    List<VmNetworkInterface> allInterfaces = new ArrayList<VmNetworkInterface>(interfaces);
    allInterfaces.add(getParameters().getInterface());
    List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getParameters().getVmId());
    if (!CheckPCIAndIDELimit(vm.getnum_of_monitors(), allInterfaces, allDisks, getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check that the number of interfaces does not exceed limit. Necessary
    // only for version 2.2.
    boolean limitNumOfNics = Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVm().getvds_group_compatibility_version().toString());
    if (limitNumOfNics) {
        boolean numOfNicsLegal = validateNumberOfNics(interfaces, getParameters().getInterface());
        if (!numOfNicsLegal) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            return false;
        }
    }
    // check that the exists in current cluster
    List<Network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(vm.getvds_group_id());
    Network interfaceNetwork = LinqUtils.firstOrNull(networks, new Predicate<Network>() {

        @Override
        public boolean eval(Network network) {
            return network.getname().equals(getParameters().getInterface().getNetworkName());
        }
    });
    if (interfaceNetwork == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER);
        return false;
    } else if (!interfaceNetwork.isVmNetwork()) {
        AddCustomValue("networks", interfaceNetwork.getname());
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK);
        addCanDoActionMessage(String.format("$networks %1$s", interfaceNetwork.getname()));
        return false;
    }
    if (getParameters().getInterface().isActive()) {
        if (getVm().getstatus() == VMStatus.Up && !canPerformHotPlug()) {
            return false;
        }
    }
    // this must be the last check because it adds the mac address to the pool
    if (!StringUtils.isEmpty(getMacAddress())) {
        Regex re = new Regex(ValidationUtils.INVALID_NULLABLE_MAC_ADDRESS);
        if (re.IsMatch(getMacAddress())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INVALID_MAC_ADDRESS);
            return false;
        }
        Boolean allowDupMacs = Config.<Boolean>GetValue(ConfigValues.AllowDuplicateMacAddresses);
        if (!MacPoolManager.getInstance().AddMac(getMacAddress()) && !allowDupMacs) {
            // Free the mac address since canDoAction failed
            MacPoolManager.getInstance().freeMac(getMacAddress());
            addCanDoActionMessage(VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE);
            return false;
        }
    } else if (// check
    MacPoolManager.getInstance().getavailableMacsCount() <= 0) // if
    // we
    // have
    // mac
    // address
    // in
    // pool
    {
        addCanDoActionMessage(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES);
        return false;
    }
    return super.canDoAction();
}
#method_after
@Override
protected boolean canDoAction() {
    VmStatic vm = getVm().getStaticData();
    if (vm == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST);
        return false;
    }
    switch(DbFacade.getInstance().getVmDynamicDAO().get(getParameters().getVmId()).getstatus()) {
        case Up:
        case Down:
        case ImageLocked:
            break;
        default:
            addCanDoActionMessage(VdcBllMessages.NETWORK_CANNOT_ADD_INTERFACE_WHEN_VM_STATUS_NOT_UP_DOWN_LOCKED);
            return false;
    }
    List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getParameters().getVmId());
    if (!VmHandler.IsNotDuplicateInterfaceName(interfaces, getParameters().getInterface().getName(), getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    if (getParameters().getInterface().getVmTemplateId() != null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_TEMPLATE_CANNOT_BE_SET);
        return false;
    }
    // check that not exceeded PCI and IDE limit
    List<VmNetworkInterface> allInterfaces = new ArrayList<VmNetworkInterface>(interfaces);
    allInterfaces.add(getParameters().getInterface());
    List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getParameters().getVmId());
    if (!CheckPCIAndIDELimit(vm.getnum_of_monitors(), allInterfaces, allDisks, getReturnValue().getCanDoActionMessages())) {
        return false;
    }
    // check that the number of interfaces does not exceed limit. Necessary
    // only for version 2.2.
    boolean limitNumOfNics = Config.<Boolean>GetValue(ConfigValues.LimitNumberOfNetworkInterfaces, getVm().getvds_group_compatibility_version().toString());
    if (limitNumOfNics) {
        boolean numOfNicsLegal = validateNumberOfNics(interfaces, getParameters().getInterface());
        if (!numOfNicsLegal) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INTERFACE_EXITED_MAX_INTERFACES);
            return false;
        }
    }
    // check that the exists in current cluster
    List<Network> networks = DbFacade.getInstance().getNetworkDAO().getAllForCluster(vm.getvds_group_id());
    Network interfaceNetwork = LinqUtils.firstOrNull(networks, new Predicate<Network>() {

        @Override
        public boolean eval(Network network) {
            return network.getname().equals(getParameters().getInterface().getNetworkName());
        }
    });
    if (interfaceNetwork == null) {
        addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CURRENT_CLUSTER);
        return false;
    } else if (!interfaceNetwork.isVmNetwork()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_VM_NETWORK);
        addCanDoActionMessage(String.format("$networks %1$s", interfaceNetwork.getname()));
        return false;
    }
    if (getParameters().getInterface().isActive()) {
        if (getVm().getstatus() == VMStatus.Up && !canPerformHotPlug()) {
            return false;
        }
    }
    // this must be the last check because it adds the mac address to the pool
    if (!StringUtils.isEmpty(getMacAddress())) {
        Regex re = new Regex(ValidationUtils.INVALID_NULLABLE_MAC_ADDRESS);
        if (re.IsMatch(getMacAddress())) {
            addCanDoActionMessage(VdcBllMessages.NETWORK_INVALID_MAC_ADDRESS);
            return false;
        }
        Boolean allowDupMacs = Config.<Boolean>GetValue(ConfigValues.AllowDuplicateMacAddresses);
        if (!MacPoolManager.getInstance().AddMac(getMacAddress()) && !allowDupMacs) {
            // Free the mac address since canDoAction failed
            MacPoolManager.getInstance().freeMac(getMacAddress());
            addCanDoActionMessage(VdcBllMessages.NETWORK_MAC_ADDRESS_IN_USE);
            return false;
        }
    } else if (// check
    MacPoolManager.getInstance().getavailableMacsCount() <= 0) // if
    // we
    // have
    // mac
    // address
    // in
    // pool
    {
        addCanDoActionMessage(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES);
        return false;
    }
    return super.canDoAction();
}
#end_block

