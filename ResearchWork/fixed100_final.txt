public TYPE_1 METHOD_1 ( TYPE_2 db , Change c ) throws OrmException , TYPE_3 { return METHOD_1 ( db , c . getProject ( ) , c . getId ( ) ) ; }
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) ; listener ( ) . to ( VAR_2 class ) ; bind ( VAR_4 class ) ; bind ( VAR_5 class ) ; listener ( ) . to ( VAR_5 class ) ; factory ( VAR_6 . Factory class ) ; }
private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > schema , TYPE_4 cfg , TYPE_5 VAR_1 ) throws IOException { if ( TYPE_6 . METHOD_2 ( cfg ) ) { return new TYPE_11 ( ) ; } TYPE_7 VAR_2 = TYPE_9 . METHOD_3 ( VAR_1 , VAR_3 + STRING_1 , schema ) ; return TYPE_10 . METHOD_4 ( VAR_2 ) ; }
private void METHOD_1 ( ) throws IOException { RevCommit VAR_1 = rp . METHOD_2 ( ) . parseCommit ( VAR_2 ) ; psId = TYPE_1 . METHOD_3 ( VAR_3 , notes . getChange ( ) . currentPatchSetId ( ) ) ; info = VAR_4 . get ( rp . METHOD_2 ( ) , VAR_1 , psId ) ; cmd = new ReceiveCommand ( ObjectId . METHOD_4 ( ) , VAR_2 , psId . METHOD_5 ( ) ) ; }
public < TYPE_1 > List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > factory ) { List < TYPE_1 > VAR_1 = new ArrayList < > ( ) ; for ( TYPE_4 VAR_2 : VAR_3 ) { for ( TYPE_5 < ? > VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_1 . add ( factory . METHOD_4 ( VAR_4 ) ) ; } } return VAR_1 ; }
public TYPE_1 < ? > METHOD_1 ( final int id ) { TYPE_1 < ? > result = null ; for ( final TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t = e . METHOD_1 ( id ) ; if ( t != null ) { if ( result != null ) { return null ; } result = t ; } } return result ; }
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( METHOD_3 ( ) && ! METHOD_4 ( ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 <= 0 ) { return VAR_7 ; } return VAR_8 ; }
public boolean METHOD_1 ( boolean VAR_1 ) { if ( VAR_2 . METHOD_1 ( VAR_1 ) ) { if ( VAR_3 instanceof TYPE_1 ) { if ( VAR_4 . METHOD_2 ( false , true ) ) { ( ( TYPE_1 ) VAR_3 ) . METHOD_1 ( ) ; } else if ( VAR_3 instanceof TYPE_2 ) { ( ( TYPE_2 ) VAR_3 ) . METHOD_3 ( ) ; } } VAR_5 . METHOD_4 ( this ) ; VAR_5 . METHOD_5 ( ) ; return true ; } return false ; }
private TYPE_1 METHOD_1 ( ChangeData cd , boolean VAR_1 ) throws OrmException { if ( ! VAR_1 ) { return cd . METHOD_5 ( ) . getProject ( ) . METHOD_6 ( ) ; } TYPE_2 VAR_2 = cd . METHOD_2 ( ) ; if ( ! VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( STRING_1 + cd . getId ( ) + STRING_2 + VAR_3 ) ; } return VAR_2 . type ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , IOException , OrmException , TYPE_5 { Change change = new Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) ) ; }
public TYPE_1 METHOD_1 ( String VAR_1 ) { switch ( type ) { case VAR_2 : this . VAR_3 = VAR_1 != null ? TYPE_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) : null ; return this ; default : throw new TYPE_3 ( String . format ( STRING_1 , type ) ) ; } }
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : throw new TYPE_3 ( String . format ( STRING_1 , type ) ) ; default : this . revision = METHOD_2 ( revision ) ; return this ; } }
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; default : revision = METHOD_2 ( revision , VAR_14 ) ; METHOD_3 ( revision == VAR_14 , STRING_1 , type ) ; break ; } this . VAR_15 = revision ; return this ; }
public static boolean METHOD_1 ( String ref , Account . Id VAR_1 ) { if ( VAR_1 == null ) { return false ; } String VAR_2 = new StringBuilder ( METHOD_2 ( VAR_1 ) ) . append ( CHAR_1 ) . append ( VAR_3 ) . toString ( ) ; return ref . METHOD_3 ( VAR_2 ) ; }
protected void METHOD_1 ( String changeId , int psId ) throws OrmException { TYPE_1 VAR_2 = VAR_3 . create ( METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; PatchSetApproval VAR_4 = VAR_5 . METHOD_5 ( db , VAR_2 , new PatchSet . Id ( VAR_2 . getChangeId ( ) , psId ) ) ; assertThat ( VAR_4 ) . METHOD_6 ( ) ; }
protected void METHOD_1 ( TYPE_1 < ? > VAR_1 , boolean VAR_2 ) throws IOException { METHOD_2 ( VAR_1 , VAR_2 ) ; RevCommit VAR_3 = METHOD_3 ( ) ; assertThat ( VAR_3 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( ) ; assertThat ( VAR_3 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( ) ; }
private String METHOD_1 ( ) throws IOException { try ( Repository repo = VAR_1 . METHOD_2 ( project ) ; TYPE_1 rw = new TYPE_1 ( repo ) ) { ObjectId VAR_2 = repo . METHOD_3 ( STRING_1 ) ; ObjectId VAR_3 = repo . METHOD_3 ( STRING_2 ) ; return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; } }
private String METHOD_1 ( Repository repo , ObjectId VAR_1 , ObjectId VAR_2 ) throws IOException { TYPE_1 out = new TYPE_1 ( ) ; try ( TYPE_2 VAR_3 = new TYPE_2 ( out ) ) { VAR_3 . METHOD_2 ( repo ) ; VAR_3 . format ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return out . toString ( ) ; } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = VAR_1 . METHOD_3 ( ) ? STRING_1 : STRING_2 ; VAR_3 . METHOD_4 ( VAR_2 ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_3 . METHOD_6 ( STRING_3 , METHOD_7 ( VAR_4 ) ) ; } METHOD_8 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; }
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 in ) throws TYPE_4 , Exception { if ( in == null ) { throw new TYPE_4 ( STRING_1 ) ; } if ( ! METHOD_1 ( in ) ) { throw new TYPE_4 ( STRING_2 ) ; } return METHOD_2 ( METHOD_3 ( VAR_2 , VAR_3 , in ) ) ; }
boolean METHOD_1 ( ) { List < String > projects = config . METHOD_2 ( ) ; boolean VAR_1 = ( projects . size ( ) == 1 ) ; if ( VAR_1 ) { String VAR_2 = projects . get ( 0 ) ; if ( TYPE_1 . METHOD_3 ( VAR_2 ) != VAR_3 ) { VAR_1 = false ; } } return VAR_1 ; }
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . put ( STRING_1 , branch . getParentKey ( ) . get ( ) ) ; VAR_2 . put ( STRING_2 , METHOD_2 ( ) ) ; Map < String , String > VAR_3 = new TYPE_1 < > ( ) ; VAR_3 . put ( STRING_3 , branch . METHOD_3 ( ) ) ; VAR_1 . put ( STRING_4 , VAR_3 ) ; }
private void METHOD_1 ( TYPE_1 cfg ) { List < TYPE_2 < TYPE_3 > > a = TYPE_4 . METHOD_2 ( true ) ; METHOD_3 ( METHOD_4 ( cfg , STRING_1 , ( TYPE_2 < TYPE_3 > [ ] ) a . METHOD_5 ( new TYPE_2 [ a . size ( ) ] ) ) ) ; }
protected Project . NameKey METHOD_1 ( String VAR_1 , Project . NameKey VAR_2 , boolean VAR_3 ) throws TYPE_1 { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , null ) ; }
protected TYPE_1 METHOD_1 ( String VAR_1 , TYPE_2 id , String ref ) throws Exception { return METHOD_1 ( VAR_1 , id , ref , project ) ; }
protected TYPE_1 METHOD_1 ( String VAR_1 , TYPE_2 id , String ref , Project . NameKey project ) throws Exception { ProjectConfig cfg = VAR_2 . METHOD_2 ( project ) . METHOD_3 ( ) ; TYPE_1 VAR_3 = Util . METHOD_1 ( cfg , VAR_1 , id , ref ) ; METHOD_4 ( project , cfg ) ; return VAR_3 ; }
public void METHOD_1 ( String VAR_1 ) throws TYPE_1 { try { TYPE_2 input = new TYPE_2 ( ) ; input . name = VAR_1 ; VAR_2 . apply ( account , input ) ; } catch ( IOException | OrmException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } }
public boolean equals ( TYPE_1 VAR_1 ) { if ( super . equals ( VAR_1 ) ) { TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; return TYPE_3 . equals ( VAR_3 , VAR_4 ) && TYPE_3 . equals ( VAR_5 , VAR_6 ) ; } return false ; }
protected void METHOD_1 ( TYPE_1 req , HttpServletResponse res ) throws TYPE_2 , IOException { if ( VAR_1 . get ( ) == null ) { TYPE_3 . METHOD_2 ( res ) ; res . METHOD_3 ( VAR_2 ) ; return ; } VAR_1 . get ( ) . METHOD_4 ( req , res , VAR_3 ) ; }
public List < String > METHOD_1 ( Account account , TYPE_1 < TYPE_2 > VAR_1 ) { List < String > VAR_2 = new ArrayList < > ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; if ( account . METHOD_3 ( ) != null ) { VAR_2 . METHOD_4 ( account . METHOD_3 ( ) ) ; } Collections . METHOD_5 ( VAR_2 ) ; return VAR_2 ; }
private void METHOD_1 ( TYPE_1 p ) { Project . NameKey VAR_1 = METHOD_2 ( VAR_2 , p ) ; if ( METHOD_3 ( VAR_1 ) . equals ( VAR_2 ) ) { if ( METHOD_4 ( VAR_1 ) ) { log . METHOD_5 ( STRING_1 + p . METHOD_6 ( ) ) ; } else { VAR_3 . add ( VAR_1 ) ; } } }
public void start ( ) { if ( timer == null ) { timer = new TYPE_1 ( ) ; } else { timer . METHOD_1 ( ) ; } timer . METHOD_2 ( new TYPE_2 ( ) { public void run ( ) { VAR_1 this . METHOD_3 ( ) ; } } , INT_1 , VAR_2 ) ; }
private List < TYPE_1 > METHOD_1 ( String id , TYPE_2 VAR_1 ) throws OrmException { return VAR_2 . create ( db , TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( id ) ) ) . METHOD_4 ( ) . map ( VAR_3 - > METHOD_5 ( VAR_3 , VAR_1 ) ) . METHOD_6 ( VAR_4 - > VAR_4 . METHOD_7 ( ) ) . map ( VAR_4 - > VAR_4 . get ( ) ) . collect ( METHOD_8 ( ) ) ; }
public static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 config , String VAR_1 , String VAR_2 , String name ) { return TYPE_1 . METHOD_2 ( config . METHOD_3 ( VAR_1 , VAR_2 , name ) ) . map ( TYPE_2 : : METHOD_1 ) ; }
public static void METHOD_1 ( TYPE_1 listener , Exception error ) { if ( log . METHOD_2 ( ) ) { log . METHOD_3 ( String . format ( STRING_1 , listener . METHOD_4 ( ) . getName ( ) , error ) ) ; } else { log . METHOD_5 ( STRING_2 , listener . METHOD_4 ( ) . getName ( ) , error . getMessage ( ) ) ; } }
private void METHOD_1 ( TYPE_1 input ) throws IOException { VAR_1 = new String [ METHOD_2 ( input ) ] ; try ( TYPE_2 in = new TYPE_2 ( input ) ) { for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { VAR_1 [ i ] = METHOD_3 ( in ) ; } } }
private void METHOD_1 ( TYPE_1 input ) throws IOException { VAR_1 = new String [ METHOD_2 ( input ) ] ; try ( TYPE_2 in = new TYPE_2 ( input ) ) { for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { VAR_1 [ i ] = METHOD_3 ( in ) ; } } }
public int METHOD_1 ( TYPE_1 key , TYPE_2 value ) { int size = INT_1 + INT_2 * INT_3 + 2 * INT_4 ; for ( String p : value . METHOD_2 ( ) ) { size += p . length ( ) ; } size += value . METHOD_2 ( ) . size ( ) - 1 ; return size ; }
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 < TYPE_2 > in ) { if ( in == null ) { return TYPE_1 . METHOD_2 ( ) ; } return TYPE_4 . METHOD_3 ( in , r - > r . status == VAR_1 ) ; }
private TYPE_1 < ChangeData > METHOD_1 ( Set < Account . Id > VAR_1 ) { List < TYPE_1 < ChangeData > > p = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( Account . Id id : VAR_1 ) { p . add ( METHOD_1 ( id ) ) ; } return TYPE_1 . METHOD_3 ( p ) ; }
private TYPE_1 < ChangeData > METHOD_1 ( Account . Id VAR_1 ) { return new TYPE_3 ( VAR_1 , VAR_3 ) ; }
public List < ChangeData > METHOD_1 ( String VAR_1 ) throws OrmException { if ( TYPE_1 . METHOD_2 ( VAR_1 ) ) { return Collections . METHOD_4 ( ) ; } return query ( new TYPE_2 ( VAR_1 ) ) ; }
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { TYPE_3 < TYPE_1 > r = VAR_1 . apply ( change , null ) ; return r . METHOD_2 ( ) ? null : r . value ( ) ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } }
public TYPE_1 < PatchSet > METHOD_1 ( ) throws OrmException { TYPE_2 < PatchSet > VAR_1 = ps - > { try { return METHOD_2 ( ) . METHOD_3 ( ps , db ) ; } catch ( OrmException e ) { return false ; } } ; return TYPE_3 . METHOD_4 ( patchSets ( ) ) . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ; }
private void METHOD_1 ( TYPE_1 < String , TYPE_2 > VAR_1 , ChangeData cd ) { cd . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 . get ( VAR_2 ) ) . METHOD_5 ( TYPE_2 : : METHOD_6 ) ) ) ; }
protected TYPE_1 METHOD_1 ( TYPE_1 commit ) throws TYPE_2 { if ( ! VAR_1 . METHOD_2 ( VAR_2 ) ) { return commit ; } try { return VAR_1 . METHOD_3 ( VAR_2 , commit ) ; } catch ( TYPE_3 | IOException e ) { throw new TYPE_2 ( STRING_1 + VAR_2 ) ; } }
private int METHOD_1 ( int line ) { int VAR_1 = INT_1 ; if ( diff . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) { VAR_1 += 1 ; } if ( line <= VAR_1 ) { return 1 ; } return line - VAR_1 ; }
private TYPE_1 METHOD_1 ( final TYPE_2 cm ) { return new TYPE_1 ( ) { public void run ( ) { if ( cm . METHOD_2 ( ) . METHOD_3 ( ) ) { cm . METHOD_2 ( ) . METHOD_4 ( STRING_1 ) ; } else { METHOD_5 ( ) . METHOD_6 ( cm , VAR_1 ) . run ( ) ; } } } ; }
private void METHOD_1 ( TYPE_1 < Project . NameKey > projects ) throws TYPE_2 { for ( Project . NameKey project : projects ) { try { VAR_1 . METHOD_2 ( project ) ; } catch ( TYPE_3 VAR_2 ) { METHOD_3 ( STRING_1 + VAR_2 . project ( ) + STRING_2 + STRING_3 ) ; METHOD_4 ( VAR_2 . project ( ) ) ; } catch ( IOException e ) { throw new TYPE_2 ( STRING_4 + project , e ) ; } } }
protected String METHOD_1 ( String VAR_1 , String VAR_2 , String VAR_3 ) { return STRING_1 + VAR_1 + STRING_2 + STRING_3 + STRING_4 + STRING_2 + VAR_2 + STRING_2 + STRING_1 + VAR_1 + STRING_2 + STRING_5 + STRING_4 + STRING_2 + VAR_3 + STRING_2 + STRING_1 + VAR_1 + STRING_6 ; }
public boolean METHOD_1 ( String VAR_1 , String VAR_2 , String VAR_3 ) { if ( VAR_4 != null && VAR_4 . METHOD_2 ( VAR_3 ) ) { return true ; } if ( VAR_5 != null && VAR_5 . METHOD_2 ( VAR_3 ) ) { Map < String , TYPE_1 > VAR_6 = METHOD_3 ( VAR_1 , VAR_2 ) ; if ( VAR_6 != null ) { boolean VAR_7 = ( boolean ) VAR_6 . METHOD_4 ( STRING_1 , false ) ; return ! VAR_7 ; } return true ; } return false ; }
public Map < String , TYPE_1 > METHOD_1 ( String VAR_1 , String VAR_2 ) { Map < String , TYPE_1 > VAR_3 = METHOD_2 ( ) . get ( VAR_1 ) ; if ( VAR_3 == null ) { return Collections . METHOD_3 ( ) ; } return ( Map < String , TYPE_1 > ) VAR_3 . get ( VAR_2 ) ; }
public void METHOD_1 ( ) throws Exception { Result result = METHOD_2 ( ) ; assertThat ( VAR_1 . changes ( ) . id ( result . getChangeId ( ) ) . METHOD_3 ( ) . VAR_2 ) . isEmpty ( ) ; assertThat ( VAR_1 . changes ( ) . id ( result . getChangeId ( ) ) . METHOD_3 ( ) . VAR_3 ) . isEmpty ( ) ; }
public void METHOD_1 ( ) throws Exception { Result result = METHOD_2 ( ) ; assertThat ( METHOD_3 ( result . METHOD_4 ( ) . getId ( ) ) . VAR_1 ) . isEmpty ( ) ; assertThat ( METHOD_3 ( result . METHOD_4 ( ) . getId ( ) ) . VAR_2 ) . isEmpty ( ) ; }
protected TYPE_1 METHOD_1 ( String name , String VAR_1 , TYPE_2 ... VAR_2 ) throws Exception { TYPE_4 in = new TYPE_4 ( ) ; in . name = name ; VAR_3 = VAR_1 ; VAR_4 = TYPE_5 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) . map ( a - > String . METHOD_4 ( VAR_5 ) ) . collect ( METHOD_5 ( ) ) ; return VAR_6 . METHOD_6 ( ) . create ( in ) . get ( ) ; }
protected TYPE_1 METHOD_1 ( String name , String VAR_1 , TYPE_2 ... VAR_2 ) throws Exception { TYPE_4 in = new TYPE_4 ( ) ; in . name = name ; VAR_3 = VAR_1 ; VAR_4 = TYPE_5 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) . map ( a - > String . METHOD_4 ( VAR_5 ) ) . collect ( METHOD_5 ( ) ) ; return VAR_6 . METHOD_6 ( ) . create ( in ) . get ( ) ; }
protected TYPE_1 METHOD_1 ( String name , TYPE_2 ... VAR_1 ) throws Exception { TYPE_4 in = new TYPE_4 ( ) ; in . name = name ; VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . map ( a - > String . METHOD_4 ( VAR_3 ) ) . collect ( METHOD_5 ( ) ) ; return VAR_4 . METHOD_6 ( ) . create ( in ) . get ( ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( Account . Id VAR_1 ) { try { return VAR_2 . get ( VAR_3 ) . get ( VAR_1 ) ; } catch ( TYPE_4 e ) { log . METHOD_3 ( STRING_1 , e ) ; return Collections . METHOD_4 ( ) ; } }
public void METHOD_1 ( ) throws Exception { String token = auth . METHOD_2 ( STRING_1 , METHOD_3 ( ) , - 1 ) ; assertThat ( auth . METHOD_5 ( token , STRING_1 , METHOD_3 ( ) ) ) . METHOD_6 ( ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result r = METHOD_2 ( ) ; Change . Id id = r . METHOD_3 ( ) . getParentKey ( ) ; METHOD_4 ( user , id , 1 , STRING_1 , null ) ; VAR_1 . METHOD_5 ( id ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result r = METHOD_2 ( ) ; Change . Id id = r . METHOD_3 ( ) . getParentKey ( ) ; METHOD_4 ( user , id , 1 , STRING_1 , null ) ; METHOD_5 ( user , id , 1 , STRING_2 ) ; VAR_1 . METHOD_6 ( id ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result r = METHOD_2 ( ) ; Change . Id id = r . METHOD_3 ( ) . getParentKey ( ) ; METHOD_4 ( user , id , 1 , STRING_1 , null ) ; METHOD_5 ( user , id ) ; VAR_1 . METHOD_6 ( id ) ; }
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) ; listener ( ) . to ( VAR_2 class ) ; bind ( VAR_4 class ) ; listener ( ) . to ( VAR_4 class ) ; factory ( VAR_5 . Factory class ) ; }
public TYPE_1 < ? > apply ( TYPE_2 project , TYPE_3 input ) throws OrmException , TYPE_4 , IOException { if ( input == null || VAR_1 == null || VAR_1 . isEmpty ( ) ) { throw new TYPE_5 ( STRING_1 ) ; } VAR_2 . create ( project ) . refs ( VAR_1 ) . METHOD_2 ( VAR_3 ) . delete ( ) ; return TYPE_1 . METHOD_3 ( ) ; }
private void METHOD_1 ( Project . NameKey projectName ) throws TYPE_1 , TYPE_2 , TYPE_3 { if ( ! VAR_1 . equals ( projectName ) ) { throw new TYPE_1 ( STRING_1 + VAR_1 . get ( ) ) ; } VAR_2 . user ( VAR_3 ) . METHOD_2 ( VAR_4 ) ; }
public void METHOD_1 ( TYPE_1 ctx ) throws IOException { if ( VAR_1 != null ) { VAR_1 . METHOD_1 ( ctx ) ; return ; } ctx . METHOD_2 ( ObjectId . METHOD_3 ( patchSet . getRevision ( ) . get ( ) ) , ObjectId . METHOD_4 ( ) , patchSet . getRefName ( ) ) ; }
private List < TYPE_1 > METHOD_1 ( Change . Id id ) throws Exception { TYPE_2 < TYPE_3 > VAR_1 = VAR_2 . changes ( ) . id ( id . get ( ) ) . get ( TYPE_4 . of ( VAR_3 ) ) . VAR_4 . values ( ) ; return VAR_1 . METHOD_2 ( ) . map ( VAR_5 - > VAR_6 ) . collect ( METHOD_3 ( ) ) ; }
protected boolean equals ( PatchSet p , String id ) { boolean VAR_1 = METHOD_1 ( ) == VAR_2 ; String VAR_3 = p . getRevision ( ) != null ? p . getRevision ( ) . get ( ) : null ; return ( VAR_1 && id . equals ( VAR_3 ) ) || ( ! VAR_1 && VAR_3 != null && VAR_3 . METHOD_2 ( id ) ) ; }
public short METHOD_1 ( TYPE_1 label , short VAR_1 ) throws TYPE_2 { short s = METHOD_2 ( METHOD_3 ( label ) , VAR_1 ) ; if ( s == 0 ) { return 0 ; } try { METHOD_4 ( new TYPE_3 ( label , s ) ) ; return s ; } catch ( TYPE_4 e ) { return 0 ; } }
private static < TYPE_1 extends TYPE_2 > void METHOD_1 ( List < TYPE_1 > VAR_1 ) { TYPE_3 < TYPE_1 > VAR_2 = VAR_1 . METHOD_2 ( ) ; while ( VAR_2 . METHOD_3 ( ) ) { TYPE_1 VAR_3 = VAR_2 . next ( ) ; if ( VAR_3 == null ) { VAR_2 . METHOD_4 ( ) ; continue ; } VAR_3 . message = TYPE_4 . METHOD_5 ( VAR_3 . message ) . METHOD_6 ( ) ; if ( VAR_4 . isEmpty ( ) ) { VAR_2 . METHOD_4 ( ) ; } } }
private static void METHOD_1 ( String path , Set < String > VAR_1 , PatchSet . Id VAR_2 ) throws TYPE_1 { if ( ! VAR_1 . contains ( path ) && ! TYPE_2 . METHOD_2 ( path ) ) { throw new TYPE_1 ( String . format ( STRING_1 , path , VAR_2 ) ) ; } }
private static < TYPE_1 extends TYPE_2 > void METHOD_1 ( String path , TYPE_1 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( path ) && VAR_2 == VAR_3 && VAR_4 == null ) { throw new TYPE_3 ( String . format ( STRING_1 , path ) ) ; } }
private static void METHOD_1 ( List < TYPE_1 > VAR_1 , String VAR_2 ) throws TYPE_2 { if ( VAR_1 == null ) { return ; } for ( TYPE_1 VAR_3 : VAR_1 ) { METHOD_2 ( VAR_2 , VAR_4 ) ; METHOD_3 ( VAR_2 , VAR_5 ) ; } }
private TYPE_1 METHOD_1 ( Change . Id id ) throws OrmException { METHOD_2 ( STRING_1 , id ) ; Change c = VAR_1 . get ( id ) ; boolean VAR_2 = c != null ; if ( ! VAR_2 ) { c = TYPE_3 . METHOD_3 ( project , id ) ; } else { METHOD_2 ( STRING_2 , id ) ; } TYPE_4 notes = VAR_3 . METHOD_4 ( c , ! VAR_2 ) ; TYPE_5 ctl = VAR_4 . METHOD_5 ( notes , user ) ; return new TYPE_1 ( ctl ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws IOException { TYPE_3 ctx = METHOD_2 ( ) ; Change c = VAR_1 . METHOD_3 ( ctx ) ; METHOD_4 ( ! VAR_2 . METHOD_5 ( c . getId ( ) ) , STRING_1 , c . getId ( ) ) ; VAR_2 . put ( c . getId ( ) , c ) ; VAR_3 . get ( c . getId ( ) ) . add ( 0 , VAR_1 ) ; return this ; }
public Set < TYPE_1 > METHOD_1 ( Account . Id VAR_1 ) throws IOException { try { return VAR_2 . get ( VAR_3 . METHOD_2 ( ) ) . get ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw new IOException ( STRING_1 , e ) ; } }
public Set < TYPE_1 > METHOD_1 ( String email ) throws IOException { try { return VAR_1 . get ( VAR_2 . METHOD_2 ( ) ) . values ( ) . METHOD_3 ( ) . METHOD_4 ( e - > email . equals ( e . email ( ) ) ) . collect ( METHOD_5 ( ) ) ; } catch ( TYPE_2 e ) { throw new IOException ( STRING_1 , e ) ; } }
public Set < TYPE_1 > METHOD_1 ( Account . Id VAR_1 ) throws IOException { try { return VAR_2 . get ( VAR_3 . METHOD_2 ( ) ) . get ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw new IOException ( STRING_1 , e ) ; } }
public Set < TYPE_1 > METHOD_1 ( String email ) throws IOException { try { return VAR_1 . get ( VAR_2 . METHOD_2 ( ) ) . values ( ) . METHOD_3 ( ) . METHOD_4 ( e - > email . equals ( e . email ( ) ) ) . collect ( METHOD_5 ( ) ) ; } catch ( TYPE_2 e ) { throw new IOException ( STRING_1 , e ) ; } }
public boolean METHOD_1 ( TYPE_1 db ) throws OrmException { return ( METHOD_2 ( ) || METHOD_3 ( ) . METHOD_2 ( ) || METHOD_4 ( ) . METHOD_2 ( ) || METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) || METHOD_3 ( ) . METHOD_1 ( ) ) && ! METHOD_8 ( db ) ; }
static TYPE_1 METHOD_1 ( Change change ) { return new TYPE_2 ( null , change.getId ( ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_5 . METHOD_1 ( ) , TYPE_6 . METHOD_1 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) , TYPE_7 . of ( ) , TYPE_7 . of ( ) , null , null ) ; }
private boolean METHOD_1 ( ) { ui . message ( STRING_1 ) ; try { new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) . METHOD_2 ( ) . METHOD_3 ( ) ; ui . message ( STRING_2 ) ; return true ; } catch ( IOException e ) { ui . message ( STRING_3 , e . toString ( ) ) ; return false ; } }
public String METHOD_1 ( final TYPE_1 VAR_1 ) throws IOException { return METHOD_2 ( new TYPE_2 < String > ( ) { public String METHOD_3 ( ) throws Exception { if ( VAR_1 . equals ( VAR_2 ) ) return METHOD_4 ( ) ; return METHOD_5 ( ) ; } } ) ; }
private void METHOD_1 ( final String VAR_1 , final String VAR_2 ) throws IOException , TYPE_2 { log . METHOD_2 ( STRING_1 + VAR_2 + STRING_2 + VAR_1 ) ; boolean VAR_3 = client ( ) . METHOD_3 ( VAR_1 , VAR_2 ) ; if ( VAR_3 ) { log . METHOD_2 ( STRING_3 + VAR_2 + STRING_4 + VAR_1 ) ; } else { log . METHOD_2 ( STRING_5 , VAR_2 , VAR_1 ) ; } }
private < TYPE_1 > TYPE_1 METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 ) throws IOException { int VAR_2 = 0 ; while ( true ) { try { return VAR_1 . METHOD_2 ( ) ; } catch ( Exception VAR_3 ) { if ( METHOD_3 ( VAR_3 ) && ++ VAR_2 < VAR_4 ) { log . METHOD_4 ( STRING_1 , VAR_2 , VAR_4 ) ; continue ; } if ( VAR_3 instanceof IOException ) throw ( ( IOException ) VAR_3 ) ; throw new IOException ( VAR_3 ) ; } } }
private String METHOD_1 ( ) throws IOException { TYPE_2 info = client ( ) . METHOD_2 ( ) ; final String result = STRING_1 + info . METHOD_3 ( ) + STRING_2 + METHOD_4 ( ) + STRING_3 + info . METHOD_5 ( ) + STRING_4 ; log . METHOD_6 ( STRING_5 , result ) ; return result ; }
public static ReceiveCommand METHOD_1 ( TYPE_1 VAR_1 , String name , int VAR_2 ) throws IOException { ObjectId VAR_4 = VAR_1 . insert ( VAR_5 , TYPE_2 . toString ( VAR_2 ) . METHOD_4 ( VAR_6 ) ) ; return new ReceiveCommand ( ObjectId . METHOD_5 ( ) , VAR_4 , VAR_7 + name ) ; }
public void METHOD_1 ( ) throws Exception { METHOD_2 ( config . METHOD_3 ( ) ) . METHOD_4 ( VAR_1 ) ; METHOD_2 ( config . METHOD_5 ( ) ) . METHOD_4 ( VAR_1 ) ; METHOD_2 ( config . METHOD_6 ( ) ) . METHOD_4 ( VAR_2 ) ; METHOD_2 ( config . METHOD_7 ( ) ) . METHOD_4 ( VAR_2 ) ; }
void METHOD_1 ( String token ) { try { VAR_1 . METHOD_1 ( token , changes , null , false ) ; } catch ( TYPE_1 e ) { METHOD_2 ( STRING_1 , e . getMessage ( ) ) ; } catch ( OrmException e ) { throw new TYPE_2 ( STRING_2 , e ) ; } }
public void VAR_1 ( ) throws Exception { VAR_2 ( user ) ; assertThat ( VAR_3 ( ) ) . VAR_4 ( 1 ) ; Map < String , VAR_5 > VAR_6 = VAR_3 ( ) . VAR_7 ( ) . next ( ) . VAR_6 ( ) ; assertThat ( VAR_6 . get ( STRING_1 ) ) . VAR_8 ( VAR_9 . String class ) ; assertThat ( ( ( VAR_5 . String ) VAR_6 . get ( STRING_1 ) ) . VAR_10 ( ) ) . isEqualTo (
public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_1 . owner ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_1 . owner ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_1 . owner ) ; assertThat ( VAR_4 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_1 . owner ) . METHOD_6 ( VAR_5 , VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_7 ( VAR_2 ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . owner ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_1 . owner ) . to ( VAR_6 ) . METHOD_7 ( VAR_7 , VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_1 . changeId , VAR_5 ) ; assertThat ( VAR_6 ) . METHOD_5 ( STRING_1 , VAR_1 ) . METHOD_6 ( VAR_4 ) . to ( VAR_1 . owner ) . to ( VAR_7 ) . METHOD_7 ( VAR_8 ) . METHOD_7 ( VAR_9 ) . METHOD_8 ( VAR_10 ) . METHOD_8 ( VAR_2 ) ; }
private void METHOD_1 ( String changeId , TYPE_1 VAR_1 ) throws Exception { METHOD_1 ( changeId , VAR_1 , null ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result result = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( result . getChangeId ( ) ) . METHOD_3 ( true , null ) ; METHOD_4 ( VAR_2 , VAR_3 , STRING_1 ) ; METHOD_5 ( user ) ; assertThat ( VAR_1 . changes ( ) . id ( result . getChangeId ( ) ) . get ( ) . VAR_4 ) . METHOD_6 ( ) ; }
public void METHOD_1 ( ) throws Exception { METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ; try { TYPE_1 . Result VAR_3 = METHOD_3 ( ) ; String changeId = VAR_3 . getChangeId ( ) ; METHOD_4 ( user ) ; VAR_4 . METHOD_5 ( VAR_5 class ) ; VAR_4 . METHOD_6 ( STRING_2 ) ; VAR_6 . changes ( ) . id ( changeId ) . delete ( ) ; } finally { METHOD_7 ( project , STRING_1 , VAR_1 ) ; } }
private static boolean METHOD_1 ( RevCommit VAR_1 , RevCommit VAR_2 ) { return ObjectId . equals ( VAR_1 . METHOD_3 ( 0 ) , VAR_2 ) || ObjectId . equals ( VAR_2 . METHOD_3 ( 0 ) , VAR_1 ) ; }
public TYPE_1 < ChangeData > METHOD_1 ( String VAR_1 ) throws TYPE_2 , OrmException { return METHOD_1 ( VAR_1 , false ) ; }
protected void VAR_1 ( ) throws Exception { try ( VAR_2 VAR_3 = VAR_4 ( ) . VAR_5 ( ) ) { VAR_6 . create ( VAR_3 ) ; } db = VAR_7 ( ) ; VAR_8 = VAR_9 ( VAR_10 ( STRING_1 ) ) . getAccountId ( ) ; Account VAR_11 = VAR_12 ( ) . get ( VAR_8 ) ; String email =
protected void VAR_1 ( ) throws Exception { try ( VAR_2 VAR_3 = VAR_4 ( ) . VAR_5 ( ) ) { VAR_6 . create ( VAR_3 ) ; } db = VAR_7 ( ) ; VAR_8 = VAR_9 ( VAR_10 ( STRING_1 ) ) . getAccountId ( ) ; Account VAR_11 = VAR_12 ( ) . get ( VAR_8 ) ; String email =
protected String METHOD_1 ( ) { String name = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; name = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( name , CHAR_1 ) ; name = TYPE_1 . is ( CHAR_1 ) . METHOD_8 ( name ) ; return name ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = new TYPE_2 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) + VAR_3 , TYPE_3 . METHOD_6 ( config . METHOD_5 ( STRING_1 , null , STRING_2 ) ) . map ( METHOD_7 ( ) ) . collect ( METHOD_8 ( ) ) , METHOD_9 ( config . METHOD_10 ( STRING_1 , null , STRING_3 ) , STRING_4 ) ) ; } }
public TYPE_1 < Account . Id > METHOD_1 ( String VAR_1 ) throws Exception { TYPE_2 db = VAR_2 . get ( ) ; return TYPE_1 . METHOD_2 ( db . METHOD_3 ( ) . get ( new TYPE_3 . Key ( VAR_3 + STRING_1 + VAR_1 ) ) ) . map ( TYPE_3 : : getAccountId ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result result = METHOD_2 ( ) ; VAR_1 . changes ( ) . id ( result . getChangeId ( ) ) . METHOD_3 ( true , null ) ; METHOD_4 ( VAR_2 , VAR_3 , STRING_1 ) ; METHOD_5 ( user ) ; assertThat ( VAR_1 . changes ( ) . id ( result . getChangeId ( ) ) . get ( ) . VAR_4 ) . METHOD_6 ( ) ; }
private void METHOD_1 ( TYPE_1 ctx , Map < PatchSet . Id , PatchSet > patchSets ) throws OrmException , TYPE_2 , IOException , TYPE_3 { Change c = ctx . getChange ( ) ; if ( METHOD_2 ( ) ) { VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ctx ) ; return ; } if ( c . currentPatchSetId ( ) . equals ( psId ) ) { c . METHOD_4 ( METHOD_5 ( ctx , patchSets ) ) ; } }
private void METHOD_1 ( TYPE_1 commit ) throws TYPE_2 { String VAR_1 = METHOD_2 ( commit , VAR_2 ) ; if ( VAR_1 == null ) { return ; } else if ( TYPE_3 . toString ( ) . METHOD_3 ( VAR_1 ) ) { VAR_3 = true ; return ; } else if ( TYPE_4 . toString ( ) . METHOD_3 ( VAR_1 ) ) { VAR_3 = false ; return ; } throw METHOD_4 ( VAR_2 , VAR_1 ) ; }
protected boolean METHOD_1 ( TYPE_1 VAR_2 , Project . NameKey projectName , String VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( ) ; String cmd = STRING_1 + VAR_3 + STRING_2 + projectName . get ( ) ; try { METHOD_3 ( VAR_2 , cmd , VAR_4 ) ; } catch ( IOException e ) { METHOD_4 ( STRING_3 , VAR_2 , VAR_4 , cmd , e ) ; return false ; } return true ; }
protected boolean METHOD_1 ( TYPE_1 VAR_2 , Project . NameKey projectName , String VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( ) ; String cmd = STRING_1 + projectName . get ( ) + STRING_2 + VAR_3 ; try { METHOD_3 ( VAR_2 , cmd , VAR_4 ) ; } catch ( IOException e ) { log . error ( String . format ( STRING_3 + STRING_4 , VAR_2 , VAR_3 , e , cmd , VAR_4 ) , e ) ; return false ; } return true ; }
private void METHOD_1 ( TYPE_1 VAR_2 ) { String VAR_3 = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; String cmd = STRING_1 + VAR_3 ; TYPE_3 VAR_4 = VAR_5 . METHOD_4 ( ) ; try { VAR_5 . METHOD_5 ( VAR_2 , cmd , VAR_4 ) ; } catch ( IOException e ) { VAR_6 . error ( String . format ( STRING_2 + STRING_3 + STRING_4 + STRING_5 , VAR_2 , e , cmd , VAR_4 ) , e ) ; } }
private void METHOD_1 ( TYPE_1 VAR_2 , Project . NameKey projectName , String VAR_3 ) { if ( METHOD_2 ( VAR_2 ) ) { VAR_4 . METHOD_1 ( VAR_2 , projectName , VAR_3 ) ; } else if ( ! VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( VAR_2 , VAR_3 ) ; } else if ( METHOD_5 ( VAR_2 ) ) { METHOD_6 ( VAR_2 , VAR_3 ) ; } else { VAR_5 . METHOD_7 ( String . format ( STRING_1 + STRING_2 + STRING_3 , VAR_2 ) ) ; } }
TYPE_1 METHOD_1 ( String VAR_1 , String content ) throws IOException { TYPE_3 VAR_2 = new TYPE_3 ( METHOD_2 ( ) . METHOD_3 ( ) + VAR_1 ) ; if ( ! TYPE_4 . METHOD_4 ( content ) ) { VAR_2 . METHOD_5 ( STRING_1 , TYPE_5 . toString ( ) ) ; VAR_2 . METHOD_6 ( new TYPE_6 ( content , VAR_3 ) ) ; } return VAR_4 . METHOD_7 ( VAR_2 , new TYPE_7 ( ) ) ; }
void METHOD_1 ( ) throws TYPE_1 { try { TYPE_2 result = METHOD_2 ( ) ; if ( ! result . METHOD_3 ( ) ) { throw new TYPE_1 ( true , STRING_1 + name + STRING_2 + result . getMessage ( ) ) ; } } catch ( IOException e ) { throw new TYPE_1 ( METHOD_4 ( e ) , e . getMessage ( ) , e ) ; } }
protected TYPE_1 METHOD_1 ( String changeId ) throws Exception { List < TYPE_2 > notes = VAR_1 . METHOD_2 ( changeId ) ; assertThat ( notes ) . METHOD_3 ( 1 ) ; return VAR_2 . create ( notes . get ( 0 ) , VAR_4 . get ( ) . METHOD_5 ( ) ) ; }
private ObjectId METHOD_1 ( ) throws TYPE_1 , IOException , OrmException { edit = VAR_1 . METHOD_2 ( notes ) ; if ( edit . METHOD_3 ( ) ) { return edit . get ( ) . METHOD_4 ( ) ; } throw new TYPE_2 ( notes . getChangeId ( ) ) ; }
public TYPE_1 apply ( TYPE_2 rsrc ) throws TYPE_3 , OrmException , IOException { PatchSet ps = VAR_1 . METHOD_1 ( db . get ( ) , rsrc . METHOD_2 ( ) ) ; return VAR_2 . apply ( rsrc . getProject ( ) , ps . getRevision ( ) . get ( ) ) ; }
private ObjectId METHOD_1 ( ) throws TYPE_1 , IOException , OrmException { edit = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; if ( edit . METHOD_5 ( ) ) { return edit . get ( ) . METHOD_6 ( ) ; } throw new TYPE_2 ( change.getId ( ) ) ; }
private TYPE_1 METHOD_1 ( Change VAR_1 ) { TYPE_2 n = new TYPE_2 ( args , VAR_1 ) ; try { n . METHOD_2 ( ) ; } catch ( OrmException e ) { return TYPE_1 . error ( n . getChangeId ( ) , e ) ; } return TYPE_1 . notes ( n ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; if ( METHOD_2 ( ) ) { new TYPE_3 ( VAR_2 , VAR_2 . toString ( ) ) . start ( ) ; } else { VAR_3 . set ( VAR_4 . submit ( VAR_2 ) ) ; } }
public TYPE_1 < ? > METHOD_1 ( int id ) { TYPE_1 < ? > result = null ; for ( TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t = e . METHOD_1 ( id ) ; if ( t != null ) { if ( result != null ) { return null ; } result = t ; } } return result ; }
private void stop ( ) { for ( TYPE_1 p : VAR_1 ) { p . METHOD_1 ( ) ; boolean VAR_2 ; do { try { VAR_2 = p . METHOD_2 ( INT_1 , VAR_3 ) ; } catch ( TYPE_2 VAR_4 ) { VAR_2 = false ; } } while ( ! VAR_2 ) ; } VAR_1 . METHOD_3 ( ) ; }
public TYPE_1 get ( ) { final TYPE_1 VAR_1 ; VAR_1 = VAR_2 . METHOD_1 ( VAR_3 , STRING_1 ) ; final TYPE_2 VAR_4 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( new TYPE_2 ( ) { public TYPE_3 METHOD_4 ( TYPE_4 VAR_5 ) { final TYPE_3 t = VAR_4 . METHOD_4 ( VAR_5 ) ; t . METHOD_5 ( VAR_6 ) ; return t ; } } ) ; return VAR_1 ; }
private void METHOD_1 ( TYPE_1 event ) { synchronized ( VAR_1 ) { if ( ! VAR_2 . METHOD_1 ( event ) ) { VAR_3 = true ; } if ( VAR_4 == null && ! VAR_5 ) { VAR_4 = VAR_6 . submit ( VAR_7 ) ; } } }
private void METHOD_1 ( TYPE_1 message ) { String msg = null ; try { msg = VAR_1 . METHOD_2 ( message ) + STRING_1 ; } catch ( Exception e ) { log . METHOD_3 ( STRING_2 , e ) ; } if ( msg != null ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_4 ( msg ) ; } } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { final TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_1 ( new TYPE_2 ( ) { public TYPE_3 METHOD_3 ( TYPE_4 VAR_3 ) { final TYPE_3 t = VAR_2 . METHOD_3 ( VAR_3 ) ; t . METHOD_4 ( VAR_4 ) ; return t ; } } ) ; }
private void METHOD_1 ( ) { if ( VAR_1 != null ) { VAR_1 . stop ( ) ; } if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( null ) ; } if ( db != null ) { db . close ( ) ; } TYPE_1 . METHOD_3 ( VAR_3 ) ; }
private void METHOD_1 ( ) throws IOException , OrmException { RevCommit VAR_1 = rp . METHOD_2 ( ) . parseCommit ( VAR_2 ) ; psId = TYPE_1 . METHOD_3 ( METHOD_4 ( ) , notes . getChange ( ) . currentPatchSetId ( ) ) ; info = VAR_3 . get ( rp . METHOD_2 ( ) , VAR_1 , psId ) ; cmd = new ReceiveCommand ( ObjectId . METHOD_5 ( ) , VAR_2 , psId . METHOD_6 ( ) ) ; }
private void METHOD_1 ( ) throws IOException , OrmException { RevCommit VAR_1 = rp . METHOD_2 ( ) . parseCommit ( VAR_2 ) ; psId = TYPE_1 . METHOD_3 ( VAR_3 , notes . getChange ( ) . currentPatchSetId ( ) ) ; info = VAR_4 . get ( rp . METHOD_2 ( ) , VAR_1 , psId ) ; cmd = new ReceiveCommand ( ObjectId . METHOD_4 ( ) , VAR_2 , psId . METHOD_5 ( ) ) ; }
public Set < TYPE_1 > METHOD_1 ( Account . Id VAR_1 ) throws IOException { return get ( ) . METHOD_1 ( ) . get ( VAR_1 ) ; }
public TYPE_1 < Account . Id , TYPE_2 > METHOD_1 ( ) throws IOException { return get ( ) . METHOD_3 ( ) ; }
public TYPE_1 < String , TYPE_2 > METHOD_1 ( String ... VAR_1 ) throws IOException { TYPE_3 VAR_2 = get ( ) ; TYPE_4 < String , TYPE_2 > VAR_5 = TYPE_1 . builder ( ) ; for ( String email : VAR_1 ) { VAR_5 . METHOD_3 ( email , VAR_2 . METHOD_4 ( ) . get ( email ) ) ; } return VAR_5 . METHOD_5 ( ) ; }
protected TYPE_1 . Result METHOD_1 ( ) throws Exception { TYPE_1 . Result VAR_1 = METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 . getChange ( ) . change ( ) . getId ( ) ) ; METHOD_4 ( VAR_1 . getChange ( ) . change ( ) . getId ( ) , true ) ; return VAR_1 ; }
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws Exception { TYPE_5 VAR_4 = TYPE_6 . get ( VAR_2 . METHOD_7 ( STRING_2 , null , STRING_3 ) ) ; if ( ! VAR_1 . METHOD_2 ( ) ) { METHOD_8 ( VAR_1 , VAR_2 , VAR_4 ) ; } return start ( VAR_1 , VAR_2 , VAR_4 , null ) ; }
TYPE_1 create ( Project . NameKey name ) throws TYPE_2 , IOException { TYPE_3 ctl = VAR_1 . METHOD_1 ( name , VAR_2 . get ( ) ) ; if ( ctl . getProject ( ) . METHOD_2 ( ) . equals ( VAR_3 ) ) { throw new TYPE_2 ( name ) ; } return new TYPE_1 ( ctl , VAR_4 . METHOD_3 ( name ) , VAR_5 ) ; }
private static void METHOD_1 ( Map < String , TYPE_1 > VAR_1 , String name , String value ) { if ( ! VAR_1 . METHOD_2 ( name ) || VAR_1 . get ( name ) . isEmpty ( ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } }
private static void METHOD_1 ( Map < String , TYPE_1 > VAR_1 , String name , String value ) { if ( ! VAR_1 . METHOD_2 ( name ) || VAR_1 . get ( name ) . isEmpty ( ) ) { VAR_1 . put ( name , new TYPE_1 . String ( value ) ) ; } }
public void METHOD_1 ( ) throws Exception { String VAR_1 = name ( STRING_1 ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( ) . create ( VAR_1 ) . get ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_2 ) ; }
private void commit ( Repository VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws IOException { TYPE_3 VAR_4 = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; try ( TYPE_5 VAR_6 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_2 . commit ( VAR_6 ) ; } try ( TYPE_5 VAR_6 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_3 . commit ( VAR_6 ) ; } try ( TYPE_4 VAR_5 = new TYPE_4 ( VAR_1 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , VAR_5 ) ; } }
private void METHOD_1 ( TYPE_1 VAR_1 ) throws IOException { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; for ( Account . Id VAR_3 : VAR_1 . METHOD_4 ( ) ) { VAR_4 . METHOD_5 ( VAR_3 ) ; } for ( TYPE_2 VAR_5 : VAR_1 . METHOD_6 ( ) ) { VAR_6 . METHOD_7 ( VAR_5 ) ; } }
TYPE_1 create ( Project . NameKey name ) throws TYPE_2 , IOException , TYPE_3 { TYPE_4 VAR_1 = VAR_2 . METHOD_1 ( name ) ; if ( ! VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { throw new TYPE_2 ( name ) ; } return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; }
public boolean equals ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } TYPE_2 a = ( TYPE_2 ) VAR_1 ; return TYPE_3 . equals ( key , a . key ) && TYPE_3 . equals ( VAR_2 , VAR_3 ) && TYPE_3 . equals ( VAR_4 , VAR_5 ) && TYPE_3 . equals ( VAR_6 , VAR_7 ) ; }
public boolean equals ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) { return false ; } TYPE_2 a = ( TYPE_2 ) VAR_1 ; return TYPE_3 . equals ( key , a . key ) && TYPE_3 . equals ( VAR_2 , VAR_3 ) && TYPE_3 . equals ( VAR_4 , VAR_5 ) && TYPE_3 . equals ( VAR_6 , VAR_7 ) ; }
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_1 VAR_5 = user ( VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 ) ; METHOD_5 ( STRING_2 , VAR_5 ) ; METHOD_5 ( STRING_3 , VAR_5 ) ; METHOD_5 ( STRING_4 , VAR_5 ) ; METHOD_3 ( STRING_1 , VAR_5 ) ; METHOD_3 ( STRING_5 , VAR_5 ) ; }
public void METHOD_1 ( ) throws Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; in . label ( STRING_1 , INT_1 ) ; VAR_5 . METHOD_5 ( VAR_6 class ) ; VAR_5 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; }
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_1 VAR_5 = user ( VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 ) ; METHOD_5 ( STRING_2 , VAR_5 ) ; METHOD_5 ( STRING_3 , VAR_5 ) ; METHOD_5 ( STRING_4 , VAR_5 ) ; METHOD_3 ( STRING_1 , VAR_5 ) ; METHOD_3 ( STRING_5 , VAR_5 ) ; }
private boolean METHOD_1 ( ) { try ( Repository git = VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) { TYPE_1 ref = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; if ( ref == null || ref . METHOD_6 ( ) == null ) { return true ; } return ! ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ; } catch ( IOException VAR_3 ) { return true ; } }
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( METHOD_3 ( ) , config . METHOD_4 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; }
private TYPE_1 METHOD_1 ( ChangeData cd ) throws OrmException { TYPE_2 VAR_1 = cd . METHOD_2 ( ) ; return VAR_1 . METHOD_3 ( ) ? VAR_1 . type : null ; }
TYPE_1 METHOD_1 ( Project . NameKey VAR_1 , TYPE_2 user ) throws TYPE_3 , IOException { final TYPE_4 p = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( p == null ) { throw new TYPE_3 ( VAR_1 ) ; } return p . METHOD_1 ( user ) ; }
TYPE_1 METHOD_1 ( String VAR_1 ) { if ( VAR_2 == null ) { VAR_2 = new TYPE_2 < > ( ) ; } TYPE_1 ctl = VAR_2 . get ( VAR_1 ) ; if ( ctl == null ) { TYPE_3 VAR_3 = VAR_4 . METHOD_2 ( METHOD_3 ( ) , VAR_1 , user ) ; ctl = new TYPE_1 ( this , VAR_1 , VAR_3 ) ; VAR_2 . put ( VAR_1 , ctl ) ; } return ctl ; }
boolean METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) || METHOD_2 ( VAR_2 ) || METHOD_3 ( ) ; }
protected void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; if ( VAR_1 != null ) { reviewers . METHOD_2 ( VAR_1 ) ; } if ( VAR_2 == VAR_3 || VAR_2 == VAR_4 ) { add ( VAR_5 , reviewers ) ; add ( VAR_6 , VAR_7 ) ; } METHOD_3 ( VAR_6 ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_8 , ! change . METHOD_7 ( ) && ! change . METHOD_8 ( ) ) ; METHOD_9 ( ) ; }
private boolean METHOD_1 ( TYPE_1 rsrc ) { try { return VAR_1 . METHOD_1 ( rsrc ) ; } catch ( OrmException e ) { log . error ( STRING_1 , e ) ; } return false ; }
public boolean METHOD_1 ( ChangeData object ) throws OrmException { List < String > VAR_1 ; try { VAR_1 = object . METHOD_2 ( ) ; } catch ( IOException e ) { throw new OrmException ( e ) ; } return TYPE_1 . METHOD_3 ( getValue ( ) ) . METHOD_4 ( VAR_1 ) ; }
public void METHOD_1 ( AccountGroup . NameKey VAR_1 ) throws IOException { if ( VAR_1 != null ) { VAR_3 . METHOD_2 ( VAR_1 . get ( ) ) ; } }
public Account METHOD_1 ( String VAR_1 ) throws OrmException , IOException { Set < Account . Id > r = METHOD_2 ( VAR_1 ) ; return r . size ( ) == 1 ? VAR_2 . get ( r . METHOD_3 ( ) . next ( ) ) . METHOD_4 ( ) : null ; }
public TYPE_1 < ? > apply ( TYPE_2 rsrc , TYPE_3 input ) throws TYPE_4 , OrmException , IOException , TYPE_5 { if ( VAR_1 . get ( ) == rsrc . METHOD_1 ( ) ) { throw new TYPE_6 ( STRING_1 ) ; } return VAR_2 . METHOD_2 ( rsrc . METHOD_1 ( ) . getAccountId ( ) ) ; }
private TYPE_1 METHOD_1 ( List < TYPE_2 > VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; VAR_3 . ref = VAR_2 . ref ; VAR_8 = VAR_9 ; VAR_10 = VAR_11 ; VAR_14 = VAR_15 ; VAR_16 = VAR_17 ; VAR_18 = VAR_19 ; return VAR_3 ; }
ObjectId METHOD_1 ( ) throws OrmException { if ( VAR_1 == null ) { VAR_1 = ObjectId . METHOD_2 ( cd . METHOD_3 ( ) . getRevision ( ) . get ( ) ) ; } return VAR_1 ; }
TYPE_1 METHOD_1 ( ) throws TYPE_3 { if ( VAR_1 == null ) { VAR_1 = VAR_2 . get ( cd . project ( ) ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( cd . project ( ) ) ; } } return VAR_1 ; }
private TYPE_1 METHOD_1 ( Account . Id VAR_1 ) { Account account = new Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; return new TYPE_1 ( VAR_3 , account , Collections . METHOD_4 ( ) , new TYPE_5 < > ( ) ) ; }
private static Account . Id METHOD_1 ( TYPE_2 VAR_1 , String VAR_2 ) throws OrmException , TYPE_3 , IOException { Account a = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( a == null ) { throw new TYPE_3 ( STRING_1 + VAR_2 + STRING_2 ) ; } return a . getId ( ) ; }
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 . METHOD_2 ( ) ) { return VAR_2 . METHOD_3 ( getRefName ( ) ) ; } return new TYPE_1 ( VAR_2 , getRefName ( ) , VAR_4 ) ; }
public TYPE_1 < Project . NameKey > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; METHOD_2 ( VAR_1 ) ; return Collections . METHOD_4 ( VAR_5 ) ; }
public void METHOD_1 ( TYPE_1 db , TYPE_2 update , PatchSet ps ) throws OrmException { METHOD_2 ( ps . getId ( ) , update ) ; update . METHOD_4 ( VAR_1 ) ; db . patchSets ( ) . update ( Collections . singleton ( ps ) ) ; }
public static void METHOD_1 ( TYPE_1 < String > values , TYPE_2 VAR_1 , ChangeData out ) { List < TYPE_3 > VAR_2 = METHOD_1 ( values ) ; if ( VAR_2 . isEmpty ( ) ) { return ; } out . METHOD_4 ( VAR_1 , VAR_2 ) ; }
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_2 ) ; TYPE_1 VAR_5 = user ( VAR_1 , VAR_4 ) ; METHOD_3 ( VAR_5 ) ; METHOD_5 ( STRING_2 , VAR_5 ) ; METHOD_5 ( STRING_3 , VAR_5 ) ; METHOD_5 ( STRING_4 , VAR_5 ) ; METHOD_3 ( STRING_1 , VAR_5 ) ; METHOD_3 ( STRING_5 , VAR_5 ) ; }
public boolean METHOD_1 ( ChangeData object ) throws OrmException { List < String > VAR_1 ; try { VAR_1 = object . METHOD_2 ( ) ; } catch ( IOException e ) { throw new OrmException ( e ) ; } return Collections . METHOD_3 ( VAR_1 , value ) >= 0 ; }
private boolean METHOD_1 ( Change . Status status ) { switch ( status ) { case VAR_1 : case VAR_2 : return true ; case VAR_3 : return false ; } return false ; }
private boolean METHOD_1 ( Change . Status status ) { switch ( status ) { case VAR_2 : case VAR_3 : return ( METHOD_3 ( ) && METHOD_4 ( ) . METHOD_8 ( ) ) || METHOD_6 ( ) . METHOD_7 ( ) ; case VAR_4 : default : return false ; } }
private boolean METHOD_1 ( TYPE_1 db ) throws OrmException { if ( ! VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) || METHOD_4 ( db ) ) { return false ; } if ( METHOD_7 ( ) ) { return true ; } return METHOD_8 ( ) . METHOD_1 ( ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 rsrc ) { Change change = rsrc . getChange ( ) ; return new TYPE_1 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 ) . METHOD_4 ( METHOD_5 ( change . getStatus ( ) . METHOD_6 ( ) , rsrc . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) . METHOD_9 ( VAR_3 ) ) ) ; }
private TYPE_1 METHOD_1 ( String name , String email ) { final Account . Id VAR_1 = new Account . Id ( INT_1 ) ; final Account account = new Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( name ) ; account . METHOD_4 ( email ) ; return new TYPE_1 ( new TYPE_3 ( VAR_2 ) , account , Collections . METHOD_5 ( ) , new TYPE_4 < > ( ) ) ; }
public TYPE_1 get ( boolean VAR_1 ) throws TYPE_2 { try { return get . get ( ) . METHOD_1 ( VAR_1 ) . apply ( METHOD_2 ( ) ) ; } catch ( IOException | TYPE_3 | TYPE_4 e ) { throw METHOD_3 ( STRING_1 , e ) ; } }
protected static TYPE_1 < ChangeData > METHOD_1 ( TYPE_2 args , Account . Id id ) { if ( VAR_1 . METHOD_2 ( ) ) { return new TYPE_3 ( VAR_2 , id ) ; } return METHOD_3 ( id ) ; }
public void METHOD_1 ( ) throws Exception { METHOD_2 ( STRING_1 + STRING_2 + STRING_3 + STRING_4 + STRING_5 + STRING_6 ) ; METHOD_3 ( STRING_1 + STRING_2 + STRING_7 + STRING_4 + STRING_5 + STRING_6 ) ; METHOD_2 ( STRING_1 + STRING_2 + STRING_8 + STRING_4 + STRING_5 + STRING_6 ) ; METHOD_3 ( STRING_1 + STRING_2 + STRING_9 + STRING_4 + STRING_6 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , IOException , TYPE_5 { TYPE_2 p = VAR_2 . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_6 VAR_4 : p . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_3 ( ) ) ; } } throw new TYPE_4 ( id ) ; }
private boolean METHOD_1 ( TYPE_1 rsrc ) { try { return VAR_1 . METHOD_1 ( rsrc ) ; } catch ( OrmException e ) { log . error ( STRING_1 , e ) ; } return false ; }
public static TYPE_1 < Account . Id > METHOD_1 ( Repository repo ) throws IOException { return repo . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . values ( ) . METHOD_4 ( ) . map ( r - > TYPE_2 . METHOD_5 ( r . getName ( ) ) ) . METHOD_6 ( TYPE_3 : : METHOD_7 ) ; }
public void METHOD_1 ( Project p ) throws IOException { VAR_1 . METHOD_2 ( ) ; try { TYPE_1 < Project . NameKey > n = TYPE_2 . METHOD_3 ( VAR_2 . get ( VAR_3 ) ) ; n . METHOD_1 ( p . METHOD_4 ( ) ) ; VAR_2 . put ( VAR_3 , Collections . METHOD_5 ( n ) ) ; } catch ( TYPE_3 e ) { log . METHOD_6 ( STRING_1 , e ) ; } finally { VAR_1 . METHOD_7 ( ) ; } METHOD_8 ( p ) ; }
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( db , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , TYPE_3 . of ( VAR_1 ) , VAR_7 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 , index , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ; }
private Set < Account . Id > METHOD_1 ( String VAR_1 ) throws TYPE_1 , OrmException , IOException , TYPE_2 { if ( METHOD_2 ( VAR_1 ) ) { return Collections . singleton ( METHOD_3 ( ) ) ; } Set < Account . Id > VAR_2 = VAR_3 . METHOD_4 ( VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { throw error ( STRING_1 + VAR_1 + STRING_2 ) ; } return VAR_2 ; }
private Set < Account . Id > METHOD_1 ( String VAR_1 ) throws TYPE_1 , OrmException , IOException , TYPE_2 { Set < Account . Id > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 . isEmpty ( ) ) { throw error ( STRING_1 + VAR_1 + STRING_2 ) ; } return VAR_2 ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , TYPE_5 , TYPE_6 { TYPE_7 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_4 : : new ) ; TYPE_8 VAR_3 = VAR_4 . METHOD_1 ( VAR_5 , id ) . METHOD_4 ( ) ; if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) && METHOD_7 ( VAR_2 , VAR_3 ) ) { return new TYPE_1 ( VAR_1 , VAR_3 ) ; } throw new TYPE_6 ( id ) ; }
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . in ( VAR_2 class ) ; bind ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . in ( VAR_2 class ) ; }
private static Set < AccountGroup . Id > METHOD_1 ( TYPE_1 db ) throws TYPE_2 { try ( TYPE_3 VAR_1 = METHOD_2 ( db ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( STRING_1 ) ) { Set < AccountGroup . Id > VAR_3 = new TYPE_5 < > ( ) ; while ( VAR_2 . next ( ) ) { VAR_3 . add ( new AccountGroup . Id ( VAR_2 . METHOD_4 ( 1 ) ) ) ; } return VAR_3 ; } }
public static ChangeData METHOD_1 ( Project . NameKey project , Change . Id id , int currentPatchSetId ) { ChangeData cd = new ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id , null , null ) ; VAR_1 = new PatchSet ( new PatchSet . Id ( id , currentPatchSetId ) ) ; return cd ; }
public TYPE_1 < Account . Id , String > METHOD_1 ( Change . Id changeId ) throws OrmException { List < ChangeData > VAR_2 = VAR_3 . get ( ) . METHOD_2 ( TYPE_3 , TYPE_4 ) . METHOD_3 ( changeId ) ; if ( VAR_2 . size ( ) != 1 ) { throw new TYPE_5 ( changeId ) ; } return VAR_2 . get ( 0 ) . METHOD_4 ( ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_2 VAR_1 = TYPE_3 . METHOD_5 ( ) ; AccountGroup . Id VAR_2 = METHOD_6 ( STRING_1 ) ; METHOD_7 ( VAR_2 ) ; VAR_3 . METHOD_8 ( db , new TYPE_4 ( ) ) ; AccountGroup group = db . METHOD_9 ( ) . get ( VAR_2 ) ; assertThat ( group . METHOD_10 ( ) ) . METHOD_11 ( VAR_1 ) ; }
public void METHOD_1 ( ) throws Exception { AccountGroup . Id VAR_1 = METHOD_5 ( STRING_1 ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( VAR_1 ) ; VAR_2 . METHOD_8 ( db , new TYPE_2 ( ) ) ; AccountGroup group = db . METHOD_9 ( ) . get ( VAR_1 ) ; assertThat ( group . METHOD_10 ( ) ) . isEqualTo ( AccountGroup . METHOD_11 ( ) ) ; }
public static ChangeData METHOD_1 ( Project . NameKey project , Change . Id id , int currentPatchSetId ) { ChangeData cd = new ChangeData ( null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , null , project , id , null , null ) ; VAR_1 = new PatchSet ( new PatchSet . Id ( id , currentPatchSetId ) ) ; return cd ; }
private TYPE_1 METHOD_1 ( ) throws OrmException { if ( VAR_1 == null ) { Change c = change ( ) ; try { VAR_1 = VAR_2 . METHOD_2 ( db , c , VAR_3 . create ( c . METHOD_3 ( ) ) ) ; } catch ( TYPE_2 e ) { throw new OrmException ( e ) ; } } return VAR_1 ; }
private boolean METHOD_1 ( ) { try ( Repository git = VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) { TYPE_1 ref = git . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ; if ( ref == null || ref . METHOD_6 ( ) == null ) { return true ; } return ! ref . METHOD_6 ( ) . equals ( config . getRevision ( ) ) ; } catch ( IOException VAR_3 ) { return true ; } }
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = VAR_2 ; if ( VAR_1 == null ) { VAR_1 = VAR_3 . METHOD_2 ( METHOD_3 ( ) , config . METHOD_4 ( ) ) ; VAR_2 = VAR_1 ; } return VAR_4 . create ( VAR_1 ) ; }
private Set < Project . NameKey > METHOD_1 ( Project . NameKey projectName ) { TYPE_1 ps = VAR_1 . get ( projectName ) ; if ( ps == null ) { return Collections . METHOD_2 ( ) ; } return ps . METHOD_3 ( ) . METHOD_4 ( s - > s . METHOD_5 ( ) ) . METHOD_6 ( ) ; }
public static TYPE_1 < Account . Id > METHOD_1 ( Repository repo ) throws IOException { return repo . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . values ( ) . METHOD_4 ( ) . map ( r - > TYPE_2 . METHOD_5 ( r . getName ( ) ) ) . METHOD_6 ( TYPE_3 : : METHOD_7 ) ; }
public boolean METHOD_1 ( Branch . NameKey VAR_1 , TYPE_1 user ) { if ( VAR_1 == null ) { return false ; } TYPE_2 VAR_2 = VAR_3 . get ( VAR_1 . getParentKey ( ) ) ; if ( VAR_2 == null ) { return false ; } return VAR_2 . METHOD_2 ( user ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) ; }
TYPE_1 METHOD_1 ( TYPE_2 user , String project , String VAR_1 ) { TYPE_3 token = new TYPE_3 ( user . METHOD_2 ( ) . get ( ) , project , VAR_1 , VAR_2 ) ; return new TYPE_1 ( VAR_3 . METHOD_3 ( token ) , VAR_4 ) ; }
protected void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( VAR_2 , null , STRING_1 ) != null ) { TYPE_1 . info ( STRING_2 ) ; bind ( VAR_4 class ) . to ( VAR_5 class ) . METHOD_3 ( ) ; install ( new TYPE_2 ( VAR_2 , VAR_6 ) ) ; } }
private < TYPE_1 > void METHOD_1 ( String VAR_1 , TYPE_2 < TYPE_1 > VAR_2 , TYPE_3 < TYPE_1 , String > VAR_3 ) throws IOException { String VAR_4 = VAR_2 . METHOD_2 ( ) . map ( VAR_3 ) . collect ( METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_1 , VAR_4 ) ; }
private < TYPE_1 > void METHOD_1 ( String VAR_1 , TYPE_2 < TYPE_1 > VAR_2 , TYPE_3 < TYPE_1 , String > VAR_3 ) throws IOException { String VAR_4 = VAR_2 . METHOD_2 ( ) . map ( VAR_3 ) . collect ( METHOD_3 ( STRING_1 ) ) ; METHOD_4 ( VAR_1 , VAR_4 ) ; }
protected void METHOD_1 ( ) { for ( Map . Entry < Account . Id , TYPE_1 < String > > e : VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) { if ( e . getValue ( ) . contains ( VAR_2 ) ) { VAR_3 . METHOD_4 ( e . getKey ( ) ) . METHOD_6 ( a - > METHOD_7 ( a . METHOD_5 ( ) ) ) ; } } }
public boolean METHOD_1 ( ChangeData cd , TYPE_1 VAR_1 , Account . Id VAR_2 , int value ) throws TYPE_2 , OrmException { if ( METHOD_2 ( VAR_3 , cd . change ( ) , VAR_1 , VAR_2 , value ) ) { return true ; } return VAR_3 . user ( VAR_1 ) . change ( cd ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_5 ) ; }
private void METHOD_1 ( TYPE_1 notes , TYPE_2 VAR_1 , Account . Id VAR_2 , int VAR_3 ) throws TYPE_3 , TYPE_4 { if ( METHOD_2 ( VAR_4 , notes . getChange ( ) , VAR_1 , VAR_2 , VAR_3 ) ) { return ; } VAR_4 . user ( VAR_1 ) . change ( notes ) . METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_6 ) ; }
TYPE_1 create ( Project . NameKey name ) throws TYPE_2 , IOException , TYPE_3 { TYPE_4 VAR_1 = VAR_2 . METHOD_1 ( name ) ; if ( VAR_1 == null || ! VAR_1 . getProject ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) { throw new TYPE_2 ( name ) ; } return new TYPE_1 ( VAR_1 , VAR_3 . get ( ) , VAR_4 . METHOD_4 ( name ) , VAR_5 , VAR_6 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { try { Change change = getChange ( VAR_1 . getChange ( ) ) ; TYPE_2 event = new TYPE_2 ( change ) ; event . change = METHOD_2 ( change ) ; VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_4 . get ( ) . METHOD_6 ( change , event ) ; } catch ( OrmException | TYPE_3 e ) { log . error ( STRING_1 , e ) ; } }
public void METHOD_1 ( TYPE_1 ctx ) { VAR_1 . METHOD_2 ( change , ctx . METHOD_3 ( ) , ctx . METHOD_4 ( ) ) ; if ( VAR_2 || VAR_3 . METHOD_5 ( ) < TYPE_2 . METHOD_5 ( ) ) { return ; } email . create ( VAR_3 , TYPE_3 . of ( ) , notes , ps , ctx . METHOD_6 ( ) , VAR_4 , TYPE_4 . of ( ) , VAR_4 . getMessage ( ) , TYPE_4 . of ( ) ) . METHOD_7 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { try { Change change = getChange ( VAR_1 . getChange ( ) ) ; TYPE_2 event = new TYPE_2 ( change ) ; event . change = METHOD_2 ( change ) ; VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; VAR_4 . get ( ) . METHOD_6 ( change , event ) ; } catch ( OrmException | TYPE_3 e ) { log . error ( STRING_1 , e ) ; } }
public void METHOD_1 ( ) throws Exception { String changeId = METHOD_2 ( ) . getChangeId ( ) ; String topic = TYPE_1 . METHOD_3 ( ( ) - > STRING_1 ) . METHOD_4 ( INT_1 ) . collect ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( VAR_2 class ) ; VAR_1 . METHOD_7 ( STRING_2 ) ; VAR_3 . changes ( ) . id ( changeId ) . topic ( topic ) ; }
public TYPE_1 METHOD_1 ( ) throws OrmException { if ( change ( ) . METHOD_2 ( ) == null ) { return null ; } try { return VAR_1 . get ( notes ( ) , null ) . VAR_2 ; } catch ( IOException | TYPE_2 | TYPE_3 e ) { throw new OrmException ( STRING_1 , e ) ; } }
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 < TYPE_3 > group = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( ! group . METHOD_3 ( ) ) { TYPE_4 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) ; return false ; } return TYPE_6 . METHOD_6 ( new TYPE_5 ( group . get ( ) ) ) . METHOD_1 ( ) ; }
private List < TYPE_1 > METHOD_1 ( final String VAR_1 ) { NameKey projectName = VAR_2 . get ( ) ; if ( projectName != null ) { List < TYPE_1 > VAR_3 = VAR_4 . get ( projectName ) . METHOD_2 ( ) ; return VAR_3 . METHOD_3 ( ) . METHOD_4 ( input - > VAR_5 . equals ( VAR_1 ) ) . collect ( METHOD_5 ( ) ) ; } return Collections . METHOD_6 ( ) ; }
public String METHOD_1 ( String VAR_1 ) { String name = VAR_2 != null ? VAR_2 : VAR_1 ; StringBuilder b = new StringBuilder ( ) ; b . append ( name ) ; if ( VAR_3 != null ) { b . append ( STRING_1 ) ; b . append ( VAR_3 ) ; b . append ( STRING_2 ) ; } else { b . append ( STRING_3 ) ; b . append ( VAR_4 . get ( ) ) ; b . append ( STRING_4 ) ; } return b . toString ( ) ; }
private TYPE_1 < String > METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { return VAR_1 . get ( ) . getName ( ) . map ( n - > TYPE_2 . METHOD_3 ( n . get ( ) ) ) ; } if ( VAR_2 . METHOD_2 ( ) ) { return TYPE_1 . of ( TYPE_2 . METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( ) . get ( ) ) ) ; } return TYPE_1 . METHOD_5 ( ) ; }
protected void VAR_1 ( VAR_2 VAR_3 , String VAR_4 , boolean VAR_5 , assertThat ( VAR_3 ) . VAR_6 ( ) ; assertThat ( VAR_3 . getName ( ) ) . isEqualTo ( VAR_4 ) ; assertThat ( VAR_7 ( ) ) . isEqualTo ( VAR_5 ) ; assertThat ( VAR_8 ( ) ) . isEqualTo ( VAR_9 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , boolean VAR_4 , int VAR_5 , int VAR_6 ) { assertThat ( VAR_1 . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; assertThat ( VAR_1 . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; assertThat ( VAR_1 . METHOD_5 ( ) ) . isEqualTo ( VAR_5 ) ; assertThat ( VAR_1 . METHOD_6 ( ) ) . isEqualTo ( VAR_6 ) ; }
private void METHOD_1 ( TYPE_1 i ) throws TYPE_2 , OrmException , TYPE_3 , IOException , TYPE_4 , TYPE_5 { TYPE_6 VAR_1 = TYPE_6 . create ( user . getAccountId ( ) , VAR_2 , VAR_3 ) ; VAR_4 . apply ( new TYPE_7 ( user . METHOD_2 ( ) , VAR_1 ) , null ) ; }
private static String METHOD_1 ( List < TYPE_1 < TYPE_2 > > VAR_1 , String VAR_2 ) { TYPE_2 key = TYPE_2 . create ( new Account . Id ( 1 ) , VAR_1 . size ( ) + 1 , VAR_2 ) ; VAR_1 . add ( TYPE_1 . of ( key ) ) ; return key . METHOD_2 ( ) + STRING_1 ; }
private static String METHOD_1 ( List < TYPE_1 < TYPE_2 > > VAR_1 , String VAR_2 ) { TYPE_2 key = TYPE_2 . METHOD_2 ( new Account . Id ( 1 ) , VAR_1 . size ( ) + 1 , VAR_2 ) ; VAR_1 . add ( TYPE_1 . of ( key ) ) ; return VAR_4 + key . METHOD_3 ( ) + STRING_1 ; }
private TYPE_1 METHOD_1 ( Account . Id id , String VAR_1 ) throws IOException { TYPE_2 p = TYPE_3 . get ( VAR_1 ) ; if ( ! TYPE_4 . METHOD_2 ( p ) ) { throw new IOException ( String . format ( STRING_1 , VAR_1 ) ) ; } String content = new String ( TYPE_4 . METHOD_3 ( p ) , VAR_2 ) ; return TYPE_1 . create ( id , 1 , content ) ; }
private boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; TYPE_1 < TYPE_2 > key = VAR_2 . get ( VAR_1 - 1 ) ; if ( key . METHOD_3 ( ) && key . get ( ) . METHOD_4 ( ) ) { VAR_2 . set ( VAR_1 - 1 , TYPE_1 . of ( TYPE_2 . METHOD_5 ( key . get ( ) ) ) ) ; return true ; } return false ; }
private TYPE_1 METHOD_1 ( ) { final List < TYPE_2 > modules = new ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( new TYPE_3 ( ) ) ; modules.add ( new TYPE_4 ( false , VAR_1 . METHOD_2 ( VAR_3 class ) , VAR_1 . METHOD_2 ( VAR_4 class ) ) ) ; modules.add ( new TYPE_5 ( ) ) ; return VAR_1 . METHOD_3 ( modules ) ; }
public void METHOD_1 ( ) throws Exception { AccountGroup group = METHOD_2 ( ) . METHOD_3 ( ) ; METHOD_4 ( group ) ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 ) ; METHOD_5 ( group . getId ( ) , VAR_1 , VAR_2 ) ; METHOD_6 ( VAR_3 , group ) ; TYPE_2 < TYPE_3 > VAR_4 = METHOD_7 ( group . METHOD_8 ( ) ) ; METHOD_9 ( VAR_4 ) . value ( ) . METHOD_10 ( ) . METHOD_11 ( VAR_1 , VAR_2 ) ; }
private TYPE_1 METHOD_1 ( TYPE_1 group ) throws Exception { try ( Repository repo = VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_3 . METHOD_1 ( repo , TYPE_2 . METHOD_3 ( db , group . getId ( ) ) , null ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( repo , group . METHOD_5 ( ) ) ; TYPE_4 < TYPE_1 > result = VAR_4 . METHOD_6 ( ) ; assertThat ( result ) . METHOD_7 ( ) ; return result . get ( ) ; } }
public void METHOD_1 ( ) throws IOException { METHOD_2 ( STRING_1 ) ; METHOD_11 ( ) ; METHOD_12 ( ) ; }
public void METHOD_1 ( TYPE_1 req , TYPE_2 rsp , TYPE_3 VAR_1 ) throws IOException , TYPE_4 { try { VAR_2 . user ( user ) . METHOD_2 ( VAR_4 ) ; } catch ( TYPE_5 | TYPE_6 e ) { ( ( HttpServletResponse ) rsp ) . METHOD_3 ( VAR_5 , STRING_1 ) ; return ; } VAR_1 . METHOD_1 ( req , rsp ) ; }
private void METHOD_1 ( String projectName ) throws IOException , TYPE_2 { if ( VAR_1 . get ( new Project . NameKey ( projectName ) ) == null ) { try { VAR_2 . create ( projectName ) . apply ( VAR_3 , null ) ; } catch ( TYPE_2 | TYPE_6 | TYPE_7 e ) { throw new TYPE_1 ( String . format ( STRING_1 , projectName ) ) ; } } }
public TYPE_1 apply ( Project . NameKey VAR_1 ) throws TYPE_2 , TYPE_3 , IOException , TYPE_4 { TYPE_5 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { throw new TYPE_2 ( VAR_1 . get ( ) ) ; } return apply ( new TYPE_6 ( VAR_2 , user . get ( ) ) ) ; }
private TYPE_1 METHOD_1 ( ) { return VAR_2 . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { install ( VAR_2 . METHOD_4 ( VAR_3 class ) ) ; bind ( VAR_4 class ) . METHOD_5 ( VAR_5 ) ; install ( METHOD_6 ( ) ) ; factory ( VAR_6 . Factory class ) ; } } ) ; }
public List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { Project . NameKey projectName = VAR_1 . METHOD_2 ( ) ; TYPE_4 . METHOD_3 ( projectName ) ; if ( VAR_2 . METHOD_4 ( projectName , VAR_1 . getRefName ( ) ) ) { return METHOD_5 ( projectName , VAR_1 . commit ) ; } return Collections . METHOD_6 ( ) ; }
public List < TYPE_1 > METHOD_1 ( String projectName ) throws IOException { TYPE_2 project = VAR_2 . METHOD_2 ( new Project . NameKey ( projectName ) ) ; List < TYPE_1 > VAR_1 = METHOD_3 ( project ) ; if ( VAR_1 . isEmpty ( ) ) { for ( TYPE_2 VAR_3 : project . METHOD_4 ( ) ) { VAR_1 = METHOD_3 ( VAR_3 ) ; if ( ! VAR_1 . isEmpty ( ) ) { break ; } } } return VAR_1 ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( Map < String , String > VAR_1 ) { TYPE_1 < TYPE_2 > VAR_2 = TYPE_5 . METHOD_2 ( ) ; for ( TYPE_6 VAR_3 : VAR_4 ) { VAR_2 . METHOD_3 ( VAR_3 . METHOD_1 ( VAR_1 ) ) ; } return VAR_2 ; }
private String METHOD_1 ( String msg ) { return msg . METHOD_2 ( STRING_3 , STRING_2 ) . METHOD_3 ( ) ; }
protected void METHOD_1 ( TYPE_1 builder ) throws IOException { builder . METHOD_2 ( type . toString ( ) ) . METHOD_3 ( name , VAR_3 ) . METHOD_4 ( ) ; }
private void METHOD_1 ( String VAR_3 ) { key = new Key ( VAR_3 ) ; VAR_4 = VAR_2 . get ( key ) ; String token = VAR_1 . METHOD_2 ( VAR_5 ) ; if ( VAR_4 != null && token != null && token . equals ( VAR_4 . METHOD_3 ( ) ) ) { VAR_6 . add ( VAR_7 ) ; } }
private TYPE_1 METHOD_1 ( ) { TYPE_1 info = new TYPE_1 ( ) ; VAR_1 = METHOD_2 ( VAR_2 . get ( ) != null ) ; VAR_3 = new ArrayList < > ( ) ; for ( TYPE_3 u : plugins ) { VAR_3 . add ( String . format ( STRING_1 , u . METHOD_4 ( ) , u . METHOD_5 ( ) ) ) ; } return info ; }
public TYPE_1 METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) throws Exception { TYPE_3 VAR_3 = ( TYPE_3 ) METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; TYPE_1 in = VAR_3 . METHOD_6 ( ) ; VAR_3 . METHOD_7 ( ) ; return in ; }
protected void VAR_1 ( VAR_2 VAR_3 , String VAR_4 , boolean VAR_5 , assertThat ( VAR_3 ) . VAR_6 ( ) ; assertThat ( VAR_3 . getName ( ) ) . isEqualTo ( VAR_4 ) ; assertThat ( VAR_7 ( ) ) . isEqualTo ( VAR_5 ) ; assertThat ( VAR_8 ( ) ) . isEqualTo ( VAR_9 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , boolean VAR_4 , int VAR_5 , int VAR_6 ) { assertThat ( VAR_1 . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; assertThat ( VAR_1 . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; assertThat ( VAR_1 . METHOD_5 ( ) ) . isEqualTo ( VAR_5 ) ; assertThat ( VAR_1 . METHOD_6 ( ) ) . isEqualTo ( VAR_6 ) ; }
protected void VAR_1 ( VAR_2 VAR_3 , String VAR_4 , boolean VAR_5 , assertThat ( VAR_3 ) . VAR_6 ( ) ; assertThat ( VAR_3 . getName ( ) ) . isEqualTo ( VAR_4 ) ; assertThat ( VAR_7 ( ) ) . isEqualTo ( VAR_5 ) ; assertThat ( VAR_8 ( ) ) . isEqualTo ( VAR_9 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , boolean VAR_4 , int VAR_5 , int VAR_6 ) { assertThat ( VAR_1 . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; assertThat ( VAR_1 . METHOD_3 ( ) ) . isEqualTo ( VAR_3 ) ; assertThat ( VAR_1 . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; assertThat ( VAR_1 . METHOD_5 ( ) ) . isEqualTo ( VAR_5 ) ; assertThat ( VAR_1 . METHOD_6 ( ) ) . isEqualTo ( VAR_6 ) ; }
private void METHOD_1 ( ) { try { METHOD_2 ( ) . METHOD_3 ( ) ; } catch ( TYPE_1 e ) { log . METHOD_4 ( STRING_1 + STRING_2 , e ) ; METHOD_5 ( false ) ; } if ( VAR_1 ) { METHOD_6 ( ) ; } }
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = VAR_1 . METHOD_2 ( ) ; String VAR_3 = VAR_1 . METHOD_3 ( ) ; return ! VAR_3 . METHOD_4 ( VAR_4 ) && ( ( STRING_1 . equals ( VAR_2 ) && ! VAR_3 . METHOD_4 ( VAR_5 ) ) || STRING_2 . equals ( VAR_2 ) || STRING_3 . equals ( VAR_2 ) ) ; }
public boolean METHOD_1 ( TYPE_1 ctx ) throws OrmException { PatchSet . Id psId = ctx . getChange ( ) . currentPatchSetId ( ) ; VAR_1 . METHOD_2 ( ctx . METHOD_3 ( ) , ctx . METHOD_4 ( psId ) , VAR_2 , VAR_3 ) ; return true ; }
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof PatchSetApproval ) { PatchSetApproval p = ( PatchSetApproval ) VAR_1 ; return TYPE_2 . equals ( key , p . key ) && TYPE_2 . equals ( value , p . value ) && TYPE_2 . equals ( VAR_2 , VAR_3 ) && TYPE_2 . equals ( VAR_4 , VAR_5 ) && TYPE_2 . equals ( VAR_6 , VAR_7 ) && VAR_8 == VAR_9 ; } return false ; }
protected TYPE_1 METHOD_1 ( ) { METHOD_4 ( ) ; TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_1 instanceof TYPE_3 ) ) { VAR_2 . METHOD_3 ( new TYPE_3 ( VAR_1 ) , false ) ; } return new TYPE_1 ( ) { public void close ( ) { METHOD_6 ( ) ; TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) { VAR_2 . METHOD_3 ( ( ( TYPE_3 ) VAR_1 ) . METHOD_5 ( ) , false ) ; } } } ; }
static void METHOD_1 ( String VAR_1 , TYPE_1 req , HttpServletResponse rsp ) throws IOException { METHOD_1 ( VAR_1 , req , rsp , false ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) throws IOException { VAR_2 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_3 . get ( ) . index ( VAR_1 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) . METHOD_6 ( TYPE_2 : : METHOD_7 ) ; VAR_1 . METHOD_8 ( ) . METHOD_6 ( TYPE_2 : : METHOD_9 ) ; }
public void METHOD_1 ( ) throws Exception { String VAR_1 = name ( STRING_1 ) ; TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( ) . create ( VAR_1 ) . get ( ) ; METHOD_4 ( group ( VAR_1 ) , VAR_4 ) ; }
public static void METHOD_1 ( TYPE_1 < ChangeData > changes ) throws OrmException { ChangeData VAR_1 = TYPE_2 . METHOD_2 ( changes , null ) ; if ( VAR_1 == null ) { return ; } for ( ChangeData cd : changes ) { cd . change ( ) ; } }
public static void METHOD_1 ( TYPE_1 < ChangeData > changes ) throws OrmException { ChangeData VAR_1 = TYPE_2 . METHOD_2 ( changes , null ) ; if ( VAR_1 == null ) { return ; } for ( ChangeData cd : changes ) { cd . patchSets ( ) ; } }
public static void METHOD_1 ( TYPE_1 < ChangeData > changes ) throws OrmException { ChangeData VAR_1 = TYPE_2 . METHOD_2 ( changes , null ) ; if ( VAR_1 == null ) { return ; } for ( ChangeData cd : changes ) { cd . METHOD_3 ( ) ; } }
public static void METHOD_1 ( TYPE_1 < ChangeData > changes ) throws OrmException { ChangeData VAR_1 = TYPE_2 . METHOD_2 ( changes , null ) ; if ( VAR_1 == null ) { return ; } for ( ChangeData cd : changes ) { cd . METHOD_3 ( ) ; } }
public static void METHOD_1 ( TYPE_1 < ChangeData > changes ) throws OrmException { ChangeData VAR_1 = TYPE_2 . METHOD_2 ( changes , null ) ; if ( VAR_1 == null ) { return ; } for ( ChangeData cd : changes ) { cd . METHOD_3 ( ) ; } }
public void METHOD_1 ( ) throws Exception { try ( Repository repo = VAR_2 . METHOD_6 ( VAR_3 ) ) { METHOD_7 ( repo , METHOD_8 ( VAR_3 , user ) , true ) ; METHOD_9 ( VAR_4 , VAR_5 ) ; METHOD_7 ( repo , METHOD_8 ( VAR_3 , user ) , true , STRING_1 ) ; } }
protected void METHOD_1 ( ) throws Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; for ( Repository repo : VAR_2 ) { repo . close ( ) ; } db . close ( ) ; METHOD_3 ( ) ; if ( server != VAR_3 ) { server . close ( ) ; server = null ; } }
private RevCommit METHOD_1 ( Branch . NameKey branch ) throws IOException { TYPE_1 r = METHOD_2 ( ) . get ( branch . get ( ) ) ; if ( r == null ) { return null ; } return VAR_1 . METHOD_3 ( ) . parseCommit ( r . METHOD_4 ( ) ) ; }
private static boolean METHOD_1 ( RevCommit a , RevCommit b ) { if ( a . METHOD_2 ( ) != b . METHOD_2 ( ) ) { return false ; } for ( int i = 0 ; i < a . METHOD_2 ( ) ; i ++ ) { if ( ! a . METHOD_3 ( i ) . equals ( b . METHOD_3 ( i ) ) ) { return false ; } } return true ; }
private static boolean METHOD_1 ( RevCommit a , RevCommit b ) { TYPE_1 VAR_1 = a . METHOD_2 ( ) ; TYPE_1 VAR_2 = b . METHOD_2 ( ) ; if ( VAR_1 == null && VAR_2 == null ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return false ; } return TYPE_2 . equals ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) && TYPE_2 . equals ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) ; }
private RevCommit METHOD_1 ( Branch . NameKey branch ) throws IOException { TYPE_1 r = METHOD_2 ( ) . get ( branch . get ( ) ) ; if ( r == null ) { return null ; } return VAR_1 . METHOD_3 ( ) . parseCommit ( r . METHOD_4 ( ) ) ; }
public void METHOD_1 ( ) throws Exception { String VAR_1 = this . VAR_2 . METHOD_2 ( ) . create ( ) . get ( ) ; METHOD_4 ( user ) ; VAR_3 . METHOD_5 ( VAR_4 class ) ; VAR_5 . projects ( ) . name ( project . get ( ) ) . METHOD_6 ( VAR_1 ) ; }
public void METHOD_1 ( ) throws Exception { String VAR_1 = this . VAR_2 . METHOD_2 ( ) . create ( ) . get ( ) ; METHOD_4 ( user ) ; VAR_3 . METHOD_5 ( VAR_4 class ) ; VAR_5 . projects ( ) . name ( project . get ( ) ) . METHOD_6 ( VAR_1 ) ; }
public void METHOD_1 ( ) throws Exception { String VAR_1 = this . VAR_2 . METHOD_2 ( ) . create ( ) . get ( ) ; METHOD_4 ( user ) ; METHOD_5 ( project , STRING_1 , VAR_3 , false , VAR_4 ) ; VAR_5 . projects ( ) . name ( project . get ( ) ) . METHOD_6 ( VAR_1 ) ; assertThat ( VAR_5 . projects ( ) . name ( project . get ( ) ) . METHOD_6 ( ) ) . isEqualTo ( VAR_1 ) ; }
public void METHOD_1 ( ) throws Exception { String VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( project ) . create ( ) . get ( ) ; VAR_3 . METHOD_5 ( VAR_4 class ) ; VAR_3 . METHOD_6 ( STRING_1 ) ; VAR_5 . projects ( ) . name ( project . get ( ) ) . METHOD_3 ( VAR_1 ) ; }
public void METHOD_1 ( ) throws Exception { Project . NameKey VAR_1 = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( project ) . create ( ) ; String VAR_3 = this . VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . create ( ) . get ( ) ; VAR_4 . METHOD_5 ( VAR_5 class ) ; VAR_4 . METHOD_6 ( STRING_1 ) ; VAR_6 . projects ( ) . name ( project . get ( ) ) . METHOD_3 ( VAR_3 ) ; }
public void METHOD_1 ( ) throws Exception { VAR_1 . projects ( ) . name ( VAR_2 . get ( ) ) . METHOD_2 ( VAR_3 . get ( ) ) ; String VAR_4 = this . VAR_5 . METHOD_3 ( ) . create ( ) . get ( ) ; VAR_6 . METHOD_5 ( VAR_7 class ) ; VAR_6 . METHOD_6 ( STRING_1 ) ; VAR_1 . projects ( ) . name ( VAR_2 . get ( ) ) . METHOD_2 ( VAR_4 ) ; }
protected String METHOD_1 ( String type , String VAR_1 ) throws TYPE_1 { String VAR_2 = TYPE_2 . METHOD_2 ( VAR_3 , TYPE_3 . toString ( ) ) ; if ( TYPE_4 . equals ( VAR_1 ) && client . METHOD_3 ( ) . METHOD_4 ( ) ) { return VAR_2 + STRING_1 + VAR_1 ; } String VAR_4 = TYPE_2 . METHOD_2 ( type , TYPE_3 . toString ( ) ) ; return VAR_2 + STRING_1 + VAR_4 + STRING_1 + VAR_1 ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 class ) ; VAR_3 = METHOD_2 ( VAR_4 class ) ; DynamicSet < TYPE_2 > set = DynamicSet . METHOD_3 ( ) ; set . add ( STRING_1 , VAR_3 ) ; TYPE_3 < TYPE_2 > VAR_5 = new TYPE_3 < > ( set , VAR_1 ) ; VAR_6 = new TYPE_4 ( null , VAR_5 , null , null , null , null ) ; }
public ChangeInfo format ( Project . NameKey project , Change . Id id ) throws OrmException { return format ( project , id , ChangeInfo : : new ) ; }
void METHOD_1 ( ) { for ( TYPE_1 m : VAR_1 ) { String msg = m . METHOD_3 ( ) . METHOD_2 ( ) + m . getMessage ( ) ; if ( m . METHOD_4 ( ) ) { VAR_3 . METHOD_5 ( msg ) ; } else { VAR_3 . METHOD_6 ( msg ) ; } } }
private static boolean METHOD_1 ( RevCommit a , RevCommit b ) { if ( a . METHOD_2 ( ) != b . METHOD_2 ( ) ) { return false ; } for ( int i = 0 ; i < a . METHOD_2 ( ) ; i ++ ) { if ( ! a . METHOD_3 ( i ) . equals ( b . METHOD_3 ( i ) ) ) { return false ; } } return true ; }
private static boolean METHOD_1 ( RevCommit a , RevCommit b ) { TYPE_1 VAR_1 = a . METHOD_2 ( ) ; TYPE_1 VAR_2 = b . METHOD_2 ( ) ; if ( VAR_1 == null && VAR_2 == null ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return false ; } return TYPE_2 . equals ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) && TYPE_2 . equals ( VAR_1 . METHOD_3 ( ) , VAR_2 . METHOD_3 ( ) ) ; }
public TYPE_1 format ( Project p ) { TYPE_1 info = new TYPE_1 ( ) ; info . name = p . getName ( ) ; Project . NameKey VAR_1 = p . METHOD_1 ( VAR_2 ) ; VAR_3 = VAR_1 != null ? VAR_1 . get ( ) : null ; VAR_4 = TYPE_2 . METHOD_2 ( p . METHOD_3 ( ) ) ; VAR_5 = p . METHOD_4 ( ) ; info . METHOD_5 ( ) ; return info ; }
public List < Change > METHOD_1 ( Project . NameKey key ) throws Exception { final TYPE_1 db = schema . METHOD_2 ( ) ; try { return Collections . METHOD_3 ( db . changes ( ) . METHOD_4 ( key ) . METHOD_5 ( ) ) ; } finally { db . close ( ) ; } }
public TYPE_1 < String > METHOD_1 ( ) { TYPE_1 < String > VAR_1 = super . METHOD_1 ( ) ; TYPE_2 < String > VAR_2 = new TYPE_2 < > ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { String VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ! VAR_4 . contains ( VAR_3 . METHOD_4 ( ) ) ) { VAR_2 . add ( VAR_1 . METHOD_3 ( ) ) ; } } return TYPE_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; }
public TYPE_1 < String > METHOD_1 ( ) { final TYPE_1 < String > VAR_1 = super . METHOD_1 ( ) ; TYPE_2 < String > VAR_2 = new TYPE_2 < > ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { String VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( ! VAR_4 . contains ( VAR_3 . METHOD_4 ( ) ) ) { VAR_2 . add ( VAR_1 . METHOD_3 ( ) ) ; } } return TYPE_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ; }
private TYPE_1 < String > METHOD_1 ( String query ) throws OrmException , TYPE_2 , TYPE_3 { TYPE_1 < String > projects = VAR_1 . get ( ) . METHOD_2 ( query ) . apply ( ) . METHOD_3 ( ) . map ( p - > p . name ) . METHOD_4 ( start ) ; if ( VAR_2 > 0 ) { projects = projects . METHOD_5 ( VAR_2 ) ; } return projects ; }
public TYPE_1 create ( TYPE_2 db , Project . NameKey project , Change . Id changeId ) throws OrmException { Change change = METHOD_1 ( db ) . changes ( ) . get ( changeId ) ; METHOD_2 ( change , STRING_1 , changeId ) ; METHOD_3 ( change . getProject ( ) . equals ( project ) , STRING_2 + STRING_3 , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , change ) . METHOD_4 ( ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 db , Change . Id changeId ) throws OrmException { METHOD_2 ( ! VAR_1 . METHOD_3 ( ) , STRING_1 + STRING_2 ) ; Change change = METHOD_4 ( db ) . changes ( ) . get ( changeId ) ; METHOD_5 ( change , STRING_3 , changeId ) ; return new TYPE_1 ( args , change ) . METHOD_6 ( ) ; }
protected List < Change > METHOD_1 ( TYPE_1 ctx ) throws OrmException { String ref = event . getRefName ( ) ; Project . NameKey project = new Project . NameKey ( event . METHOD_2 ( ) ) ; if ( ref . equals ( VAR_1 ) ) { return METHOD_3 ( VAR_2 . get ( ) . METHOD_4 ( project ) ) ; } return METHOD_3 ( VAR_2 . get ( ) . METHOD_5 ( new Branch . NameKey ( project , ref ) ) ) ; }
protected TYPE_1 METHOD_1 ( TYPE_2 ctx ) throws OrmException , IOException , TYPE_3 { TYPE_4 db = ctx . METHOD_2 ( ) . get ( ) ; try { Change c = VAR_1 . METHOD_3 ( db , new Project . NameKey ( event . METHOD_4 ( ) ) , id ) . getChange ( ) ; VAR_2 . create ( VAR_3 , VAR_4 ) . index ( db , c ) ; } catch ( TYPE_3 e ) { VAR_2 . create ( VAR_3 , VAR_4 ) . delete ( id ) ; } return null ; }
public Change METHOD_1 ( ) throws OrmException { notes = VAR_1 . create ( db , project , VAR_2 ) ; change = notes . getChange ( ) ; if ( change == null ) { throw new OrmException ( STRING_1 + VAR_2 ) ; } METHOD_3 ( null ) ; return change ; }
public boolean METHOD_1 ( final ChangeData object ) throws OrmException { if ( id . get ( ) == VAR_1 ) { Account . Id VAR_2 = object . change ( ) . METHOD_4 ( ) ; return VAR_2 == null ; } return id . equals ( object . change ( ) . METHOD_4 ( ) ) ; }
public void METHOD_1 ( ) throws Exception { String changeId = METHOD_2 ( ) . getChangeId ( ) ; Map < String , TYPE_1 > VAR_1 = METHOD_3 ( changeId ) ; assertThat ( VAR_1 ) . METHOD_5 ( INT_1 ) ; assertThat ( VAR_1 ) . METHOD_4 ( STRING_1 ) ; assertThat ( VAR_1 ) . METHOD_4 ( STRING_2 ) ; assertThat ( VAR_1 ) . METHOD_4 ( STRING_3 ) ; }
public void METHOD_1 ( TYPE_1 db , TYPE_2 update , TYPE_3 < TYPE_4 > VAR_1 ) throws OrmException { for ( TYPE_4 c : VAR_1 ) { update . METHOD_2 ( c ) ; } db . METHOD_3 ( ) . delete ( METHOD_4 ( update . getId ( ) , VAR_3 , VAR_1 ) ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result r = METHOD_2 ( STRING_1 ) ; TYPE_2 input = new TYPE_2 ( ) ; TYPE_3 c = METHOD_3 ( VAR_1 , VAR_2 , 0 , STRING_2 , false ) ; VAR_3 = new TYPE_4 < > ( ) ; VAR_3 . put ( VAR_1 , TYPE_5 . of ( c ) ) ; VAR_4 . METHOD_4 ( VAR_5 class ) ; VAR_4 . METHOD_5 ( STRING_3 + VAR_1 + STRING_4 ) ; revision ( r ) . METHOD_6 ( input ) ; }
private boolean METHOD_1 ( Branch . NameKey branch , Account VAR_1 ) throws TYPE_1 { try { VAR_2 . METHOD_3 ( VAR_1 . getId ( ) ) . ref ( branch ) . METHOD_4 ( VAR_3 ) ; return true ; } catch ( TYPE_2 e ) { return false ; } }
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) throws TYPE_4 { return TYPE_5 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) , false ) . map ( TYPE_6 : : get ) . METHOD_1 ( TYPE_7 : : METHOD_6 ) . METHOD_1 ( p - > METHOD_5 ( p , VAR_1 ) ) ; }
private TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( null , null , null , null , null , null , null ) { public TYPE_2 < String , TYPE_3 > apply ( ) throws TYPE_4 { throw new TYPE_5 ( STRING_1 ) ; } } ; }
private TYPE_1 METHOD_1 ( long VAR_1 ) { return new TYPE_1 ( null , null , null , null , null , null , null ) { public TYPE_2 < String , TYPE_3 > apply ( ) throws TYPE_4 { TYPE_2 < String , TYPE_3 > projects = new TYPE_5 < > ( ) ; projects . put ( STRING_1 , new TYPE_3 ( ) ) ; try { TYPE_6 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_7 e ) { throw new TYPE_8 ( e ) ; } return projects ; } } ; }
private void METHOD_1 ( ) throws IOException , TYPE_1 , TYPE_2 { project = VAR_1 . getProject ( ) ; projectName = project . METHOD_2 ( ) ; try { repo = VAR_2 . METHOD_3 ( projectName ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( 1 , STRING_1 + project . getName ( ) + STRING_2 , e ) ; } try { METHOD_4 ( ) ; } finally { repo . close ( ) ; } }
public boolean METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , IOException { TYPE_3 < PatchSet > patchSets = VAR_1 . METHOD_2 ( ctx . METHOD_3 ( ) ) ; METHOD_4 ( ctx , id , patchSets ) ; METHOD_5 ( id , patchSets ) ; ctx . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( ctx . getChange ( ) , ctx . METHOD_8 ( ) , ctx . METHOD_9 ( ) ) ; return true ; }
public TYPE_1 < Account . Id , String > METHOD_1 ( Change . Id changeId ) { List < ChangeData > VAR_1 = VAR_2 . get ( ) . METHOD_2 ( VAR_3 , VAR_4 ) . METHOD_3 ( changeId ) ; if ( VAR_1 . size ( ) != 1 ) { throw new TYPE_2 ( changeId ) ; } return VAR_1 . get ( 0 ) . METHOD_4 ( ) ; }
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { METHOD_2 ( rsrc . METHOD_3 ( ) . METHOD_4 ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) . getId ( ) , TYPE_3 . of ( VAR_1 ) , TYPE_3 . of ( ) ) ; }
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { METHOD_2 ( rsrc . METHOD_3 ( ) . METHOD_4 ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) . getId ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( VAR_1 ) ) ; }
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { METHOD_2 ( rsrc . METHOD_3 ( ) . METHOD_4 ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) . getId ( ) , TYPE_3 . of ( METHOD_5 ( rsrc . getChange ( ) ) ) , TYPE_3 . of ( METHOD_6 ( rsrc . getChange ( ) ) ) ) ; }
public void METHOD_1 ( TYPE_1 rsrc ) throws TYPE_2 { METHOD_2 ( rsrc . METHOD_3 ( ) . METHOD_4 ( ) . getAccountId ( ) , rsrc . getProject ( ) , rsrc . getChange ( ) . getId ( ) , TYPE_3 . of ( METHOD_5 ( rsrc . getChange ( ) ) ) , TYPE_3 . of ( METHOD_6 ( rsrc . getChange ( ) ) ) ) ; }
private void METHOD_1 ( ) throws IOException { try ( TYPE_1 timer = VAR_1 . start ( VAR_2 ) ) { if ( isEmpty ( ) ) { return ; } METHOD_2 ( ) ; if ( ! VAR_3 . isEmpty ( ) || ! VAR_4 . isEmpty ( ) ) { METHOD_3 ( ) ; } METHOD_4 ( ) ; } }
public TYPE_1 METHOD_1 ( boolean VAR_1 ) throws IOException { METHOD_2 ( ) ; if ( isEmpty ( ) ) { VAR_2 = true ; return null ; } try ( TYPE_2 timer = VAR_3 . start ( VAR_4 ) ) { METHOD_3 ( ) ; TYPE_1 result = METHOD_1 ( VAR_5 , VAR_1 , VAR_6 ) ; METHOD_1 ( VAR_7 , VAR_1 , null ) ; VAR_2 = true ; return result ; } finally { close ( ) ; } }
private TYPE_1 METHOD_1 ( Change . Id id ) { METHOD_2 ( STRING_1 , id ) ; Change c = VAR_1 . get ( id ) ; boolean VAR_2 = c != null ; if ( ! VAR_2 ) { c = TYPE_2 . METHOD_3 ( project , id ) ; } else { METHOD_2 ( STRING_2 , id ) ; } TYPE_3 notes = VAR_3 . METHOD_4 ( c , ! VAR_2 ) ; return new TYPE_1 ( notes ) ; }
protected List < ChangeData > METHOD_1 ( List < ChangeData > VAR_1 ) { if ( ! METHOD_2 ( ) ) { ChangeData . METHOD_3 ( VAR_1 ) ; } return super . METHOD_1 ( VAR_1 ) ; }
private void METHOD_1 ( String VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { TYPE_1 VAR_2 = VAR_3 . create ( VAR_1 ) ; if ( VAR_4 . add ( VAR_2 ) ) { TYPE_2 < ? > VAR_5 = VAR_6 . submit ( VAR_2 ) ; METHOD_3 ( VAR_5 , VAR_2 ) ; VAR_7 . put ( VAR_1 , TYPE_3 . METHOD_4 ( ) ) ; } } }
private void METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < ? > VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ( ) - > VAR_4 . METHOD_4 ( VAR_2 ) , TYPE_6 . METHOD_5 ( ) ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) . create ( ) ; TYPE_2 input = new TYPE_2 ( ) ; VAR_3 = VAR_1 . get ( ) ; input . name = STRING_1 ; TYPE_3 info = VAR_4 . id ( VAR_1 ) . update ( input ) ; assertThat ( VAR_5 ) . isEqualTo ( VAR_3 ) ; assertThat ( info . name ) . isEqualTo ( input . name ) ; }
public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; METHOD_5 ( STRING_1 ) . METHOD_6 ( METHOD_8 ( METHOD_3 ( ) . METHOD_4 ( ) ) ) . isEqualTo ( METHOD_8 ( VAR_1 ) ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 ref = METHOD_2 ( VAR_1 ) ; assertThat ( VAR_4 . METHOD_4 ( VAR_3 , ref ) ) . METHOD_5 ( ) ; assertThat ( VAR_2 . METHOD_6 ( VAR_3 , ref ) ) . isEqualTo ( ref . METHOD_7 ( ) ) ; }
private TYPE_1 METHOD_1 ( ) { return TYPE_2 . builder ( ) . METHOD_2 ( new NameKey ( STRING_1 ) ) . METHOD_3 ( VAR_1 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( STRING_2 ) ) . METHOD_7 ( TYPE_5 . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . METHOD_8 ( ) ) . METHOD_10 ( ObjectId . METHOD_11 ( ) ) ; }
public void METHOD_1 ( ) throws Exception { TYPE_1 . Result result = METHOD_4 ( ) ; VAR_4 = result . METHOD_5 ( ) ; VAR_5 = result . getChangeId ( ) ; METHOD_6 ( VAR_5 ) ; }
public List < TYPE_1 > METHOD_1 ( String VAR_1 , TYPE_2 ... VAR_2 ) throws TYPE_3 { try { TYPE_4 TYPE_5 = VAR_3 . get ( ) ; TYPE_5 . METHOD_2 ( VAR_1 ) ; TYPE_6 . of ( VAR_2 ) . METHOD_3 ( TYPE_5 : : METHOD_4 ) ; return TYPE_5 . apply ( VAR_4 ) ; } catch ( Exception e ) { throw METHOD_5 ( STRING_1 , e ) ; } }
public void METHOD_1 ( ) throws Exception { String VAR_1 = STRING_1 ; VAR_2 . put ( STRING_2 + VAR_1 ) ; String VAR_3 = name ( STRING_3 ) ; VAR_4 . METHOD_2 ( STRING_4 + VAR_1 + STRING_5 + VAR_3 + STRING_6 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_1 VAR_5 = VAR_6 . get ( new Project . NameKey ( VAR_3 ) ) ; assertThat ( VAR_5 ) . METHOD_4 ( ) ; assertThat ( VAR_5 . getName ( ) ) . isEqualTo ( VAR_3 ) ; }
