536
#method_before
void postDismiss() {
    removeDismissCallbacks();
    View decorView = getDecorView();
    if (decorView != null) {
        decorView.post(mDismissRunnable);
    }
}
#method_after
void postDismiss() {
    removeDismissCallbacks();
    View decorView = getDecorView();
    if (decorView != null) {
        // If decorView is null, dialog was already dismissed
        decorView.post(mDismissRunnable);
    }
}
#end_block

#method_before
@NonNull
public WebViewAssetLoader build() {
    String assetsPath = mAssetsUri.getPath();
    String resourcesPath = mResourcesUri.getPath();
    if (assetsPath.startsWith(resourcesPath)) {
        throw new IllegalArgumentException("Resources path cannot be a prefix of assets path!");
    }
    if (resourcesPath.startsWith(assetsPath)) {
        throw new IllegalArgumentException("Assets path cannot be a prefix of resources path!");
    }
    AssetHelper assetHelper = new AssetHelper(mContext);
    PathHandler assetHandler = new AssetsPathHandler(mAssetsUri.getAuthority(), mAssetsUri.getPath(), mAllowHttp, assetHelper);
    PathHandler resourceHandler = new ResourcesPathHandler(mResourcesUri.getAuthority(), mResourcesUri.getPath(), mAllowHttp, assetHelper);
    return new WebViewAssetLoader(assetHandler, resourceHandler);
}
#method_after
@NonNull
public WebViewAssetLoader build() {
    String assetsPath = mAssetsUri.getPath();
    String resourcesPath = mResourcesUri.getPath();
    if (assetsPath.startsWith(resourcesPath)) {
        throw new IllegalArgumentException("Resources path cannot be prefix of assets path");
    }
    if (resourcesPath.startsWith(assetsPath)) {
        throw new IllegalArgumentException("Assets path cannot be prefix of resources path");
    }
    AssetHelper assetHelper = new AssetHelper(mContext);
    PathHandler assetHandler = new AssetsPathHandler(mAssetsUri.getAuthority(), mAssetsUri.getPath(), mAllowHttp, assetHelper);
    PathHandler resourceHandler = new ResourcesPathHandler(mResourcesUri.getAuthority(), mResourcesUri.getPath(), mAllowHttp, assetHelper);
    return new WebViewAssetLoader(assetHandler, resourceHandler);
}
#end_block

#method_before
public static void imageCopy(Image src, Image dst) {
    if (src == null || dst == null) {
        throw new IllegalArgumentException("Images should be non-null");
    }
    if (src.getFormat() != dst.getFormat()) {
        throw new IllegalArgumentException("Src and dst images should have the same format");
    }
    if (src.getFormat() == ImageFormat.PRIVATE || dst.getFormat() == ImageFormat.PRIVATE) {
        throw new IllegalArgumentException("PRIVATE format images are not copyable");
    }
    Size srcSize = new Size(src.getWidth(), src.getHeight());
    Size dstSize = new Size(dst.getWidth(), dst.getHeight());
    if (!srcSize.equals(dstSize)) {
        throw new IllegalArgumentException("source image size " + srcSize + " is different" + " with " + "destination image size " + dstSize);
    }
    // TODO: check the owner of the dst image, it must be from ImageWriter, other source may
    // not be writable. Maybe we should add an isWritable() method in image class.
    Plane[] srcPlanes = src.getPlanes();
    Plane[] dstPlanes = dst.getPlanes();
    ByteBuffer srcBuffer = null;
    ByteBuffer dstBuffer = null;
    for (int i = 0; i < srcPlanes.length; i++) {
        srcBuffer = srcPlanes[i].getBuffer();
        dstBuffer = dstPlanes[i].getBuffer();
        int srcPos = srcBuffer.position();
        srcBuffer.rewind();
        dstBuffer.rewind();
        int srcRowStride = srcPlanes[i].getRowStride();
        int dstRowStride = dstPlanes[i].getRowStride();
        int srcPixStride = srcPlanes[i].getPixelStride();
        int dstPixStride = dstPlanes[i].getPixelStride();
        if (srcPixStride > 2 || dstPixStride > 2) {
            throw new IllegalArgumentException("source pixel stride " + srcPixStride + " with destination pixel stride " + dstPixStride + " is not supported");
        }
        if (srcRowStride == dstRowStride && srcPixStride == dstPixStride) {
            // Fast path, just copy the content in the byteBuffer all together.
            dstBuffer.put(srcBuffer);
        } else {
            int srcOffset = srcBuffer.position();
            int dstOffset = dstBuffer.position();
            Size effectivePlaneSize = getEffectivePlaneSizeForImage(src, i);
            int srcRowByteCount = effectivePlaneSize.getWidth() * srcPixStride;
            byte[] srcDataRow = new byte[srcRowByteCount];
            if (srcPixStride == dstPixStride) {
                // Row by row copy case
                for (int row = 0; row < effectivePlaneSize.getHeight(); row++) {
                    if (row == effectivePlaneSize.getHeight() - 1) {
                        // Special case for interleaved planes: need handle the last row
                        // carefully to avoid memory corruption. Check if we have enough bytes
                        // to copy.
                        int remainingBytes = srcBuffer.remaining() - srcOffset;
                        if (srcRowByteCount > remainingBytes) {
                            srcRowByteCount = remainingBytes;
                        }
                    }
                    srcBuffer.get(srcDataRow, srcOffset, srcRowByteCount);
                    dstBuffer.put(srcDataRow, /*offset*/
                    0, srcRowByteCount);
                    srcOffset += srcRowStride;
                    dstOffset += dstRowStride;
                }
            } else {
                // Row by row per pixel copy case
                int dstRowByteCount = effectivePlaneSize.getWidth() * dstPixStride;
                byte[] dstDataRow = new byte[dstRowByteCount];
                for (int row = 0; row < effectivePlaneSize.getHeight(); row++) {
                    if (row == effectivePlaneSize.getHeight() - 1) {
                        // Special case for interleaved planes: need handle the last row
                        // carefully to avoid memory corruption. Check if we have enough bytes
                        // to copy.
                        int remainingBytes = srcBuffer.remaining() - srcOffset;
                        if (srcRowByteCount > remainingBytes) {
                            srcRowByteCount = remainingBytes;
                        }
                        remainingBytes = dstBuffer.remaining() - dstOffset;
                        if (dstRowByteCount > remainingBytes) {
                            dstRowByteCount = remainingBytes;
                        }
                    }
                    srcBuffer.get(srcDataRow, srcOffset, srcRowByteCount);
                    for (int x = 0; x < effectivePlaneSize.getWidth(); x++) {
                        dstDataRow[x * dstPixStride] = srcDataRow[x * srcPixStride];
                    }
                    dstBuffer.put(dstDataRow, /*offset*/
                    0, dstRowByteCount);
                    srcOffset += srcRowStride;
                    dstOffset += dstRowStride;
                }
            }
        }
        srcBuffer.position(srcPos);
        dstBuffer.rewind();
    }
}
#method_after
public static void imageCopy(Image src, Image dst) {
    if (src == null || dst == null) {
        throw new IllegalArgumentException("Images should be non-null");
    }
    if (src.getFormat() != dst.getFormat()) {
        throw new IllegalArgumentException("Src and dst images should have the same format");
    }
    if (src.getFormat() == ImageFormat.PRIVATE || dst.getFormat() == ImageFormat.PRIVATE) {
        throw new IllegalArgumentException("PRIVATE format images are not copyable");
    }
    Size srcSize = new Size(src.getWidth(), src.getHeight());
    Size dstSize = new Size(dst.getWidth(), dst.getHeight());
    if (!srcSize.equals(dstSize)) {
        throw new IllegalArgumentException("source image size " + srcSize + " is different" + " with " + "destination image size " + dstSize);
    }
    // TODO: check the owner of the dst image, it must be from ImageWriter, other source may
    // not be writable. Maybe we should add an isWritable() method in image class.
    Plane[] srcPlanes = src.getPlanes();
    Plane[] dstPlanes = dst.getPlanes();
    ByteBuffer srcBuffer = null;
    ByteBuffer dstBuffer = null;
    for (int i = 0; i < srcPlanes.length; i++) {
        srcBuffer = srcPlanes[i].getBuffer();
        dstBuffer = dstPlanes[i].getBuffer();
        int srcPos = srcBuffer.position();
        srcBuffer.rewind();
        dstBuffer.rewind();
        int srcRowStride = srcPlanes[i].getRowStride();
        int dstRowStride = dstPlanes[i].getRowStride();
        int srcPixStride = srcPlanes[i].getPixelStride();
        int dstPixStride = dstPlanes[i].getPixelStride();
        if (srcPixStride > 2 || dstPixStride > 2) {
            throw new IllegalArgumentException("source pixel stride " + srcPixStride + " with destination pixel stride " + dstPixStride + " is not supported");
        }
        if (srcRowStride == dstRowStride && srcPixStride == dstPixStride) {
            // Fast path, just copy the content in the byteBuffer all together.
            dstBuffer.put(srcBuffer);
        } else {
            Size effectivePlaneSize = getEffectivePlaneSizeForImage(src, i);
            int srcRowByteCount = srcRowStride;
            byte[] srcDataRow = new byte[srcRowByteCount];
            if (srcPixStride == dstPixStride) {
                // Row by row copy case
                for (int row = 0; row < effectivePlaneSize.getHeight(); row++) {
                    if (row == effectivePlaneSize.getHeight() - 1) {
                        // Special case for interleaved planes: need handle the last row
                        // carefully to avoid memory corruption. Check if we have enough bytes
                        // to copy.
                        int remainingBytes = srcBuffer.remaining();
                        if (srcRowByteCount > remainingBytes) {
                            srcRowByteCount = remainingBytes;
                        }
                    }
                    srcBuffer.get(srcDataRow, /*offset*/
                    0, srcRowByteCount);
                    dstBuffer.put(srcDataRow, /*offset*/
                    0, srcRowByteCount);
                }
            } else {
                // Row by row per pixel copy case
                int dstRowByteCount = dstRowStride;
                byte[] dstDataRow = new byte[dstRowByteCount];
                for (int row = 0; row < effectivePlaneSize.getHeight(); row++) {
                    if (row == effectivePlaneSize.getHeight() - 1) {
                        // Special case for interleaved planes: need handle the last row
                        // carefully to avoid memory corruption. Check if we have enough bytes
                        // to copy.
                        int remainingBytes = srcBuffer.remaining();
                        if (srcRowByteCount > remainingBytes) {
                            srcRowByteCount = remainingBytes;
                        }
                        remainingBytes = dstBuffer.remaining();
                        if (dstRowByteCount > remainingBytes) {
                            dstRowByteCount = remainingBytes;
                        }
                    }
                    srcBuffer.get(srcDataRow, /*offset*/
                    0, srcRowByteCount);
                    int pos = dstBuffer.position();
                    dstBuffer.get(dstDataRow, /*offset*/
                    0, dstRowByteCount);
                    dstBuffer.position(pos);
                    for (int x = 0; x < effectivePlaneSize.getWidth(); x++) {
                        dstDataRow[x * dstPixStride] = srcDataRow[x * srcPixStride];
                    }
                    dstBuffer.put(dstDataRow, /*offset*/
                    0, dstRowByteCount);
                }
            }
        }
        srcBuffer.position(srcPos);
        dstBuffer.rewind();
    }
}
#end_block

#method_before
private static Size getEffectivePlaneSizeForImage(Image image, int planeIdx) {
    switch(image.getFormat()) {
        case ImageFormat.YUV_420_888:
            if (planeIdx == 0) {
                return new Size(image.getWidth(), image.getHeight());
            } else {
                return new Size(image.getWidth() / 2, image.getHeight() / 2);
            }
        case ImageFormat.JPEG:
        case ImageFormat.Y8:
        case ImageFormat.RAW_SENSOR:
        case ImageFormat.RAW10:
        case ImageFormat.RAW12:
        case ImageFormat.DEPTH16:
            return new Size(image.getWidth(), image.getHeight());
        case ImageFormat.PRIVATE:
            return new Size(0, 0);
        default:
            throw new UnsupportedOperationException(String.format("Invalid image format %d", image.getFormat()));
    }
}
#method_after
private static Size getEffectivePlaneSizeForImage(Image image, int planeIdx) {
    switch(image.getFormat()) {
        case ImageFormat.YUV_420_888:
            if (planeIdx == 0) {
                return new Size(image.getWidth(), image.getHeight());
            } else {
                return new Size(image.getWidth() / 2, image.getHeight() / 2);
            }
        case ImageFormat.JPEG:
        case ImageFormat.RAW_SENSOR:
        case ImageFormat.RAW10:
        case ImageFormat.RAW12:
        case ImageFormat.DEPTH16:
            return new Size(image.getWidth(), image.getHeight());
        case ImageFormat.PRIVATE:
            return new Size(0, 0);
        default:
            throw new UnsupportedOperationException(String.format("Invalid image format %d", image.getFormat()));
    }
}
#end_block

#method_before
public static boolean isImageStronglyEqual(Image lhsImg, Image rhsImg) {
    if (lhsImg == null || rhsImg == null) {
        throw new IllegalArgumentException("Images should be non-null");
    }
    if (lhsImg.getFormat() != rhsImg.getFormat()) {
        Log.i(TAG, "lhsImg format " + lhsImg.getFormat() + " is different with rhsImg format " + rhsImg.getFormat());
        return false;
    }
    if (lhsImg.getWidth() != rhsImg.getWidth()) {
        Log.i(TAG, "lhsImg width " + lhsImg.getWidth() + " is different with rhsImg width " + rhsImg.getWidth());
        return false;
    }
    if (lhsImg.getHeight() != rhsImg.getHeight()) {
        Log.i(TAG, "lhsImg height " + lhsImg.getHeight() + " is different with rhsImg height " + rhsImg.getHeight());
        return false;
    }
    if (lhsImg.getTimestamp() != rhsImg.getTimestamp()) {
        Log.i(TAG, "lhsImg timestamp " + lhsImg.getTimestamp() + " is different with rhsImg timestamp " + rhsImg.getTimestamp());
        return false;
    }
    if (!lhsImg.getCropRect().equals(rhsImg.getCropRect())) {
        Log.i(TAG, "lhsImg crop rect " + lhsImg.getCropRect() + " is different with rhsImg crop rect " + rhsImg.getCropRect());
        return false;
    }
    // Compare data inside of the image.
    Plane[] lhsPlanes = lhsImg.getPlanes();
    Plane[] rhsPlanes = rhsImg.getPlanes();
    ByteBuffer lhsBuffer = null;
    ByteBuffer rhsBuffer = null;
    for (int i = 0; i < lhsPlanes.length; i++) {
        lhsBuffer = lhsPlanes[i].getBuffer();
        rhsBuffer = rhsPlanes[i].getBuffer();
        if (!lhsBuffer.equals(rhsBuffer)) {
            Log.i(TAG, "byte buffers for plane " + i + " don't matach.");
            return false;
        }
    }
    return true;
}
#method_after
public static boolean isImageStronglyEqual(Image lhsImg, Image rhsImg) {
    if (lhsImg == null || rhsImg == null) {
        throw new IllegalArgumentException("Images should be non-null");
    }
    if (lhsImg.getFormat() != rhsImg.getFormat()) {
        Log.i(TAG, "lhsImg format " + lhsImg.getFormat() + " is different with rhsImg format " + rhsImg.getFormat());
        return false;
    }
    if (lhsImg.getWidth() != rhsImg.getWidth()) {
        Log.i(TAG, "lhsImg width " + lhsImg.getWidth() + " is different with rhsImg width " + rhsImg.getWidth());
        return false;
    }
    if (lhsImg.getHeight() != rhsImg.getHeight()) {
        Log.i(TAG, "lhsImg height " + lhsImg.getHeight() + " is different with rhsImg height " + rhsImg.getHeight());
        return false;
    }
    if (lhsImg.getTimestamp() != rhsImg.getTimestamp()) {
        Log.i(TAG, "lhsImg timestamp " + lhsImg.getTimestamp() + " is different with rhsImg timestamp " + rhsImg.getTimestamp());
        return false;
    }
    if (!lhsImg.getCropRect().equals(rhsImg.getCropRect())) {
        Log.i(TAG, "lhsImg crop rect " + lhsImg.getCropRect() + " is different with rhsImg crop rect " + rhsImg.getCropRect());
        return false;
    }
    // Compare data inside of the image.
    Plane[] lhsPlanes = lhsImg.getPlanes();
    Plane[] rhsPlanes = rhsImg.getPlanes();
    ByteBuffer lhsBuffer = null;
    ByteBuffer rhsBuffer = null;
    for (int i = 0; i < lhsPlanes.length; i++) {
        lhsBuffer = lhsPlanes[i].getBuffer();
        rhsBuffer = rhsPlanes[i].getBuffer();
        lhsBuffer.rewind();
        rhsBuffer.rewind();
        // Special case for YUV420_888 buffer with different chroma layout
        if (lhsImg.getFormat() == ImageFormat.YUV_420_888 && (i != 0) && (lhsPlanes[i].getPixelStride() != rhsPlanes[i].getPixelStride() || lhsPlanes[i].getRowStride() != rhsPlanes[i].getRowStride())) {
            int width = lhsImg.getWidth() / 2;
            int height = lhsImg.getHeight() / 2;
            int rowSizeL = lhsPlanes[i].getRowStride();
            int rowSizeR = rhsPlanes[i].getRowStride();
            byte[] lhsRow = new byte[rowSizeL];
            byte[] rhsRow = new byte[rowSizeR];
            int pixStrideL = lhsPlanes[i].getPixelStride();
            int pixStrideR = rhsPlanes[i].getPixelStride();
            for (int r = 0; r < height; r++) {
                if (r == height - 1) {
                    rowSizeL = lhsBuffer.remaining();
                    rowSizeR = rhsBuffer.remaining();
                }
                lhsBuffer.get(lhsRow, /*offset*/
                0, rowSizeL);
                rhsBuffer.get(rhsRow, /*offset*/
                0, rowSizeR);
                for (int c = 0; c < width; c++) {
                    if (lhsRow[c * pixStrideL] != rhsRow[c * pixStrideR]) {
                        Log.i(TAG, String.format("byte buffers for plane %d row %d col %d don't match.", i, r, c));
                        return false;
                    }
                }
            }
        } else {
            // Compare entire buffer directly
            if (!lhsBuffer.equals(rhsBuffer)) {
                Log.i(TAG, "byte buffers for plane " + i + " don't match.");
                return false;
            }
        }
    }
    return true;
}
#end_block

#method_before
@Override
@NonNull
public LiveData<WorkInfo> getWorkInfoByIdLiveData(@NonNull UUID id) {
    WorkSpecDao dao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = dao.getWorkStatusPojoLiveDataForIds(Collections.singletonList(id.toString()));
    LiveData<WorkInfo> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, new Function<List<WorkSpec.WorkInfoPojo>, WorkInfo>() {

        @Override
        public WorkInfo apply(List<WorkSpec.WorkInfoPojo> input) {
            WorkInfo workInfo = null;
            if (input != null && input.size() > 0) {
                workInfo = input.get(0).toWorkInfo();
            }
            return workInfo;
        }
    }, mWorkTaskExecutor);
    return deduped;
}
#method_after
@Override
@NonNull
public LiveData<WorkInfo> getWorkInfoByIdLiveData(@NonNull UUID id) {
    WorkSpecDao dao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = dao.getWorkStatusPojoLiveDataForIds(Collections.singletonList(id.toString()));
    LiveData<WorkInfo> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, new Function<List<WorkSpec.WorkInfoPojo>, WorkInfo>() {

        @Override
        public WorkInfo apply(List<WorkSpec.WorkInfoPojo> input) {
            WorkInfo workInfo = null;
            if (input != null && input.size() > 0) {
                workInfo = input.get(0).toWorkInfo();
            }
            return workInfo;
        }
    }, mWorkTaskExecutor);
    return mLiveDataTracker.track(deduped);
}
#end_block

#method_before
@Override
@NonNull
public LiveData<List<WorkInfo>> getWorkInfosByTagLiveData(@NonNull String tag) {
    WorkSpecDao workSpecDao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = workSpecDao.getWorkStatusPojoLiveDataForTag(tag);
    LiveData<List<WorkInfo>> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, WorkSpec.WORK_INFO_MAPPER, mWorkTaskExecutor);
    return deduped;
}
#method_after
@Override
@NonNull
public LiveData<List<WorkInfo>> getWorkInfosByTagLiveData(@NonNull String tag) {
    WorkSpecDao workSpecDao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = workSpecDao.getWorkStatusPojoLiveDataForTag(tag);
    LiveData<List<WorkInfo>> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, WorkSpec.WORK_INFO_MAPPER, mWorkTaskExecutor);
    return mLiveDataTracker.track(deduped);
}
#end_block

#method_before
@Override
@NonNull
public LiveData<List<WorkInfo>> getWorkInfosForUniqueWorkLiveData(@NonNull String name) {
    WorkSpecDao workSpecDao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = workSpecDao.getWorkStatusPojoLiveDataForName(name);
    LiveData<List<WorkInfo>> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, WorkSpec.WORK_INFO_MAPPER, mWorkTaskExecutor);
    return deduped;
}
#method_after
@Override
@NonNull
public LiveData<List<WorkInfo>> getWorkInfosForUniqueWorkLiveData(@NonNull String name) {
    WorkSpecDao workSpecDao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = workSpecDao.getWorkStatusPojoLiveDataForName(name);
    LiveData<List<WorkInfo>> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, WorkSpec.WORK_INFO_MAPPER, mWorkTaskExecutor);
    return mLiveDataTracker.track(deduped);
}
#end_block

#method_before
LiveData<List<WorkInfo>> getWorkInfosById(@NonNull List<String> workSpecIds) {
    WorkSpecDao dao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = dao.getWorkStatusPojoLiveDataForIds(workSpecIds);
    LiveData<List<WorkInfo>> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, WorkSpec.WORK_INFO_MAPPER, mWorkTaskExecutor);
    return deduped;
}
#method_after
LiveData<List<WorkInfo>> getWorkInfosById(@NonNull List<String> workSpecIds) {
    WorkSpecDao dao = mWorkDatabase.workSpecDao();
    LiveData<List<WorkSpec.WorkInfoPojo>> inputLiveData = dao.getWorkStatusPojoLiveDataForIds(workSpecIds);
    LiveData<List<WorkInfo>> deduped = LiveDataUtils.dedupedMappedLiveDataFor(inputLiveData, WorkSpec.WORK_INFO_MAPPER, mWorkTaskExecutor);
    return mLiveDataTracker.track(deduped);
}
#end_block

#method_before
@NonNull
@Override
public final <T extends ViewModel> T create(@NonNull String key, @NonNull Class<T> modelClass) {
    Bundle restoredState = mSavedStateRegistry.consumeRestoredStateForKey(key);
    SavedStateHandle handle = SavedStateHandle.createHandle(restoredState, mDefaultArgs);
    SavedStateHandleController controller = new SavedStateHandleController(key, handle);
    controller.attachToLifecycle(mSavedStateRegistry, mLifecycle);
    T viewmodel = create(key, modelClass, handle);
    viewmodel.setTagIfAbsent(TAG_SAVED_STATE_HANDLE_CONTROLLER, controller);
    mSavedStateRegistry.runOnNextRecreation(OnRecreation.class);
    return viewmodel;
}
#method_after
@NonNull
@Override
public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
    // ViewModelProvider calls correct create that support same modelClass with different keys
    // If a developer manually calls this method, there is no "key" in picture, so factory
    // simply uses classname internally as as key.
    String canonicalName = modelClass.getCanonicalName();
    if (canonicalName == null) {
        throw new IllegalArgumentException("Local and anonymous classes can not be ViewModels");
    }
    return create(canonicalName, modelClass);
}
#end_block

#method_before
@NonNull
@Override
public final <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
    throw new UnsupportedOperationException("create(String, Class<?>) must be called on " + "implementaions of KeyedFactory");
}
#method_after
@NonNull
@Override
public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
    throw new UnsupportedOperationException("create(String, Class<?>) must be called on " + "implementaions of KeyedFactory");
}
#end_block

#method_before
public PhoneAccountHandle getPhoneAccountHandle() {
    return mHandle;
}
#method_after
@NonNull
public PhoneAccountHandle getPhoneAccountHandle() {
    return mHandle;
}
#end_block

#method_before
@Override
public void handleMessage(Message message) {
    final int slotId = message.arg1;
    final INetworkServiceCallback callback = (INetworkServiceCallback) message.obj;
    NetworkServiceProvider serviceProvider = mServiceMap.get(slotId);
    switch(message.what) {
        case NETWORK_SERVICE_CREATE_NETWORK_SERVICE_PROVIDER:
            // If the service provider doesn't exist yet, we try to create it.
            if (serviceProvider == null) {
                mServiceMap.put(slotId, onCreateNetworkServiceProvider(slotId));
            }
            break;
        case NETWORK_SERVICE_REMOVE_NETWORK_SERVICE_PROVIDER:
            // If the service provider doesn't exist yet, we try to create it.
            if (serviceProvider != null) {
                serviceProvider.close();
                mServiceMap.remove(slotId);
            }
            break;
        case NETWORK_SERVICE_REMOVE_ALL_NETWORK_SERVICE_PROVIDERS:
            for (int i = 0; i < mServiceMap.size(); i++) {
                serviceProvider = mServiceMap.get(i);
                if (serviceProvider != null) {
                    serviceProvider.close();
                }
            }
            mServiceMap.clear();
            break;
        case NETWORK_SERVICE_GET_REGISTRATION_STATE:
            if (serviceProvider == null)
                break;
            int domainId = message.arg2;
            serviceProvider.getNetworkRegistrationState(domainId, new NetworkServiceCallback(callback));
            break;
        case NETWORK_SERVICE_REGISTER_FOR_STATE_CHANGE:
            if (serviceProvider == null)
                break;
            serviceProvider.registerForStateChanged(callback);
            break;
        case NETWORK_SERVICE_UNREGISTER_FOR_STATE_CHANGE:
            if (serviceProvider == null)
                break;
            serviceProvider.unregisterForStateChanged(callback);
            break;
        case NETWORK_SERVICE_INDICATION_NETWORK_STATE_CHANGED:
            if (serviceProvider == null)
                break;
            serviceProvider.notifyStateChangedToCallbacks();
            break;
        default:
            break;
    }
}
#method_after
@Override
public void handleMessage(Message message) {
    final int slotIndex = message.arg1;
    final INetworkServiceCallback callback = (INetworkServiceCallback) message.obj;
    NetworkServiceProvider serviceProvider = mServiceMap.get(slotIndex);
    switch(message.what) {
        case NETWORK_SERVICE_CREATE_NETWORK_SERVICE_PROVIDER:
            // If the service provider doesn't exist yet, we try to create it.
            if (serviceProvider == null) {
                mServiceMap.put(slotIndex, onCreateNetworkServiceProvider(slotIndex));
            }
            break;
        case NETWORK_SERVICE_REMOVE_NETWORK_SERVICE_PROVIDER:
            // If the service provider doesn't exist yet, we try to create it.
            if (serviceProvider != null) {
                serviceProvider.close();
                mServiceMap.remove(slotIndex);
            }
            break;
        case NETWORK_SERVICE_REMOVE_ALL_NETWORK_SERVICE_PROVIDERS:
            for (int i = 0; i < mServiceMap.size(); i++) {
                serviceProvider = mServiceMap.get(i);
                if (serviceProvider != null) {
                    serviceProvider.close();
                }
            }
            mServiceMap.clear();
            break;
        case NETWORK_SERVICE_GET_REGISTRATION_STATE:
            if (serviceProvider == null)
                break;
            int domainId = message.arg2;
            serviceProvider.getNetworkRegistrationState(domainId, new NetworkServiceCallback(callback));
            break;
        case NETWORK_SERVICE_REGISTER_FOR_STATE_CHANGE:
            if (serviceProvider == null)
                break;
            serviceProvider.registerForStateChanged(callback);
            break;
        case NETWORK_SERVICE_UNREGISTER_FOR_STATE_CHANGE:
            if (serviceProvider == null)
                break;
            serviceProvider.unregisterForStateChanged(callback);
            break;
        case NETWORK_SERVICE_INDICATION_NETWORK_STATE_CHANGED:
            if (serviceProvider == null)
                break;
            serviceProvider.notifyStateChangedToCallbacks();
            break;
        default:
            break;
    }
}
#end_block

#method_before
@Override
public void createNetworkServiceProvider(int slotId) {
    mHandler.obtainMessage(NETWORK_SERVICE_CREATE_NETWORK_SERVICE_PROVIDER, slotId, 0, null).sendToTarget();
}
#method_after
@Override
public void createNetworkServiceProvider(int slotIndex) {
    mHandler.obtainMessage(NETWORK_SERVICE_CREATE_NETWORK_SERVICE_PROVIDER, slotIndex, 0, null).sendToTarget();
}
#end_block

#method_before
@Override
public void removeNetworkServiceProvider(int slotId) {
    mHandler.obtainMessage(NETWORK_SERVICE_REMOVE_NETWORK_SERVICE_PROVIDER, slotId, 0, null).sendToTarget();
}
#method_after
@Override
public void removeNetworkServiceProvider(int slotIndex) {
    mHandler.obtainMessage(NETWORK_SERVICE_REMOVE_NETWORK_SERVICE_PROVIDER, slotIndex, 0, null).sendToTarget();
}
#end_block

#method_before
@Override
public void getNetworkRegistrationState(int slotId, int domain, INetworkServiceCallback callback) {
    mHandler.obtainMessage(NETWORK_SERVICE_GET_REGISTRATION_STATE, slotId, domain, callback).sendToTarget();
}
#method_after
@Override
public void getNetworkRegistrationState(int slotIndex, int domain, INetworkServiceCallback callback) {
    mHandler.obtainMessage(NETWORK_SERVICE_GET_REGISTRATION_STATE, slotIndex, domain, callback).sendToTarget();
}
#end_block

#method_before
@Override
public void registerForNetworkRegistrationStateChanged(int slotId, INetworkServiceCallback callback) {
    mHandler.obtainMessage(NETWORK_SERVICE_REGISTER_FOR_STATE_CHANGE, slotId, 0, callback).sendToTarget();
}
#method_after
@Override
public void registerForNetworkRegistrationStateChanged(int slotIndex, INetworkServiceCallback callback) {
    mHandler.obtainMessage(NETWORK_SERVICE_REGISTER_FOR_STATE_CHANGE, slotIndex, 0, callback).sendToTarget();
}
#end_block

#method_before
@Override
public void unregisterForNetworkRegistrationStateChanged(int slotId, INetworkServiceCallback callback) {
    mHandler.obtainMessage(NETWORK_SERVICE_UNREGISTER_FOR_STATE_CHANGE, slotId, 0, callback).sendToTarget();
}
#method_after
@Override
public void unregisterForNetworkRegistrationStateChanged(int slotIndex, INetworkServiceCallback callback) {
    mHandler.obtainMessage(NETWORK_SERVICE_UNREGISTER_FOR_STATE_CHANGE, slotIndex, 0, callback).sendToTarget();
}
#end_block

#method_before
public void onGetDataCallListComplete(@ResultCode int result, @Nullable List<DataCallResponse> dataCallList) {
    IDataServiceCallback callback = mCallback.get();
    if (callback != null) {
        try {
            callback.onGetDataCallListComplete(result, dataCallList);
        } catch (RemoteException e) {
            Rlog.e(TAG, "Failed to onGetDataCallListComplete on the remote");
        }
    }
}
#method_after
public void onGetDataCallListComplete(@ResultCode int result, @NonNull List<DataCallResponse> dataCallList) {
    IDataServiceCallback callback = mCallback.get();
    if (callback != null) {
        try {
            callback.onGetDataCallListComplete(result, dataCallList);
        } catch (RemoteException e) {
            Rlog.e(TAG, "Failed to onGetDataCallListComplete on the remote");
        }
    }
}
#end_block

#method_before
@Nullable
@ServiceType
public int[] getAvailableServices() {
    return mAvailableServices;
}
#method_after
@NonNull
@ServiceType
public int[] getAvailableServices() {
    return mAvailableServices;
}
#end_block

#method_before
public Builder setDomain(@Domain int domain) {
    mDomain = domain;
    return this;
}
#method_after
@NonNull
public Builder setDomain(@Domain int domain) {
    mDomain = domain;
    return this;
}
#end_block

#method_before
public Builder setTransportType(int transportType) {
    mTransportType = transportType;
    return this;
}
#method_after
@NonNull
public Builder setTransportType(int transportType) {
    mTransportType = transportType;
    return this;
}
#end_block

#method_before
public Builder setRegState(@RegState int regState) {
    mRegState = regState;
    return this;
}
#method_after
@NonNull
public Builder setRegState(@RegState int regState) {
    mRegState = regState;
    return this;
}
#end_block

#method_before
public Builder setRoamingType(@ServiceState.RoamingType int roamingType) {
    mRoamingType = roamingType;
    return this;
}
#method_after
@NonNull
public Builder setRoamingType(@ServiceState.RoamingType int roamingType) {
    mRoamingType = roamingType;
    return this;
}
#end_block

#method_before
public Builder setAccessNetworkTechnology(@NetworkType int accessNetworkTechnology) {
    mAccessNetworkTechnology = accessNetworkTechnology;
    return this;
}
#method_after
@NonNull
public Builder setAccessNetworkTechnology(@NetworkType int accessNetworkTechnology) {
    mAccessNetworkTechnology = accessNetworkTechnology;
    return this;
}
#end_block

#method_before
public Builder setNrStatus(@NRStatus int nrStatus) {
    mNrStatus = nrStatus;
    return this;
}
#method_after
@NonNull
public Builder setNrStatus(@NRStatus int nrStatus) {
    mNrStatus = nrStatus;
    return this;
}
#end_block

#method_before
public Builder setRejectCause(int rejectCause) {
    mRejectCause = rejectCause;
    return this;
}
#method_after
@NonNull
public Builder setRejectCause(int rejectCause) {
    mRejectCause = rejectCause;
    return this;
}
#end_block

#method_before
public Builder setEmergencyOnly(boolean emergencyOnly) {
    mEmergencyOnly = emergencyOnly;
    return this;
}
#method_after
@NonNull
public Builder setEmergencyOnly(boolean emergencyOnly) {
    mEmergencyOnly = emergencyOnly;
    return this;
}
#end_block

#method_before
public Builder setAvailableServices(@ServiceType int[] availableServices) {
    mAvailableServices = availableServices;
    return this;
}
#method_after
@NonNull
public Builder setAvailableServices(@NonNull @ServiceType int[] availableServices) {
    mAvailableServices = availableServices;
    return this;
}
#end_block

#method_before
public Builder setCellIdentity(CellIdentity cellIdentity) {
    mCellIdentity = cellIdentity;
    return this;
}
#method_after
@NonNull
public Builder setCellIdentity(@Nullable CellIdentity cellIdentity) {
    mCellIdentity = cellIdentity;
    return this;
}
#end_block

#method_before
public NetworkRegistrationState build() {
    return new NetworkRegistrationState(mDomain, mTransportType, mRegState, mAccessNetworkTechnology, mRejectCause, mEmergencyOnly, mAvailableServices, mCellIdentity);
}
#method_after
@NonNull
public NetworkRegistrationState build() {
    return new NetworkRegistrationState(mDomain, mTransportType, mRegState, mAccessNetworkTechnology, mRejectCause, mEmergencyOnly, mAvailableServices, mCellIdentity);
}
#end_block

#method_before
@Override
public void handleMessage(Message message) {
    IDataServiceCallback callback;
    final int slotId = message.arg1;
    DataServiceProvider serviceProvider = mServiceMap.get(slotId);
    switch(message.what) {
        case DATA_SERVICE_CREATE_DATA_SERVICE_PROVIDER:
            serviceProvider = onCreateDataServiceProvider(message.arg1);
            if (serviceProvider != null) {
                mServiceMap.put(slotId, serviceProvider);
            }
            break;
        case DATA_SERVICE_REMOVE_DATA_SERVICE_PROVIDER:
            if (serviceProvider != null) {
                serviceProvider.close();
                mServiceMap.remove(slotId);
            }
            break;
        case DATA_SERVICE_REMOVE_ALL_DATA_SERVICE_PROVIDERS:
            for (int i = 0; i < mServiceMap.size(); i++) {
                serviceProvider = mServiceMap.get(i);
                if (serviceProvider != null) {
                    serviceProvider.close();
                }
            }
            mServiceMap.clear();
            break;
        case DATA_SERVICE_REQUEST_SETUP_DATA_CALL:
            if (serviceProvider == null)
                break;
            SetupDataCallRequest setupDataCallRequest = (SetupDataCallRequest) message.obj;
            serviceProvider.setupDataCall(setupDataCallRequest.accessNetworkType, setupDataCallRequest.dataProfile, setupDataCallRequest.isRoaming, setupDataCallRequest.allowRoaming, setupDataCallRequest.reason, setupDataCallRequest.linkProperties, (setupDataCallRequest.callback != null) ? new DataServiceCallback(setupDataCallRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_DEACTIVATE_DATA_CALL:
            if (serviceProvider == null)
                break;
            DeactivateDataCallRequest deactivateDataCallRequest = (DeactivateDataCallRequest) message.obj;
            serviceProvider.deactivateDataCall(deactivateDataCallRequest.cid, deactivateDataCallRequest.reason, (deactivateDataCallRequest.callback != null) ? new DataServiceCallback(deactivateDataCallRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_SET_INITIAL_ATTACH_APN:
            if (serviceProvider == null)
                break;
            SetInitialAttachApnRequest setInitialAttachApnRequest = (SetInitialAttachApnRequest) message.obj;
            serviceProvider.setInitialAttachApn(setInitialAttachApnRequest.dataProfile, setInitialAttachApnRequest.isRoaming, (setInitialAttachApnRequest.callback != null) ? new DataServiceCallback(setInitialAttachApnRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_SET_DATA_PROFILE:
            if (serviceProvider == null)
                break;
            SetDataProfileRequest setDataProfileRequest = (SetDataProfileRequest) message.obj;
            serviceProvider.setDataProfile(setDataProfileRequest.dps, setDataProfileRequest.isRoaming, (setDataProfileRequest.callback != null) ? new DataServiceCallback(setDataProfileRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST:
            if (serviceProvider == null)
                break;
            serviceProvider.getDataCallList(new DataServiceCallback((IDataServiceCallback) message.obj));
            break;
        case DATA_SERVICE_REQUEST_REGISTER_DATA_CALL_LIST_CHANGED:
            if (serviceProvider == null)
                break;
            serviceProvider.registerForDataCallListChanged((IDataServiceCallback) message.obj);
            break;
        case DATA_SERVICE_REQUEST_UNREGISTER_DATA_CALL_LIST_CHANGED:
            if (serviceProvider == null)
                break;
            callback = (IDataServiceCallback) message.obj;
            serviceProvider.unregisterForDataCallListChanged(callback);
            break;
        case DATA_SERVICE_INDICATION_DATA_CALL_LIST_CHANGED:
            if (serviceProvider == null)
                break;
            DataCallListChangedIndication indication = (DataCallListChangedIndication) message.obj;
            try {
                indication.callback.onDataCallListChanged(indication.dataCallList);
            } catch (RemoteException e) {
                loge("Failed to call onDataCallListChanged. " + e);
            }
            break;
    }
}
#method_after
@Override
public void handleMessage(Message message) {
    IDataServiceCallback callback;
    final int slotIndex = message.arg1;
    DataServiceProvider serviceProvider = mServiceMap.get(slotIndex);
    switch(message.what) {
        case DATA_SERVICE_CREATE_DATA_SERVICE_PROVIDER:
            serviceProvider = onCreateDataServiceProvider(message.arg1);
            if (serviceProvider != null) {
                mServiceMap.put(slotIndex, serviceProvider);
            }
            break;
        case DATA_SERVICE_REMOVE_DATA_SERVICE_PROVIDER:
            if (serviceProvider != null) {
                serviceProvider.close();
                mServiceMap.remove(slotIndex);
            }
            break;
        case DATA_SERVICE_REMOVE_ALL_DATA_SERVICE_PROVIDERS:
            for (int i = 0; i < mServiceMap.size(); i++) {
                serviceProvider = mServiceMap.get(i);
                if (serviceProvider != null) {
                    serviceProvider.close();
                }
            }
            mServiceMap.clear();
            break;
        case DATA_SERVICE_REQUEST_SETUP_DATA_CALL:
            if (serviceProvider == null)
                break;
            SetupDataCallRequest setupDataCallRequest = (SetupDataCallRequest) message.obj;
            serviceProvider.setupDataCall(setupDataCallRequest.accessNetworkType, setupDataCallRequest.dataProfile, setupDataCallRequest.isRoaming, setupDataCallRequest.allowRoaming, setupDataCallRequest.reason, setupDataCallRequest.linkProperties, (setupDataCallRequest.callback != null) ? new DataServiceCallback(setupDataCallRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_DEACTIVATE_DATA_CALL:
            if (serviceProvider == null)
                break;
            DeactivateDataCallRequest deactivateDataCallRequest = (DeactivateDataCallRequest) message.obj;
            serviceProvider.deactivateDataCall(deactivateDataCallRequest.cid, deactivateDataCallRequest.reason, (deactivateDataCallRequest.callback != null) ? new DataServiceCallback(deactivateDataCallRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_SET_INITIAL_ATTACH_APN:
            if (serviceProvider == null)
                break;
            SetInitialAttachApnRequest setInitialAttachApnRequest = (SetInitialAttachApnRequest) message.obj;
            serviceProvider.setInitialAttachApn(setInitialAttachApnRequest.dataProfile, setInitialAttachApnRequest.isRoaming, (setInitialAttachApnRequest.callback != null) ? new DataServiceCallback(setInitialAttachApnRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_SET_DATA_PROFILE:
            if (serviceProvider == null)
                break;
            SetDataProfileRequest setDataProfileRequest = (SetDataProfileRequest) message.obj;
            serviceProvider.setDataProfile(setDataProfileRequest.dps, setDataProfileRequest.isRoaming, (setDataProfileRequest.callback != null) ? new DataServiceCallback(setDataProfileRequest.callback) : null);
            break;
        case DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST:
            if (serviceProvider == null)
                break;
            serviceProvider.getDataCallList(new DataServiceCallback((IDataServiceCallback) message.obj));
            break;
        case DATA_SERVICE_REQUEST_REGISTER_DATA_CALL_LIST_CHANGED:
            if (serviceProvider == null)
                break;
            serviceProvider.registerForDataCallListChanged((IDataServiceCallback) message.obj);
            break;
        case DATA_SERVICE_REQUEST_UNREGISTER_DATA_CALL_LIST_CHANGED:
            if (serviceProvider == null)
                break;
            callback = (IDataServiceCallback) message.obj;
            serviceProvider.unregisterForDataCallListChanged(callback);
            break;
        case DATA_SERVICE_INDICATION_DATA_CALL_LIST_CHANGED:
            if (serviceProvider == null)
                break;
            DataCallListChangedIndication indication = (DataCallListChangedIndication) message.obj;
            try {
                indication.callback.onDataCallListChanged(indication.dataCallList);
            } catch (RemoteException e) {
                loge("Failed to call onDataCallListChanged. " + e);
            }
            break;
    }
}
#end_block

#method_before
@Override
public void createDataServiceProvider(int slotId) {
    mHandler.obtainMessage(DATA_SERVICE_CREATE_DATA_SERVICE_PROVIDER, slotId, 0).sendToTarget();
}
#method_after
@Override
public void createDataServiceProvider(int slotIndex) {
    mHandler.obtainMessage(DATA_SERVICE_CREATE_DATA_SERVICE_PROVIDER, slotIndex, 0).sendToTarget();
}
#end_block

#method_before
@Override
public void removeDataServiceProvider(int slotId) {
    mHandler.obtainMessage(DATA_SERVICE_REMOVE_DATA_SERVICE_PROVIDER, slotId, 0).sendToTarget();
}
#method_after
@Override
public void removeDataServiceProvider(int slotIndex) {
    mHandler.obtainMessage(DATA_SERVICE_REMOVE_DATA_SERVICE_PROVIDER, slotIndex, 0).sendToTarget();
}
#end_block

#method_before
@Override
public void setupDataCall(int slotId, int accessNetworkType, DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, LinkProperties linkProperties, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_SETUP_DATA_CALL, slotId, 0, new SetupDataCallRequest(accessNetworkType, dataProfile, isRoaming, allowRoaming, reason, linkProperties, callback)).sendToTarget();
}
#method_after
@Override
public void setupDataCall(int slotIndex, int accessNetworkType, DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, int reason, LinkProperties linkProperties, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_SETUP_DATA_CALL, slotIndex, 0, new SetupDataCallRequest(accessNetworkType, dataProfile, isRoaming, allowRoaming, reason, linkProperties, callback)).sendToTarget();
}
#end_block

#method_before
@Override
public void deactivateDataCall(int slotId, int cid, int reason, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_DEACTIVATE_DATA_CALL, slotId, 0, new DeactivateDataCallRequest(cid, reason, callback)).sendToTarget();
}
#method_after
@Override
public void deactivateDataCall(int slotIndex, int cid, int reason, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_DEACTIVATE_DATA_CALL, slotIndex, 0, new DeactivateDataCallRequest(cid, reason, callback)).sendToTarget();
}
#end_block

#method_before
@Override
public void setInitialAttachApn(int slotId, DataProfile dataProfile, boolean isRoaming, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_SET_INITIAL_ATTACH_APN, slotId, 0, new SetInitialAttachApnRequest(dataProfile, isRoaming, callback)).sendToTarget();
}
#method_after
@Override
public void setInitialAttachApn(int slotIndex, DataProfile dataProfile, boolean isRoaming, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_SET_INITIAL_ATTACH_APN, slotIndex, 0, new SetInitialAttachApnRequest(dataProfile, isRoaming, callback)).sendToTarget();
}
#end_block

#method_before
@Override
public void setDataProfile(int slotId, List<DataProfile> dps, boolean isRoaming, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_SET_DATA_PROFILE, slotId, 0, new SetDataProfileRequest(dps, isRoaming, callback)).sendToTarget();
}
#method_after
@Override
public void setDataProfile(int slotIndex, List<DataProfile> dps, boolean isRoaming, IDataServiceCallback callback) {
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_SET_DATA_PROFILE, slotIndex, 0, new SetDataProfileRequest(dps, isRoaming, callback)).sendToTarget();
}
#end_block

#method_before
@Override
public void getDataCallList(int slotId, IDataServiceCallback callback) {
    if (callback == null) {
        loge("getDataCallList: callback is null");
        return;
    }
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotId, 0, callback).sendToTarget();
}
#method_after
@Override
public void getDataCallList(int slotIndex, IDataServiceCallback callback) {
    if (callback == null) {
        loge("getDataCallList: callback is null");
        return;
    }
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_GET_DATA_CALL_LIST, slotIndex, 0, callback).sendToTarget();
}
#end_block

#method_before
@Override
public void registerForDataCallListChanged(int slotId, IDataServiceCallback callback) {
    if (callback == null) {
        loge("registerForDataCallListChanged: callback is null");
        return;
    }
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_REGISTER_DATA_CALL_LIST_CHANGED, slotId, 0, callback).sendToTarget();
}
#method_after
@Override
public void registerForDataCallListChanged(int slotIndex, IDataServiceCallback callback) {
    if (callback == null) {
        loge("registerForDataCallListChanged: callback is null");
        return;
    }
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_REGISTER_DATA_CALL_LIST_CHANGED, slotIndex, 0, callback).sendToTarget();
}
#end_block

#method_before
@Override
public void unregisterForDataCallListChanged(int slotId, IDataServiceCallback callback) {
    if (callback == null) {
        loge("unregisterForDataCallListChanged: callback is null");
        return;
    }
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_UNREGISTER_DATA_CALL_LIST_CHANGED, slotId, 0, callback).sendToTarget();
}
#method_after
@Override
public void unregisterForDataCallListChanged(int slotIndex, IDataServiceCallback callback) {
    if (callback == null) {
        loge("unregisterForDataCallListChanged: callback is null");
        return;
    }
    mHandler.obtainMessage(DATA_SERVICE_REQUEST_UNREGISTER_DATA_CALL_LIST_CHANGED, slotIndex, 0, callback).sendToTarget();
}
#end_block

#method_before
public static Uri getPreciseCarrierIdUriForSubscriptionId(int subscriptionId) {
    return Uri.withAppendedPath(Uri.withAppendedPath(CONTENT_URI, "precise"), String.valueOf(subscriptionId));
}
#method_after
@NonNull
public static Uri getPreciseCarrierIdUriForSubscriptionId(int subscriptionId) {
    return Uri.withAppendedPath(Uri.withAppendedPath(CONTENT_URI, "precise"), String.valueOf(subscriptionId));
}
#end_block

#method_before
public int getSkip464Xlat() {
    return mSkip464Xlat;
}
#method_after
@Carriers.Skip464XlatStatus
public int getSkip464Xlat() {
    return mSkip464Xlat;
}
#end_block

#method_before
public static ApnSetting makeApnSetting(int id, String operatorNumeric, String entryName, String apnName, String proxyAddress, int proxyPort, Uri mmsc, String mmsProxyAddress, int mmsProxyPort, String user, String password, int authType, int mApnTypeBitmask, int protocol, int roamingProtocol, boolean carrierEnabled, int networkTypeBitmask, int profileId, boolean modemCognitive, int maxConns, int waitTime, int maxConnsTime, int mtu, int mvnoType, String mvnoMatchData) {
    return makeApnSetting(id, operatorNumeric, entryName, apnName, proxyAddress, proxyPort, mmsc, mmsProxyAddress, mmsProxyPort, user, password, authType, mApnTypeBitmask, protocol, roamingProtocol, carrierEnabled, networkTypeBitmask, profileId, modemCognitive, maxConns, waitTime, maxConnsTime, mtu, mvnoType, mvnoMatchData, Carriers.NO_APN_SET_ID, TelephonyManager.UNKNOWN_CARRIER_ID, -1);
}
#method_after
public static ApnSetting makeApnSetting(int id, String operatorNumeric, String entryName, String apnName, String proxyAddress, int proxyPort, Uri mmsc, String mmsProxyAddress, int mmsProxyPort, String user, String password, int authType, int mApnTypeBitmask, int protocol, int roamingProtocol, boolean carrierEnabled, int networkTypeBitmask, int profileId, boolean modemCognitive, int maxConns, int waitTime, int maxConnsTime, int mtu, int mvnoType, String mvnoMatchData) {
    return makeApnSetting(id, operatorNumeric, entryName, apnName, proxyAddress, proxyPort, mmsc, mmsProxyAddress, mmsProxyPort, user, password, authType, mApnTypeBitmask, protocol, roamingProtocol, carrierEnabled, networkTypeBitmask, profileId, modemCognitive, maxConns, waitTime, maxConnsTime, mtu, mvnoType, mvnoMatchData, Carriers.NO_APN_SET_ID, TelephonyManager.UNKNOWN_CARRIER_ID, Carriers.SKIP_464XLAT_DEFAULT);
}
#end_block

#method_before
public static ApnSetting makeApnSetting(Cursor cursor) {
    final int apnTypesBitmask = getApnTypesBitmaskFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.TYPE)));
    int networkTypeBitmask = cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.NETWORK_TYPE_BITMASK));
    if (networkTypeBitmask == 0) {
        final int bearerBitmask = cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.BEARER_BITMASK));
        networkTypeBitmask = ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask);
    }
    return makeApnSetting(cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers._ID)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.NUMERIC)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.NAME)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.APN)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PROXY)), portFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PORT))), UriFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MMSC))), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MMSPROXY)), portFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MMSPORT))), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.USER)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PASSWORD)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.AUTH_TYPE)), apnTypesBitmask, getProtocolIntFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PROTOCOL))), getProtocolIntFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.ROAMING_PROTOCOL))), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.CARRIER_ENABLED)) == 1, networkTypeBitmask, cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.PROFILE_ID)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.MODEM_PERSIST)) == 1, cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.MAX_CONNECTIONS)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.WAIT_TIME_RETRY)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.TIME_LIMIT_FOR_MAX_CONNECTIONS)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.MTU)), getMvnoTypeIntFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MVNO_TYPE))), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MVNO_MATCH_DATA)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.APN_SET_ID)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.CARRIER_ID)), cursor.getInt(cursor.getColumnIndexOrThrow(Carriers.SKIP464XLAT)));
}
#method_after
public static ApnSetting makeApnSetting(Cursor cursor) {
    final int apnTypesBitmask = getApnTypesBitmaskFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.TYPE)));
    int networkTypeBitmask = cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.NETWORK_TYPE_BITMASK));
    if (networkTypeBitmask == 0) {
        final int bearerBitmask = cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.BEARER_BITMASK));
        networkTypeBitmask = ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask);
    }
    return makeApnSetting(cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers._ID)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.NUMERIC)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.NAME)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.APN)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PROXY)), portFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PORT))), UriFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MMSC))), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MMSPROXY)), portFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MMSPORT))), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.USER)), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PASSWORD)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.AUTH_TYPE)), apnTypesBitmask, getProtocolIntFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.PROTOCOL))), getProtocolIntFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.ROAMING_PROTOCOL))), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.CARRIER_ENABLED)) == 1, networkTypeBitmask, cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.PROFILE_ID)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.MODEM_PERSIST)) == 1, cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.MAX_CONNECTIONS)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.WAIT_TIME_RETRY)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.TIME_LIMIT_FOR_MAX_CONNECTIONS)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.MTU)), getMvnoTypeIntFromString(cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MVNO_TYPE))), cursor.getString(cursor.getColumnIndexOrThrow(Telephony.Carriers.MVNO_MATCH_DATA)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.APN_SET_ID)), cursor.getInt(cursor.getColumnIndexOrThrow(Telephony.Carriers.CARRIER_ID)), cursor.getInt(cursor.getColumnIndexOrThrow(Carriers.SKIP_464XLAT)));
}
#end_block

#method_before
public static ApnSetting fromString(String data) {
    if (data == null)
        return null;
    int version;
    // matches() operates on the whole string, so append .* to the regex.
    if (data.matches(V7_FORMAT_REGEX + ".*")) {
        version = 7;
        data = data.replaceFirst(V7_FORMAT_REGEX, "");
    } else if (data.matches(V6_FORMAT_REGEX + ".*")) {
        version = 6;
        data = data.replaceFirst(V6_FORMAT_REGEX, "");
    } else if (data.matches(V5_FORMAT_REGEX + ".*")) {
        version = 5;
        data = data.replaceFirst(V5_FORMAT_REGEX, "");
    } else if (data.matches(V4_FORMAT_REGEX + ".*")) {
        version = 4;
        data = data.replaceFirst(V4_FORMAT_REGEX, "");
    } else if (data.matches(V3_FORMAT_REGEX + ".*")) {
        version = 3;
        data = data.replaceFirst(V3_FORMAT_REGEX, "");
    } else if (data.matches(V2_FORMAT_REGEX + ".*")) {
        version = 2;
        data = data.replaceFirst(V2_FORMAT_REGEX, "");
    } else {
        version = 1;
    }
    String[] a = data.split("\\s*,\\s*", -1);
    if (a.length < 14) {
        return null;
    }
    int authType;
    try {
        authType = Integer.parseInt(a[12]);
    } catch (NumberFormatException e) {
        authType = 0;
    }
    String[] typeArray;
    String protocol, roamingProtocol;
    boolean carrierEnabled;
    int bearerBitmask = 0;
    int networkTypeBitmask = 0;
    int profileId = 0;
    boolean modemCognitive = false;
    int maxConns = 0;
    int waitTime = 0;
    int maxConnsTime = 0;
    int mtu = UNSET_MTU;
    String mvnoType = "";
    String mvnoMatchData = "";
    int apnSetId = Carriers.NO_APN_SET_ID;
    int carrierId = TelephonyManager.UNKNOWN_CARRIER_ID;
    // should not set 0
    int skip464xlat = -1;
    if (version == 1) {
        typeArray = new String[a.length - 13];
        System.arraycopy(a, 13, typeArray, 0, a.length - 13);
        protocol = PROTOCOL_INT_MAP.get(PROTOCOL_IP);
        roamingProtocol = PROTOCOL_INT_MAP.get(PROTOCOL_IP);
        carrierEnabled = true;
    } else {
        if (a.length < 18) {
            return null;
        }
        typeArray = a[13].split("\\s*\\|\\s*");
        protocol = a[14];
        roamingProtocol = a[15];
        carrierEnabled = Boolean.parseBoolean(a[16]);
        bearerBitmask = ServiceState.getBitmaskFromString(a[17]);
        if (a.length > 22) {
            modemCognitive = Boolean.parseBoolean(a[19]);
            try {
                profileId = Integer.parseInt(a[18]);
                maxConns = Integer.parseInt(a[20]);
                waitTime = Integer.parseInt(a[21]);
                maxConnsTime = Integer.parseInt(a[22]);
            } catch (NumberFormatException e) {
            }
        }
        if (a.length > 23) {
            try {
                mtu = Integer.parseInt(a[23]);
            } catch (NumberFormatException e) {
            }
        }
        if (a.length > 25) {
            mvnoType = a[24];
            mvnoMatchData = a[25];
        }
        if (a.length > 26) {
            networkTypeBitmask = ServiceState.getBitmaskFromString(a[26]);
        }
        if (a.length > 27) {
            apnSetId = Integer.parseInt(a[27]);
        }
        if (a.length > 28) {
            carrierId = Integer.parseInt(a[28]);
        }
        if (a.length > 29) {
            try {
                skip464xlat = Integer.parseInt(a[29]);
            } catch (NumberFormatException e) {
            }
        }
    }
    // ignored.
    if (networkTypeBitmask == 0) {
        networkTypeBitmask = ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask);
    }
    return makeApnSetting(-1, a[10] + a[11], a[0], a[1], a[2], portFromString(a[3]), UriFromString(a[7]), a[8], portFromString(a[9]), a[4], a[5], authType, getApnTypesBitmaskFromString(TextUtils.join(",", typeArray)), getProtocolIntFromString(protocol), getProtocolIntFromString(roamingProtocol), carrierEnabled, networkTypeBitmask, profileId, modemCognitive, maxConns, waitTime, maxConnsTime, mtu, getMvnoTypeIntFromString(mvnoType), mvnoMatchData, apnSetId, carrierId, skip464xlat);
}
#method_after
public static ApnSetting fromString(String data) {
    if (data == null)
        return null;
    int version;
    // matches() operates on the whole string, so append .* to the regex.
    if (data.matches(V7_FORMAT_REGEX + ".*")) {
        version = 7;
        data = data.replaceFirst(V7_FORMAT_REGEX, "");
    } else if (data.matches(V6_FORMAT_REGEX + ".*")) {
        version = 6;
        data = data.replaceFirst(V6_FORMAT_REGEX, "");
    } else if (data.matches(V5_FORMAT_REGEX + ".*")) {
        version = 5;
        data = data.replaceFirst(V5_FORMAT_REGEX, "");
    } else if (data.matches(V4_FORMAT_REGEX + ".*")) {
        version = 4;
        data = data.replaceFirst(V4_FORMAT_REGEX, "");
    } else if (data.matches(V3_FORMAT_REGEX + ".*")) {
        version = 3;
        data = data.replaceFirst(V3_FORMAT_REGEX, "");
    } else if (data.matches(V2_FORMAT_REGEX + ".*")) {
        version = 2;
        data = data.replaceFirst(V2_FORMAT_REGEX, "");
    } else {
        version = 1;
    }
    String[] a = data.split("\\s*,\\s*", -1);
    if (a.length < 14) {
        return null;
    }
    int authType;
    try {
        authType = Integer.parseInt(a[12]);
    } catch (NumberFormatException e) {
        authType = 0;
    }
    String[] typeArray;
    String protocol, roamingProtocol;
    boolean carrierEnabled;
    int bearerBitmask = 0;
    int networkTypeBitmask = 0;
    int profileId = 0;
    boolean modemCognitive = false;
    int maxConns = 0;
    int waitTime = 0;
    int maxConnsTime = 0;
    int mtu = UNSET_MTU;
    String mvnoType = "";
    String mvnoMatchData = "";
    int apnSetId = Carriers.NO_APN_SET_ID;
    int carrierId = TelephonyManager.UNKNOWN_CARRIER_ID;
    int skip464xlat = Carriers.SKIP_464XLAT_DEFAULT;
    if (version == 1) {
        typeArray = new String[a.length - 13];
        System.arraycopy(a, 13, typeArray, 0, a.length - 13);
        protocol = PROTOCOL_INT_MAP.get(PROTOCOL_IP);
        roamingProtocol = PROTOCOL_INT_MAP.get(PROTOCOL_IP);
        carrierEnabled = true;
    } else {
        if (a.length < 18) {
            return null;
        }
        typeArray = a[13].split("\\s*\\|\\s*");
        protocol = a[14];
        roamingProtocol = a[15];
        carrierEnabled = Boolean.parseBoolean(a[16]);
        bearerBitmask = ServiceState.getBitmaskFromString(a[17]);
        if (a.length > 22) {
            modemCognitive = Boolean.parseBoolean(a[19]);
            try {
                profileId = Integer.parseInt(a[18]);
                maxConns = Integer.parseInt(a[20]);
                waitTime = Integer.parseInt(a[21]);
                maxConnsTime = Integer.parseInt(a[22]);
            } catch (NumberFormatException e) {
            }
        }
        if (a.length > 23) {
            try {
                mtu = Integer.parseInt(a[23]);
            } catch (NumberFormatException e) {
            }
        }
        if (a.length > 25) {
            mvnoType = a[24];
            mvnoMatchData = a[25];
        }
        if (a.length > 26) {
            networkTypeBitmask = ServiceState.getBitmaskFromString(a[26]);
        }
        if (a.length > 27) {
            apnSetId = Integer.parseInt(a[27]);
        }
        if (a.length > 28) {
            carrierId = Integer.parseInt(a[28]);
        }
        if (a.length > 29) {
            try {
                skip464xlat = Integer.parseInt(a[29]);
            } catch (NumberFormatException e) {
            }
        }
    }
    // ignored.
    if (networkTypeBitmask == 0) {
        networkTypeBitmask = ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask);
    }
    return makeApnSetting(-1, a[10] + a[11], a[0], a[1], a[2], portFromString(a[3]), UriFromString(a[7]), a[8], portFromString(a[9]), a[4], a[5], authType, getApnTypesBitmaskFromString(TextUtils.join(",", typeArray)), getProtocolIntFromString(protocol), getProtocolIntFromString(roamingProtocol), carrierEnabled, networkTypeBitmask, profileId, modemCognitive, maxConns, waitTime, maxConnsTime, mtu, getMvnoTypeIntFromString(mvnoType), mvnoMatchData, apnSetId, carrierId, skip464xlat);
}
#end_block

#method_before
public ContentValues toContentValues() {
    ContentValues apnValue = new ContentValues();
    apnValue.put(Telephony.Carriers.NUMERIC, nullToEmpty(mOperatorNumeric));
    apnValue.put(Telephony.Carriers.NAME, nullToEmpty(mEntryName));
    apnValue.put(Telephony.Carriers.APN, nullToEmpty(mApnName));
    apnValue.put(Telephony.Carriers.PROXY, nullToEmpty(mProxyAddress));
    apnValue.put(Telephony.Carriers.PORT, nullToEmpty(portToString(mProxyPort)));
    apnValue.put(Telephony.Carriers.MMSC, nullToEmpty(UriToString(mMmsc)));
    apnValue.put(Telephony.Carriers.MMSPORT, nullToEmpty(portToString(mMmsProxyPort)));
    apnValue.put(Telephony.Carriers.MMSPROXY, nullToEmpty(mMmsProxyAddress));
    apnValue.put(Telephony.Carriers.USER, nullToEmpty(mUser));
    apnValue.put(Telephony.Carriers.PASSWORD, nullToEmpty(mPassword));
    apnValue.put(Telephony.Carriers.AUTH_TYPE, mAuthType);
    String apnType = getApnTypesStringFromBitmask(mApnTypeBitmask);
    apnValue.put(Telephony.Carriers.TYPE, nullToEmpty(apnType));
    apnValue.put(Telephony.Carriers.PROTOCOL, getProtocolStringFromInt(mProtocol));
    apnValue.put(Telephony.Carriers.ROAMING_PROTOCOL, getProtocolStringFromInt(mRoamingProtocol));
    apnValue.put(Telephony.Carriers.CARRIER_ENABLED, mCarrierEnabled);
    apnValue.put(Telephony.Carriers.MVNO_TYPE, getMvnoTypeStringFromInt(mMvnoType));
    apnValue.put(Telephony.Carriers.NETWORK_TYPE_BITMASK, mNetworkTypeBitmask);
    apnValue.put(Telephony.Carriers.CARRIER_ID, mCarrierId);
    apnValue.put(Telephony.Carriers.SKIP464XLAT, mSkip464Xlat);
    return apnValue;
}
#method_after
public ContentValues toContentValues() {
    ContentValues apnValue = new ContentValues();
    apnValue.put(Telephony.Carriers.NUMERIC, nullToEmpty(mOperatorNumeric));
    apnValue.put(Telephony.Carriers.NAME, nullToEmpty(mEntryName));
    apnValue.put(Telephony.Carriers.APN, nullToEmpty(mApnName));
    apnValue.put(Telephony.Carriers.PROXY, nullToEmpty(mProxyAddress));
    apnValue.put(Telephony.Carriers.PORT, nullToEmpty(portToString(mProxyPort)));
    apnValue.put(Telephony.Carriers.MMSC, nullToEmpty(UriToString(mMmsc)));
    apnValue.put(Telephony.Carriers.MMSPORT, nullToEmpty(portToString(mMmsProxyPort)));
    apnValue.put(Telephony.Carriers.MMSPROXY, nullToEmpty(mMmsProxyAddress));
    apnValue.put(Telephony.Carriers.USER, nullToEmpty(mUser));
    apnValue.put(Telephony.Carriers.PASSWORD, nullToEmpty(mPassword));
    apnValue.put(Telephony.Carriers.AUTH_TYPE, mAuthType);
    String apnType = getApnTypesStringFromBitmask(mApnTypeBitmask);
    apnValue.put(Telephony.Carriers.TYPE, nullToEmpty(apnType));
    apnValue.put(Telephony.Carriers.PROTOCOL, getProtocolStringFromInt(mProtocol));
    apnValue.put(Telephony.Carriers.ROAMING_PROTOCOL, getProtocolStringFromInt(mRoamingProtocol));
    apnValue.put(Telephony.Carriers.CARRIER_ENABLED, mCarrierEnabled);
    apnValue.put(Telephony.Carriers.MVNO_TYPE, getMvnoTypeStringFromInt(mMvnoType));
    apnValue.put(Telephony.Carriers.NETWORK_TYPE_BITMASK, mNetworkTypeBitmask);
    apnValue.put(Telephony.Carriers.CARRIER_ID, mCarrierId);
    apnValue.put(Telephony.Carriers.SKIP_464XLAT, mSkip464Xlat);
    return apnValue;
}
#end_block

#method_before
public Builder setSkip464Xlat(int skip464xlat) {
    this.mSkip464Xlat = skip464xlat;
    return this;
}
#method_after
public Builder setSkip464Xlat(@Carriers.Skip464XlatStatus int skip464xlat) {
    this.mSkip464Xlat = skip464xlat;
    return this;
}
#end_block

#method_before
public ApnSetting build() {
    if ((mApnTypeBitmask & ApnTypes.ALL) == 0 || TextUtils.isEmpty(mApnName) || TextUtils.isEmpty(mEntryName)) {
        return null;
    }
    return new ApnSetting(this);
}
#method_after
public ApnSetting build() {
    if ((mApnTypeBitmask & TYPE_ALL) == 0 || TextUtils.isEmpty(mApnName) || TextUtils.isEmpty(mEntryName)) {
        return null;
    }
    return new ApnSetting(this);
}
#end_block

#method_before
@Override
public String toString() {
    return "{mTag=" + mTag + " mApnContext=" + mApnContext + " mProfileId=" + mProfileId + " mRat=" + mRilRat + " mOnCompletedMsg=" + msgToString(mOnCompletedMsg) + "}";
}
#method_after
@Override
public String toString() {
    return "{mTag=" + mTag + " mApnContext=" + mApnContext + " mProfileId=" + mProfileId + " mRat=" + mRilRat + " mOnCompletedMsg=" + msgToString(mOnCompletedMsg) + " mRequestType=" + DcTracker.requestTypeToString(mRequestType) + "}";
}
#end_block

#method_before
@Override
public String toString() {
    return "{mTag=" + mTag + " mApnContext=" + mApnContext + " mReason=" + mReason + " mOnCompletedMsg=" + msgToString(mOnCompletedMsg) + "}";
}
#method_after
@Override
public String toString() {
    return "{mTag=" + mTag + " mApnContext=" + mApnContext + " mReason=" + mReason + " mReleaseType=" + DcTracker.releaseTypeToString(mReleaseType) + " mOnCompletedMsg=" + msgToString(mOnCompletedMsg) + "}";
}
#end_block

#method_before
public static DataConnection makeDataConnection(Phone phone, int id, DcTracker dct, DataServiceManager dataServiceManager, DcTesterFailBringUpAll failBringUpAll, DcController dcc) {
    DataConnection dc = new DataConnection(phone, "DC-" + mInstanceNumber.incrementAndGet(), id, dct, dataServiceManager, failBringUpAll, dcc);
    dc.start();
    if (DBG)
        dc.log("Made " + dc.getName());
    return dc;
}
#method_after
public static DataConnection makeDataConnection(Phone phone, int id, DcTracker dct, DataServiceManager dataServiceManager, DcTesterFailBringUpAll failBringUpAll, DcController dcc) {
    String transportType = (dataServiceManager.getTransportType() == TransportType.WWAN) ? // Cellular
    "C" : // IWLAN
    "I";
    DataConnection dc = new DataConnection(phone, "DC-" + transportType + "-" + mInstanceNumber.incrementAndGet(), id, dct, dataServiceManager, failBringUpAll, dcc);
    dc.start();
    if (DBG)
        dc.log("Made " + dc.getName());
    return dc;
}
#end_block

#method_before
private void tearDownData(Object o) {
    int discReason = DataService.REQUEST_REASON_NORMAL;
    ApnContext apnContext = null;
    if ((o != null) && (o instanceof DisconnectParams)) {
        DisconnectParams dp = (DisconnectParams) o;
        apnContext = dp.mApnContext;
        if (TextUtils.equals(dp.mReason, Phone.REASON_RADIO_TURNED_OFF) || TextUtils.equals(dp.mReason, Phone.REASON_PDP_RESET)) {
            discReason = DataService.REQUEST_REASON_SHUTDOWN;
        }
    }
    String str = "tearDownData. mCid=" + mCid + ", reason=" + discReason;
    if (DBG)
        log(str);
    if (apnContext != null)
        apnContext.requestLog(str);
    mDataServiceManager.deactivateDataCall(mCid, discReason, obtainMessage(EVENT_DEACTIVATE_DONE, mTag, 0, o));
}
#method_after
private void tearDownData(Object o) {
    int discReason = DataService.REQUEST_REASON_NORMAL;
    ApnContext apnContext = null;
    if ((o != null) && (o instanceof DisconnectParams)) {
        DisconnectParams dp = (DisconnectParams) o;
        apnContext = dp.mApnContext;
        if (TextUtils.equals(dp.mReason, Phone.REASON_RADIO_TURNED_OFF) || TextUtils.equals(dp.mReason, Phone.REASON_PDP_RESET)) {
            discReason = DataService.REQUEST_REASON_SHUTDOWN;
        } else if (dp.mReleaseType == DcTracker.RELEASE_TYPE_HANDOVER) {
            discReason = DataService.REQUEST_REASON_HANDOVER;
        }
    }
    String str = "tearDownData. mCid=" + mCid + ", reason=" + discReason;
    if (DBG)
        log(str);
    if (apnContext != null)
        apnContext.requestLog(str);
    mDataServiceManager.deactivateDataCall(mCid, discReason, obtainMessage(EVENT_DEACTIVATE_DONE, mTag, 0, o));
}
#end_block

#method_before
private void notifyAllWithEvent(ApnContext alreadySent, int event, String reason) {
    mNetworkInfo.setDetailedState(mNetworkInfo.getDetailedState(), reason, mNetworkInfo.getExtraInfo());
    for (ConnectionParams cp : mApnContexts.values()) {
        ApnContext apnContext = cp.mApnContext;
        if (apnContext == alreadySent)
            continue;
        if (reason != null)
            apnContext.setReason(reason);
        Pair<ApnContext, Integer> pair = new Pair<>(apnContext, cp.mConnectionGeneration);
        Message msg = mDct.obtainMessage(event, pair);
        AsyncResult.forMessage(msg);
        msg.sendToTarget();
    }
}
#method_after
private void notifyAllWithEvent(ApnContext alreadySent, int event, String reason) {
    mNetworkInfo.setDetailedState(mNetworkInfo.getDetailedState(), reason, mNetworkInfo.getExtraInfo());
    for (ConnectionParams cp : mApnContexts.values()) {
        ApnContext apnContext = cp.mApnContext;
        if (apnContext == alreadySent)
            continue;
        if (reason != null)
            apnContext.setReason(reason);
        Pair<ApnContext, Integer> pair = new Pair<>(apnContext, cp.mConnectionGeneration);
        Message msg = mDct.obtainMessage(event, mCid, cp.mRequestType, pair);
        AsyncResult.forMessage(msg);
        msg.sendToTarget();
    }
}
#end_block

#method_before
private void notifyConnectCompleted(ConnectionParams cp, @DataFailCause.FailCause int cause, boolean sendAll) {
    ApnContext alreadySent = null;
    if (cp != null && cp.mOnCompletedMsg != null) {
        // Get the completed message but only use it once
        Message connectionCompletedMsg = cp.mOnCompletedMsg;
        cp.mOnCompletedMsg = null;
        alreadySent = cp.mApnContext;
        long timeStamp = System.currentTimeMillis();
        connectionCompletedMsg.arg1 = mCid;
        if (cause == DataFailCause.NONE) {
            mCreateTime = timeStamp;
            AsyncResult.forMessage(connectionCompletedMsg);
        } else {
            mLastFailCause = cause;
            mLastFailTime = timeStamp;
            // Return message with a Throwable exception to signify an error.
            if (cause == DataFailCause.NONE)
                cause = DataFailCause.UNKNOWN;
            AsyncResult.forMessage(connectionCompletedMsg, cause, new Throwable(DataFailCause.toString(cause)));
        }
        if (DBG) {
            log("notifyConnectCompleted at " + timeStamp + " cause=" + cause + " connectionCompletedMsg=" + msgToString(connectionCompletedMsg));
        }
        connectionCompletedMsg.sendToTarget();
    }
    if (sendAll) {
        log("Send to all. " + alreadySent + " " + DataFailCause.toString(cause));
        notifyAllWithEvent(alreadySent, DctConstants.EVENT_DATA_SETUP_COMPLETE_ERROR, DataFailCause.toString(cause));
    }
}
#method_after
private void notifyConnectCompleted(ConnectionParams cp, @DataFailCause.FailCause int cause, boolean sendAll) {
    ApnContext alreadySent = null;
    if (cp != null && cp.mOnCompletedMsg != null) {
        // Get the completed message but only use it once
        Message connectionCompletedMsg = cp.mOnCompletedMsg;
        cp.mOnCompletedMsg = null;
        alreadySent = cp.mApnContext;
        long timeStamp = System.currentTimeMillis();
        connectionCompletedMsg.arg1 = mCid;
        connectionCompletedMsg.arg2 = cp.mRequestType;
        if (cause == DataFailCause.NONE) {
            mCreateTime = timeStamp;
            AsyncResult.forMessage(connectionCompletedMsg);
        } else {
            mLastFailCause = cause;
            mLastFailTime = timeStamp;
            // Return message with a Throwable exception to signify an error.
            if (cause == DataFailCause.NONE)
                cause = DataFailCause.UNKNOWN;
            AsyncResult.forMessage(connectionCompletedMsg, cause, new Throwable(DataFailCause.toString(cause)));
        }
        if (DBG) {
            log("notifyConnectCompleted at " + timeStamp + " cause=" + cause + " connectionCompletedMsg=" + msgToString(connectionCompletedMsg));
        }
        connectionCompletedMsg.sendToTarget();
    }
    if (sendAll) {
        log("Send to all. " + alreadySent + " " + DataFailCause.toString(cause));
        notifyAllWithEvent(alreadySent, DctConstants.EVENT_DATA_SETUP_COMPLETE_ERROR, DataFailCause.toString(cause));
    }
}
#end_block

#method_before
private SetupResult onSetupConnectionCompleted(@DataServiceCallback.ResultCode int resultCode, DataCallResponse response, ConnectionParams cp) {
    SetupResult result;
    if (cp.mTag != mTag) {
        if (DBG) {
            log("onSetupConnectionCompleted stale cp.tag=" + cp.mTag + ", mtag=" + mTag);
        }
        result = SetupResult.ERROR_STALE;
    } else if (resultCode == DataServiceCallback.RESULT_ERROR_ILLEGAL_STATE) {
        result = SetupResult.ERROR_RADIO_NOT_AVAILABLE;
        result.mFailCause = DataFailCause.RADIO_NOT_AVAILABLE;
    } else if (response.getStatus() != 0) {
        if (response.getStatus() == DataFailCause.RADIO_NOT_AVAILABLE) {
            result = SetupResult.ERROR_RADIO_NOT_AVAILABLE;
            result.mFailCause = DataFailCause.RADIO_NOT_AVAILABLE;
        } else {
            result = SetupResult.ERROR_DATA_SERVICE_SPECIFIC_ERROR;
            result.mFailCause = DataFailCause.getFailCause(response.getStatus());
        }
    } else {
        if (DBG)
            log("onSetupConnectionCompleted received successful DataCallResponse");
        mCid = response.getCallId();
        mPcscfAddr = response.getPcscfs().toArray(new String[response.getPcscfs().size()]);
        result = updateLinkProperty(response).setupResult;
    }
    return result;
}
#method_after
private SetupResult onSetupConnectionCompleted(@DataServiceCallback.ResultCode int resultCode, DataCallResponse response, ConnectionParams cp) {
    SetupResult result;
    log("onSetupConnectionCompleted: resultCode=" + resultCode + ", response=" + response);
    if (cp.mTag != mTag) {
        if (DBG) {
            log("onSetupConnectionCompleted stale cp.tag=" + cp.mTag + ", mtag=" + mTag);
        }
        result = SetupResult.ERROR_STALE;
    } else if (resultCode == DataServiceCallback.RESULT_ERROR_ILLEGAL_STATE) {
        result = SetupResult.ERROR_RADIO_NOT_AVAILABLE;
        result.mFailCause = DataFailCause.RADIO_NOT_AVAILABLE;
    } else if (response.getStatus() != 0) {
        if (response.getStatus() == DataFailCause.RADIO_NOT_AVAILABLE) {
            result = SetupResult.ERROR_RADIO_NOT_AVAILABLE;
            result.mFailCause = DataFailCause.RADIO_NOT_AVAILABLE;
        } else {
            result = SetupResult.ERROR_DATA_SERVICE_SPECIFIC_ERROR;
            result.mFailCause = DataFailCause.getFailCause(response.getStatus());
        }
    } else {
        if (DBG)
            log("onSetupConnectionCompleted received successful DataCallResponse");
        mCid = response.getCallId();
        mPcscfAddr = response.getPcscfs().toArray(new String[response.getPcscfs().size()]);
        result = updateLinkProperty(response).setupResult;
    }
    return result;
}
#end_block

#method_before
public NetworkCapabilities getNetworkCapabilities() {
    NetworkCapabilities result = new NetworkCapabilities();
    result.addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
    if (mApnSetting != null) {
        final String[] types = ApnSetting.getApnTypesStringFromBitmask(mApnSetting.getApnTypeBitmask() & ~mDisabledApnTypeBitMask).split(",");
        for (String type : types) {
            if (!mRestrictedNetworkOverride && mUnmeteredUseOnly && ApnSettingUtils.isMeteredApnType(type, mPhone)) {
                log("Dropped the metered " + type + " for the unmetered data call.");
                continue;
            }
            switch(type) {
                case PhoneConstants.APN_TYPE_ALL:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_MMS);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_SUPL);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_FOTA);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IMS);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_CBS);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IA);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
                        break;
                    }
                case PhoneConstants.APN_TYPE_DEFAULT:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
                        break;
                    }
                case PhoneConstants.APN_TYPE_MMS:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_MMS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_SUPL:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_SUPL);
                        break;
                    }
                case PhoneConstants.APN_TYPE_DUN:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
                        break;
                    }
                case PhoneConstants.APN_TYPE_FOTA:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_FOTA);
                        break;
                    }
                case PhoneConstants.APN_TYPE_IMS:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IMS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_CBS:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_CBS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_IA:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IA);
                        break;
                    }
                case PhoneConstants.APN_TYPE_EMERGENCY:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_EIMS);
                        break;
                    }
                default:
            }
        }
        // 2. The non-restricted data and is intended for unmetered use only.
        if ((mUnmeteredUseOnly && !mRestrictedNetworkOverride) || !ApnSettingUtils.isMetered(mApnSetting, mPhone)) {
            result.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);
        } else {
            result.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);
        }
        result.maybeMarkCapabilitiesRestricted();
    }
    if (mRestrictedNetworkOverride) {
        result.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED);
        // don't use dun on restriction-overriden networks.
        result.removeCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
    }
    int up = 14;
    int down = 14;
    switch(mRilRat) {
        case ServiceState.RIL_RADIO_TECHNOLOGY_GPRS:
            up = 80;
            down = 80;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EDGE:
            up = 59;
            down = 236;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_UMTS:
            up = 384;
            down = 384;
            break;
        // fall through
        case ServiceState.RIL_RADIO_TECHNOLOGY_IS95A:
        case ServiceState.RIL_RADIO_TECHNOLOGY_IS95B:
            up = 14;
            down = 14;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0:
            up = 153;
            down = 2457;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_A:
            up = 1843;
            down = 3174;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT:
            up = 100;
            down = 100;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSDPA:
            up = 2048;
            down = 14336;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSUPA:
            up = 5898;
            down = 14336;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSPA:
            up = 5898;
            down = 14336;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_B:
            up = 1843;
            down = 5017;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_LTE:
            up = 51200;
            down = 102400;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_LTE_CA:
            up = 51200;
            down = 102400;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EHRPD:
            up = 153;
            down = 2516;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSPAP:
            up = 11264;
            down = 43008;
            break;
        default:
    }
    result.setLinkUpstreamBandwidthKbps(up);
    result.setLinkDownstreamBandwidthKbps(down);
    result.setNetworkSpecifier(new StringNetworkSpecifier(Integer.toString(mPhone.getSubId())));
    result.setCapability(NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, !mPhone.getServiceState().getDataRoaming());
    result.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED);
    // Override values set above when requested by policy
    if ((mSubscriptionOverride & OVERRIDE_UNMETERED) != 0) {
        result.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);
    }
    if ((mSubscriptionOverride & OVERRIDE_CONGESTED) != 0) {
        result.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED);
    }
    return result;
}
#method_after
public NetworkCapabilities getNetworkCapabilities() {
    NetworkCapabilities result = new NetworkCapabilities();
    result.addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
    if (mApnSetting != null) {
        final String[] types = ApnSetting.getApnTypesStringFromBitmask(mApnSetting.getApnTypeBitmask() & ~mDisabledApnTypeBitMask).split(",");
        for (String type : types) {
            if (!mRestrictedNetworkOverride && mUnmeteredUseOnly && ApnSettingUtils.isMeteredApnType(type, mPhone)) {
                log("Dropped the metered " + type + " for the unmetered data call.");
                continue;
            }
            switch(type) {
                case PhoneConstants.APN_TYPE_ALL:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_MMS);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_SUPL);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_FOTA);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IMS);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_CBS);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IA);
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
                        break;
                    }
                case PhoneConstants.APN_TYPE_DEFAULT:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
                        break;
                    }
                case PhoneConstants.APN_TYPE_MMS:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_MMS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_SUPL:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_SUPL);
                        break;
                    }
                case PhoneConstants.APN_TYPE_DUN:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
                        break;
                    }
                case PhoneConstants.APN_TYPE_FOTA:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_FOTA);
                        break;
                    }
                case PhoneConstants.APN_TYPE_IMS:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IMS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_CBS:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_CBS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_IA:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_IA);
                        break;
                    }
                case PhoneConstants.APN_TYPE_EMERGENCY:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_EIMS);
                        break;
                    }
                case PhoneConstants.APN_TYPE_MCX:
                    {
                        result.addCapability(NetworkCapabilities.NET_CAPABILITY_MCX);
                        break;
                    }
                default:
            }
        }
        // 2. The non-restricted data and is intended for unmetered use only.
        if ((mUnmeteredUseOnly && !mRestrictedNetworkOverride) || !ApnSettingUtils.isMetered(mApnSetting, mPhone)) {
            result.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);
        } else {
            result.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);
        }
        result.maybeMarkCapabilitiesRestricted();
    }
    if (mRestrictedNetworkOverride) {
        result.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED);
        // don't use dun on restriction-overriden networks.
        result.removeCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
    }
    int up = 14;
    int down = 14;
    switch(mRilRat) {
        case ServiceState.RIL_RADIO_TECHNOLOGY_GPRS:
            up = 80;
            down = 80;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EDGE:
            up = 59;
            down = 236;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_UMTS:
            up = 384;
            down = 384;
            break;
        // fall through
        case ServiceState.RIL_RADIO_TECHNOLOGY_IS95A:
        case ServiceState.RIL_RADIO_TECHNOLOGY_IS95B:
            up = 14;
            down = 14;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_0:
            up = 153;
            down = 2457;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_A:
            up = 1843;
            down = 3174;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT:
            up = 100;
            down = 100;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSDPA:
            up = 2048;
            down = 14336;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSUPA:
            up = 5898;
            down = 14336;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSPA:
            up = 5898;
            down = 14336;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EVDO_B:
            up = 1843;
            down = 5017;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_LTE:
            up = 51200;
            down = 102400;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_LTE_CA:
            up = 51200;
            down = 102400;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_EHRPD:
            up = 153;
            down = 2516;
            break;
        case ServiceState.RIL_RADIO_TECHNOLOGY_HSPAP:
            up = 11264;
            down = 43008;
            break;
        default:
    }
    result.setLinkUpstreamBandwidthKbps(up);
    result.setLinkDownstreamBandwidthKbps(down);
    result.setNetworkSpecifier(new StringNetworkSpecifier(Integer.toString(mPhone.getSubId())));
    result.setCapability(NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING, !mPhone.getServiceState().getDataRoaming());
    result.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED);
    // Override values set above when requested by policy
    if ((mSubscriptionOverride & OVERRIDE_UNMETERED) != 0) {
        result.addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED);
    }
    if ((mSubscriptionOverride & OVERRIDE_CONGESTED) != 0) {
        result.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED);
    }
    return result;
}
#end_block

#method_before
@Override
public boolean processMessage(Message msg) {
    boolean retVal = HANDLED;
    if (VDBG) {
        log("DcDefault msg=" + getWhatToString(msg.what) + " RefCount=" + mApnContexts.size());
    }
    switch(msg.what) {
        case EVENT_RESET:
            if (VDBG)
                log("DcDefaultState: msg.what=REQ_RESET");
            transitionTo(mInactiveState);
            break;
        case EVENT_CONNECT:
            if (DBG)
                log("DcDefaultState: msg.what=EVENT_CONNECT, fail not expected");
            ConnectionParams cp = (ConnectionParams) msg.obj;
            notifyConnectCompleted(cp, DataFailCause.UNKNOWN, false);
            break;
        case EVENT_DISCONNECT:
        case EVENT_DISCONNECT_ALL:
        case EVENT_REEVALUATE_RESTRICTED_STATE:
            if (DBG) {
                log("DcDefaultState deferring msg.what=" + getWhatToString(msg.what) + " RefCount=" + mApnContexts.size());
            }
            deferMessage(msg);
            break;
        case EVENT_TEAR_DOWN_NOW:
            if (DBG)
                log("DcDefaultState EVENT_TEAR_DOWN_NOW");
            mDataServiceManager.deactivateDataCall(mCid, DataService.REQUEST_REASON_NORMAL, null);
            break;
        case EVENT_LOST_CONNECTION:
            if (DBG) {
                String s = "DcDefaultState ignore EVENT_LOST_CONNECTION" + " tag=" + msg.arg1 + ":mTag=" + mTag;
                logAndAddLogRec(s);
            }
            break;
        case EVENT_DATA_CONNECTION_DRS_OR_RAT_CHANGED:
            AsyncResult ar = (AsyncResult) msg.obj;
            Pair<Integer, Integer> drsRatPair = (Pair<Integer, Integer>) ar.result;
            mDataRegState = drsRatPair.first;
            if (mRilRat != drsRatPair.second) {
                updateTcpBufferSizes(drsRatPair.second);
            }
            mRilRat = drsRatPair.second;
            if (DBG) {
                log("DcDefaultState: EVENT_DATA_CONNECTION_DRS_OR_RAT_CHANGED" + " drs=" + mDataRegState + " mRilRat=" + mRilRat);
            }
            updateNetworkInfo();
            updateNetworkInfoSuspendState();
            if (mNetworkAgent != null) {
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                mNetworkAgent.sendNetworkInfo(mNetworkInfo);
                mNetworkAgent.sendLinkProperties(mLinkProperties);
            }
            break;
        case EVENT_DATA_CONNECTION_ROAM_ON:
        case EVENT_DATA_CONNECTION_ROAM_OFF:
        case EVENT_DATA_CONNECTION_OVERRIDE_CHANGED:
            updateNetworkInfo();
            if (mNetworkAgent != null) {
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                mNetworkAgent.sendNetworkInfo(mNetworkInfo);
            }
            break;
        case EVENT_KEEPALIVE_START_REQUEST:
        case EVENT_KEEPALIVE_STOP_REQUEST:
            if (mNetworkAgent != null) {
                mNetworkAgent.onPacketKeepaliveEvent(msg.arg1, ConnectivityManager.PacketKeepalive.ERROR_INVALID_NETWORK);
            }
            break;
        default:
            if (DBG) {
                log("DcDefaultState: shouldn't happen but ignore msg.what=" + getWhatToString(msg.what));
            }
            break;
    }
    return retVal;
}
#method_after
@Override
public boolean processMessage(Message msg) {
    boolean retVal = HANDLED;
    if (VDBG) {
        log("DcDefault msg=" + getWhatToString(msg.what) + " RefCount=" + mApnContexts.size());
    }
    switch(msg.what) {
        case EVENT_RESET:
            if (VDBG)
                log("DcDefaultState: msg.what=REQ_RESET");
            transitionTo(mInactiveState);
            break;
        case EVENT_CONNECT:
            if (DBG)
                log("DcDefaultState: msg.what=EVENT_CONNECT, fail not expected");
            ConnectionParams cp = (ConnectionParams) msg.obj;
            notifyConnectCompleted(cp, DataFailCause.UNKNOWN, false);
            break;
        case EVENT_DISCONNECT:
        case EVENT_DISCONNECT_ALL:
        case EVENT_REEVALUATE_RESTRICTED_STATE:
            if (DBG) {
                log("DcDefaultState deferring msg.what=" + getWhatToString(msg.what) + " RefCount=" + mApnContexts.size());
            }
            deferMessage(msg);
            break;
        case EVENT_TEAR_DOWN_NOW:
            if (DBG)
                log("DcDefaultState EVENT_TEAR_DOWN_NOW");
            mDataServiceManager.deactivateDataCall(mCid, DataService.REQUEST_REASON_NORMAL, null);
            break;
        case EVENT_LOST_CONNECTION:
            if (DBG) {
                String s = "DcDefaultState ignore EVENT_LOST_CONNECTION" + " tag=" + msg.arg1 + ":mTag=" + mTag;
                logAndAddLogRec(s);
            }
            break;
        case EVENT_DATA_CONNECTION_DRS_OR_RAT_CHANGED:
            AsyncResult ar = (AsyncResult) msg.obj;
            Pair<Integer, Integer> drsRatPair = (Pair<Integer, Integer>) ar.result;
            mDataRegState = drsRatPair.first;
            if (mRilRat != drsRatPair.second) {
                updateTcpBufferSizes(drsRatPair.second);
            }
            mRilRat = drsRatPair.second;
            if (DBG) {
                log("DcDefaultState: EVENT_DATA_CONNECTION_DRS_OR_RAT_CHANGED" + " drs=" + mDataRegState + " mRilRat=" + mRilRat);
            }
            updateNetworkInfo();
            updateNetworkInfoSuspendState();
            if (mNetworkAgent != null) {
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                mNetworkAgent.sendNetworkInfo(mNetworkInfo);
                mNetworkAgent.sendLinkProperties(mLinkProperties);
            }
            break;
        case EVENT_DATA_CONNECTION_ROAM_ON:
        case EVENT_DATA_CONNECTION_ROAM_OFF:
        case EVENT_DATA_CONNECTION_OVERRIDE_CHANGED:
            updateNetworkInfo();
            if (mNetworkAgent != null) {
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                mNetworkAgent.sendNetworkInfo(mNetworkInfo);
            }
            break;
        case EVENT_KEEPALIVE_START_REQUEST:
        case EVENT_KEEPALIVE_STOP_REQUEST:
            if (mNetworkAgent != null) {
                mNetworkAgent.onSocketKeepaliveEvent(msg.arg1, SocketKeepalive.ERROR_INVALID_NETWORK);
            }
            break;
        default:
            if (DBG) {
                log("DcDefaultState: shouldn't happen but ignore msg.what=" + getWhatToString(msg.what));
            }
            break;
    }
    return retVal;
}
#end_block

#method_before
@Override
public boolean processMessage(Message msg) {
    boolean retVal;
    switch(msg.what) {
        case EVENT_RESET:
        case EVENT_REEVALUATE_RESTRICTED_STATE:
            if (DBG) {
                log("DcInactiveState: msg.what=" + getWhatToString(msg.what) + ", ignore we're already done");
            }
            retVal = HANDLED;
            break;
        case EVENT_CONNECT:
            if (DBG)
                log("DcInactiveState: mag.what=EVENT_CONNECT");
            ConnectionParams cp = (ConnectionParams) msg.obj;
            if (initConnection(cp)) {
                onConnect(mConnectionParams);
                transitionTo(mActivatingState);
            } else {
                if (DBG) {
                    log("DcInactiveState: msg.what=EVENT_CONNECT initConnection failed");
                }
                notifyConnectCompleted(cp, DataFailCause.UNACCEPTABLE_NETWORK_PARAMETER, false);
            }
            retVal = HANDLED;
            break;
        case EVENT_DISCONNECT:
            if (DBG)
                log("DcInactiveState: msg.what=EVENT_DISCONNECT");
            notifyDisconnectCompleted((DisconnectParams) msg.obj, false);
            retVal = HANDLED;
            break;
        case EVENT_DISCONNECT_ALL:
            if (DBG)
                log("DcInactiveState: msg.what=EVENT_DISCONNECT_ALL");
            notifyDisconnectCompleted((DisconnectParams) msg.obj, false);
            retVal = HANDLED;
            break;
        default:
            if (VDBG) {
                log("DcInactiveState nothandled msg.what=" + getWhatToString(msg.what));
            }
            retVal = NOT_HANDLED;
            break;
    }
    return retVal;
}
#method_after
@Override
public boolean processMessage(Message msg) {
    switch(msg.what) {
        case EVENT_RESET:
        case EVENT_REEVALUATE_RESTRICTED_STATE:
            if (DBG) {
                log("DcInactiveState: msg.what=" + getWhatToString(msg.what) + ", ignore we're already done");
            }
            return HANDLED;
        case EVENT_CONNECT:
            if (DBG)
                log("DcInactiveState: mag.what=EVENT_CONNECT");
            ConnectionParams cp = (ConnectionParams) msg.obj;
            if (!initConnection(cp)) {
                log("DcInactiveState: msg.what=EVENT_CONNECT initConnection failed");
                notifyConnectCompleted(cp, DataFailCause.UNACCEPTABLE_NETWORK_PARAMETER, false);
                transitionTo(mInactiveState);
                return HANDLED;
            }
            int cause = connect(cp);
            if (cause != DataFailCause.NONE) {
                log("DcInactiveState: msg.what=EVENT_CONNECT connect failed");
                notifyConnectCompleted(cp, cause, false);
                transitionTo(mInactiveState);
                return HANDLED;
            }
            transitionTo(mActivatingState);
            return HANDLED;
        case EVENT_DISCONNECT:
            if (DBG)
                log("DcInactiveState: msg.what=EVENT_DISCONNECT");
            notifyDisconnectCompleted((DisconnectParams) msg.obj, false);
            return HANDLED;
        case EVENT_DISCONNECT_ALL:
            if (DBG)
                log("DcInactiveState: msg.what=EVENT_DISCONNECT_ALL");
            notifyDisconnectCompleted((DisconnectParams) msg.obj, false);
            return HANDLED;
        default:
            if (VDBG) {
                log("DcInactiveState not handled msg.what=" + getWhatToString(msg.what));
            }
            return NOT_HANDLED;
    }
}
#end_block

#method_before
@Override
public void enter() {
    if (DBG)
        log("DcActiveState: enter dc=" + DataConnection.this);
    StatsLog.write(StatsLog.MOBILE_CONNECTION_STATE_CHANGED, StatsLog.MOBILE_CONNECTION_STATE_CHANGED__STATE__ACTIVE, mPhone.getPhoneId(), mId, mApnSetting != null ? (long) mApnSetting.getApnTypeBitmask() : 0L, mApnSetting != null ? mApnSetting.canHandleType(ApnSetting.TYPE_DEFAULT) : false);
    updateNetworkInfo();
    // If we were retrying there maybe more than one, otherwise they'll only be one.
    notifyAllWithEvent(null, DctConstants.EVENT_DATA_SETUP_COMPLETE, Phone.REASON_CONNECTED);
    mPhone.getCallTracker().registerForVoiceCallStarted(getHandler(), DataConnection.EVENT_DATA_CONNECTION_VOICE_CALL_STARTED, null);
    mPhone.getCallTracker().registerForVoiceCallEnded(getHandler(), DataConnection.EVENT_DATA_CONNECTION_VOICE_CALL_ENDED, null);
    // If the EVENT_CONNECT set the current max retry restore it here
    // if it didn't then this is effectively a NOP.
    mDcController.addActiveDcByCid(DataConnection.this);
    mNetworkInfo.setDetailedState(NetworkInfo.DetailedState.CONNECTED, mNetworkInfo.getReason(), null);
    mNetworkInfo.setExtraInfo(mApnSetting.getApnName());
    updateTcpBufferSizes(mRilRat);
    final NetworkMisc misc = new NetworkMisc();
    final CarrierSignalAgent carrierSignalAgent = mPhone.getCarrierSignalAgent();
    if (carrierSignalAgent.hasRegisteredReceivers(TelephonyIntents.ACTION_CARRIER_SIGNAL_REDIRECTED)) {
        // carrierSignal Receivers will place the carrier-specific provisioning notification
        misc.provisioningNotificationDisabled = true;
    }
    misc.subscriberId = mPhone.getSubscriberId();
    misc.skip464xlat = isSkip464XlatCapabilities(getNetworkCapabilities(), mPhone.getSubId());
    mRestrictedNetworkOverride = shouldRestrictNetwork();
    mUnmeteredUseOnly = isUnmeteredUseOnly();
    if (DBG) {
        log("mRestrictedNetworkOverride = " + mRestrictedNetworkOverride + ", mUnmeteredUseOnly = " + mUnmeteredUseOnly);
    }
    mNetworkAgent = new DcNetworkAgent(getHandler().getLooper(), mPhone.getContext(), "DcNetworkAgent", mNetworkInfo, getNetworkCapabilities(), mLinkProperties, 50, misc);
    if (mDataServiceManager.getTransportType() == TransportType.WWAN) {
        mPhone.mCi.registerForNattKeepaliveStatus(getHandler(), DataConnection.EVENT_KEEPALIVE_STATUS, null);
        mPhone.mCi.registerForLceInfo(getHandler(), DataConnection.EVENT_LINK_CAPACITY_CHANGED, null);
    }
}
#method_after
@Override
public void enter() {
    if (DBG)
        log("DcActiveState: enter dc=" + DataConnection.this);
    StatsLog.write(StatsLog.MOBILE_CONNECTION_STATE_CHANGED, StatsLog.MOBILE_CONNECTION_STATE_CHANGED__STATE__ACTIVE, mPhone.getPhoneId(), mId, mApnSetting != null ? (long) mApnSetting.getApnTypeBitmask() : 0L, mApnSetting != null ? mApnSetting.canHandleType(ApnSetting.TYPE_DEFAULT) : false);
    updateNetworkInfo();
    // If we were retrying there maybe more than one, otherwise they'll only be one.
    notifyAllWithEvent(null, DctConstants.EVENT_DATA_SETUP_COMPLETE, Phone.REASON_CONNECTED);
    mPhone.getCallTracker().registerForVoiceCallStarted(getHandler(), DataConnection.EVENT_DATA_CONNECTION_VOICE_CALL_STARTED, null);
    mPhone.getCallTracker().registerForVoiceCallEnded(getHandler(), DataConnection.EVENT_DATA_CONNECTION_VOICE_CALL_ENDED, null);
    // If the EVENT_CONNECT set the current max retry restore it here
    // if it didn't then this is effectively a NOP.
    mDcController.addActiveDcByCid(DataConnection.this);
    mNetworkInfo.setDetailedState(NetworkInfo.DetailedState.CONNECTED, mNetworkInfo.getReason(), null);
    mNetworkInfo.setExtraInfo(mApnSetting.getApnName());
    updateTcpBufferSizes(mRilRat);
    final NetworkMisc misc = new NetworkMisc();
    final CarrierSignalAgent carrierSignalAgent = mPhone.getCarrierSignalAgent();
    if (carrierSignalAgent.hasRegisteredReceivers(TelephonyIntents.ACTION_CARRIER_SIGNAL_REDIRECTED)) {
        // carrierSignal Receivers will place the carrier-specific provisioning notification
        misc.provisioningNotificationDisabled = true;
    }
    misc.subscriberId = mPhone.getSubscriberId();
    // set skip464xlat if it is not default otherwise
    misc.skip464xlat = shouldSkip464Xlat();
    mRestrictedNetworkOverride = shouldRestrictNetwork();
    mUnmeteredUseOnly = isUnmeteredUseOnly();
    if (DBG) {
        log("mRestrictedNetworkOverride = " + mRestrictedNetworkOverride + ", mUnmeteredUseOnly = " + mUnmeteredUseOnly);
    }
    if (mConnectionParams != null && mConnectionParams.mRequestType == DcTracker.REQUEST_TYPE_HANDOVER) {
        // If this is a data setup for handover, we need to reuse the existing network agent
        // instead of creating a new one. This should be transparent to connectivity
        // service.
        DcTracker dcTracker = getHandoverDcTracker();
        DataConnection dc = dcTracker.getDataConnectionByApnType(mConnectionParams.mApnContext.getApnType());
        if (dc != null) {
            mNetworkAgent = dc.getNetworkAgent();
            if (mNetworkAgent != null) {
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                mNetworkAgent.sendLinkProperties(mLinkProperties);
            } else {
                loge("Failed to get network agent from original data connection " + dc);
            }
        } else {
            loge("Cannot find the data connection for handover.");
        }
    } else {
        mScore = calculateScore();
        mNetworkAgent = new DcNetworkAgent(getHandler().getLooper(), mPhone.getContext(), "DcNetworkAgent", mNetworkInfo, getNetworkCapabilities(), mLinkProperties, mScore, misc);
    }
    if (mDataServiceManager.getTransportType() == TransportType.WWAN) {
        mPhone.mCi.registerForNattKeepaliveStatus(getHandler(), DataConnection.EVENT_KEEPALIVE_STATUS, null);
        mPhone.mCi.registerForLceInfo(getHandler(), DataConnection.EVENT_LINK_CAPACITY_CHANGED, null);
    }
}
#end_block

#method_before
@Override
public void exit() {
    if (DBG)
        log("DcActiveState: exit dc=" + this);
    String reason = mNetworkInfo.getReason();
    if (mDcController.isExecutingCarrierChange()) {
        reason = Phone.REASON_CARRIER_CHANGE;
    } else if (mDisconnectParams != null && mDisconnectParams.mReason != null) {
        reason = mDisconnectParams.mReason;
    } else {
        reason = DataFailCause.toString(mDcFailCause);
    }
    mPhone.getCallTracker().unregisterForVoiceCallStarted(getHandler());
    mPhone.getCallTracker().unregisterForVoiceCallEnded(getHandler());
    mNetworkInfo.setDetailedState(NetworkInfo.DetailedState.DISCONNECTED, reason, mNetworkInfo.getExtraInfo());
    if (mDataServiceManager.getTransportType() == TransportType.WWAN) {
        mPhone.mCi.unregisterForNattKeepaliveStatus(getHandler());
        mPhone.mCi.unregisterForLceInfo(getHandler());
    }
    if (mNetworkAgent != null) {
        mNetworkAgent.sendNetworkInfo(mNetworkInfo);
        mNetworkAgent = null;
    }
}
#method_after
@Override
public void exit() {
    if (DBG)
        log("DcActiveState: exit dc=" + this);
    String reason = mNetworkInfo.getReason();
    if (mDcController.isExecutingCarrierChange()) {
        reason = Phone.REASON_CARRIER_CHANGE;
    } else if (mDisconnectParams != null && mDisconnectParams.mReason != null) {
        reason = mDisconnectParams.mReason;
    } else {
        reason = DataFailCause.toString(mDcFailCause);
    }
    mPhone.getCallTracker().unregisterForVoiceCallStarted(getHandler());
    mPhone.getCallTracker().unregisterForVoiceCallEnded(getHandler());
    mNetworkInfo.setDetailedState(NetworkInfo.DetailedState.DISCONNECTED, reason, mNetworkInfo.getExtraInfo());
    if (mDataServiceManager.getTransportType() == TransportType.WWAN) {
        mPhone.mCi.unregisterForNattKeepaliveStatus(getHandler());
        mPhone.mCi.unregisterForLceInfo(getHandler());
    }
    if (mNetworkAgent != null) {
        // For handover, the network agent is transferred to the other data connection.
        if (mDisconnectParams == null || mDisconnectParams.mReleaseType != DcTracker.RELEASE_TYPE_HANDOVER) {
            mNetworkAgent.sendNetworkInfo(mNetworkInfo);
        }
        mNetworkAgent = null;
    }
}
#end_block

#method_before
@Override
public boolean processMessage(Message msg) {
    boolean retVal;
    switch(msg.what) {
        case EVENT_CONNECT:
            {
                ConnectionParams cp = (ConnectionParams) msg.obj;
                // either add this new apn context to our set or
                // update the existing cp with the latest connection generation number
                mApnContexts.put(cp.mApnContext, cp);
                // TODO (b/118347948): evaluate if it's still needed after assigning
                // different scores to different Cellular network.
                mDisabledApnTypeBitMask &= ~cp.mApnContext.getApnTypeBitmask();
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                if (DBG) {
                    log("DcActiveState: EVENT_CONNECT cp=" + cp + " dc=" + DataConnection.this);
                }
                notifyConnectCompleted(cp, DataFailCause.NONE, false);
                retVal = HANDLED;
                break;
            }
        case EVENT_DISCONNECT:
            {
                DisconnectParams dp = (DisconnectParams) msg.obj;
                if (DBG) {
                    log("DcActiveState: EVENT_DISCONNECT dp=" + dp + " dc=" + DataConnection.this);
                }
                if (mApnContexts.containsKey(dp.mApnContext)) {
                    if (DBG) {
                        log("DcActiveState msg.what=EVENT_DISCONNECT RefCount=" + mApnContexts.size());
                    }
                    if (mApnContexts.size() == 1) {
                        mApnContexts.clear();
                        mDisconnectParams = dp;
                        mConnectionParams = null;
                        dp.mTag = mTag;
                        tearDownData(dp);
                        transitionTo(mDisconnectingState);
                    } else {
                        mApnContexts.remove(dp.mApnContext);
                        // TODO (b/118347948): evaluate if it's still needed after assigning
                        // different scores to different Cellular network.
                        mDisabledApnTypeBitMask |= dp.mApnContext.getApnTypeBitmask();
                        mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                        notifyDisconnectCompleted(dp, false);
                    }
                } else {
                    log("DcActiveState ERROR no such apnContext=" + dp.mApnContext + " in this dc=" + DataConnection.this);
                    notifyDisconnectCompleted(dp, false);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_DISCONNECT_ALL:
            {
                if (DBG) {
                    log("DcActiveState EVENT_DISCONNECT clearing apn contexts," + " dc=" + DataConnection.this);
                }
                DisconnectParams dp = (DisconnectParams) msg.obj;
                mDisconnectParams = dp;
                mConnectionParams = null;
                dp.mTag = mTag;
                tearDownData(dp);
                transitionTo(mDisconnectingState);
                retVal = HANDLED;
                break;
            }
        case EVENT_LOST_CONNECTION:
            {
                if (DBG) {
                    log("DcActiveState EVENT_LOST_CONNECTION dc=" + DataConnection.this);
                }
                mInactiveState.setEnterNotificationParams(DataFailCause.LOST_CONNECTION);
                transitionTo(mInactiveState);
                retVal = HANDLED;
                break;
            }
        case EVENT_DATA_CONNECTION_ROAM_ON:
        case EVENT_DATA_CONNECTION_ROAM_OFF:
        case EVENT_DATA_CONNECTION_OVERRIDE_CHANGED:
            {
                updateNetworkInfo();
                if (mNetworkAgent != null) {
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                    mNetworkAgent.sendNetworkInfo(mNetworkInfo);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_BW_REFRESH_RESPONSE:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                if (ar.exception != null) {
                    log("EVENT_BW_REFRESH_RESPONSE: error ignoring, e=" + ar.exception);
                } else {
                    final LinkCapacityEstimate lce = (LinkCapacityEstimate) ar.result;
                    NetworkCapabilities nc = getNetworkCapabilities();
                    if (mPhone.getLceStatus() == RILConstants.LCE_ACTIVE) {
                        nc.setLinkDownstreamBandwidthKbps(lce.downlinkCapacityKbps);
                        if (mNetworkAgent != null) {
                            mNetworkAgent.sendNetworkCapabilities(nc);
                        }
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_DATA_CONNECTION_VOICE_CALL_STARTED:
        case EVENT_DATA_CONNECTION_VOICE_CALL_ENDED:
            {
                updateNetworkInfo();
                updateNetworkInfoSuspendState();
                if (mNetworkAgent != null) {
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                    mNetworkAgent.sendNetworkInfo(mNetworkInfo);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_START_REQUEST:
            {
                KeepalivePacketData pkt = (KeepalivePacketData) msg.obj;
                int slotId = msg.arg1;
                int intervalMillis = msg.arg2 * 1000;
                if (mDataServiceManager.getTransportType() == TransportType.WWAN) {
                    mPhone.mCi.startNattKeepalive(DataConnection.this.mCid, pkt, intervalMillis, DataConnection.this.obtainMessage(EVENT_KEEPALIVE_STARTED, slotId, 0, null));
                } else {
                    // underlying transport.
                    if (mNetworkAgent != null) {
                        mNetworkAgent.onPacketKeepaliveEvent(msg.arg1, ConnectivityManager.PacketKeepalive.ERROR_INVALID_NETWORK);
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STOP_REQUEST:
            {
                int slotId = msg.arg1;
                int handle = mNetworkAgent.keepaliveTracker.getHandleForSlot(slotId);
                if (handle < 0) {
                    loge("No slot found for stopPacketKeepalive! " + slotId);
                    retVal = HANDLED;
                    break;
                } else {
                    logd("Stopping keepalive with handle: " + handle);
                }
                mPhone.mCi.stopNattKeepalive(handle, DataConnection.this.obtainMessage(EVENT_KEEPALIVE_STOPPED, handle, slotId, null));
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STARTED:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                final int slot = msg.arg1;
                if (ar.exception != null || ar.result == null) {
                    loge("EVENT_KEEPALIVE_STARTED: error starting keepalive, e=" + ar.exception);
                    mNetworkAgent.onPacketKeepaliveEvent(slot, ConnectivityManager.PacketKeepalive.ERROR_HARDWARE_ERROR);
                } else {
                    KeepaliveStatus ks = (KeepaliveStatus) ar.result;
                    if (ks == null) {
                        loge("Null KeepaliveStatus received!");
                    } else {
                        mNetworkAgent.keepaliveTracker.handleKeepaliveStarted(slot, ks);
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STATUS:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                if (ar.exception != null) {
                    loge("EVENT_KEEPALIVE_STATUS: error in keepalive, e=" + ar.exception);
                // We have no way to notify connectivity in this case.
                }
                if (ar.result != null) {
                    KeepaliveStatus ks = (KeepaliveStatus) ar.result;
                    mNetworkAgent.keepaliveTracker.handleKeepaliveStatus(ks);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STOPPED:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                final int handle = msg.arg1;
                final int slotId = msg.arg2;
                if (ar.exception != null) {
                    loge("EVENT_KEEPALIVE_STOPPED: error stopping keepalive for handle=" + handle + " e=" + ar.exception);
                    mNetworkAgent.keepaliveTracker.handleKeepaliveStatus(new KeepaliveStatus(KeepaliveStatus.ERROR_UNKNOWN));
                } else {
                    log("Keepalive Stop Requested for handle=" + handle);
                    mNetworkAgent.keepaliveTracker.handleKeepaliveStatus(new KeepaliveStatus(handle, KeepaliveStatus.STATUS_INACTIVE));
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_LINK_CAPACITY_CHANGED:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                if (ar.exception != null) {
                    loge("EVENT_LINK_CAPACITY_CHANGED e=" + ar.exception);
                } else {
                    LinkCapacityEstimate lce = (LinkCapacityEstimate) ar.result;
                    NetworkCapabilities nc = getNetworkCapabilities();
                    if (lce.downlinkCapacityKbps != LinkCapacityEstimate.INVALID) {
                        nc.setLinkDownstreamBandwidthKbps(lce.downlinkCapacityKbps);
                    }
                    if (lce.uplinkCapacityKbps != LinkCapacityEstimate.INVALID) {
                        nc.setLinkUpstreamBandwidthKbps(lce.uplinkCapacityKbps);
                    }
                    if (mNetworkAgent != null) {
                        mNetworkAgent.sendNetworkCapabilities(nc);
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_REEVALUATE_RESTRICTED_STATE:
            {
                // anymore, we should add the NET_CAPABILITY_NOT_RESTRICTED capability.
                if (mRestrictedNetworkOverride && !shouldRestrictNetwork()) {
                    if (DBG) {
                        log("Data connection becomes not-restricted. dc=" + this);
                    }
                    // Note we only do this when network becomes non-restricted. When a
                    // non-restricted becomes restricted (e.g. users disable data, or turn off
                    // data roaming), DCT will explicitly tear down the networks (because
                    // connectivity service does not support force-close TCP connections today).
                    // Also note that NET_CAPABILITY_NOT_RESTRICTED is an immutable capability
                    // (see {@link NetworkCapabilities}) once we add it to the network, we can't
                    // remove it through the entire life cycle of the connection.
                    mRestrictedNetworkOverride = false;
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                }
                // capabilities.)
                if (mUnmeteredUseOnly && !isUnmeteredUseOnly()) {
                    mUnmeteredUseOnly = false;
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                }
                retVal = HANDLED;
                break;
            }
        default:
            if (VDBG) {
                log("DcActiveState not handled msg.what=" + getWhatToString(msg.what));
            }
            retVal = NOT_HANDLED;
            break;
    }
    return retVal;
}
#method_after
@Override
public boolean processMessage(Message msg) {
    boolean retVal;
    switch(msg.what) {
        case EVENT_CONNECT:
            {
                ConnectionParams cp = (ConnectionParams) msg.obj;
                // either add this new apn context to our set or
                // update the existing cp with the latest connection generation number
                mApnContexts.put(cp.mApnContext, cp);
                // TODO (b/118347948): evaluate if it's still needed after assigning
                // different scores to different Cellular network.
                mDisabledApnTypeBitMask &= ~cp.mApnContext.getApnTypeBitmask();
                mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                if (DBG) {
                    log("DcActiveState: EVENT_CONNECT cp=" + cp + " dc=" + DataConnection.this);
                }
                notifyConnectCompleted(cp, DataFailCause.NONE, false);
                retVal = HANDLED;
                break;
            }
        case EVENT_DISCONNECT:
            {
                DisconnectParams dp = (DisconnectParams) msg.obj;
                if (DBG) {
                    log("DcActiveState: EVENT_DISCONNECT dp=" + dp + " dc=" + DataConnection.this);
                }
                if (mApnContexts.containsKey(dp.mApnContext)) {
                    if (DBG) {
                        log("DcActiveState msg.what=EVENT_DISCONNECT RefCount=" + mApnContexts.size());
                    }
                    if (mApnContexts.size() == 1) {
                        mApnContexts.clear();
                        mDisconnectParams = dp;
                        mConnectionParams = null;
                        dp.mTag = mTag;
                        tearDownData(dp);
                        transitionTo(mDisconnectingState);
                    } else {
                        mApnContexts.remove(dp.mApnContext);
                        // TODO (b/118347948): evaluate if it's still needed after assigning
                        // different scores to different Cellular network.
                        mDisabledApnTypeBitMask |= dp.mApnContext.getApnTypeBitmask();
                        mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                        notifyDisconnectCompleted(dp, false);
                    }
                } else {
                    log("DcActiveState ERROR no such apnContext=" + dp.mApnContext + " in this dc=" + DataConnection.this);
                    notifyDisconnectCompleted(dp, false);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_DISCONNECT_ALL:
            {
                if (DBG) {
                    log("DcActiveState EVENT_DISCONNECT clearing apn contexts," + " dc=" + DataConnection.this);
                }
                DisconnectParams dp = (DisconnectParams) msg.obj;
                mDisconnectParams = dp;
                mConnectionParams = null;
                dp.mTag = mTag;
                tearDownData(dp);
                transitionTo(mDisconnectingState);
                retVal = HANDLED;
                break;
            }
        case EVENT_LOST_CONNECTION:
            {
                if (DBG) {
                    log("DcActiveState EVENT_LOST_CONNECTION dc=" + DataConnection.this);
                }
                mInactiveState.setEnterNotificationParams(DataFailCause.LOST_CONNECTION);
                transitionTo(mInactiveState);
                retVal = HANDLED;
                break;
            }
        case EVENT_DATA_CONNECTION_ROAM_ON:
        case EVENT_DATA_CONNECTION_ROAM_OFF:
        case EVENT_DATA_CONNECTION_OVERRIDE_CHANGED:
            {
                updateNetworkInfo();
                if (mNetworkAgent != null) {
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                    mNetworkAgent.sendNetworkInfo(mNetworkInfo);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_BW_REFRESH_RESPONSE:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                if (ar.exception != null) {
                    log("EVENT_BW_REFRESH_RESPONSE: error ignoring, e=" + ar.exception);
                } else {
                    final LinkCapacityEstimate lce = (LinkCapacityEstimate) ar.result;
                    NetworkCapabilities nc = getNetworkCapabilities();
                    if (mPhone.getLceStatus() == RILConstants.LCE_ACTIVE) {
                        nc.setLinkDownstreamBandwidthKbps(lce.downlinkCapacityKbps);
                        if (mNetworkAgent != null) {
                            mNetworkAgent.sendNetworkCapabilities(nc);
                        }
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_DATA_CONNECTION_VOICE_CALL_STARTED:
        case EVENT_DATA_CONNECTION_VOICE_CALL_ENDED:
            {
                updateNetworkInfo();
                updateNetworkInfoSuspendState();
                if (mNetworkAgent != null) {
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                    mNetworkAgent.sendNetworkInfo(mNetworkInfo);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_START_REQUEST:
            {
                KeepalivePacketData pkt = (KeepalivePacketData) msg.obj;
                int slotId = msg.arg1;
                int intervalMillis = msg.arg2 * 1000;
                if (mDataServiceManager.getTransportType() == TransportType.WWAN) {
                    mPhone.mCi.startNattKeepalive(DataConnection.this.mCid, pkt, intervalMillis, DataConnection.this.obtainMessage(EVENT_KEEPALIVE_STARTED, slotId, 0, null));
                } else {
                    // underlying transport.
                    if (mNetworkAgent != null) {
                        mNetworkAgent.onSocketKeepaliveEvent(msg.arg1, SocketKeepalive.ERROR_INVALID_NETWORK);
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STOP_REQUEST:
            {
                int slotId = msg.arg1;
                int handle = mNetworkAgent.keepaliveTracker.getHandleForSlot(slotId);
                if (handle < 0) {
                    loge("No slot found for stopSocketKeepalive! " + slotId);
                    retVal = HANDLED;
                    break;
                } else {
                    logd("Stopping keepalive with handle: " + handle);
                }
                mPhone.mCi.stopNattKeepalive(handle, DataConnection.this.obtainMessage(EVENT_KEEPALIVE_STOPPED, handle, slotId, null));
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STARTED:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                final int slot = msg.arg1;
                if (ar.exception != null || ar.result == null) {
                    loge("EVENT_KEEPALIVE_STARTED: error starting keepalive, e=" + ar.exception);
                    mNetworkAgent.onSocketKeepaliveEvent(slot, SocketKeepalive.ERROR_HARDWARE_ERROR);
                } else {
                    KeepaliveStatus ks = (KeepaliveStatus) ar.result;
                    if (ks == null) {
                        loge("Null KeepaliveStatus received!");
                    } else {
                        mNetworkAgent.keepaliveTracker.handleKeepaliveStarted(slot, ks);
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STATUS:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                if (ar.exception != null) {
                    loge("EVENT_KEEPALIVE_STATUS: error in keepalive, e=" + ar.exception);
                // We have no way to notify connectivity in this case.
                }
                if (ar.result != null) {
                    KeepaliveStatus ks = (KeepaliveStatus) ar.result;
                    mNetworkAgent.keepaliveTracker.handleKeepaliveStatus(ks);
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_KEEPALIVE_STOPPED:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                final int handle = msg.arg1;
                final int slotId = msg.arg2;
                if (ar.exception != null) {
                    loge("EVENT_KEEPALIVE_STOPPED: error stopping keepalive for handle=" + handle + " e=" + ar.exception);
                    mNetworkAgent.keepaliveTracker.handleKeepaliveStatus(new KeepaliveStatus(KeepaliveStatus.ERROR_UNKNOWN));
                } else {
                    log("Keepalive Stop Requested for handle=" + handle);
                    mNetworkAgent.keepaliveTracker.handleKeepaliveStatus(new KeepaliveStatus(handle, KeepaliveStatus.STATUS_INACTIVE));
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_LINK_CAPACITY_CHANGED:
            {
                AsyncResult ar = (AsyncResult) msg.obj;
                if (ar.exception != null) {
                    loge("EVENT_LINK_CAPACITY_CHANGED e=" + ar.exception);
                } else {
                    LinkCapacityEstimate lce = (LinkCapacityEstimate) ar.result;
                    NetworkCapabilities nc = getNetworkCapabilities();
                    if (lce.downlinkCapacityKbps != LinkCapacityEstimate.INVALID) {
                        nc.setLinkDownstreamBandwidthKbps(lce.downlinkCapacityKbps);
                    }
                    if (lce.uplinkCapacityKbps != LinkCapacityEstimate.INVALID) {
                        nc.setLinkUpstreamBandwidthKbps(lce.uplinkCapacityKbps);
                    }
                    if (mNetworkAgent != null) {
                        mNetworkAgent.sendNetworkCapabilities(nc);
                    }
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_REEVALUATE_RESTRICTED_STATE:
            {
                // anymore, we should add the NET_CAPABILITY_NOT_RESTRICTED capability.
                if (mRestrictedNetworkOverride && !shouldRestrictNetwork()) {
                    if (DBG) {
                        log("Data connection becomes not-restricted. dc=" + this);
                    }
                    // Note we only do this when network becomes non-restricted. When a
                    // non-restricted becomes restricted (e.g. users disable data, or turn off
                    // data roaming), DCT will explicitly tear down the networks (because
                    // connectivity service does not support force-close TCP connections today).
                    // Also note that NET_CAPABILITY_NOT_RESTRICTED is an immutable capability
                    // (see {@link NetworkCapabilities}) once we add it to the network, we can't
                    // remove it through the entire life cycle of the connection.
                    mRestrictedNetworkOverride = false;
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                }
                // capabilities.)
                if (mUnmeteredUseOnly && !isUnmeteredUseOnly()) {
                    mUnmeteredUseOnly = false;
                    mNetworkAgent.sendNetworkCapabilities(getNetworkCapabilities());
                }
                retVal = HANDLED;
                break;
            }
        case EVENT_REEVALUATE_DATA_CONNECTION_PROPERTIES:
            {
                // Update other properties like link properties if needed in future.
                updateScore();
                retVal = HANDLED;
                break;
            }
        default:
            if (VDBG) {
                log("DcActiveState not handled msg.what=" + getWhatToString(msg.what));
            }
            retVal = NOT_HANDLED;
            break;
    }
    return retVal;
}
#end_block

#method_before
@Override
protected void unwanted() {
    if (mNetworkAgent != this) {
        log("DcNetworkAgent: unwanted found mNetworkAgent=" + mNetworkAgent + ", which isn't me.  Aborting unwanted");
        return;
    }
    // this can only happen if our exit has been called - we're already disconnected
    if (mApnContexts == null)
        return;
    for (ConnectionParams cp : mApnContexts.values()) {
        final ApnContext apnContext = cp.mApnContext;
        final Pair<ApnContext, Integer> pair = new Pair<ApnContext, Integer>(apnContext, cp.mConnectionGeneration);
        log("DcNetworkAgent: [unwanted]: disconnect apnContext=" + apnContext);
        Message msg = mDct.obtainMessage(DctConstants.EVENT_DISCONNECT_DONE, pair);
        DisconnectParams dp = new DisconnectParams(apnContext, apnContext.getReason(), msg);
        DataConnection.this.sendMessage(DataConnection.this.obtainMessage(EVENT_DISCONNECT, dp));
    }
}
#method_after
@Override
protected void unwanted() {
    if (mNetworkAgent != this) {
        log("DcNetworkAgent: unwanted found mNetworkAgent=" + mNetworkAgent + ", which isn't me.  Aborting unwanted");
        return;
    }
    // this can only happen if our exit has been called - we're already disconnected
    if (mApnContexts == null)
        return;
    for (ConnectionParams cp : mApnContexts.values()) {
        final ApnContext apnContext = cp.mApnContext;
        final Pair<ApnContext, Integer> pair = new Pair<ApnContext, Integer>(apnContext, cp.mConnectionGeneration);
        log("DcNetworkAgent: [unwanted]: disconnect apnContext=" + apnContext);
        Message msg = mDct.obtainMessage(DctConstants.EVENT_DISCONNECT_DONE, pair);
        DisconnectParams dp = new DisconnectParams(apnContext, apnContext.getReason(), DcTracker.RELEASE_TYPE_DETACH, msg);
        DataConnection.this.sendMessage(DataConnection.this.obtainMessage(EVENT_DISCONNECT, dp));
    }
}
#end_block

#method_before
@Override
protected void networkStatus(int status, String redirectUrl) {
    if (!TextUtils.isEmpty(redirectUrl)) {
        log("validation status: " + status + " with redirection URL: " + redirectUrl);
        /* its possible that we have multiple DataConnection with INTERNET_CAPABILITY
                   all fail the validation with the same redirection url, send CMD back to DCTracker
                   and let DcTracker to make the decision */
        Message msg = mDct.obtainMessage(DctConstants.EVENT_REDIRECTION_DETECTED, redirectUrl);
        msg.sendToTarget();
    }
}
#method_after
@Override
protected void networkStatus(int status, String redirectUrl) {
    log("validation status: " + status + " with redirection URL: " + redirectUrl);
    Message msg = mDct.obtainMessage(DctConstants.EVENT_NETWORK_STATUS_CHANGED, status, 0, redirectUrl);
    msg.sendToTarget();
}
#end_block

#method_before
int keepaliveStatusErrorToPacketKeepaliveError(int error) {
    switch(error) {
        case KeepaliveStatus.ERROR_NONE:
            return PacketKeepalive.SUCCESS;
        case KeepaliveStatus.ERROR_UNSUPPORTED:
            return PacketKeepalive.ERROR_HARDWARE_UNSUPPORTED;
        case KeepaliveStatus.ERROR_NO_RESOURCES:
        case KeepaliveStatus.ERROR_UNKNOWN:
        default:
            return PacketKeepalive.ERROR_HARDWARE_ERROR;
    }
}
#method_after
int keepaliveStatusErrorToPacketKeepaliveError(int error) {
    switch(error) {
        case KeepaliveStatus.ERROR_NONE:
            return SocketKeepalive.SUCCESS;
        case KeepaliveStatus.ERROR_UNSUPPORTED:
            return SocketKeepalive.ERROR_HARDWARE_UNSUPPORTED;
        case KeepaliveStatus.ERROR_NO_RESOURCES:
        case KeepaliveStatus.ERROR_UNKNOWN:
        default:
            return SocketKeepalive.ERROR_HARDWARE_ERROR;
    }
}
#end_block

#method_before
void handleKeepaliveStarted(final int slot, KeepaliveStatus ks) {
    switch(ks.statusCode) {
        case KeepaliveStatus.STATUS_INACTIVE:
            DcNetworkAgent.this.onPacketKeepaliveEvent(slot, keepaliveStatusErrorToPacketKeepaliveError(ks.errorCode));
            break;
        case KeepaliveStatus.STATUS_ACTIVE:
            DcNetworkAgent.this.onPacketKeepaliveEvent(slot, PacketKeepalive.SUCCESS);
        // fall through to add record
        case KeepaliveStatus.STATUS_PENDING:
            log("Adding keepalive handle=" + ks.sessionHandle + " slot = " + slot);
            mKeepalives.put(ks.sessionHandle, new KeepaliveRecord(slot, ks.statusCode));
            break;
        default:
            loge("Invalid KeepaliveStatus Code: " + ks.statusCode);
            break;
    }
}
#method_after
void handleKeepaliveStarted(final int slot, KeepaliveStatus ks) {
    switch(ks.statusCode) {
        case KeepaliveStatus.STATUS_INACTIVE:
            DcNetworkAgent.this.onSocketKeepaliveEvent(slot, keepaliveStatusErrorToPacketKeepaliveError(ks.errorCode));
            break;
        case KeepaliveStatus.STATUS_ACTIVE:
            DcNetworkAgent.this.onSocketKeepaliveEvent(slot, SocketKeepalive.SUCCESS);
        // fall through to add record
        case KeepaliveStatus.STATUS_PENDING:
            log("Adding keepalive handle=" + ks.sessionHandle + " slot = " + slot);
            mKeepalives.put(ks.sessionHandle, new KeepaliveRecord(slot, ks.statusCode));
            break;
        default:
            loge("Invalid KeepaliveStatus Code: " + ks.statusCode);
            break;
    }
}
#end_block

#method_before
void handleKeepaliveStatus(KeepaliveStatus ks) {
    final KeepaliveRecord kr;
    kr = mKeepalives.get(ks.sessionHandle);
    if (kr == null) {
        // If there is no slot for the session handle, we received an event
        // for a different data connection. This is not an error because the
        // keepalive session events are broadcast to all listeners.
        log("Discarding keepalive event for different data connection:" + ks);
        return;
    }
    // Switch on the current state, to see what we do with the status update
    switch(kr.currentStatus) {
        case KeepaliveStatus.STATUS_INACTIVE:
            loge("Inactive Keepalive received status!");
            DcNetworkAgent.this.onPacketKeepaliveEvent(kr.slotId, PacketKeepalive.ERROR_HARDWARE_ERROR);
            break;
        case KeepaliveStatus.STATUS_PENDING:
            switch(ks.statusCode) {
                case KeepaliveStatus.STATUS_INACTIVE:
                    DcNetworkAgent.this.onPacketKeepaliveEvent(kr.slotId, keepaliveStatusErrorToPacketKeepaliveError(ks.errorCode));
                    kr.currentStatus = KeepaliveStatus.STATUS_INACTIVE;
                    mKeepalives.remove(ks.sessionHandle);
                    break;
                case KeepaliveStatus.STATUS_ACTIVE:
                    log("Pending Keepalive received active status!");
                    kr.currentStatus = KeepaliveStatus.STATUS_ACTIVE;
                    DcNetworkAgent.this.onPacketKeepaliveEvent(kr.slotId, PacketKeepalive.SUCCESS);
                    break;
                case KeepaliveStatus.STATUS_PENDING:
                    loge("Invalid unsolicied Keepalive Pending Status!");
                    break;
                default:
                    loge("Invalid Keepalive Status received, " + ks.statusCode);
            }
            break;
        case KeepaliveStatus.STATUS_ACTIVE:
            switch(ks.statusCode) {
                case KeepaliveStatus.STATUS_INACTIVE:
                    loge("Keepalive received stopped status!");
                    DcNetworkAgent.this.onPacketKeepaliveEvent(kr.slotId, PacketKeepalive.SUCCESS);
                    kr.currentStatus = KeepaliveStatus.STATUS_INACTIVE;
                    mKeepalives.remove(ks.sessionHandle);
                    break;
                case KeepaliveStatus.STATUS_PENDING:
                case KeepaliveStatus.STATUS_ACTIVE:
                    loge("Active Keepalive received invalid status!");
                    break;
                default:
                    loge("Invalid Keepalive Status received, " + ks.statusCode);
            }
            break;
        default:
            loge("Invalid Keepalive Status received, " + kr.currentStatus);
    }
}
#method_after
void handleKeepaliveStatus(KeepaliveStatus ks) {
    final KeepaliveRecord kr;
    kr = mKeepalives.get(ks.sessionHandle);
    if (kr == null) {
        // If there is no slot for the session handle, we received an event
        // for a different data connection. This is not an error because the
        // keepalive session events are broadcast to all listeners.
        log("Discarding keepalive event for different data connection:" + ks);
        return;
    }
    // Switch on the current state, to see what we do with the status update
    switch(kr.currentStatus) {
        case KeepaliveStatus.STATUS_INACTIVE:
            loge("Inactive Keepalive received status!");
            DcNetworkAgent.this.onSocketKeepaliveEvent(kr.slotId, SocketKeepalive.ERROR_HARDWARE_ERROR);
            break;
        case KeepaliveStatus.STATUS_PENDING:
            switch(ks.statusCode) {
                case KeepaliveStatus.STATUS_INACTIVE:
                    DcNetworkAgent.this.onSocketKeepaliveEvent(kr.slotId, keepaliveStatusErrorToPacketKeepaliveError(ks.errorCode));
                    kr.currentStatus = KeepaliveStatus.STATUS_INACTIVE;
                    mKeepalives.remove(ks.sessionHandle);
                    break;
                case KeepaliveStatus.STATUS_ACTIVE:
                    log("Pending Keepalive received active status!");
                    kr.currentStatus = KeepaliveStatus.STATUS_ACTIVE;
                    DcNetworkAgent.this.onSocketKeepaliveEvent(kr.slotId, SocketKeepalive.SUCCESS);
                    break;
                case KeepaliveStatus.STATUS_PENDING:
                    loge("Invalid unsolicied Keepalive Pending Status!");
                    break;
                default:
                    loge("Invalid Keepalive Status received, " + ks.statusCode);
            }
            break;
        case KeepaliveStatus.STATUS_ACTIVE:
            switch(ks.statusCode) {
                case KeepaliveStatus.STATUS_INACTIVE:
                    loge("Keepalive received stopped status!");
                    DcNetworkAgent.this.onSocketKeepaliveEvent(kr.slotId, SocketKeepalive.SUCCESS);
                    kr.currentStatus = KeepaliveStatus.STATUS_INACTIVE;
                    mKeepalives.remove(ks.sessionHandle);
                    break;
                case KeepaliveStatus.STATUS_PENDING:
                case KeepaliveStatus.STATUS_ACTIVE:
                    loge("Active Keepalive received invalid status!");
                    break;
                default:
                    loge("Invalid Keepalive Status received, " + ks.statusCode);
            }
            break;
        default:
            loge("Invalid Keepalive Status received, " + kr.currentStatus);
    }
}
#end_block

#method_before
public void bringUp(ApnContext apnContext, int profileId, int rilRadioTechnology, Message onCompletedMsg, int connectionGeneration) {
    if (DBG) {
        log("bringUp: apnContext=" + apnContext + " onCompletedMsg=" + onCompletedMsg);
    }
    sendMessage(DataConnection.EVENT_CONNECT, new ConnectionParams(apnContext, profileId, rilRadioTechnology, onCompletedMsg, connectionGeneration));
}
#method_after
public void bringUp(ApnContext apnContext, int profileId, int rilRadioTechnology, Message onCompletedMsg, int connectionGeneration, @RequestNetworkType int requestType) {
    if (DBG) {
        log("bringUp: apnContext=" + apnContext + " onCompletedMsg=" + onCompletedMsg);
    }
    sendMessage(DataConnection.EVENT_CONNECT, new ConnectionParams(apnContext, profileId, rilRadioTechnology, onCompletedMsg, connectionGeneration, requestType));
}
#end_block

#method_before
public void tearDown(ApnContext apnContext, String reason, Message onCompletedMsg) {
    if (DBG) {
        log("tearDown: apnContext=" + apnContext + " reason=" + reason + " onCompletedMsg=" + onCompletedMsg);
    }
    sendMessage(DataConnection.EVENT_DISCONNECT, new DisconnectParams(apnContext, reason, onCompletedMsg));
}
#method_after
public void tearDown(ApnContext apnContext, String reason, Message onCompletedMsg) {
    if (DBG) {
        log("tearDown: apnContext=" + apnContext + " reason=" + reason + " onCompletedMsg=" + onCompletedMsg);
    }
    sendMessage(DataConnection.EVENT_DISCONNECT, new DisconnectParams(apnContext, reason, DcTracker.RELEASE_TYPE_DETACH, onCompletedMsg));
}
#end_block

#method_before
public void tearDownAll(String reason, Message onCompletedMsg) {
    if (DBG)
        log("tearDownAll: reason=" + reason + " onCompletedMsg=" + onCompletedMsg);
    sendMessage(DataConnection.EVENT_DISCONNECT_ALL, new DisconnectParams(null, reason, onCompletedMsg));
}
#method_after
public void tearDownAll(String reason, @ReleaseNetworkType int releaseType, Message onCompletedMsg) {
    if (DBG)
        log("tearDownAll: reason=" + reason + " onCompletedMsg=" + onCompletedMsg);
    sendMessage(DataConnection.EVENT_DISCONNECT_ALL, new DisconnectParams(null, reason, releaseType, onCompletedMsg));
}
#end_block

#method_before
@Override
public void dump(FileDescriptor fd, PrintWriter printWriter, String[] args) {
    IndentingPrintWriter pw = new IndentingPrintWriter(printWriter, " ");
    pw.print("DataConnection ");
    super.dump(fd, pw, args);
    pw.flush();
    pw.increaseIndent();
    pw.println("mApnContexts.size=" + mApnContexts.size());
    pw.println("mApnContexts=" + mApnContexts);
    pw.println("mDataConnectionTracker=" + mDct);
    pw.println("mApnSetting=" + mApnSetting);
    pw.println("mTag=" + mTag);
    pw.println("mCid=" + mCid);
    pw.println("mConnectionParams=" + mConnectionParams);
    pw.println("mDisconnectParams=" + mDisconnectParams);
    pw.println("mDcFailCause=" + mDcFailCause);
    pw.println("mPhone=" + mPhone);
    pw.println("mLinkProperties=" + mLinkProperties);
    pw.flush();
    pw.println("mDataRegState=" + mDataRegState);
    pw.println("mRilRat=" + mRilRat);
    pw.println("mNetworkCapabilities=" + getNetworkCapabilities());
    pw.println("mCreateTime=" + TimeUtils.logTimeOfDay(mCreateTime));
    pw.println("mLastFailTime=" + TimeUtils.logTimeOfDay(mLastFailTime));
    pw.println("mLastFailCause=" + mLastFailCause);
    pw.println("mUserData=" + mUserData);
    pw.println("mSubscriptionOverride=" + Integer.toHexString(mSubscriptionOverride));
    pw.println("mRestrictedNetworkOverride=" + mRestrictedNetworkOverride);
    pw.println("mUnmeteredUseOnly=" + mUnmeteredUseOnly);
    pw.println("mInstanceNumber=" + mInstanceNumber);
    pw.println("mAc=" + mAc);
    pw.println("Network capabilities changed history:");
    pw.increaseIndent();
    mNetCapsLocalLog.dump(fd, pw, args);
    pw.decreaseIndent();
    pw.decreaseIndent();
    pw.println();
    pw.flush();
}
#method_after
@Override
public void dump(FileDescriptor fd, PrintWriter printWriter, String[] args) {
    IndentingPrintWriter pw = new IndentingPrintWriter(printWriter, " ");
    pw.print("DataConnection ");
    super.dump(fd, pw, args);
    pw.flush();
    pw.increaseIndent();
    pw.println("mApnContexts.size=" + mApnContexts.size());
    pw.println("mApnContexts=" + mApnContexts);
    pw.println("mDataConnectionTracker=" + mDct);
    pw.println("mApnSetting=" + mApnSetting);
    pw.println("mTag=" + mTag);
    pw.println("mCid=" + mCid);
    pw.println("mConnectionParams=" + mConnectionParams);
    pw.println("mDisconnectParams=" + mDisconnectParams);
    pw.println("mDcFailCause=" + mDcFailCause);
    pw.println("mPhone=" + mPhone);
    pw.println("mLinkProperties=" + mLinkProperties);
    pw.flush();
    pw.println("mDataRegState=" + mDataRegState);
    pw.println("mRilRat=" + mRilRat);
    pw.println("mNetworkCapabilities=" + getNetworkCapabilities());
    pw.println("mCreateTime=" + TimeUtils.logTimeOfDay(mCreateTime));
    pw.println("mLastFailTime=" + TimeUtils.logTimeOfDay(mLastFailTime));
    pw.println("mLastFailCause=" + mLastFailCause);
    pw.println("mUserData=" + mUserData);
    pw.println("mSubscriptionOverride=" + Integer.toHexString(mSubscriptionOverride));
    pw.println("mRestrictedNetworkOverride=" + mRestrictedNetworkOverride);
    pw.println("mUnmeteredUseOnly=" + mUnmeteredUseOnly);
    pw.println("mInstanceNumber=" + mInstanceNumber);
    pw.println("mAc=" + mAc);
    pw.println("mScore=" + mScore);
    pw.println("Network capabilities changed history:");
    pw.increaseIndent();
    mNetCapsLocalLog.dump(fd, pw, args);
    pw.decreaseIndent();
    pw.decreaseIndent();
    pw.println();
    pw.flush();
}
#end_block

#method_before
@Override
public void endElement(String uri, String localName, String qName) throws SAXException {
    if (documentationFlag && localName != "documentation") {
        return;
    }
    try {
        State state = stateStack.pop();
        switch(state.name) {
            case "schema":
                schema = makeSchema(state.attributeMap, state.tags, state.deprecated);
                break;
            case "element":
                stateStack.peek().tags.add(makeElement(state.attributeMap, state.tags, state.deprecated));
                break;
            case "attribute":
                stateStack.peek().tags.add(makeAttribute(state.attributeMap, state.tags, state.deprecated));
                break;
            case "complexType":
                stateStack.peek().tags.add(makeComplexType(state.attributeMap, state.tags, state.deprecated));
                break;
            case "complexContent":
                stateStack.peek().tags.add(makeComplexContent(state.attributeMap, state.tags, state.deprecated));
                break;
            case "simpleContent":
                stateStack.peek().tags.add(makeSimpleContent(state.attributeMap, state.tags, state.deprecated));
                break;
            case "restriction":
                if (enumerationFlag) {
                    stateStack.peek().tags.add(makeEnumRestriction(state.attributeMap, state.tags, state.deprecated));
                    enumerationFlag = false;
                } else {
                    stateStack.peek().tags.add(makeGeneralRestriction(state.attributeMap, state.tags, state.deprecated));
                }
                break;
            case "extension":
                stateStack.peek().tags.add(makeGeneralExtension(state.attributeMap, state.tags, state.deprecated));
                break;
            case "simpleType":
                stateStack.peek().tags.add(makeSimpleType(state.attributeMap, state.tags, state.deprecated));
                break;
            case "list":
                stateStack.peek().tags.add(makeSimpleTypeList(state.attributeMap, state.tags, state.deprecated));
                break;
            case "union":
                stateStack.peek().tags.add(makeSimpleTypeUnion(state.attributeMap, state.tags, state.deprecated));
                break;
            case "sequence":
                stateStack.peek().tags.addAll(makeSequence(state.attributeMap, state.tags, state.deprecated));
                break;
            case "choice":
                stateStack.peek().tags.addAll(makeChoice(state.attributeMap, state.tags, state.deprecated));
                break;
            case "enumeration":
                stateStack.peek().tags.add(makeEnumeration(state.attributeMap, state.deprecated));
                enumerationFlag = true;
                break;
            case "fractionDigits":
            case "length":
            case "maxExclusive":
            case "maxInclusive":
            case "maxLength":
            case "minExclusive":
            case "minInclusive":
            case "minLength":
            case "pattern":
            case "totalDigits":
            case "whiteSpace":
                // Tags under simpleType <restriction>. They are ignored.
                break;
            case "annotation":
                stateStack.peek().deprecated = isDeprecated(state.attributeMap, state.tags);
                break;
            case "appinfo":
                // They function like comments, so are ignored.
                break;
            case "documentation":
                documentationFlag = false;
                break;
            case "key":
            case "keyref":
            case "selector":
            case "field":
            case "unique":
                // So they are ignored.
                break;
            default:
                throw new XsdParserException(String.format("unsupported tag : %s", state.name));
        }
    } catch (XsdParserException e) {
        throw new SAXException(String.format("Line %d, Column %d - %s", locator.getLineNumber(), locator.getColumnNumber(), e.getMessage()));
    }
}
#method_after
@Override
public void endElement(String uri, String localName, String qName) throws SAXException {
    if (documentationFlag && localName != "documentation") {
        return;
    }
    try {
        State state = stateStack.pop();
        switch(state.name) {
            case "schema":
                schema = makeSchema(state);
                break;
            case "element":
                stateStack.peek().tags.add(makeElement(state));
                break;
            case "attribute":
                stateStack.peek().tags.add(makeAttribute(state));
                break;
            case "complexType":
                stateStack.peek().tags.add(makeComplexType(state));
                break;
            case "complexContent":
                stateStack.peek().tags.add(makeComplexContent(state));
                break;
            case "simpleContent":
                stateStack.peek().tags.add(makeSimpleContent(state));
                break;
            case "restriction":
                if (enumerationFlag) {
                    stateStack.peek().tags.add(makeEnumRestriction(state));
                    enumerationFlag = false;
                } else {
                    stateStack.peek().tags.add(makeGeneralRestriction(state));
                }
                break;
            case "extension":
                stateStack.peek().tags.add(makeGeneralExtension(state));
                break;
            case "simpleType":
                stateStack.peek().tags.add(makeSimpleType(state));
                break;
            case "list":
                stateStack.peek().tags.add(makeSimpleTypeList(state));
                break;
            case "union":
                stateStack.peek().tags.add(makeSimpleTypeUnion(state));
                break;
            case "sequence":
                stateStack.peek().tags.addAll(makeSequence(state));
                break;
            case "choice":
                stateStack.peek().tags.addAll(makeChoice(state));
                break;
            case "enumeration":
                stateStack.peek().tags.add(makeEnumeration(state));
                enumerationFlag = true;
                break;
            case "fractionDigits":
            case "length":
            case "maxExclusive":
            case "maxInclusive":
            case "maxLength":
            case "minExclusive":
            case "minInclusive":
            case "minLength":
            case "pattern":
            case "totalDigits":
            case "whiteSpace":
                // Tags under simpleType <restriction>. They are ignored.
                break;
            case "annotation":
                stateStack.peek().deprecated = isDeprecated(state.attributeMap, state.tags);
                break;
            case "appinfo":
                // They function like comments, so are ignored.
                break;
            case "documentation":
                documentationFlag = false;
                break;
            case "key":
            case "keyref":
            case "selector":
            case "field":
            case "unique":
                // So they are ignored.
                break;
            default:
                throw new XsdParserException(String.format("unsupported tag : %s", state.name));
        }
    } catch (XsdParserException e) {
        throw new SAXException(String.format("Line %d, Column %d - %s", locator.getLineNumber(), locator.getColumnNumber(), e.getMessage()));
    }
}
#end_block

#method_before
private XmlSchema makeSchema(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) {
    Map<String, XsdElement> elementMap = new LinkedHashMap<>();
    Map<String, XsdType> typeMap = new LinkedHashMap<>();
    Map<String, XsdAttribute> attrMap = new LinkedHashMap<>();
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdElement) {
            elementMap.put(tag.getName(), (XsdElement) tag);
        } else if (tag instanceof XsdAttribute) {
            attrMap.put(tag.getName(), (XsdAttribute) tag);
        } else if (tag instanceof XsdType) {
            typeMap.put(tag.getName(), (XsdType) tag);
        }
    }
    return new XmlSchema(elementMap, typeMap, attrMap);
}
#method_after
private XmlSchema makeSchema(State state) {
    Map<String, XsdElement> elementMap = new LinkedHashMap<>();
    Map<String, XsdType> typeMap = new LinkedHashMap<>();
    Map<String, XsdAttribute> attrMap = new LinkedHashMap<>();
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdElement) {
            elementMap.put(tag.getName(), (XsdElement) tag);
        } else if (tag instanceof XsdAttribute) {
            attrMap.put(tag.getName(), (XsdAttribute) tag);
        } else if (tag instanceof XsdType) {
            typeMap.put(tag.getName(), (XsdType) tag);
        }
    }
    return new XmlSchema(elementMap, typeMap, attrMap);
}
#end_block

#method_before
private XsdElement makeElement(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    String name = attributeMap.get("name");
    QName typename = parseQName(attributeMap.get("type"));
    QName ref = parseQName(attributeMap.get("ref"));
    String isAbstract = attributeMap.get("abstract");
    String defVal = attributeMap.get("default");
    String substitutionGroup = attributeMap.get("substitutionGroup");
    String maxOccurs = attributeMap.get("maxOccurs");
    if ("true".equals(isAbstract)) {
        throw new XsdParserException("abstract element is not supported.");
    }
    if (defVal != null) {
        throw new XsdParserException("default value of an element is not supported.");
    }
    if (substitutionGroup != null) {
        throw new XsdParserException("substitution group of an element is not supported.");
    }
    boolean multiple = false;
    if (maxOccurs != null) {
        if (maxOccurs.equals("0"))
            return null;
        if (maxOccurs.equals("unbounded") || Integer.parseInt(maxOccurs) > 1)
            multiple = true;
    }
    XsdType type = null;
    if (typename != null) {
        type = new XsdType(null, typename);
    }
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            type = (XsdType) tag;
        }
    }
    return (XsdElement) setDeprecated(new XsdElement(name, ref, type, multiple), deprecated);
}
#method_after
private XsdElement makeElement(State state) throws XsdParserException {
    String name = state.attributeMap.get("name");
    QName typename = parseQName(state.attributeMap.get("type"));
    QName ref = parseQName(state.attributeMap.get("ref"));
    String isAbstract = state.attributeMap.get("abstract");
    String defVal = state.attributeMap.get("default");
    String substitutionGroup = state.attributeMap.get("substitutionGroup");
    String maxOccurs = state.attributeMap.get("maxOccurs");
    if ("true".equals(isAbstract)) {
        throw new XsdParserException("abstract element is not supported.");
    }
    if (defVal != null) {
        throw new XsdParserException("default value of an element is not supported.");
    }
    if (substitutionGroup != null) {
        throw new XsdParserException("substitution group of an element is not supported.");
    }
    boolean multiple = false;
    if (maxOccurs != null) {
        if (maxOccurs.equals("0"))
            return null;
        if (maxOccurs.equals("unbounded") || Integer.parseInt(maxOccurs) > 1)
            multiple = true;
    }
    XsdType type = null;
    if (typename != null) {
        type = new XsdType(null, typename);
    }
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            type = (XsdType) tag;
        }
    }
    return (XsdElement) setDeprecated(new XsdElement(name, ref, type, multiple), state.deprecated);
}
#end_block

#method_before
private XsdAttribute makeAttribute(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    String name = attributeMap.get("name");
    QName typename = parseQName(attributeMap.get("type"));
    QName ref = parseQName(attributeMap.get("ref"));
    String defVal = attributeMap.get("default");
    String use = attributeMap.get("use");
    if (use != null && use.equals("prohibited"))
        return null;
    XsdType type = null;
    if (typename != null) {
        type = new XsdType(null, typename);
    }
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            type = (XsdType) tag;
        }
    }
    return (XsdAttribute) setDeprecated(new XsdAttribute(name, ref, type), deprecated);
}
#method_after
private XsdAttribute makeAttribute(State state) throws XsdParserException {
    String name = state.attributeMap.get("name");
    QName typename = parseQName(state.attributeMap.get("type"));
    QName ref = parseQName(state.attributeMap.get("ref"));
    String defVal = state.attributeMap.get("default");
    String use = state.attributeMap.get("use");
    if (use != null && use.equals("prohibited"))
        return null;
    XsdType type = null;
    if (typename != null) {
        type = new XsdType(null, typename);
    }
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            type = (XsdType) tag;
        }
    }
    return (XsdAttribute) setDeprecated(new XsdAttribute(name, ref, type), state.deprecated);
}
#end_block

#method_before
private XsdComplexType makeComplexType(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    String name = attributeMap.get("name");
    String isAbstract = attributeMap.get("abstract");
    String mixed = attributeMap.get("mixed");
    if ("true".equals(isAbstract)) {
        throw new XsdParserException("abstract complex type is not supported.");
    }
    if ("true".equals(mixed)) {
        throw new XsdParserException("mixed option of a complex type is not supported.");
    }
    List<XsdAttribute> attributes = new ArrayList<>();
    List<XsdElement> elements = new ArrayList<>();
    XsdComplexType type = null;
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdAttribute) {
            attributes.add((XsdAttribute) tag);
        } else if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        } else if (tag instanceof XsdComplexContent) {
            XsdComplexContent child = (XsdComplexContent) tag;
            type = (XsdComplexContent) setDeprecated(new XsdComplexContent(name, child.getBase(), child.getAttributes(), child.getElements()), deprecated);
        } else if (tag instanceof XsdSimpleContent) {
            XsdSimpleContent child = (XsdSimpleContent) tag;
            type = (XsdSimpleContent) setDeprecated(new XsdSimpleContent(name, child.getBase(), child.getAttributes()), deprecated);
        }
    }
    return (type != null) ? type : (XsdComplexContent) setDeprecated(new XsdComplexContent(name, null, attributes, elements), deprecated);
}
#method_after
private XsdComplexType makeComplexType(State state) throws XsdParserException {
    String name = state.attributeMap.get("name");
    String isAbstract = state.attributeMap.get("abstract");
    String mixed = state.attributeMap.get("mixed");
    if ("true".equals(isAbstract)) {
        throw new XsdParserException("abstract complex type is not supported.");
    }
    if ("true".equals(mixed)) {
        throw new XsdParserException("mixed option of a complex type is not supported.");
    }
    List<XsdAttribute> attributes = new ArrayList<>();
    List<XsdElement> elements = new ArrayList<>();
    XsdComplexType type = null;
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdAttribute) {
            attributes.add((XsdAttribute) tag);
        } else if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        } else if (tag instanceof XsdComplexContent) {
            XsdComplexContent child = (XsdComplexContent) tag;
            type = (XsdComplexContent) setDeprecated(new XsdComplexContent(name, child.getBase(), child.getAttributes(), child.getElements()), state.deprecated);
        } else if (tag instanceof XsdSimpleContent) {
            XsdSimpleContent child = (XsdSimpleContent) tag;
            type = (XsdSimpleContent) setDeprecated(new XsdSimpleContent(name, child.getBase(), child.getAttributes()), state.deprecated);
        }
    }
    return (type != null) ? type : (XsdComplexContent) setDeprecated(new XsdComplexContent(name, null, attributes, elements), state.deprecated);
}
#end_block

#method_before
private XsdComplexContent makeComplexContent(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    String mixed = attributeMap.get("mixed");
    if ("true".equals(mixed)) {
        throw new XsdParserException("mixed option of a complex content is not supported.");
    }
    XsdComplexContent content = null;
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdGeneralExtension) {
            XsdGeneralExtension extension = (XsdGeneralExtension) tag;
            content = new XsdComplexContent(null, extension.getBase(), extension.getAttributes(), extension.getElements());
        } else if (tag instanceof XsdGeneralRestriction) {
            XsdGeneralRestriction restriction = (XsdGeneralRestriction) tag;
            XsdType base = restriction.getBase();
            if (base.getRef() != null && base.getRef().getNamespaceURI().equals(XsdConstants.XSD_NAMESPACE)) {
                // restriction of base 'xsd:anyType' is equal to complex content definition
                content = new XsdComplexContent(null, null, restriction.getAttributes(), restriction.getElements());
            } else {
                // otherwise ignore restrictions
                content = new XsdComplexContent(null, base, null, null);
            }
        }
    }
    return (XsdComplexContent) setDeprecated(content, deprecated);
}
#method_after
private XsdComplexContent makeComplexContent(State state) throws XsdParserException {
    String mixed = state.attributeMap.get("mixed");
    if ("true".equals(mixed)) {
        throw new XsdParserException("mixed option of a complex content is not supported.");
    }
    XsdComplexContent content = null;
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdGeneralExtension) {
            XsdGeneralExtension extension = (XsdGeneralExtension) tag;
            content = new XsdComplexContent(null, extension.getBase(), extension.getAttributes(), extension.getElements());
        } else if (tag instanceof XsdGeneralRestriction) {
            XsdGeneralRestriction restriction = (XsdGeneralRestriction) tag;
            XsdType base = restriction.getBase();
            if (base.getRef() != null && base.getRef().getNamespaceURI().equals(XsdConstants.XSD_NAMESPACE)) {
                // restriction of base 'xsd:anyType' is equal to complex content definition
                content = new XsdComplexContent(null, null, restriction.getAttributes(), restriction.getElements());
            } else {
                // otherwise ignore restrictions
                content = new XsdComplexContent(null, base, null, null);
            }
        }
    }
    return (XsdComplexContent) setDeprecated(content, state.deprecated);
}
#end_block

#method_before
private XsdSimpleContent makeSimpleContent(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) {
    XsdSimpleContent content = null;
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdGeneralExtension) {
            XsdGeneralExtension extension = (XsdGeneralExtension) tag;
            content = new XsdSimpleContent(null, extension.getBase(), extension.getAttributes());
        } else if (tag instanceof XsdGeneralRestriction) {
            XsdGeneralRestriction restriction = (XsdGeneralRestriction) tag;
            content = new XsdSimpleContent(null, restriction.getBase(), null);
        }
    }
    return (XsdSimpleContent) setDeprecated(content, deprecated);
}
#method_after
private XsdSimpleContent makeSimpleContent(State state) {
    XsdSimpleContent content = null;
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdGeneralExtension) {
            XsdGeneralExtension extension = (XsdGeneralExtension) tag;
            content = new XsdSimpleContent(null, extension.getBase(), extension.getAttributes());
        } else if (tag instanceof XsdGeneralRestriction) {
            XsdGeneralRestriction restriction = (XsdGeneralRestriction) tag;
            content = new XsdSimpleContent(null, restriction.getBase(), null);
        }
    }
    return (XsdSimpleContent) setDeprecated(content, state.deprecated);
}
#end_block

#method_before
private XsdGeneralRestriction makeGeneralRestriction(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    QName base = parseQName(attributeMap.get("base"));
    XsdType type = null;
    if (base != null) {
        type = new XsdType(null, base);
    }
    List<XsdAttribute> attributes = new ArrayList<>();
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdAttribute) {
            attributes.add((XsdAttribute) tag);
        } else if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        }
    }
    return (XsdGeneralRestriction) setDeprecated(new XsdGeneralRestriction(type, attributes, elements), deprecated);
}
#method_after
private XsdGeneralRestriction makeGeneralRestriction(State state) throws XsdParserException {
    QName base = parseQName(state.attributeMap.get("base"));
    XsdType type = null;
    if (base != null) {
        type = new XsdType(null, base);
    }
    List<XsdAttribute> attributes = new ArrayList<>();
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdAttribute) {
            attributes.add((XsdAttribute) tag);
        } else if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        }
    }
    return (XsdGeneralRestriction) setDeprecated(new XsdGeneralRestriction(type, attributes, elements), state.deprecated);
}
#end_block

#method_before
private XsdGeneralExtension makeGeneralExtension(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    QName base = parseQName(attributeMap.get("base"));
    List<XsdAttribute> attributes = new ArrayList<>();
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdAttribute) {
            attributes.add((XsdAttribute) tag);
        } else if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        }
    }
    return (XsdGeneralExtension) setDeprecated(new XsdGeneralExtension(new XsdType(null, base), attributes, elements), deprecated);
}
#method_after
private XsdGeneralExtension makeGeneralExtension(State state) throws XsdParserException {
    QName base = parseQName(state.attributeMap.get("base"));
    List<XsdAttribute> attributes = new ArrayList<>();
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdAttribute) {
            attributes.add((XsdAttribute) tag);
        } else if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        }
    }
    return (XsdGeneralExtension) setDeprecated(new XsdGeneralExtension(new XsdType(null, base), attributes, elements), state.deprecated);
}
#end_block

#method_before
private XsdSimpleType makeSimpleType(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    String name = attributeMap.get("name");
    XsdSimpleType type = null;
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdList) {
            type = new XsdList(name, ((XsdList) tag).getItemType());
        } else if (tag instanceof XsdGeneralRestriction) {
            type = new XsdRestriction(name, ((XsdGeneralRestriction) tag).getBase(), null);
        } else if (tag instanceof XsdEnumRestriction) {
            type = new XsdRestriction(name, ((XsdEnumRestriction) tag).getBase(), ((XsdEnumRestriction) tag).getEnums());
        } else if (tag instanceof XsdUnion) {
            type = new XsdUnion(name, ((XsdUnion) tag).getMemberTypes());
        }
    }
    return (XsdSimpleType) setDeprecated(type, deprecated);
}
#method_after
private XsdSimpleType makeSimpleType(State state) throws XsdParserException {
    String name = state.attributeMap.get("name");
    XsdSimpleType type = null;
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdList) {
            type = new XsdList(name, ((XsdList) tag).getItemType());
        } else if (tag instanceof XsdGeneralRestriction) {
            type = new XsdRestriction(name, ((XsdGeneralRestriction) tag).getBase(), null);
        } else if (tag instanceof XsdEnumRestriction) {
            type = new XsdRestriction(name, ((XsdEnumRestriction) tag).getBase(), ((XsdEnumRestriction) tag).getEnums());
        } else if (tag instanceof XsdUnion) {
            type = new XsdUnion(name, ((XsdUnion) tag).getMemberTypes());
        }
    }
    return (XsdSimpleType) setDeprecated(type, state.deprecated);
}
#end_block

#method_before
private XsdList makeSimpleTypeList(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    QName itemTypeName = parseQName(attributeMap.get("itemType"));
    XsdType itemType = null;
    if (itemTypeName != null) {
        itemType = new XsdType(null, itemTypeName);
    }
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            itemType = (XsdType) tag;
        }
    }
    return (XsdList) setDeprecated(new XsdList(null, itemType), deprecated);
}
#method_after
private XsdList makeSimpleTypeList(State state) throws XsdParserException {
    QName itemTypeName = parseQName(state.attributeMap.get("itemType"));
    XsdType itemType = null;
    if (itemTypeName != null) {
        itemType = new XsdType(null, itemTypeName);
    }
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            itemType = (XsdType) tag;
        }
    }
    return (XsdList) setDeprecated(new XsdList(null, itemType), state.deprecated);
}
#end_block

#method_before
private XsdUnion makeSimpleTypeUnion(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    List<QName> memberTypeNames = parseQNames(attributeMap.get("memberTypes"));
    List<XsdType> memberTypes = memberTypeNames.stream().map(ref -> new XsdType(null, ref)).collect(Collectors.toList());
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            memberTypes.add((XsdType) tag);
        }
    }
    return (XsdUnion) setDeprecated(new XsdUnion(null, memberTypes), deprecated);
}
#method_after
private XsdUnion makeSimpleTypeUnion(State state) throws XsdParserException {
    List<QName> memberTypeNames = parseQNames(state.attributeMap.get("memberTypes"));
    List<XsdType> memberTypes = memberTypeNames.stream().map(ref -> new XsdType(null, ref)).collect(Collectors.toList());
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdType) {
            memberTypes.add((XsdType) tag);
        }
    }
    return (XsdUnion) setDeprecated(new XsdUnion(null, memberTypes), state.deprecated);
}
#end_block

#method_before
private static List<XsdElement> makeSequence(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    String minOccurs = attributeMap.get("minOccurs");
    String maxOccurs = attributeMap.get("maxOccurs");
    if (minOccurs != null || maxOccurs != null) {
        throw new XsdParserException("minOccurs, maxOccurs options of a sequence is not supported");
    }
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        }
    }
    return elements;
}
#method_after
private static List<XsdElement> makeSequence(State state) throws XsdParserException {
    String minOccurs = state.attributeMap.get("minOccurs");
    String maxOccurs = state.attributeMap.get("maxOccurs");
    if (minOccurs != null || maxOccurs != null) {
        throw new XsdParserException("minOccurs, maxOccurs options of a sequence is not supported");
    }
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdElement) {
            elements.add((XsdElement) tag);
        }
    }
    return elements;
}
#end_block

#method_before
private static List<XsdElement> makeChoice(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdElement) {
            XsdElement element = (XsdElement) tag;
            elements.add((XsdChoice) setDeprecated(new XsdChoice(element.getName(), element.getRef(), element.getType(), element.isMultiple()), element.isDeprecated()));
        }
    }
    return elements;
}
#method_after
private static List<XsdElement> makeChoice(State state) throws XsdParserException {
    List<XsdElement> elements = new ArrayList<>();
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdElement) {
            XsdElement element = (XsdElement) tag;
            elements.add((XsdChoice) setDeprecated(new XsdChoice(element.getName(), element.getRef(), element.getType(), element.isMultiple()), element.isDeprecated()));
        }
    }
    return elements;
}
#end_block

#method_before
private XsdEnumeration makeEnumeration(Map<String, String> attributeMap, boolean deprecated) throws XsdParserException {
    String value = attributeMap.get("value");
    return (XsdEnumeration) setDeprecated(new XsdEnumeration(value), deprecated);
}
#method_after
private XsdEnumeration makeEnumeration(State state) throws XsdParserException {
    String value = state.attributeMap.get("value");
    return (XsdEnumeration) setDeprecated(new XsdEnumeration(value), state.deprecated);
}
#end_block

#method_before
private XsdEnumRestriction makeEnumRestriction(Map<String, String> attributeMap, List<XsdTag> tags, boolean deprecated) throws XsdParserException {
    QName base = parseQName(attributeMap.get("base"));
    XsdType type = null;
    if (base != null) {
        type = new XsdType(null, base);
    }
    List<XsdEnumeration> enums = new ArrayList<>();
    for (XsdTag tag : tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdEnumeration) {
            enums.add((XsdEnumeration) tag);
        }
    }
    return (XsdEnumRestriction) setDeprecated(new XsdEnumRestriction(type, enums), deprecated);
}
#method_after
private XsdEnumRestriction makeEnumRestriction(State state) throws XsdParserException {
    QName base = parseQName(state.attributeMap.get("base"));
    XsdType type = null;
    if (base != null) {
        type = new XsdType(null, base);
    }
    List<XsdEnumeration> enums = new ArrayList<>();
    for (XsdTag tag : state.tags) {
        if (tag == null)
            continue;
        if (tag instanceof XsdEnumeration) {
            enums.add((XsdEnumeration) tag);
        }
    }
    return (XsdEnumRestriction) setDeprecated(new XsdEnumRestriction(type, enums), state.deprecated);
}
#end_block

#method_before
@Test
public void testSavesIterations() throws Exception {
    Bundle b = new Bundle();
    b.putString("include-ui-xml", "true");
    mListener = initListener(b);
    // Run through a sequence of `NUM_TEST_CASE` failing tests.
    mListener.testRunStarted(mRunDesc);
    verify(mListener).createAndEmptyDirectory(ScreenshotOnFailureCollector.DEFAULT_DIR);
    for (int i = 1; i <= NUM_TEST_CASE; i++) {
        mListener.testStarted(mTestDesc);
        mListener.testFailure(new Failure(mTestDesc, new RuntimeException("I failed")));
        mListener.testFinished(mTestDesc);
    }
    mListener.testRunFinished(new Result());
    // Verifies that screenshots are saved with iterations that start with 1.
    InOrder screenshotSaveVerifier = inOrder(mListener);
    for (int i = 0; i < NUM_TEST_CASE; i++) {
        screenshotSaveVerifier.verify(mListener).takeScreenshot(endsWith(String.format("%d.png", i + 1)));
    }
    // Verifies that XMLs are saved with iterations that start with 1.
    InOrder xmlSaveVerifier = inOrder(mListener);
    for (int i = 0; i < NUM_TEST_CASE; i++) {
        xmlSaveVerifier.verify(mListener).collectUiXml(endsWith(String.valueOf(i + 1)));
    }
}
#method_after
@Test
public void testSavesIterations() throws Exception {
    Bundle b = new Bundle();
    b.putString("include-ui-xml", "true");
    mListener = initListener(b);
    // Run through a sequence of `NUM_TEST_CASE` failing tests.
    mListener.testRunStarted(mRunDesc);
    verify(mListener).createAndEmptyDirectory(ScreenshotOnFailureCollector.DEFAULT_DIR);
    for (int i = 1; i <= NUM_TEST_CASE; i++) {
        mListener.testStarted(mTestDesc);
        mListener.testFailure(new Failure(mTestDesc, new RuntimeException("I failed")));
        mListener.testFinished(mTestDesc);
    }
    mListener.testRunFinished(new Result());
    // Verifies that screenshots are saved with iterations.
    InOrder screenshotSaveVerifier = inOrder(mListener);
    // The first saved screenshot should not have an iteration number.
    screenshotSaveVerifier.verify(mListener).takeScreenshot(matches("^.*[^1].png$"));
    // The second and later saved screenshots should contain the iteration number.
    for (int i = 1; i < NUM_TEST_CASE; i++) {
        screenshotSaveVerifier.verify(mListener).takeScreenshot(endsWith(String.format("%d.png", i + 1)));
    }
    // Verifies that XMLs are saved with iterations that start with 1.
    InOrder xmlSaveVerifier = inOrder(mListener);
    // The first saved XML should not have an iteration number.
    xmlSaveVerifier.verify(mListener).takeScreenshot(matches("^.*[^1]$"));
    // The second and later saved XML should contain the iteration number.
    for (int i = 1; i < NUM_TEST_CASE; i++) {
        xmlSaveVerifier.verify(mListener).collectUiXml(endsWith(String.valueOf(i + 1)));
    }
}
#end_block

#method_before
@Override
public void onTestFail(DataRecord testData, Description description, Failure failure) {
    if (mDestDir == null) {
        return;
    }
    final String fileName = String.format("%s.%s-%d", description.getClassName(), description.getMethodName(), mTestIterations.get(description.getDisplayName()));
    // Capture the screenshot first.
    final String pngFileName = String.format("%s.png", fileName);
    File img = takeScreenshot(pngFileName);
    if (img != null) {
        testData.addFileMetric(String.format("%s_%s", getTag(), img.getName()), img);
    }
    // Capture the UI XML second.
    if (mIncludeUiXml) {
        File uixFile = collectUiXml(fileName);
        if (uixFile != null) {
            testData.addFileMetric(String.format("%s_%s", getTag(), uixFile.getName()), uixFile);
        }
    }
}
#method_after
@Override
public void onTestFail(DataRecord testData, Description description, Failure failure) {
    if (mDestDir == null) {
        return;
    }
    final String fileNameBase = String.format("%s.%s", description.getClassName(), description.getMethodName());
    // Omit the iteration number for the first iteration.
    int iteration = mTestIterations.get(description.getDisplayName());
    final String fileName = iteration == 1 ? fileNameBase : String.join("-", fileNameBase, String.valueOf(iteration));
    // Capture the screenshot first.
    final String pngFileName = String.format("%s.png", fileName);
    File img = takeScreenshot(pngFileName);
    if (img != null) {
        testData.addFileMetric(String.format("%s_%s", getTag(), img.getName()), img);
    }
    // Capture the UI XML second.
    if (mIncludeUiXml) {
        File uixFile = collectUiXml(fileName);
        if (uixFile != null) {
            testData.addFileMetric(String.format("%s_%s", getTag(), uixFile.getName()), uixFile);
        }
    }
}
#end_block

#method_before
@Before
public void setUp() throws Exception {
    mTestFile = new File(Environment.getExternalStorageDirectory(), TEST_FILE);
    if (mTestFile.exists()) {
        mTestFile.delete();
    }
    mTestFile.createNewFile();
    // Context of the app under test.
    mAppContext = InstrumentationRegistry.getTargetContext();
    assertEquals("android.tradefed.contentprovider.test", mAppContext.getPackageName());
}
#method_after
@Before
public void setUp() throws Exception {
    mCv = new ContentValues();
    mTestFile = new File(Environment.getExternalStorageDirectory(), TEST_FILE);
    if (mTestFile.exists()) {
        mTestFile.delete();
    }
    mTestFile.createNewFile();
    // Context of the app under test.
    mAppContext = InstrumentationRegistry.getTargetContext();
    assertEquals("android.tradefed.contentprovider.test", mAppContext.getPackageName());
    String fullUriPath = String.format("%s%s", CONTENT_PROVIDER, mTestFile.getAbsolutePath());
    mTestUri = Uri.parse(fullUriPath);
}
#end_block

#method_before
@After
public void tearDown() {
    if (mTestFile != null) {
        mTestFile.delete();
    }
    for (Uri uri : mShouldBeCleaned) {
        mAppContext.getContentResolver().delete(uri, null, null);
    }
}
#method_after
@After
public void tearDown() {
    if (mTestFile != null) {
        mTestFile.delete();
    }
    for (Uri uri : mShouldBeCleaned) {
        mAppContext.getContentResolver().delete(uri, /**
         * selection *
         */
        null, /**
         * selectionArgs *
         */
        null);
    }
}
#end_block

#method_before
@Test
public void testQuery() throws Exception {
    ContentValues cv = new ContentValues();
    String fullUriPath = String.format("%s%s", CONTENT_PROVIDER, mTestFile.getAbsolutePath());
    Uri uri = Uri.parse(fullUriPath);
    ContentResolver resolver = mAppContext.getContentResolver();
    Uri uriResult = resolver.insert(uri, cv);
    mShouldBeCleaned.add(uri);
    // Insert is successful
    assertEquals(uri, uriResult);
    Cursor cursor = resolver.query(uri, null, null, null, null);
    try {
        assertEquals(1, cursor.getCount());
        String[] columns = cursor.getColumnNames();
        assertEquals(ManagedFileContentProvider.COLUMNS, columns);
        assertEquals(3, columns.length);
        assertTrue(cursor.moveToNext());
        // Absolute path
        assertEquals("/storage/emulated/0/" + TEST_FILE, cursor.getString(0));
        // Type
        assertEquals("text/plain", cursor.getString(1));
        // Key
        assertNull(cursor.getString(2));
    } finally {
        cursor.close();
    }
}
#method_after
@Test
public void testQuery() throws Exception {
    ContentResolver resolver = mAppContext.getContentResolver();
    Uri uriResult = resolver.insert(mTestUri, mCv);
    mShouldBeCleaned.add(mTestUri);
    // Insert is successful
    assertEquals(mTestUri, uriResult);
    Cursor cursor = resolver.query(mTestUri, /**
     * projection *
     */
    null, /**
     * selection *
     */
    null, /**
     * selectionArgs*
     */
    null, /**
     * sortOrder *
     */
    null);
    try {
        assertEquals(1, cursor.getCount());
        String[] columns = cursor.getColumnNames();
        assertEquals(ManagedFileContentProvider.COLUMNS, columns);
        assertTrue(cursor.moveToNext());
        // Absolute path
        assertEquals(Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + TEST_FILE, cursor.getString(0));
        // Uri
        assertEquals(mTestUri.toString(), cursor.getString(1));
        // Type
        assertEquals("text/plain", cursor.getString(2));
        // Metadata
        assertNull(cursor.getString(3));
    } finally {
        cursor.close();
    }
}
#end_block

#method_before
@Nullable
@Override
public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
    File file = getFileForUri(uri);
    if ("/".equals(file.getAbsolutePath())) {
        // Querying the root will list all the known file (inserted)
        final MatrixCursor cursor = new MatrixCursor(COLUMNS, mFileTracker.size());
        for (Map.Entry<Uri, ContentValues> path : mFileTracker.entrySet()) {
            String key = null;
            if (path.getValue().get("key") != null) {
                key = path.getValue().get("key").toString();
            }
            cursor.addRow(new String[] { getFileForUri(path.getKey()).getAbsolutePath(), getType(path.getKey()), key });
        }
        return cursor;
    }
    // If a particular file is requested, find it and return it.
    if (!file.exists()) {
        Log.e(TAG, String.format("Query - File from uri: '%s' does not exists.", uri));
        return null;
    }
    List<String> filePaths = new ArrayList<>();
    if (file.isDirectory()) {
        readDirectory(filePaths, file);
    } else {
        // If not a directory, return a single row - the name of the file.
        filePaths.add(file.getAbsolutePath());
    }
    // Add all the paths to the cursor.
    final MatrixCursor cursor = new MatrixCursor(COLUMNS, filePaths.size());
    for (String path : filePaths) {
        cursor.addRow(new String[] { path, getType(uri), null });
    }
    return cursor;
}
#method_after
@Nullable
@Override
public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
    File file = getFileForUri(uri);
    if ("/".equals(file.getAbsolutePath())) {
        // Querying the root will list all the known file (inserted)
        final MatrixCursor cursor = new MatrixCursor(COLUMNS, mFileTracker.size());
        for (Map.Entry<Uri, ContentValues> path : mFileTracker.entrySet()) {
            String metadata = path.getValue().getAsString(COLUMN_METADATA);
            cursor.addRow(new String[] { getFileForUri(path.getKey()).getAbsolutePath(), uri.toString(), getType(path.getKey()), metadata });
        }
        return cursor;
    }
    if (!file.exists()) {
        Log.e(TAG, String.format("Query - File from uri: '%s' does not exists.", uri));
        return null;
    }
    // If a particular file is requested, find it and return it.
    List<String> filePaths = new ArrayList<>();
    if (file.isDirectory()) {
        readDirectory(filePaths, file);
    } else {
        // If not a directory, return a single row - the name of the file.
        filePaths.add(file.getAbsolutePath());
    }
    // Add all the paths to the cursor.
    final MatrixCursor cursor = new MatrixCursor(COLUMNS, filePaths.size());
    for (String path : filePaths) {
        // TODO: Return a properly formed uri for each filepath
        cursor.addRow(new String[] { path, uri.toString(), getType(uri), /**
         * metadata *
         */
        null });
    }
    return cursor;
}
#end_block

#method_before
@Override
public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
    ContentValues values = mFileTracker.remove(uri);
    if (values == null) {
        return 0;
    }
    File file = getFileForUri(uri);
    int num = recursiveDelete(file);
    return 1;
}
#method_after
@Override
public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
    // TODO: Support deleting a file created via content write
    ContentValues values = mFileTracker.remove(uri);
    if (values == null) {
        return 0;
    }
    File file = getFileForUri(uri);
    int num = recursiveDelete(file);
    return 1;
}
#end_block

#method_before
@Override
public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {
    final File file = getFileForUri(uri);
    final int fileMode = modeToMode(mode);
    if ((fileMode & ParcelFileDescriptor.MODE_CREATE) == ParcelFileDescriptor.MODE_CREATE) {
        // If the file is being created, create all its parent directories that don't already
        // exist.
        file.getParentFile().mkdirs();
    }
    return ParcelFileDescriptor.open(file, fileMode);
}
#method_after
@Override
public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {
    // TODO: Track the file created via this callback (content write)
    final File file = getFileForUri(uri);
    final int fileMode = modeToMode(mode);
    if ((fileMode & ParcelFileDescriptor.MODE_CREATE) == ParcelFileDescriptor.MODE_CREATE) {
        // If the file is being created, create all its parent directories that don't already
        // exist.
        file.getParentFile().mkdirs();
    }
    return ParcelFileDescriptor.open(file, fileMode);
}
#end_block

#method_before
private File getFileForUri(@NonNull Uri uri) {
    String uriPath = uri.getPath();
    if (uriPath.startsWith("/sdcard/")) {
        uriPath = uriPath.replaceAll("/sdcard", Environment.getExternalStorageDirectory().getAbsolutePath());
    }
    return new File(uriPath);
}
#method_after
private File getFileForUri(@NonNull Uri uri) {
    // TODO: apply the /sdcard resolution to query() too.
    String uriPath = uri.getPath();
    if (uriPath.startsWith("/sdcard/")) {
        uriPath = uriPath.replaceAll("/sdcard", Environment.getExternalStorageDirectory().getAbsolutePath());
    }
    return new File(uriPath);
}
#end_block

#method_before
public static ToolbarController getInstance(TextView textView) {
    final ToolbarController controller = sInstance.get();
    if (controller == null) {
        sInstance = new WeakReference<>(new ToolbarController(textView));
    } else if (controller.mTextView != textView) {
        Log.v(LOG_TAG, "New textView. Dismissing previous toolbar.");
        dismissImmediately(controller.mToolbar);
        sInstance = new WeakReference<>(new ToolbarController(textView));
    }
    return sInstance.get();
}
#method_after
public static ToolbarController getInstance(TextView textView) {
    final ToolbarController controller = sInstance.get();
    if (controller == null) {
        sInstance = new WeakReference<>(new ToolbarController(textView));
    } else if (controller.mTextView != textView) {
        logv("New textView. Dismissing previous toolbar.");
        dismissImmediately(controller.mToolbar);
        sInstance = new WeakReference<>(new ToolbarController(textView));
    }
    return sInstance.get();
}
#end_block

#method_before
public void show(List<RemoteActionCompat> actions, int start, int end) {
    Preconditions.checkNotNull(actions);
    Preconditions.checkArgumentInRange(start, 0, end - 1, "start");
    final CharSequence text = mTextView.getText();
    if (text == null || end > text.length()) {
        Log.d(LOG_TAG, "Cannot show link toolbar. Invalid text indices");
        return;
    }
    Log.v(LOG_TAG, "About to show new toolbar state. Dismissing old state");
    dismissImmediately(mToolbar);
    final SupportMenu menu = createMenu(mTextView, mHighlight, actions);
    if (canShowToolbar(mTextView, true) && menu.hasVisibleItems()) {
        setListeners(mTextView, start, end, mToolbar);
        setHighlight(mTextView, mHighlight, start, end, mToolbar);
        updateRectCoordinates(mContentRect, mTextView, start, end);
        mToolbar.setContentRect(mContentRect);
        mToolbar.setMenu(menu);
        mToolbar.show();
        Log.v(LOG_TAG, "Showing toolbar");
    }
}
#method_after
public void show(List<RemoteActionCompat> actions, int start, int end) {
    Preconditions.checkNotNull(actions);
    Preconditions.checkArgumentInRange(start, 0, end - 1, "start");
    final CharSequence text = mTextView.getText();
    if (text == null || end > text.length()) {
        Log.d(LOG_TAG, "Cannot show link toolbar. Invalid text indices");
        return;
    }
    logv("About to show new toolbar state. Dismissing old state");
    dismissImmediately(mToolbar);
    final SupportMenu menu = createMenu(mTextView, mHighlight, actions);
    if (canShowToolbar(mTextView, true) && menu.hasVisibleItems()) {
        setListeners(mTextView, start, end, mToolbar);
        setHighlight(mTextView, mHighlight, start, end, mToolbar);
        updateRectCoordinates(mContentRect, mTextView, start, end);
        mToolbar.setContentRect(mContentRect);
        mToolbar.setMenu(menu);
        mToolbar.show();
        logv("Showing toolbar");
    }
}
#end_block

#method_before
@SuppressWarnings("WeakerAccess")
static /* synthetic access */
boolean canShowToolbar(TextView textView, boolean assumeWindowFocus) {
    final boolean viewFocus = textView.hasFocus();
    final boolean viewAttached = textView.isAttachedToWindow();
    final boolean canShowToolbar = assumeWindowFocus && viewFocus && viewAttached;
    Log.v(LOG_TAG, String.format("canShowToolbar=%b. " + "Reason: windowFocus=%b, viewFocus=%b, viewAttached=%b", canShowToolbar, assumeWindowFocus, viewFocus, viewAttached));
    return canShowToolbar;
}
#method_after
@SuppressWarnings("WeakerAccess")
static /* synthetic access */
boolean canShowToolbar(TextView textView, boolean assumeWindowFocus) {
    final boolean viewFocus = textView.hasFocus();
    final boolean viewAttached = textView.isAttachedToWindow();
    final boolean canShowToolbar = assumeWindowFocus && viewFocus && viewAttached;
    if (!canShowToolbar) {
        logv(String.format("canShowToolbar=false. " + "Reason: windowFocus=%b, viewFocus=%b, viewAttached=%b", assumeWindowFocus, viewFocus, viewAttached));
    }
    return canShowToolbar;
}
#end_block

#method_before
private boolean maybeDismissToolbar(boolean assumeWindowFocus, String caller) {
    if (canShowToolbar(mTextView, assumeWindowFocus)) {
        return false;
    }
    Log.v(LOG_TAG, "TextViewListener." + caller + ": Dismissing toolbar.");
    dismissImmediately(mToolbar);
    return true;
}
#method_after
private boolean maybeDismissToolbar(boolean assumeWindowFocus, String caller) {
    if (canShowToolbar(mTextView, assumeWindowFocus)) {
        return false;
    }
    logv("TextViewListener." + caller + ": Dismissing toolbar.");
    dismissImmediately(mToolbar);
    return true;
}
#end_block

#method_before
@Override
public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
    if (actionMode.getType() == ActionMode.TYPE_FLOATING) {
        if (mPreferMe) {
            // Don't start the original action mode if this action mode should be preferred.
            return false;
        }
        // custom callback is set.
        if (mOriginalCallback == null || mOriginalCallback.onCreateActionMode(actionMode, menu)) {
            Log.v(LOG_TAG, "ActionModeCallback: Dismissing toolbar. hasCallback=" + (mOriginalCallback != null));
            dismissImmediately(mToolbar);
            return true;
        }
        return false;
    }
    return mOriginalCallback.onCreateActionMode(actionMode, menu);
}
#method_after
@Override
public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
    if (actionMode.getType() == ActionMode.TYPE_FLOATING) {
        if (mPreferMe) {
            // Don't start the original action mode if this action mode should be preferred.
            return false;
        }
        // custom callback is set.
        if (mOriginalCallback == null || mOriginalCallback.onCreateActionMode(actionMode, menu)) {
            logv("ActionModeCallback: Dismissing toolbar. hasCallback=" + (mOriginalCallback != null));
            dismissImmediately(mToolbar);
            return true;
        }
        return false;
    }
    return mOriginalCallback.onCreateActionMode(actionMode, menu);
}
#end_block

#method_before
@NonNull
public TextLinks build() {
    return new TextLinks(mFullText, mLinks, mExtras == null ? Bundle.EMPTY : BundleUtils.deepCopy(mExtras));
}
#method_after
@NonNull
public Request build() {
    return new Request(mText, mDefaultLocales, mEntityConfig, mReferenceTime, mExtras == null ? Bundle.EMPTY : mExtras);
}
#end_block

#method_before
@Override
@UnsupportedAppUsage
public IBinder connect(String uri, String headers) {
    if (VERBOSE) {
        Log.d(TAG, "connect: uri=" + uri + ", headers=" + headers);
    }
    try {
        disconnect();
        mAllowCrossDomainRedirect = true;
        mURL = new URL(uri);
        mHeaders = convertHeaderStringToMap(headers);
    } catch (MalformedURLException e) {
        return null;
    }
    return native_getIMemory();
}
#method_after
@Override
@UnsupportedAppUsage
public IBinder connect(String uri, String headers) {
    if (VERBOSE) {
        Log.d(TAG, "connect: uri=" + uri + ", headers=" + headers);
    }
    try {
        disconnect();
        mAllowCrossDomainRedirect = true;
        mURL = new URL(uri);
        mHeaders = convertHeaderStringToMap(headers);
        mIsConnected.set(true);
    } catch (MalformedURLException e) {
        return null;
    }
    return native_getIMemory();
}
#end_block

#method_before
@Override
@UnsupportedAppUsage
public void disconnect() {
    synchronized (mLock) {
        teardownConnection();
        mHeaders = null;
        mURL = null;
        mExecutor.shutdown();
    }
}
#method_after
@Override
@UnsupportedAppUsage
public void disconnect() {
    if (mIsConnected.getAndSet(false)) {
        (new Thread() {

            @Override
            public void run() {
                teardownConnection();
            }
        }).start();
    }
    mHeaders = null;
    mURL = null;
}
#end_block

#method_before
@Override
@UnsupportedAppUsage
public int readAt(long offset, int size) {
    synchronized (mLock) {
        Future<Integer> future = mExecutor.submit(new NativeReadTask(offset, size));
        try {
            return future.get();
        } catch (Exception e) {
            if (VERBOSE) {
                Log.d(TAG, "readAt " + offset + " / " + size + " => -1");
            }
            return -1;
        }
    }
}
#method_after
@Override
@UnsupportedAppUsage
public int readAt(long offset, int size) {
    if (!mIsConnected.get()) {
        return -1;
    }
    int result = native_readAt(offset, size);
    if (!mIsConnected.get()) {
        return -1;
    }
    return result;
}
#end_block

#method_before
@UnsupportedAppUsage
public synchronized void dump(PrintWriter pw) {
    Iterator<String> itr = mLog.iterator();
    while (itr.hasNext()) {
        pw.println(itr.next());
    }
}
#method_after
public synchronized void dump(PrintWriter pw) {
    Iterator<String> itr = mLog.iterator();
    while (itr.hasNext()) {
        pw.println(itr.next());
    }
}
#end_block

#method_before
@UnsupportedAppUsage
public void dump(PrintWriter pw) {
    mLog.dump(pw);
}
#method_after
public void dump(PrintWriter pw) {
    mLog.dump(pw);
}
#end_block

#method_before
@Test
public void disconnectRequestHalfway() throws IOException {
    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));
    // Limit the size of the request body that the server holds in memory to an arbitrary
    // 3.5 MBytes so this test can pass on devices with little memory.
    server.setBodyLimit(7 * 512 * 1024);
    HttpURLConnection connection = (HttpURLConnection) server.getUrl("/").openConnection();
    connection.setRequestMethod("POST");
    connection.setDoOutput(true);
    // 1 GB
    connection.setFixedLengthStreamingMode(1024 * 1024 * 1024);
    connection.connect();
    OutputStream out = connection.getOutputStream();
    byte[] data = new byte[1024 * 1024];
    int i;
    for (i = 0; i < 1024; i++) {
        try {
            out.write(data);
            out.flush();
        } catch (IOException e) {
            break;
        }
    }
    // Android-changed: Values of i as high as 523 observed in tests, so 1% precision is too tight
    // assertEquals(512f, i, 10f); // Halfway +/- 1%
    // Halfway +/- 2%
    assertEquals(512f, i, 20f);
}
#method_after
@Test
public void disconnectRequestHalfway() throws IOException {
    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_DURING_REQUEST_BODY));
    // Limit the size of the request body that the server holds in memory to an arbitrary
    // 3.5 MBytes so this test can pass on devices with little memory.
    server.setBodyLimit(7 * 512 * 1024);
    HttpURLConnection connection = (HttpURLConnection) server.getUrl("/").openConnection();
    connection.setRequestMethod("POST");
    connection.setDoOutput(true);
    // 1 GB
    connection.setFixedLengthStreamingMode(1024 * 1024 * 1024);
    connection.connect();
    OutputStream out = connection.getOutputStream();
    byte[] data = new byte[1024 * 1024];
    int i;
    for (i = 0; i < 1024; i++) {
        try {
            out.write(data);
            out.flush();
        } catch (IOException e) {
            break;
        }
    }
    // Android-changed: Values of i as high as 523 observed in tests, so 1% precision is too tight
    // assertEquals(512f, i, 10f); // Halfway +/- 1%
    // Halfway +/- 2% of total buffer size
    assertEquals(512f, i, 20f);
}
#end_block

#method_before
private NetworkCapabilities getNetworkCapabilitiesInternal(NetworkAgentInfo nai) {
    if (nai != null) {
        synchronized (nai) {
            if (nai.networkCapabilities != null) {
                // that have the NETWORK_SETTINGS permission.
                return networkCapabilitiesWithoutUids(nai.networkCapabilities);
            }
        }
    }
    return null;
}
#method_after
private NetworkCapabilities getNetworkCapabilitiesInternal(NetworkAgentInfo nai) {
    if (nai != null) {
        synchronized (nai) {
            if (nai.networkCapabilities != null) {
                return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities, Binder.getCallingPid(), Binder.getCallingUid());
            }
        }
    }
    return null;
}
#end_block

#method_before
@Override
public NetworkRequest requestNetwork(NetworkCapabilities networkCapabilities, Messenger messenger, int timeoutMs, IBinder binder, int legacyType) {
    final NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST;
    // the system default network.
    if (type == NetworkRequest.Type.TRACK_DEFAULT) {
        networkCapabilities = new NetworkCapabilities(mDefaultRequest.networkCapabilities);
        networkCapabilities.removeCapability(NET_CAPABILITY_NOT_VPN);
        enforceAccessPermission();
    } else {
        networkCapabilities = new NetworkCapabilities(networkCapabilities);
        enforceNetworkRequestPermissions(networkCapabilities);
        // TODO: this is incorrect. We mark the request as metered or not depending on the state
        // of the app when the request is filed, but we never change the request if the app
        // changes network state. http://b/29964605
        enforceMeteredApnPolicy(networkCapabilities);
    }
    ensureRequestableCapabilities(networkCapabilities);
    // Set the UID range for this request to the single UID of the requester.
    // This will overwrite any allowed UIDs in the requested capabilities. Though there
    // are no visible methods to set the UIDs, an app could use reflection to try and get
    // networks for other apps so it's essential that the UIDs are overwritten.
    // TODO : don't forcefully set the UID when communicating with processes
    // that have the NETWORK_SETTINGS permission.
    networkCapabilities.setSingleUid(Binder.getCallingUid());
    if (timeoutMs < 0) {
        throw new IllegalArgumentException("Bad timeout specified");
    }
    ensureValidNetworkSpecifier(networkCapabilities);
    NetworkRequest networkRequest = new NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type);
    NetworkRequestInfo nri = new NetworkRequestInfo(messenger, networkRequest, binder);
    if (DBG)
        log("requestNetwork for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_REQUEST, nri));
    if (timeoutMs > 0) {
        mHandler.sendMessageDelayed(mHandler.obtainMessage(EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs);
    }
    return networkRequest;
}
#method_after
@Override
public NetworkRequest requestNetwork(NetworkCapabilities networkCapabilities, Messenger messenger, int timeoutMs, IBinder binder, int legacyType) {
    final NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST;
    // the system default network.
    if (type == NetworkRequest.Type.TRACK_DEFAULT) {
        networkCapabilities = new NetworkCapabilities(mDefaultRequest.networkCapabilities);
        networkCapabilities.removeCapability(NET_CAPABILITY_NOT_VPN);
        enforceAccessPermission();
    } else {
        networkCapabilities = new NetworkCapabilities(networkCapabilities);
        enforceNetworkRequestPermissions(networkCapabilities);
        // TODO: this is incorrect. We mark the request as metered or not depending on the state
        // of the app when the request is filed, but we never change the request if the app
        // changes network state. http://b/29964605
        enforceMeteredApnPolicy(networkCapabilities);
    }
    ensureRequestableCapabilities(networkCapabilities);
    // Set the UID range for this request to the single UID of the requester, or to an empty
    // set of UIDs if the caller has the appropriate permission and UIDs have not been set.
    // This will overwrite any allowed UIDs in the requested capabilities. Though there
    // are no visible methods to set the UIDs, an app could use reflection to try and get
    // networks for other apps so it's essential that the UIDs are overwritten.
    restrictRequestUidsForCaller(networkCapabilities);
    if (timeoutMs < 0) {
        throw new IllegalArgumentException("Bad timeout specified");
    }
    ensureValidNetworkSpecifier(networkCapabilities);
    NetworkRequest networkRequest = new NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type);
    NetworkRequestInfo nri = new NetworkRequestInfo(messenger, networkRequest, binder);
    if (DBG)
        log("requestNetwork for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_REQUEST, nri));
    if (timeoutMs > 0) {
        mHandler.sendMessageDelayed(mHandler.obtainMessage(EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs);
    }
    return networkRequest;
}
#end_block

#method_before
@Override
public NetworkRequest pendingRequestForNetwork(NetworkCapabilities networkCapabilities, PendingIntent operation) {
    checkNotNull(operation, "PendingIntent cannot be null.");
    networkCapabilities = new NetworkCapabilities(networkCapabilities);
    enforceNetworkRequestPermissions(networkCapabilities);
    enforceMeteredApnPolicy(networkCapabilities);
    ensureRequestableCapabilities(networkCapabilities);
    ensureValidNetworkSpecifier(networkCapabilities);
    // TODO : don't forcefully set the UID when communicating with processes
    // that have the NETWORK_SETTINGS permission.
    networkCapabilities.setSingleUid(Binder.getCallingUid());
    NetworkRequest networkRequest = new NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST);
    NetworkRequestInfo nri = new NetworkRequestInfo(networkRequest, operation);
    if (DBG)
        log("pendingRequest for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri));
    return networkRequest;
}
#method_after
@Override
public NetworkRequest pendingRequestForNetwork(NetworkCapabilities networkCapabilities, PendingIntent operation) {
    checkNotNull(operation, "PendingIntent cannot be null.");
    networkCapabilities = new NetworkCapabilities(networkCapabilities);
    enforceNetworkRequestPermissions(networkCapabilities);
    enforceMeteredApnPolicy(networkCapabilities);
    ensureRequestableCapabilities(networkCapabilities);
    ensureValidNetworkSpecifier(networkCapabilities);
    restrictRequestUidsForCaller(networkCapabilities);
    NetworkRequest networkRequest = new NetworkRequest(networkCapabilities, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.REQUEST);
    NetworkRequestInfo nri = new NetworkRequestInfo(networkRequest, operation);
    if (DBG)
        log("pendingRequest for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT, nri));
    return networkRequest;
}
#end_block

#method_before
@Override
public NetworkRequest listenForNetwork(NetworkCapabilities networkCapabilities, Messenger messenger, IBinder binder) {
    if (!hasWifiNetworkListenPermission(networkCapabilities)) {
        enforceAccessPermission();
    }
    NetworkCapabilities nc = new NetworkCapabilities(networkCapabilities);
    // TODO : don't forcefully set the UIDs when communicating with processes
    // that have the NETWORK_SETTINGS permission.
    nc.setSingleUid(Binder.getCallingUid());
    if (!ConnectivityManager.checkChangePermission(mContext)) {
        // Apps without the CHANGE_NETWORK_STATE permission can't use background networks, so
        // make all their listens include NET_CAPABILITY_FOREGROUND. That way, they will get
        // onLost and onAvailable callbacks when networks move in and out of the background.
        // There is no need to do this for requests because an app without CHANGE_NETWORK_STATE
        // can't request networks.
        nc.addCapability(NET_CAPABILITY_FOREGROUND);
    }
    ensureValidNetworkSpecifier(networkCapabilities);
    NetworkRequest networkRequest = new NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN);
    NetworkRequestInfo nri = new NetworkRequestInfo(messenger, networkRequest, binder);
    if (VDBG)
        log("listenForNetwork for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_LISTENER, nri));
    return networkRequest;
}
#method_after
@Override
public NetworkRequest listenForNetwork(NetworkCapabilities networkCapabilities, Messenger messenger, IBinder binder) {
    if (!hasWifiNetworkListenPermission(networkCapabilities)) {
        enforceAccessPermission();
    }
    NetworkCapabilities nc = new NetworkCapabilities(networkCapabilities);
    restrictRequestUidsForCaller(nc);
    if (!ConnectivityManager.checkChangePermission(mContext)) {
        // Apps without the CHANGE_NETWORK_STATE permission can't use background networks, so
        // make all their listens include NET_CAPABILITY_FOREGROUND. That way, they will get
        // onLost and onAvailable callbacks when networks move in and out of the background.
        // There is no need to do this for requests because an app without CHANGE_NETWORK_STATE
        // can't request networks.
        nc.addCapability(NET_CAPABILITY_FOREGROUND);
    }
    ensureValidNetworkSpecifier(networkCapabilities);
    NetworkRequest networkRequest = new NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN);
    NetworkRequestInfo nri = new NetworkRequestInfo(messenger, networkRequest, binder);
    if (VDBG)
        log("listenForNetwork for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_LISTENER, nri));
    return networkRequest;
}
#end_block

#method_before
@Override
public void pendingListenForNetwork(NetworkCapabilities networkCapabilities, PendingIntent operation) {
    checkNotNull(operation, "PendingIntent cannot be null.");
    if (!hasWifiNetworkListenPermission(networkCapabilities)) {
        enforceAccessPermission();
    }
    ensureValidNetworkSpecifier(networkCapabilities);
    final NetworkCapabilities nc = new NetworkCapabilities(networkCapabilities);
    // TODO : don't forcefully set the UIDs when communicating with processes
    // that have the NETWORK_SETTINGS permission.
    nc.setSingleUid(Binder.getCallingUid());
    NetworkRequest networkRequest = new NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN);
    NetworkRequestInfo nri = new NetworkRequestInfo(networkRequest, operation);
    if (VDBG)
        log("pendingListenForNetwork for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_LISTENER, nri));
}
#method_after
@Override
public void pendingListenForNetwork(NetworkCapabilities networkCapabilities, PendingIntent operation) {
    checkNotNull(operation, "PendingIntent cannot be null.");
    if (!hasWifiNetworkListenPermission(networkCapabilities)) {
        enforceAccessPermission();
    }
    ensureValidNetworkSpecifier(networkCapabilities);
    final NetworkCapabilities nc = new NetworkCapabilities(networkCapabilities);
    restrictRequestUidsForCaller(nc);
    NetworkRequest networkRequest = new NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN);
    NetworkRequestInfo nri = new NetworkRequestInfo(networkRequest, operation);
    if (VDBG)
        log("pendingListenForNetwork for " + nri);
    mHandler.sendMessage(mHandler.obtainMessage(EVENT_REGISTER_NETWORK_LISTENER, nri));
}
#end_block

#method_before
private void callCallbackForRequest(NetworkRequestInfo nri, NetworkAgentInfo networkAgent, int notificationType, int arg1) {
    if (nri.messenger == null) {
        // Default request has no msgr
        return;
    }
    Bundle bundle = new Bundle();
    // TODO: check if defensive copies of data is needed.
    putParcelable(bundle, new NetworkRequest(nri.request));
    Message msg = Message.obtain();
    if (notificationType != ConnectivityManager.CALLBACK_UNAVAIL) {
        putParcelable(bundle, networkAgent.network);
    }
    switch(notificationType) {
        case ConnectivityManager.CALLBACK_AVAILABLE:
            {
                putParcelable(bundle, new NetworkCapabilities(networkAgent.networkCapabilities));
                putParcelable(bundle, new LinkProperties(networkAgent.linkProperties));
                break;
            }
        case ConnectivityManager.CALLBACK_LOSING:
            {
                msg.arg1 = arg1;
                break;
            }
        case ConnectivityManager.CALLBACK_CAP_CHANGED:
            {
                // networkAgent can't be null as it has been accessed a few lines above.
                final NetworkCapabilities nc = networkCapabilitiesWithoutUids(networkAgent.networkCapabilities);
                putParcelable(bundle, nc);
                break;
            }
        case ConnectivityManager.CALLBACK_IP_CHANGED:
            {
                putParcelable(bundle, new LinkProperties(networkAgent.linkProperties));
                break;
            }
    }
    msg.what = notificationType;
    msg.setData(bundle);
    try {
        if (VDBG) {
            String notification = ConnectivityManager.getCallbackName(notificationType);
            log("sending notification " + notification + " for " + nri.request);
        }
        nri.messenger.send(msg);
    } catch (RemoteException e) {
        // may occur naturally in the race of binder death.
        loge("RemoteException caught trying to send a callback msg for " + nri.request);
    }
}
#method_after
private void callCallbackForRequest(NetworkRequestInfo nri, NetworkAgentInfo networkAgent, int notificationType, int arg1) {
    if (nri.messenger == null) {
        // Default request has no msgr
        return;
    }
    Bundle bundle = new Bundle();
    // TODO: check if defensive copies of data is needed.
    putParcelable(bundle, new NetworkRequest(nri.request));
    Message msg = Message.obtain();
    if (notificationType != ConnectivityManager.CALLBACK_UNAVAIL) {
        putParcelable(bundle, networkAgent.network);
    }
    switch(notificationType) {
        case ConnectivityManager.CALLBACK_AVAILABLE:
            {
                putParcelable(bundle, new NetworkCapabilities(networkAgent.networkCapabilities));
                putParcelable(bundle, new LinkProperties(networkAgent.linkProperties));
                break;
            }
        case ConnectivityManager.CALLBACK_LOSING:
            {
                msg.arg1 = arg1;
                break;
            }
        case ConnectivityManager.CALLBACK_CAP_CHANGED:
            {
                // networkAgent can't be null as it has been accessed a few lines above.
                final NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities, nri.mPid, nri.mUid);
                putParcelable(bundle, nc);
                break;
            }
        case ConnectivityManager.CALLBACK_IP_CHANGED:
            {
                putParcelable(bundle, new LinkProperties(networkAgent.linkProperties));
                break;
            }
    }
    msg.what = notificationType;
    msg.setData(bundle);
    try {
        if (VDBG) {
            String notification = ConnectivityManager.getCallbackName(notificationType);
            log("sending notification " + notification + " for " + nri.request);
        }
        nri.messenger.send(msg);
    } catch (RemoteException e) {
        // may occur naturally in the race of binder death.
        loge("RemoteException caught trying to send a callback msg for " + nri.request);
    }
}
#end_block

#method_before
private void updateNetworkInfo(NetworkAgentInfo networkAgent, NetworkInfo newInfo) {
    final NetworkInfo.State state = newInfo.getState();
    NetworkInfo oldInfo = null;
    final int oldScore = networkAgent.getCurrentScore();
    synchronized (networkAgent) {
        oldInfo = networkAgent.networkInfo;
        networkAgent.networkInfo = newInfo;
    }
    notifyLockdownVpn(networkAgent);
    if (DBG) {
        log(networkAgent.name() + " EVENT_NETWORK_INFO_CHANGED, going from " + (oldInfo == null ? "null" : oldInfo.getState()) + " to " + state);
    }
    if (!networkAgent.created && (state == NetworkInfo.State.CONNECTED || (state == NetworkInfo.State.CONNECTING && networkAgent.isVPN()))) {
        // A network that has just connected has zero requests and is thus a foreground network.
        networkAgent.networkCapabilities.addCapability(NET_CAPABILITY_FOREGROUND);
        try {
            // This should never fail.  Specifying an already in use NetID will cause failure.
            if (networkAgent.isVPN()) {
                mNetd.createVirtualNetwork(networkAgent.network.netId, !networkAgent.linkProperties.getDnsServers().isEmpty(), (networkAgent.networkMisc == null || !networkAgent.networkMisc.allowBypass));
            } else {
                mNetd.createPhysicalNetwork(networkAgent.network.netId, getNetworkPermission(networkAgent.networkCapabilities));
            }
        } catch (Exception e) {
            loge("Error creating network " + networkAgent.network.netId + ": " + e.getMessage());
            return;
        }
        networkAgent.created = true;
    }
    if (!networkAgent.everConnected && state == NetworkInfo.State.CONNECTED) {
        networkAgent.everConnected = true;
        updateLinkProperties(networkAgent, null);
        networkAgent.networkMonitor.sendMessage(NetworkMonitor.CMD_NETWORK_CONNECTED);
        scheduleUnvalidatedPrompt(networkAgent);
        if (networkAgent.isVPN()) {
            // Temporarily disable the default proxy (not global).
            synchronized (mProxyLock) {
                if (!mDefaultProxyDisabled) {
                    mDefaultProxyDisabled = true;
                    if (mGlobalProxy == null && mDefaultProxy != null) {
                        sendProxyBroadcast(null);
                    }
                }
            }
        // TODO: support proxy per network.
        }
        // Whether a particular NetworkRequest listen should cause signal strength thresholds to
        // be communicated to a particular NetworkAgent depends only on the network's immutable,
        // capabilities, so it only needs to be done once on initial connect, not every time the
        // network's capabilities change. Note that we do this before rematching the network,
        // so we could decide to tear it down immediately afterwards. That's fine though - on
        // disconnection NetworkAgents should stop any signal strength monitoring they have been
        // doing.
        updateSignalStrengthThresholds(networkAgent, "CONNECT", null);
        // Consider network even though it is not yet validated.
        final long now = SystemClock.elapsedRealtime();
        rematchNetworkAndRequests(networkAgent, ReapUnvalidatedNetworks.REAP, now);
        // This has to happen after matching the requests, because callbacks are just requests.
        notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_PRECHECK);
    } else if (state == NetworkInfo.State.DISCONNECTED) {
        networkAgent.asyncChannel.disconnect();
        if (networkAgent.isVPN()) {
            synchronized (mProxyLock) {
                if (mDefaultProxyDisabled) {
                    mDefaultProxyDisabled = false;
                    if (mGlobalProxy == null && mDefaultProxy != null) {
                        sendProxyBroadcast(mDefaultProxy);
                    }
                }
            }
            updateUids(networkAgent, networkAgent.networkCapabilities, null);
        }
    } else if ((oldInfo != null && oldInfo.getState() == NetworkInfo.State.SUSPENDED) || state == NetworkInfo.State.SUSPENDED) {
        // going into or coming out of SUSPEND: rescore and notify
        if (networkAgent.getCurrentScore() != oldScore) {
            rematchAllNetworksAndRequests(networkAgent, oldScore);
        }
        updateCapabilities(networkAgent.getCurrentScore(), networkAgent, networkAgent.networkCapabilities);
        // TODO (b/73132094) : remove this call once the few users of onSuspended and
        // onResumed have been removed.
        notifyNetworkCallbacks(networkAgent, (state == NetworkInfo.State.SUSPENDED ? ConnectivityManager.CALLBACK_SUSPENDED : ConnectivityManager.CALLBACK_RESUMED));
        mLegacyTypeTracker.update(networkAgent);
    }
}
#method_after
private void updateNetworkInfo(NetworkAgentInfo networkAgent, NetworkInfo newInfo) {
    final NetworkInfo.State state = newInfo.getState();
    NetworkInfo oldInfo = null;
    final int oldScore = networkAgent.getCurrentScore();
    synchronized (networkAgent) {
        oldInfo = networkAgent.networkInfo;
        networkAgent.networkInfo = newInfo;
    }
    notifyLockdownVpn(networkAgent);
    if (DBG) {
        log(networkAgent.name() + " EVENT_NETWORK_INFO_CHANGED, going from " + (oldInfo == null ? "null" : oldInfo.getState()) + " to " + state);
    }
    if (!networkAgent.created && (state == NetworkInfo.State.CONNECTED || (state == NetworkInfo.State.CONNECTING && networkAgent.isVPN()))) {
        // A network that has just connected has zero requests and is thus a foreground network.
        networkAgent.networkCapabilities.addCapability(NET_CAPABILITY_FOREGROUND);
        try {
            // This should never fail.  Specifying an already in use NetID will cause failure.
            if (networkAgent.isVPN()) {
                mNetd.createVirtualNetwork(networkAgent.network.netId, !networkAgent.linkProperties.getDnsServers().isEmpty(), (networkAgent.networkMisc == null || !networkAgent.networkMisc.allowBypass));
            } else {
                mNetd.createPhysicalNetwork(networkAgent.network.netId, getNetworkPermission(networkAgent.networkCapabilities));
            }
        } catch (Exception e) {
            loge("Error creating network " + networkAgent.network.netId + ": " + e.getMessage());
            return;
        }
        networkAgent.created = true;
    }
    if (!networkAgent.everConnected && state == NetworkInfo.State.CONNECTED) {
        networkAgent.everConnected = true;
        if (networkAgent.linkProperties == null) {
            Slog.wtf(TAG, networkAgent.name() + " connected with null LinkProperties");
        }
        updateLinkProperties(networkAgent, null);
        networkAgent.networkMonitor.sendMessage(NetworkMonitor.CMD_NETWORK_CONNECTED);
        scheduleUnvalidatedPrompt(networkAgent);
        if (networkAgent.isVPN()) {
            // Temporarily disable the default proxy (not global).
            synchronized (mProxyLock) {
                if (!mDefaultProxyDisabled) {
                    mDefaultProxyDisabled = true;
                    if (mGlobalProxy == null && mDefaultProxy != null) {
                        sendProxyBroadcast(null);
                    }
                }
            }
        // TODO: support proxy per network.
        }
        // Whether a particular NetworkRequest listen should cause signal strength thresholds to
        // be communicated to a particular NetworkAgent depends only on the network's immutable,
        // capabilities, so it only needs to be done once on initial connect, not every time the
        // network's capabilities change. Note that we do this before rematching the network,
        // so we could decide to tear it down immediately afterwards. That's fine though - on
        // disconnection NetworkAgents should stop any signal strength monitoring they have been
        // doing.
        updateSignalStrengthThresholds(networkAgent, "CONNECT", null);
        // Consider network even though it is not yet validated.
        final long now = SystemClock.elapsedRealtime();
        rematchNetworkAndRequests(networkAgent, ReapUnvalidatedNetworks.REAP, now);
        // This has to happen after matching the requests, because callbacks are just requests.
        notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_PRECHECK);
    } else if (state == NetworkInfo.State.DISCONNECTED) {
        networkAgent.asyncChannel.disconnect();
        if (networkAgent.isVPN()) {
            synchronized (mProxyLock) {
                if (mDefaultProxyDisabled) {
                    mDefaultProxyDisabled = false;
                    if (mGlobalProxy == null && mDefaultProxy != null) {
                        sendProxyBroadcast(mDefaultProxy);
                    }
                }
            }
            updateUids(networkAgent, networkAgent.networkCapabilities, null);
        }
    } else if ((oldInfo != null && oldInfo.getState() == NetworkInfo.State.SUSPENDED) || state == NetworkInfo.State.SUSPENDED) {
        // going into or coming out of SUSPEND: rescore and notify
        if (networkAgent.getCurrentScore() != oldScore) {
            rematchAllNetworksAndRequests(networkAgent, oldScore);
        }
        updateCapabilities(networkAgent.getCurrentScore(), networkAgent, networkAgent.networkCapabilities);
        // TODO (b/73132094) : remove this call once the few users of onSuspended and
        // onResumed have been removed.
        notifyNetworkCallbacks(networkAgent, (state == NetworkInfo.State.SUSPENDED ? ConnectivityManager.CALLBACK_SUSPENDED : ConnectivityManager.CALLBACK_RESUMED));
        mLegacyTypeTracker.update(networkAgent);
    }
}
#end_block

#method_before
private String findSimpleperf() {
    // 1. Try /data/local/tmp/simpleperf.
    String simpleperfPath = findSimpleperfInTempDir();
    if (simpleperfPath != null) {
        return simpleperfPath;
    }
    // 2. Try /system/bin/simpleperf, which is available on Android >= Q.
    simpleperfPath = "/system/bin/simpleperf";
    if (isExecutableFile(simpleperfPath)) {
        return simpleperfPath;
    }
    throw new Error("can't find simpleperf on device. Please run api_profiler.py.");
}
#method_after
private String findSimpleperf() {
    // 1. Try /data/local/tmp/simpleperf. Probably it's newer than /system/bin/simpleperf.
    String simpleperfPath = findSimpleperfInTempDir();
    if (simpleperfPath != null) {
        return simpleperfPath;
    }
    // 2. Try /system/bin/simpleperf, which is available on Android >= Q.
    simpleperfPath = "/system/bin/simpleperf";
    if (isExecutableFile(simpleperfPath)) {
        return simpleperfPath;
    }
    throw new Error("can't find simpleperf on device. Please run api_profiler.py.");
}
#end_block

#method_before
private String bundleToString(Bundle extra) {
    if (extra == null) {
        return "";
    }
    StringBuilder sb = new StringBuilder();
    sb.append("Bundle[");
    for (String key : extra.keySet()) {
        sb.append(key);
        sb.append("=");
        if (key.equals(TelecomManager.EXTRA_INCOMING_CALL_ADDRESS) || key.equals(TelecomManager.EXTRA_UNKNOWN_CALL_HANDLE)) {
            sb.append(Log.pii(extra.get(key)));
        } else {
            sb.append(extra.get(key));
        }
        sb.append(", ");
    }
    sb.append("]");
    return sb.toString();
}
#method_after
private static String bundleToString(Bundle extras) {
    if (extras == null) {
        return "";
    }
    StringBuilder sb = new StringBuilder();
    sb.append("Bundle[");
    for (String key : extras.keySet()) {
        sb.append(key);
        sb.append("=");
        switch(key) {
            case TelecomManager.EXTRA_INCOMING_CALL_ADDRESS:
            case TelecomManager.EXTRA_UNKNOWN_CALL_HANDLE:
                sb.append(Log.pii(extras.get(key)));
                break;
            default:
                sb.append(extras.get(key));
                break;
        }
        sb.append(", ");
    }
    sb.append("]");
    return sb.toString();
}
#end_block

#method_before
public boolean navigateUp() {
    if (mBackStack.size() == 1) {
        // If there's only one entry, then we've deep linked into a specific destination
        // on another task so we need to find the parent and start our task from there
        NavDestination currentDestination = getCurrentDestination();
        int destId = currentDestination.getId();
        NavGraph parent = currentDestination.getParent();
        while (parent != null) {
            if (parent.getStartDestination() != destId) {
                TaskStackBuilder parentIntents = new NavDeepLinkBuilder(NavController.this).setDestination(parent.getId()).createTaskStackBuilder();
                parentIntents.startActivities();
                if (mActivity != null) {
                    mActivity.finish();
                }
                return true;
            }
            destId = parent.getId();
            parent = parent.getParent();
        }
        // We're already at the startDestination of the graph so there's no 'Up' to go to
        return false;
    } else {
        return popBackStack();
    }
}
#method_after
public boolean navigateUp() {
    if (getDestinationCountOnBackStack() == 1) {
        // If there's only one entry, then we've deep linked into a specific destination
        // on another task so we need to find the parent and start our task from there
        NavDestination currentDestination = getCurrentDestination();
        int destId = currentDestination.getId();
        NavGraph parent = currentDestination.getParent();
        while (parent != null) {
            if (parent.getStartDestination() != destId) {
                TaskStackBuilder parentIntents = new NavDeepLinkBuilder(this).setDestination(parent.getId()).createTaskStackBuilder();
                parentIntents.startActivities();
                if (mActivity != null) {
                    mActivity.finish();
                }
                return true;
            }
            destId = parent.getId();
            parent = parent.getParent();
        }
        // We're already at the startDestination of the graph so there's no 'Up' to go to
        return false;
    } else {
        return popBackStack();
    }
}
#end_block

#method_before
@SuppressWarnings("deprecation")
public void navigate(@IdRes int resId, @Nullable Bundle args, @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
    NavDestination currentNode = mBackStack.isEmpty() ? mGraph : mBackStack.getLast().getDestination();
    if (currentNode == null) {
        throw new IllegalStateException("no current navigation node");
    }
    @IdRes
    int destId = resId;
    final NavAction navAction = currentNode.getAction(resId);
    Bundle combinedArgs = null;
    if (navAction != null) {
        if (navOptions == null) {
            navOptions = navAction.getNavOptions();
        }
        destId = navAction.getDestinationId();
        Bundle navActionArgs = navAction.getDefaultArguments();
        if (navActionArgs != null) {
            combinedArgs = new Bundle();
            combinedArgs.putAll(navActionArgs);
        }
    }
    if (args != null) {
        if (combinedArgs == null) {
            combinedArgs = new Bundle();
        }
        combinedArgs.putAll(args);
    }
    if (destId == 0 && navOptions != null && navOptions.getPopUpTo() != 0) {
        popBackStack(navOptions.getPopUpTo(), navOptions.isPopUpToInclusive());
        return;
    }
    if (destId == 0) {
        throw new IllegalArgumentException("Destination id == 0 can only be used" + " in conjunction with navOptions.popUpTo != 0");
    }
    NavDestination node = findDestination(destId);
    if (node == null) {
        final String dest = NavDestination.getDisplayName(mContext, destId);
        throw new IllegalArgumentException("navigation destination " + dest + (navAction != null ? " referenced from action " + NavDestination.getDisplayName(mContext, resId) : "") + " is unknown to this NavController");
    }
    navigate(node, combinedArgs, navOptions, navigatorExtras);
}
#method_after
@SuppressWarnings("deprecation")
public void navigate(@IdRes int resId, @Nullable Bundle args, @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
    NavDestination currentNode = mBackStack.isEmpty() ? mGraph : mBackStack.getLast().getDestination();
    if (currentNode == null) {
        throw new IllegalStateException("no current navigation node");
    }
    @IdRes
    int destId = resId;
    final NavAction navAction = currentNode.getAction(resId);
    Bundle combinedArgs = null;
    if (navAction != null) {
        if (navOptions == null) {
            navOptions = navAction.getNavOptions();
        }
        destId = navAction.getDestinationId();
        Bundle navActionArgs = navAction.getDefaultArguments();
        if (navActionArgs != null) {
            combinedArgs = new Bundle();
            combinedArgs.putAll(navActionArgs);
        }
    }
    if (args != null) {
        if (combinedArgs == null) {
            combinedArgs = new Bundle();
        }
        combinedArgs.putAll(args);
    }
    if (destId == 0 && navOptions != null && navOptions.getPopUpTo() != -1) {
        popBackStack(navOptions.getPopUpTo(), navOptions.isPopUpToInclusive());
        return;
    }
    if (destId == 0) {
        throw new IllegalArgumentException("Destination id == 0 can only be used" + " in conjunction with a valid navOptions.popUpTo");
    }
    NavDestination node = findDestination(destId);
    if (node == null) {
        final String dest = NavDestination.getDisplayName(mContext, destId);
        throw new IllegalArgumentException("navigation destination " + dest + (navAction != null ? " referenced from action " + NavDestination.getDisplayName(mContext, resId) : "") + " is unknown to this NavController");
    }
    navigate(node, combinedArgs, navOptions, navigatorExtras);
}
#end_block

#method_before
private void navigate(@NonNull NavDestination node, @Nullable Bundle args, @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
    boolean popped = false;
    if (navOptions != null) {
        if (navOptions.getPopUpTo() != 0) {
            popped = popBackStackInternal(navOptions.getPopUpTo(), navOptions.isPopUpToInclusive());
        }
    }
    Navigator<NavDestination> navigator = mNavigatorProvider.getNavigator(node.getNavigatorName());
    Bundle finalArgs = node.addInDefaultArgs(args);
    NavDestination newDest = navigator.navigate(node, finalArgs, navOptions, navigatorExtras);
    if (newDest != null) {
        // Ensure that every parent NavGraph is also on the stack if it isn't already
        // First get all of the parent NavGraphs
        ArrayDeque<NavBackStackEntry> hierarchy = new ArrayDeque<>();
        NavGraph parent = newDest.getParent();
        while (parent != null) {
            hierarchy.addFirst(new NavBackStackEntry(parent, finalArgs));
            parent = parent.getParent();
        }
        // Now iterate through the back stack and see which NavGraphs
        // are already on the back stack
        Iterator<NavBackStackEntry> iterator = mBackStack.iterator();
        while (iterator.hasNext() && !hierarchy.isEmpty()) {
            NavDestination destination = iterator.next().getDestination();
            if (destination.equals(hierarchy.getFirst().getDestination())) {
                // This destination is already in the back stack so
                // we don't need to add it
                hierarchy.removeFirst();
            }
        }
        // Add all of the remaining parent NavGraphs that aren't
        // already on the back stack
        mBackStack.addAll(hierarchy);
        // And finally, add the new destination
        NavBackStackEntry newBackStackEntry = new NavBackStackEntry(newDest, finalArgs);
        mBackStack.add(newBackStackEntry);
    }
    if (popped || newDest != null) {
        dispatchOnDestinationChanged();
    }
}
#method_after
private void navigate(@NonNull NavDestination node, @Nullable Bundle args, @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
    boolean popped = false;
    if (navOptions != null) {
        if (navOptions.getPopUpTo() != -1) {
            popped = popBackStackInternal(navOptions.getPopUpTo(), navOptions.isPopUpToInclusive());
        }
    }
    Navigator<NavDestination> navigator = mNavigatorProvider.getNavigator(node.getNavigatorName());
    Bundle finalArgs = node.addInDefaultArgs(args);
    NavDestination newDest = navigator.navigate(node, finalArgs, navOptions, navigatorExtras);
    if (newDest != null) {
        // Ensure that every parent NavGraph is also on the stack if it isn't already
        // First get all of the parent NavGraphs
        ArrayDeque<NavBackStackEntry> hierarchy = new ArrayDeque<>();
        NavGraph parent = newDest.getParent();
        while (parent != null) {
            hierarchy.addFirst(new NavBackStackEntry(parent, finalArgs));
            parent = parent.getParent();
        }
        // Now iterate through the back stack and see which NavGraphs
        // are already on the back stack
        Iterator<NavBackStackEntry> iterator = mBackStack.iterator();
        while (iterator.hasNext() && !hierarchy.isEmpty()) {
            NavDestination destination = iterator.next().getDestination();
            if (destination.equals(hierarchy.getFirst().getDestination())) {
                // This destination is already in the back stack so
                // we don't need to add it
                hierarchy.removeFirst();
            }
        }
        // Add all of the remaining parent NavGraphs that aren't
        // already on the back stack
        mBackStack.addAll(hierarchy);
        // And finally, add the new destination
        NavBackStackEntry newBackStackEntry = new NavBackStackEntry(newDest, finalArgs);
        mBackStack.add(newBackStackEntry);
    }
    if (popped || newDest != null) {
        dispatchOnDestinationChanged();
    }
}
#end_block

#method_before
public static void applyPopAnimationsToPendingTransition(@NonNull Activity activity) {
    Intent intent = activity.getIntent();
    if (intent == null) {
        return;
    }
    int popEnterAnim = intent.getIntExtra(EXTRA_POP_ENTER_ANIM, -1);
    int popExitAnim = intent.getIntExtra(EXTRA_POP_ENTER_ANIM, -1);
    if (popEnterAnim != -1 || popExitAnim != -1) {
        popEnterAnim = popEnterAnim != -1 ? popEnterAnim : 0;
        popExitAnim = popExitAnim != -1 ? popExitAnim : 0;
        activity.overridePendingTransition(popEnterAnim, popExitAnim);
    }
}
#method_after
public static void applyPopAnimationsToPendingTransition(@NonNull Activity activity) {
    Intent intent = activity.getIntent();
    if (intent == null) {
        return;
    }
    int popEnterAnim = intent.getIntExtra(EXTRA_POP_ENTER_ANIM, -1);
    int popExitAnim = intent.getIntExtra(EXTRA_POP_EXIT_ANIM, -1);
    if (popEnterAnim != -1 || popExitAnim != -1) {
        popEnterAnim = popEnterAnim != -1 ? popEnterAnim : 0;
        popExitAnim = popExitAnim != -1 ? popExitAnim : 0;
        activity.overridePendingTransition(popEnterAnim, popExitAnim);
    }
}
#end_block

#method_before
private void inflateAction(@NonNull Resources res, @NonNull NavDestination dest, @NonNull AttributeSet attrs, XmlResourceParser parser, int graphResId) throws IOException, XmlPullParserException {
    final TypedArray a = res.obtainAttributes(attrs, R.styleable.NavAction);
    final int id = a.getResourceId(R.styleable.NavAction_android_id, 0);
    final int destId = a.getResourceId(R.styleable.NavAction_destination, 0);
    NavAction action = new NavAction(destId);
    NavOptions.Builder builder = new NavOptions.Builder();
    builder.setLaunchSingleTop(a.getBoolean(R.styleable.NavAction_launchSingleTop, false));
    builder.setPopUpTo(a.getResourceId(R.styleable.NavAction_popUpTo, 0), a.getBoolean(R.styleable.NavAction_popUpToInclusive, false));
    builder.setEnterAnim(a.getResourceId(R.styleable.NavAction_enterAnim, -1));
    builder.setExitAnim(a.getResourceId(R.styleable.NavAction_exitAnim, -1));
    builder.setPopEnterAnim(a.getResourceId(R.styleable.NavAction_popEnterAnim, -1));
    builder.setPopExitAnim(a.getResourceId(R.styleable.NavAction_popExitAnim, -1));
    action.setNavOptions(builder.build());
    Bundle args = new Bundle();
    final int innerDepth = parser.getDepth() + 1;
    int type;
    int depth;
    while ((type = parser.next()) != XmlPullParser.END_DOCUMENT && ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
        if (type != XmlPullParser.START_TAG) {
            continue;
        }
        if (depth > innerDepth) {
            continue;
        }
        final String name = parser.getName();
        if (TAG_ARGUMENT.equals(name)) {
            inflateArgumentForBundle(res, args, attrs, graphResId);
        }
    }
    if (!args.isEmpty()) {
        action.setDefaultArguments(args);
    }
    dest.putAction(id, action);
    a.recycle();
}
#method_after
private void inflateAction(@NonNull Resources res, @NonNull NavDestination dest, @NonNull AttributeSet attrs, XmlResourceParser parser, int graphResId) throws IOException, XmlPullParserException {
    final TypedArray a = res.obtainAttributes(attrs, R.styleable.NavAction);
    final int id = a.getResourceId(R.styleable.NavAction_android_id, 0);
    final int destId = a.getResourceId(R.styleable.NavAction_destination, 0);
    NavAction action = new NavAction(destId);
    NavOptions.Builder builder = new NavOptions.Builder();
    builder.setLaunchSingleTop(a.getBoolean(R.styleable.NavAction_launchSingleTop, false));
    builder.setPopUpTo(a.getResourceId(R.styleable.NavAction_popUpTo, -1), a.getBoolean(R.styleable.NavAction_popUpToInclusive, false));
    builder.setEnterAnim(a.getResourceId(R.styleable.NavAction_enterAnim, -1));
    builder.setExitAnim(a.getResourceId(R.styleable.NavAction_exitAnim, -1));
    builder.setPopEnterAnim(a.getResourceId(R.styleable.NavAction_popEnterAnim, -1));
    builder.setPopExitAnim(a.getResourceId(R.styleable.NavAction_popExitAnim, -1));
    action.setNavOptions(builder.build());
    Bundle args = new Bundle();
    final int innerDepth = parser.getDepth() + 1;
    int type;
    int depth;
    while ((type = parser.next()) != XmlPullParser.END_DOCUMENT && ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
        if (type != XmlPullParser.START_TAG) {
            continue;
        }
        if (depth > innerDepth) {
            continue;
        }
        final String name = parser.getName();
        if (TAG_ARGUMENT.equals(name)) {
            inflateArgumentForBundle(res, args, attrs, graphResId);
        }
    }
    if (!args.isEmpty()) {
        action.setDefaultArguments(args);
    }
    dest.putAction(id, action);
    a.recycle();
}
#end_block

#method_before
public void setOnViewTypeChangedListener(@Nullable OnViewTypeChangedListener l) {
    mViewTypeChangedListener = l;
}
#method_after
public void setOnViewTypeChangedListener(@Nullable OnViewTypeChangedListener listener) {
    mViewTypeChangedListener = listener;
}
#end_block

#method_before
@Override
public CharSequence getAccessibilityClassName() {
    return VideoView.class.getName();
}
#method_after
@Override
public CharSequence getAccessibilityClassName() {
    // Class name may be obfuscated by Proguard. Hardcode the string for accessibility usage.
    return "androidx.media2.widget.VideoView";
}
#end_block

#method_before
private boolean isMediaPrepared() {
    return mMediaSession != null && mMediaSession.getPlayer().getPlayerState() != SessionPlayer.PLAYER_STATE_ERROR && mMediaSession.getPlayer().getPlayerState() != SessionPlayer.PLAYER_STATE_IDLE;
}
#method_after
boolean isMediaPrepared() {
    return mMediaSession != null && mMediaSession.getPlayer().getPlayerState() != SessionPlayer.PLAYER_STATE_ERROR && mMediaSession.getPlayer().getPlayerState() != SessionPlayer.PLAYER_STATE_IDLE;
}
#end_block

#method_before
@Override
public SessionCommandGroup onConnect(@NonNull MediaSession session, @NonNull MediaSession.ControllerInfo controller) {
    if (session != mMediaSession) {
        if (DEBUG) {
            Log.w(TAG, "onConnect() is ignored. session is already gone.");
        }
    }
    mCanBroadcastCustomCommand = false;
    SessionCommandGroup.Builder commandsBuilder = new SessionCommandGroup.Builder().addCommand(SessionCommand.COMMAND_CODE_PLAYER_PAUSE).addCommand(SessionCommand.COMMAND_CODE_PLAYER_PLAY).addCommand(SessionCommand.COMMAND_CODE_PLAYER_PREPARE).addCommand(SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED).addCommand(SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD).addCommand(SessionCommand.COMMAND_CODE_SESSION_REWIND).addCommand(SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO).addCommand(SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME).addCommand(SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME).addCommand(SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI).addCommand(SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI).addCommand(SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST).addCommand(SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA).addCommand(new SessionCommand(MediaControlView.COMMAND_SELECT_AUDIO_TRACK, null)).addCommand(new SessionCommand(MediaControlView.COMMAND_SHOW_SUBTITLE, null)).addCommand(new SessionCommand(MediaControlView.COMMAND_HIDE_SUBTITLE, null));
    return commandsBuilder.build();
}
#method_after
@Override
public SessionCommandGroup onConnect(@NonNull MediaSession session, @NonNull MediaSession.ControllerInfo controller) {
    if (session != mMediaSession) {
        if (DEBUG) {
            Log.w(TAG, "onConnect() is ignored. session is already gone.");
        }
    }
    SessionCommandGroup.Builder commandsBuilder = new SessionCommandGroup.Builder().addCommand(SessionCommand.COMMAND_CODE_PLAYER_PAUSE).addCommand(SessionCommand.COMMAND_CODE_PLAYER_PLAY).addCommand(SessionCommand.COMMAND_CODE_PLAYER_PREPARE).addCommand(SessionCommand.COMMAND_CODE_PLAYER_SET_SPEED).addCommand(SessionCommand.COMMAND_CODE_SESSION_FAST_FORWARD).addCommand(SessionCommand.COMMAND_CODE_SESSION_REWIND).addCommand(SessionCommand.COMMAND_CODE_PLAYER_SEEK_TO).addCommand(SessionCommand.COMMAND_CODE_VOLUME_SET_VOLUME).addCommand(SessionCommand.COMMAND_CODE_VOLUME_ADJUST_VOLUME).addCommand(SessionCommand.COMMAND_CODE_SESSION_PLAY_FROM_URI).addCommand(SessionCommand.COMMAND_CODE_SESSION_PREPARE_FROM_URI).addCommand(SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST).addCommand(SessionCommand.COMMAND_CODE_PLAYER_GET_PLAYLIST_METADATA).addCommand(new SessionCommand(MediaControlView.COMMAND_SELECT_AUDIO_TRACK, null)).addCommand(new SessionCommand(MediaControlView.COMMAND_SHOW_SUBTITLE, null)).addCommand(new SessionCommand(MediaControlView.COMMAND_HIDE_SUBTITLE, null));
    return commandsBuilder.build();
}
#end_block

#method_before
@Override
public void onPostConnect(@NonNull MediaSession session, @NonNull MediaSession.ControllerInfo controller) {
    mCanBroadcastCustomCommand = true;
    if (mNeedToBroadcastPostConnect) {
        Bundle data = extractTrackInfoData();
        if (data != null) {
            mMediaSession.broadcastCustomCommand(new SessionCommand(MediaControlView.EVENT_UPDATE_TRACK_STATUS, null), data);
        }
        mNeedToBroadcastPostConnect = false;
    }
}
#method_after
@Override
public void onPostConnect(@NonNull MediaSession session, @NonNull MediaSession.ControllerInfo controller) {
    if (session != mMediaSession) {
        if (DEBUG) {
            Log.w(TAG, "onPostConnect() is ignored. session is already gone.");
        }
    }
    if (isMediaPrepared()) {
        Bundle data = extractTrackInfoData();
        if (data != null) {
            mMediaSession.broadcastCustomCommand(new SessionCommand(MediaControlView.EVENT_UPDATE_TRACK_STATUS, null), data);
        }
    }
}
#end_block

#method_before
@NonNull
public Uri getUri() {
    return mImpl.getUri();
}
#method_after
@NonNull
private Uri getUri() {
    return mImpl.getUri();
}
#end_block

#method_before
@NonNull
public CommandButton build() {
    return new CommandButton(mCommand, mIconResId, mDisplayName, mExtras, mEnabled);
}
#method_after
@Override
@NonNull
public MediaSession build() {
    if (mCallbackExecutor == null) {
        mCallbackExecutor = ContextCompat.getMainExecutor(mContext);
    }
    if (mCallback == null) {
        mCallback = new SessionCallback() {
        };
    }
    return new MediaSession(mContext, mId, mPlayer, mSessionActivity, mCallbackExecutor, mCallback);
}
#end_block

#method_before
@Override
public void close() {
    synchronized (mLock) {
        if (isClosed()) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, "Closing session, id=" + getId() + ", token=" + getToken());
        }
        mPlayer.unregisterPlayerCallback(mPlayerCallback);
        mSessionCompat.release();
        mMediaButtonIntent.cancel();
        mContext.unregisterReceiver(mBroadcastReceiver);
        mCallback.onSessionClosed(mInstance);
        dispatchRemoteControllerTaskWithoutReturn(new RemoteControllerTask() {

            @Override
            public void run(ControllerCb callback, int seq) throws RemoteException {
                callback.onDisconnected(seq);
            }
        });
        mHandler.removeCallbacksAndMessages(null);
        if (mHandlerThread.isAlive()) {
            if (Build.VERSION.SDK_INT >= 18) {
                mHandlerThread.quitSafely();
            } else {
                mHandlerThread.quit();
            }
        }
    }
}
#method_after
@Override
public void close() {
    synchronized (mLock) {
        if (isClosed()) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, "Closing session, id=" + getId() + ", token=" + getToken());
        }
        mPlayer.unregisterPlayerCallback(mPlayerCallback);
        mSessionCompat.release();
        mMediaButtonIntent.cancel();
        if (mBroadcastReceiver != null) {
            mContext.unregisterReceiver(mBroadcastReceiver);
        }
        mCallback.onSessionClosed(mInstance);
        dispatchRemoteControllerTaskWithoutReturn(new RemoteControllerTask() {

            @Override
            public void run(ControllerCb callback, int seq) throws RemoteException {
                callback.onDisconnected(seq);
            }
        });
        mHandler.removeCallbacksAndMessages(null);
        if (mHandlerThread.isAlive()) {
            if (Build.VERSION.SDK_INT >= 18) {
                mHandlerThread.quitSafely();
            } else {
                mHandlerThread.quit();
            }
        }
    }
}
#end_block

#method_before
@Nullable
private static ComponentName getServiceComponentByAction(@NonNull Context context, @NonNull String action) {
    PackageManager pm = context.getPackageManager();
    Intent queryIntent = new Intent(action);
    queryIntent.setPackage(context.getPackageName());
    List<ResolveInfo> resolveInfos = pm.queryIntentServices(queryIntent, 0);
    if (resolveInfos == null || resolveInfos.size() > 1) {
        throw new IllegalStateException("Expected one or no service that handles " + action + ", found " + resolveInfos.size());
    }
    if (resolveInfos.isEmpty()) {
        return null;
    }
    ResolveInfo resolveInfo = resolveInfos.get(0);
    return new ComponentName(resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
}
#method_after
@Nullable
private ComponentName getServiceComponentByAction(@NonNull String action) {
    PackageManager pm = mContext.getPackageManager();
    Intent queryIntent = new Intent(action);
    queryIntent.setPackage(mContext.getPackageName());
    List<ResolveInfo> resolveInfos = pm.queryIntentServices(queryIntent, 0);
    if (resolveInfos == null || resolveInfos.isEmpty()) {
        return null;
    }
    ResolveInfo resolveInfo = resolveInfos.get(0);
    return new ComponentName(resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
}
#end_block

#method_before
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    new Thread() {

        public void run() {
            // Open a domain socket using JNI because Java cannot do it itself.
            openSocket();
        }
    }.start();
}
#method_after
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    new Thread() {

        public void run() {
            try {
                new LocalServerSocket(DOMAIN_SOCKET_NAME).accept().getOutputStream().write(MAGIC_MESSAGE.getBytes());
            } catch (IOException e) {
                Log.e(TAG, e.getMessage());
            }
        }
    }.start();
}
#end_block

#method_before
@Test
public void testRunasCanConnectToAppsSocket() throws Exception {
    // Start the app activity and wait for it to complete.
    // The app will open a domain socket.
    getDevice().executeShellCommand(START_TEST_APP_COMMAND);
    // to open the socket.
    try {
        Thread.sleep(300);
    } catch (InterruptedException e) {
    // ignored
    }
    // Start a run-as process that attempts to connect to the socket opened by the app.
    getDevice().executeShellCommand(COPY_CONNECTOR_COMMAND);
    String results = getDevice().executeShellCommand(RUN_CONNECTOR_COMMAND);
    assertEquals(EXPECTED_CONNECTOR_OUTPUT, results);
}
#method_after
public void testRunasCanConnectToAppsSocket() throws Exception {
    // Start the app activity and wait for it to complete.
    // The app will open a domain socket.
    getDevice().executeShellCommand(START_TEST_APP_COMMAND);
    // to open the socket.
    try {
        Thread.sleep(300);
    } catch (InterruptedException e) {
    // ignored
    }
    // Start a run-as process that attempts to connect to the socket opened by the
    // app.
    getDevice().executeShellCommand(COPY_CONNECTOR_COMMAND);
    String results = getDevice().executeShellCommand(RUN_CONNECTOR_COMMAND);
    assertEquals(EXPECTED_CONNECTOR_OUTPUT, results);
}
#end_block

#method_before
@SuppressWarnings("WeakerAccess")
@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
public // used in generated code
void assertNotMainThread() {
    if (mAllowMainThreadQueries) {
        return;
    }
    if (isMainThread()) {
        throw new IllegalStateException("Cannot access database on the main thread since" + " it may potentially lock the UI for a long period of time.");
    }
}
#method_after
@SuppressWarnings("WeakerAccess")
@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)
public // used in generated code
void assertNotMainThread() {
    if (mAllowMainThreadQueries) {
        return;
    }
    if (isMainThread()) {
        throw new IllegalStateException("Cannot access database on the main thread since" + " it may potentially lock the UI for a long period of time.");
    }
}
#end_block

#method_before
@Deprecated
public void beginTransaction() {
    assertNotMainThread();
    SupportSQLiteDatabase database = mOpenHelper.getWritableDatabase();
    mInvalidationTracker.syncTriggers(database);
    database.beginTransaction();
}
#method_after
public void beginTransaction() {
    assertNotMainThread();
    SupportSQLiteDatabase database = mOpenHelper.getWritableDatabase();
    mInvalidationTracker.syncTriggers(database);
    database.beginTransaction();
}
#end_block

#method_before
@Deprecated
public void endTransaction() {
    mOpenHelper.getWritableDatabase().endTransaction();
    if (!inTransaction()) {
        // enqueue refresh only if we are NOT in a transaction. Otherwise, wait for the last
        // endTransaction call to do it.
        mInvalidationTracker.refreshVersionsAsync();
    }
}
#method_after
public void endTransaction() {
    mOpenHelper.getWritableDatabase().endTransaction();
    if (!inTransaction()) {
        // enqueue refresh only if we are NOT in a transaction. Otherwise, wait for the last
        // endTransaction call to do it.
        mInvalidationTracker.refreshVersionsAsync();
    }
}
#end_block

#method_before
@Deprecated
public void setTransactionSuccessful() {
    mOpenHelper.getWritableDatabase().setTransactionSuccessful();
}
#method_after
public void setTransactionSuccessful() {
    mOpenHelper.getWritableDatabase().setTransactionSuccessful();
}
#end_block

#method_before
@SuppressWarnings("deprecation")
public void runInTransaction(@NonNull Runnable body) {
    beginTransaction();
    try {
        body.run();
        setTransactionSuccessful();
    } finally {
        endTransaction();
    }
}
#method_after
public void runInTransaction(@NonNull Runnable body) {
    beginTransaction();
    try {
        body.run();
        setTransactionSuccessful();
    } finally {
        endTransaction();
    }
}
#end_block

#method_before
@SuppressWarnings("deprecation")
public <V> V runInTransaction(@NonNull Callable<V> body) {
    beginTransaction();
    try {
        V result = body.call();
        setTransactionSuccessful();
        return result;
    } catch (RuntimeException e) {
        throw e;
    } catch (Exception e) {
        throw new RuntimeException("Exception in transaction", e);
    } finally {
        endTransaction();
    }
}
#method_after
public <V> V runInTransaction(@NonNull Callable<V> body) {
    beginTransaction();
    try {
        V result = body.call();
        setTransactionSuccessful();
        return result;
    } catch (RuntimeException e) {
        throw e;
    } catch (Exception e) {
        throw new RuntimeException("Exception in transaction", e);
    } finally {
        endTransaction();
    }
}
#end_block

#method_before
@NonNull
@SuppressLint("RestrictedApi")
public T build() {
    // noinspection ConstantConditions
    if (mContext == null) {
        throw new IllegalArgumentException("Cannot provide null context for the database.");
    }
    // noinspection ConstantConditions
    if (mDatabaseClass == null) {
        throw new IllegalArgumentException("Must provide an abstract class that" + " extends RoomDatabase");
    }
    if (mQueryExecutor == null) {
        mQueryExecutor = ArchTaskExecutor.getIOThreadExecutor();
    }
    if (mMigrationStartAndEndVersions != null && mMigrationsNotRequiredFrom != null) {
        for (Integer version : mMigrationStartAndEndVersions) {
            if (mMigrationsNotRequiredFrom.contains(version)) {
                throw new IllegalArgumentException("Inconsistency detected. A Migration was supplied to " + "addMigration(Migration... migrations) that has a start " + "or end version equal to a start version supplied to " + "fallbackToDestructiveMigrationFrom(int... " + "startVersions). Start version: " + version);
            }
        }
    }
    if (mFactory == null) {
        mFactory = new FrameworkSQLiteOpenHelperFactory();
    }
    DatabaseConfiguration configuration = new DatabaseConfiguration(mContext, mName, mFactory, mMigrationContainer, mCallbacks, mAllowMainThreadQueries, mJournalMode.resolve(mContext), mQueryExecutor, mMultiInstanceInvalidation, mRequireMigration, mAllowDestructiveMigrationOnDowngrade, mMigrationsNotRequiredFrom);
    T db = Room.getGeneratedImplementation(mDatabaseClass, DB_IMPL_SUFFIX);
    db.init(configuration);
    return db;
}
#method_after
@NonNull
public T build() {
    // noinspection ConstantConditions
    if (mContext == null) {
        throw new IllegalArgumentException("Cannot provide null context for the database.");
    }
    // noinspection ConstantConditions
    if (mDatabaseClass == null) {
        throw new IllegalArgumentException("Must provide an abstract class that" + " extends RoomDatabase");
    }
    if (mQueryExecutor == null) {
        mQueryExecutor = ArchTaskExecutor.getIOThreadExecutor();
    }
    if (mMigrationStartAndEndVersions != null && mMigrationsNotRequiredFrom != null) {
        for (Integer version : mMigrationStartAndEndVersions) {
            if (mMigrationsNotRequiredFrom.contains(version)) {
                throw new IllegalArgumentException("Inconsistency detected. A Migration was supplied to " + "addMigration(Migration... migrations) that has a start " + "or end version equal to a start version supplied to " + "fallbackToDestructiveMigrationFrom(int... " + "startVersions). Start version: " + version);
            }
        }
    }
    if (mFactory == null) {
        mFactory = new FrameworkSQLiteOpenHelperFactory();
    }
    DatabaseConfiguration configuration = new DatabaseConfiguration(mContext, mName, mFactory, mMigrationContainer, mCallbacks, mAllowMainThreadQueries, mJournalMode.resolve(mContext), mQueryExecutor, mMultiInstanceInvalidation, mRequireMigration, mAllowDestructiveMigrationOnDowngrade, mMigrationsNotRequiredFrom);
    T db = Room.getGeneratedImplementation(mDatabaseClass, DB_IMPL_SUFFIX);
    db.init(configuration);
    return db;
}
#end_block

#method_before
@Test
public void notClearCustomViewDelegate() throws Throwable {
    final RecyclerView recyclerView = new RecyclerView(getActivity()) {

        @Override
        boolean isAccessibilityEnabled() {
            return true;
        }
    };
    final int[] layoutStart = new int[] { 0 };
    final int layoutCount = 5;
    final TestLayoutManager layoutManager = new TestLayoutManager() {

        @Override
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            detachAndScrapAttachedViews(recycler);
            removeAndRecycleScrapInt(recycler);
            layoutRange(recycler, layoutStart[0], layoutStart[0] + layoutCount);
            if (layoutLatch != null) {
                layoutLatch.countDown();
            }
        }
    };
    final AccessibilityDelegateCompat delegateCompat = new AccessibilityDelegateCompat() {

        @Override
        public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCompat info) {
            super.onInitializeAccessibilityNodeInfo(host, info);
            info.setChecked(true);
        }
    };
    final TestAdapter adapter = new TestAdapter(100) {

        @Override
        public TestViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            TestViewHolder vh = super.onCreateViewHolder(parent, viewType);
            ViewCompat.setAccessibilityDelegate(vh.itemView, delegateCompat);
            return vh;
        }
    };
    layoutManager.expectLayouts(1);
    recyclerView.getRecycledViewPool().setMaxRecycledViews(0, 100);
    // no cache, directly goes to pool
    recyclerView.setItemViewCacheSize(0);
    recyclerView.setLayoutManager(layoutManager);
    setRecyclerView(recyclerView);
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            recyclerView.setAdapter(adapter);
        }
    });
    layoutManager.waitForLayout(1);
    assertEquals(layoutCount, recyclerView.getChildCount());
    final ArrayList<View> children = new ArrayList();
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            for (int i = 0; i < recyclerView.getChildCount(); i++) {
                View view = recyclerView.getChildAt(i);
                assertEquals(layoutStart[0] + i, recyclerView.getChildAdapterPosition(view));
                AccessibilityNodeInfo info = recyclerView.getChildAt(i).createAccessibilityNodeInfo();
                assertTrue("custom delegate sets isChecked", info.isChecked());
                assertTrue(delegateCompat.equals(ViewCompat.getAccessibilityDelegate(view)));
                children.add(view);
            }
        }
    });
    // invalidate and start layout at 50, all existing views will goes to recycler and
    // being reused.
    layoutStart[0] = 50;
    layoutManager.expectLayouts(1);
    adapter.dispatchDataSetChanged();
    layoutManager.waitForLayout(1);
    assertEquals(layoutCount, recyclerView.getChildCount());
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            for (int i = 0; i < recyclerView.getChildCount(); i++) {
                View view = recyclerView.getChildAt(i);
                assertEquals(layoutStart[0] + i, recyclerView.getChildAdapterPosition(view));
                assertTrue(children.contains(view));
                AccessibilityNodeInfo info = view.createAccessibilityNodeInfo();
                assertTrue("custom delegate sets isChecked", info.isChecked());
                assertTrue(delegateCompat.equals(ViewCompat.getAccessibilityDelegate(view)));
            }
        }
    });
}
#method_after
@Test
public void notClearCustomViewDelegate() throws Throwable {
    final RecyclerView recyclerView = new RecyclerView(getActivity()) {

        @Override
        boolean isAccessibilityEnabled() {
            return true;
        }
    };
    final int[] layoutStart = new int[] { 0 };
    final int layoutCount = 5;
    final TestLayoutManager layoutManager = new TestLayoutManager() {

        @Override
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            detachAndScrapAttachedViews(recycler);
            removeAndRecycleScrapInt(recycler);
            layoutRange(recycler, layoutStart[0], layoutStart[0] + layoutCount);
            if (layoutLatch != null) {
                layoutLatch.countDown();
            }
        }
    };
    final AccessibilityDelegateCompat delegateCompat = new AccessibilityDelegateCompat() {

        @Override
        public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfoCompat info) {
            super.onInitializeAccessibilityNodeInfo(host, info);
            info.setChecked(true);
        }
    };
    final TestAdapter adapter = new TestAdapter(100) {

        @Override
        public TestViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            TestViewHolder vh = super.onCreateViewHolder(parent, viewType);
            ViewCompat.setAccessibilityDelegate(vh.itemView, delegateCompat);
            return vh;
        }
    };
    layoutManager.expectLayouts(1);
    recyclerView.getRecycledViewPool().setMaxRecycledViews(0, 100);
    // no cache, directly goes to pool
    recyclerView.setItemViewCacheSize(0);
    recyclerView.setLayoutManager(layoutManager);
    setRecyclerView(recyclerView);
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            recyclerView.setAdapter(adapter);
        }
    });
    layoutManager.waitForLayout(1);
    assertEquals(layoutCount, recyclerView.getChildCount());
    final ArrayList<View> children = new ArrayList();
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            for (int i = 0; i < recyclerView.getChildCount(); i++) {
                View view = recyclerView.getChildAt(i);
                assertEquals(layoutStart[0] + i, recyclerView.getChildAdapterPosition(view));
                AccessibilityNodeInfo info = recyclerView.getChildAt(i).createAccessibilityNodeInfo();
                assertTrue("custom delegate sets isChecked", info.isChecked());
                assertTrue(delegateCompat.equals(ViewCompat.getAccessibilityDelegate(view)));
                children.add(view);
            }
        }
    });
    // invalidate and start layout at 50, all existing views will go to recycler and be reused.
    layoutStart[0] = 50;
    layoutManager.expectLayouts(1);
    adapter.dispatchDataSetChanged();
    layoutManager.waitForLayout(1);
    assertEquals(layoutCount, recyclerView.getChildCount());
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            for (int i = 0; i < recyclerView.getChildCount(); i++) {
                View view = recyclerView.getChildAt(i);
                assertEquals(layoutStart[0] + i, recyclerView.getChildAdapterPosition(view));
                assertTrue(children.contains(view));
                AccessibilityNodeInfo info = view.createAccessibilityNodeInfo();
                assertTrue("custom delegate sets isChecked", info.isChecked());
                assertTrue(delegateCompat.equals(ViewCompat.getAccessibilityDelegate(view)));
            }
        }
    });
}
#end_block

#method_before
@Override
protected void addDnsEvents(@NonNull final DataStallDetectionStats.Builder stats) {
    generateTimeoutDnsEvent(stats, 5);
}
#method_after
@Override
protected void addDnsEvents(@NonNull final DataStallDetectionStats.Builder stats) {
    generateTimeoutDnsEvent(stats, DEFAULT_DNS_TIMEOUT_THRESHOLD);
}
#end_block

#method_before
@Test
public void testIsDataStall_EvaluationDnsOnNotMeteredNetwork() {
    WrappedNetworkMonitor wrappedMonitor = makeNotMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    makeDnsTimeoutEvent(wrappedMonitor, 5);
    assertTrue(wrappedMonitor.isDataStall());
}
#method_after
@Test
public void testIsDataStall_EvaluationDnsOnNotMeteredNetwork() {
    WrappedNetworkMonitor wrappedMonitor = makeNotMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    makeDnsTimeoutEvent(wrappedMonitor, DEFAULT_DNS_TIMEOUT_THRESHOLD);
    assertTrue(wrappedMonitor.isDataStall());
}
#end_block

#method_before
@Test
public void testIsDataStall_EvaluationDnsOnMeteredNetwork() {
    WrappedNetworkMonitor wrappedMonitor = makeMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    assertFalse(wrappedMonitor.isDataStall());
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 1000);
    makeDnsTimeoutEvent(wrappedMonitor, 5);
    assertTrue(wrappedMonitor.isDataStall());
}
#method_after
@Test
public void testIsDataStall_EvaluationDnsOnMeteredNetwork() {
    WrappedNetworkMonitor wrappedMonitor = makeMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    assertFalse(wrappedMonitor.isDataStall());
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 1000);
    makeDnsTimeoutEvent(wrappedMonitor, DEFAULT_DNS_TIMEOUT_THRESHOLD);
    assertTrue(wrappedMonitor.isDataStall());
}
#end_block

#method_before
@Test
public void testIsDataStall_EvaluationDnsWithDnsTimeThreshold() {
    // Test dns events happened in valid dns time threshold.
    WrappedNetworkMonitor wrappedMonitor = makeMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    makeDnsTimeoutEvent(wrappedMonitor, 5);
    assertFalse(wrappedMonitor.isDataStall());
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 1000);
    assertTrue(wrappedMonitor.isDataStall());
    // Test dns events happened before valid dns time threshold.
    setValidDataStallDnsTimeThreshold(0);
    wrappedMonitor = makeMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    makeDnsTimeoutEvent(wrappedMonitor, 5);
    assertFalse(wrappedMonitor.isDataStall());
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 1000);
    assertFalse(wrappedMonitor.isDataStall());
}
#method_after
@Test
public void testIsDataStall_EvaluationDnsWithDnsTimeThreshold() {
    // Test dns events happened in valid dns time threshold.
    WrappedNetworkMonitor wrappedMonitor = makeMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    makeDnsTimeoutEvent(wrappedMonitor, DEFAULT_DNS_TIMEOUT_THRESHOLD);
    assertFalse(wrappedMonitor.isDataStall());
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 1000);
    assertTrue(wrappedMonitor.isDataStall());
    // Test dns events happened before valid dns time threshold.
    setValidDataStallDnsTimeThreshold(0);
    wrappedMonitor = makeMeteredWrappedNetworkMonitor();
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 100);
    makeDnsTimeoutEvent(wrappedMonitor, DEFAULT_DNS_TIMEOUT_THRESHOLD);
    assertFalse(wrappedMonitor.isDataStall());
    wrappedMonitor.setLastProbeTime(SystemClock.elapsedRealtime() - 1000);
    assertFalse(wrappedMonitor.isDataStall());
}
#end_block

#method_before
@Test
public void testCollectDataStallMetrics() {
    WrappedNetworkMonitor wrappedMonitor = makeNotMeteredWrappedNetworkMonitor();
    when(mTelephony.getDataNetworkType()).thenReturn(TelephonyManager.NETWORK_TYPE_LTE);
    when(mTelephony.getNetworkOperator()).thenReturn(TEST_MCCMNC);
    when(mTelephony.getSimOperator()).thenReturn(TEST_MCCMNC);
    DataStallDetectionStats.Builder stats = new DataStallDetectionStats.Builder();
    stats.setEvaluationType(DATA_STALL_EVALUATION_TYPE_DNS);
    stats.setNetworkType(NetworkCapabilities.TRANSPORT_CELLULAR);
    stats.setCellData(TelephonyManager.NETWORK_TYPE_LTE, /* radioType */
    true, /* roaming */
    TEST_MCCMNC, /* networkMccmnc */
    TEST_MCCMNC, /* simMccmnc */
    CellSignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN);
    generateTimeoutDnsEvent(stats, 5);
    assertEquals(wrappedMonitor.buildDataStallDetectionStats(NetworkCapabilities.TRANSPORT_CELLULAR), stats.build());
    when(mWifi.getConnectionInfo()).thenReturn(mWifiInfo);
    stats = new DataStallDetectionStats.Builder();
    stats.setEvaluationType(DATA_STALL_EVALUATION_TYPE_DNS);
    stats.setNetworkType(NetworkCapabilities.TRANSPORT_WIFI);
    stats.setWiFiData(mWifiInfo);
    generateTimeoutDnsEvent(stats, 5);
    assertEquals(wrappedMonitor.buildDataStallDetectionStats(NetworkCapabilities.TRANSPORT_WIFI), stats.build());
}
#method_after
@Test
public void testCollectDataStallMetrics() {
    WrappedNetworkMonitor wrappedMonitor = makeNotMeteredWrappedNetworkMonitor();
    when(mTelephony.getDataNetworkType()).thenReturn(TelephonyManager.NETWORK_TYPE_LTE);
    when(mTelephony.getNetworkOperator()).thenReturn(TEST_MCCMNC);
    when(mTelephony.getSimOperator()).thenReturn(TEST_MCCMNC);
    DataStallDetectionStats.Builder stats = new DataStallDetectionStats.Builder().setEvaluationType(DATA_STALL_EVALUATION_TYPE_DNS).setNetworkType(NetworkCapabilities.TRANSPORT_CELLULAR).setCellData(TelephonyManager.NETWORK_TYPE_LTE, /* radioType */
    true, /* roaming */
    TEST_MCCMNC, /* networkMccmnc */
    TEST_MCCMNC, /* simMccmnc */
    CellSignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN);
    generateTimeoutDnsEvent(stats, DEFAULT_DNS_TIMEOUT_THRESHOLD);
    assertEquals(wrappedMonitor.buildDataStallDetectionStats(NetworkCapabilities.TRANSPORT_CELLULAR), stats.build());
    when(mWifi.getConnectionInfo()).thenReturn(mWifiInfo);
    stats = new DataStallDetectionStats.Builder().setEvaluationType(DATA_STALL_EVALUATION_TYPE_DNS).setNetworkType(NetworkCapabilities.TRANSPORT_WIFI).setWiFiData(mWifiInfo);
    generateTimeoutDnsEvent(stats, DEFAULT_DNS_TIMEOUT_THRESHOLD);
    assertEquals(wrappedMonitor.buildDataStallDetectionStats(NetworkCapabilities.TRANSPORT_WIFI), stats.build());
}
#end_block

#method_before
@SuppressWarnings("deprecation")
public void navigate(@IdRes int resId, @Nullable Bundle args, @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
    NavDestination currentNode = mBackStack.isEmpty() ? mGraph : mBackStack.getLast().getDestination();
    if (currentNode == null) {
        throw new IllegalStateException("no current navigation node");
    }
    @IdRes
    int destId = resId;
    final NavAction navAction = currentNode.getAction(resId);
    Bundle combinedArgs = null;
    if (navAction != null) {
        if (navOptions == null) {
            navOptions = navAction.getNavOptions();
        }
        destId = navAction.getDestinationId();
        Bundle navActionArgs = navAction.getDefaultArguments();
        if (navActionArgs != null) {
            combinedArgs = new Bundle();
            combinedArgs.putAll(navActionArgs);
        }
    }
    if (args != null) {
        if (combinedArgs == null) {
            combinedArgs = new Bundle();
        }
        combinedArgs.putAll(args);
    }
    if (destId == 0 && navOptions != null && navOptions.getPopUpTo() != -1) {
        popBackStack(navOptions.getPopUpTo(), navOptions.isPopUpToInclusive());
        return;
    }
    if (destId == 0) {
        throw new IllegalArgumentException("Destination id == 0 can only be used" + " in conjunction with navOptions.popUpTo != 0");
    }
    NavDestination node = findDestination(destId);
    if (node == null) {
        final String dest = NavDestination.getDisplayName(mContext, destId);
        throw new IllegalArgumentException("navigation destination " + dest + (navAction != null ? " referenced from action " + NavDestination.getDisplayName(mContext, resId) : "") + " is unknown to this NavController");
    }
    navigate(node, combinedArgs, navOptions, navigatorExtras);
}
#method_after
@SuppressWarnings("deprecation")
public void navigate(@IdRes int resId, @Nullable Bundle args, @Nullable NavOptions navOptions, @Nullable Navigator.Extras navigatorExtras) {
    NavDestination currentNode = mBackStack.isEmpty() ? mGraph : mBackStack.getLast().getDestination();
    if (currentNode == null) {
        throw new IllegalStateException("no current navigation node");
    }
    @IdRes
    int destId = resId;
    final NavAction navAction = currentNode.getAction(resId);
    Bundle combinedArgs = null;
    if (navAction != null) {
        if (navOptions == null) {
            navOptions = navAction.getNavOptions();
        }
        destId = navAction.getDestinationId();
        Bundle navActionArgs = navAction.getDefaultArguments();
        if (navActionArgs != null) {
            combinedArgs = new Bundle();
            combinedArgs.putAll(navActionArgs);
        }
    }
    if (args != null) {
        if (combinedArgs == null) {
            combinedArgs = new Bundle();
        }
        combinedArgs.putAll(args);
    }
    if (destId == 0 && navOptions != null && navOptions.getPopUpTo() != -1) {
        popBackStack(navOptions.getPopUpTo(), navOptions.isPopUpToInclusive());
        return;
    }
    if (destId == 0) {
        throw new IllegalArgumentException("Destination id == 0 can only be used" + " in conjunction with a valid navOptions.popUpTo");
    }
    NavDestination node = findDestination(destId);
    if (node == null) {
        final String dest = NavDestination.getDisplayName(mContext, destId);
        throw new IllegalArgumentException("navigation destination " + dest + (navAction != null ? " referenced from action " + NavDestination.getDisplayName(mContext, resId) : "") + " is unknown to this NavController");
    }
    navigate(node, combinedArgs, navOptions, navigatorExtras);
}
#end_block

#method_before
private int processMotionEvent(QueuedInputEvent q) {
    final MotionEvent event = (MotionEvent) q.mEvent;
    if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {
        return processPointerEvent(q);
    }
    // If the motion event is from an absolute position device, exit touch mode
    final int action = event.getAction();
    if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_SCROLL) {
        if (event.isFromSource(InputDevice.SOURCE_CLASS_POSITION)) {
            ensureTouchMode(false);
        }
    }
    return FORWARD;
}
#method_after
private int processMotionEvent(QueuedInputEvent q) {
    final MotionEvent event = (MotionEvent) q.mEvent;
    if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {
        return processPointerEvent(q);
    }
    // If the motion event is from an absolute position device, exit touch mode
    final int action = event.getActionMasked();
    if (action == MotionEvent.ACTION_DOWN || action == MotionEvent.ACTION_SCROLL) {
        if (event.isFromSource(InputDevice.SOURCE_CLASS_POSITION)) {
            ensureTouchMode(false);
        }
    }
    return FORWARD;
}
#end_block

#method_before
// ***** Called from GsmCdmaCall
public void hangup(GsmCdmaCall call) throws CallStateException {
    if (call.getConnections().size() == 0) {
        throw new CallStateException("no connections in call");
    }
    if (call == mRingingCall) {
        if (Phone.DEBUG_PHONE)
            log("(ringing) hangup waiting or background");
        logHangupEvent(call);
        mCi.hangupWaitingOrBackground(obtainCompleteMessage());
    } else if (call == mForegroundCall) {
        if (call.isDialingOrAlerting()) {
            if (Phone.DEBUG_PHONE) {
                log("(foregnd) hangup dialing or alerting...");
            }
            hangup((GsmCdmaConnection) (call.getConnections().get(0)));
        } else if (isPhoneTypeGsm() && mRingingCall.isRinging()) {
            // Do not auto-answer ringing on CHUP, instead just end active calls
            log("hangup all conns in active/background call, without affecting ringing call");
            hangupAllConnections(call);
        } else if (call.mHoldingRequestState.isStarted()) {
            log("hangup waiting or background call");
            logHangupEvent(call);
            hangupWaitingOrBackground();
        } else {
            logHangupEvent(call);
            hangupForegroundResumeBackground();
        }
    } else if (call == mBackgroundCall) {
        if (mRingingCall.isRinging()) {
            if (Phone.DEBUG_PHONE) {
                log("hangup all conns in background call");
            }
            hangupAllConnections(call);
        } else {
            hangupWaitingOrBackground();
        }
    } else {
        throw new RuntimeException("GsmCdmaCall " + call + "does not belong to GsmCdmaCallTracker " + this);
    }
    call.onHangupLocal();
    mPhone.notifyPreciseCallStateChanged();
}
#method_after
// ***** Called from GsmCdmaCall
public void hangup(GsmCdmaCall call) throws CallStateException {
    if (call.getConnections().size() == 0) {
        throw new CallStateException("no connections in call");
    }
    if (call == mRingingCall) {
        if (Phone.DEBUG_PHONE)
            log("(ringing) hangup waiting or background");
        logHangupEvent(call);
        mCi.hangupWaitingOrBackground(obtainCompleteMessage());
    } else if (call == mForegroundCall) {
        if (call.isDialingOrAlerting()) {
            if (Phone.DEBUG_PHONE) {
                log("(foregnd) hangup dialing or alerting...");
            }
            hangup((GsmCdmaConnection) (call.getConnections().get(0)));
        } else if (isPhoneTypeGsm() && mRingingCall.isRinging()) {
            // Do not auto-answer ringing on CHUP, instead just end active calls
            log("hangup all conns in active/background call, without affecting ringing call");
            hangupAllConnections(call);
        } else if (call.mHoldingRequestState.isStarted()) {
            // Even if the progress of holding is not completed, lower layer expects to hang up
            // as background call because of being going to holding.
            log("hangup waiting or background call");
            logHangupEvent(call);
            hangupWaitingOrBackground();
        } else {
            logHangupEvent(call);
            hangupForegroundResumeBackground();
        }
    } else if (call == mBackgroundCall) {
        if (mRingingCall.isRinging()) {
            if (Phone.DEBUG_PHONE) {
                log("hangup all conns in background call");
            }
            hangupAllConnections(call);
        } else {
            hangupWaitingOrBackground();
        }
    } else {
        throw new RuntimeException("GsmCdmaCall " + call + "does not belong to GsmCdmaCallTracker " + this);
    }
    call.onHangupLocal();
    mPhone.notifyPreciseCallStateChanged();
}
#end_block

#method_before
public void stop() {
    closeSocket();
    if (mMulticastTransmitter != null) {
        // Wake up mMulticastTransmitter thread to interrupt a potential 1 day sleep before
        // the thread's termination.
        mMulticastTransmitter.hup();
        mMulticastTransmitter = null;
    }
    mUnicastResponder = null;
}
#method_after
public void stop() {
    closeSocket();
    // Wake up mMulticastTransmitter thread to interrupt a potential 1 day sleep before
    // the thread's termination.
    maybeNotifyMulticastTransmitter();
    mMulticastTransmitter = null;
    mUnicastResponder = null;
}
#end_block

#method_before
@NonNull
@Override
public FragmentTransaction remove(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot remove Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager. ");
    }
    addOp(new Op(OP_REMOVE, fragment));
    return this;
}
#method_after
@NonNull
@Override
public FragmentTransaction remove(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot remove Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager.");
    }
    addOp(new Op(OP_REMOVE, fragment));
    return this;
}
#end_block

#method_before
@NonNull
@Override
public FragmentTransaction hide(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot hide Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager. ");
    }
    addOp(new Op(OP_HIDE, fragment));
    return this;
}
#method_after
@NonNull
@Override
public FragmentTransaction hide(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot hide Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager.");
    }
    addOp(new Op(OP_HIDE, fragment));
    return this;
}
#end_block

#method_before
@NonNull
@Override
public FragmentTransaction show(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot show Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager. ");
    }
    addOp(new Op(OP_SHOW, fragment));
    return this;
}
#method_after
@NonNull
@Override
public FragmentTransaction show(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot show Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager.");
    }
    addOp(new Op(OP_SHOW, fragment));
    return this;
}
#end_block

#method_before
@NonNull
@Override
public FragmentTransaction detach(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot detach Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager. ");
    }
    addOp(new Op(OP_DETACH, fragment));
    return this;
}
#method_after
@NonNull
@Override
public FragmentTransaction detach(@NonNull Fragment fragment) {
    if (fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
        throw new IllegalStateException("Cannot detach Fragment attached to " + "a different FragmentManager. Fragment " + fragment.toString() + " is already" + " attached to a FragmentManager.");
    }
    addOp(new Op(OP_DETACH, fragment));
    return this;
}
#end_block

#method_before
@Parameterized.Parameters(name = "{index}: item={0}")
public static Collection<Object[]> data() {
    return Arrays.asList(new Object[][] { { "MediaItem", sMediaItemFactory, MediaItem.Builder.class }, { "UriMediaItem", sUriMediaItemFactory, UriMediaItem.Builder.class }, { "CallbackMediaItem", sCallbackMediaItemFactory, CallbackMediaItem.Builder.class }, { "FileMediaItem", sFileMediaItemFactory, FileMediaItem.Builder.class } });
}
#method_after
@Parameterized.Parameters
public static Collection<Object[]> data() {
    return Arrays.asList(new Object[][] { { sMediaItemFactory, MediaItem.Builder.class }, { sUriMediaItemFactory, UriMediaItem.Builder.class }, { sCallbackMediaItemFactory, CallbackMediaItem.Builder.class }, { sFileMediaItemFactory, FileMediaItem.Builder.class } });
}
#end_block

#method_before
@UnsupportedAppUsage
public static void start() {
    ReferenceQueueDaemon.INSTANCE.start();
    FinalizerDaemon.INSTANCE.start();
    FinalizerWatchdogDaemon.INSTANCE.start();
    HeapTaskDaemon.INSTANCE.start();
}
#method_after
@UnsupportedAppUsage
public static void start() {
    for (Daemon daemon : DAEMONS) {
        daemon.start();
    }
}
#end_block

#method_before
public static void startPostZygoteFork() {
    postZygoteFork = true;
    ReferenceQueueDaemon.INSTANCE.startPostZygoteFork();
    FinalizerDaemon.INSTANCE.startPostZygoteFork();
    FinalizerWatchdogDaemon.INSTANCE.startPostZygoteFork();
    HeapTaskDaemon.INSTANCE.startPostZygoteFork();
}
#method_after
public static void startPostZygoteFork() {
    postZygoteFork = true;
    for (Daemon daemon : DAEMONS) {
        daemon.startPostZygoteFork();
    }
}
#end_block

#method_before
@UnsupportedAppUsage
public static void stop() {
    HeapTaskDaemon.INSTANCE.stop();
    ReferenceQueueDaemon.INSTANCE.stop();
    FinalizerDaemon.INSTANCE.stop();
    FinalizerWatchdogDaemon.INSTANCE.stop();
}
#method_after
@UnsupportedAppUsage
public static void stop() {
    for (Daemon daemon : DAEMONS) {
        daemon.stop();
    }
}
#end_block

#method_before
@UnsupportedAppUsage
public static void waitForDaemonStart() throws Exception {
    if (postZygoteFork) {
        POST_ZYGOTE_START_LATCH.await();
    } else {
        PRE_ZYGOTE_START_LATCH.await();
    }
}
#method_after
private static void waitForDaemonStart() throws Exception {
    if (postZygoteFork) {
        POST_ZYGOTE_START_LATCH.await();
    } else {
        PRE_ZYGOTE_START_LATCH.await();
    }
}
#end_block

#method_before
/**
 * Marks this thread as either a system-daemon thread or a user thread.
 * System daemon threads get special handling when starting up in some cases.
 *
 * <p> This method must be invoked before the thread is started.
 *
 * <p> This method must only be invoked on threads already marked as Daemons.
 *
 * <p> Package-private since only {@link java.lang.Daemons} needs to call this.
 *
 * @param  on
 *         if {@code true}, marks this thread as a system daemon thread
 *
 * @throws  IllegalThreadStateException
 *          if this thread is {@linkplain #isAlive alive} or not a
 *          {@linkplain #isDaemon daemon}
 *
 * @throws  SecurityException
 *          if {@link #checkAccess} determines that the current
 *          thread cannot modify this thread
 *
 * @hide For use by Daemon.java only.
 */
final void setSystemDaemon(boolean on) {
    checkAccess();
    if (isAlive() || !isDaemon()) {
        throw new IllegalThreadStateException();
    }
    systemDaemon = on;
}
#method_after
// BEGIN Android-added: The concept of "system-daemon" threads. See java.lang.Daemons.
final void setSystemDaemon(boolean on) {
    checkAccess();
    if (isAlive() || !isDaemon()) {
        throw new IllegalThreadStateException();
    }
    systemDaemon = on;
}
#end_block

#method_before
static void processQueue(ReferenceQueue<Class<?>> queue, ConcurrentMap<? extends WeakReference<Class<?>>, ?> map) {
    Reference<? extends Class<?>> ref;
    while ((ref = queue.poll()) != null) {
        map.remove(ref);
    }
}
#method_after
// END Android-added: The concept of "system-daemon" threads. See java.lang.Daemons.
static void processQueue(ReferenceQueue<Class<?>> queue, ConcurrentMap<? extends WeakReference<Class<?>>, ?> map) {
    Reference<? extends Class<?>> ref;
    while ((ref = queue.poll()) != null) {
        map.remove(ref);
    }
}
#end_block

#method_before
// TODO add @link annotation in front of MediaRouteCastDialog.
@Nullable
public String getGroupableSelectionTitle() {
    return null;
}
#method_after
@Nullable
public String getGroupableSelectionTitle() {
    return null;
}
#end_block

#method_before
// TODO add @link annotation in front of MediaRouteCastDialog.
@Nullable
public String getTransferableSectionTitle() {
    return null;
}
#method_after
@Nullable
public String getTransferableSectionTitle() {
    return null;
}
#end_block

#method_before
public void setOnFullScreenListener(@Nullable OnFullScreenListener l) {
    if (l == null) {
        mOnFullScreenListener = null;
        mFullScreenButton.setVisibility(View.GONE);
    } else {
        mOnFullScreenListener = l;
        mFullScreenButton.setVisibility(View.VISIBLE);
    }
}
#method_after
public void setOnFullScreenListener(@Nullable OnFullScreenListener listener) {
    if (listener == null) {
        mOnFullScreenListener = null;
        mFullScreenButton.setVisibility(View.GONE);
    } else {
        mOnFullScreenListener = listener;
        mFullScreenButton.setVisibility(View.VISIBLE);
    }
}
#end_block

#method_before
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    final int width = right - left - getPaddingLeft() - getPaddingRight();
    final int height = bottom - top - getPaddingTop() - getPaddingBottom();
    final int fullWidth = mBottomBarLeft.getMeasuredWidth() + mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int fullHeight = mTitleBar.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    final int embeddedWidth = mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int embeddedHeight = mTitleBar.getMeasuredHeight() + mEmbeddedTransportControls.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    int sizeType;
    if (mIsAdvertisement || (fullWidth <= width && fullHeight <= height)) {
        sizeType = SIZE_TYPE_FULL;
    } else if (embeddedWidth <= width && embeddedHeight <= height) {
        sizeType = SIZE_TYPE_EMBEDDED;
    } else {
        sizeType = SIZE_TYPE_MINIMAL;
    }
    if (mSizeType != sizeType) {
        mSizeType = sizeType;
        updateLayoutForSizeChange(sizeType);
    }
    mTitleBar.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mEmbeddedTransportControls.setVisibility(sizeType == SIZE_TYPE_EMBEDDED ? View.VISIBLE : View.INVISIBLE);
    mMinimalTransportControls.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarBackground.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarLeft.setVisibility(sizeType == SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    mTimeView.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBasicControls.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mMinimalFullScreenButton.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    final int childLeft = getPaddingLeft();
    final int childRight = childLeft + width;
    final int childTop = getPaddingTop();
    final int childBottom = childTop + height;
    layoutChild(mTitleBar, childLeft, childTop);
    layoutChild(mCenterView, childLeft, childTop);
    layoutChild(mBottomBarBackground, childLeft, childBottom - mBottomBarBackground.getMeasuredHeight());
    layoutChild(mBottomBarLeft, childLeft, childBottom - mBottomBarLeft.getMeasuredHeight());
    layoutChild(mTimeView, sizeType == SIZE_TYPE_FULL ? childRight - mBasicControls.getMeasuredWidth() - mTimeView.getMeasuredWidth() : childLeft, childBottom - mTimeView.getMeasuredHeight());
    layoutChild(mBasicControls, childRight - mBasicControls.getMeasuredWidth(), childBottom - mBasicControls.getMeasuredHeight());
    layoutChild(mExtraControls, childRight, childBottom - mExtraControls.getMeasuredHeight());
    layoutChild(mProgressBar, childLeft, sizeType == SIZE_TYPE_MINIMAL ? childBottom - mProgressBar.getMeasuredHeight() : childBottom - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    layoutChild(mMinimalFullScreenView, childLeft, childBottom - mMinimalFullScreenView.getMeasuredHeight());
}
#method_after
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    final int width = right - left - getPaddingLeft() - getPaddingRight();
    final int height = bottom - top - getPaddingTop() - getPaddingBottom();
    final int fullWidth = mBottomBarLeft.getMeasuredWidth() + mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int fullHeight = mTitleBar.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    final int embeddedWidth = mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int embeddedHeight = mTitleBar.getMeasuredHeight() + mEmbeddedTransportControls.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    int sizeType;
    if (mIsAdvertisement || (fullWidth <= width && fullHeight <= height)) {
        sizeType = SIZE_TYPE_FULL;
    } else if (embeddedWidth <= width && embeddedHeight <= height) {
        sizeType = SIZE_TYPE_EMBEDDED;
    } else {
        sizeType = SIZE_TYPE_MINIMAL;
    }
    if (mSizeType != sizeType) {
        mSizeType = sizeType;
        updateLayoutForSizeChange(sizeType);
    }
    mTitleBar.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mEmbeddedTransportControls.setVisibility(sizeType == SIZE_TYPE_EMBEDDED ? View.VISIBLE : View.INVISIBLE);
    mMinimalTransportControls.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarBackground.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarLeft.setVisibility(sizeType == SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    mTimeView.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBasicControls.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mMinimalFullScreenButton.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mCenterView.setVisibility(sizeType != SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    final int childLeft = getPaddingLeft();
    final int childRight = childLeft + width;
    final int childTop = getPaddingTop();
    final int childBottom = childTop + height;
    layoutChild(mTitleBar, childLeft, childTop);
    layoutChild(mCenterView, childLeft, childTop);
    layoutChild(mBottomBarBackground, childLeft, childBottom - mBottomBarBackground.getMeasuredHeight());
    layoutChild(mBottomBarLeft, childLeft, childBottom - mBottomBarLeft.getMeasuredHeight());
    layoutChild(mTimeView, sizeType == SIZE_TYPE_FULL ? childRight - mBasicControls.getMeasuredWidth() - mTimeView.getMeasuredWidth() : childLeft, childBottom - mTimeView.getMeasuredHeight());
    layoutChild(mBasicControls, childRight - mBasicControls.getMeasuredWidth(), childBottom - mBasicControls.getMeasuredHeight());
    layoutChild(mExtraControls, childRight, childBottom - mExtraControls.getMeasuredHeight());
    layoutChild(mProgressBar, childLeft, sizeType == SIZE_TYPE_MINIMAL ? childBottom - mProgressBar.getMeasuredHeight() : childBottom - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    layoutChild(mMinimalFullScreenView, childLeft, childBottom - mMinimalFullScreenView.getMeasuredHeight());
}
#end_block

#method_before
private void initControllerView() {
    // Relating to Title Bar View
    mTitleBar = findViewById(R.id.title_bar);
    mTitleView = findViewById(R.id.title_text);
    mAdExternalLink = findViewById(R.id.ad_external_link);
    mRouteButton = findViewById(R.id.cast);
    // Relating to Center View
    mCenterView = findViewById(R.id.center_view);
    mEmbeddedTransportControls = initTransportControls(R.id.embedded_transport_controls);
    mMinimalTransportControls = initTransportControls(R.id.minimal_transport_controls);
    // Relating to Minimal Size FullScreen View
    mMinimalFullScreenView = findViewById(R.id.minimal_fullscreen_view);
    mMinimalFullScreenButton = findViewById(R.id.minimal_fullscreen);
    mMinimalFullScreenButton.setOnClickListener(mFullScreenListener);
    // Relating to Progress Bar View
    mProgressBar = findViewById(R.id.progress_bar);
    mProgress = findViewById(R.id.progress);
    mProgress.setOnSeekBarChangeListener(mSeekListener);
    mProgress.setMax(MAX_PROGRESS);
    mCurrentSeekPosition = SEEK_POSITION_NOT_SET;
    mNextSeekPosition = SEEK_POSITION_NOT_SET;
    // Relating to Bottom Bar View
    mBottomBarBackground = findViewById(R.id.bottom_bar_background);
    // Relating to Bottom Bar Left View
    mBottomBarLeft = findViewById(R.id.bottom_bar_left);
    mFullTransportControls = initTransportControls(R.id.full_transport_controls);
    mTimeView = findViewById(R.id.time);
    mEndTime = findViewById(R.id.time_end);
    mCurrentTime = findViewById(R.id.time_current);
    mAdSkipView = findViewById(R.id.ad_skip_time);
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    // Relating to Bottom Bar Right View
    mBasicControls = findViewById(R.id.basic_controls);
    mExtraControls = findViewById(R.id.extra_controls);
    mCustomButtons = findViewById(R.id.custom_buttons);
    mSubtitleButton = findViewById(R.id.subtitle);
    mSubtitleButton.setOnClickListener(mSubtitleListener);
    mFullScreenButton = findViewById(R.id.fullscreen);
    mFullScreenButton.setOnClickListener(mFullScreenListener);
    ImageButton overflowShowButton = findViewById(R.id.overflow_show);
    overflowShowButton.setOnClickListener(mOverflowShowListener);
    ImageButton overflowHideButton = findViewById(R.id.overflow_hide);
    overflowHideButton.setOnClickListener(mOverflowHideListener);
    ImageButton settingsButton = findViewById(R.id.settings);
    settingsButton.setOnClickListener(mSettingsButtonListener);
    mAdRemainingView = findViewById(R.id.ad_remaining);
    // Relating to Settings List View
    initializeSettingsLists();
    mSettingsListView = (ListView) inflateLayout(getContext(), R.layout.settings_list);
    mSettingsAdapter = new SettingsAdapter(mSettingsMainTextsList, mSettingsSubTextsList, mSettingsIconIdsList);
    mSubSettingsAdapter = new SubSettingsAdapter(null, 0);
    mSettingsListView.setAdapter(mSettingsAdapter);
    mSettingsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    mSettingsListView.setOnItemClickListener(mSettingsItemClickListener);
    // TransportControlsMap
    mTransportControlsMap.append(SIZE_TYPE_EMBEDDED, mEmbeddedTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_FULL, mFullTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_MINIMAL, mMinimalTransportControls);
    mEmbeddedSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_embedded_settings_width);
    mFullSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_full_settings_width);
    mSettingsItemHeight = mResources.getDimensionPixelSize(R.dimen.mcv2_settings_height);
    mSettingsWindowMargin = (-1) * mResources.getDimensionPixelSize(R.dimen.mcv2_settings_offset);
    mSettingsWindow = new PopupWindow(mSettingsListView, mEmbeddedSettingsItemWidth, LayoutParams.WRAP_CONTENT, true);
    mSettingsWindow.setOnDismissListener(mSettingsDismissListener);
    float titleBarHeight = mResources.getDimension(R.dimen.mcv2_title_bar_height);
    float progressBarHeight = mResources.getDimension(R.dimen.mcv2_custom_progress_thumb_size);
    float bottomBarHeight = mResources.getDimension(R.dimen.mcv2_bottom_bar_height);
    View[] bottomBarGroup = { mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar };
    ValueAnimator fadeOutAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.INVISIBLE);
                mMinimalFullScreenView.setVisibility(View.INVISIBLE);
            }
        }
    });
    ValueAnimator fadeInAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    fadeInAnimator.setInterpolator(new LinearInterpolator());
    fadeInAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.VISIBLE);
                mMinimalFullScreenView.setVisibility(View.VISIBLE);
            }
        }
    });
    mHideMainBarsAnimator = new AnimatorSet();
    mHideMainBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight, bottomBarGroup));
    mHideMainBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ONLY_PROGRESS_VISIBLE;
        }
    });
    mHideProgressBarAnimator = AnimatorUtil.ofTranslationYTogether(bottomBarHeight, bottomBarHeight + progressBarHeight, bottomBarGroup);
    mHideProgressBarAnimator.setDuration(HIDE_TIME_MS);
    mHideProgressBarAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mHideAllBarsAnimator = new AnimatorSet();
    mHideAllBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight + progressBarHeight, bottomBarGroup));
    mHideAllBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mShowMainBarsAnimator = new AnimatorSet();
    mShowMainBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight, 0, bottomBarGroup));
    mShowMainBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mShowAllBarsAnimator = new AnimatorSet();
    mShowAllBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight + progressBarHeight, 0, bottomBarGroup));
    mShowAllBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mOverflowShowAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    mOverflowShowAnimator.setDuration(SHOW_TIME_MS);
    mOverflowShowAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowShowAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mExtraControls.setVisibility(View.VISIBLE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mBasicControls.setVisibility(View.INVISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.INVISIBLE : View.GONE);
        }
    });
    mOverflowHideAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    mOverflowHideAnimator.setDuration(SHOW_TIME_MS);
    mOverflowHideAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowHideAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mBasicControls.setVisibility(View.VISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.VISIBLE : View.GONE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mExtraControls.setVisibility(View.GONE);
        }
    });
}
#method_after
private void initControllerView() {
    // Relating to Title Bar View
    mTitleBar = findViewById(R.id.title_bar);
    mTitleView = findViewById(R.id.title_text);
    mAdExternalLink = findViewById(R.id.ad_external_link);
    mRouteButton = findViewById(R.id.cast);
    // Relating to Center View
    mCenterView = findViewById(R.id.center_view);
    mEmbeddedTransportControls = initTransportControls(R.id.embedded_transport_controls);
    mMinimalTransportControls = initTransportControls(R.id.minimal_transport_controls);
    // Relating to Minimal Size FullScreen View
    mMinimalFullScreenView = findViewById(R.id.minimal_fullscreen_view);
    mMinimalFullScreenButton = findViewById(R.id.minimal_fullscreen);
    mMinimalFullScreenButton.setOnClickListener(mFullScreenListener);
    // Relating to Progress Bar View
    mProgressBar = findViewById(R.id.progress_bar);
    mProgress = findViewById(R.id.progress);
    mProgress.setOnSeekBarChangeListener(mSeekListener);
    mProgress.setMax(MAX_PROGRESS);
    mCurrentSeekPosition = SEEK_POSITION_NOT_SET;
    mNextSeekPosition = SEEK_POSITION_NOT_SET;
    // Relating to Bottom Bar View
    mBottomBarBackground = findViewById(R.id.bottom_bar_background);
    // Relating to Bottom Bar Left View
    mBottomBarLeft = findViewById(R.id.bottom_bar_left);
    mFullTransportControls = initTransportControls(R.id.full_transport_controls);
    mTimeView = findViewById(R.id.time);
    mEndTime = findViewById(R.id.time_end);
    mCurrentTime = findViewById(R.id.time_current);
    mAdSkipView = findViewById(R.id.ad_skip_time);
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    // Relating to Bottom Bar Right View
    mBasicControls = findViewById(R.id.basic_controls);
    mExtraControls = findViewById(R.id.extra_controls);
    mCustomButtons = findViewById(R.id.custom_buttons);
    mSubtitleButton = findViewById(R.id.subtitle);
    mSubtitleButton.setOnClickListener(mSubtitleListener);
    mFullScreenButton = findViewById(R.id.fullscreen);
    mFullScreenButton.setOnClickListener(mFullScreenListener);
    ImageButton overflowShowButton = findViewById(R.id.overflow_show);
    overflowShowButton.setOnClickListener(mOverflowShowListener);
    ImageButton overflowHideButton = findViewById(R.id.overflow_hide);
    overflowHideButton.setOnClickListener(mOverflowHideListener);
    ImageButton settingsButton = findViewById(R.id.settings);
    settingsButton.setOnClickListener(mSettingsButtonListener);
    mAdRemainingView = findViewById(R.id.ad_remaining);
    // Relating to Settings List View
    initializeSettingsLists();
    mSettingsListView = (ListView) inflateLayout(getContext(), R.layout.settings_list);
    mSettingsAdapter = new SettingsAdapter(mSettingsMainTextsList, mSettingsSubTextsList, mSettingsIconIdsList);
    mSubSettingsAdapter = new SubSettingsAdapter(null, 0);
    mSettingsListView.setAdapter(mSettingsAdapter);
    mSettingsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    mSettingsListView.setOnItemClickListener(mSettingsItemClickListener);
    // TransportControlsMap
    mTransportControlsMap.append(SIZE_TYPE_EMBEDDED, mEmbeddedTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_FULL, mFullTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_MINIMAL, mMinimalTransportControls);
    mEmbeddedSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_embedded_settings_width);
    mFullSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_full_settings_width);
    mSettingsItemHeight = mResources.getDimensionPixelSize(R.dimen.mcv2_settings_height);
    mSettingsWindowMargin = (-1) * mResources.getDimensionPixelSize(R.dimen.mcv2_settings_offset);
    mSettingsWindow = new PopupWindow(mSettingsListView, mEmbeddedSettingsItemWidth, LayoutParams.WRAP_CONTENT, true);
    mSettingsWindow.setOnDismissListener(mSettingsDismissListener);
    float titleBarHeight = mResources.getDimension(R.dimen.mcv2_title_bar_height);
    float progressBarHeight = mResources.getDimension(R.dimen.mcv2_custom_progress_thumb_size);
    float bottomBarHeight = mResources.getDimension(R.dimen.mcv2_bottom_bar_height);
    View[] bottomBarGroup = { mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar };
    ValueAnimator fadeOutAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            int scaleLevel = mSizeType == SIZE_TYPE_MINIMAL ? 0 : MAX_SCALE_LEVEL;
            mProgress.getThumb().setLevel((int) (scaleLevel * alpha));
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
        }
    });
    fadeOutAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationEnd(Animator animation) {
            mCenterView.setVisibility(View.INVISIBLE);
            mMinimalFullScreenView.setVisibility(View.INVISIBLE);
        }
    });
    ValueAnimator fadeInAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    fadeInAnimator.setInterpolator(new LinearInterpolator());
    fadeInAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            int scaleLevel = mSizeType == SIZE_TYPE_MINIMAL ? 0 : MAX_SCALE_LEVEL;
            mProgress.getThumb().setLevel((int) (scaleLevel * alpha));
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
        }
    });
    fadeInAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            if (mSizeType != SIZE_TYPE_FULL) {
                mCenterView.setVisibility(View.VISIBLE);
            }
            mMinimalFullScreenView.setVisibility(View.VISIBLE);
        }
    });
    mHideMainBarsAnimator = new AnimatorSet();
    mHideMainBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight, bottomBarGroup));
    mHideMainBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideMainBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ONLY_PROGRESS_VISIBLE;
        }
    });
    mHideProgressBarAnimator = AnimatorUtil.ofTranslationYTogether(bottomBarHeight, bottomBarHeight + progressBarHeight, bottomBarGroup);
    mHideProgressBarAnimator.setDuration(HIDE_TIME_MS);
    mHideProgressBarAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mHideAllBarsAnimator = new AnimatorSet();
    mHideAllBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight + progressBarHeight, bottomBarGroup));
    mHideAllBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideAllBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mShowMainBarsAnimator = new AnimatorSet();
    mShowMainBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight, 0, bottomBarGroup));
    mShowMainBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowMainBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mShowAllBarsAnimator = new AnimatorSet();
    mShowAllBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight + progressBarHeight, 0, bottomBarGroup));
    mShowAllBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowAllBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mOverflowShowAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    mOverflowShowAnimator.setDuration(SHOW_TIME_MS);
    mOverflowShowAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowShowAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mExtraControls.setVisibility(View.VISIBLE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mBasicControls.setVisibility(View.INVISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.INVISIBLE : View.GONE);
        }
    });
    mOverflowHideAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    mOverflowHideAnimator.setDuration(SHOW_TIME_MS);
    mOverflowHideAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowHideAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mBasicControls.setVisibility(View.VISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.VISIBLE : View.GONE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mExtraControls.setVisibility(View.GONE);
        }
    });
}
#end_block

#method_before
private void updateLayoutForSizeChange(int sizeType) {
    switch(sizeType) {
        case SIZE_TYPE_FULL:
        case SIZE_TYPE_EMBEDDED:
            // Relating to Progress Bar
            mProgress.setThumb(mResources.getDrawable(R.drawable.custom_progress_thumb));
            mProgress.setThumbOffset(0);
            break;
        case SIZE_TYPE_MINIMAL:
            // Relating to Progress Bar
            mProgress.setThumb(null);
            break;
    }
    // Update play/pause and ffwd buttons based on whether the media is currently stopped or
    // not.
    updateForStoppedState(mIsStopped);
}
#method_after
private void updateLayoutForSizeChange(int sizeType) {
    switch(sizeType) {
        case SIZE_TYPE_FULL:
        case SIZE_TYPE_EMBEDDED:
            // Relating to Progress Bar
            mProgress.getThumb().setLevel(MAX_SCALE_LEVEL);
            break;
        case SIZE_TYPE_MINIMAL:
            // Relating to Progress Bar
            mProgress.getThumb().setLevel(0);
            break;
    }
    // Update play/pause and ffwd buttons based on whether the media is currently stopped or
    // not.
    updateForStoppedState(mIsStopped);
}
#end_block

#method_before
@Override
public void persist() throws RcsMessageStoreException {
    RcsControllerCall.call(iRcs -> iRcs.createGroupThreadParticipantJoinedEvent(getTimestamp(), getRcsGroupThread().getThreadId(), getOriginatingParticipant().getId(), getLeavingParticipant().getId()));
}
#method_after
@Override
public void persist() throws RcsMessageStoreException {
    RcsControllerCall.call(iRcs -> iRcs.createGroupThreadParticipantLeftEvent(getTimestamp(), getRcsGroupThread().getThreadId(), getOriginatingParticipant().getId(), getLeavingParticipant().getId()));
}
#end_block

#method_before
@VisibleForTesting(visibility = PROTECTED)
public RcsGroupThreadIconChangedEvent createRcsEvent() {
    return new RcsGroupThreadIconChangedEvent(mTimestamp, new RcsGroupThread(mRcsGroupThreadId), new RcsParticipant(mOriginatingParticipantId), mNewIcon);
}
#method_after
@Override
@VisibleForTesting(visibility = PROTECTED)
public RcsGroupThreadIconChangedEvent createRcsEvent() {
    return new RcsGroupThreadIconChangedEvent(mTimestamp, new RcsGroupThread(mRcsGroupThreadId), new RcsParticipant(mOriginatingParticipantId), mNewIcon);
}
#end_block

#method_before
private static void startServiceWithIntent(final Intent intent) {
    final Context context = Factory.get().getApplicationContext();
    final int opcode = intent.getIntExtra(EXTRA_OP_CODE, 0);
    // Increase refCount on wake lock - acquiring if necessary
    if (VERBOSE) {
        LogUtil.v(TAG, "acquiring wakelock for opcode " + opcode);
    }
    sWakeLock.acquire(context, intent, opcode);
    intent.setClass(context, ActionServiceImpl.class);
    enqueueWork(context, intent);
}
#method_after
private static void startServiceWithIntent(final Intent intent) {
    final Context context = Factory.get().getApplicationContext();
    final int opcode = intent.getIntExtra(EXTRA_OP_CODE, 0);
    intent.setClass(context, ActionServiceImpl.class);
    enqueueWork(context, intent);
}
#end_block

#method_before
@Override
protected void onHandleWork(final Intent intent) {
    if (intent == null) {
        // Shouldn't happen but sometimes does following another crash.
        LogUtil.w(TAG, "ActionService.onHandleIntent: Called with null intent");
        return;
    }
    final int opcode = intent.getIntExtra(EXTRA_OP_CODE, 0);
    sWakeLock.ensure(intent, opcode);
    try {
        Action action;
        final Bundle actionBundle = intent.getBundleExtra(EXTRA_ACTION_BUNDLE);
        actionBundle.setClassLoader(getClassLoader());
        switch(opcode) {
            case OP_START_ACTION:
                {
                    action = (Action) actionBundle.getParcelable(BUNDLE_ACTION);
                    executeAction(action);
                    break;
                }
            case OP_RECEIVE_BACKGROUND_RESPONSE:
                {
                    action = (Action) actionBundle.getParcelable(BUNDLE_ACTION);
                    final Bundle response = intent.getBundleExtra(EXTRA_WORKER_RESPONSE);
                    processBackgroundResponse(action, response);
                    break;
                }
            case OP_RECEIVE_BACKGROUND_FAILURE:
                {
                    action = (Action) actionBundle.getParcelable(BUNDLE_ACTION);
                    processBackgroundFailure(action);
                    break;
                }
            default:
                throw new RuntimeException("Unrecognized opcode in ActionServiceImpl");
        }
        action.sendBackgroundActions(mBackgroundWorker);
    } finally {
        // Decrease refCount on wake lock - releasing if necessary
        sWakeLock.release(intent, opcode);
    }
}
#method_after
@Override
protected void onHandleWork(final Intent intent) {
    if (intent == null) {
        // Shouldn't happen but sometimes does following another crash.
        LogUtil.w(TAG, "ActionService.onHandleIntent: Called with null intent");
        return;
    }
    final int opcode = intent.getIntExtra(EXTRA_OP_CODE, 0);
    Action action;
    final Bundle actionBundle = intent.getBundleExtra(EXTRA_ACTION_BUNDLE);
    actionBundle.setClassLoader(getClassLoader());
    switch(opcode) {
        case OP_START_ACTION:
            {
                action = (Action) actionBundle.getParcelable(BUNDLE_ACTION);
                executeAction(action);
                break;
            }
        case OP_RECEIVE_BACKGROUND_RESPONSE:
            {
                action = (Action) actionBundle.getParcelable(BUNDLE_ACTION);
                final Bundle response = intent.getBundleExtra(EXTRA_WORKER_RESPONSE);
                processBackgroundResponse(action, response);
                break;
            }
        case OP_RECEIVE_BACKGROUND_FAILURE:
            {
                action = (Action) actionBundle.getParcelable(BUNDLE_ACTION);
                processBackgroundFailure(action);
                break;
            }
        default:
            throw new RuntimeException("Unrecognized opcode in ActionServiceImpl");
    }
    action.sendBackgroundActions(mBackgroundWorker);
}
#end_block

#method_before
private static void startServiceWithIntent(final int opcode, final Intent intent) {
    final Context context = Factory.get().getApplicationContext();
    intent.setClass(context, BackgroundWorkerService.class);
    intent.putExtra(EXTRA_OP_CODE, opcode);
    sWakeLock.acquire(context, intent, opcode);
    if (VERBOSE) {
        LogUtil.v(TAG, "acquiring wakelock for opcode " + opcode);
    }
    enqueueWork(context, intent);
}
#method_after
private static void startServiceWithIntent(final int opcode, final Intent intent) {
    final Context context = Factory.get().getApplicationContext();
    intent.setClass(context, BackgroundWorkerService.class);
    intent.putExtra(EXTRA_OP_CODE, opcode);
    enqueueWork(context, intent);
}
#end_block

#method_before
@Override
protected void onHandleWork(final Intent intent) {
    if (intent == null) {
        // Shouldn't happen but sometimes does following another crash.
        LogUtil.w(TAG, "BackgroundWorkerService.onHandleIntent: Called with null intent");
        return;
    }
    final int opcode = intent.getIntExtra(EXTRA_OP_CODE, 0);
    sWakeLock.ensure(intent, opcode);
    try {
        switch(opcode) {
            case OP_PROCESS_REQUEST:
                {
                    final Action action = intent.getParcelableExtra(EXTRA_ACTION);
                    final int attempt = intent.getIntExtra(EXTRA_ATTEMPT, -1);
                    doBackgroundWork(action, attempt);
                    break;
                }
            default:
                LogUtil.w(TAG, "Unrecognized opcode in BackgroundWorkerService " + opcode);
                throw new RuntimeException("Unrecognized opcode in BackgroundWorkerService");
        }
    } finally {
        sWakeLock.release(intent, opcode);
    }
}
#method_after
@Override
protected void onHandleWork(final Intent intent) {
    if (intent == null) {
        // Shouldn't happen but sometimes does following another crash.
        LogUtil.w(TAG, "BackgroundWorkerService.onHandleIntent: Called with null intent");
        return;
    }
    final int opcode = intent.getIntExtra(EXTRA_OP_CODE, 0);
    switch(opcode) {
        case OP_PROCESS_REQUEST:
            {
                final Action action = intent.getParcelableExtra(EXTRA_ACTION);
                final int attempt = intent.getIntExtra(EXTRA_ATTEMPT, -1);
                doBackgroundWork(action, attempt);
                break;
            }
        default:
            LogUtil.w(TAG, "Unrecognized opcode in BackgroundWorkerService " + opcode);
            throw new RuntimeException("Unrecognized opcode in BackgroundWorkerService");
    }
}
#end_block

#method_before
public void testGetOrCreateConversation() {
    final DatabaseWrapper db = DataModel.get().getDatabase();
    final ArrayList<String> recipients = new ArrayList<String>();
    recipients.add("5551234567");
    recipients.add("5551234568");
    // Generate a list of partially formed participants
    final ArrayList<ParticipantData> participants = new ArrayList<ParticipantData>();
    for (final String recipient : recipients) {
        participants.add(ParticipantData.getFromRawPhoneBySystemLocale(recipient));
    }
    // Test that we properly stubbed the SMS provider to return a thread id
    final long threadId = MmsUtils.getOrCreateThreadId(mContext, recipients);
    assertEquals(TestDataFactory.SMS_MMS_THREAD_ID_CURSOR_VALUE, threadId);
    // TestDataFactory creates NUM_TEST_CONVERSATIONS conversations. blank
    // conversation would be the next conversation.
    final String blankId = BugleDatabaseOperations.getExistingConversation(db, threadId, false);
    assertEquals(TestDataFactory.NUM_TEST_CONVERSATIONS + 4, Integer.parseInt((String) blankId));
    ArrayList<StubActionServiceCallLog> calls = mService.getCalls();
    GetOrCreateConversationActionMonitor monitor = GetOrCreateConversationAction.getOrCreateConversation(participants, null, mockListener);
    assertEquals("Failed to start service once for action", calls.size(), 1);
    assertTrue("Action not GetOrCreateConversationAction", calls.get(0).action instanceof GetOrCreateConversationAction);
    GetOrCreateConversationAction action = (GetOrCreateConversationAction) calls.get(0).action;
    Object result = action.executeAction();
    assertTrue(result instanceof String);
    // Make sure that we created a new conversation
    assertEquals(TestDataFactory.NUM_TEST_CONVERSATIONS + 4, Integer.parseInt((String) result));
    // Now get the conversation that we just created again
    monitor = GetOrCreateConversationAction.getOrCreateConversation(participants, null, mockListener);
    calls = mService.getCalls();
    assertEquals("Failed to start service for second action", calls.size(), 2);
    assertTrue("Action not GetOrCreateConversationAction", calls.get(1).action instanceof GetOrCreateConversationAction);
    action = (GetOrCreateConversationAction) calls.get(1).action;
    result = action.executeAction();
    assertTrue(result instanceof String);
    final String conversationId = (String) result;
    // Make sure that we found the same conversation id
    assertEquals(TestDataFactory.NUM_TEST_CONVERSATIONS + 4, Integer.parseInt((String) result));
    final ArrayList<ParticipantData> conversationParticipants = BugleDatabaseOperations.getParticipantsForConversation(db, conversationId);
    assertEquals("Participant count mismatch", recipients.size(), conversationParticipants.size());
    for (final ParticipantData participant : conversationParticipants) {
        assertTrue(recipients.contains(participant.getSendDestination()));
    }
    final Uri conversationParticipantsUri = MessagingContentProvider.buildConversationParticipantsUri(conversationId);
    final Cursor cursor = mContext.getContentResolver().query(conversationParticipantsUri, ParticipantData.ParticipantsQuery.PROJECTION, null, null, null);
    int countSelf = 0;
    while (cursor.moveToNext()) {
        final ParticipantData participant = ParticipantData.getFromCursor(cursor);
        if (participant.isSelf()) {
            countSelf++;
        } else {
            assertTrue(recipients.contains(participant.getSendDestination()));
        }
    }
    cursor.close();
    assertEquals("Expect one self participant in conversations", 1, countSelf);
    assertEquals("Cursor count mismatch", recipients.size(), cursor.getCount() - countSelf);
    final String realId = BugleDatabaseOperations.getExistingConversation(db, threadId, false);
    assertEquals("Conversation already exists", realId, conversationId);
}
#method_after
public void testGetOrCreateConversation() {
    final DatabaseWrapper db = DataModel.get().getDatabase();
    final ArrayList<String> recipients = new ArrayList<String>();
    recipients.add("5551234567");
    recipients.add("5551234568");
    // Generate a list of partially formed participants
    final ArrayList<ParticipantData> participants = new ArrayList<ParticipantData>();
    for (final String recipient : recipients) {
        participants.add(ParticipantData.getFromRawPhoneBySystemLocale(recipient));
    }
    // Test that we properly stubbed the SMS provider to return a thread id
    final long threadId = MmsUtils.getOrCreateThreadId(mContext, recipients);
    assertEquals(TestDataFactory.SMS_MMS_THREAD_ID_CURSOR_VALUE, threadId);
    // TestDataFactory creates NUM_TEST_CONVERSATIONS conversations. blank
    // conversation would be the next conversation.
    final String blankId = BugleDatabaseOperations.getExistingConversation(db, threadId, false);
    // TODO(rtenneti): Investigate why blankId is 4 more than NUM_TEST_CONVERSATIONS.
    assertEquals(TestDataFactory.NUM_TEST_CONVERSATIONS + 4, Integer.parseInt((String) blankId));
    ArrayList<StubActionServiceCallLog> calls = mService.getCalls();
    GetOrCreateConversationActionMonitor monitor = GetOrCreateConversationAction.getOrCreateConversation(participants, null, mockListener);
    assertEquals("Failed to start service once for action", calls.size(), 1);
    assertTrue("Action not GetOrCreateConversationAction", calls.get(0).action instanceof GetOrCreateConversationAction);
    GetOrCreateConversationAction action = (GetOrCreateConversationAction) calls.get(0).action;
    Object result = action.executeAction();
    assertTrue(result instanceof String);
    // Make sure that we created a new conversation
    // TODO(rtenneti): Investigate why blankId is 4 more than NUM_TEST_CONVERSATIONS.
    assertEquals(TestDataFactory.NUM_TEST_CONVERSATIONS + 4, Integer.parseInt((String) result));
    // Now get the conversation that we just created again
    monitor = GetOrCreateConversationAction.getOrCreateConversation(participants, null, mockListener);
    calls = mService.getCalls();
    assertEquals("Failed to start service for second action", calls.size(), 2);
    assertTrue("Action not GetOrCreateConversationAction", calls.get(1).action instanceof GetOrCreateConversationAction);
    action = (GetOrCreateConversationAction) calls.get(1).action;
    result = action.executeAction();
    assertTrue(result instanceof String);
    final String conversationId = (String) result;
    // Make sure that we found the same conversation id
    // TODO(rtenneti): Investigate why blankId is 4 more than NUM_TEST_CONVERSATIONS.
    assertEquals(TestDataFactory.NUM_TEST_CONVERSATIONS + 4, Integer.parseInt((String) result));
    final ArrayList<ParticipantData> conversationParticipants = BugleDatabaseOperations.getParticipantsForConversation(db, conversationId);
    assertEquals("Participant count mismatch", recipients.size(), conversationParticipants.size());
    for (final ParticipantData participant : conversationParticipants) {
        assertTrue(recipients.contains(participant.getSendDestination()));
    }
    final Uri conversationParticipantsUri = MessagingContentProvider.buildConversationParticipantsUri(conversationId);
    final Cursor cursor = mContext.getContentResolver().query(conversationParticipantsUri, ParticipantData.ParticipantsQuery.PROJECTION, null, null, null);
    int countSelf = 0;
    while (cursor.moveToNext()) {
        final ParticipantData participant = ParticipantData.getFromCursor(cursor);
        if (participant.isSelf()) {
            countSelf++;
        } else {
            assertTrue(recipients.contains(participant.getSendDestination()));
        }
    }
    cursor.close();
    assertEquals("Expect one self participant in conversations", 1, countSelf);
    assertEquals("Cursor count mismatch", recipients.size(), cursor.getCount() - countSelf);
    final String realId = BugleDatabaseOperations.getExistingConversation(db, threadId, false);
    assertEquals("Conversation already exists", realId, conversationId);
}
#end_block

#method_before
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    final int width = right - left - getPaddingLeft() - getPaddingRight();
    final int height = bottom - top - getPaddingTop() - getPaddingBottom();
    final int fullWidth = mBottomBarLeft.getMeasuredWidth() + mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int fullHeight = mTitleBar.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    final int embeddedWidth = mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int embeddedHeight = mTitleBar.getMeasuredHeight() + mEmbeddedTransportControls.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    int sizeType;
    if (mIsAdvertisement || (fullWidth <= width && fullHeight <= height)) {
        sizeType = SIZE_TYPE_FULL;
    } else if (embeddedWidth <= width && embeddedHeight <= height) {
        sizeType = SIZE_TYPE_EMBEDDED;
    } else {
        sizeType = SIZE_TYPE_MINIMAL;
    }
    if (mSizeType != sizeType) {
        mSizeType = sizeType;
        updateLayoutForSizeChange(sizeType);
    }
    mTitleBar.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mEmbeddedTransportControls.setVisibility(sizeType == SIZE_TYPE_EMBEDDED ? View.VISIBLE : View.INVISIBLE);
    mMinimalTransportControls.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarBackground.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarLeft.setVisibility(sizeType == SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    mTimeView.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBasicControls.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mMinimalFullScreenButton.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mCenterView.setVisibility(sizeType == SIZE_TYPE_FULL ? View.INVISIBLE : View.VISIBLE);
    final int childLeft = getPaddingLeft();
    final int childRight = childLeft + width;
    final int childTop = getPaddingTop();
    final int childBottom = childTop + height;
    layoutChild(mTitleBar, childLeft, childTop);
    layoutChild(mCenterView, childLeft, childTop);
    layoutChild(mBottomBarBackground, childLeft, childBottom - mBottomBarBackground.getMeasuredHeight());
    layoutChild(mBottomBarLeft, childLeft, childBottom - mBottomBarLeft.getMeasuredHeight());
    layoutChild(mTimeView, sizeType == SIZE_TYPE_FULL ? childRight - mBasicControls.getMeasuredWidth() - mTimeView.getMeasuredWidth() : childLeft, childBottom - mTimeView.getMeasuredHeight());
    layoutChild(mBasicControls, childRight - mBasicControls.getMeasuredWidth(), childBottom - mBasicControls.getMeasuredHeight());
    layoutChild(mExtraControls, childRight, childBottom - mExtraControls.getMeasuredHeight());
    layoutChild(mProgressBar, childLeft, sizeType == SIZE_TYPE_MINIMAL ? childBottom - mProgressBar.getMeasuredHeight() : childBottom - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    layoutChild(mMinimalFullScreenView, childLeft, childBottom - mMinimalFullScreenView.getMeasuredHeight());
}
#method_after
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    final int width = right - left - getPaddingLeft() - getPaddingRight();
    final int height = bottom - top - getPaddingTop() - getPaddingBottom();
    final int fullWidth = mBottomBarLeft.getMeasuredWidth() + mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int fullHeight = mTitleBar.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    final int embeddedWidth = mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int embeddedHeight = mTitleBar.getMeasuredHeight() + mEmbeddedTransportControls.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    int sizeType;
    if (mIsAdvertisement || (fullWidth <= width && fullHeight <= height)) {
        sizeType = SIZE_TYPE_FULL;
    } else if (embeddedWidth <= width && embeddedHeight <= height) {
        sizeType = SIZE_TYPE_EMBEDDED;
    } else {
        sizeType = SIZE_TYPE_MINIMAL;
    }
    if (mSizeType != sizeType) {
        mSizeType = sizeType;
        updateLayoutForSizeChange(sizeType);
    }
    mTitleBar.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mEmbeddedTransportControls.setVisibility(sizeType == SIZE_TYPE_EMBEDDED ? View.VISIBLE : View.INVISIBLE);
    mMinimalTransportControls.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarBackground.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarLeft.setVisibility(sizeType == SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    mTimeView.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBasicControls.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mMinimalFullScreenButton.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mCenterView.setVisibility(sizeType != SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    final int childLeft = getPaddingLeft();
    final int childRight = childLeft + width;
    final int childTop = getPaddingTop();
    final int childBottom = childTop + height;
    layoutChild(mTitleBar, childLeft, childTop);
    layoutChild(mCenterView, childLeft, childTop);
    layoutChild(mBottomBarBackground, childLeft, childBottom - mBottomBarBackground.getMeasuredHeight());
    layoutChild(mBottomBarLeft, childLeft, childBottom - mBottomBarLeft.getMeasuredHeight());
    layoutChild(mTimeView, sizeType == SIZE_TYPE_FULL ? childRight - mBasicControls.getMeasuredWidth() - mTimeView.getMeasuredWidth() : childLeft, childBottom - mTimeView.getMeasuredHeight());
    layoutChild(mBasicControls, childRight - mBasicControls.getMeasuredWidth(), childBottom - mBasicControls.getMeasuredHeight());
    layoutChild(mExtraControls, childRight, childBottom - mExtraControls.getMeasuredHeight());
    layoutChild(mProgressBar, childLeft, sizeType == SIZE_TYPE_MINIMAL ? childBottom - mProgressBar.getMeasuredHeight() : childBottom - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    layoutChild(mMinimalFullScreenView, childLeft, childBottom - mMinimalFullScreenView.getMeasuredHeight());
}
#end_block

#method_before
private void initControllerView() {
    // Relating to Title Bar View
    mTitleBar = findViewById(R.id.title_bar);
    mTitleView = findViewById(R.id.title_text);
    mAdExternalLink = findViewById(R.id.ad_external_link);
    mRouteButton = findViewById(R.id.cast);
    // Relating to Center View
    mCenterView = findViewById(R.id.center_view);
    mEmbeddedTransportControls = initTransportControls(R.id.embedded_transport_controls);
    mMinimalTransportControls = initTransportControls(R.id.minimal_transport_controls);
    // Relating to Minimal Size FullScreen View
    mMinimalFullScreenView = findViewById(R.id.minimal_fullscreen_view);
    mMinimalFullScreenButton = findViewById(R.id.minimal_fullscreen);
    mMinimalFullScreenButton.setOnClickListener(mFullScreenListener);
    // Relating to Progress Bar View
    mProgressBar = findViewById(R.id.progress_bar);
    mProgress = findViewById(R.id.progress);
    mProgress.setOnSeekBarChangeListener(mSeekListener);
    mProgress.setMax(MAX_PROGRESS);
    mCurrentSeekPosition = SEEK_POSITION_NOT_SET;
    mNextSeekPosition = SEEK_POSITION_NOT_SET;
    // Relating to Bottom Bar View
    mBottomBarBackground = findViewById(R.id.bottom_bar_background);
    // Relating to Bottom Bar Left View
    mBottomBarLeft = findViewById(R.id.bottom_bar_left);
    mFullTransportControls = initTransportControls(R.id.full_transport_controls);
    mTimeView = findViewById(R.id.time);
    mEndTime = findViewById(R.id.time_end);
    mCurrentTime = findViewById(R.id.time_current);
    mAdSkipView = findViewById(R.id.ad_skip_time);
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    // Relating to Bottom Bar Right View
    mBasicControls = findViewById(R.id.basic_controls);
    mExtraControls = findViewById(R.id.extra_controls);
    mCustomButtons = findViewById(R.id.custom_buttons);
    mSubtitleButton = findViewById(R.id.subtitle);
    mSubtitleButton.setOnClickListener(mSubtitleListener);
    mFullScreenButton = findViewById(R.id.fullscreen);
    mFullScreenButton.setOnClickListener(mFullScreenListener);
    ImageButton overflowShowButton = findViewById(R.id.overflow_show);
    overflowShowButton.setOnClickListener(mOverflowShowListener);
    ImageButton overflowHideButton = findViewById(R.id.overflow_hide);
    overflowHideButton.setOnClickListener(mOverflowHideListener);
    ImageButton settingsButton = findViewById(R.id.settings);
    settingsButton.setOnClickListener(mSettingsButtonListener);
    mAdRemainingView = findViewById(R.id.ad_remaining);
    // Relating to Settings List View
    initializeSettingsLists();
    mSettingsListView = (ListView) inflateLayout(getContext(), R.layout.settings_list);
    mSettingsAdapter = new SettingsAdapter(mSettingsMainTextsList, mSettingsSubTextsList, mSettingsIconIdsList);
    mSubSettingsAdapter = new SubSettingsAdapter(null, 0);
    mSettingsListView.setAdapter(mSettingsAdapter);
    mSettingsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    mSettingsListView.setOnItemClickListener(mSettingsItemClickListener);
    // TransportControlsMap
    mTransportControlsMap.append(SIZE_TYPE_EMBEDDED, mEmbeddedTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_FULL, mFullTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_MINIMAL, mMinimalTransportControls);
    mEmbeddedSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_embedded_settings_width);
    mFullSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_full_settings_width);
    mSettingsItemHeight = mResources.getDimensionPixelSize(R.dimen.mcv2_settings_height);
    mSettingsWindowMargin = (-1) * mResources.getDimensionPixelSize(R.dimen.mcv2_settings_offset);
    mSettingsWindow = new PopupWindow(mSettingsListView, mEmbeddedSettingsItemWidth, LayoutParams.WRAP_CONTENT, true);
    mSettingsWindow.setOnDismissListener(mSettingsDismissListener);
    float titleBarHeight = mResources.getDimension(R.dimen.mcv2_title_bar_height);
    float progressBarHeight = mResources.getDimension(R.dimen.mcv2_custom_progress_thumb_size);
    float bottomBarHeight = mResources.getDimension(R.dimen.mcv2_bottom_bar_height);
    View[] bottomBarGroup = { mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar };
    ValueAnimator fadeOutAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.INVISIBLE);
                mMinimalFullScreenView.setVisibility(View.INVISIBLE);
            }
        }
    });
    ValueAnimator fadeInAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    fadeInAnimator.setInterpolator(new LinearInterpolator());
    fadeInAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                if (mSizeType != SIZE_TYPE_FULL) {
                    mCenterView.setVisibility(View.VISIBLE);
                }
                mMinimalFullScreenView.setVisibility(View.VISIBLE);
            }
        }
    });
    mHideMainBarsAnimator = new AnimatorSet();
    mHideMainBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight, bottomBarGroup));
    mHideMainBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ONLY_PROGRESS_VISIBLE;
        }
    });
    mHideProgressBarAnimator = AnimatorUtil.ofTranslationYTogether(bottomBarHeight, bottomBarHeight + progressBarHeight, bottomBarGroup);
    mHideProgressBarAnimator.setDuration(HIDE_TIME_MS);
    mHideProgressBarAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mHideAllBarsAnimator = new AnimatorSet();
    mHideAllBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight + progressBarHeight, bottomBarGroup));
    mHideAllBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mShowMainBarsAnimator = new AnimatorSet();
    mShowMainBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight, 0, bottomBarGroup));
    mShowMainBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mShowAllBarsAnimator = new AnimatorSet();
    mShowAllBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight + progressBarHeight, 0, bottomBarGroup));
    mShowAllBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mOverflowShowAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    mOverflowShowAnimator.setDuration(SHOW_TIME_MS);
    mOverflowShowAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowShowAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mExtraControls.setVisibility(View.VISIBLE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mBasicControls.setVisibility(View.INVISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.INVISIBLE : View.GONE);
        }
    });
    mOverflowHideAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    mOverflowHideAnimator.setDuration(SHOW_TIME_MS);
    mOverflowHideAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowHideAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mBasicControls.setVisibility(View.VISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.VISIBLE : View.GONE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mExtraControls.setVisibility(View.GONE);
        }
    });
}
#method_after
private void initControllerView() {
    // Relating to Title Bar View
    mTitleBar = findViewById(R.id.title_bar);
    mTitleView = findViewById(R.id.title_text);
    mAdExternalLink = findViewById(R.id.ad_external_link);
    mRouteButton = findViewById(R.id.cast);
    // Relating to Center View
    mCenterView = findViewById(R.id.center_view);
    mEmbeddedTransportControls = initTransportControls(R.id.embedded_transport_controls);
    mMinimalTransportControls = initTransportControls(R.id.minimal_transport_controls);
    // Relating to Minimal Size FullScreen View
    mMinimalFullScreenView = findViewById(R.id.minimal_fullscreen_view);
    mMinimalFullScreenButton = findViewById(R.id.minimal_fullscreen);
    mMinimalFullScreenButton.setOnClickListener(mFullScreenListener);
    // Relating to Progress Bar View
    mProgressBar = findViewById(R.id.progress_bar);
    mProgress = findViewById(R.id.progress);
    mProgress.setOnSeekBarChangeListener(mSeekListener);
    mProgress.setMax(MAX_PROGRESS);
    mCurrentSeekPosition = SEEK_POSITION_NOT_SET;
    mNextSeekPosition = SEEK_POSITION_NOT_SET;
    // Relating to Bottom Bar View
    mBottomBarBackground = findViewById(R.id.bottom_bar_background);
    // Relating to Bottom Bar Left View
    mBottomBarLeft = findViewById(R.id.bottom_bar_left);
    mFullTransportControls = initTransportControls(R.id.full_transport_controls);
    mTimeView = findViewById(R.id.time);
    mEndTime = findViewById(R.id.time_end);
    mCurrentTime = findViewById(R.id.time_current);
    mAdSkipView = findViewById(R.id.ad_skip_time);
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    // Relating to Bottom Bar Right View
    mBasicControls = findViewById(R.id.basic_controls);
    mExtraControls = findViewById(R.id.extra_controls);
    mCustomButtons = findViewById(R.id.custom_buttons);
    mSubtitleButton = findViewById(R.id.subtitle);
    mSubtitleButton.setOnClickListener(mSubtitleListener);
    mFullScreenButton = findViewById(R.id.fullscreen);
    mFullScreenButton.setOnClickListener(mFullScreenListener);
    ImageButton overflowShowButton = findViewById(R.id.overflow_show);
    overflowShowButton.setOnClickListener(mOverflowShowListener);
    ImageButton overflowHideButton = findViewById(R.id.overflow_hide);
    overflowHideButton.setOnClickListener(mOverflowHideListener);
    ImageButton settingsButton = findViewById(R.id.settings);
    settingsButton.setOnClickListener(mSettingsButtonListener);
    mAdRemainingView = findViewById(R.id.ad_remaining);
    // Relating to Settings List View
    initializeSettingsLists();
    mSettingsListView = (ListView) inflateLayout(getContext(), R.layout.settings_list);
    mSettingsAdapter = new SettingsAdapter(mSettingsMainTextsList, mSettingsSubTextsList, mSettingsIconIdsList);
    mSubSettingsAdapter = new SubSettingsAdapter(null, 0);
    mSettingsListView.setAdapter(mSettingsAdapter);
    mSettingsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    mSettingsListView.setOnItemClickListener(mSettingsItemClickListener);
    // TransportControlsMap
    mTransportControlsMap.append(SIZE_TYPE_EMBEDDED, mEmbeddedTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_FULL, mFullTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_MINIMAL, mMinimalTransportControls);
    mEmbeddedSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_embedded_settings_width);
    mFullSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_full_settings_width);
    mSettingsItemHeight = mResources.getDimensionPixelSize(R.dimen.mcv2_settings_height);
    mSettingsWindowMargin = (-1) * mResources.getDimensionPixelSize(R.dimen.mcv2_settings_offset);
    mSettingsWindow = new PopupWindow(mSettingsListView, mEmbeddedSettingsItemWidth, LayoutParams.WRAP_CONTENT, true);
    mSettingsWindow.setOnDismissListener(mSettingsDismissListener);
    float titleBarHeight = mResources.getDimension(R.dimen.mcv2_title_bar_height);
    float progressBarHeight = mResources.getDimension(R.dimen.mcv2_custom_progress_thumb_size);
    float bottomBarHeight = mResources.getDimension(R.dimen.mcv2_bottom_bar_height);
    View[] bottomBarGroup = { mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar };
    ValueAnimator fadeOutAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            int scaleLevel = mSizeType == SIZE_TYPE_MINIMAL ? 0 : MAX_SCALE_LEVEL;
            mProgress.getThumb().setLevel((int) (scaleLevel * alpha));
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
        }
    });
    fadeOutAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationEnd(Animator animation) {
            mCenterView.setVisibility(View.INVISIBLE);
            mMinimalFullScreenView.setVisibility(View.INVISIBLE);
        }
    });
    ValueAnimator fadeInAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    fadeInAnimator.setInterpolator(new LinearInterpolator());
    fadeInAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            int scaleLevel = mSizeType == SIZE_TYPE_MINIMAL ? 0 : MAX_SCALE_LEVEL;
            mProgress.getThumb().setLevel((int) (scaleLevel * alpha));
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
        }
    });
    fadeInAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            if (mSizeType != SIZE_TYPE_FULL) {
                mCenterView.setVisibility(View.VISIBLE);
            }
            mMinimalFullScreenView.setVisibility(View.VISIBLE);
        }
    });
    mHideMainBarsAnimator = new AnimatorSet();
    mHideMainBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight, bottomBarGroup));
    mHideMainBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideMainBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ONLY_PROGRESS_VISIBLE;
        }
    });
    mHideProgressBarAnimator = AnimatorUtil.ofTranslationYTogether(bottomBarHeight, bottomBarHeight + progressBarHeight, bottomBarGroup);
    mHideProgressBarAnimator.setDuration(HIDE_TIME_MS);
    mHideProgressBarAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mHideAllBarsAnimator = new AnimatorSet();
    mHideAllBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight + progressBarHeight, bottomBarGroup));
    mHideAllBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideAllBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mShowMainBarsAnimator = new AnimatorSet();
    mShowMainBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight, 0, bottomBarGroup));
    mShowMainBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowMainBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mShowAllBarsAnimator = new AnimatorSet();
    mShowAllBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight + progressBarHeight, 0, bottomBarGroup));
    mShowAllBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowAllBarsAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mOverflowShowAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    mOverflowShowAnimator.setDuration(SHOW_TIME_MS);
    mOverflowShowAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowShowAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mExtraControls.setVisibility(View.VISIBLE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mBasicControls.setVisibility(View.INVISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.INVISIBLE : View.GONE);
        }
    });
    mOverflowHideAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    mOverflowHideAnimator.setDuration(SHOW_TIME_MS);
    mOverflowHideAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowHideAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mBasicControls.setVisibility(View.VISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.VISIBLE : View.GONE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mExtraControls.setVisibility(View.GONE);
        }
    });
}
#end_block

#method_before
private void updateLayoutForSizeChange(int sizeType) {
    switch(sizeType) {
        case SIZE_TYPE_FULL:
        case SIZE_TYPE_EMBEDDED:
            // Relating to Progress Bar
            mProgress.setThumb(mResources.getDrawable(R.drawable.custom_progress_thumb));
            mProgress.setThumbOffset(0);
            break;
        case SIZE_TYPE_MINIMAL:
            // Relating to Progress Bar
            mProgress.setThumb(null);
            break;
    }
    // Update play/pause and ffwd buttons based on whether the media is currently stopped or
    // not.
    updateForStoppedState(mIsStopped);
}
#method_after
private void updateLayoutForSizeChange(int sizeType) {
    switch(sizeType) {
        case SIZE_TYPE_FULL:
        case SIZE_TYPE_EMBEDDED:
            // Relating to Progress Bar
            mProgress.getThumb().setLevel(MAX_SCALE_LEVEL);
            break;
        case SIZE_TYPE_MINIMAL:
            // Relating to Progress Bar
            mProgress.getThumb().setLevel(0);
            break;
    }
    // Update play/pause and ffwd buttons based on whether the media is currently stopped or
    // not.
    updateForStoppedState(mIsStopped);
}
#end_block

#method_before
@SuppressWarnings("ThrowableNotThrown")
public void test_messageAndCause() {
    Throwable cause = new Throwable("cause msg");
    assertMessageAndCause(null, null, new ConcurrentModificationException());
    assertMessageAndCause("msg", null, new ConcurrentModificationException("msg"));
    assertMessageAndCause("msg", cause, new ConcurrentModificationException("msg", cause));
    // cause.toString() is something like "java.lang.Throwable: cause msg"
    assertMessageAndCause(cause.toString(), cause, new ConcurrentModificationException(cause));
}
#method_after
@SuppressWarnings("ThrowableNotThrown")
public void test_messageAndCause() {
    Throwable cause = new Throwable("cause msg");
    assertMessageAndCause(null, null, new ConcurrentModificationException());
    assertMessageAndCause("msg", null, new ConcurrentModificationException("msg"));
    assertMessageAndCause("msg", cause, new ConcurrentModificationException("msg", cause));
    assertMessageAndCause("msg", null, new ConcurrentModificationException("msg", null));
    assertMessageAndCause(null, null, new ConcurrentModificationException((Throwable) null));
    // cause.toString() is something like "java.lang.Throwable: cause msg"
    assertMessageAndCause(cause.toString(), cause, new ConcurrentModificationException(cause));
}
#end_block

#method_before
@SuppressWarnings("unchecked")
public void test_NoneOf_LClass() {
    try {
        EnumSet.noneOf((Class) null);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
    // expected
    }
    try {
        EnumSet.noneOf(Enum.class);
        fail("Should throw ClassCastException");
    } catch (ClassCastException cce) {
    // expected
    }
    Class<EnumWithAllInnerClass> c = (Class<EnumWithAllInnerClass>) EnumWithAllInnerClass.a.getClass();
    try {
        EnumSet.noneOf(c);
        fail("Should throw ClassCastException");
    } catch (ClassCastException e) {
    // expected
    }
    EnumSet<EnumWithAllInnerClass> setWithInnerClass = EnumSet.noneOf(EnumWithAllInnerClass.class);
    assertNotNull(setWithInnerClass);
    assertEmpty(setWithInnerClass);
    // test enum type with more than 64 elements
    Class<HugeEnumWithInnerClass> hc = (Class<HugeEnumWithInnerClass>) HugeEnumWithInnerClass.a.getClass();
    try {
        EnumSet.noneOf(hc);
        fail("Should throw ClassCastException");
    } catch (ClassCastException e) {
    // expected
    }
    EnumSet<HugeEnumWithInnerClass> hugeSetWithInnerClass = EnumSet.noneOf(HugeEnumWithInnerClass.class);
    assertEmpty(hugeSetWithInnerClass);
}
#method_after
@SuppressWarnings("unchecked")
public void test_NoneOf_LClass() {
    try {
        EnumSet.noneOf((Class) null);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
    // expected
    }
    try {
        EnumSet.noneOf(Enum.class);
        fail("Should throw ClassCastException");
    } catch (ClassCastException cce) {
    // expected
    }
    Class<EnumWithAllInnerClass> c = (Class<EnumWithAllInnerClass>) EnumWithAllInnerClass.a.getClass();
    try {
        EnumSet.noneOf(c);
        fail("Should throw ClassCastException");
    } catch (ClassCastException e) {
    // expected
    }
    EnumSet<EnumWithAllInnerClass> setWithInnerClass = EnumSet.noneOf(EnumWithAllInnerClass.class);
    assertNotNull(setWithInnerClass);
    // test enum type with more than 64 elements
    Class<HugeEnumWithInnerClass> hc = (Class<HugeEnumWithInnerClass>) HugeEnumWithInnerClass.a.getClass();
    try {
        EnumSet.noneOf(hc);
        fail("Should throw ClassCastException");
    } catch (ClassCastException e) {
    // expected
    }
    EnumSet<HugeEnumWithInnerClass> hugeSetWithInnerClass = EnumSet.noneOf(HugeEnumWithInnerClass.class);
    assertNotNull(hugeSetWithInnerClass);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
public void test_AllOf_LClass() {
    try {
        EnumSet.allOf((Class) null);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
    // expected
    }
    try {
        EnumSet.allOf(Enum.class);
        fail("Should throw ClassCastException");
    } catch (ClassCastException cce) {
    // expected
    }
    EnumSet<EnumFoo> enumSet = EnumSet.allOf(EnumFoo.class);
    assertEquals("Size of enumSet should be 64", 64, enumSet.size());
    assertFalse("enumSet should not contain null value", enumSet.contains(null));
    assertTrue("enumSet should contain EnumFoo.a", enumSet.contains(EnumFoo.a));
    assertTrue("enumSet should contain EnumFoo.b", enumSet.contains(EnumFoo.b));
    enumSet.add(EnumFoo.a);
    assertSize(64, enumSet);
    EnumSet<EnumFoo> anotherSet = EnumSet.allOf(EnumFoo.class);
    assertEquals("Should be equal", enumSet, anotherSet);
    assertNotSame("Should not be identical", enumSet, anotherSet);
    // test enum with more than 64 elements
    EnumSet<HugeEnum> hugeEnumSet = EnumSet.allOf(HugeEnum.class);
    assertSize(65, hugeEnumSet);
    assertFalse(hugeEnumSet.contains(null));
    assertTrue(hugeEnumSet.contains(HugeEnum.a));
    assertTrue(hugeEnumSet.contains(HugeEnum.b));
    hugeEnumSet.add(HugeEnum.a);
    assertSize(65, hugeEnumSet);
    EnumSet<HugeEnum> anotherHugeSet = EnumSet.allOf(HugeEnum.class);
    assertEquals(hugeEnumSet, anotherHugeSet);
    assertNotSame(hugeEnumSet, anotherHugeSet);
}
#method_after
@SuppressWarnings("unchecked")
public void test_AllOf_LClass() {
    try {
        EnumSet.allOf((Class) null);
        fail("Should throw NullPointerException");
    } catch (NullPointerException e) {
    // expected
    }
    try {
        EnumSet.allOf(Enum.class);
        fail("Should throw ClassCastException");
    } catch (ClassCastException cce) {
    // expected
    }
    EnumSet<EnumFoo> enumSet = EnumSet.allOf(EnumFoo.class);
    assertEquals("Size of enumSet should be 64", 64, enumSet.size());
    assertFalse("enumSet should not contain null value", enumSet.contains(null));
    assertTrue("enumSet should contain EnumFoo.a", enumSet.contains(EnumFoo.a));
    assertTrue("enumSet should contain EnumFoo.b", enumSet.contains(EnumFoo.b));
    enumSet.add(EnumFoo.a);
    assertEquals("Should be equal", 64, enumSet.size());
    EnumSet<EnumFoo> anotherSet = EnumSet.allOf(EnumFoo.class);
    assertEquals("Should be equal", enumSet, anotherSet);
    assertNotSame("Should not be identical", enumSet, anotherSet);
    // test enum with more than 64 elements
    EnumSet<HugeEnum> hugeEnumSet = EnumSet.allOf(HugeEnum.class);
    assertEquals(65, hugeEnumSet.size());
    assertFalse(hugeEnumSet.contains(null));
    assertTrue(hugeEnumSet.contains(HugeEnum.a));
    assertTrue(hugeEnumSet.contains(HugeEnum.b));
    hugeEnumSet.add(HugeEnum.a);
    assertEquals(65, hugeEnumSet.size());
    EnumSet<HugeEnum> anotherHugeSet = EnumSet.allOf(HugeEnum.class);
    assertEquals(hugeEnumSet, anotherHugeSet);
    assertNotSame(hugeEnumSet, anotherHugeSet);
}
#end_block

#method_before
public void test_size() {
    EnumSet<EnumFoo> set = EnumSet.noneOf(EnumFoo.class);
    set.add(EnumFoo.a);
    set.add(EnumFoo.b);
    assertSize(2, set);
    // test enum type with more than 64 elements
    EnumSet<HugeEnum> hugeSet = EnumSet.noneOf(HugeEnum.class);
    hugeSet.add(HugeEnum.a);
    hugeSet.add(HugeEnum.bb);
    assertSize(2, hugeSet);
}
#method_after
public void test_size() {
    assertEmpty(EnumSet.noneOf(EnumFoo.class));
    assertSize(2, EnumSet.of(EnumFoo.a, EnumFoo.b));
    // enum type with more than 64 elements
    assertEmpty(EnumSet.noneOf(HugeEnum.class));
    assertSize(2, EnumSet.of(HugeEnum.a, HugeEnum.bb));
    assertSize(65, EnumSet.allOf(HugeEnum.class));
}
#end_block

#method_before
private static void assertEmpty(EnumSet<?> set) {
    assertEquals(0, set.size());
    assertTrue(set.isEmpty());
}
#method_after
private static void assertEmpty(EnumSet<?> set) {
    assertSize(0, set);
}
#end_block

#method_before
private static void assertSize(int expectedSize, EnumSet<?> set) {
    assertEquals(expectedSize, set.size());
    assertEquals(expectedSize == 0, set.isEmpty());
}
#method_after
private static void assertSize(int expectedSize, Set<?> set) {
    assertEquals(expectedSize, set.size());
    assertEquals(expectedSize == 0, set.isEmpty());
}
#end_block

#method_before
@Override
public void notifyFailure(FailureType type, String name, String errorMessage) {
    mDidFail = true;
    failures++;
    if (failures <= 100) {
        mErrorString.append("\n");
        mErrorString.append(type.toString().toLowerCase());
        mErrorString.append(":\t");
        mErrorString.append(name);
        mErrorString.append("\tError: ");
        mErrorString.append(errorMessage);
    } else if (failures == 101) {
        mErrorString.append("\nMore than 100 failures, more errores elided.");
    }
}
#method_after
@Override
public void notifyFailure(FailureType type, String name, String errorMessage) {
    mDidFail = true;
    failures++;
    if (failures <= 100) {
        mErrorString.append("\n");
        mErrorString.append(type.toString().toLowerCase());
        mErrorString.append(":\t");
        mErrorString.append(name);
        mErrorString.append("\tError: ");
        mErrorString.append(errorMessage);
    } else if (failures == 101) {
        mErrorString.append("\nMore than 100 failures, more errors will be elided.");
    }
}
#end_block

#method_before
/**
 * Currently returns unix errno instead of throwing IOException,
 * so that BluetoothAdapter can check the error code for EADDRINUSE
 */
int bindListen() {
    int ret;
    if (mSocketState == SocketState.CLOSED)
        return EBADFD;
    IBluetooth bluetoothProxy = BluetoothAdapter.getDefaultAdapter().getBluetoothService(null);
    if (bluetoothProxy == null) {
        Log.e(TAG, "bindListen fail, reason: bluetooth is off");
        return -1;
    }
    try {
        if (DBG)
            Log.d(TAG, "bindListen(): mPort=" + mPort + ", mType=" + mType);
        mPfd = bluetoothProxy.getSocketManager().createSocketChannel(mType, mServiceName, mUuid, mPort, getSecurityFlags());
    } catch (RemoteException e) {
        Log.e(TAG, Log.getStackTraceString(new Throwable()));
        return -1;
    }
    // read out port number
    try {
        synchronized (this) {
            if (DBG) {
                Log.d(TAG, "bindListen(), SocketState: " + mSocketState + ", mPfd: " + mPfd);
            }
            if (mSocketState != SocketState.INIT)
                return EBADFD;
            if (mPfd == null)
                return -1;
            FileDescriptor fd = mPfd.getFileDescriptor();
            if (fd == null) {
                Log.e(TAG, "bindListen(), null file descriptor");
                return -1;
            }
            if (DBG)
                Log.d(TAG, "bindListen(), Create LocalSocket");
            mSocket = LocalSocket.createConnectedLocalSocket(fd);
            if (DBG)
                Log.d(TAG, "bindListen(), new LocalSocket.getInputStream()");
            mSocketIS = mSocket.getInputStream();
            mSocketOS = mSocket.getOutputStream();
        }
        if (DBG)
            Log.d(TAG, "bindListen(), readInt mSocketIS: " + mSocketIS);
        int channel = readInt(mSocketIS);
        synchronized (this) {
            if (mSocketState == SocketState.INIT) {
                mSocketState = SocketState.LISTENING;
            }
        }
        if (DBG)
            Log.d(TAG, "bindListen(): channel=" + channel);
        if (mPort <= -1) {
            if (DBG)
                Log.d(TAG, "bindListen(): updating channel=" + channel);
            mPort = channel;
        }
        // else ASSERT(mPort == channel)
        ret = 0;
    } catch (IOException e) {
        if (mPfd != null) {
            try {
                mPfd.close();
            } catch (IOException e1) {
                Log.e(TAG, "bindListen, close mPfd: " + e1);
            }
            mPfd = null;
        }
        Log.e(TAG, "bindListen, fail to get port number, exception: " + e);
        return -1;
    }
    return ret;
}
#method_after
/**
 * Currently returns unix errno instead of throwing IOException,
 * so that BluetoothAdapter can check the error code for EADDRINUSE
 */
int bindListen() {
    int ret;
    if (mSocketState == SocketState.CLOSED)
        return EBADFD;
    IBluetooth bluetoothProxy = BluetoothAdapter.getDefaultAdapter().getBluetoothService(null);
    if (bluetoothProxy == null) {
        Log.e(TAG, "bindListen fail, reason: bluetooth is off");
        return -1;
    }
    try {
        if (DBG)
            Log.d(TAG, "bindListen(): mPort=" + mPort + ", mType=" + mType);
        mPfd = bluetoothProxy.getSocketManager().createSocketChannel(mType, mServiceName, mUuid, mPort, getSecurityFlags());
    } catch (RemoteException e) {
        Log.e(TAG, Log.getStackTraceString(new Throwable()));
        return -1;
    }
    // read out port number
    try {
        synchronized (this) {
            if (DBG) {
                Log.d(TAG, "bindListen(), SocketState: " + mSocketState + ", mPfd: " + mPfd);
            }
            if (mSocketState != SocketState.INIT)
                return EBADFD;
            if (mPfd == null)
                return -1;
            FileDescriptor fd = mPfd.getFileDescriptor();
            if (fd == null) {
                Log.e(TAG, "bindListen(), null file descriptor");
                return -1;
            }
            if (DBG)
                Log.d(TAG, "bindListen(), Create LocalSocket");
            mSocket = LocalSocket.createConnectedLocalSocket(fd);
            if (DBG)
                Log.d(TAG, "bindListen(), new LocalSocket.getInputStream()");
            mSocketIS = mSocket.getInputStream();
            mSocketOS = mSocket.getOutputStream();
        }
        if (DBG)
            Log.d(TAG, "bindListen(), readInt mSocketIS: " + mSocketIS);
        int channel = readInt(mSocketIS);
        synchronized (this) {
            if (mSocketState == SocketState.INIT) {
                mSocketState = SocketState.LISTENING;
            }
        }
        if (DBG)
            Log.d(TAG, "bindListen(): channel=" + channel + ", mPort=" + mPort);
        if (mPort <= -1) {
            mPort = channel;
        }
        // else ASSERT(mPort == channel)
        ret = 0;
    } catch (IOException e) {
        if (mPfd != null) {
            try {
                mPfd.close();
            } catch (IOException e1) {
                Log.e(TAG, "bindListen, close mPfd: " + e1);
            }
            mPfd = null;
        }
        Log.e(TAG, "bindListen, fail to get port number, exception: " + e);
        return -1;
    }
    return ret;
}
#end_block

#method_before
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothSocket createL2capCocSocket(int transport, int psm) throws IOException {
    if (!isBluetoothEnabled()) {
        Log.e(TAG, "createL2capCocSocket: Bluetooth is not enabled");
        throw new IOException();
    }
    // TODO: Add code.
    if (DBG)
        Log.d(TAG, "createL2capCocSocket: transport=" + transport + ", psm=" + psm);
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IOException("Error: unsupported transport=" + transport);
    }
    return new BluetoothSocket(BluetoothSocket.TYPE_L2CAP_LE, -1, true, true, this, psm, null);
}
#method_after
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothSocket createL2capCocSocket(int transport, int psm) throws IOException {
    if (!isBluetoothEnabled()) {
        Log.e(TAG, "createL2capCocSocket: Bluetooth is not enabled");
        throw new IOException();
    }
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IllegalArgumentException("Unsupported transport: " + transport);
    }
    if (DBG)
        Log.d(TAG, "createL2capCocSocket: transport=" + transport + ", psm=" + psm);
    return new BluetoothSocket(BluetoothSocket.TYPE_L2CAP_LE, -1, true, true, this, psm, null);
}
#end_block

#method_before
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throws IOException {
    if (!isBluetoothEnabled()) {
        Log.e(TAG, "createInsecureL2capCocSocket: Bluetooth is not enabled");
        throw new IOException();
    }
    if (DBG) {
        Log.d(TAG, "createInsecureL2capCocSocket: transport=" + transport + ", psm=" + psm);
    }
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IOException("Error: unsupported transport=" + transport);
    }
    return new BluetoothSocket(BluetoothSocket.TYPE_L2CAP_LE, -1, false, false, this, psm, null);
}
#method_after
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothSocket createInsecureL2capCocSocket(int transport, int psm) throws IOException {
    if (!isBluetoothEnabled()) {
        Log.e(TAG, "createInsecureL2capCocSocket: Bluetooth is not enabled");
        throw new IOException();
    }
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IllegalArgumentException("Unsupported transport: " + transport);
    }
    if (DBG) {
        Log.d(TAG, "createInsecureL2capCocSocket: transport=" + transport + ", psm=" + psm);
    }
    return new BluetoothSocket(BluetoothSocket.TYPE_L2CAP_LE, -1, false, false, this, psm, null);
}
#end_block

#method_before
public BluetoothServerSocket listenUsingL2capOn(int port, boolean mitm, boolean min16DigitPin) throws IOException {
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP, true, true, port, mitm, min16DigitPin);
    int errno = socket.mSocket.bindListen();
    if (port == SOCKET_CHANNEL_AUTO_STATIC_NO_SDP) {
        int assigned_channel = socket.mSocket.getPort();
        Log.d(TAG, "listenUsingL2capOn: set assigned channel to " + assigned_channel);
        socket.setChannel(socket.mSocket.getPort());
    }
    if (errno != 0) {
        // socket.mSocket.throwErrnoNative(errno);
        throw new IOException("Error: " + errno);
    }
    return socket;
}
#method_after
public BluetoothServerSocket listenUsingL2capOn(int port, boolean mitm, boolean min16DigitPin) throws IOException {
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP, true, true, port, mitm, min16DigitPin);
    int errno = socket.mSocket.bindListen();
    if (port == SOCKET_CHANNEL_AUTO_STATIC_NO_SDP) {
        int assignedChannel = socket.mSocket.getPort();
        if (DBG)
            Log.d(TAG, "listenUsingL2capOn: set assigned channel to " + assignedChannel);
        socket.setChannel(assignedChannel);
    }
    if (errno != 0) {
        // socket.mSocket.throwErrnoNative(errno);
        throw new IOException("Error: " + errno);
    }
    return socket;
}
#end_block

#method_before
public BluetoothServerSocket listenUsingInsecureL2capOn(int port) throws IOException {
    Log.d(TAG, "listenUsingInsecureL2capOn: port=" + port);
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP, false, false, port, false, false);
    int errno = socket.mSocket.bindListen();
    if (port == SOCKET_CHANNEL_AUTO_STATIC_NO_SDP) {
        int assigned_channel = socket.mSocket.getPort();
        Log.d(TAG, "listenUsingInsecureL2capOn: set assigned channel to " + assigned_channel);
        socket.setChannel(socket.mSocket.getPort());
    }
    if (errno != 0) {
        // socket.mSocket.throwErrnoNative(errno);
        throw new IOException("Error: " + errno);
    }
    return socket;
}
#method_after
public BluetoothServerSocket listenUsingInsecureL2capOn(int port) throws IOException {
    Log.d(TAG, "listenUsingInsecureL2capOn: port=" + port);
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP, false, false, port, false, false);
    int errno = socket.mSocket.bindListen();
    if (port == SOCKET_CHANNEL_AUTO_STATIC_NO_SDP) {
        int assignedChannel = socket.mSocket.getPort();
        if (DBG) {
            Log.d(TAG, "listenUsingInsecureL2capOn: set assigned channel to " + assignedChannel);
        }
        socket.setChannel(assignedChannel);
    }
    if (errno != 0) {
        // socket.mSocket.throwErrnoNative(errno);
        throw new IOException("Error: " + errno);
    }
    return socket;
}
#end_block

#method_before
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothServerSocket listenUsingL2capCoc(int transport) throws IOException {
    if (DBG)
        Log.d(TAG, "listenUsingL2capCoc(): transport=" + transport + ", no uuid");
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IOException("Error: unsupported transport=" + transport);
    }
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP_LE, true, true, SOCKET_CHANNEL_AUTO_STATIC_NO_SDP, false, false);
    int errno = socket.mSocket.bindListen();
    if (errno != 0) {
        throw new IOException("Error: " + errno);
    }
    int assigned_channel = socket.mSocket.getPort();
    Log.d(TAG, "listenUsingInsecureL2capOn: set assigned channel to " + assigned_channel);
    if (assigned_channel == 0) {
        throw new IOException("Error: Unable to assign PSM value");
    }
    socket.setChannel(socket.mSocket.getPort());
    return socket;
}
#method_after
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothServerSocket listenUsingL2capCoc(int transport) throws IOException {
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IllegalArgumentException("Unsupported transport: " + transport);
    }
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP_LE, true, true, SOCKET_CHANNEL_AUTO_STATIC_NO_SDP, false, false);
    int errno = socket.mSocket.bindListen();
    if (errno != 0) {
        throw new IOException("Error: " + errno);
    }
    int assignedPsm = socket.mSocket.getPort();
    if (assignedPsm == 0) {
        throw new IOException("Error: Unable to assign PSM value");
    }
    if (DBG) {
        Log.d(TAG, "listenUsingL2capCoc: set assigned PSM to " + assignedPsm);
    }
    socket.setChannel(assignedPsm);
    return socket;
}
#end_block

#method_before
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothServerSocket listenUsingInsecureL2capCoc(int transport) throws IOException {
    if (DBG) {
        Log.d(TAG, "listenUsingInsecureL2capCoc(): transport=" + transport + ", no uuid");
    }
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IOException("Error: unsupported transport=" + transport);
    }
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP_LE, false, false, SOCKET_CHANNEL_AUTO_STATIC_NO_SDP, false, false);
    int errno = socket.mSocket.bindListen();
    if (errno != 0) {
        throw new IOException("Error: " + errno);
    }
    int assigned_channel = socket.mSocket.getPort();
    Log.d(TAG, "listenUsingInsecureL2capOn: set assigned channel to " + assigned_channel);
    if (assigned_channel == 0) {
        throw new IOException("Error: Unable to assign PSM value");
    }
    socket.setChannel(socket.mSocket.getPort());
    return socket;
}
#method_after
@RequiresPermission(Manifest.permission.BLUETOOTH)
public BluetoothServerSocket listenUsingInsecureL2capCoc(int transport) throws IOException {
    if (transport != BluetoothDevice.TRANSPORT_LE) {
        throw new IllegalArgumentException("Unsupported transport: " + transport);
    }
    BluetoothServerSocket socket = new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP_LE, false, false, SOCKET_CHANNEL_AUTO_STATIC_NO_SDP, false, false);
    int errno = socket.mSocket.bindListen();
    if (errno != 0) {
        throw new IOException("Error: " + errno);
    }
    int assignedPsm = socket.mSocket.getPort();
    if (assignedPsm == 0) {
        throw new IOException("Error: Unable to assign PSM value");
    }
    if (DBG) {
        Log.d(TAG, "listenUsingInsecureL2capOn: set assigned PSM to " + assignedPsm);
    }
    socket.setChannel(assignedPsm);
    return socket;
}
#end_block

#method_before
public void close() throws IOException {
    Log.w(TAG, "BluetoothServerSocket:close() called. mChannel=" + mChannel);
    synchronized (this) {
        if (mHandler != null) {
            mHandler.obtainMessage(mMessage).sendToTarget();
        }
    }
    mSocket.close();
}
#method_after
public void close() throws IOException {
    if (DBG)
        Log.d(TAG, "BluetoothServerSocket:close() called. mChannel=" + mChannel);
    synchronized (this) {
        if (mHandler != null) {
            mHandler.obtainMessage(mMessage).sendToTarget();
        }
    }
    mSocket.close();
}
#end_block

#method_before
public int getPsm() {
    // TODO: Add code
    return mChannel;
}
#method_after
public int getPsm() {
    return mChannel;
}
#end_block

#method_before
public static FragmentController startupFragmentController(Parcelable savedState, ViewModelStore viewModelStore, ActivityTestRule<EmptyFragmentTestActivity> rule) {
    final FragmentController fc = FragmentController.createController(new HostCallbacks(rule.getActivity(), viewModelStore));
    fc.attachHost(null);
    fc.restoreSaveState(savedState);
    fc.dispatchCreate();
    fc.dispatchActivityCreated();
    fc.noteStateNotSaved();
    fc.execPendingActions();
    fc.dispatchStart();
    fc.dispatchResume();
    fc.execPendingActions();
    return fc;
}
#method_after
public static FragmentController startupFragmentController(FragmentActivity activity, Parcelable savedState, ViewModelStore viewModelStore) {
    final FragmentController fc = FragmentController.createController(new HostCallbacks(activity, viewModelStore));
    fc.attachHost(null);
    fc.restoreSaveState(savedState);
    fc.dispatchCreate();
    fc.dispatchActivityCreated();
    fc.noteStateNotSaved();
    fc.execPendingActions();
    fc.dispatchStart();
    fc.dispatchResume();
    fc.execPendingActions();
    return fc;
}
#end_block

#method_before
public static FragmentController restartFragmentController(FragmentController fc, ViewModelStore viewModelStore, ActivityTestRule<EmptyFragmentTestActivity> rule) {
    Parcelable savedState = shutdownFragmentController(fc, viewModelStore);
    return startupFragmentController(savedState, viewModelStore, rule);
}
#method_after
public static FragmentController restartFragmentController(FragmentActivity activity, FragmentController fc, ViewModelStore viewModelStore) {
    Parcelable savedState = shutdownFragmentController(fc, viewModelStore);
    return startupFragmentController(activity, savedState, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void testSavedInstanceStateAfterRestore() {
    final ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc1 = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm1 = fc1.getSupportFragmentManager();
    // Add the initial state
    final StrictFragment parentFragment = new StrictFragment();
    parentFragment.setRetainInstance(true);
    final StrictFragment childFragment = new StrictFragment();
    fm1.beginTransaction().add(parentFragment, "parent").commitNow();
    final FragmentManager childFragmentManager = parentFragment.getChildFragmentManager();
    childFragmentManager.beginTransaction().add(childFragment, "child").commitNow();
    // Confirm the initial state
    assertWithMessage("Initial parent saved instance state should be null").that(parentFragment.mSavedInstanceState).isNull();
    assertWithMessage("Initial child saved instance state should be null").that(childFragment.mSavedInstanceState).isNull();
    // Bring the state back down to destroyed, simulating an activity restart
    fc1.dispatchPause();
    final Parcelable savedState = fc1.saveAllState();
    fc1.dispatchStop();
    fc1.dispatchDestroy();
    // Create the new controller and restore state
    final FragmentController fc2 = startupFragmentController(savedState, viewModelStore, mActivityRule);
    final FragmentManager fm2 = fc2.getSupportFragmentManager();
    final StrictFragment restoredParentFragment = (StrictFragment) fm2.findFragmentByTag("parent");
    assertNotNull("Parent fragment was not restored", restoredParentFragment);
    final StrictFragment restoredChildFragment = (StrictFragment) restoredParentFragment.getChildFragmentManager().findFragmentByTag("child");
    assertNotNull("Child fragment was not restored", restoredChildFragment);
    assertWithMessage("Parent fragment saved instance state should still be null " + "since it is a retained Fragment").that(restoredParentFragment.mSavedInstanceState).isNull();
    assertWithMessage("Child fragment saved instance state should be non-null").that(restoredChildFragment.mSavedInstanceState).isNotNull();
    // Bring the state back down to destroyed before we finish the test
    shutdownFragmentController(fc2, viewModelStore);
}
#method_after
@Test
@UiThreadTest
public void testSavedInstanceStateAfterRestore() {
    final ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc1 = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm1 = fc1.getSupportFragmentManager();
    // Add the initial state
    final StrictFragment parentFragment = new StrictFragment();
    parentFragment.setRetainInstance(true);
    final StrictFragment childFragment = new StrictFragment();
    fm1.beginTransaction().add(parentFragment, "parent").commitNow();
    final FragmentManager childFragmentManager = parentFragment.getChildFragmentManager();
    childFragmentManager.beginTransaction().add(childFragment, "child").commitNow();
    // Confirm the initial state
    assertWithMessage("Initial parent saved instance state should be null").that(parentFragment.mSavedInstanceState).isNull();
    assertWithMessage("Initial child saved instance state should be null").that(childFragment.mSavedInstanceState).isNull();
    // Bring the state back down to destroyed, simulating an activity restart
    fc1.dispatchPause();
    final Parcelable savedState = fc1.saveAllState();
    fc1.dispatchStop();
    fc1.dispatchDestroy();
    // Create the new controller and restore state
    final FragmentController fc2 = startupFragmentController(mActivityRule.getActivity(), savedState, viewModelStore);
    final FragmentManager fm2 = fc2.getSupportFragmentManager();
    final StrictFragment restoredParentFragment = (StrictFragment) fm2.findFragmentByTag("parent");
    assertNotNull("Parent fragment was not restored", restoredParentFragment);
    final StrictFragment restoredChildFragment = (StrictFragment) restoredParentFragment.getChildFragmentManager().findFragmentByTag("child");
    assertNotNull("Child fragment was not restored", restoredChildFragment);
    assertWithMessage("Parent fragment saved instance state should still be null " + "since it is a retained Fragment").that(restoredParentFragment.mSavedInstanceState).isNull();
    assertWithMessage("Child fragment saved instance state should be non-null").that(restoredChildFragment.mSavedInstanceState).isNotNull();
    // Bring the state back down to destroyed before we finish the test
    shutdownFragmentController(fc2, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void saveAnimationState() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    FragmentManager fm = fc.getSupportFragmentManager();
    fm.beginTransaction().setCustomAnimations(0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out).add(android.R.id.content, SimpleFragment.create(R.layout.fragment_a)).addToBackStack(null).commit();
    fm.executePendingTransactions();
    assertAnimationsMatch(fm, 0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out);
    // Causes save and restore of fragments and back stack
    fc = restartFragmentController(fc, viewModelStore, mActivityRule);
    fm = fc.getSupportFragmentManager();
    assertAnimationsMatch(fm, 0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out);
    fm.beginTransaction().setCustomAnimations(R.anim.fade_in, R.anim.fade_out, 0, 0).replace(android.R.id.content, SimpleFragment.create(R.layout.fragment_b)).addToBackStack(null).commit();
    fm.executePendingTransactions();
    assertAnimationsMatch(fm, R.anim.fade_in, R.anim.fade_out, 0, 0);
    // Causes save and restore of fragments and back stack
    fc = restartFragmentController(fc, viewModelStore, mActivityRule);
    fm = fc.getSupportFragmentManager();
    assertAnimationsMatch(fm, R.anim.fade_in, R.anim.fade_out, 0, 0);
    fm.popBackStackImmediate();
    assertAnimationsMatch(fm, 0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out);
    shutdownFragmentController(fc, viewModelStore);
}
#method_after
@Test
@UiThreadTest
public void saveAnimationState() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    FragmentManager fm = fc.getSupportFragmentManager();
    fm.beginTransaction().setCustomAnimations(0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out).add(android.R.id.content, SimpleFragment.create(R.layout.fragment_a)).addToBackStack(null).commit();
    fm.executePendingTransactions();
    assertAnimationsMatch(fm, 0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out);
    // Causes save and restore of fragments and back stack
    fc = restartFragmentController(mActivityRule.getActivity(), fc, viewModelStore);
    fm = fc.getSupportFragmentManager();
    assertAnimationsMatch(fm, 0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out);
    fm.beginTransaction().setCustomAnimations(R.anim.fade_in, R.anim.fade_out, 0, 0).replace(android.R.id.content, SimpleFragment.create(R.layout.fragment_b)).addToBackStack(null).commit();
    fm.executePendingTransactions();
    assertAnimationsMatch(fm, R.anim.fade_in, R.anim.fade_out, 0, 0);
    // Causes save and restore of fragments and back stack
    fc = restartFragmentController(mActivityRule.getActivity(), fc, viewModelStore);
    fm = fc.getSupportFragmentManager();
    assertAnimationsMatch(fm, R.anim.fade_in, R.anim.fade_out, 0, 0);
    fm.popBackStackImmediate();
    assertAnimationsMatch(fm, 0, R.anim.fade_out, R.anim.fade_in, R.anim.fade_out);
    shutdownFragmentController(fc, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void fragmentDestroyedOnFinish() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    FragmentManager fm = fc.getSupportFragmentManager();
    StrictViewFragment fragmentA = StrictViewFragment.create(R.layout.fragment_a);
    StrictViewFragment fragmentB = StrictViewFragment.create(R.layout.fragment_b);
    fm.beginTransaction().add(android.R.id.content, fragmentA).commit();
    fm.executePendingTransactions();
    fm.beginTransaction().replace(android.R.id.content, fragmentB).addToBackStack(null).commit();
    fm.executePendingTransactions();
    shutdownFragmentController(fc, viewModelStore);
    assertTrue(fragmentB.mCalledOnDestroy);
    assertTrue(fragmentA.mCalledOnDestroy);
}
#method_after
@Test
@UiThreadTest
public void fragmentDestroyedOnFinish() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    FragmentManager fm = fc.getSupportFragmentManager();
    StrictViewFragment fragmentA = StrictViewFragment.create(R.layout.fragment_a);
    StrictViewFragment fragmentB = StrictViewFragment.create(R.layout.fragment_b);
    fm.beginTransaction().add(android.R.id.content, fragmentA).commit();
    fm.executePendingTransactions();
    fm.beginTransaction().replace(android.R.id.content, fragmentB).addToBackStack(null).commit();
    fm.executePendingTransactions();
    shutdownFragmentController(fc, viewModelStore);
    assertTrue(fragmentB.mCalledOnDestroy);
    assertTrue(fragmentA.mCalledOnDestroy);
}
#end_block

#method_before
private void testLifecycleTransitionFailure(final int fromState, final int toState) throws Throwable {
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            final ViewModelStore viewModelStore = new ViewModelStore();
            final FragmentController fc1 = startupFragmentController(null, viewModelStore, mActivityRule);
            final FragmentManager fm1 = fc1.getSupportFragmentManager();
            final Fragment reentrantFragment = ReentrantFragment.create(fromState, toState);
            fm1.beginTransaction().add(reentrantFragment, "reentrant").commit();
            try {
                fm1.executePendingTransactions();
            } catch (IllegalStateException e) {
                fail("An exception shouldn't happen when initially adding the fragment");
            }
            // Now shut down the fragment controller. When fromState > toState, this should
            // result in an exception
            Parcelable savedState;
            try {
                fc1.dispatchPause();
                savedState = fc1.saveAllState();
                fc1.dispatchStop();
                fc1.dispatchDestroy();
                if (fromState > toState) {
                    fail("Expected IllegalStateException when moving from " + StrictFragment.stateToString(fromState) + " to " + StrictFragment.stateToString(toState));
                }
            } catch (IllegalStateException e) {
                if (fromState < toState) {
                    fail("Unexpected IllegalStateException when moving from " + StrictFragment.stateToString(fromState) + " to " + StrictFragment.stateToString(toState));
                }
                // test passed!
                return;
            }
            try {
                startupFragmentController(savedState, viewModelStore, mActivityRule);
                fail("Expected IllegalStateException when moving from " + StrictFragment.stateToString(fromState) + " to " + StrictFragment.stateToString(toState));
            } catch (IllegalStateException e) {
            // expected, so the test passed!
            }
        }
    });
}
#method_after
private void testLifecycleTransitionFailure(final int fromState, final int toState) throws Throwable {
    mActivityRule.runOnUiThread(new Runnable() {

        @Override
        public void run() {
            final ViewModelStore viewModelStore = new ViewModelStore();
            final FragmentController fc1 = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
            final FragmentManager fm1 = fc1.getSupportFragmentManager();
            final Fragment reentrantFragment = ReentrantFragment.create(fromState, toState);
            fm1.beginTransaction().add(reentrantFragment, "reentrant").commit();
            try {
                fm1.executePendingTransactions();
            } catch (IllegalStateException e) {
                fail("An exception shouldn't happen when initially adding the fragment");
            }
            // Now shut down the fragment controller. When fromState > toState, this should
            // result in an exception
            Parcelable savedState;
            try {
                fc1.dispatchPause();
                savedState = fc1.saveAllState();
                fc1.dispatchStop();
                fc1.dispatchDestroy();
                if (fromState > toState) {
                    fail("Expected IllegalStateException when moving from " + StrictFragment.stateToString(fromState) + " to " + StrictFragment.stateToString(toState));
                }
            } catch (IllegalStateException e) {
                if (fromState < toState) {
                    fail("Unexpected IllegalStateException when moving from " + StrictFragment.stateToString(fromState) + " to " + StrictFragment.stateToString(toState));
                }
                // test passed!
                return;
            }
            try {
                startupFragmentController(mActivityRule.getActivity(), savedState, viewModelStore);
                fail("Expected IllegalStateException when moving from " + StrictFragment.stateToString(fromState) + " to " + StrictFragment.stateToString(toState));
            } catch (IllegalStateException e) {
            // expected, so the test passed!
            }
        }
    });
}
#end_block

#method_before
@Test
@UiThreadTest
public void noPrematureStateChange() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    FragmentManager fm = fc.getSupportFragmentManager();
    fm.beginTransaction().add(new StrictFragment(), "1").commitNow();
    fc = restartFragmentController(fc, viewModelStore, mActivityRule);
    fm = fc.getSupportFragmentManager();
    StrictFragment fragment1 = (StrictFragment) fm.findFragmentByTag("1");
    assertWithMessage("Fragment should be resumed after restart").that(fragment1.mCalledOnResume).isTrue();
    fragment1.mCalledOnResume = false;
    fc.dispatchResume();
    assertWithMessage("Fragment should not get onResume() after second dispatchResume()").that(fragment1.mCalledOnResume).isFalse();
}
#method_after
@Test
@UiThreadTest
public void noPrematureStateChange() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    FragmentManager fm = fc.getSupportFragmentManager();
    fm.beginTransaction().add(new StrictFragment(), "1").commitNow();
    fc = restartFragmentController(mActivityRule.getActivity(), fc, viewModelStore);
    fm = fc.getSupportFragmentManager();
    StrictFragment fragment1 = (StrictFragment) fm.findFragmentByTag("1");
    assertWithMessage("Fragment should be resumed after restart").that(fragment1.mCalledOnResume).isTrue();
    fragment1.mCalledOnResume = false;
    fc.dispatchResume();
    assertWithMessage("Fragment should not get onResume() after second dispatchResume()").that(fragment1.mCalledOnResume).isFalse();
}
#end_block

#method_before
@Test
@UiThreadTest
public void testIsStateSaved() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    FragmentManager fm = fc.getSupportFragmentManager();
    Fragment f = new StrictFragment();
    fm.beginTransaction().add(f, "1").commitNow();
    assertFalse("fragment reported state saved while resumed", f.isStateSaved());
    fc.dispatchPause();
    fc.saveAllState();
    assertTrue("fragment reported state not saved after saveAllState", f.isStateSaved());
    fc.dispatchStop();
    assertTrue("fragment reported state not saved after stop", f.isStateSaved());
    viewModelStore.clear();
    fc.dispatchDestroy();
    assertFalse("fragment reported state saved after destroy", f.isStateSaved());
}
#method_after
@Test
@UiThreadTest
public void testIsStateSaved() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    FragmentManager fm = fc.getSupportFragmentManager();
    Fragment f = new StrictFragment();
    fm.beginTransaction().add(f, "1").commitNow();
    assertFalse("fragment reported state saved while resumed", f.isStateSaved());
    fc.dispatchPause();
    fc.saveAllState();
    assertTrue("fragment reported state not saved after saveAllState", f.isStateSaved());
    fc.dispatchStop();
    assertTrue("fragment reported state not saved after stop", f.isStateSaved());
    viewModelStore.clear();
    fc.dispatchDestroy();
    assertFalse("fragment reported state saved after destroy", f.isStateSaved());
}
#end_block

#method_before
@Test
@UiThreadTest
public void testSetArgumentsLifecycle() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    FragmentManager fm = fc.getSupportFragmentManager();
    Fragment f = new StrictFragment();
    f.setArguments(new Bundle());
    fm.beginTransaction().add(f, "1").commitNow();
    f.setArguments(new Bundle());
    fc.dispatchPause();
    fc.saveAllState();
    boolean threw = false;
    try {
        f.setArguments(new Bundle());
    } catch (IllegalStateException ise) {
        threw = true;
    }
    assertTrue("fragment allowed setArguments after state save", threw);
    fc.dispatchStop();
    threw = false;
    try {
        f.setArguments(new Bundle());
    } catch (IllegalStateException ise) {
        threw = true;
    }
    assertTrue("fragment allowed setArguments after stop", threw);
    viewModelStore.clear();
    fc.dispatchDestroy();
    // Fully destroyed, so fragments have been removed.
    f.setArguments(new Bundle());
}
#method_after
@Test
@UiThreadTest
public void testSetArgumentsLifecycle() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    FragmentManager fm = fc.getSupportFragmentManager();
    Fragment f = new StrictFragment();
    f.setArguments(new Bundle());
    fm.beginTransaction().add(f, "1").commitNow();
    f.setArguments(new Bundle());
    fc.dispatchPause();
    fc.saveAllState();
    boolean threw = false;
    try {
        f.setArguments(new Bundle());
    } catch (IllegalStateException ise) {
        threw = true;
    }
    assertTrue("fragment allowed setArguments after state save", threw);
    fc.dispatchStop();
    threw = false;
    try {
        f.setArguments(new Bundle());
    } catch (IllegalStateException ise) {
        threw = true;
    }
    assertTrue("fragment allowed setArguments after stop", threw);
    viewModelStore.clear();
    fc.dispatchDestroy();
    // Fully destroyed, so fragments have been removed.
    f.setArguments(new Bundle());
}
#end_block

#method_before
/*
     * Test that target fragments are in a useful state when we restore them, even if they're
     * on the back stack.
     */
@Test
@UiThreadTest
public void targetFragmentRestoreLifecycleStateBackStack() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc1 = FragmentController.createController(new HostCallbacks(mActivityRule.getActivity(), viewModelStore));
    final FragmentManager fm1 = fc1.getSupportFragmentManager();
    fc1.attachHost(null);
    fc1.dispatchCreate();
    final Fragment target = new TargetFragment();
    fm1.beginTransaction().add(target, "target").commitNow();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    fm1.beginTransaction().remove(target).add(referrer, "referrer").addToBackStack(null).commit();
    fc1.dispatchActivityCreated();
    fc1.noteStateNotSaved();
    fc1.execPendingActions();
    fc1.dispatchStart();
    fc1.dispatchResume();
    fc1.execPendingActions();
    // Simulate an activity restart
    final FragmentController fc2 = restartFragmentController(fc1, viewModelStore, mActivityRule);
    // Bring the state back down to destroyed before we finish the test
    shutdownFragmentController(fc2, viewModelStore);
}
#method_after
/*
     * Test that target fragments are in a useful state when we restore them, even if they're
     * on the back stack.
     */
@Test
@UiThreadTest
public void targetFragmentRestoreLifecycleStateBackStack() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc1 = FragmentController.createController(new HostCallbacks(mActivityRule.getActivity(), viewModelStore));
    final FragmentManager fm1 = fc1.getSupportFragmentManager();
    fc1.attachHost(null);
    fc1.dispatchCreate();
    final Fragment target = new TargetFragment();
    fm1.beginTransaction().add(target, "target").commitNow();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    fm1.beginTransaction().remove(target).add(referrer, "referrer").addToBackStack(null).commit();
    fc1.dispatchActivityCreated();
    fc1.noteStateNotSaved();
    fc1.execPendingActions();
    fc1.dispatchStart();
    fc1.dispatchResume();
    fc1.execPendingActions();
    // Simulate an activity restart
    final FragmentController fc2 = restartFragmentController(mActivityRule.getActivity(), fc1, viewModelStore);
    // Bring the state back down to destroyed before we finish the test
    shutdownFragmentController(fc2, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentRestoreLifecycleStateManagerOrder() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc1 = FragmentController.createController(new HostCallbacks(mActivityRule.getActivity(), viewModelStore));
    final FragmentManager fm1 = fc1.getSupportFragmentManager();
    fc1.attachHost(null);
    fc1.dispatchCreate();
    final Fragment target1 = new TargetFragment();
    final Fragment referrer1 = new ReferrerFragment();
    referrer1.setTargetFragment(target1, 0);
    fm1.beginTransaction().add(target1, "target1").add(referrer1, "referrer1").commitNow();
    final Fragment target2 = new TargetFragment();
    final Fragment referrer2 = new ReferrerFragment();
    referrer2.setTargetFragment(target2, 0);
    // Order shouldn't matter.
    fm1.beginTransaction().add(referrer2, "referrer2").add(target2, "target2").commitNow();
    fc1.dispatchActivityCreated();
    fc1.noteStateNotSaved();
    fc1.execPendingActions();
    fc1.dispatchStart();
    fc1.dispatchResume();
    fc1.execPendingActions();
    // Simulate an activity restart
    final FragmentController fc2 = restartFragmentController(fc1, viewModelStore, mActivityRule);
    // Bring the state back down to destroyed before we finish the test
    shutdownFragmentController(fc2, viewModelStore);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentRestoreLifecycleStateManagerOrder() throws Throwable {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc1 = FragmentController.createController(new HostCallbacks(mActivityRule.getActivity(), viewModelStore));
    final FragmentManager fm1 = fc1.getSupportFragmentManager();
    fc1.attachHost(null);
    fc1.dispatchCreate();
    final Fragment target1 = new TargetFragment();
    final Fragment referrer1 = new ReferrerFragment();
    referrer1.setTargetFragment(target1, 0);
    fm1.beginTransaction().add(target1, "target1").add(referrer1, "referrer1").commitNow();
    final Fragment target2 = new TargetFragment();
    final Fragment referrer2 = new ReferrerFragment();
    referrer2.setTargetFragment(target2, 0);
    // Order shouldn't matter.
    fm1.beginTransaction().add(referrer2, "referrer2").add(target2, "target2").commitNow();
    fc1.dispatchActivityCreated();
    fc1.noteStateNotSaved();
    fc1.execPendingActions();
    fc1.dispatchStart();
    fc1.dispatchResume();
    fc1.execPendingActions();
    // Simulate an activity restart
    final FragmentController fc2 = restartFragmentController(mActivityRule.getActivity(), fc1, viewModelStore);
    // Bring the state back down to destroyed before we finish the test
    shutdownFragmentController(fc2, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentClearedWhenSetToNull() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    referrer.setTargetFragment(null, 0);
    assertWithMessage("Target Fragment should cleared after setTargetFragment with null").that(referrer.getTargetFragment()).isNull();
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should still be cleared after being removed").that(referrer.getTargetFragment()).isNull();
    shutdownFragmentController(fc, viewModelStore);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentClearedWhenSetToNull() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    referrer.setTargetFragment(null, 0);
    assertWithMessage("Target Fragment should cleared after setTargetFragment with null").that(referrer.getTargetFragment()).isNull();
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should still be cleared after being removed").that(referrer.getTargetFragment()).isNull();
    shutdownFragmentController(fc, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentOnlyTargetAdded() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    // Add just the target Fragment to the FragmentManager
    fm.beginTransaction().add(target, "target").commitNow();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should be accessible after being removed").that(referrer.getTargetFragment()).isSameAs(target);
    shutdownFragmentController(fc, viewModelStore);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentOnlyTargetAdded() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    // Add just the target Fragment to the FragmentManager
    fm.beginTransaction().add(target, "target").commitNow();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should be accessible after being removed").that(referrer.getTargetFragment()).isSameAs(target);
    shutdownFragmentController(fc, viewModelStore);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentNonRetainedNonRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should be accessible after being removed").that(referrer.getTargetFragment()).isSameAs(target);
    shutdownFragmentController(fc, viewModelStore);
    assertWithMessage("Target Fragment should be accessible after destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentNonRetainedNonRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should be accessible after being removed").that(referrer.getTargetFragment()).isSameAs(target);
    shutdownFragmentController(fc, viewModelStore);
    assertWithMessage("Target Fragment should be accessible after destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentRetainedNonRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    target.setRetainInstance(true);
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should be accessible after being removed").that(referrer.getTargetFragment()).isSameAs(target);
    shutdownFragmentController(fc, viewModelStore);
    assertWithMessage("Target Fragment should be accessible after destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentRetainedNonRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    target.setRetainInstance(true);
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().remove(referrer).commitNow();
    assertWithMessage("Target Fragment should be accessible after being removed").that(referrer.getTargetFragment()).isSameAs(target);
    shutdownFragmentController(fc, viewModelStore);
    assertWithMessage("Target Fragment should be accessible after destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentNonRetainedRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    referrer.setRetainInstance(true);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    // Save the state
    fc.dispatchPause();
    fc.saveAllState();
    fc.dispatchStop();
    fc.dispatchDestroy();
    assertWithMessage("Target Fragment should be accessible after target Fragment destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentNonRetainedRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    final Fragment referrer = new ReferrerFragment();
    referrer.setTargetFragment(target, 0);
    referrer.setRetainInstance(true);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    // Save the state
    fc.dispatchPause();
    fc.saveAllState();
    fc.dispatchStop();
    fc.dispatchDestroy();
    assertWithMessage("Target Fragment should be accessible after target Fragment destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#end_block

#method_before
@Test
@UiThreadTest
public void targetFragmentRetainedRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(null, viewModelStore, mActivityRule);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    target.setRetainInstance(true);
    final Fragment referrer = new ReferrerFragment();
    referrer.setRetainInstance(true);
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    // Save the state
    fc.dispatchPause();
    fc.saveAllState();
    fc.dispatchStop();
    fc.dispatchDestroy();
    assertWithMessage("Target Fragment should be accessible after FragmentManager destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#method_after
@Test
@UiThreadTest
public void targetFragmentRetainedRetained() {
    ViewModelStore viewModelStore = new ViewModelStore();
    final FragmentController fc = startupFragmentController(mActivityRule.getActivity(), null, viewModelStore);
    final FragmentManager fm = fc.getSupportFragmentManager();
    final Fragment target = new TargetFragment();
    target.setRetainInstance(true);
    final Fragment referrer = new ReferrerFragment();
    referrer.setRetainInstance(true);
    referrer.setTargetFragment(target, 0);
    assertWithMessage("Target Fragment should be accessible before being added").that(referrer.getTargetFragment()).isSameAs(target);
    fm.beginTransaction().add(target, "target").add(referrer, "referrer").commitNow();
    assertWithMessage("Target Fragment should be accessible after being added").that(referrer.getTargetFragment()).isSameAs(target);
    // Save the state
    fc.dispatchPause();
    fc.saveAllState();
    fc.dispatchStop();
    fc.dispatchDestroy();
    assertWithMessage("Target Fragment should be accessible after FragmentManager destruction").that(referrer.getTargetFragment()).isSameAs(target);
}
#end_block

#method_before
public void setShowSeekBarValue(boolean showSeekBarValue) {
    mShowSeekBarValue = showSeekBarValue;
}
#method_after
public void setShowSeekBarValue(boolean showSeekBarValue) {
    mShowSeekBarValue = showSeekBarValue;
    notifyChanged();
}
#end_block

#method_before
public synchronized Throwable fillInStackTrace() {
    if (stackTrace != null || backtrace != null) /* Out of protocol state */
    {
        // Android-changed: Use Android-specific nativeFillInStackTrace().
        // fillInStackTrace(0);
        backtrace = nativeFillInStackTrace();
        // Android-changed: Initialize stack trace using libcore.util.EmptyArray.
        // stackTrace = UNASSIGNED_STACK;
        stackTrace = libcore.util.EmptyArray.STACK_TRACE_ELEMENT;
    }
    return this;
}
#method_after
public synchronized Throwable fillInStackTrace() {
    if (stackTrace != null || backtrace != null) /* Out of protocol state */
    {
        // Android-changed: Use Android-specific nativeFillInStackTrace
        // fillInStackTrace(0);
        backtrace = nativeFillInStackTrace();
        // Android-changed: Use libcore.util.EmptyArray for the empty stack trace
        // stackTrace = UNASSIGNED_STACK;
        stackTrace = libcore.util.EmptyArray.STACK_TRACE_ELEMENT;
    }
    return this;
}
#end_block

#method_before
private synchronized StackTraceElement[] getOurStackTrace() {
    // if (stackTrace == UNASSIGNED_STACK ||
    if (stackTrace == libcore.util.EmptyArray.STACK_TRACE_ELEMENT || (stackTrace == null && backtrace != null)) /* Out of protocol state */
    {
        // BEGIN Android-changed: Use Android-specific nativeFillInStackTrace().
        // int depth = getStackTraceDepth();
        // stackTrace = new StackTraceElement[depth];
        // for (int i=0; i < depth; i++)
        // stackTrace[i] = getStackTraceElement(i);
        stackTrace = nativeGetStackTrace(backtrace);
        backtrace = null;
        if (stackTrace == null) {
            return libcore.util.EmptyArray.STACK_TRACE_ELEMENT;
        }
    // END Android-changed: Use Android-specific nativeFillInStackTrace().
    } else if (stackTrace == null) {
        // return UNASSIGNED_STACK;
        return libcore.util.EmptyArray.STACK_TRACE_ELEMENT;
    }
    return stackTrace;
}
#method_after
private synchronized StackTraceElement[] getOurStackTrace() {
    // if (stackTrace == UNASSIGNED_STACK ||
    if (stackTrace == libcore.util.EmptyArray.STACK_TRACE_ELEMENT || (stackTrace == null && backtrace != null)) /* Out of protocol state */
    {
        // BEGIN Android-changed: Use Android-specific nativeGetStackTrace
        // int depth = getStackTraceDepth();
        // stackTrace = new StackTraceElement[depth];
        // for (int i=0; i < depth; i++)
        // stackTrace[i] = getStackTraceElement(i);
        stackTrace = nativeGetStackTrace(backtrace);
        backtrace = null;
        if (stackTrace == null) {
            return libcore.util.EmptyArray.STACK_TRACE_ELEMENT;
        }
    // END Android-changed: Use Android-specific nativeGetStackTrace
    } else if (stackTrace == null) {
        // return UNASSIGNED_STACK;
        return libcore.util.EmptyArray.STACK_TRACE_ELEMENT;
    }
    return stackTrace;
}
#end_block

#method_before
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
    // read in all fields
    s.defaultReadObject();
    if (suppressedExceptions != null) {
        List<Throwable> suppressed = null;
        if (suppressedExceptions.isEmpty()) {
            // Use the sentinel for a zero-length list
            // Android-changed: Use Collections.emptyList() in place of SUPPRESSED_SENTINEL
            // suppressed = SUPPRESSED_SENTINEL;
            suppressed = Collections.emptyList();
        } else {
            // Copy Throwables to new list
            suppressed = new ArrayList<>(1);
            for (Throwable t : suppressedExceptions) {
                // case of corrupt or malicious stream.
                if (t == null)
                    throw new NullPointerException(NULL_CAUSE_MESSAGE);
                if (t == this)
                    throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE);
                suppressed.add(t);
            }
        }
        suppressedExceptions = suppressed;
    }
    /*
         * For zero-length stack traces, use a clone of
         * UNASSIGNED_STACK rather than UNASSIGNED_STACK itself to
         * allow identity comparison against UNASSIGNED_STACK in
         * getOurStackTrace.  The identity of UNASSIGNED_STACK in
         * stackTrace indicates to the getOurStackTrace method that
         * the stackTrace needs to be constructed from the information
         * in backtrace.
         */
    if (stackTrace != null) {
        if (stackTrace.length == 0) {
        // Android-removed: clone() call not needed because of libcore.util.EmptyArray usage
        // stackTrace = UNASSIGNED_STACK.clone();
        } else if (stackTrace.length == 1 && // Check for the marker of an immutable stack trace
        SentinelHolder.STACK_TRACE_ELEMENT_SENTINEL.equals(stackTrace[0])) {
            stackTrace = null;
        } else {
            // Verify stack trace elements are non-null.
            for (StackTraceElement ste : stackTrace) {
                if (ste == null)
                    throw new NullPointerException("null StackTraceElement in serial stream. ");
            }
        }
    } else {
        // A null stackTrace field in the serial form can result
        // from an exception serialized without that field in
        // older JDK releases; treat such exceptions as having
        // empty stack traces.
        // Android-changed: Directly create empty array instead of cloning UNASSIGNED_STACK
        // stackTrace = UNASSIGNED_STACK.clone();
        stackTrace = new StackTraceElement[0];
    }
}
#method_after
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
    // read in all fields
    s.defaultReadObject();
    if (suppressedExceptions != null) {
        List<Throwable> suppressed = null;
        if (suppressedExceptions.isEmpty()) {
            // Use the sentinel for a zero-length list
            // Android-changed: Use empty collection in place of SUPPRESSED_SENTINEL
            // suppressed = SUPPRESSED_SENTINEL;
            suppressed = Collections.emptyList();
        } else {
            // Copy Throwables to new list
            suppressed = new ArrayList<>(1);
            for (Throwable t : suppressedExceptions) {
                // case of corrupt or malicious stream.
                if (t == null)
                    throw new NullPointerException(NULL_CAUSE_MESSAGE);
                if (t == this)
                    throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE);
                suppressed.add(t);
            }
        }
        suppressedExceptions = suppressed;
    }
    /*
         * For zero-length stack traces, use a clone of
         * UNASSIGNED_STACK rather than UNASSIGNED_STACK itself to
         * allow identity comparison against UNASSIGNED_STACK in
         * getOurStackTrace.  The identity of UNASSIGNED_STACK in
         * stackTrace indicates to the getOurStackTrace method that
         * the stackTrace needs to be constructed from the information
         * in backtrace.
         */
    if (stackTrace != null) {
        if (stackTrace.length == 0) {
        // Android-removed: clone() call not needed because of libcore.util.EmptyArray usage
        // stackTrace = UNASSIGNED_STACK.clone();
        } else if (stackTrace.length == 1 && // Check for the marker of an immutable stack trace
        SentinelHolder.STACK_TRACE_ELEMENT_SENTINEL.equals(stackTrace[0])) {
            stackTrace = null;
        } else {
            // Verify stack trace elements are non-null.
            for (StackTraceElement ste : stackTrace) {
                if (ste == null)
                    throw new NullPointerException("null StackTraceElement in serial stream. ");
            }
        }
    } else {
        // A null stackTrace field in the serial form can result
        // from an exception serialized without that field in
        // older JDK releases; treat such exceptions as having
        // empty stack traces.
        // Android-changed: Directly create empty array instead of cloning UNASSIGNED_STACK
        // stackTrace = UNASSIGNED_STACK.clone();
        stackTrace = new StackTraceElement[0];
    }
}
#end_block

#method_before
public void setSpeakerphoneOn(boolean on) {
    if (!checkAudioSettingsPermission("setSpeakerphoneOn()")) {
        return;
    }
    if (UserHandle.getAppId(Binder.getCallingUid()) >= FIRST_APPLICATION_UID) {
        if (mMode == AudioSystem.MODE_IN_CALL) {
            Log.w(TAG, "mMode is call, Permission Denial: setSpeakerphoneOn from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
            return;
        }
        synchronized (mSetModeDeathHandlers) {
            Iterator iter = mSetModeDeathHandlers.iterator();
            while (iter.hasNext()) {
                SetModeDeathHandler h = (SetModeDeathHandler) iter.next();
                if (h.getMode() == AudioSystem.MODE_IN_CALL) {
                    Log.w(TAG, "getMode is call, Permission Denial: setSpeakerphoneOn from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
                    return;
                }
            }
        }
    }
    // for logging only
    final String eventSource = new StringBuilder("setSpeakerphoneOn(").append(on).append(") from u/pid:").append(Binder.getCallingUid()).append("/").append(Binder.getCallingPid()).toString();
    if (on) {
        if (mForcedUseForComm == AudioSystem.FORCE_BT_SCO) {
            sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_RECORD, AudioSystem.FORCE_NONE, eventSource, 0);
        }
        mForcedUseForComm = AudioSystem.FORCE_SPEAKER;
    } else if (mForcedUseForComm == AudioSystem.FORCE_SPEAKER) {
        mForcedUseForComm = AudioSystem.FORCE_NONE;
    }
    mForcedUseForCommExt = mForcedUseForComm;
    sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_COMMUNICATION, mForcedUseForComm, eventSource, 0);
}
#method_after
public void setSpeakerphoneOn(boolean on) {
    if (!checkAudioSettingsPermission("setSpeakerphoneOn()")) {
        return;
    }
    if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.MODIFY_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {
        synchronized (mSetModeDeathHandlers) {
            for (SetModeDeathHandler h : mSetModeDeathHandlers) {
                if (h.getMode() == AudioSystem.MODE_IN_CALL) {
                    Log.w(TAG, "getMode is call, Permission Denial: setSpeakerphoneOn from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
                    return;
                }
            }
        }
    }
    // for logging only
    final String eventSource = new StringBuilder("setSpeakerphoneOn(").append(on).append(") from u/pid:").append(Binder.getCallingUid()).append("/").append(Binder.getCallingPid()).toString();
    if (on) {
        if (mForcedUseForComm == AudioSystem.FORCE_BT_SCO) {
            sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_RECORD, AudioSystem.FORCE_NONE, eventSource, 0);
        }
        mForcedUseForComm = AudioSystem.FORCE_SPEAKER;
    } else if (mForcedUseForComm == AudioSystem.FORCE_SPEAKER) {
        mForcedUseForComm = AudioSystem.FORCE_NONE;
    }
    mForcedUseForCommExt = mForcedUseForComm;
    sendMsg(mAudioHandler, MSG_SET_FORCE_USE, SENDMSG_QUEUE, AudioSystem.FOR_COMMUNICATION, mForcedUseForComm, eventSource, 0);
}
#end_block

#method_before
private void parsePduFromEfRecord(byte[] pdu) {
    ByteArrayInputStream bais = new ByteArrayInputStream(pdu);
    DataInputStream dis = new DataInputStream(bais);
    SmsEnvelope env = new SmsEnvelope();
    CdmaSmsAddress addr = new CdmaSmsAddress();
    CdmaSmsSubaddress subAddr = new CdmaSmsSubaddress();
    try {
        env.messageType = dis.readByte();
        while (dis.available() > 0) {
            int parameterId = dis.readByte();
            int parameterLen = dis.readUnsignedByte();
            byte[] parameterData = new byte[parameterLen];
            switch(parameterId) {
                case TELESERVICE_IDENTIFIER:
                    /*
                         * 16 bit parameter that identifies which upper layer
                         * service access point is sending or should receive
                         * this message
                         */
                    env.teleService = dis.readUnsignedShort();
                    Rlog.i(LOG_TAG, "teleservice = " + env.teleService);
                    break;
                case SERVICE_CATEGORY:
                    /*
                         * 16 bit parameter that identifies type of service as
                         * in 3GPP2 C.S0015-0 Table 3.4.3.2-1
                         */
                    env.serviceCategory = dis.readUnsignedShort();
                    break;
                case ORIGINATING_ADDRESS:
                case DESTINATION_ADDRESS:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream addrBis = new BitwiseInputStream(parameterData);
                    addr.digitMode = addrBis.read(1);
                    addr.numberMode = addrBis.read(1);
                    int numberType = 0;
                    if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {
                        numberType = addrBis.read(3);
                        addr.ton = numberType;
                        if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK)
                            addr.numberPlan = addrBis.read(4);
                    }
                    addr.numberOfDigits = addrBis.read(8);
                    byte[] data = new byte[addr.numberOfDigits];
                    byte b = 0x00;
                    if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF) {
                        /* As per 3GPP2 C.S0005-0 Table 2.7.1.3.2.4-4 */
                        for (int index = 0; index < addr.numberOfDigits; index++) {
                            b = (byte) (0xF & addrBis.read(4));
                            // convert the value if it is 4-bit DTMF to 8
                            // bit
                            data[index] = convertDtmfToAscii(b);
                        }
                    } else if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {
                        if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK) {
                            for (int index = 0; index < addr.numberOfDigits; index++) {
                                b = (byte) (0xFF & addrBis.read(8));
                                data[index] = b;
                            }
                        } else if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_DATA_NETWORK) {
                            if (numberType == 2)
                                Rlog.e(LOG_TAG, "TODO: Originating Addr is email id");
                            else
                                Rlog.e(LOG_TAG, "TODO: Originating Addr is data network address");
                        } else {
                            Rlog.e(LOG_TAG, "Originating Addr is of incorrect type");
                        }
                    } else {
                        Rlog.e(LOG_TAG, "Incorrect Digit mode");
                    }
                    addr.origBytes = data;
                    Rlog.i(LOG_TAG, "Addr=" + addr.toString());
                    if (parameterId == ORIGINATING_ADDRESS) {
                        mOriginatingAddress = addr;
                        env.origAddress = addr;
                        env.origSubaddress = subAddr;
                    }
                    if (parameterId == DESTINATION_ADDRESS) {
                        env.destAddress = addr;
                        mRecipientAddress = addr;
                        android.util.Log.d("lmj", " DESTINATION_ADDRESS = " + addr.toString());
                    } else {
                        android.util.Log.d("lmj", " ORIGINATING_ADDRESS = " + addr.toString());
                    }
                    break;
                case ORIGINATING_SUB_ADDRESS:
                case DESTINATION_SUB_ADDRESS:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream subAddrBis = new BitwiseInputStream(parameterData);
                    subAddr.type = subAddrBis.read(3);
                    subAddr.odd = subAddrBis.readByteArray(1)[0];
                    int subAddrLen = subAddrBis.read(8);
                    byte[] subdata = new byte[subAddrLen];
                    for (int index = 0; index < subAddrLen; index++) {
                        b = (byte) (0xFF & subAddrBis.read(4));
                        // convert the value if it is 4-bit DTMF to 8 bit
                        subdata[index] = convertDtmfToAscii(b);
                    }
                    subAddr.origBytes = subdata;
                    break;
                case BEARER_REPLY_OPTION:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream replyOptBis = new BitwiseInputStream(parameterData);
                    env.bearerReply = replyOptBis.read(6);
                    break;
                case CAUSE_CODES:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream ccBis = new BitwiseInputStream(parameterData);
                    env.replySeqNo = ccBis.readByteArray(6)[0];
                    env.errorClass = ccBis.readByteArray(2)[0];
                    if (env.errorClass != 0x00)
                        env.causeCode = ccBis.readByteArray(8)[0];
                    break;
                case BEARER_DATA:
                    dis.read(parameterData, 0, parameterLen);
                    env.bearerData = parameterData;
                    break;
                default:
                    throw new Exception("unsupported parameterId (" + parameterId + ")");
            }
        }
        bais.close();
        dis.close();
    } catch (Exception ex) {
        Rlog.e(LOG_TAG, "parsePduFromEfRecord: conversion from pdu to SmsMessage failed" + ex);
    }
    // link the filled objects to this SMS
    mEnvelope = env;
    mPdu = pdu;
    parseSms();
}
#method_after
private void parsePduFromEfRecord(byte[] pdu) {
    ByteArrayInputStream bais = new ByteArrayInputStream(pdu);
    DataInputStream dis = new DataInputStream(bais);
    SmsEnvelope env = new SmsEnvelope();
    CdmaSmsAddress addr = new CdmaSmsAddress();
    CdmaSmsSubaddress subAddr = new CdmaSmsSubaddress();
    try {
        env.messageType = dis.readByte();
        while (dis.available() > 0) {
            int parameterId = dis.readByte();
            int parameterLen = dis.readUnsignedByte();
            byte[] parameterData = new byte[parameterLen];
            switch(parameterId) {
                case TELESERVICE_IDENTIFIER:
                    /*
                         * 16 bit parameter that identifies which upper layer
                         * service access point is sending or should receive
                         * this message
                         */
                    env.teleService = dis.readUnsignedShort();
                    Rlog.i(LOG_TAG, "teleservice = " + env.teleService);
                    break;
                case SERVICE_CATEGORY:
                    /*
                         * 16 bit parameter that identifies type of service as
                         * in 3GPP2 C.S0015-0 Table 3.4.3.2-1
                         */
                    env.serviceCategory = dis.readUnsignedShort();
                    break;
                case ORIGINATING_ADDRESS:
                case DESTINATION_ADDRESS:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream addrBis = new BitwiseInputStream(parameterData);
                    addr.digitMode = addrBis.read(1);
                    addr.numberMode = addrBis.read(1);
                    int numberType = 0;
                    if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {
                        numberType = addrBis.read(3);
                        addr.ton = numberType;
                        if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK)
                            addr.numberPlan = addrBis.read(4);
                    }
                    addr.numberOfDigits = addrBis.read(8);
                    byte[] data = new byte[addr.numberOfDigits];
                    byte b = 0x00;
                    if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF) {
                        /* As per 3GPP2 C.S0005-0 Table 2.7.1.3.2.4-4 */
                        for (int index = 0; index < addr.numberOfDigits; index++) {
                            b = (byte) (0xF & addrBis.read(4));
                            // convert the value if it is 4-bit DTMF to 8
                            // bit
                            data[index] = convertDtmfToAscii(b);
                        }
                    } else if (addr.digitMode == CdmaSmsAddress.DIGIT_MODE_8BIT_CHAR) {
                        if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_NOT_DATA_NETWORK) {
                            for (int index = 0; index < addr.numberOfDigits; index++) {
                                b = (byte) (0xFF & addrBis.read(8));
                                data[index] = b;
                            }
                        } else if (addr.numberMode == CdmaSmsAddress.NUMBER_MODE_DATA_NETWORK) {
                            if (numberType == 2)
                                Rlog.e(LOG_TAG, "TODO: Addr is email id");
                            else
                                Rlog.e(LOG_TAG, "TODO: Addr is data network address");
                        } else {
                            Rlog.e(LOG_TAG, "Addr is of incorrect type");
                        }
                    } else {
                        Rlog.e(LOG_TAG, "Incorrect Digit mode");
                    }
                    addr.origBytes = data;
                    Rlog.pii(LOG_TAG, "Addr=" + addr.toString());
                    mOriginatingAddress = addr;
                    if (parameterId == DESTINATION_ADDRESS) {
                        // Original address awlays indicates one sender's address for 3GPP2
                        // Here add recipient address support along with 3GPP
                        mRecipientAddress = addr;
                    }
                    break;
                case ORIGINATING_SUB_ADDRESS:
                case DESTINATION_SUB_ADDRESS:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream subAddrBis = new BitwiseInputStream(parameterData);
                    subAddr.type = subAddrBis.read(3);
                    subAddr.odd = subAddrBis.readByteArray(1)[0];
                    int subAddrLen = subAddrBis.read(8);
                    byte[] subdata = new byte[subAddrLen];
                    for (int index = 0; index < subAddrLen; index++) {
                        b = (byte) (0xFF & subAddrBis.read(4));
                        // convert the value if it is 4-bit DTMF to 8 bit
                        subdata[index] = convertDtmfToAscii(b);
                    }
                    subAddr.origBytes = subdata;
                    break;
                case BEARER_REPLY_OPTION:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream replyOptBis = new BitwiseInputStream(parameterData);
                    env.bearerReply = replyOptBis.read(6);
                    break;
                case CAUSE_CODES:
                    dis.read(parameterData, 0, parameterLen);
                    BitwiseInputStream ccBis = new BitwiseInputStream(parameterData);
                    env.replySeqNo = ccBis.readByteArray(6)[0];
                    env.errorClass = ccBis.readByteArray(2)[0];
                    if (env.errorClass != 0x00)
                        env.causeCode = ccBis.readByteArray(8)[0];
                    break;
                case BEARER_DATA:
                    dis.read(parameterData, 0, parameterLen);
                    env.bearerData = parameterData;
                    break;
                default:
                    throw new Exception("unsupported parameterId (" + parameterId + ")");
            }
        }
        bais.close();
        dis.close();
    } catch (Exception ex) {
        Rlog.e(LOG_TAG, "parsePduFromEfRecord: conversion from pdu to SmsMessage failed" + ex);
    }
    // link the filled objects to this SMS
    mOriginatingAddress = addr;
    env.origAddress = addr;
    env.origSubaddress = subAddr;
    mEnvelope = env;
    mPdu = pdu;
    parseSms();
}
#end_block

#method_before
private void decodeSmsDisplayAddress(SmsAddress addr) {
    addr.address = new String(addr.origBytes);
    if (addr.ton == CdmaSmsAddress.TON_INTERNATIONAL_OR_IP) {
        if (addr.address.charAt(0) != '+') {
            addr.address = "+" + addr.address;
        }
    }
    android.util.Log.d("lmj", " decodeSmsDisplayAddress = " + addr.address);
}
#method_after
private void decodeSmsDisplayAddress(SmsAddress addr) {
    addr.address = new String(addr.origBytes);
    if (addr.ton == CdmaSmsAddress.TON_INTERNATIONAL_OR_IP) {
        if (addr.address.charAt(0) != '+') {
            addr.address = "+" + addr.address;
        }
    }
    Rlog.pii(LOG_TAG, " decodeSmsDisplayAddress = " + addr.address);
}
#end_block

#method_before
public SmsCbMessage parseBroadcastSms() {
    BearerData bData = BearerData.decode(mEnvelope.bearerData, mEnvelope.serviceCategory);
    if (bData == null) {
        Rlog.w(LOG_TAG, "BearerData.decode() returned null");
        return null;
    }
    if (Rlog.isLoggable(LOGGABLE_TAG, Log.VERBOSE)) {
        Rlog.d(LOG_TAG, "MT raw BearerData = " + HexDump.toHexString(mEnvelope.bearerData));
    }
    String plmn = TelephonyManager.getDefault().getNetworkOperator();
    SmsCbLocation location = new SmsCbLocation(plmn);
    return new SmsCbMessage(SmsCbMessage.MESSAGE_FORMAT_3GPP2, SmsCbMessage.GEOGRAPHICAL_SCOPE_PLMN_WIDE, bData.messageId, location, mEnvelope.serviceCategory, bData.getLanguage(), bData.userData.payloadStr, bData.priority, null, bData.cmasWarningInfo);
}
#method_after
public SmsCbMessage parseBroadcastSms(String plmn) {
    BearerData bData = BearerData.decode(mEnvelope.bearerData, mEnvelope.serviceCategory);
    if (bData == null) {
        Rlog.w(LOG_TAG, "BearerData.decode() returned null");
        return null;
    }
    if (Rlog.isLoggable(LOGGABLE_TAG, Log.VERBOSE)) {
        Rlog.d(LOG_TAG, "MT raw BearerData = " + HexDump.toHexString(mEnvelope.bearerData));
    }
    SmsCbLocation location = new SmsCbLocation(plmn);
    return new SmsCbMessage(SmsCbMessage.MESSAGE_FORMAT_3GPP2, SmsCbMessage.GEOGRAPHICAL_SCOPE_PLMN_WIDE, bData.messageId, location, mEnvelope.serviceCategory, bData.getLanguage(), bData.userData.payloadStr, bData.priority, null, bData.cmasWarningInfo);
}
#end_block

#method_before
private static SubmitPdu privateGetSubmitPdu(String destAddrStr, boolean statusReportRequested, UserData userData, int priority) {
    /**
     * TODO(cleanup): give this function a more meaningful name.
     */
    /**
     * TODO(cleanup): Make returning null from the getSubmitPdu
     * variations meaningful -- clean up the error feedback
     * mechanism, and avoid null pointer exceptions.
     */
    /**
     * North America Plus Code :
     * Convert + code to 011 and dial out for international SMS
     */
    CdmaSmsAddress destAddr = CdmaSmsAddress.parse(PhoneNumberUtils.cdmaCheckAndProcessPlusCodeForSms(destAddrStr));
    if (destAddr == null)
        return null;
    BearerData bearerData = new BearerData();
    bearerData.messageType = BearerData.MESSAGE_TYPE_SUBMIT;
    bearerData.messageId = getNextMessageId();
    bearerData.deliveryAckReq = statusReportRequested;
    bearerData.userAckReq = false;
    bearerData.readAckReq = false;
    bearerData.reportReq = false;
    if (priority >= PRIORITY_NORMAL && priority <= PRIORITY_EMERGENCY) {
        bearerData.priorityIndicatorSet = true;
        bearerData.priority = priority;
    }
    bearerData.userData = userData;
    byte[] encodedBearerData = BearerData.encode(bearerData);
    if (Rlog.isLoggable(LOGGABLE_TAG, Log.VERBOSE)) {
        Rlog.d(LOG_TAG, "MO (encoded) BearerData = " + bearerData);
        Rlog.d(LOG_TAG, "MO raw BearerData = '" + HexDump.toHexString(encodedBearerData) + "'");
    }
    if (encodedBearerData == null)
        return null;
    int teleservice = bearerData.hasUserDataHeader ? SmsEnvelope.TELESERVICE_WEMT : SmsEnvelope.TELESERVICE_WMT;
    SmsEnvelope envelope = new SmsEnvelope();
    envelope.messageType = SmsEnvelope.MESSAGE_TYPE_POINT_TO_POINT;
    envelope.teleService = teleservice;
    envelope.destAddress = destAddr;
    envelope.bearerReply = RETURN_ACK;
    envelope.bearerData = encodedBearerData;
    try {
        /**
         * TODO(cleanup): reference a spec and get rid of the ugly comments
         */
        ByteArrayOutputStream baos = new ByteArrayOutputStream(100);
        DataOutputStream dos = new DataOutputStream(baos);
        dos.writeInt(envelope.teleService);
        // servicePresent
        dos.writeInt(0);
        // serviceCategory
        dos.writeInt(0);
        dos.write(destAddr.digitMode);
        dos.write(destAddr.numberMode);
        // number_type
        dos.write(destAddr.ton);
        dos.write(destAddr.numberPlan);
        dos.write(destAddr.numberOfDigits);
        // digits
        dos.write(destAddr.origBytes, 0, destAddr.origBytes.length);
        // Subaddress is not supported.
        // subaddressType
        dos.write(0);
        // subaddr_odd
        dos.write(0);
        // subaddr_nbr_of_digits
        dos.write(0);
        dos.write(encodedBearerData.length);
        dos.write(encodedBearerData, 0, encodedBearerData.length);
        dos.close();
        SubmitPdu pdu = new SubmitPdu();
        pdu.encodedMessage = baos.toByteArray();
        pdu.encodedScAddress = null;
        return pdu;
    } catch (IOException ex) {
        Rlog.e(LOG_TAG, "creating SubmitPdu failed: " + ex);
    }
    return null;
}
#method_after
private static SubmitPdu privateGetSubmitPdu(String destAddrStr, boolean statusReportRequested, UserData userData, int priority) {
    /**
     * TODO(cleanup): give this function a more meaningful name.
     */
    /**
     * TODO(cleanup): Make returning null from the getSubmitPdu
     * variations meaningful -- clean up the error feedback
     * mechanism, and avoid null pointer exceptions.
     */
    /**
     * North America Plus Code :
     * Convert + code to 011 and dial out for international SMS
     */
    CdmaSmsAddress destAddr = CdmaSmsAddress.parse(PhoneNumberUtils.cdmaCheckAndProcessPlusCodeForSms(destAddrStr));
    if (destAddr == null)
        return null;
    BearerData bearerData = new BearerData();
    bearerData.messageType = BearerData.MESSAGE_TYPE_SUBMIT;
    bearerData.messageId = getNextMessageId();
    bearerData.deliveryAckReq = statusReportRequested;
    bearerData.userAckReq = false;
    bearerData.readAckReq = false;
    bearerData.reportReq = false;
    if (priority >= PRIORITY_NORMAL && priority <= PRIORITY_EMERGENCY) {
        bearerData.priorityIndicatorSet = true;
        bearerData.priority = priority;
    }
    bearerData.userData = userData;
    byte[] encodedBearerData = BearerData.encode(bearerData);
    if (encodedBearerData == null)
        return null;
    if (Rlog.isLoggable(LOGGABLE_TAG, Log.VERBOSE)) {
        Rlog.d(LOG_TAG, "MO (encoded) BearerData = " + bearerData);
        Rlog.d(LOG_TAG, "MO raw BearerData = '" + HexDump.toHexString(encodedBearerData) + "'");
    }
    int teleservice = (bearerData.hasUserDataHeader && userData.msgEncoding != UserData.ENCODING_7BIT_ASCII) ? SmsEnvelope.TELESERVICE_WEMT : SmsEnvelope.TELESERVICE_WMT;
    SmsEnvelope envelope = new SmsEnvelope();
    envelope.messageType = SmsEnvelope.MESSAGE_TYPE_POINT_TO_POINT;
    envelope.teleService = teleservice;
    envelope.destAddress = destAddr;
    envelope.bearerReply = RETURN_ACK;
    envelope.bearerData = encodedBearerData;
    try {
        /**
         * TODO(cleanup): reference a spec and get rid of the ugly comments
         */
        ByteArrayOutputStream baos = new ByteArrayOutputStream(100);
        DataOutputStream dos = new DataOutputStream(baos);
        dos.writeInt(envelope.teleService);
        // servicePresent
        dos.writeInt(0);
        // serviceCategory
        dos.writeInt(0);
        dos.write(destAddr.digitMode);
        dos.write(destAddr.numberMode);
        // number_type
        dos.write(destAddr.ton);
        dos.write(destAddr.numberPlan);
        dos.write(destAddr.numberOfDigits);
        // digits
        dos.write(destAddr.origBytes, 0, destAddr.origBytes.length);
        // Subaddress is not supported.
        // subaddressType
        dos.write(0);
        // subaddr_odd
        dos.write(0);
        // subaddr_nbr_of_digits
        dos.write(0);
        dos.write(encodedBearerData.length);
        dos.write(encodedBearerData, 0, encodedBearerData.length);
        dos.close();
        SubmitPdu pdu = new SubmitPdu();
        pdu.encodedMessage = baos.toByteArray();
        pdu.encodedScAddress = null;
        return pdu;
    } catch (IOException ex) {
        Rlog.e(LOG_TAG, "creating SubmitPdu failed: " + ex);
    }
    return null;
}
#end_block

#method_before
@Deprecated
public static SmsMessage createFromPdu(byte[] pdu) {
    SmsMessage message = null;
    // cdma(3gpp2) vs gsm(3gpp) format info was not given,
    // guess from active voice phone type
    int activePhone = TelephonyManager.getDefault().getCurrentPhoneType();
    String format = (PHONE_TYPE_CDMA == activePhone) ? SmsConstants.FORMAT_3GPP2 : SmsConstants.FORMAT_3GPP;
    message = createFromPdu(pdu, format);
    if (null == message || null == message.mWrappedSmsMessage) {
        // decoding pdu failed based on activePhone type, must be other format
        format = (PHONE_TYPE_CDMA == activePhone) ? SmsConstants.FORMAT_3GPP : SmsConstants.FORMAT_3GPP2;
        message = createFromPdu(pdu, format);
    }
    return message;
}
#method_after
@Deprecated
public static SmsMessage createFromPdu(byte[] pdu) {
    SmsMessage message = null;
    // cdma(3gpp2) vs gsm(3gpp) format info was not given,
    // guess from active voice phone type
    int activePhone = TelephonyManager.getDefault().getCurrentPhoneType();
    String format = (PHONE_TYPE_CDMA == activePhone) ? SmsConstants.FORMAT_3GPP2 : SmsConstants.FORMAT_3GPP;
    return createFromPdu(pdu, format);
}
#end_block

#method_before
public static SmsMessage createFromPdu(byte[] pdu, String format) {
    SmsMessageBase wrappedMessage;
    if (pdu == null) {
        Rlog.i(LOG_TAG, "createFromPdu(): pdu is null");
        return null;
    }
    if (SmsConstants.FORMAT_3GPP2.equals(format)) {
        wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromPdu(pdu);
    } else if (SmsConstants.FORMAT_3GPP.equals(format)) {
        wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromPdu(pdu);
    } else {
        Rlog.e(LOG_TAG, "createFromPdu(): unsupported message format " + format);
        return null;
    }
    if (wrappedMessage != null) {
        return new SmsMessage(wrappedMessage);
    } else {
        Rlog.e(LOG_TAG, "createFromPdu(): wrappedMessage is null");
        return null;
    }
}
#method_after
public static SmsMessage createFromPdu(byte[] pdu, String format) {
    return createFromPdu(pdu, format, true);
}
#end_block

#method_before
public static SmsMessage createFromPdu(byte[] pdu, String format) {
    SmsMessageBase wrappedMessage;
    if (pdu == null) {
        Rlog.i(LOG_TAG, "createFromPdu(): pdu is null");
        return null;
    }
    if (SmsConstants.FORMAT_3GPP2.equals(format)) {
        wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromPdu(pdu);
    } else if (SmsConstants.FORMAT_3GPP.equals(format)) {
        wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromPdu(pdu);
    } else {
        Rlog.e(LOG_TAG, "createFromPdu(): unsupported message format " + format);
        return null;
    }
    if (wrappedMessage != null) {
        return new SmsMessage(wrappedMessage);
    } else {
        Rlog.e(LOG_TAG, "createFromPdu(): wrappedMessage is null");
        return null;
    }
}
#method_after
private static SmsMessage createFromPdu(byte[] pdu, String format, boolean fallbackToOtherFormat) {
    if (pdu == null) {
        Rlog.i(LOG_TAG, "createFromPdu(): pdu is null");
        return null;
    }
    SmsMessageBase wrappedMessage;
    String otherFormat = SmsConstants.FORMAT_3GPP2.equals(format) ? SmsConstants.FORMAT_3GPP : SmsConstants.FORMAT_3GPP2;
    if (SmsConstants.FORMAT_3GPP2.equals(format)) {
        wrappedMessage = com.android.internal.telephony.cdma.SmsMessage.createFromPdu(pdu);
    } else if (SmsConstants.FORMAT_3GPP.equals(format)) {
        wrappedMessage = com.android.internal.telephony.gsm.SmsMessage.createFromPdu(pdu);
    } else {
        Rlog.e(LOG_TAG, "createFromPdu(): unsupported message format " + format);
        return null;
    }
    if (wrappedMessage != null) {
        return new SmsMessage(wrappedMessage);
    } else {
        if (fallbackToOtherFormat) {
            return createFromPdu(pdu, otherFormat, false);
        } else {
            Rlog.e(LOG_TAG, "createFromPdu(): wrappedMessage is null");
            return null;
        }
    }
}
#end_block

#method_before
public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested, byte[] header, int encoding, int languageTable, int languageShiftTable, int validityPeriod) {
    // Perform null parameter checks.
    if (message == null || destinationAddress == null) {
        return null;
    }
    if (encoding == ENCODING_UNKNOWN) {
        // Find the best encoding to use
        TextEncodingDetails ted = calculateLength(message, false);
        encoding = ted.codeUnitSize;
        languageTable = ted.languageTable;
        languageShiftTable = ted.languageShiftTable;
        if (encoding == ENCODING_7BIT && (languageTable != 0 || languageShiftTable != 0)) {
            if (header != null) {
                SmsHeader smsHeader = SmsHeader.fromByteArray(header);
                if (smsHeader.languageTable != languageTable || smsHeader.languageShiftTable != languageShiftTable) {
                    Rlog.w(LOG_TAG, "Updating language table in SMS header: " + smsHeader.languageTable + " -> " + languageTable + ", " + smsHeader.languageShiftTable + " -> " + languageShiftTable);
                    smsHeader.languageTable = languageTable;
                    smsHeader.languageShiftTable = languageShiftTable;
                    header = SmsHeader.toByteArray(smsHeader);
                }
            } else {
                SmsHeader smsHeader = new SmsHeader();
                smsHeader.languageTable = languageTable;
                smsHeader.languageShiftTable = languageShiftTable;
                header = SmsHeader.toByteArray(smsHeader);
            }
        }
    }
    SubmitPdu ret = new SubmitPdu();
    int validityPeriodFormat = VALIDITY_PERIOD_FORMAT_NONE;
    int relativeValidityPeriod = INVALID_VALIDITY_PERIOD;
    // bit 4:3 = 10 - TP-VP field present - relative format
    if ((relativeValidityPeriod = getRelativeValidityPeriod(validityPeriod)) >= 0) {
        validityPeriodFormat = VALIDITY_PERIOD_FORMAT_RELATIVE;
    }
    byte mtiByte = (byte) (0x01 | (validityPeriodFormat << 0x03) | (header != null ? 0x40 : 0x00));
    ByteArrayOutputStream bo = getSubmitPduHead(scAddress, destinationAddress, mtiByte, statusReportRequested, ret);
    // properly later on encodedMessage sanity check.
    if (bo == null)
        return ret;
    // User Data (and length)
    byte[] userData;
    try {
        if (encoding == ENCODING_7BIT) {
            userData = GsmAlphabet.stringToGsm7BitPackedWithHeader(message, header, languageTable, languageShiftTable);
        } else {
            // assume UCS-2
            try {
                userData = encodeUCS2(message, header);
            } catch (UnsupportedEncodingException uex) {
                Rlog.e(LOG_TAG, "Implausible UnsupportedEncodingException ", uex);
                return null;
            }
        }
    } catch (EncodeException ex) {
        // send it as a UCS-2 encoded message
        try {
            userData = encodeUCS2(message, header);
            encoding = ENCODING_16BIT;
        } catch (UnsupportedEncodingException uex) {
            Rlog.e(LOG_TAG, "Implausible UnsupportedEncodingException ", uex);
            return null;
        }
    }
    if (encoding == ENCODING_7BIT) {
        if ((0xff & userData[0]) > MAX_USER_DATA_SEPTETS) {
            // Message too long
            Rlog.e(LOG_TAG, "Message too long (" + (0xff & userData[0]) + " septets)");
            return null;
        }
        // TP-Data-Coding-Scheme
        // Default encoding, uncompressed
        // To test writing messages to the SIM card, change this value 0x00
        // to 0x12, which means "bits 1 and 0 contain message class, and the
        // class is 2". Note that this takes effect for the sender. In other
        // words, messages sent by the phone with this change will end up on
        // the receiver's SIM card. You can then send messages to yourself
        // (on a phone with this change) and they'll end up on the SIM card.
        bo.write(0x00);
    } else {
        // assume UCS-2
        if ((0xff & userData[0]) > MAX_USER_DATA_BYTES) {
            // Message too long
            Rlog.e(LOG_TAG, "Message too long (" + (0xff & userData[0]) + " bytes)");
            return null;
        }
        // TP-Data-Coding-Scheme
        // UCS-2 encoding, uncompressed
        bo.write(0x08);
    }
    if (validityPeriodFormat == VALIDITY_PERIOD_FORMAT_RELATIVE) {
        // ( TP-Validity-Period - relative format)
        bo.write(relativeValidityPeriod);
    }
    bo.write(userData, 0, userData.length);
    ret.encodedMessage = bo.toByteArray();
    return ret;
}
#method_after
public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested, byte[] header, int encoding, int languageTable, int languageShiftTable, int validityPeriod) {
    // Perform null parameter checks.
    if (message == null || destinationAddress == null) {
        return null;
    }
    if (encoding == ENCODING_UNKNOWN) {
        // Find the best encoding to use
        TextEncodingDetails ted = calculateLength(message, false);
        encoding = ted.codeUnitSize;
        languageTable = ted.languageTable;
        languageShiftTable = ted.languageShiftTable;
        if (encoding == ENCODING_7BIT && (languageTable != 0 || languageShiftTable != 0)) {
            if (header != null) {
                SmsHeader smsHeader = SmsHeader.fromByteArray(header);
                if (smsHeader.languageTable != languageTable || smsHeader.languageShiftTable != languageShiftTable) {
                    Rlog.w(LOG_TAG, "Updating language table in SMS header: " + smsHeader.languageTable + " -> " + languageTable + ", " + smsHeader.languageShiftTable + " -> " + languageShiftTable);
                    smsHeader.languageTable = languageTable;
                    smsHeader.languageShiftTable = languageShiftTable;
                    header = SmsHeader.toByteArray(smsHeader);
                }
            } else {
                SmsHeader smsHeader = new SmsHeader();
                smsHeader.languageTable = languageTable;
                smsHeader.languageShiftTable = languageShiftTable;
                header = SmsHeader.toByteArray(smsHeader);
            }
        }
    }
    SubmitPdu ret = new SubmitPdu();
    int validityPeriodFormat = VALIDITY_PERIOD_FORMAT_NONE;
    int relativeValidityPeriod = INVALID_VALIDITY_PERIOD;
    // bit 4:3 = 10 - TP-VP field present - relative format
    if ((relativeValidityPeriod = getRelativeValidityPeriod(validityPeriod)) >= 0) {
        validityPeriodFormat = VALIDITY_PERIOD_FORMAT_RELATIVE;
    }
    byte mtiByte = (byte) (0x01 | (validityPeriodFormat << 0x03) | (header != null ? 0x40 : 0x00));
    ByteArrayOutputStream bo = getSubmitPduHead(scAddress, destinationAddress, mtiByte, statusReportRequested, ret);
    // properly later on encodedMessage sanity check.
    if (bo == null)
        return ret;
    // User Data (and length)
    byte[] userData;
    try {
        if (encoding == ENCODING_7BIT) {
            userData = GsmAlphabet.stringToGsm7BitPackedWithHeader(message, header, languageTable, languageShiftTable);
        } else {
            // assume UCS-2
            try {
                userData = encodeUCS2(message, header);
            } catch (UnsupportedEncodingException uex) {
                Rlog.e(LOG_TAG, "Implausible UnsupportedEncodingException ", uex);
                return null;
            }
        }
    } catch (EncodeException ex) {
        if (ex.getError() == EncodeException.ERROR_EXCEED_SIZE) {
            Rlog.e(LOG_TAG, "Exceed size limitation EncodeException", ex);
            return null;
        } else {
            // send it as a UCS-2 encoded message
            try {
                userData = encodeUCS2(message, header);
                encoding = ENCODING_16BIT;
            } catch (EncodeException ex1) {
                Rlog.e(LOG_TAG, "Exceed size limitation EncodeException", ex1);
                return null;
            } catch (UnsupportedEncodingException uex) {
                Rlog.e(LOG_TAG, "Implausible UnsupportedEncodingException ", uex);
                return null;
            }
        }
    }
    if (encoding == ENCODING_7BIT) {
        if ((0xff & userData[0]) > MAX_USER_DATA_SEPTETS) {
            // Message too long
            Rlog.e(LOG_TAG, "Message too long (" + (0xff & userData[0]) + " septets)");
            return null;
        }
        // TP-Data-Coding-Scheme
        // Default encoding, uncompressed
        // To test writing messages to the SIM card, change this value 0x00
        // to 0x12, which means "bits 1 and 0 contain message class, and the
        // class is 2". Note that this takes effect for the sender. In other
        // words, messages sent by the phone with this change will end up on
        // the receiver's SIM card. You can then send messages to yourself
        // (on a phone with this change) and they'll end up on the SIM card.
        bo.write(0x00);
    } else {
        // assume UCS-2
        if ((0xff & userData[0]) > MAX_USER_DATA_BYTES) {
            // Message too long
            Rlog.e(LOG_TAG, "Message too long (" + (0xff & userData[0]) + " bytes)");
            return null;
        }
        // TP-Data-Coding-Scheme
        // UCS-2 encoding, uncompressed
        bo.write(0x08);
    }
    if (validityPeriodFormat == VALIDITY_PERIOD_FORMAT_RELATIVE) {
        // ( TP-Validity-Period - relative format)
        bo.write(relativeValidityPeriod);
    }
    bo.write(userData, 0, userData.length);
    ret.encodedMessage = bo.toByteArray();
    return ret;
}
#end_block

#method_before
private static byte[] encodeUCS2(String message, byte[] header) throws UnsupportedEncodingException {
    byte[] userData, textPart;
    textPart = message.getBytes("utf-16be");
    if (header != null) {
        // Need 1 byte for UDHL
        userData = new byte[header.length + textPart.length + 1];
        userData[0] = (byte) header.length;
        System.arraycopy(header, 0, userData, 1, header.length);
        System.arraycopy(textPart, 0, userData, header.length + 1, textPart.length);
    } else {
        userData = textPart;
    }
    byte[] ret = new byte[userData.length + 1];
    ret[0] = (byte) (userData.length & 0xff);
    System.arraycopy(userData, 0, ret, 1, userData.length);
    return ret;
}
#method_after
private static byte[] encodeUCS2(String message, byte[] header) throws UnsupportedEncodingException, EncodeException {
    byte[] userData, textPart;
    textPart = message.getBytes("utf-16be");
    if (header != null) {
        // Need 1 byte for UDHL
        userData = new byte[header.length + textPart.length + 1];
        userData[0] = (byte) header.length;
        System.arraycopy(header, 0, userData, 1, header.length);
        System.arraycopy(textPart, 0, userData, header.length + 1, textPart.length);
    } else {
        userData = textPart;
    }
    if (userData.length > 255) {
        throw new EncodeException("Payload cannot exceed 255 bytes", EncodeException.ERROR_EXCEED_SIZE);
    }
    byte[] ret = new byte[userData.length + 1];
    ret[0] = (byte) (userData.length & 0xff);
    System.arraycopy(userData, 0, ret, 1, userData.length);
    return ret;
}
#end_block

#method_before
@Test
@Config(shadows = SettingsShadowResources.SettingsShadowTheme.class)
public void getHelpResource_shouldReturn0() {
    assertThat(mFragment.getHelpResource()).isEqualTo(0);
}
#method_after
@Test
public void getHelpResource_shouldReturn0() {
    assertThat(mFragment.getHelpResource()).isEqualTo(0);
}
#end_block

#method_before
@Test
@Config(shadows = SettingsShadowResources.SettingsShadowTheme.class)
public void onResume_provisioningAllowed_shouldNotFinish() throws ImsException {
    // Call onResume while provisioning is allowed.
    mFragment.onResume();
    // Verify that finish() is not called.
    verify(mFragment, times(0)).finish();
}
#method_after
@Test
public void onResume_provisioningAllowed_shouldNotFinish() throws ImsException {
    // Call onResume while provisioning is allowed.
    mFragment.onResume();
    // Verify that finish() is not called.
    verify(mFragment, never()).finish();
}
#end_block

#method_before
@Test
@Config(shadows = SettingsShadowResources.SettingsShadowTheme.class)
public void onResume_provisioningDisallowed_shouldFinish() {
    // Call onResume while provisioning is disallowed.
    doReturn(false).when(mImsManager).isWfcProvisionedOnDevice();
    mFragment.onResume();
    // Verify that finish() is called
    verify(mFragment, times(1)).finish();
}
#method_after
@Test
public void onResume_provisioningDisallowed_shouldFinish() {
    // Call onResume while provisioning is disallowed.
    doReturn(false).when(mImsManager).isWfcProvisionedOnDevice();
    mFragment.onResume();
    // Verify that finish() is called
    verify(mFragment).finish();
}
#end_block

#method_before
@Test
@Config(shadows = SettingsShadowResources.SettingsShadowTheme.class)
public void onResumeOnPause_provisioningCallbackRegistration() throws ImsException {
    // Verify that provisioning callback is registered after call to onResume().
    mFragment.onResume();
    verify(mImsConfig).addConfigCallback(any(ProvisioningManager.Callback.class));
    // Verify that provisioning callback is unregistered after call to onPause.
    mFragment.onPause();
    verify(mImsConfig).removeConfigCallback(any());
}
#method_after
@Test
public void onResumeOnPause_provisioningCallbackRegistration() throws ImsException {
    // Verify that provisioning callback is registered after call to onResume().
    mFragment.onResume();
    verify(mImsConfig).addConfigCallback(any(ProvisioningManager.Callback.class));
    // Verify that provisioning callback is unregistered after call to onPause.
    mFragment.onPause();
    verify(mImsConfig).removeConfigCallback(any());
}
#end_block

#method_before
ImsManager getImsManager() {
    return ImsManager.getInstance(getActivity(), SubscriptionManager.getPhoneId(mSubId));
}
#method_after
@VisibleForTesting
ImsManager getImsManager() {
    return ImsManager.getInstance(getActivity(), SubscriptionManager.getPhoneId(mSubId));
}
#end_block

#method_before
private void retryGetImsService() {
    synchronized (mLock) {
        // remove callback so we do not receive updates from old ImsServiceProxy when
        // switching between ImsServices.
        mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback);
        // Leave mImsManager as null, then CallStateException will be thrown when dialing
        mImsManager = null;
    }
    // Exponential backoff during retry, limited to 32 seconds.
    loge("Connector: Retrying getting ImsService...");
    removeCallbacks(mGetServiceRunnable);
    postDelayed(mGetServiceRunnable, mRetryTimeout.get());
}
#method_after
private void retryGetImsService() {
    synchronized (mLock) {
        // remove callback so we do not receive updates from old ImsServiceProxy when
        // switching between ImsServices.
        mImsManager.removeNotifyStatusChangedCallback(mNotifyStatusChangedCallback);
        // Leave mImsManager as null, then CallStateException will be thrown when dialing
        mImsManager = null;
    }
    // Exponential backoff during retry, limited to 32 seconds.
    removeCallbacks(mGetServiceRunnable);
    postDelayed(mGetServiceRunnable, mRetryTimeout.get());
}
#end_block

#method_before
private void getImsService() throws ImsException {
    if (DBG)
        log("Connector: getImsService");
    synchronized (mLock) {
        mImsManager = ImsManager.getInstance(mContext, mPhoneId);
        // Adding to set, will be safe adding multiple times. If the ImsService is not
        // active yet, this method will throw an ImsException.
        mImsManager.addNotifyStatusChangedCallbackIfAvailable(mNotifyStatusChangedCallback);
    }
    // Wait for ImsService.STATE_READY to start listening for calls.
    // Call the callback right away for compatibility with older devices that do not use
    // states.
    mNotifyStatusChangedCallback.notifyStateChanged();
}
#method_after
private void getImsService() throws ImsException {
    synchronized (mLock) {
        mImsManager = ImsManager.getInstance(mContext, mPhoneId);
        // Adding to set, will be safe adding multiple times. If the ImsService is not
        // active yet, this method will throw an ImsException.
        mImsManager.addNotifyStatusChangedCallbackIfAvailable(mNotifyStatusChangedCallback);
    }
    // Wait for ImsService.STATE_READY to start listening for calls.
    // Call the callback right away for compatibility with older devices that do not use
    // states.
    mNotifyStatusChangedCallback.notifyStateChanged();
}
#end_block

#method_before
public boolean isEnhanced4gLteModeSettingEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.ENHANCED_4G_MODE_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    boolean onByDefault = getBooleanCarrierConfig(CarrierConfigManager.KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL);
    // value
    if (!getBooleanCarrierConfig(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL) || getBooleanCarrierConfig(CarrierConfigManager.KEY_HIDE_ENHANCED_4G_LTE_BOOL) || setting == SUB_PROPERTY_NOT_INITIALIZED) {
        return onByDefault;
    } else {
        return (setting == ImsConfig.FeatureValueConstants.ON);
    }
}
#method_after
public boolean isEnhanced4gLteModeSettingEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.ENHANCED_4G_MODE_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    boolean onByDefault = getBooleanCarrierConfig(CarrierConfigManager.KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL);
    // value
    if (!getBooleanCarrierConfig(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL) || getBooleanCarrierConfig(CarrierConfigManager.KEY_HIDE_ENHANCED_4G_LTE_BOOL) || setting == SUB_PROPERTY_NOT_INITIALIZED) {
        return onByDefault;
    } else {
        return (setting == ProvisioningManager.PROVISIONING_VALUE_ENABLED);
    }
}
#end_block

#method_before
public void setEnhanced4gLteModeSetting(boolean enabled) {
    if (enabled && !isVolteProvisionedOnDevice()) {
        log("setEnhanced4gLteModeSetting: Not possible to enable VoLTE due to provisioning.");
        return;
    }
    int subId = getSubId();
    // If editable=false or hidden=true, we must keep default advanced 4G mode.
    if (!getBooleanCarrierConfig(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL) || getBooleanCarrierConfig(CarrierConfigManager.KEY_HIDE_ENHANCED_4G_LTE_BOOL)) {
        enabled = getBooleanCarrierConfig(CarrierConfigManager.KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL);
    }
    int prevSetting = SubscriptionManager.getIntegerSubscriptionProperty(subId, SubscriptionManager.ENHANCED_4G_MODE_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    if (prevSetting != (enabled ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF)) {
        if (isSubIdValid(subId)) {
            SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.ENHANCED_4G_MODE_ENABLED, booleanToPropertyString(enabled));
        } else {
            loge("setEnhanced4gLteModeSetting: invalid sub id, can not set property in " + " siminfo db; subId=" + subId);
        }
        if (isNonTtyOrTtyOnVolteEnabled()) {
            try {
                setAdvanced4GMode(enabled);
            } catch (ImsException ie) {
            // do nothing
            }
        }
    }
}
#method_after
public void setEnhanced4gLteModeSetting(boolean enabled) {
    if (enabled && !isVolteProvisionedOnDevice()) {
        log("setEnhanced4gLteModeSetting: Not possible to enable VoLTE due to provisioning.");
        return;
    }
    int subId = getSubId();
    // If editable=false or hidden=true, we must keep default advanced 4G mode.
    if (!getBooleanCarrierConfig(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL) || getBooleanCarrierConfig(CarrierConfigManager.KEY_HIDE_ENHANCED_4G_LTE_BOOL)) {
        enabled = getBooleanCarrierConfig(CarrierConfigManager.KEY_ENHANCED_4G_LTE_ON_BY_DEFAULT_BOOL);
    }
    int prevSetting = SubscriptionManager.getIntegerSubscriptionProperty(subId, SubscriptionManager.ENHANCED_4G_MODE_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    if (prevSetting != (enabled ? ProvisioningManager.PROVISIONING_VALUE_ENABLED : ProvisioningManager.PROVISIONING_VALUE_DISABLED)) {
        if (isSubIdValid(subId)) {
            SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.ENHANCED_4G_MODE_ENABLED, booleanToPropertyString(enabled));
        } else {
            loge("setEnhanced4gLteModeSetting: invalid sub id, can not set property in " + " siminfo db; subId=" + subId);
        }
        if (isNonTtyOrTtyOnVolteEnabled()) {
            try {
                setAdvanced4GMode(enabled);
            } catch (ImsException ie) {
            // do nothing
            }
        }
    }
}
#end_block

#method_before
public boolean isVtEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.VT_IMS_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    // If it's never set, by default we return true.
    return (setting == SUB_PROPERTY_NOT_INITIALIZED || setting == ImsConfig.FeatureValueConstants.ON);
}
#method_after
public boolean isVtEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.VT_IMS_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    // If it's never set, by default we return true.
    return (setting == SUB_PROPERTY_NOT_INITIALIZED || setting == ProvisioningManager.PROVISIONING_VALUE_ENABLED);
}
#end_block

#method_before
public boolean isWfcEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.WFC_IMS_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    // SUB_PROPERTY_NOT_INITIALIZED indicates it's never set in sub db.
    if (setting == SUB_PROPERTY_NOT_INITIALIZED) {
        return getBooleanCarrierConfig(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL);
    } else {
        return setting == ImsConfig.FeatureValueConstants.ON;
    }
}
#method_after
public boolean isWfcEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.WFC_IMS_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    // SUB_PROPERTY_NOT_INITIALIZED indicates it's never set in sub db.
    if (setting == SUB_PROPERTY_NOT_INITIALIZED) {
        return getBooleanCarrierConfig(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ENABLED_BOOL);
    } else {
        return setting == ProvisioningManager.PROVISIONING_VALUE_ENABLED;
    }
}
#end_block

#method_before
public void setWfcSetting(boolean enabled) {
    if (enabled && !isWfcProvisionedOnDevice()) {
        log("setWfcSetting: Not possible to enable WFC due to provisioning.");
        return;
    }
    int subId = getSubId();
    if (isSubIdValid(subId)) {
        SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_ENABLED, booleanToPropertyString(enabled));
    } else {
        loge("setWfcSetting: invalid sub id, can not set WFC setting in siminfo db; subId=" + subId);
    }
    TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
    setWfcNonPersistent(enabled, getWfcMode(tm.isNetworkRoaming(subId)));
}
#method_after
public void setWfcSetting(boolean enabled) {
    if (enabled && !isWfcProvisionedOnDevice()) {
        log("setWfcSetting: Not possible to enable WFC due to provisioning.");
        return;
    }
    int subId = getSubId();
    if (isSubIdValid(subId)) {
        SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_ENABLED, booleanToPropertyString(enabled));
    } else {
        loge("setWfcSetting: invalid sub id, can not set WFC setting in siminfo db; subId=" + subId);
    }
    TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
    boolean isRoaming = tm.isNetworkRoaming(subId);
    setWfcNonPersistent(enabled, getWfcMode(isRoaming), isRoaming);
}
#end_block

#method_before
public void setWfcNonPersistent(boolean enabled, int wfcMode) {
    if (enabled && !isWfcProvisionedOnDevice()) {
        log("setWfcNonPersistent: Not possible to enable WFC due to provisioning.");
        return;
    }
    // Force IMS to register over LTE when turning off WFC
    int imsWfcModeFeatureValue = enabled ? wfcMode : ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED;
    try {
        changeMmTelCapability(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, enabled);
        if (enabled) {
            log("setWfcSetting() : turnOnIms");
            turnOnIms();
        } else if (isTurnOffImsAllowedByPlatform() && (!isVolteEnabledByPlatform() || !isEnhanced4gLteModeSettingEnabledByUser())) {
            log("setWfcSetting() : imsServiceAllowTurnOff -> turnOffIms");
            turnOffIms();
        }
        setWfcModeInternal(imsWfcModeFeatureValue);
    } catch (ImsException e) {
        loge("setWfcSetting(): ", e);
    }
}
#method_after
public void setWfcNonPersistent(boolean enabled, int wfcMode) {
    TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
    boolean isRoaming = tm.isNetworkRoaming(getSubId());
    setWfcNonPersistent(enabled, wfcMode, isRoaming);
}
#end_block

#method_before
public void setWfcNonPersistent(boolean enabled, int wfcMode) {
    if (enabled && !isWfcProvisionedOnDevice()) {
        log("setWfcNonPersistent: Not possible to enable WFC due to provisioning.");
        return;
    }
    // Force IMS to register over LTE when turning off WFC
    int imsWfcModeFeatureValue = enabled ? wfcMode : ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED;
    try {
        changeMmTelCapability(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, enabled);
        if (enabled) {
            log("setWfcSetting() : turnOnIms");
            turnOnIms();
        } else if (isTurnOffImsAllowedByPlatform() && (!isVolteEnabledByPlatform() || !isEnhanced4gLteModeSettingEnabledByUser())) {
            log("setWfcSetting() : imsServiceAllowTurnOff -> turnOffIms");
            turnOffIms();
        }
        setWfcModeInternal(imsWfcModeFeatureValue);
    } catch (ImsException e) {
        loge("setWfcSetting(): ", e);
    }
}
#method_after
public void setWfcNonPersistent(boolean enabled, int wfcMode, boolean isNetworkRoaming) {
    // Force IMS to register over LTE when turning off WFC
    int imsWfcModeFeatureValue = enabled ? wfcMode : ImsMmTelManager.WIFI_MODE_CELLULAR_PREFERRED;
    try {
        changeMmTelCapability(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, enabled);
        // Set the mode and roaming enabled settings before turning on IMS
        setWfcModeInternal(imsWfcModeFeatureValue);
        // If isNetworkRoaming or enabled is false, shortcut to false because of the ImsService
        // implementation for WFC roaming, otherwise use the correct user's setting.
        setWfcRoamingSettingInternal(enabled && isNetworkRoaming && isWfcRoamingEnabledByUser());
        if (enabled) {
            log("setWfcSetting() : turnOnIms");
            turnOnIms();
        } else if (isTurnOffImsAllowedByPlatform() && (!isVolteEnabledByPlatform() || !isEnhanced4gLteModeSettingEnabledByUser())) {
            log("setWfcSetting() : imsServiceAllowTurnOff -> turnOffIms");
            turnOffIms();
        }
    } catch (ImsException e) {
        loge("setWfcSetting(): ", e);
    }
}
#end_block

#method_before
public static int getWfcMode(Context context) {
    ImsManager mgr = ImsManager.getInstance(context, SubscriptionManager.getDefaultVoicePhoneId());
    if (mgr != null) {
        return mgr.getWfcMode();
    }
    loge("getWfcMode: ImsManager null, returning default value.");
    return ImsConfig.WfcModeFeatureValueConstants.WIFI_ONLY;
}
#method_after
public static int getWfcMode(Context context) {
    ImsManager mgr = ImsManager.getInstance(context, SubscriptionManager.getDefaultVoicePhoneId());
    if (mgr != null) {
        return mgr.getWfcMode();
    }
    loge("getWfcMode: ImsManager null, returning default value.");
    return ImsMmTelManager.WIFI_MODE_WIFI_ONLY;
}
#end_block

#method_before
public void setWfcMode(int wfcMode) {
    if (DBG)
        log("setWfcMode(i) - setting=" + wfcMode);
    int subId = getSubId();
    if (isSubIdValid(subId)) {
        SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_MODE, Integer.toString(wfcMode));
    } else {
        loge("setWfcMode: invalid sub id, skip setting value in siminfo db; subId=" + subId);
    }
    setWfcModeInternal(wfcMode);
}
#method_after
public void setWfcMode(int wfcMode) {
    setWfcMode(wfcMode, false);
}
#end_block

#method_before
public static int getWfcMode(Context context, boolean roaming) {
    ImsManager mgr = ImsManager.getInstance(context, SubscriptionManager.getDefaultVoicePhoneId());
    if (mgr != null) {
        return mgr.getWfcMode(roaming);
    }
    loge("getWfcMode: ImsManager null, returning default value.");
    return ImsConfig.WfcModeFeatureValueConstants.WIFI_ONLY;
}
#method_after
public static int getWfcMode(Context context, boolean roaming) {
    ImsManager mgr = ImsManager.getInstance(context, SubscriptionManager.getDefaultVoicePhoneId());
    if (mgr != null) {
        return mgr.getWfcMode(roaming);
    }
    loge("getWfcMode: ImsManager null, returning default value.");
    return ImsMmTelManager.WIFI_MODE_WIFI_ONLY;
}
#end_block

#method_before
public void setWfcMode(int wfcMode, boolean roaming) {
    int subId = getSubId();
    if (isSubIdValid(subId)) {
        if (!roaming) {
            if (DBG)
                log("setWfcMode(i,b) - setting=" + wfcMode);
            SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_MODE, Integer.toString(wfcMode));
        } else {
            if (DBG)
                log("setWfcMode(i,b) (roaming) - setting=" + wfcMode);
            SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_ROAMING_MODE, Integer.toString(wfcMode));
        }
    } else {
        loge("setWfcMode(i,b): invalid sub id, skip setting setting in siminfo db; subId=" + subId);
    }
    TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
    if (roaming == tm.isNetworkRoaming(getSubId())) {
        setWfcModeInternal(wfcMode);
    }
}
#method_after
public void setWfcMode(int wfcMode, boolean roaming) {
    int subId = getSubId();
    if (isSubIdValid(subId)) {
        if (!roaming) {
            if (DBG)
                log("setWfcMode(i,b) - setting=" + wfcMode);
            SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_MODE, Integer.toString(wfcMode));
        } else {
            if (DBG)
                log("setWfcMode(i,b) (roaming) - setting=" + wfcMode);
            SubscriptionManager.setSubscriptionProperty(subId, SubscriptionManager.WFC_IMS_ROAMING_MODE, Integer.toString(wfcMode));
        }
    } else {
        loge("setWfcMode(i,b): invalid sub id, skip setting setting in siminfo db; subId=" + subId);
    }
    TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
    // call setWfcModeInternal when roaming == telephony roaming status. Otherwise, ignore.
    if (roaming == tm.isNetworkRoaming(getSubId())) {
        setWfcModeInternal(wfcMode);
        // if roaming is false, shortcut and just set the setting to false. If WFC is not
        // enabled at all by the user, then just shortcut to false as well, because the current
        // ImsService implementation expects the roaming setting to be alsofalse if WFC is
        // false. Otherwise, use the user's setting.
        setWfcRoamingSettingInternal(roaming && isWfcEnabledByUser() && isWfcRoamingEnabledByUser());
    }
}
#end_block

#method_before
private void setWfcModeInternal(int wfcMode) {
    final int value = wfcMode;
    Thread thread = new Thread(() -> {
        try {
            getConfigInterface().setConfig(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_MODE, value);
        } catch (ImsException e) {
        // do nothing
        }
    });
    thread.start();
}
#method_after
private void setWfcModeInternal(int wfcMode) {
    final int value = wfcMode;
    mExecutorFactory.executeRunnable(() -> {
        try {
            getConfigInterface().setConfig(ProvisioningManager.KEY_VOICE_OVER_WIFI_MODE_OVERRIDE, value);
        } catch (ImsException e) {
        // do nothing
        }
    });
}
#end_block

#method_before
public boolean isWfcRoamingEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.WFC_IMS_ROAMING_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    if (setting == SUB_PROPERTY_NOT_INITIALIZED) {
        return getBooleanCarrierConfig(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL);
    } else {
        return setting == ImsConfig.FeatureValueConstants.ON;
    }
}
#method_after
public boolean isWfcRoamingEnabledByUser() {
    int setting = SubscriptionManager.getIntegerSubscriptionProperty(getSubId(), SubscriptionManager.WFC_IMS_ROAMING_ENABLED, SUB_PROPERTY_NOT_INITIALIZED, mContext);
    if (setting == SUB_PROPERTY_NOT_INITIALIZED) {
        return getBooleanCarrierConfig(CarrierConfigManager.KEY_CARRIER_DEFAULT_WFC_IMS_ROAMING_ENABLED_BOOL);
    } else {
        return setting == ProvisioningManager.PROVISIONING_VALUE_ENABLED;
    }
}
#end_block

#method_before
private void setWfcRoamingSettingInternal(boolean enabled) {
    final int value = enabled ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF;
    Thread thread = new Thread(() -> {
        try {
            getConfigInterface().setConfig(ImsConfig.ConfigConstants.VOICE_OVER_WIFI_ROAMING, value);
        } catch (ImsException e) {
        // do nothing
        }
    });
    thread.start();
}
#method_after
private void setWfcRoamingSettingInternal(boolean enabled) {
    final int value = enabled ? ProvisioningManager.PROVISIONING_VALUE_ENABLED : ProvisioningManager.PROVISIONING_VALUE_DISABLED;
    mExecutorFactory.executeRunnable(() -> {
        try {
            getConfigInterface().setConfig(ProvisioningManager.KEY_VOICE_OVER_WIFI_ROAMING_ENABLED_OVERRIDE, value);
        } catch (ImsException e) {
        // do nothing
        }
    });
}
#end_block

#method_before
private boolean getProvisionedBool(ImsConfig config, int item) throws ImsException {
    int value = config.getProvisionedValue(item);
    if (value == ImsConfig.OperationStatusConstants.UNKNOWN) {
        throw new ImsException("getProvisionedBool failed with error for item: " + item, ImsReasonInfo.CODE_LOCAL_INTERNAL_ERROR);
    }
    return config.getProvisionedValue(item) == ImsConfig.FeatureValueConstants.ON;
}
#method_after
private boolean getProvisionedBool(ImsConfig config, int item) throws ImsException {
    int value = config.getProvisionedValue(item);
    if (value == ImsConfigImplBase.CONFIG_RESULT_UNKNOWN) {
        throw new ImsException("getProvisionedBool failed with error for item: " + item, ImsReasonInfo.CODE_LOCAL_INTERNAL_ERROR);
    }
    return value == ProvisioningManager.PROVISIONING_VALUE_ENABLED;
}
#end_block

#method_before
private boolean getProvisionedBoolNoException(int item) {
    try {
        ImsConfig config = getConfigInterface();
        return getProvisionedBool(config, item);
    } catch (ImsException ex) {
        return false;
    }
}
#method_after
private boolean getProvisionedBoolNoException(int item) {
    try {
        ImsConfig config = getConfigInterface();
        return getProvisionedBool(config, item);
    } catch (ImsException ex) {
        Log.w(TAG, "getProvisionedBoolNoException: operation failed for item=" + item + ". Exception:" + ex.getMessage() + ". Returning false.");
        return false;
    }
}
#end_block

#method_before
public void updateImsServiceConfig(boolean force) {
    if (!force) {
        TelephonyManager tm = new TelephonyManager(mContext, getSubId());
        if (tm.getSimState() != TelephonyManager.SIM_STATE_READY) {
            log("updateImsServiceConfig: SIM not ready");
            // Don't disable IMS if SIM is not ready
            return;
        }
    }
    if (!mConfigUpdated || force) {
        try {
            // TODO: Extend ImsConfig API and set all feature values in single function call.
            // Note: currently the order of updates is set to produce different order of
            // changeEnabledCapabilities() function calls from setAdvanced4GMode(). This is done
            // to differentiate this code path from vendor code perspective.
            boolean isImsUsed = updateVolteFeatureValue();
            isImsUsed |= updateWfcFeatureAndProvisionedValues();
            isImsUsed |= updateVideoCallFeatureValue();
            isImsUsed |= updateRttConfigValue();
            if (isImsUsed || !isTurnOffImsAllowedByPlatform()) {
                // Turn on IMS if it is used.
                // Also, if turning off is not allowed for current carrier,
                // we need to turn IMS on because it might be turned off before
                // phone switched to current carrier.
                log("updateImsServiceConfig: turnOnIms");
                turnOnIms();
            } else {
                // Turn off IMS if it is not used AND turning off is allowed for carrier.
                log("updateImsServiceConfig: turnOffIms");
                turnOffIms();
            }
            mConfigUpdated = true;
        } catch (ImsException e) {
            loge("updateImsServiceConfig: ", e);
            mConfigUpdated = false;
        }
    }
}
#method_after
public void updateImsServiceConfig(boolean force) {
    if (!force) {
        TelephonyManager tm = new TelephonyManager(mContext, getSubId());
        if (tm.getSimState() != TelephonyManager.SIM_STATE_READY) {
            log("updateImsServiceConfig: SIM not ready");
            // Don't disable IMS if SIM is not ready
            return;
        }
    }
    if (!mConfigUpdated || force) {
        try {
            // Note: currently the order of updates is set to produce different order of
            // changeEnabledCapabilities() function calls from setAdvanced4GMode(). This is done
            // to differentiate this code path from vendor code perspective.
            CapabilityChangeRequest request = new CapabilityChangeRequest();
            updateVolteFeatureValue(request);
            updateWfcFeatureAndProvisionedValues(request);
            updateVideoCallFeatureValue(request);
            boolean isImsNeededForRtt = updateRttConfigValue();
            // Supplementary services over UT do not require IMS registration. Do not alter IMS
            // registration based on UT.
            updateUtFeatureValue(request);
            // Send the batched request to the modem.
            changeMmTelCapability(request);
            if (isImsNeededForRtt || !isTurnOffImsAllowedByPlatform() || isImsNeeded(request)) {
                // Turn on IMS if it is used.
                // Also, if turning off is not allowed for current carrier,
                // we need to turn IMS on because it might be turned off before
                // phone switched to current carrier.
                log("updateImsServiceConfig: turnOnIms");
                turnOnIms();
            } else {
                // Turn off IMS if it is not used AND turning off is allowed for carrier.
                log("updateImsServiceConfig: turnOffIms");
                turnOffIms();
            }
            mConfigUpdated = true;
        } catch (ImsException e) {
            loge("updateImsServiceConfig: ", e);
            mConfigUpdated = false;
        }
    }
}
#end_block

#method_before
private boolean updateVolteFeatureValue() throws ImsException {
    boolean available = isVolteEnabledByPlatform();
    boolean enabled = isEnhanced4gLteModeSettingEnabledByUser();
    boolean isNonTty = isNonTtyOrTtyOnVolteEnabled();
    boolean isFeatureOn = available && enabled && isNonTty;
    log("updateVolteFeatureValue: available = " + available + ", enabled = " + enabled + ", nonTTY = " + isNonTty);
    changeMmTelCapability(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE, isFeatureOn);
    return isFeatureOn;
}
#method_after
private void updateVolteFeatureValue(CapabilityChangeRequest request) {
    boolean available = isVolteEnabledByPlatform();
    boolean enabled = isEnhanced4gLteModeSettingEnabledByUser();
    boolean isNonTty = isNonTtyOrTtyOnVolteEnabled();
    boolean isFeatureOn = available && enabled && isNonTty;
    log("updateVolteFeatureValue: available = " + available + ", enabled = " + enabled + ", nonTTY = " + isNonTty);
    if (isFeatureOn) {
        request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    } else {
        request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    }
}
#end_block

#method_before
private boolean updateVideoCallFeatureValue() throws ImsException {
    boolean available = isVtEnabledByPlatform();
    boolean enabled = isVtEnabledByUser();
    boolean isNonTty = isNonTtyOrTtyOnVolteEnabled();
    boolean isDataEnabled = isDataEnabled();
    boolean ignoreDataEnabledChanged = getBooleanCarrierConfig(CarrierConfigManager.KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS);
    boolean isFeatureOn = available && enabled && isNonTty && (ignoreDataEnabledChanged || isDataEnabled);
    log("updateVideoCallFeatureValue: available = " + available + ", enabled = " + enabled + ", nonTTY = " + isNonTty + ", data enabled = " + isDataEnabled);
    changeMmTelCapability(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE, isFeatureOn);
    return isFeatureOn;
}
#method_after
private void updateVideoCallFeatureValue(CapabilityChangeRequest request) {
    boolean available = isVtEnabledByPlatform();
    boolean enabled = isVtEnabledByUser();
    boolean isNonTty = isNonTtyOrTtyOnVolteEnabled();
    boolean isDataEnabled = isDataEnabled();
    boolean ignoreDataEnabledChanged = getBooleanCarrierConfig(CarrierConfigManager.KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS);
    boolean isFeatureOn = available && enabled && isNonTty && (ignoreDataEnabledChanged || isDataEnabled);
    log("updateVideoCallFeatureValue: available = " + available + ", enabled = " + enabled + ", nonTTY = " + isNonTty + ", data enabled = " + isDataEnabled);
    if (isFeatureOn) {
        request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    } else {
        request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    }
}
#end_block

#method_before
private boolean updateWfcFeatureAndProvisionedValues() throws ImsException {
    TelephonyManager tm = new TelephonyManager(mContext, getSubId());
    boolean isNetworkRoaming = tm.isNetworkRoaming();
    boolean available = isWfcEnabledByPlatform();
    boolean enabled = isWfcEnabledByUser();
    int mode = getWfcMode(isNetworkRoaming);
    boolean roaming = isWfcRoamingEnabledByUser();
    boolean isFeatureOn = available && enabled;
    log("updateWfcFeatureAndProvisionedValues: available = " + available + ", enabled = " + enabled + ", mode = " + mode + ", roaming = " + roaming);
    changeMmTelCapability(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN, isFeatureOn);
    if (!isFeatureOn) {
        mode = ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED;
        roaming = false;
    }
    setWfcModeInternal(mode);
    setWfcRoamingSettingInternal(roaming);
    return isFeatureOn;
}
#method_after
private void updateWfcFeatureAndProvisionedValues(CapabilityChangeRequest request) {
    TelephonyManager tm = new TelephonyManager(mContext, getSubId());
    boolean isNetworkRoaming = tm.isNetworkRoaming();
    boolean available = isWfcEnabledByPlatform();
    boolean enabled = isWfcEnabledByUser();
    int mode = getWfcMode(isNetworkRoaming);
    boolean roaming = isWfcRoamingEnabledByUser();
    boolean isFeatureOn = available && enabled;
    log("updateWfcFeatureAndProvisionedValues: available = " + available + ", enabled = " + enabled + ", mode = " + mode + ", roaming = " + roaming);
    if (isFeatureOn) {
        request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN);
    } else {
        request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_IWLAN);
    }
    if (!isFeatureOn) {
        mode = ImsMmTelManager.WIFI_MODE_CELLULAR_PREFERRED;
        roaming = false;
    }
    setWfcModeInternal(mode);
    setWfcRoamingSettingInternal(roaming);
}
#end_block

#method_before
public void open(MmTelFeature.Listener listener) throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    if (listener == null) {
        throw new NullPointerException("listener can't be null");
    }
    try {
        mMmTelFeatureConnection.openConnection(listener);
    } catch (RemoteException e) {
        throw new ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
    // Register callback for ImsConfig
    try {
        getConfigInterface().addConfigCallback(mConfigCallback);
    } catch (ImsException e) {
        loge("open: Failed to call addConfigCallback: ", e);
    }
}
#method_after
public void open(MmTelFeature.Listener listener) throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    if (listener == null) {
        throw new NullPointerException("listener can't be null");
    }
    try {
        mMmTelFeatureConnection.openConnection(listener);
    } catch (RemoteException e) {
        throw new ImsException("open()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#end_block

#method_before
public void addRegistrationCallback(ImsMmTelManager.RegistrationCallback callback) throws ImsException {
    if (callback == null) {
        throw new NullPointerException("registration callback can't be null");
    }
    try {
        callback.setExecutor(getThreadExecutor());
        mMmTelFeatureConnection.addRegistrationCallback(callback.getBinder());
        log("Registration Callback registered.");
    // Only record if there isn't a RemoteException.
    } catch (RemoteException e) {
        throw new ImsException("addRegistrationCallback(IRIB)", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#method_after
public void addRegistrationCallback(ImsMmTelManager.RegistrationCallback callback) throws ImsException {
    if (callback == null) {
        throw new NullPointerException("registration callback can't be null");
    }
    try {
        callback.setExecutor(getThreadExecutor());
        mMmTelFeatureConnection.addRegistrationCallback(callback.getBinder());
        log("Registration Callback registered.");
    // Only record if there isn't a RemoteException.
    } catch (IllegalStateException e) {
        throw new ImsException("addRegistrationCallback(IRIB)", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#end_block

#method_before
public void addRegistrationCallbackForSubscription(IImsRegistrationCallback callback, int subId) throws RemoteException {
    if (callback == null) {
        throw new NullPointerException("registration callback can't be null");
    }
    mMmTelFeatureConnection.addRegistrationCallbackForSubscription(callback, subId);
    log("Registration Callback registered.");
// Only record if there isn't a RemoteException.
}
#method_after
public void addRegistrationCallbackForSubscription(IImsRegistrationCallback callback, int subId) throws RemoteException {
    if (callback == null) {
        throw new IllegalArgumentException("registration callback can't be null");
    }
    mMmTelFeatureConnection.addRegistrationCallbackForSubscription(callback, subId);
    log("Registration Callback registered.");
// Only record if there isn't a RemoteException.
}
#end_block

#method_before
public void removeRegistrationCallbackForSubscription(IImsRegistrationCallback callback, int subId) {
    if (callback == null) {
        throw new NullPointerException("registration callback can't be null");
    }
    mMmTelFeatureConnection.removeRegistrationCallbackForSubscription(callback, subId);
}
#method_after
public void removeRegistrationCallbackForSubscription(IImsRegistrationCallback callback, int subId) {
    if (callback == null) {
        throw new IllegalArgumentException("registration callback can't be null");
    }
    mMmTelFeatureConnection.removeRegistrationCallbackForSubscription(callback, subId);
}
#end_block

#method_before
public void addCapabilitiesCallback(ImsMmTelManager.CapabilityCallback callback) throws ImsException {
    if (callback == null) {
        throw new NullPointerException("capabilities callback can't be null");
    }
    checkAndThrowExceptionIfServiceUnavailable();
    try {
        callback.setExecutor(getThreadExecutor());
        mMmTelFeatureConnection.addCapabilityCallback(callback.getBinder());
        log("Capability Callback registered.");
    // Only record if there isn't a RemoteException.
    } catch (RemoteException e) {
        throw new ImsException("addCapabilitiesCallback(IF)", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#method_after
public void addCapabilitiesCallback(ImsMmTelManager.CapabilityCallback callback) throws ImsException {
    if (callback == null) {
        throw new NullPointerException("capabilities callback can't be null");
    }
    checkAndThrowExceptionIfServiceUnavailable();
    try {
        callback.setExecutor(getThreadExecutor());
        mMmTelFeatureConnection.addCapabilityCallback(callback.getBinder());
        log("Capability Callback registered.");
    // Only record if there isn't a RemoteException.
    } catch (IllegalStateException e) {
        throw new ImsException("addCapabilitiesCallback(IF)", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#end_block

#method_before
public void addCapabilitiesCallbackForSubscription(IImsCapabilityCallback callback, int subId) throws RemoteException {
    if (callback == null) {
        throw new NullPointerException("registration callback can't be null");
    }
    mMmTelFeatureConnection.addCapabilityCallbackForSubscription(callback, subId);
    log("Capability Callback registered for subscription.");
}
#method_after
public void addCapabilitiesCallbackForSubscription(IImsCapabilityCallback callback, int subId) throws RemoteException {
    if (callback == null) {
        throw new IllegalArgumentException("registration callback can't be null");
    }
    mMmTelFeatureConnection.addCapabilityCallbackForSubscription(callback, subId);
    log("Capability Callback registered for subscription.");
}
#end_block

#method_before
public void removeCapabilitiesCallbackForSubscription(IImsCapabilityCallback callback, int subId) {
    if (callback == null) {
        throw new NullPointerException("capabilities callback can't be null");
    }
    mMmTelFeatureConnection.removeCapabilityCallbackForSubscription(callback, subId);
}
#method_after
public void removeCapabilitiesCallbackForSubscription(IImsCapabilityCallback callback, int subId) {
    if (callback == null) {
        throw new IllegalArgumentException("capabilities callback can't be null");
    }
    mMmTelFeatureConnection.removeCapabilityCallbackForSubscription(callback, subId);
}
#end_block

#method_before
public void close() {
    if (mMmTelFeatureConnection != null) {
        mMmTelFeatureConnection.closeConnection();
    }
    // Remove callback for ImsConfig
    try {
        getConfigInterface().removeConfigCallback(mConfigCallback);
    } catch (ImsException e) {
        loge("close: Failed to call removeConfigCallback: " + e);
    }
    mUt = null;
    mEcbm = null;
    mMultiEndpoint = null;
}
#method_after
public void close() {
    if (mMmTelFeatureConnection != null) {
        mMmTelFeatureConnection.closeConnection();
    }
    mUt = null;
    mEcbm = null;
    mMultiEndpoint = null;
}
#end_block

#method_before
public ImsConfig getConfigInterface() throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    try {
        IImsConfig config = mMmTelFeatureConnection.getConfigInterface();
        if (config == null) {
            throw new ImsException("getConfigInterface()", ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE);
        }
        return new ImsConfig(config);
    } catch (RemoteException e) {
        throw new ImsException("getConfigInterface()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#method_after
public ImsConfig getConfigInterface() throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    IImsConfig config = mMmTelFeatureConnection.getConfigInterface();
    if (config == null) {
        throw new ImsException("getConfigInterface()", ImsReasonInfo.CODE_LOCAL_SERVICE_UNAVAILABLE);
    }
    return new ImsConfig(config);
}
#end_block

#method_before
public void changeMmTelCapability(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech, boolean isEnabled) throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    CapabilityChangeRequest request = new CapabilityChangeRequest();
    if (isEnabled) {
        request.addCapabilitiesToEnableForTech(capability, radioTech);
    } else {
        request.addCapabilitiesToDisableForTech(capability, radioTech);
    }
    try {
        mMmTelFeatureConnection.changeEnabledCapabilities(request, null);
        if (mImsConfigListener != null) {
            mImsConfigListener.onSetFeatureResponse(capability, mMmTelFeatureConnection.getRegistrationTech(), isEnabled ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF, -1);
        }
    } catch (RemoteException e) {
        throw new ImsException("changeMmTelCapability()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#method_after
public void changeMmTelCapability(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech, boolean isEnabled) throws ImsException {
    CapabilityChangeRequest request = new CapabilityChangeRequest();
    if (isEnabled) {
        request.addCapabilitiesToEnableForTech(capability, radioTech);
    } else {
        request.addCapabilitiesToDisableForTech(capability, radioTech);
    }
    changeMmTelCapability(request);
}
#end_block

#method_before
public void changeMmTelCapability(@MmTelFeature.MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech, boolean isEnabled) throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    CapabilityChangeRequest request = new CapabilityChangeRequest();
    if (isEnabled) {
        request.addCapabilitiesToEnableForTech(capability, radioTech);
    } else {
        request.addCapabilitiesToDisableForTech(capability, radioTech);
    }
    try {
        mMmTelFeatureConnection.changeEnabledCapabilities(request, null);
        if (mImsConfigListener != null) {
            mImsConfigListener.onSetFeatureResponse(capability, mMmTelFeatureConnection.getRegistrationTech(), isEnabled ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF, -1);
        }
    } catch (RemoteException e) {
        throw new ImsException("changeMmTelCapability()", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#method_after
public void changeMmTelCapability(CapabilityChangeRequest r) throws ImsException {
    checkAndThrowExceptionIfServiceUnavailable();
    try {
        Log.i(TAG, "changeMmTelCapability: changing capabilities for sub: " + getSubId() + ", request: " + r);
        mMmTelFeatureConnection.changeEnabledCapabilities(r, null);
        if (mImsConfigListener == null) {
            return;
        }
        for (CapabilityChangeRequest.CapabilityPair enabledCaps : r.getCapabilitiesToEnable()) {
            mImsConfigListener.onSetFeatureResponse(enabledCaps.getCapability(), enabledCaps.getRadioTech(), ProvisioningManager.PROVISIONING_VALUE_ENABLED, -1);
        }
        for (CapabilityChangeRequest.CapabilityPair disabledCaps : r.getCapabilitiesToDisable()) {
            mImsConfigListener.onSetFeatureResponse(disabledCaps.getCapability(), disabledCaps.getRadioTech(), ProvisioningManager.PROVISIONING_VALUE_DISABLED, -1);
        }
    } catch (RemoteException e) {
        throw new ImsException("changeMmTelCapability(CCR)", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN);
    }
}
#end_block

#method_before
private void setRttConfig(boolean enabled) {
    final int value = enabled ? ImsConfig.FeatureValueConstants.ON : ImsConfig.FeatureValueConstants.OFF;
    Thread thread = new Thread(() -> {
        try {
            Log.i(ImsManager.class.getSimpleName(), "Setting RTT enabled to " + enabled);
            getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.RTT_SETTING_ENABLED, value);
        } catch (ImsException e) {
            Log.e(ImsManager.class.getSimpleName(), "Unable to set RTT value enabled to " + enabled + ": " + e);
        }
    });
    thread.start();
}
#method_after
private void setRttConfig(boolean enabled) {
    final int value = enabled ? ProvisioningManager.PROVISIONING_VALUE_ENABLED : ProvisioningManager.PROVISIONING_VALUE_DISABLED;
    mExecutorFactory.executeRunnable(() -> {
        try {
            Log.i(ImsManager.class.getSimpleName(), "Setting RTT enabled to " + enabled);
            getConfigInterface().setProvisionedValue(ImsConfig.ConfigConstants.RTT_SETTING_ENABLED, value);
        } catch (ImsException e) {
            Log.e(ImsManager.class.getSimpleName(), "Unable to set RTT value enabled to " + enabled + ": " + e);
        }
    });
}
#end_block

#method_before
private void createImsService() {
    Rlog.i(TAG, "Creating ImsService");
    mMmTelFeatureConnection = MmTelFeatureConnection.create(mContext, mPhoneId);
    // Forwarding interface to tell mStatusCallbacks that the Proxy is unavailable.
    mMmTelFeatureConnection.setStatusCallback(new MmTelFeatureConnection.IFeatureUpdate() {

        @Override
        public void notifyStateChanged() {
            mStatusCallbacks.forEach(MmTelFeatureConnection.IFeatureUpdate::notifyStateChanged);
        }

        @Override
        public void notifyUnavailable() {
            mStatusCallbacks.forEach(MmTelFeatureConnection.IFeatureUpdate::notifyUnavailable);
        }
    });
}
#method_after
private void createImsService() {
    mMmTelFeatureConnection = MmTelFeatureConnection.create(mContext, mPhoneId);
    // Forwarding interface to tell mStatusCallbacks that the Proxy is unavailable.
    mMmTelFeatureConnection.setStatusCallback(new MmTelFeatureConnection.IFeatureUpdate() {

        @Override
        public void notifyStateChanged() {
            mStatusCallbacks.forEach(MmTelFeatureConnection.IFeatureUpdate::notifyStateChanged);
        }

        @Override
        public void notifyUnavailable() {
            mStatusCallbacks.forEach(MmTelFeatureConnection.IFeatureUpdate::notifyUnavailable);
        }
    });
}
#end_block

#method_before
private void setLteFeatureValues(boolean turnOn) {
    log("setLteFeatureValues: " + turnOn);
    CapabilityChangeRequest request = new CapabilityChangeRequest();
    if (turnOn) {
        request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    } else {
        request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    }
    if (isVolteEnabledByPlatform()) {
        boolean ignoreDataEnabledChanged = getBooleanCarrierConfig(CarrierConfigManager.KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS);
        boolean enableViLte = turnOn && isVtEnabledByUser() && (ignoreDataEnabledChanged || isDataEnabled());
        if (enableViLte) {
            request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
        } else {
            request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
        }
    }
    try {
        mMmTelFeatureConnection.changeEnabledCapabilities(request, null);
    } catch (RemoteException e) {
        Log.e(TAG, "setLteFeatureValues: Exception: " + e.getMessage());
    }
}
#method_after
private void setLteFeatureValues(boolean turnOn) {
    log("setLteFeatureValues: " + turnOn);
    CapabilityChangeRequest request = new CapabilityChangeRequest();
    if (turnOn) {
        request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    } else {
        request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
    }
    if (isVtEnabledByPlatform()) {
        boolean ignoreDataEnabledChanged = getBooleanCarrierConfig(CarrierConfigManager.KEY_IGNORE_DATA_ENABLED_CHANGED_FOR_VIDEO_CALLS);
        boolean enableViLte = turnOn && isVtEnabledByUser() && (ignoreDataEnabledChanged || isDataEnabled());
        if (enableViLte) {
            request.addCapabilitiesToEnableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
        } else {
            request.addCapabilitiesToDisableForTech(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO, ImsRegistrationImplBase.REGISTRATION_TECH_LTE);
        }
    }
    try {
        mMmTelFeatureConnection.changeEnabledCapabilities(request, null);
    } catch (RemoteException e) {
        Log.e(TAG, "setLteFeatureValues: Exception: " + e.getMessage());
    }
}
#end_block

#method_before
@Override
protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    WebkitHelpers.appendWebViewVersionToTitle(this);
    final Context activityContext = this;
    MenuListView listView = findViewById(R.id.top_level_list);
    MenuListView.MenuItem[] menuItems = new MenuListView.MenuItem[] { new MenuListView.MenuItem(getResources().getString(R.string.safebrowsing_activity_title), new Intent(activityContext, SafeBrowsingActivity.class)), new MenuListView.MenuItem(getResources().getString(R.string.webview_asset_loader_activity_title), new Intent(activityContext, WebViewAssetLoaderActivity.class)) };
    listView.setItems(menuItems);
}
#method_after
@Override
protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    WebkitHelpers.appendWebViewVersionToTitle(this);
    final Context activityContext = this;
    MenuListView listView = findViewById(R.id.top_level_list);
    MenuListView.MenuItem[] menuItems = new MenuListView.MenuItem[] { new MenuListView.MenuItem(getResources().getString(R.string.safebrowsing_activity_title), new Intent(activityContext, SafeBrowsingActivity.class)), new MenuListView.MenuItem(getResources().getString(R.string.proxy_override_activity_title), new Intent(activityContext, ProxyOverrideActivity.class)), new MenuListView.MenuItem(getResources().getString(R.string.asset_loader_list_activity_title), new Intent(activityContext, AssetLoaderListActivity.class)) };
    listView.setItems(menuItems);
}
#end_block

#method_before
@Override
protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_proxy_override);
    setTitle(R.string.proxy_override_activity_title);
    WebkitHelpers.appendWebViewVersionToTitle(this);
    final String proxyUrl = getProxyUrl();
    setProxyOverride(proxyUrl);
}
#method_after
@Override
protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_proxy_override);
    setTitle(R.string.proxy_override_activity_title);
    WebkitHelpers.appendWebViewVersionToTitle(this);
    // Initialize proxy server
    // Skip this step if you already have a proxy url
    mProxy = new Proxy(0, () -> mRequestCountTextView.setText(getResources().getString(R.string.proxy_override_requests_served, mProxy.getRequestCount())));
    mProxy.start();
    // Initialize views
    mRequestCountTextView = findViewById(R.id.proxy_override_textview);
    mRequestCountTextView.setText(getResources().getString(R.string.proxy_override_requests_served, 0));
    mWebView = findViewById(R.id.proxy_override_webview);
    mWebView.setWebViewClient(new WebViewClient());
    mInputMethodManager = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
    mNavigationBar = findViewById(R.id.proxy_override_edittext);
    mNavigationBar.setOnEditorActionListener((TextView v, int actionId, KeyEvent event) -> {
        // Listen to actions in the navigation bar (i.e. tapping enter on the soft keyboard)
        if (actionId == EditorInfo.IME_ACTION_NEXT) {
            // If action equals to IME_ACTION_NEXT, get the typed url, clear the navigation bar
            // and return true
            String url = mNavigationBar.getText().toString();
            if (!url.isEmpty()) {
                // If the retrieved url is not empty, call WebView.loadUrl passing it
                if (!url.startsWith("http"))
                    url = "http://" + url;
                mWebView.loadUrl(url);
                mNavigationBar.setText("");
            }
            mInputMethodManager.hideSoftInputFromWindow(mNavigationBar.getWindowToken(), 0);
            mWebView.requestFocus();
            return true;
        }
        return false;
    });
    // Check for proxy override feature
    if (!WebViewFeature.isFeatureSupported(WebViewFeature.PROXY_OVERRIDE)) {
        // If feature is not supported, just show a warning in the webview
        mRequestCountTextView.setVisibility(View.GONE);
        mNavigationBar.setVisibility(View.GONE);
        mWebView.loadData("<html><body>Proxy override not available</body></html>", "text/html", null);
        return;
    }
    // Set proxy override
    // Use your proxy url here
    setProxyOverride("localhost:" + mProxy.getPort());
}
#end_block

#method_before
private void onProxyOverrideComplete() {
    WebView webView = findViewById(R.id.proxy_override_webview);
    webView.setWebChromeClient(new WebChromeClient() {

        @Override
        public void onReceivedTitle(WebView view, String title) {
            Log.w(TAG, "Title received: " + title);
        }
    });
    webView.loadUrl("http://www.google.com/");
}
#method_after
private void onProxyOverrideComplete() {
    // Your code goes here, after the proxy override callback was executed
    mWebView.loadUrl("http://www.google.com");
}
#end_block

#method_before
public void start() {
    if (mRunning)
        return;
    mRunning = true;
    new Thread() {

        @Override
        public void run() {
            while (mRunning) {
                listen();
            }
        }
    }.start();
}
#method_after
public void start() {
    if (mRunning)
        return;
    mRunning = true;
    new Thread(() -> {
        while (mRunning) {
            listen();
        }
    }).start();
}
#end_block

#method_before
private void listen() {
    try {
        Socket socket = mServerSocket.accept();
        Thread thread = new Thread(new RequestHandler(socket));
        mThreadsList.add(thread);
        thread.start();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
#method_after
private void listen() {
    try {
        Socket socket = mServerSocket.accept();
        mRequestCount++;
        if (mCallback != null) {
            mCallback.onProxyRequestServed();
        }
        Thread thread = new Thread(new RequestHandler(socket));
        mThreadsList.add(thread);
        thread.start();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
#end_block

#method_before
@Override
public void run() {
    try {
        StringBuilder sb = new StringBuilder();
        while (true) {
            String s = mReader.readLine();
            if (s == null || s.trim().isEmpty())
                break;
            sb.append(s);
            sb.append(" ");
        }
        String request = sb.toString();
        mWriter.write("HTTP/1.0 200 OK\nUser-Agent: Proxy\n\r\n");
        mWriter.write("<html><head><title>Proxy</title></head>" + "<body>Proxy handled this request:<br>" + request + "</body></html>");
        mWriter.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
#method_after
@Override
public void run() {
    try {
        StringBuilder sb = new StringBuilder();
        String s = mReader.readLine();
        while (s != null && !s.trim().isEmpty()) {
            sb.append(s);
            sb.append(" ");
            s = mReader.readLine();
        }
        String request = sb.toString();
        mWriter.write("HTTP/1.0 200 OK\nUser-Agent: Proxy\n\r\n");
        mWriter.write("<html><head><title>Proxy</title></head>" + "<body>Proxy handled this request:<br><br>" + request + "</body></html>");
        mWriter.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }
}
#end_block

#method_before
public static void rebootWipeUserData(Context context, boolean shutdown, String reason, boolean force, boolean wipeEuicc) throws IOException {
    UserManager um = (UserManager) context.getSystemService(Context.USER_SERVICE);
    if (!force && um.hasUserRestriction(UserManager.DISALLOW_FACTORY_RESET)) {
        throw new SecurityException("Wiping data is not allowed for this user.");
    }
    final ConditionVariable condition = new ConditionVariable();
    Intent intent = new Intent("android.intent.action.MASTER_CLEAR_NOTIFICATION");
    intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND | Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);
    context.sendOrderedBroadcastAsUser(intent, UserHandle.SYSTEM, android.Manifest.permission.MASTER_CLEAR, new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            condition.open();
        }
    }, null, 0, null, null);
    // Block until the ordered broadcast has completed.
    condition.block();
    if (wipeEuicc) {
        wipeEuiccData(context, PACKAGE_NAME_WIPING_EUICC_DATA_CALLBACK);
    }
    String shutdownArg = null;
    if (shutdown) {
        shutdownArg = "--shutdown_after";
    }
    String reasonArg = null;
    if (!TextUtils.isEmpty(reason)) {
        Calendar calendar = Calendar.getInstance();
        String timeStamp = DateFormat.format(WIPE_DATA_TIME_FORMAT, calendar).toString();
        reasonArg = "--reason=" + sanitizeArg(reason + "," + timeStamp);
    }
    final String localeArg = "--locale=" + Locale.getDefault().toLanguageTag();
    bootCommand(context, shutdownArg, "--wipe_data", reasonArg, localeArg);
}
#method_after
public static void rebootWipeUserData(Context context, boolean shutdown, String reason, boolean force, boolean wipeEuicc) throws IOException {
    UserManager um = (UserManager) context.getSystemService(Context.USER_SERVICE);
    if (!force && um.hasUserRestriction(UserManager.DISALLOW_FACTORY_RESET)) {
        throw new SecurityException("Wiping data is not allowed for this user.");
    }
    final ConditionVariable condition = new ConditionVariable();
    Intent intent = new Intent("android.intent.action.MASTER_CLEAR_NOTIFICATION");
    intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND | Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);
    context.sendOrderedBroadcastAsUser(intent, UserHandle.SYSTEM, android.Manifest.permission.MASTER_CLEAR, new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            condition.open();
        }
    }, null, 0, null, null);
    // Block until the ordered broadcast has completed.
    condition.block();
    if (wipeEuicc) {
        wipeEuiccData(context, PACKAGE_NAME_WIPING_EUICC_DATA_CALLBACK);
    }
    String shutdownArg = null;
    if (shutdown) {
        shutdownArg = "--shutdown_after";
    }
    String reasonArg = null;
    if (!TextUtils.isEmpty(reason)) {
        String timeStamp = DateFormat.format("yyyy-MM-ddTHH:mm:ssZ", System.currentTimeMillis()).toString();
        reasonArg = "--reason=" + sanitizeArg(reason + "," + timeStamp);
    }
    final String localeArg = "--locale=" + Locale.getDefault().toLanguageTag();
    bootCommand(context, shutdownArg, "--wipe_data", reasonArg, localeArg);
}
#end_block

#method_before
private void combinePsRegistrationStates(ServiceState serviceState) {
    NetworkRegistrationState wlanPsRegState = serviceState.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WLAN);
    NetworkRegistrationState wwanPsRegState = serviceState.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN);
    if (wlanPsRegState != null && wlanPsRegState.getAccessNetworkTechnology() == TelephonyManager.NETWORK_TYPE_IWLAN && wlanPsRegState.getRegState() == NetworkRegistrationState.REG_STATE_HOME) {
        serviceState.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN);
        serviceState.setDataRegState(ServiceState.STATE_IN_SERVICE);
    } else if (wwanPsRegState != null) {
        // If the device is not camped on IWLAN, then we use cellular PS registration state
        // to compute reg state and rat.
        int regState = wwanPsRegState.getRegState();
        int dataRat = ServiceState.networkTypeToRilRadioTechnology(wwanPsRegState.getAccessNetworkTechnology());
        serviceState.setDataRegState(regCodeToServiceState(regState));
        serviceState.setRilDataRadioTechnology(dataRat);
    }
}
#method_after
private void combinePsRegistrationStates(ServiceState serviceState) {
    NetworkRegistrationState wlanPsRegState = serviceState.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WLAN);
    NetworkRegistrationState wwanPsRegState = serviceState.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN);
    if (wlanPsRegState != null && wlanPsRegState.getAccessNetworkTechnology() == TelephonyManager.NETWORK_TYPE_IWLAN && wlanPsRegState.getRegState() == NetworkRegistrationState.REG_STATE_HOME) {
        serviceState.setRilDataRadioTechnology(ServiceState.RIL_RADIO_TECHNOLOGY_IWLAN);
        serviceState.setDataRegState(ServiceState.STATE_IN_SERVICE);
    } else if (wwanPsRegState != null) {
        // If the device is not camped on IWLAN, then we use cellular PS registration state
        // to compute reg state and rat.
        int regState = wwanPsRegState.getRegState();
        int dataRat = ServiceState.networkTypeToRilRadioTechnology(wwanPsRegState.getAccessNetworkTechnology());
        serviceState.setDataRegState(regCodeToServiceState(regState));
        serviceState.setRilDataRadioTechnology(dataRat);
    }
    if (DBG) {
        log("combinePsRegistrationStates: " + serviceState);
    }
}
#end_block

#method_before
@Test
@MediumTest
public // TODO(nharold): we probably should remove support for this procedure (GET_LOC)
void testGsmCellLocation() {
    CellIdentityGsm cellIdentityGsm = new CellIdentityGsm(2, 3, 900, 5, "001", "01", "test", "tst");
    NetworkRegistrationState result = new NetworkRegistrationState(0, 0, 0, 0, 0, false, null, cellIdentityGsm);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_GET_LOC_DONE, new AsyncResult(null, result, null)));
    waitForMs(200);
    WorkSource workSource = new WorkSource(Process.myUid(), mContext.getPackageName());
    GsmCellLocation cl = (GsmCellLocation) sst.getCellLocation();
    assertEquals(2, cl.getLac());
    assertEquals(3, cl.getCid());
}
#method_after
@Test
@MediumTest
public // TODO(nharold): we probably should remove support for this procedure (GET_LOC)
void testGsmCellLocation() {
    CellIdentityGsm cellIdentityGsm = new CellIdentityGsm(2, 3, 900, 5, "001", "01", "test", "tst");
    NetworkRegistrationState result = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, 0, 0, false, null, cellIdentityGsm);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_GET_LOC_DONE, new AsyncResult(null, result, null)));
    waitForMs(200);
    WorkSource workSource = new WorkSource(Process.myUid(), mContext.getPackageName());
    GsmCellLocation cl = (GsmCellLocation) sst.getCellLocation();
    assertEquals(2, cl.getLac());
    assertEquals(3, cl.getCid());
}
#end_block

#method_before
@FlakyTest
/* flakes 0.86% of the time */
@Test
@MediumTest
public // TODO(nharold): we probably should remove support for this procedure (GET_LOC)
void testCdmaCellLocation() {
    CellIdentityCdma cellIdentityCdma = new CellIdentityCdma(1, 2, 3, 4, 5, "test", "tst");
    NetworkRegistrationState result = new NetworkRegistrationState(0, 0, 0, 0, 0, false, null, cellIdentityCdma);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_GET_LOC_DONE, new AsyncResult(null, result, null)));
    waitForMs(200);
    WorkSource workSource = new WorkSource(Process.myUid(), mContext.getPackageName());
    CdmaCellLocation cl = (CdmaCellLocation) sst.getCellLocation();
    assertEquals(5, cl.getBaseStationLatitude());
    assertEquals(4, cl.getBaseStationLongitude());
}
#method_after
@FlakyTest
/* flakes 0.86% of the time */
@Test
@MediumTest
public // TODO(nharold): we probably should remove support for this procedure (GET_LOC)
void testCdmaCellLocation() {
    CellIdentityCdma cellIdentityCdma = new CellIdentityCdma(1, 2, 3, 4, 5, "test", "tst");
    NetworkRegistrationState result = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, 0, 0, false, null, cellIdentityCdma);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_GET_LOC_DONE, new AsyncResult(null, result, null)));
    waitForMs(200);
    WorkSource workSource = new WorkSource(Process.myUid(), mContext.getPackageName());
    CdmaCellLocation cl = (CdmaCellLocation) sst.getCellLocation();
    assertEquals(5, cl.getBaseStationLatitude());
    assertEquals(4, cl.getBaseStationLongitude());
}
#end_block

#method_before
private void changeRegState(int state, CellIdentity cid, int voiceRat, int dataRat) {
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE, LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(0, 0, state, dataRat, 0, false, null, cid, 1, false, false, false, lteVopsSupportInfo);
    sst.mPollingContext[0] = 2;
    // update data reg state to be in service
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(0, 0, state, voiceRat, 0, false, null, cid, false, 0, 0, 0);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
}
#method_after
private void changeRegState(int state, CellIdentity cid, int voiceRat, int dataRat) {
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE, LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN, state, dataRat, 0, false, null, cid, 1, false, false, false, lteVopsSupportInfo);
    sst.mPollingContext[0] = 2;
    // update data reg state to be in service
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, TransportType.WWAN, state, voiceRat, 0, false, null, cid, false, 0, 0, 0);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
}
#end_block

#method_before
private void sendRegStateUpdateForLteCellId(CellIdentityLte cellId) {
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE, LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(2, 1, 1, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, 1, false, false, false, lteVopsSupportInfo);
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(1, 1, 1, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, false, 0, 0, 0);
    sst.mPollingContext[0] = 2;
    // update data reg state to be in service
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
}
#method_after
private void sendRegStateUpdateForLteCellId(CellIdentityLte cellId) {
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE, LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, 1, false, false, false, lteVopsSupportInfo);
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, false, 0, 0, 0);
    sst.mPollingContext[0] = 2;
    // update data reg state to be in service
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
}
#end_block

#method_before
@Test
public void testPhyChanBandwidthResetsOnOos() throws Exception {
    testPhyChanBandwidthRatchetedOnPhyChanBandwidth();
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE, LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(2, 1, 0, TelephonyManager.NETWORK_TYPE_UNKNOWN, 0, false, null, null, 1, false, false, false, lteVopsSupportInfo);
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(1, 1, 0, TelephonyManager.NETWORK_TYPE_UNKNOWN, 0, false, null, null, false, 0, 0, 0);
    sst.mPollingContext[0] = 2;
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
    assertTrue(Arrays.equals(new int[0], sst.mSS.getCellBandwidths()));
}
#method_after
@Test
public void testPhyChanBandwidthResetsOnOos() throws Exception {
    testPhyChanBandwidthRatchetedOnPhyChanBandwidth();
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE, LteVopsSupportInfo.LTE_STATUS_NOT_AVAILABLE);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_NOT_REG_NOT_SEARCHING, TelephonyManager.NETWORK_TYPE_UNKNOWN, 0, false, null, null, 1, false, false, false, lteVopsSupportInfo);
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_NOT_REG_NOT_SEARCHING, TelephonyManager.NETWORK_TYPE_UNKNOWN, 0, false, null, null, false, 0, 0, 0);
    sst.mPollingContext[0] = 2;
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
    assertTrue(Arrays.equals(new int[0], sst.mSS.getCellBandwidths()));
}
#end_block

#method_before
@Test
@SmallTest
public void testOnVopsInfoChanged() {
    ServiceState ss = new ServiceState();
    ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE);
    ss.setDataRegState(ServiceState.STATE_IN_SERVICE);
    sst.mSS = ss;
    CellIdentityLte cellId = new CellIdentityLte(1, 1, 5, 1, 5000, "001", "01", "test", "tst");
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_SUPPORTED, LteVopsSupportInfo.LTE_STATUS_NOT_SUPPORTED);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(2, 1, 1, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, 1, false, false, false, lteVopsSupportInfo);
    sst.mPollingContext[0] = 2;
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(1, 1, 1, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, false, 0, 0, 0);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
    assertEquals(ServiceState.STATE_IN_SERVICE, sst.getCurrentDataConnectionState());
    NetworkRegistrationState sSnetworkRegistrationState = sst.mSS.getNetworkRegistrationState(2, 1);
    assertEquals(lteVopsSupportInfo, sSnetworkRegistrationState.getDataSpecificStates().lteVopsSupportInfo);
    lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_SUPPORTED, LteVopsSupportInfo.LTE_STATUS_NOT_SUPPORTED);
    dataResult = new NetworkRegistrationState(2, 1, 1, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, 1, false, false, false, lteVopsSupportInfo);
    sst.mPollingContext[0] = 1;
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    sSnetworkRegistrationState = sst.mSS.getNetworkRegistrationState(2, 1);
    assertEquals(lteVopsSupportInfo, sSnetworkRegistrationState.getDataSpecificStates().lteVopsSupportInfo);
}
#method_after
@Test
@SmallTest
public void testOnVopsInfoChanged() {
    ServiceState ss = new ServiceState();
    ss.setVoiceRegState(ServiceState.STATE_IN_SERVICE);
    ss.setDataRegState(ServiceState.STATE_IN_SERVICE);
    sst.mSS = ss;
    CellIdentityLte cellId = new CellIdentityLte(1, 1, 5, 1, 5000, "001", "01", "test", "tst");
    LteVopsSupportInfo lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_NOT_SUPPORTED, LteVopsSupportInfo.LTE_STATUS_NOT_SUPPORTED);
    NetworkRegistrationState dataResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, 1, false, false, false, lteVopsSupportInfo);
    sst.mPollingContext[0] = 2;
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    NetworkRegistrationState voiceResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_CS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, false, 0, 0, 0);
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_CS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, voiceResult, null)));
    waitForMs(200);
    assertEquals(ServiceState.STATE_IN_SERVICE, sst.getCurrentDataConnectionState());
    NetworkRegistrationState sSnetworkRegistrationState = sst.mSS.getNetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN);
    assertEquals(lteVopsSupportInfo, sSnetworkRegistrationState.getDataSpecificStates().lteVopsSupportInfo);
    lteVopsSupportInfo = new LteVopsSupportInfo(LteVopsSupportInfo.LTE_STATUS_SUPPORTED, LteVopsSupportInfo.LTE_STATUS_NOT_SUPPORTED);
    dataResult = new NetworkRegistrationState(NetworkRegistrationState.DOMAIN_PS, TransportType.WWAN, NetworkRegistrationState.REG_STATE_HOME, TelephonyManager.NETWORK_TYPE_LTE, 0, false, null, cellId, 1, false, false, false, lteVopsSupportInfo);
    sst.mPollingContext[0] = 1;
    sst.sendMessage(sst.obtainMessage(ServiceStateTracker.EVENT_POLL_STATE_PS_CELLULAR_REGISTRATION, new AsyncResult(sst.mPollingContext, dataResult, null)));
    waitForMs(200);
    sSnetworkRegistrationState = sst.mSS.getNetworkRegistrationState(2, 1);
    assertEquals(lteVopsSupportInfo, sSnetworkRegistrationState.getDataSpecificStates().lteVopsSupportInfo);
}
#end_block

#method_before
/**
 * Send a multi-part text based SMS with Messaging Options.
 *
 * @param destAddr the address to send the message to
 * @param scAddr is the service center address or null to use
 *   the current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,
 *   comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of
 *   <code>PendingIntent</code>s (one for each message part) that is
 *   broadcast when the corresponding message part has been sent.
 *   The result code will be <code>Activity.RESULT_OK<code> for success,
 *   or one of these errors:
 *   <code>RESULT_ERROR_GENERIC_FAILURE</code>
 *   <code>RESULT_ERROR_RADIO_OFF</code>
 *   <code>RESULT_ERROR_NULL_PDU</code>.
 *  The per-application based SMS control checks sentIntent. If sentIntent
 *  is NULL the caller will be checked against all unknown applications,
 *  which cause smaller number of SMS to be sent in checking period.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of
 *   <code>PendingIntent</code>s (one for each message part) that is
 *   broadcast when the corresponding message part has been delivered
 *   to the recipient.  The raw pdu of the status report is in the
 *   extended data ("pdu").
 * @param persistMessageForNonDefaultSmsApp whether the sent message should
 *   be automatically persisted in the SMS db. It only affects messages sent
 *   by a non-default SMS app. Currently only the carrier app can set this
 *   parameter to false to skip auto message persistence.
 * @param priority Priority level of the message
 *  Refer specification See 3GPP2 C.S0015-B, v2.0, table 4.5.9-1
 *  ---------------------------------
 *  PRIORITY      | Level of Priority
 *  ---------------------------------
 *      '00'      |     Normal
 *      '01'      |     Interactive
 *      '10'      |     Urgent
 *      '11'      |     Emergency
 *  ----------------------------------
 *  Any Other values including negative considered as Invalid Priority Indicator of the message.
 * @param expectMore is a boolean to indicate the sending messages through same link or not.
 * @param validityPeriod Validity Period of the message in mins.
 *  Refer specification 3GPP TS 23.040 V6.8.1 section 9.2.3.12.1.
 *  Validity Period(Minimum) -> 5 mins
 *  Validity Period(Maximum) -> 635040 mins(i.e.63 weeks).
 *  Any Other values including negative considered as Invalid Validity Period of the message.
 */
public void sendMultipartTextWithOptions(String callingPackage, String destAddr, String scAddr, List<String> parts, List<PendingIntent> sentIntents, List<PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp, int priority, boolean expectMore, int validityPeriod) {
    if (!checkCallingSendTextPermissions(persistMessageForNonDefaultSmsApp, callingPackage, "Sending SMS message")) {
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    if (Rlog.isLoggable("SMS", Log.VERBOSE)) {
        int i = 0;
        for (String part : parts) {
            log("sendMultipartTextWithOptions: destAddr=" + destAddr + ", srAddr=" + scAddr + ", part[" + (i++) + "]=" + part);
        }
    }
    destAddr = filterDestAddress(destAddr);
    if (parts.size() > 1 && parts.size() < 10 && !SmsMessage.hasEmsSupport()) {
        for (int i = 0; i < parts.size(); i++) {
            // If EMS is not supported, we have to break down EMS into single segment SMS
            // and add page info " x/y".
            String singlePart = parts.get(i);
            if (SmsMessage.shouldAppendPageNumberAsPrefix()) {
                singlePart = String.valueOf(i + 1) + '/' + parts.size() + ' ' + singlePart;
            } else {
                singlePart = singlePart.concat(' ' + String.valueOf(i + 1) + '/' + parts.size());
            }
            PendingIntent singleSentIntent = null;
            if (sentIntents != null && sentIntents.size() > i) {
                singleSentIntent = sentIntents.get(i);
            }
            PendingIntent singleDeliveryIntent = null;
            if (deliveryIntents != null && deliveryIntents.size() > i) {
                singleDeliveryIntent = deliveryIntents.get(i);
            }
            mDispatchersController.sendText(destAddr, scAddr, singlePart, singleSentIntent, singleDeliveryIntent, null, /*messageUri*/
            callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod);
        }
        return;
    }
    final long ident = Binder.clearCallingIdentity();
    try {
        mDispatchersController.sendMultipartText(destAddr, scAddr, (ArrayList<String>) parts, (ArrayList<PendingIntent>) sentIntents, (ArrayList<PendingIntent>) deliveryIntents, null, callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod);
    } finally {
        Binder.restoreCallingIdentity(ident);
    }
}
#method_after
/**
 * Send a multi-part text based SMS with Messaging Options.
 *
 * @param destAddr the address to send the message to
 * @param scAddr is the service center address or null to use
 *   the current default SMSC
 * @param parts an <code>ArrayList</code> of strings that, in order,
 *   comprise the original message
 * @param sentIntents if not null, an <code>ArrayList</code> of
 *   <code>PendingIntent</code>s (one for each message part) that is
 *   broadcast when the corresponding message part has been sent.
 *   The result code will be <code>Activity.RESULT_OK<code> for success,
 *   or one of these errors:
 *   <code>RESULT_ERROR_GENERIC_FAILURE</code>
 *   <code>RESULT_ERROR_RADIO_OFF</code>
 *   <code>RESULT_ERROR_NULL_PDU</code>.
 *  The per-application based SMS control checks sentIntent. If sentIntent
 *  is NULL the caller will be checked against all unknown applications,
 *  which cause smaller number of SMS to be sent in checking period.
 * @param deliveryIntents if not null, an <code>ArrayList</code> of
 *   <code>PendingIntent</code>s (one for each message part) that is
 *   broadcast when the corresponding message part has been delivered
 *   to the recipient.  The raw pdu of the status report is in the
 *   extended data ("pdu").
 * @param persistMessageForNonDefaultSmsApp whether the sent message should
 *   be automatically persisted in the SMS db. It only affects messages sent
 *   by a non-default SMS app. Currently only the carrier app can set this
 *   parameter to false to skip auto message persistence.
 * @param priority Priority level of the message
 *  Refer specification See 3GPP2 C.S0015-B, v2.0, table 4.5.9-1
 *  ---------------------------------
 *  PRIORITY      | Level of Priority
 *  ---------------------------------
 *      '00'      |     Normal
 *      '01'      |     Interactive
 *      '10'      |     Urgent
 *      '11'      |     Emergency
 *  ----------------------------------
 *  Any Other values including negative considered as Invalid Priority Indicator of the message.
 * @param expectMore is a boolean to indicate the sending messages through same link or not.
 * @param validityPeriod Validity Period of the message in mins.
 *  Refer specification 3GPP TS 23.040 V6.8.1 section 9.2.3.12.1.
 *  Validity Period(Minimum) -> 5 mins
 *  Validity Period(Maximum) -> 635040 mins(i.e.63 weeks).
 *  Any Other values including negative considered as Invalid Validity Period of the message.
 */
public void sendMultipartTextWithOptions(String callingPackage, String destAddr, String scAddr, List<String> parts, List<PendingIntent> sentIntents, List<PendingIntent> deliveryIntents, boolean persistMessageForNonDefaultSmsApp, int priority, boolean expectMore, int validityPeriod) {
    if (!checkCallingSendTextPermissions(persistMessageForNonDefaultSmsApp, callingPackage, "Sending SMS message")) {
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    if (Rlog.isLoggable("SMS", Log.VERBOSE)) {
        int i = 0;
        for (String part : parts) {
            log("sendMultipartTextWithOptions: destAddr=" + destAddr + ", srAddr=" + scAddr + ", part[" + (i++) + "]=" + part);
        }
    }
    final long ident = Binder.clearCallingIdentity();
    try {
        destAddr = filterDestAddress(destAddr);
        if (parts.size() > 1 && parts.size() < 10 && !SmsMessage.hasEmsSupport()) {
            for (int i = 0; i < parts.size(); i++) {
                // If EMS is not supported, we have to break down EMS into single segment SMS
                // and add page info " x/y".
                String singlePart = parts.get(i);
                if (SmsMessage.shouldAppendPageNumberAsPrefix()) {
                    singlePart = String.valueOf(i + 1) + '/' + parts.size() + ' ' + singlePart;
                } else {
                    singlePart = singlePart.concat(' ' + String.valueOf(i + 1) + '/' + parts.size());
                }
                PendingIntent singleSentIntent = null;
                if (sentIntents != null && sentIntents.size() > i) {
                    singleSentIntent = sentIntents.get(i);
                }
                PendingIntent singleDeliveryIntent = null;
                if (deliveryIntents != null && deliveryIntents.size() > i) {
                    singleDeliveryIntent = deliveryIntents.get(i);
                }
                mDispatchersController.sendText(destAddr, scAddr, singlePart, singleSentIntent, singleDeliveryIntent, null, /*messageUri*/
                callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod);
            }
            return;
        }
        mDispatchersController.sendMultipartText(destAddr, scAddr, (ArrayList<String>) parts, (ArrayList<PendingIntent>) sentIntents, (ArrayList<PendingIntent>) deliveryIntents, null, callingPackage, persistMessageForNonDefaultSmsApp, priority, expectMore, validityPeriod);
    } finally {
        Binder.restoreCallingIdentity(ident);
    }
}
#end_block

#method_before
public void sendStoredMultipartText(String callingPkg, Uri messageUri, String scAddress, List<PendingIntent> sentIntents, List<PendingIntent> deliveryIntents) {
    if (!checkCallingSendSmsPermission(callingPkg, "Sending SMS message")) {
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final ContentResolver resolver = mContext.getContentResolver();
    if (!isFailedOrDraft(resolver, messageUri)) {
        Log.e(LOG_TAG, "[IccSmsInterfaceManager]sendStoredMultipartText: " + "not FAILED or DRAFT message");
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final String[] textAndAddress = loadTextAndAddress(resolver, messageUri);
    if (textAndAddress == null) {
        Log.e(LOG_TAG, "[IccSmsInterfaceManager]sendStoredMultipartText: can not load text");
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final ArrayList<String> parts = SmsManager.getDefault().divideMessage(textAndAddress[0]);
    if (parts == null || parts.size() < 1) {
        Log.e(LOG_TAG, "[IccSmsInterfaceManager]sendStoredMultipartText: can not divide text");
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    textAndAddress[1] = filterDestAddress(textAndAddress[1]);
    if (parts.size() > 1 && parts.size() < 10 && !SmsMessage.hasEmsSupport()) {
        for (int i = 0; i < parts.size(); i++) {
            // If EMS is not supported, we have to break down EMS into single segment SMS
            // and add page info " x/y".
            String singlePart = parts.get(i);
            if (SmsMessage.shouldAppendPageNumberAsPrefix()) {
                singlePart = String.valueOf(i + 1) + '/' + parts.size() + ' ' + singlePart;
            } else {
                singlePart = singlePart.concat(' ' + String.valueOf(i + 1) + '/' + parts.size());
            }
            PendingIntent singleSentIntent = null;
            if (sentIntents != null && sentIntents.size() > i) {
                singleSentIntent = sentIntents.get(i);
            }
            PendingIntent singleDeliveryIntent = null;
            if (deliveryIntents != null && deliveryIntents.size() > i) {
                singleDeliveryIntent = deliveryIntents.get(i);
            }
            mDispatchersController.sendText(textAndAddress[1], scAddress, singlePart, singleSentIntent, singleDeliveryIntent, messageUri, callingPkg, true, /* persistMessageForNonDefaultSmsApp */
            SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, /* expectMore */
            SMS_MESSAGE_PERIOD_NOT_SPECIFIED);
        }
        return;
    }
    final long ident = Binder.clearCallingIdentity();
    try {
        mDispatchersController.sendMultipartText(// destAddress
        textAndAddress[1], scAddress, parts, (ArrayList<PendingIntent>) sentIntents, (ArrayList<PendingIntent>) deliveryIntents, messageUri, callingPkg, true, /* persistMessageForNonDefaultSmsApp */
        SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, /* expectMore */
        SMS_MESSAGE_PERIOD_NOT_SPECIFIED);
    } finally {
        Binder.restoreCallingIdentity(ident);
    }
}
#method_after
public void sendStoredMultipartText(String callingPkg, Uri messageUri, String scAddress, List<PendingIntent> sentIntents, List<PendingIntent> deliveryIntents) {
    if (!checkCallingSendSmsPermission(callingPkg, "Sending SMS message")) {
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final ContentResolver resolver = mContext.getContentResolver();
    if (!isFailedOrDraft(resolver, messageUri)) {
        Log.e(LOG_TAG, "[IccSmsInterfaceManager]sendStoredMultipartText: " + "not FAILED or DRAFT message");
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final String[] textAndAddress = loadTextAndAddress(resolver, messageUri);
    if (textAndAddress == null) {
        Log.e(LOG_TAG, "[IccSmsInterfaceManager]sendStoredMultipartText: can not load text");
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final ArrayList<String> parts = SmsManager.getDefault().divideMessage(textAndAddress[0]);
    if (parts == null || parts.size() < 1) {
        Log.e(LOG_TAG, "[IccSmsInterfaceManager]sendStoredMultipartText: can not divide text");
        returnUnspecifiedFailure(sentIntents);
        return;
    }
    final long ident = Binder.clearCallingIdentity();
    try {
        textAndAddress[1] = filterDestAddress(textAndAddress[1]);
        if (parts.size() > 1 && parts.size() < 10 && !SmsMessage.hasEmsSupport()) {
            for (int i = 0; i < parts.size(); i++) {
                // If EMS is not supported, we have to break down EMS into single segment SMS
                // and add page info " x/y".
                String singlePart = parts.get(i);
                if (SmsMessage.shouldAppendPageNumberAsPrefix()) {
                    singlePart = String.valueOf(i + 1) + '/' + parts.size() + ' ' + singlePart;
                } else {
                    singlePart = singlePart.concat(' ' + String.valueOf(i + 1) + '/' + parts.size());
                }
                PendingIntent singleSentIntent = null;
                if (sentIntents != null && sentIntents.size() > i) {
                    singleSentIntent = sentIntents.get(i);
                }
                PendingIntent singleDeliveryIntent = null;
                if (deliveryIntents != null && deliveryIntents.size() > i) {
                    singleDeliveryIntent = deliveryIntents.get(i);
                }
                mDispatchersController.sendText(textAndAddress[1], scAddress, singlePart, singleSentIntent, singleDeliveryIntent, messageUri, callingPkg, true, /* persistMessageForNonDefaultSmsApp */
                SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, /* expectMore */
                SMS_MESSAGE_PERIOD_NOT_SPECIFIED);
            }
            return;
        }
        mDispatchersController.sendMultipartText(// destAddress
        textAndAddress[1], scAddress, parts, (ArrayList<PendingIntent>) sentIntents, (ArrayList<PendingIntent>) deliveryIntents, messageUri, callingPkg, true, /* persistMessageForNonDefaultSmsApp */
        SMS_MESSAGE_PRIORITY_NOT_SPECIFIED, false, /* expectMore */
        SMS_MESSAGE_PERIOD_NOT_SPECIFIED);
    } finally {
        Binder.restoreCallingIdentity(ident);
    }
}
#end_block

#method_before
private static String decode7bitAscii(byte[] data, int offset, int numFields) throws CodingException {
    try {
        int offsetBits = offset * 8;
        int offsetSeptets = (offsetBits + 6) / 7;
        numFields -= offsetSeptets;
        int paddingBits = (offsetSeptets * 7) - offsetBits;
        StringBuffer strBuf = new StringBuffer(numFields);
        BitwiseInputStream inStream = new BitwiseInputStream(data);
        int wantedBits = (offsetSeptets * 7) + (numFields * 7);
        if (inStream.available() < wantedBits) {
            throw new CodingException("insufficient data (wanted " + wantedBits + " bits, but only have " + inStream.available() + ")");
        }
        inStream.skip(offsetBits + paddingBits);
        for (int i = 0; i < numFields; i++) {
            int charCode = inStream.read(7);
            if ((charCode >= UserData.ASCII_MAP_BASE_INDEX) && (charCode <= UserData.ASCII_MAP_MAX_INDEX)) {
                strBuf.append(UserData.ASCII_MAP[charCode - UserData.ASCII_MAP_BASE_INDEX]);
            } else if (charCode == UserData.ASCII_NL_INDEX) {
                strBuf.append('\n');
            } else if (charCode == UserData.ASCII_CR_INDEX) {
                strBuf.append('\r');
            } else {
                /* For other charCodes, they are unprintable, and so simply use SPACE. */
                strBuf.append(' ');
            }
        }
        return strBuf.toString();
    } catch (BitwiseInputStream.AccessException ex) {
        throw new CodingException("7bit ASCII decode failed: " + ex);
    }
}
#method_after
private static String decode7bitAscii(byte[] data, int offset, int numFields) throws CodingException {
    try {
        int offsetBits = offset * 8;
        int offsetSeptets = (offsetBits + 6) / 7;
        numFields -= offsetSeptets;
        StringBuffer strBuf = new StringBuffer(numFields);
        BitwiseInputStream inStream = new BitwiseInputStream(data);
        int wantedBits = (offsetSeptets * 7) + (numFields * 7);
        if (inStream.available() < wantedBits) {
            throw new CodingException("insufficient data (wanted " + wantedBits + " bits, but only have " + inStream.available() + ")");
        }
        inStream.skip(offsetSeptets * 7);
        for (int i = 0; i < numFields; i++) {
            int charCode = inStream.read(7);
            if ((charCode >= UserData.ASCII_MAP_BASE_INDEX) && (charCode <= UserData.ASCII_MAP_MAX_INDEX)) {
                strBuf.append(UserData.ASCII_MAP[charCode - UserData.ASCII_MAP_BASE_INDEX]);
            } else if (charCode == UserData.ASCII_NL_INDEX) {
                strBuf.append('\n');
            } else if (charCode == UserData.ASCII_CR_INDEX) {
                strBuf.append('\r');
            } else {
                /* For other charCodes, they are unprintable, and so simply use SPACE. */
                strBuf.append(' ');
            }
        }
        return strBuf.toString();
    } catch (BitwiseInputStream.AccessException ex) {
        throw new CodingException("7bit ASCII decode failed: " + ex);
    }
}
#end_block

#method_before
public void test_parse_whitespace_within_date() {
    Date date = new GregorianCalendar(2003, Calendar.APRIL, 5, 9, 7, 6).getTime();
    parse_whitespace_variants(new SimpleDateFormat("HH:mm:ss dd/MM/yy"), date, new String[] { "%c9:07:06 05/04/03", "%c09:07:06 05/04/03", "09:%c7:06 05/04/03", "09:%c07:06 05/04/03", "09:07:%c6 05/04/03", "09:07:%c06 05/04/03", "09:07:06 %c05/04/03", "09:07:06 %c5/04/03", "09:07:06 05/%c4/03", "09:07:06 05/%c04/03" // TODO(prb): Uncomment these when they are parsed correctly
    // "09:07:06 05/04/%c3",
    // "09:07:06 05/04/%c03",
    });
    parse_whitespace_variants(new SimpleDateFormat("HH:mm:ss dd/MM/yyyy"), date, new String[] { "09:07:06 05/04/%c2003" });
}
#method_after
public void test_parse_whitespace_within_date() {
    Date date = new GregorianCalendar(2003, Calendar.APRIL, 5, 9, 7, 6).getTime();
    parse_whitespace_variants(new SimpleDateFormat("HH:mm:ss dd/MM/yy"), date, new String[] { "%c9:07:06 05/04/03", "%c09:07:06 05/04/03", "09:%c7:06 05/04/03", "09:%c07:06 05/04/03", "09:07:%c6 05/04/03", "09:07:%c06 05/04/03", "09:07:06 %c05/04/03", "09:07:06 %c5/04/03", "09:07:06 05/%c4/03", "09:07:06 05/%c04/03", "09:07:06 05/04/%c03" });
    parse_whitespace_variants(new SimpleDateFormat("HH:mm:ss dd/MM/yyyy"), date, new String[] { "09:07:06 05/04/%c2003" });
}
#end_block

#method_before
// Tests valid and invalid whitespace characters are parsed correctly within
// a date string. dateFormat and expected are the SimpleDateFormat and expected date.
// variants is a list of input variations where %c will be substituted with
private void parse_whitespace_variants(SimpleDateFormat dateFormat, Date expected, String[] variants) {
    char[] validWhitespace = { 0x9, 0x20 };
    char[] invalidWhitespace = { // whitespace
    0x1c, 0x1d, 0x1e, 0x1f, 0xa, 0xb, 0xc, 0xd, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2008, 0x2009, 0x200a, 0x200b, 0x2028, 0x2029, 0x3000, // non-breaking space
    0xA0, 0x2007, 0x202F };
    dateFormat.setLenient(false);
    for (String variant : variants) {
        for (char c : validWhitespace) {
            String input = String.format(variant, c);
            Date date = dateFormat.parse(input, new ParsePosition(0));
            assertNotNull(date);
            assertEquals(expected, date);
        }
        for (char c : invalidWhitespace) {
            String input = String.format(variant, c);
            Date date = dateFormat.parse(input, new ParsePosition(0));
            assertNull(date);
        }
    }
}
#method_after
// Tests valid and invalid whitespace characters are parsed correctly within
// a date string. dateFormat and expected are the SimpleDateFormat and expected date.
// variants is a list of input variations where %c will be substituted with
private void parse_whitespace_variants(SimpleDateFormat dateFormat, Date expected, String[] variants) {
    char[] validWhitespace = { 0x9, 0x20 };
    char[] invalidWhitespace = { // Whitespace
    0x1c, 0x1d, 0x1e, 0x1f, 0xa, 0xb, 0xc, 0xd, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2008, 0x2009, 0x200a, 0x200b, 0x2028, 0x2029, 0x3000, // Non-breaking space
    0xA0, 0x2007, 0x202F };
    dateFormat.setLenient(false);
    for (String variant : variants) {
        for (char c : validWhitespace) {
            String info = String.format("Parsing variant='%s', c=0x%x:", variant, (int) c);
            String input = String.format(variant, c);
            Date date = dateFormat.parse(input, new ParsePosition(0));
            assertEquals(info, expected, date);
            try {
                date = dateFormat.parse(input);
            } catch (ParseException e) {
                fail(info);
            }
            assertEquals(info, expected, date);
        }
        for (char c : invalidWhitespace) {
            String info = String.format("Parsing variant='%s', c=0x%x:", variant, (int) c);
            String input = String.format(variant, c);
            Date date = dateFormat.parse(input, new ParsePosition(0));
            assertNull(info, date);
            try {
                dateFormat.parse(input);
                fail(info);
            } catch (ParseException e) {
            // Expected
            }
        }
    }
}
#end_block

#method_before
@MediumTest
@Test
public void testHasAppCompatDialogMode() {
    final AppCompatSpinner spinner = mContainer.findViewById(R.id.spinner_dialog_popup);
    final AppCompatSpinner.SpinnerPopup popup = spinner.getInternalPopup();
    assertNotNull(popup);
    assertThat(popup, instanceOf(AppCompatSpinner.DialogPopup.class));
    final AppCompatSpinner.DialogPopup dialogPopup = (AppCompatSpinner.DialogPopup) popup;
    assertThat(dialogPopup.mPopup, instanceOf(AlertDialog.class));
}
#method_after
@MediumTest
@Test
public void testHasAppCompatDialogMode() {
    final AppCompatSpinner spinner = mContainer.findViewById(R.id.spinner_dialog_popup);
    final AppCompatSpinner.SpinnerPopup popup = spinner.getInternalPopup();
    assertNotNull(popup);
    assertThat(popup, instanceOf(AppCompatSpinner.DialogPopup.class));
    onView(withId(R.id.spinner_dialog_popup)).perform(click());
    final AppCompatSpinner.DialogPopup dialogPopup = (AppCompatSpinner.DialogPopup) popup;
    assertThat(dialogPopup.mPopup, instanceOf(AlertDialog.class));
}
#end_block

#method_before
@Override
public boolean performClick() {
    if (mPopup != null) {
        // If we have a popup, show it if needed, or just consume the click...
        if (!mPopup.isShowing()) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                mPopup.show(getTextDirection(), getTextAlignment());
            } else {
                mPopup.show(-1, -1);
            }
        }
        return true;
    }
    // Else let the platform handle the click
    return super.performClick();
}
#method_after
@Override
public boolean performClick() {
    if (mPopup != null) {
        // If we have a popup, show it if needed, or just consume the click...
        if (!mPopup.isShowing()) {
            showPopup();
        }
        return true;
    }
    // Else let the platform handle the click
    return super.performClick();
}
#end_block

#method_before
public void dismiss() {
    if (mPopup != null) {
        mPopup.dismiss();
        mPopup = null;
    }
}
#method_after
@Override
public void dismiss() {
    if (mPopup != null) {
        mPopup.dismiss();
        mPopup = null;
    }
}
#end_block

#method_before
public boolean isShowing() {
    return mPopup != null ? mPopup.isShowing() : false;
}
#method_after
@Override
public boolean isShowing() {
    return mPopup != null ? mPopup.isShowing() : false;
}
#end_block

#method_before
public void setAdapter(ListAdapter adapter) {
    mListAdapter = adapter;
}
#method_after
@Override
public void setAdapter(ListAdapter adapter) {
    mListAdapter = adapter;
}
#end_block

#method_before
public void setPromptText(CharSequence hintText) {
    mPrompt = hintText;
}
#method_after
@Override
public void setPromptText(CharSequence hintText) {
    mPrompt = hintText;
}
#end_block

#method_before
public CharSequence getHintText() {
    return mPrompt;
}
#method_after
@Override
public CharSequence getHintText() {
    return mPrompt;
}
#end_block

#method_before
public void onClick(DialogInterface dialog, int which) {
    setSelection(which);
    if (getOnItemClickListener() != null) {
        performItemClick(null, which, mListAdapter.getItemId(which));
    }
    dismiss();
}
#method_after
@Override
public void onClick(DialogInterface dialog, int which) {
    setSelection(which);
    if (getOnItemClickListener() != null) {
        performItemClick(null, which, mListAdapter.getItemId(which));
    }
    dismiss();
}
#end_block

#method_before
public CharSequence getHintText() {
    return mHintText;
}
#method_after
@Override
public CharSequence getHintText() {
    return mHintText;
}
#end_block

#method_before
public void setPromptText(CharSequence hintText) {
    // Hint text is ignored for dropdowns, but maintain it here.
    mHintText = hintText;
}
#method_after
@Override
public void setPromptText(CharSequence hintText) {
    // Hint text is ignored for dropdowns, but maintain it here.
    mHintText = hintText;
}
#end_block

#method_before
@Override
public void show() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
        show(getTextDirection(), getTextAlignment());
    } else {
        show(-1, -1);
    }
}
#method_after
@Override
public void show() {
    showPopup();
}
#end_block

#method_before
@ServiceThreadOnly
protected boolean handleUserControlPressed(HdmiCecMessage message) {
    assertRunOnServiceThread();
    mHandler.removeMessages(MSG_USER_CONTROL_RELEASE_TIMEOUT);
    if (isPowerCommand(message)) {
        if (mService.isPowerStandbyOrTransient()) {
            mService.wakeUp();
        }
        return true;
    } else if (mService.isPowerOnOrTransient() && isPowerOffOrToggleCommand(message)) {
        mService.standby();
        return true;
    } else if (mService.isPowerStandbyOrTransient() && isPowerOnOrToggleCommand(message)) {
        mService.wakeUp();
        return true;
    }
    final long downTime = SystemClock.uptimeMillis();
    final byte[] params = message.getParams();
    final int keycode = HdmiCecKeycode.cecKeycodeAndParamsToAndroidKey(params);
    int keyRepeatCount = 0;
    if (mLastKeycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
        if (keycode == mLastKeycode) {
            keyRepeatCount = mLastKeyRepeatCount + 1;
        } else {
            injectKeyEvent(downTime, KeyEvent.ACTION_UP, mLastKeycode, 0);
        }
    }
    mLastKeycode = keycode;
    mLastKeyRepeatCount = keyRepeatCount;
    if (keycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
        injectKeyEvent(downTime, KeyEvent.ACTION_DOWN, keycode, keyRepeatCount);
        mHandler.sendMessageDelayed(Message.obtain(mHandler, MSG_USER_CONTROL_RELEASE_TIMEOUT), FOLLOWER_SAFETY_TIMEOUT);
        return true;
    }
    return false;
}
#method_after
@ServiceThreadOnly
protected boolean handleUserControlPressed(HdmiCecMessage message) {
    assertRunOnServiceThread();
    mHandler.removeMessages(MSG_USER_CONTROL_RELEASE_TIMEOUT);
    if (mService.isPowerOnOrTransient() && isPowerOffOrToggleCommand(message)) {
        mService.standby();
        return true;
    } else if (mService.isPowerStandbyOrTransient() && isPowerOnOrToggleCommand(message)) {
        mService.wakeUp();
        return true;
    }
    final long downTime = SystemClock.uptimeMillis();
    final byte[] params = message.getParams();
    final int keycode = HdmiCecKeycode.cecKeycodeAndParamsToAndroidKey(params);
    int keyRepeatCount = 0;
    if (mLastKeycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
        if (keycode == mLastKeycode) {
            keyRepeatCount = mLastKeyRepeatCount + 1;
        } else {
            injectKeyEvent(downTime, KeyEvent.ACTION_UP, mLastKeycode, 0);
        }
    }
    mLastKeycode = keycode;
    mLastKeyRepeatCount = keyRepeatCount;
    if (keycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
        injectKeyEvent(downTime, KeyEvent.ACTION_DOWN, keycode, keyRepeatCount);
        mHandler.sendMessageDelayed(Message.obtain(mHandler, MSG_USER_CONTROL_RELEASE_TIMEOUT), FOLLOWER_SAFETY_TIMEOUT);
        return true;
    }
    return false;
}
#end_block

#method_before
static boolean isPowerOffOrToggleCommand(HdmiCecMessage message) {
    byte[] params = message.getParams();
    return message.getOpcode() == Constants.MESSAGE_USER_CONTROL_PRESSED && (params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_OFF_FUNCTION || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_TOGGLE_FUNCTION);
}
#method_after
static boolean isPowerOffOrToggleCommand(HdmiCecMessage message) {
    byte[] params = message.getParams();
    return message.getOpcode() == Constants.MESSAGE_USER_CONTROL_PRESSED && (params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_OFF_FUNCTION || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_TOGGLE_FUNCTION);
}
#end_block

#method_before
public void startSocketMonitor(FileDescriptor fd, Messenger messenger, int slot) {
    if (mListeners.containsKey(slot))
        return;
    PacketListener listener = new PacketListener(fd, messenger, slot);
    mListeners.put(slot, listener);
    listener.start();
}
#method_after
public void startSocketMonitor(@NonNull final FileDescriptor fd, @NonNull final Messenger messenger, final int slot) {
    synchronized (mListeners) {
        if (null != mListeners.get(slot)) {
            throw new IllegalArgumentException("This slot is already taken");
        }
        for (int i = 0; i < mListeners.size(); ++i) {
            if (fd.equals(mListeners.valueAt(i))) {
                throw new IllegalArgumentException("This fd is already registered");
            }
        }
        mFdHandlerQueue.addOnFileDescriptorEventListener(fd, FD_EVENTS, (readyFd, events) -> {
            // This can't be called twice because the queue guarantees that once the listener
            // is unregistered it can't be called again, even for a message that arrived
            // before it was unregistered.
            int result;
            try {
                // First move the socket out of repair mode.
                if (DBG)
                    Log.d(TAG, "Moving socket out of repair mode for event : " + readyFd);
                switchOutOfRepairMode(readyFd);
                result = (0 != (events & EVENT_ERROR)) ? ERROR_INVALID_SOCKET : DATA_RECEIVED;
            } catch (ErrnoException e) {
                // Could not move the socket out of repair mode. Still continue with notifying
                // the client
                Log.e(TAG, "Cannot switch socket out of repair mode", e);
                result = ERROR_INVALID_SOCKET;
            }
            // Prepare and send the message to the receiver.
            final Message message = Message.obtain();
            message.what = EVENT_SOCKET_KEEPALIVE;
            message.arg1 = slot;
            message.arg2 = result;
            try {
                messenger.send(message);
            } catch (RemoteException e) {
            // Remote process died
            }
            synchronized (mListeners) {
                mListeners.remove(slot);
            }
            // event, the listener gets unregistered.
            return 0;
        });
        mListeners.put(slot, fd);
    }
}
#end_block

#method_before
public void stopSocketMonitor(int slot) {
    PacketListener listener = mListeners.get(slot);
    if (listener != null) {
        listener.stop();
        mListeners.remove(slot);
    }
}
#method_after
/**
 * Stop socket monitor
 */
// This slot may have been stopped automatically already because the socket received data,
// was closed on the other end or otherwise suffered some error. In this case, this function
public void stopSocketMonitor(final int slot) {
    final FileDescriptor fd;
    synchronized (mListeners) {
        fd = mListeners.get(slot);
        if (null == fd)
            return;
        mListeners.remove(slot);
    }
    mFdHandlerQueue.removeOnFileDescriptorEventListener(fd);
    try {
        if (DBG)
            Log.d(TAG, "Moving socket out of repair mode for stop : " + fd);
        switchOutOfRepairMode(fd);
    } catch (ErrnoException e) {
        Log.e(TAG, "Cannot switch socket out of repair mode", e);
    // Well, there is not much to do here to recover
    }
}
#end_block

#method_before
public static TcpKeepalivePacketData tcpKeepalivePacket(TcpSocketInfo tcpInfo) throws InvalidPacketException {
    final byte[] packet;
    if ((tcpInfo.srcAddress instanceof Inet4Address) && (tcpInfo.dstAddress instanceof Inet4Address)) {
        packet = buildV4Packet(tcpInfo.srcAddress, tcpInfo.srcPort, tcpInfo.dstAddress, tcpInfo.dstPort, tcpInfo.sequence, tcpInfo.ack);
    } else if ((tcpInfo.srcAddress instanceof Inet6Address) && (tcpInfo.dstAddress instanceof Inet6Address)) {
        packet = buildV6Packet(tcpInfo.srcAddress, tcpInfo.srcPort, tcpInfo.dstAddress, tcpInfo.dstPort, tcpInfo.sequence, tcpInfo.ack);
    } else {
        packet = null;
        throw new InvalidPacketException(SocketKeepalive.ERROR_INVALID_IP_ADDRESS);
    }
    return new TcpKeepalivePacketData(tcpInfo.srcAddress, tcpInfo.srcPort, tcpInfo.dstAddress, tcpInfo.dstPort, packet, tcpInfo.sequence, tcpInfo.ack);
}
#method_after
public static TcpKeepalivePacketData tcpKeepalivePacket(TcpSocketInfo tcpDetails) throws InvalidPacketException {
    final byte[] packet;
    if ((tcpDetails.srcAddress instanceof Inet4Address) && (tcpDetails.dstAddress instanceof Inet4Address)) {
        packet = buildV4Packet(tcpDetails);
    } else {
        // TODO: support ipv6
        throw new InvalidPacketException(ERROR_INVALID_IP_ADDRESS);
    }
    return new TcpKeepalivePacketData(tcpDetails, packet);
}
#end_block

#method_before
private static byte[] buildV4Packet(InetAddress srcAddress, int srcPort, InetAddress dstAddress, int dstPort, int sequence, int ack) {
    int length = IPV4_HEADER_LENGTH + TCP_HEADER_LENGTH;
    ByteBuffer buf = ByteBuffer.allocate(length);
    buf.order(ByteOrder.BIG_ENDIAN);
    // IP version and TOS
    buf.putShort((short) 0x4500);
    buf.putShort((short) length);
    // ID, flags, offset
    buf.putInt(0);
    // TTL
    buf.put((byte) 64);
    buf.put((byte) OsConstants.IPPROTO_TCP);
    int ipChecksumOffset = buf.position();
    // IP checksum
    buf.putShort((short) 0);
    buf.put(srcAddress.getAddress());
    buf.put(dstAddress.getAddress());
    buf.putShort((short) srcPort);
    buf.putShort((short) dstPort);
    // Sequence Number
    buf.putInt(sequence);
    // ACK
    buf.putInt(ack);
    // TCP length, flags
    buf.putShort((short) 0x5010);
    // Window size
    buf.putShort((short) 0x0100);
    int tcpChecksumOffset = buf.position();
    // TCP checksum
    buf.putShort((short) 0);
    buf.putShort(ipChecksumOffset, IpUtils.ipChecksum(buf, 0));
    buf.putShort(tcpChecksumOffset, IpUtils.tcpChecksum(buf, 0, IPV4_HEADER_LENGTH, TCP_HEADER_LENGTH));
    Log.e(TAG, "v4 keepalive packet: " + buf);
    return buf.array();
}
#method_after
/**
 * Build ipv4 tcp keepalive packet, not including the link-layer header.
 */
// TODO : if this code is ever moved to the network stack, factorize constants with the ones
private static byte[] buildV4Packet(TcpSocketInfo tcpDetails) {
    final int length = IPV4_HEADER_LENGTH + TCP_HEADER_LENGTH;
    ByteBuffer buf = ByteBuffer.allocate(length);
    buf.order(ByteOrder.BIG_ENDIAN);
    // IP version and TOS. TODO : fetch this from getsockopt(SOL_IP, IP_TOS)
    buf.putShort((short) 0x4500);
    buf.putShort((short) length);
    // ID, flags=DF, offset
    buf.putInt(0x4000);
    // TODO : fetch TTL from getsockopt(SOL_IP, IP_TTL)
    buf.put((byte) 64);
    buf.put((byte) OsConstants.IPPROTO_TCP);
    final int ipChecksumOffset = buf.position();
    // IP checksum
    buf.putShort((short) 0);
    buf.put(tcpDetails.srcAddress.getAddress());
    buf.put(tcpDetails.dstAddress.getAddress());
    buf.putShort((short) tcpDetails.srcPort);
    buf.putShort((short) tcpDetails.dstPort);
    // Sequence Number
    buf.putInt(tcpDetails.seq);
    // ACK
    buf.putInt(tcpDetails.ack);
    // TCP length=5, flags=ACK
    buf.putShort((short) 0x5010);
    // Window size
    buf.putShort((short) (tcpDetails.rcvWnd >> tcpDetails.rcvWndScale));
    final int tcpChecksumOffset = buf.position();
    // TCP checksum
    buf.putShort((short) 0);
    // URG is not set therefore the urgent pointer is not included
    buf.putShort(ipChecksumOffset, IpUtils.ipChecksum(buf, 0));
    buf.putShort(tcpChecksumOffset, IpUtils.tcpChecksum(buf, 0, IPV4_HEADER_LENGTH, TCP_HEADER_LENGTH));
    return buf.array();
}
#end_block

#method_before
/* Parcelable Implementation */
public int describeContents() {
    return 0;
}
#method_after
/* Parcelable Implementation. */
public int describeContents() {
    return 0;
}
#end_block

#method_before
public void writeToParcel(Parcel out, int flags) {
    super.writeToParcel(out, flags);
    out.writeInt(tcpSequence);
    out.writeInt(tcpAck);
    out.writeByteArray(mApfPacket);
    out.writeByteArray(mApfMask);
}
#method_after
public void writeToParcel(Parcel out, int flags) {
    super.writeToParcel(out, flags);
    out.writeInt(tcpSeq);
    out.writeInt(tcpAck);
    out.writeInt(tcpWnd);
    out.writeInt(tcpWndScale);
}
#end_block

#method_before
@Test
public void testV4TcpKeepalivePacket() {
    InetAddress srcAddr = InetAddressUtils.parseNumericAddress("192.168.0.1");
    InetAddress dstAddr = InetAddressUtils.parseNumericAddress("192.168.0.10");
    int srcPort = 1234;
    int dstPort = 4321;
    int sequence = 0x11111111;
    int ack = 0x22222222;
    TcpKeepalivePacketData resultData = null;
    TcpSocketInfo testInfo = new TcpSocketInfo(srcAddr, srcPort, dstAddr, dstPort, sequence, ack);
    try {
        resultData = TcpKeepalivePacketData.tcpKeepalivePacket(testInfo);
    } catch (InvalidPacketException e) {
        fail("InvalidPacketException" + e);
    }
    assertEquals(testInfo.srcAddress, resultData.srcAddress);
    assertEquals(testInfo.dstAddress, resultData.dstAddress);
    assertEquals(testInfo.srcPort, resultData.srcPort);
    assertEquals(testInfo.dstPort, resultData.dstPort);
    assertEquals(testInfo.sequence, resultData.tcpSequence);
    assertEquals(testInfo.ack, resultData.tcpAck);
    // IP version and TOS.
    ByteBuffer buf = ByteBuffer.wrap(resultData.getPacket());
    assertEquals(buf.getShort(), 0x4500);
    // Source IP address.
    byte[] ip = new byte[4];
    buf = ByteBuffer.wrap(resultData.getPacket(), 12, 4);
    buf.get(ip);
    assertArrayEquals(ip, srcAddr.getAddress());
    // Destinatin IP address.
    buf = ByteBuffer.wrap(resultData.getPacket(), 16, 4);
    buf.get(ip);
    assertArrayEquals(ip, dstAddr.getAddress());
    buf = ByteBuffer.wrap(resultData.getPacket(), 20, 12);
    // Source port.
    assertEquals(buf.getShort(), srcPort);
    // Destination port.
    assertEquals(buf.getShort(), dstPort);
    // Sequence number.
    assertEquals(buf.getInt(), sequence);
    // Ack.
    assertEquals(buf.getInt(), ack);
}
#method_after
@Test
public void testV4TcpKeepalivePacket() {
    final InetAddress srcAddr = InetAddressUtils.parseNumericAddress("192.168.0.1");
    final InetAddress dstAddr = InetAddressUtils.parseNumericAddress("192.168.0.10");
    final int srcPort = 1234;
    final int dstPort = 4321;
    final int seq = 0x11111111;
    final int ack = 0x22222222;
    final int wnd = 8000;
    final int wndScale = 2;
    TcpKeepalivePacketData resultData = null;
    TcpSocketInfo testInfo = new TcpSocketInfo(srcAddr, srcPort, dstAddr, dstPort, seq, ack, wnd, wndScale);
    try {
        resultData = TcpKeepalivePacketData.tcpKeepalivePacket(testInfo);
    } catch (InvalidPacketException e) {
        fail("InvalidPacketException: " + e);
    }
    assertEquals(testInfo.srcAddress, resultData.srcAddress);
    assertEquals(testInfo.dstAddress, resultData.dstAddress);
    assertEquals(testInfo.srcPort, resultData.srcPort);
    assertEquals(testInfo.dstPort, resultData.dstPort);
    assertEquals(testInfo.seq, resultData.tcpSeq);
    assertEquals(testInfo.ack, resultData.tcpAck);
    assertEquals(testInfo.rcvWndScale, resultData.tcpWndScale);
    TestUtils.assertParcelingIsLossless(resultData, TcpKeepalivePacketData.CREATOR);
    final byte[] packet = resultData.getPacket();
    // IP version and TOS.
    ByteBuffer buf = ByteBuffer.wrap(packet);
    assertEquals(buf.getShort(), 0x4500);
    // Source IP address.
    byte[] ip = new byte[4];
    buf = ByteBuffer.wrap(packet, 12, 4);
    buf.get(ip);
    assertArrayEquals(ip, srcAddr.getAddress());
    // Destination IP address.
    buf = ByteBuffer.wrap(packet, 16, 4);
    buf.get(ip);
    assertArrayEquals(ip, dstAddr.getAddress());
    buf = ByteBuffer.wrap(packet, 20, 12);
    // Source port.
    assertEquals(buf.getShort(), srcPort);
    // Destination port.
    assertEquals(buf.getShort(), dstPort);
    // Sequence number.
    assertEquals(buf.getInt(), seq);
    // Ack.
    assertEquals(buf.getInt(), ack);
    // Window size.
    buf = ByteBuffer.wrap(packet, 34, 2);
    assertEquals(buf.getShort(), wnd >> wndScale);
}
#end_block

#method_before
@Deprecated
@UnsupportedAppUsage
public static InetAddress intToInetAddress(int hostAddress) {
    return intToInet4AddressHTL(hostAddress);
}
#method_after
@Deprecated
@UnsupportedAppUsage
public static InetAddress intToInetAddress(int hostAddress) {
    return Inet4AddressUtils.intToInet4AddressHTL(hostAddress);
}
#end_block

#method_before
@Deprecated
public static int inetAddressToInt(Inet4Address inetAddr) throws IllegalArgumentException {
    return inet4AddressToIntHTL(inetAddr);
}
#method_after
@Deprecated
public static int inetAddressToInt(Inet4Address inetAddr) throws IllegalArgumentException {
    return Inet4AddressUtils.inet4AddressToIntHTL(inetAddr);
}
#end_block

#method_before
@Deprecated
@UnsupportedAppUsage
public static int prefixLengthToNetmaskInt(int prefixLength) throws IllegalArgumentException {
    return prefixLengthToV4NetmaskIntHTL(prefixLength);
}
#method_after
@Deprecated
@UnsupportedAppUsage
public static int prefixLengthToNetmaskInt(int prefixLength) throws IllegalArgumentException {
    return Inet4AddressUtils.prefixLengthToV4NetmaskIntHTL(prefixLength);
}
#end_block

#method_before
@UnsupportedAppUsage
public static int netmaskToPrefixLength(Inet4Address netmask) {
    // inetAddressToInt returns an int in *network* byte order.
    int i = Integer.reverseBytes(inetAddressToInt(netmask));
    int prefixLength = Integer.bitCount(i);
    int trailingZeros = Integer.numberOfTrailingZeros(i);
    if (trailingZeros != 32 - prefixLength) {
        throw new IllegalArgumentException("Non-contiguous netmask: " + Integer.toHexString(i));
    }
    return prefixLength;
}
#method_after
@UnsupportedAppUsage
@Deprecated
public static int netmaskToPrefixLength(Inet4Address netmask) {
    // This is only here because some apps seem to be using it (@UnsupportedAppUsage).
    return Inet4AddressUtils.netmaskToPrefixLength(netmask);
}
#end_block

#method_before
@UnsupportedAppUsage
public static int getImplicitNetmask(Inet4Address address) {
    // Convert to an unsigned value.
    int firstByte = address.getAddress()[0] & 0xff;
    if (firstByte < 128) {
        return 8;
    } else if (firstByte < 192) {
        return 16;
    } else if (firstByte < 224) {
        return 24;
    } else {
        // Will likely not end well for other reasons.
        return 32;
    }
}
#method_after
@UnsupportedAppUsage
public static int getImplicitNetmask(Inet4Address address) {
    // Only here because it seems to be used by apps
    return Inet4AddressUtils.getImplicitNetmask(address);
}
#end_block

#method_before
@UnsupportedAppUsage
void setFlags(int flags, int mask) {
    final boolean accessibilityEnabled = AccessibilityManager.getInstance(mContext).isEnabled();
    final boolean oldIncludeForAccessibility = accessibilityEnabled && includeForAccessibility();
    int old = mViewFlags;
    mViewFlags = (mViewFlags & ~mask) | (flags & mask);
    int changed = mViewFlags ^ old;
    if (changed == 0) {
        return;
    }
    int privateFlags = mPrivateFlags;
    boolean shouldNotifyFocusableAvailable = false;
    // If focusable is auto, update the FOCUSABLE bit.
    int focusableChangedByAuto = 0;
    if (((mViewFlags & FOCUSABLE_AUTO) != 0) && (changed & (FOCUSABLE_MASK | CLICKABLE)) != 0) {
        // Heuristic only takes into account whether view is clickable.
        final int newFocus;
        if ((mViewFlags & CLICKABLE) != 0) {
            newFocus = FOCUSABLE;
        } else {
            newFocus = NOT_FOCUSABLE;
        }
        mViewFlags = (mViewFlags & ~FOCUSABLE) | newFocus;
        focusableChangedByAuto = (old & FOCUSABLE) ^ (newFocus & FOCUSABLE);
        changed = (changed & ~FOCUSABLE) | focusableChangedByAuto;
    }
    /* Check if the FOCUSABLE bit has changed */
    if (((changed & FOCUSABLE) != 0) && ((privateFlags & PFLAG_HAS_BOUNDS) != 0)) {
        if (((old & FOCUSABLE) == FOCUSABLE) && ((privateFlags & PFLAG_FOCUSED) != 0)) {
            /* Give up focus if we are no longer focusable */
            clearFocus();
            if (mParent instanceof ViewGroup) {
                ((ViewGroup) mParent).clearFocusedInCluster();
            }
        } else if (((old & FOCUSABLE) == NOT_FOCUSABLE) && ((privateFlags & PFLAG_FOCUSED) == 0)) {
            /*
                 * Tell the view system that we are now available to take focus
                 * if no one else already has it.
                 */
            if (mParent != null) {
                ViewRootImpl viewRootImpl = getViewRootImpl();
                if (!sAutoFocusableOffUIThreadWontNotifyParents || focusableChangedByAuto == 0 || viewRootImpl == null || viewRootImpl.mThread == Thread.currentThread()) {
                    shouldNotifyFocusableAvailable = canTakeFocus();
                }
            }
        }
    }
    final int newVisibility = flags & VISIBILITY_MASK;
    if (newVisibility == VISIBLE) {
        if ((changed & VISIBILITY_MASK) != 0) {
            /*
                 * If this view is becoming visible, invalidate it in case it changed while
                 * it was not visible. Marking it drawn ensures that the invalidation will
                 * go through.
                 */
            mPrivateFlags |= PFLAG_DRAWN;
            invalidate(true);
            needGlobalAttributesUpdate(true);
            // a view becoming visible is worth notifying the parent about in case nothing has
            // focus. Even if this specific view isn't focusable, it may contain something that
            // is, so let the root view try to give this focus if nothing else does.
            shouldNotifyFocusableAvailable = hasSize();
        }
    }
    if ((changed & ENABLED_MASK) != 0) {
        if ((mViewFlags & ENABLED_MASK) == ENABLED) {
            // a view becoming enabled should notify the parent as long as the view is also
            // visible and the parent wasn't already notified by becoming visible during this
            // setFlags invocation.
            shouldNotifyFocusableAvailable = canTakeFocus();
        } else {
            if (isFocused())
                clearFocus();
        }
    }
    if (shouldNotifyFocusableAvailable && mParent != null) {
        mParent.focusableViewAvailable(this);
    }
    /* Check if the GONE bit has changed */
    if ((changed & GONE) != 0) {
        needGlobalAttributesUpdate(false);
        requestLayout();
        if (((mViewFlags & VISIBILITY_MASK) == GONE)) {
            if (hasFocus()) {
                clearFocus();
                if (mParent instanceof ViewGroup) {
                    ((ViewGroup) mParent).clearFocusedInCluster();
                }
            }
            clearAccessibilityFocus();
            destroyDrawingCache();
            if (mParent instanceof View) {
                // GONE views noop invalidation, so invalidate the parent
                ((View) mParent).invalidate(true);
            }
            // Mark the view drawn to ensure that it gets invalidated properly the next
            // time it is visible and gets invalidated
            mPrivateFlags |= PFLAG_DRAWN;
        }
        if (mAttachInfo != null) {
            mAttachInfo.mViewVisibilityChanged = true;
        }
    }
    /* Check if the VISIBLE bit has changed */
    if ((changed & INVISIBLE) != 0) {
        needGlobalAttributesUpdate(false);
        /*
             * If this view is becoming invisible, set the DRAWN flag so that
             * the next invalidate() will not be skipped.
             */
        mPrivateFlags |= PFLAG_DRAWN;
        if (((mViewFlags & VISIBILITY_MASK) == INVISIBLE)) {
            // root view becoming invisible shouldn't clear focus and accessibility focus
            if (getRootView() != this) {
                if (hasFocus()) {
                    clearFocus();
                    if (mParent instanceof ViewGroup) {
                        ((ViewGroup) mParent).clearFocusedInCluster();
                    }
                }
                clearAccessibilityFocus();
            }
        }
        if (mAttachInfo != null) {
            mAttachInfo.mViewVisibilityChanged = true;
        }
    }
    if ((changed & VISIBILITY_MASK) != 0) {
        // If the view is invisible, cleanup its display list to free up resources
        if (newVisibility != VISIBLE && mAttachInfo != null) {
            cleanupDraw();
        }
        if (mParent instanceof ViewGroup) {
            ((ViewGroup) mParent).onChildVisibilityChanged(this, (changed & VISIBILITY_MASK), newVisibility);
            ((View) mParent).invalidate(true);
        } else if (mParent != null) {
            mParent.invalidateChild(this, null);
        }
        if (mAttachInfo != null) {
            dispatchVisibilityChanged(this, newVisibility);
            // to change animation states.
            if (mParent != null && getWindowVisibility() == VISIBLE && ((!(mParent instanceof ViewGroup)) || ((ViewGroup) mParent).isShown())) {
                dispatchVisibilityAggregated(newVisibility == VISIBLE);
            }
            notifySubtreeAccessibilityStateChangedIfNeeded();
        }
    }
    if ((changed & WILL_NOT_CACHE_DRAWING) != 0) {
        destroyDrawingCache();
    }
    if ((changed & DRAWING_CACHE_ENABLED) != 0) {
        destroyDrawingCache();
        mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;
        invalidateParentCaches();
    }
    if ((changed & DRAWING_CACHE_QUALITY_MASK) != 0) {
        destroyDrawingCache();
        mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;
    }
    if ((changed & DRAW_MASK) != 0) {
        if ((mViewFlags & WILL_NOT_DRAW) != 0) {
            if (mBackground != null || mDefaultFocusHighlight != null || (mForegroundInfo != null && mForegroundInfo.mDrawable != null)) {
                mPrivateFlags &= ~PFLAG_SKIP_DRAW;
            } else {
                mPrivateFlags |= PFLAG_SKIP_DRAW;
            }
        } else {
            mPrivateFlags &= ~PFLAG_SKIP_DRAW;
        }
        requestLayout();
        invalidate(true);
    }
    if ((changed & KEEP_SCREEN_ON) != 0) {
        if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
            mParent.recomputeViewAttributes(this);
        }
    }
    if (accessibilityEnabled) {
        // a state change, so we really don't need to report other changes.
        if (isAccessibilityPane()) {
            changed &= ~VISIBILITY_MASK;
        }
        if ((changed & FOCUSABLE) != 0 || (changed & VISIBILITY_MASK) != 0 || (changed & CLICKABLE) != 0 || (changed & LONG_CLICKABLE) != 0 || (changed & CONTEXT_CLICKABLE) != 0) {
            if (oldIncludeForAccessibility != includeForAccessibility()) {
                notifySubtreeAccessibilityStateChangedIfNeeded();
            } else {
                notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
            }
        } else if ((changed & ENABLED_MASK) != 0) {
            notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
        }
    }
}
#method_after
@UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = 115609023)
void setFlags(int flags, int mask) {
    final boolean accessibilityEnabled = AccessibilityManager.getInstance(mContext).isEnabled();
    final boolean oldIncludeForAccessibility = accessibilityEnabled && includeForAccessibility();
    int old = mViewFlags;
    mViewFlags = (mViewFlags & ~mask) | (flags & mask);
    int changed = mViewFlags ^ old;
    if (changed == 0) {
        return;
    }
    int privateFlags = mPrivateFlags;
    boolean shouldNotifyFocusableAvailable = false;
    // If focusable is auto, update the FOCUSABLE bit.
    int focusableChangedByAuto = 0;
    if (((mViewFlags & FOCUSABLE_AUTO) != 0) && (changed & (FOCUSABLE_MASK | CLICKABLE)) != 0) {
        // Heuristic only takes into account whether view is clickable.
        final int newFocus;
        if ((mViewFlags & CLICKABLE) != 0) {
            newFocus = FOCUSABLE;
        } else {
            newFocus = NOT_FOCUSABLE;
        }
        mViewFlags = (mViewFlags & ~FOCUSABLE) | newFocus;
        focusableChangedByAuto = (old & FOCUSABLE) ^ (newFocus & FOCUSABLE);
        changed = (changed & ~FOCUSABLE) | focusableChangedByAuto;
    }
    /* Check if the FOCUSABLE bit has changed */
    if (((changed & FOCUSABLE) != 0) && ((privateFlags & PFLAG_HAS_BOUNDS) != 0)) {
        if (((old & FOCUSABLE) == FOCUSABLE) && ((privateFlags & PFLAG_FOCUSED) != 0)) {
            /* Give up focus if we are no longer focusable */
            clearFocus();
            if (mParent instanceof ViewGroup) {
                ((ViewGroup) mParent).clearFocusedInCluster();
            }
        } else if (((old & FOCUSABLE) == NOT_FOCUSABLE) && ((privateFlags & PFLAG_FOCUSED) == 0)) {
            /*
                 * Tell the view system that we are now available to take focus
                 * if no one else already has it.
                 */
            if (mParent != null) {
                ViewRootImpl viewRootImpl = getViewRootImpl();
                if (!sAutoFocusableOffUIThreadWontNotifyParents || focusableChangedByAuto == 0 || viewRootImpl == null || viewRootImpl.mThread == Thread.currentThread()) {
                    shouldNotifyFocusableAvailable = canTakeFocus();
                }
            }
        }
    }
    final int newVisibility = flags & VISIBILITY_MASK;
    if (newVisibility == VISIBLE) {
        if ((changed & VISIBILITY_MASK) != 0) {
            /*
                 * If this view is becoming visible, invalidate it in case it changed while
                 * it was not visible. Marking it drawn ensures that the invalidation will
                 * go through.
                 */
            mPrivateFlags |= PFLAG_DRAWN;
            invalidate(true);
            needGlobalAttributesUpdate(true);
            // a view becoming visible is worth notifying the parent about in case nothing has
            // focus. Even if this specific view isn't focusable, it may contain something that
            // is, so let the root view try to give this focus if nothing else does.
            shouldNotifyFocusableAvailable = hasSize();
        }
    }
    if ((changed & ENABLED_MASK) != 0) {
        if ((mViewFlags & ENABLED_MASK) == ENABLED) {
            // a view becoming enabled should notify the parent as long as the view is also
            // visible and the parent wasn't already notified by becoming visible during this
            // setFlags invocation.
            shouldNotifyFocusableAvailable = canTakeFocus();
        } else {
            if (isFocused())
                clearFocus();
        }
    }
    if (shouldNotifyFocusableAvailable && mParent != null) {
        mParent.focusableViewAvailable(this);
    }
    /* Check if the GONE bit has changed */
    if ((changed & GONE) != 0) {
        needGlobalAttributesUpdate(false);
        requestLayout();
        if (((mViewFlags & VISIBILITY_MASK) == GONE)) {
            if (hasFocus()) {
                clearFocus();
                if (mParent instanceof ViewGroup) {
                    ((ViewGroup) mParent).clearFocusedInCluster();
                }
            }
            clearAccessibilityFocus();
            destroyDrawingCache();
            if (mParent instanceof View) {
                // GONE views noop invalidation, so invalidate the parent
                ((View) mParent).invalidate(true);
            }
            // Mark the view drawn to ensure that it gets invalidated properly the next
            // time it is visible and gets invalidated
            mPrivateFlags |= PFLAG_DRAWN;
        }
        if (mAttachInfo != null) {
            mAttachInfo.mViewVisibilityChanged = true;
        }
    }
    /* Check if the VISIBLE bit has changed */
    if ((changed & INVISIBLE) != 0) {
        needGlobalAttributesUpdate(false);
        /*
             * If this view is becoming invisible, set the DRAWN flag so that
             * the next invalidate() will not be skipped.
             */
        mPrivateFlags |= PFLAG_DRAWN;
        if (((mViewFlags & VISIBILITY_MASK) == INVISIBLE)) {
            // root view becoming invisible shouldn't clear focus and accessibility focus
            if (getRootView() != this) {
                if (hasFocus()) {
                    clearFocus();
                    if (mParent instanceof ViewGroup) {
                        ((ViewGroup) mParent).clearFocusedInCluster();
                    }
                }
                clearAccessibilityFocus();
            }
        }
        if (mAttachInfo != null) {
            mAttachInfo.mViewVisibilityChanged = true;
        }
    }
    if ((changed & VISIBILITY_MASK) != 0) {
        // If the view is invisible, cleanup its display list to free up resources
        if (newVisibility != VISIBLE && mAttachInfo != null) {
            cleanupDraw();
        }
        if (mParent instanceof ViewGroup) {
            ((ViewGroup) mParent).onChildVisibilityChanged(this, (changed & VISIBILITY_MASK), newVisibility);
            ((View) mParent).invalidate(true);
        } else if (mParent != null) {
            mParent.invalidateChild(this, null);
        }
        if (mAttachInfo != null) {
            dispatchVisibilityChanged(this, newVisibility);
            // to change animation states.
            if (mParent != null && getWindowVisibility() == VISIBLE && ((!(mParent instanceof ViewGroup)) || ((ViewGroup) mParent).isShown())) {
                dispatchVisibilityAggregated(newVisibility == VISIBLE);
            }
            notifySubtreeAccessibilityStateChangedIfNeeded();
        }
    }
    if ((changed & WILL_NOT_CACHE_DRAWING) != 0) {
        destroyDrawingCache();
    }
    if ((changed & DRAWING_CACHE_ENABLED) != 0) {
        destroyDrawingCache();
        mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;
        invalidateParentCaches();
    }
    if ((changed & DRAWING_CACHE_QUALITY_MASK) != 0) {
        destroyDrawingCache();
        mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;
    }
    if ((changed & DRAW_MASK) != 0) {
        if ((mViewFlags & WILL_NOT_DRAW) != 0) {
            if (mBackground != null || mDefaultFocusHighlight != null || (mForegroundInfo != null && mForegroundInfo.mDrawable != null)) {
                mPrivateFlags &= ~PFLAG_SKIP_DRAW;
            } else {
                mPrivateFlags |= PFLAG_SKIP_DRAW;
            }
        } else {
            mPrivateFlags &= ~PFLAG_SKIP_DRAW;
        }
        requestLayout();
        invalidate(true);
    }
    if ((changed & KEEP_SCREEN_ON) != 0) {
        if (mParent != null && mAttachInfo != null && !mAttachInfo.mRecomputeGlobalAttributes) {
            mParent.recomputeViewAttributes(this);
        }
    }
    if (accessibilityEnabled) {
        // a state change, so we really don't need to report other changes.
        if (isAccessibilityPane()) {
            changed &= ~VISIBILITY_MASK;
        }
        if ((changed & FOCUSABLE) != 0 || (changed & VISIBILITY_MASK) != 0 || (changed & CLICKABLE) != 0 || (changed & LONG_CLICKABLE) != 0 || (changed & CONTEXT_CLICKABLE) != 0) {
            if (oldIncludeForAccessibility != includeForAccessibility()) {
                notifySubtreeAccessibilityStateChangedIfNeeded();
            } else {
                notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
            }
        } else if ((changed & ENABLED_MASK) != 0) {
            notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
        }
    }
}
#end_block

#method_before
@GuardedBy("this")
final int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int userId) {
    intent = new Intent(intent);
    final boolean callerInstantApp = isInstantApp(callerApp, callerPackage, callingUid);
    // Instant Apps cannot use FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS
    if (callerInstantApp) {
        intent.setFlags(intent.getFlags() & ~Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS);
    }
    // By default broadcasts do not go to stopped apps.
    intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);
    // If we have not finished booting, don't allow this to launch new processes.
    if (!mProcessesReady && (intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) {
        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    }
    if (DEBUG_BROADCAST_LIGHT)
        Slog.v(TAG_BROADCAST, (sticky ? "Broadcast sticky: " : "Broadcast: ") + intent + " ordered=" + ordered + " userid=" + userId);
    if ((resultTo != null) && !ordered) {
        Slog.w(TAG, "Broadcast " + intent + " not ordered but result callback requested!");
    }
    userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, true, ALLOW_NON_FULL, "broadcast", callerPackage);
    // If not, we will just skip it. Make an exception for shutdown broadcasts, upgrade steps.
    if (userId != UserHandle.USER_ALL && !mUserController.isUserOrItsParentRunning(userId)) {
        if ((callingUid != SYSTEM_UID || (intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) && !Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {
            Slog.w(TAG, "Skipping broadcast of " + intent + ": user " + userId + " and its parent (if any) are stopped");
            return ActivityManager.BROADCAST_FAILED_USER_STOPPED;
        }
    }
    final String action = intent.getAction();
    BroadcastOptions brOptions = null;
    if (bOptions != null) {
        brOptions = new BroadcastOptions(bOptions);
        if (brOptions.getTemporaryAppWhitelistDuration() > 0) {
            // PendingIntent), because that who is actually supplied the arguments.
            if (checkComponentPermission(android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST, Binder.getCallingPid(), Binder.getCallingUid(), -1, true) != PackageManager.PERMISSION_GRANTED) {
                String msg = "Permission Denial: " + intent.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ")" + " requires " + android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST;
                Slog.w(TAG, msg);
                throw new SecurityException(msg);
            }
        }
        if (brOptions.isDontSendToRestrictedApps() && !isUidActiveLocked(callingUid) && isBackgroundRestrictedNoCheck(callingUid, callerPackage)) {
            Slog.i(TAG, "Not sending broadcast " + action + " - app " + callerPackage + " has background restrictions");
            return ActivityManager.START_CANCELED;
        }
    }
    // Verify that protected broadcasts are only being sent by system code,
    // and that system code is only sending protected broadcasts.
    final boolean isProtectedBroadcast;
    try {
        isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);
    } catch (RemoteException e) {
        Slog.w(TAG, "Remote exception", e);
        return ActivityManager.BROADCAST_SUCCESS;
    }
    final boolean isCallerSystem;
    switch(UserHandle.getAppId(callingUid)) {
        case ROOT_UID:
        case SYSTEM_UID:
        case PHONE_UID:
        case BLUETOOTH_UID:
        case NFC_UID:
        case SE_UID:
            isCallerSystem = true;
            break;
        default:
            isCallerSystem = (callerApp != null) && callerApp.persistent;
            break;
    }
    // sending protected broadcasts.
    if (!isCallerSystem) {
        if (isProtectedBroadcast) {
            String msg = "Permission Denial: not allowed to send broadcast " + action + " from pid=" + callingPid + ", uid=" + callingUid;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        } else if (AppWidgetManager.ACTION_APPWIDGET_CONFIGURE.equals(action) || AppWidgetManager.ACTION_APPWIDGET_UPDATE.equals(action)) {
            // just limit it to the caller.
            if (callerPackage == null) {
                String msg = "Permission Denial: not allowed to send broadcast " + action + " from unknown caller.";
                Slog.w(TAG, msg);
                throw new SecurityException(msg);
            } else if (intent.getComponent() != null) {
                // it is being sent to the calling app.
                if (!intent.getComponent().getPackageName().equals(callerPackage)) {
                    String msg = "Permission Denial: not allowed to send broadcast " + action + " to " + intent.getComponent().getPackageName() + " from " + callerPackage;
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            } else {
                // Limit broadcast to their own package.
                intent.setPackage(callerPackage);
            }
        }
    }
    if (action != null) {
        if (getBackgroundLaunchBroadcasts().contains(action)) {
            if (DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Broadcast action " + action + " forcing include-background");
            }
            intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);
        }
        switch(action) {
            case Intent.ACTION_UID_REMOVED:
            case Intent.ACTION_PACKAGE_REMOVED:
            case Intent.ACTION_PACKAGE_CHANGED:
            case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:
            case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE:
            case Intent.ACTION_PACKAGES_SUSPENDED:
            case Intent.ACTION_PACKAGES_UNSUSPENDED:
                // its activities from the history stack.
                if (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED, callingPid, callingUid, -1, true) != PackageManager.PERMISSION_GRANTED) {
                    String msg = "Permission Denial: " + intent.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ")" + " requires " + android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
                switch(action) {
                    case Intent.ACTION_UID_REMOVED:
                        final int uid = getUidFromIntent(intent);
                        if (uid >= 0) {
                            mBatteryStatsService.removeUid(uid);
                            mAppOpsService.uidRemoved(uid);
                        }
                        break;
                    case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:
                        // If resources are unavailable just force stop all those packages
                        // and flush the attribute cache as well.
                        String[] list = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                        if (list != null && list.length > 0) {
                            for (int i = 0; i < list.length; i++) {
                                forceStopPackageLocked(list[i], -1, false, true, true, false, false, userId, "storage unmount");
                            }
                            mRecentTasks.cleanupLocked(UserHandle.USER_ALL);
                            sendPackageBroadcastLocked(ApplicationThreadConstants.EXTERNAL_STORAGE_UNAVAILABLE, list, userId);
                        }
                        break;
                    case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE:
                        mRecentTasks.cleanupLocked(UserHandle.USER_ALL);
                        break;
                    case Intent.ACTION_PACKAGE_REMOVED:
                    case Intent.ACTION_PACKAGE_CHANGED:
                        Uri data = intent.getData();
                        String ssp;
                        if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                            boolean removed = Intent.ACTION_PACKAGE_REMOVED.equals(action);
                            final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING, false);
                            final boolean killProcess = !intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP, false);
                            final boolean fullUninstall = removed && !replacing;
                            if (removed) {
                                if (killProcess) {
                                    forceStopPackageLocked(ssp, UserHandle.getAppId(intent.getIntExtra(Intent.EXTRA_UID, -1)), false, true, true, false, fullUninstall, userId, removed ? "pkg removed" : "pkg changed");
                                }
                                final int cmd = killProcess ? ApplicationThreadConstants.PACKAGE_REMOVED : ApplicationThreadConstants.PACKAGE_REMOVED_DONT_KILL;
                                sendPackageBroadcastLocked(cmd, new String[] { ssp }, userId);
                                if (fullUninstall) {
                                    mAppOpsService.packageRemoved(intent.getIntExtra(Intent.EXTRA_UID, -1), ssp);
                                    // Remove all permissions granted from/to this package
                                    removeUriPermissionsForPackageLocked(ssp, userId, true, false);
                                    mRecentTasks.removeTasksByPackageName(ssp, userId);
                                    mServices.forceStopPackageLocked(ssp, userId);
                                    mAppWarnings.onPackageUninstalled(ssp);
                                    mCompatModePackages.handlePackageUninstalledLocked(ssp);
                                    mBatteryStatsService.notePackageUninstalled(ssp);
                                }
                            } else {
                                if (killProcess) {
                                    killPackageProcessesLocked(ssp, UserHandle.getAppId(intent.getIntExtra(Intent.EXTRA_UID, -1)), userId, ProcessList.INVALID_ADJ, false, true, true, false, "change " + ssp);
                                }
                                cleanupDisabledPackageComponentsLocked(ssp, userId, killProcess, intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST));
                            }
                        }
                        break;
                    case Intent.ACTION_PACKAGES_SUSPENDED:
                    case Intent.ACTION_PACKAGES_UNSUSPENDED:
                        final boolean suspended = Intent.ACTION_PACKAGES_SUSPENDED.equals(intent.getAction());
                        final String[] packageNames = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                        final int userHandle = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);
                        synchronized (ActivityManagerService.this) {
                            mRecentTasks.onPackagesSuspendedChanged(packageNames, suspended, userHandle);
                        }
                        break;
                }
                break;
            case Intent.ACTION_PACKAGE_REPLACED:
                {
                    final Uri data = intent.getData();
                    final String ssp;
                    if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                        ApplicationInfo aInfo = null;
                        try {
                            aInfo = AppGlobals.getPackageManager().getApplicationInfo(ssp, STOCK_PM_FLAGS, userId);
                        } catch (RemoteException ignore) {
                        }
                        if (aInfo == null) {
                            Slog.w(TAG, "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg:" + " ssp=" + ssp + " data=" + data);
                            return ActivityManager.BROADCAST_SUCCESS;
                        }
                        mStackSupervisor.updateActivityApplicationInfoLocked(aInfo);
                        mServices.updateServiceApplicationInfoLocked(aInfo);
                        sendPackageBroadcastLocked(ApplicationThreadConstants.PACKAGE_REPLACED, new String[] { ssp }, userId);
                    }
                    break;
                }
            case Intent.ACTION_PACKAGE_ADDED:
                {
                    // Special case for adding a package: by default turn on compatibility mode.
                    Uri data = intent.getData();
                    String ssp;
                    if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                        final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING, false);
                        mCompatModePackages.handlePackageAddedLocked(ssp, replacing);
                        try {
                            ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(ssp, STOCK_PM_FLAGS, 0);
                            mBatteryStatsService.notePackageInstalled(ssp, ai != null ? ai.versionCode : 0);
                        } catch (RemoteException e) {
                        }
                    }
                    break;
                }
            case Intent.ACTION_PACKAGE_DATA_CLEARED:
                {
                    Uri data = intent.getData();
                    String ssp;
                    if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                        mCompatModePackages.handlePackageDataClearedLocked(ssp);
                        mAppWarnings.onPackageDataCleared(ssp);
                    }
                    break;
                }
            case Intent.ACTION_TIMEZONE_CHANGED:
                // If this is the time zone changed action, queue up a message that will reset
                // the timezone of all currently running processes. This message will get
                // queued up before the broadcast happens.
                mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);
                break;
            case Intent.ACTION_TIME_CHANGED:
                // EXTRA_TIME_PREF_24_HOUR_FORMAT is optional so we must distinguish between
                // the tri-state value it may contain and "unknown".
                // For convenience we re-use the Intent extra values.
                final int NO_EXTRA_VALUE_FOUND = -1;
                final int timeFormatPreferenceMsgValue = intent.getIntExtra(Intent.EXTRA_TIME_PREF_24_HOUR_FORMAT, NO_EXTRA_VALUE_FOUND);
                // Only send a message if the time preference is available.
                if (timeFormatPreferenceMsgValue != NO_EXTRA_VALUE_FOUND) {
                    Message updateTimePreferenceMsg = mHandler.obtainMessage(UPDATE_TIME_PREFERENCE_MSG, timeFormatPreferenceMsgValue, 0);
                    mHandler.sendMessage(updateTimePreferenceMsg);
                }
                BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();
                synchronized (stats) {
                    stats.noteCurrentTimeChangedLocked();
                }
                break;
            case Intent.ACTION_CLEAR_DNS_CACHE:
                mHandler.sendEmptyMessage(CLEAR_DNS_CACHE_MSG);
                break;
            case Proxy.PROXY_CHANGE_ACTION:
                ProxyInfo proxy = intent.getParcelableExtra(Proxy.EXTRA_PROXY_INFO);
                mHandler.sendMessage(mHandler.obtainMessage(UPDATE_HTTP_PROXY_MSG, proxy));
                break;
            case android.hardware.Camera.ACTION_NEW_PICTURE:
            case android.hardware.Camera.ACTION_NEW_VIDEO:
                // In N we just turned these off; in O we are turing them back on partly,
                // only for registered receivers.  This will still address the main problem
                // (a spam of apps waking up when a picture is taken putting significant
                // memory pressure on the system at a bad point), while still allowing apps
                // that are already actively running to know about this happening.
                intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
                break;
            case android.security.KeyChain.ACTION_TRUST_STORE_CHANGED:
                mHandler.sendEmptyMessage(HANDLE_TRUST_STORAGE_UPDATE_MSG);
                break;
            case "com.android.launcher.action.INSTALL_SHORTCUT":
                // As of O, we no longer support this broadcasts, even for pre-O apps.
                // Apps should now be using ShortcutManager.pinRequestShortcut().
                Log.w(TAG, "Broadcast " + action + " no longer supported. It will not be delivered.");
                return ActivityManager.BROADCAST_SUCCESS;
        }
        if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_REPLACED.equals(action)) {
            final int uid = getUidFromIntent(intent);
            if (uid != -1) {
                final UidRecord uidRec = mActiveUids.get(uid);
                if (uidRec != null) {
                    uidRec.updateHasInternetPermission();
                }
            }
        }
    }
    // Add to the sticky list if requested.
    if (sticky) {
        if (checkPermission(android.Manifest.permission.BROADCAST_STICKY, callingPid, callingUid) != PackageManager.PERMISSION_GRANTED) {
            String msg = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + callingPid + ", uid=" + callingUid + " requires " + android.Manifest.permission.BROADCAST_STICKY;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        if (requiredPermissions != null && requiredPermissions.length > 0) {
            Slog.w(TAG, "Can't broadcast sticky intent " + intent + " and enforce permissions " + Arrays.toString(requiredPermissions));
            return ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION;
        }
        if (intent.getComponent() != null) {
            throw new SecurityException("Sticky broadcasts can't target a specific component");
        }
        // as a separate set of sticky broadcasts.
        if (userId != UserHandle.USER_ALL) {
            // But first, if this is not a broadcast to all users, then
            // make sure it doesn't conflict with an existing broadcast to
            // all users.
            ArrayMap<String, ArrayList<Intent>> stickies = mStickyBroadcasts.get(UserHandle.USER_ALL);
            if (stickies != null) {
                ArrayList<Intent> list = stickies.get(intent.getAction());
                if (list != null) {
                    int N = list.size();
                    int i;
                    for (i = 0; i < N; i++) {
                        if (intent.filterEquals(list.get(i))) {
                            throw new IllegalArgumentException("Sticky broadcast " + intent + " for user " + userId + " conflicts with existing global broadcast");
                        }
                    }
                }
            }
        }
        ArrayMap<String, ArrayList<Intent>> stickies = mStickyBroadcasts.get(userId);
        if (stickies == null) {
            stickies = new ArrayMap<>();
            mStickyBroadcasts.put(userId, stickies);
        }
        ArrayList<Intent> list = stickies.get(intent.getAction());
        if (list == null) {
            list = new ArrayList<>();
            stickies.put(intent.getAction(), list);
        }
        final int stickiesCount = list.size();
        int i;
        for (i = 0; i < stickiesCount; i++) {
            if (intent.filterEquals(list.get(i))) {
                // This sticky already exists, replace it.
                list.set(i, new Intent(intent));
                break;
            }
        }
        if (i >= stickiesCount) {
            list.add(new Intent(intent));
        }
    }
    int[] users;
    if (userId == UserHandle.USER_ALL) {
        // Caller wants broadcast to go to all started users.
        users = mUserController.getStartedUserArray();
    } else {
        // Caller wants broadcast to go to one specific user.
        users = new int[] { userId };
    }
    // Figure out who all will receive this broadcast.
    List receivers = null;
    List<BroadcastFilter> registeredReceivers = null;
    // Need to resolve the intent to interested receivers...
    if ((intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
        receivers = collectReceiverComponents(intent, resolvedType, callingUid, users);
    }
    if (intent.getComponent() == null) {
        if (userId == UserHandle.USER_ALL && callingUid == SHELL_UID) {
            // Query one target user at a time, excluding shell-restricted users
            for (int i = 0; i < users.length; i++) {
                if (mUserController.hasUserRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES, users[i])) {
                    continue;
                }
                List<BroadcastFilter> registeredReceiversForUser = mReceiverResolver.queryIntent(intent, resolvedType, false, /*defaultOnly*/
                users[i]);
                if (registeredReceivers == null) {
                    registeredReceivers = registeredReceiversForUser;
                } else if (registeredReceiversForUser != null) {
                    registeredReceivers.addAll(registeredReceiversForUser);
                }
            }
        } else {
            registeredReceivers = mReceiverResolver.queryIntent(intent, resolvedType, false, /*defaultOnly*/
            userId);
        }
    }
    final boolean replacePending = (intent.getFlags() & Intent.FLAG_RECEIVER_REPLACE_PENDING) != 0;
    if (DEBUG_BROADCAST)
        Slog.v(TAG_BROADCAST, "Enqueueing broadcast: " + intent.getAction() + " replacePending=" + replacePending);
    int NR = registeredReceivers != null ? registeredReceivers.size() : 0;
    if (!ordered && NR > 0) {
        // components to be launched.
        if (isCallerSystem) {
            checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid, isProtectedBroadcast, registeredReceivers);
        }
        final BroadcastQueue queue = broadcastQueueForIntent(intent);
        BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId);
        if (DEBUG_BROADCAST)
            Slog.v(TAG_BROADCAST, "Enqueueing parallel broadcast " + r);
        final boolean replaced = replacePending && (queue.replaceParallelBroadcastLocked(r) != null);
        // Note: We assume resultTo is null for non-ordered broadcasts.
        if (!replaced) {
            queue.enqueueParallelBroadcastLocked(r);
            queue.scheduleBroadcastsLocked();
        }
        registeredReceivers = null;
        NR = 0;
    }
    // Merge into one list.
    int ir = 0;
    if (receivers != null) {
        // A special case for PACKAGE_ADDED: do not allow the package
        // being added to see this broadcast.  This prevents them from
        // using this as a back door to get run as soon as they are
        // installed.  Maybe in the future we want to have a special install
        // broadcast or such for apps, but we'd like to deliberately make
        // this decision.
        String[] skipPackages = null;
        if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction()) || Intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction()) || Intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
            Uri data = intent.getData();
            if (data != null) {
                String pkgName = data.getSchemeSpecificPart();
                if (pkgName != null) {
                    skipPackages = new String[] { pkgName };
                }
            }
        } else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(intent.getAction())) {
            skipPackages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
        }
        if (skipPackages != null && (skipPackages.length > 0)) {
            for (String skipPackage : skipPackages) {
                if (skipPackage != null) {
                    int NT = receivers.size();
                    for (int it = 0; it < NT; it++) {
                        ResolveInfo curt = (ResolveInfo) receivers.get(it);
                        if (curt.activityInfo.packageName.equals(skipPackage)) {
                            receivers.remove(it);
                            it--;
                            NT--;
                        }
                    }
                }
            }
        }
        int NT = receivers != null ? receivers.size() : 0;
        int it = 0;
        ResolveInfo curt = null;
        BroadcastFilter curr = null;
        while (it < NT && ir < NR) {
            if (curt == null) {
                curt = (ResolveInfo) receivers.get(it);
            }
            if (curr == null) {
                curr = registeredReceivers.get(ir);
            }
            if (curr.getPriority() >= curt.priority) {
                // Insert this broadcast record into the final list.
                receivers.add(it, curr);
                ir++;
                curr = null;
                it++;
                NT++;
            } else {
                // Skip to the next ResolveInfo in the final list.
                it++;
                curt = null;
            }
        }
    }
    while (ir < NR) {
        if (receivers == null) {
            receivers = new ArrayList();
        }
        receivers.add(registeredReceivers.get(ir));
        ir++;
    }
    if (isCallerSystem) {
        checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid, isProtectedBroadcast, receivers);
    }
    if ((receivers != null && receivers.size() > 0) || resultTo != null) {
        BroadcastQueue queue = broadcastQueueForIntent(intent);
        BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId);
        if (DEBUG_BROADCAST)
            Slog.v(TAG_BROADCAST, "Enqueueing ordered broadcast " + r + ": prev had " + queue.mOrderedBroadcasts.size());
        if (DEBUG_BROADCAST)
            Slog.i(TAG_BROADCAST, "Enqueueing broadcast " + r.intent.getAction());
        final BroadcastRecord oldRecord = replacePending ? queue.replaceOrderedBroadcastLocked(r) : null;
        if (oldRecord != null) {
            // Replaced, fire the result-to receiver.
            if (oldRecord.resultTo != null) {
                final BroadcastQueue oldQueue = broadcastQueueForIntent(oldRecord.intent);
                try {
                    oldQueue.performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo, oldRecord.intent, Activity.RESULT_CANCELED, null, null, false, false, oldRecord.userId);
                } catch (RemoteException e) {
                    Slog.w(TAG, "Failure [" + queue.mQueueName + "] sending broadcast result of " + intent, e);
                }
            }
        } else {
            queue.enqueueOrderedBroadcastLocked(r);
            queue.scheduleBroadcastsLocked();
        }
    } else {
        // that it happened.
        if (intent.getComponent() == null && intent.getPackage() == null && (intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
            // This was an implicit broadcast... let's record it for posterity.
            addBroadcastStatLocked(intent.getAction(), callerPackage, 0, 0, 0);
        }
    }
    return ActivityManager.BROADCAST_SUCCESS;
}
#method_after
@GuardedBy("this")
final int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int userId) {
    intent = new Intent(intent);
    final boolean callerInstantApp = isInstantApp(callerApp, callerPackage, callingUid);
    // Instant Apps cannot use FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS
    if (callerInstantApp) {
        intent.setFlags(intent.getFlags() & ~Intent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS);
    }
    // By default broadcasts do not go to stopped apps.
    intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);
    // If we have not finished booting, don't allow this to launch new processes.
    if (!mProcessesReady && (intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) {
        intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    }
    if (DEBUG_BROADCAST_LIGHT)
        Slog.v(TAG_BROADCAST, (sticky ? "Broadcast sticky: " : "Broadcast: ") + intent + " ordered=" + ordered + " userid=" + userId);
    if ((resultTo != null) && !ordered) {
        Slog.w(TAG, "Broadcast " + intent + " not ordered but result callback requested!");
    }
    userId = mUserController.handleIncomingUser(callingPid, callingUid, userId, true, ALLOW_NON_FULL, "broadcast", callerPackage);
    // If not, we will just skip it. Make an exception for shutdown broadcasts, upgrade steps.
    if (userId != UserHandle.USER_ALL && !mUserController.isUserOrItsParentRunning(userId)) {
        if ((callingUid != SYSTEM_UID || (intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) == 0) && !Intent.ACTION_SHUTDOWN.equals(intent.getAction())) {
            Slog.w(TAG, "Skipping broadcast of " + intent + ": user " + userId + " and its parent (if any) are stopped");
            return ActivityManager.BROADCAST_FAILED_USER_STOPPED;
        }
    }
    final String action = intent.getAction();
    BroadcastOptions brOptions = null;
    if (bOptions != null) {
        brOptions = new BroadcastOptions(bOptions);
        if (brOptions.getTemporaryAppWhitelistDuration() > 0) {
            // PendingIntent), because that who is actually supplied the arguments.
            if (checkComponentPermission(android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST, Binder.getCallingPid(), Binder.getCallingUid(), -1, true) != PackageManager.PERMISSION_GRANTED) {
                String msg = "Permission Denial: " + intent.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ")" + " requires " + android.Manifest.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST;
                Slog.w(TAG, msg);
                throw new SecurityException(msg);
            }
        }
        if (brOptions.isDontSendToRestrictedApps() && !isUidActiveLocked(callingUid) && isBackgroundRestrictedNoCheck(callingUid, callerPackage)) {
            Slog.i(TAG, "Not sending broadcast " + action + " - app " + callerPackage + " has background restrictions");
            return ActivityManager.START_CANCELED;
        }
    }
    // Verify that protected broadcasts are only being sent by system code,
    // and that system code is only sending protected broadcasts.
    final boolean isProtectedBroadcast;
    try {
        isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action);
    } catch (RemoteException e) {
        Slog.w(TAG, "Remote exception", e);
        return ActivityManager.BROADCAST_SUCCESS;
    }
    final boolean isCallerSystem;
    switch(UserHandle.getAppId(callingUid)) {
        case ROOT_UID:
        case SYSTEM_UID:
        case PHONE_UID:
        case BLUETOOTH_UID:
        case NFC_UID:
        case SE_UID:
        case NETWORK_STACK_UID:
            isCallerSystem = true;
            break;
        default:
            isCallerSystem = (callerApp != null) && callerApp.persistent;
            break;
    }
    // sending protected broadcasts.
    if (!isCallerSystem) {
        if (isProtectedBroadcast) {
            String msg = "Permission Denial: not allowed to send broadcast " + action + " from pid=" + callingPid + ", uid=" + callingUid;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        } else if (AppWidgetManager.ACTION_APPWIDGET_CONFIGURE.equals(action) || AppWidgetManager.ACTION_APPWIDGET_UPDATE.equals(action)) {
            // just limit it to the caller.
            if (callerPackage == null) {
                String msg = "Permission Denial: not allowed to send broadcast " + action + " from unknown caller.";
                Slog.w(TAG, msg);
                throw new SecurityException(msg);
            } else if (intent.getComponent() != null) {
                // it is being sent to the calling app.
                if (!intent.getComponent().getPackageName().equals(callerPackage)) {
                    String msg = "Permission Denial: not allowed to send broadcast " + action + " to " + intent.getComponent().getPackageName() + " from " + callerPackage;
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            } else {
                // Limit broadcast to their own package.
                intent.setPackage(callerPackage);
            }
        }
    }
    if (action != null) {
        if (getBackgroundLaunchBroadcasts().contains(action)) {
            if (DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Broadcast action " + action + " forcing include-background");
            }
            intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);
        }
        switch(action) {
            case Intent.ACTION_UID_REMOVED:
            case Intent.ACTION_PACKAGE_REMOVED:
            case Intent.ACTION_PACKAGE_CHANGED:
            case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:
            case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE:
            case Intent.ACTION_PACKAGES_SUSPENDED:
            case Intent.ACTION_PACKAGES_UNSUSPENDED:
                // its activities from the history stack.
                if (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED, callingPid, callingUid, -1, true) != PackageManager.PERMISSION_GRANTED) {
                    String msg = "Permission Denial: " + intent.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ")" + " requires " + android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
                switch(action) {
                    case Intent.ACTION_UID_REMOVED:
                        final int uid = getUidFromIntent(intent);
                        if (uid >= 0) {
                            mBatteryStatsService.removeUid(uid);
                            mAppOpsService.uidRemoved(uid);
                        }
                        break;
                    case Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE:
                        // If resources are unavailable just force stop all those packages
                        // and flush the attribute cache as well.
                        String[] list = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                        if (list != null && list.length > 0) {
                            for (int i = 0; i < list.length; i++) {
                                forceStopPackageLocked(list[i], -1, false, true, true, false, false, userId, "storage unmount");
                            }
                            mRecentTasks.cleanupLocked(UserHandle.USER_ALL);
                            sendPackageBroadcastLocked(ApplicationThreadConstants.EXTERNAL_STORAGE_UNAVAILABLE, list, userId);
                        }
                        break;
                    case Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE:
                        mRecentTasks.cleanupLocked(UserHandle.USER_ALL);
                        break;
                    case Intent.ACTION_PACKAGE_REMOVED:
                    case Intent.ACTION_PACKAGE_CHANGED:
                        Uri data = intent.getData();
                        String ssp;
                        if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                            boolean removed = Intent.ACTION_PACKAGE_REMOVED.equals(action);
                            final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING, false);
                            final boolean killProcess = !intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP, false);
                            final boolean fullUninstall = removed && !replacing;
                            if (removed) {
                                if (killProcess) {
                                    forceStopPackageLocked(ssp, UserHandle.getAppId(intent.getIntExtra(Intent.EXTRA_UID, -1)), false, true, true, false, fullUninstall, userId, removed ? "pkg removed" : "pkg changed");
                                }
                                final int cmd = killProcess ? ApplicationThreadConstants.PACKAGE_REMOVED : ApplicationThreadConstants.PACKAGE_REMOVED_DONT_KILL;
                                sendPackageBroadcastLocked(cmd, new String[] { ssp }, userId);
                                if (fullUninstall) {
                                    mAppOpsService.packageRemoved(intent.getIntExtra(Intent.EXTRA_UID, -1), ssp);
                                    // Remove all permissions granted from/to this package
                                    removeUriPermissionsForPackageLocked(ssp, userId, true, false);
                                    mRecentTasks.removeTasksByPackageName(ssp, userId);
                                    mServices.forceStopPackageLocked(ssp, userId);
                                    mAppWarnings.onPackageUninstalled(ssp);
                                    mCompatModePackages.handlePackageUninstalledLocked(ssp);
                                    mBatteryStatsService.notePackageUninstalled(ssp);
                                }
                            } else {
                                if (killProcess) {
                                    killPackageProcessesLocked(ssp, UserHandle.getAppId(intent.getIntExtra(Intent.EXTRA_UID, -1)), userId, ProcessList.INVALID_ADJ, false, true, true, false, "change " + ssp);
                                }
                                cleanupDisabledPackageComponentsLocked(ssp, userId, killProcess, intent.getStringArrayExtra(Intent.EXTRA_CHANGED_COMPONENT_NAME_LIST));
                            }
                        }
                        break;
                    case Intent.ACTION_PACKAGES_SUSPENDED:
                    case Intent.ACTION_PACKAGES_UNSUSPENDED:
                        final boolean suspended = Intent.ACTION_PACKAGES_SUSPENDED.equals(intent.getAction());
                        final String[] packageNames = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                        final int userHandle = intent.getIntExtra(Intent.EXTRA_USER_HANDLE, UserHandle.USER_NULL);
                        synchronized (ActivityManagerService.this) {
                            mRecentTasks.onPackagesSuspendedChanged(packageNames, suspended, userHandle);
                        }
                        break;
                }
                break;
            case Intent.ACTION_PACKAGE_REPLACED:
                {
                    final Uri data = intent.getData();
                    final String ssp;
                    if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                        ApplicationInfo aInfo = null;
                        try {
                            aInfo = AppGlobals.getPackageManager().getApplicationInfo(ssp, STOCK_PM_FLAGS, userId);
                        } catch (RemoteException ignore) {
                        }
                        if (aInfo == null) {
                            Slog.w(TAG, "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg:" + " ssp=" + ssp + " data=" + data);
                            return ActivityManager.BROADCAST_SUCCESS;
                        }
                        mStackSupervisor.updateActivityApplicationInfoLocked(aInfo);
                        mServices.updateServiceApplicationInfoLocked(aInfo);
                        sendPackageBroadcastLocked(ApplicationThreadConstants.PACKAGE_REPLACED, new String[] { ssp }, userId);
                    }
                    break;
                }
            case Intent.ACTION_PACKAGE_ADDED:
                {
                    // Special case for adding a package: by default turn on compatibility mode.
                    Uri data = intent.getData();
                    String ssp;
                    if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                        final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING, false);
                        mCompatModePackages.handlePackageAddedLocked(ssp, replacing);
                        try {
                            ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(ssp, STOCK_PM_FLAGS, 0);
                            mBatteryStatsService.notePackageInstalled(ssp, ai != null ? ai.versionCode : 0);
                        } catch (RemoteException e) {
                        }
                    }
                    break;
                }
            case Intent.ACTION_PACKAGE_DATA_CLEARED:
                {
                    Uri data = intent.getData();
                    String ssp;
                    if (data != null && (ssp = data.getSchemeSpecificPart()) != null) {
                        mCompatModePackages.handlePackageDataClearedLocked(ssp);
                        mAppWarnings.onPackageDataCleared(ssp);
                    }
                    break;
                }
            case Intent.ACTION_TIMEZONE_CHANGED:
                // If this is the time zone changed action, queue up a message that will reset
                // the timezone of all currently running processes. This message will get
                // queued up before the broadcast happens.
                mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);
                break;
            case Intent.ACTION_TIME_CHANGED:
                // EXTRA_TIME_PREF_24_HOUR_FORMAT is optional so we must distinguish between
                // the tri-state value it may contain and "unknown".
                // For convenience we re-use the Intent extra values.
                final int NO_EXTRA_VALUE_FOUND = -1;
                final int timeFormatPreferenceMsgValue = intent.getIntExtra(Intent.EXTRA_TIME_PREF_24_HOUR_FORMAT, NO_EXTRA_VALUE_FOUND);
                // Only send a message if the time preference is available.
                if (timeFormatPreferenceMsgValue != NO_EXTRA_VALUE_FOUND) {
                    Message updateTimePreferenceMsg = mHandler.obtainMessage(UPDATE_TIME_PREFERENCE_MSG, timeFormatPreferenceMsgValue, 0);
                    mHandler.sendMessage(updateTimePreferenceMsg);
                }
                BatteryStatsImpl stats = mBatteryStatsService.getActiveStatistics();
                synchronized (stats) {
                    stats.noteCurrentTimeChangedLocked();
                }
                break;
            case Intent.ACTION_CLEAR_DNS_CACHE:
                mHandler.sendEmptyMessage(CLEAR_DNS_CACHE_MSG);
                break;
            case Proxy.PROXY_CHANGE_ACTION:
                ProxyInfo proxy = intent.getParcelableExtra(Proxy.EXTRA_PROXY_INFO);
                mHandler.sendMessage(mHandler.obtainMessage(UPDATE_HTTP_PROXY_MSG, proxy));
                break;
            case android.hardware.Camera.ACTION_NEW_PICTURE:
            case android.hardware.Camera.ACTION_NEW_VIDEO:
                // In N we just turned these off; in O we are turing them back on partly,
                // only for registered receivers.  This will still address the main problem
                // (a spam of apps waking up when a picture is taken putting significant
                // memory pressure on the system at a bad point), while still allowing apps
                // that are already actively running to know about this happening.
                intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
                break;
            case android.security.KeyChain.ACTION_TRUST_STORE_CHANGED:
                mHandler.sendEmptyMessage(HANDLE_TRUST_STORAGE_UPDATE_MSG);
                break;
            case "com.android.launcher.action.INSTALL_SHORTCUT":
                // As of O, we no longer support this broadcasts, even for pre-O apps.
                // Apps should now be using ShortcutManager.pinRequestShortcut().
                Log.w(TAG, "Broadcast " + action + " no longer supported. It will not be delivered.");
                return ActivityManager.BROADCAST_SUCCESS;
        }
        if (Intent.ACTION_PACKAGE_ADDED.equals(action) || Intent.ACTION_PACKAGE_REMOVED.equals(action) || Intent.ACTION_PACKAGE_REPLACED.equals(action)) {
            final int uid = getUidFromIntent(intent);
            if (uid != -1) {
                final UidRecord uidRec = mActiveUids.get(uid);
                if (uidRec != null) {
                    uidRec.updateHasInternetPermission();
                }
            }
        }
    }
    // Add to the sticky list if requested.
    if (sticky) {
        if (checkPermission(android.Manifest.permission.BROADCAST_STICKY, callingPid, callingUid) != PackageManager.PERMISSION_GRANTED) {
            String msg = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + callingPid + ", uid=" + callingUid + " requires " + android.Manifest.permission.BROADCAST_STICKY;
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        if (requiredPermissions != null && requiredPermissions.length > 0) {
            Slog.w(TAG, "Can't broadcast sticky intent " + intent + " and enforce permissions " + Arrays.toString(requiredPermissions));
            return ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION;
        }
        if (intent.getComponent() != null) {
            throw new SecurityException("Sticky broadcasts can't target a specific component");
        }
        // as a separate set of sticky broadcasts.
        if (userId != UserHandle.USER_ALL) {
            // But first, if this is not a broadcast to all users, then
            // make sure it doesn't conflict with an existing broadcast to
            // all users.
            ArrayMap<String, ArrayList<Intent>> stickies = mStickyBroadcasts.get(UserHandle.USER_ALL);
            if (stickies != null) {
                ArrayList<Intent> list = stickies.get(intent.getAction());
                if (list != null) {
                    int N = list.size();
                    int i;
                    for (i = 0; i < N; i++) {
                        if (intent.filterEquals(list.get(i))) {
                            throw new IllegalArgumentException("Sticky broadcast " + intent + " for user " + userId + " conflicts with existing global broadcast");
                        }
                    }
                }
            }
        }
        ArrayMap<String, ArrayList<Intent>> stickies = mStickyBroadcasts.get(userId);
        if (stickies == null) {
            stickies = new ArrayMap<>();
            mStickyBroadcasts.put(userId, stickies);
        }
        ArrayList<Intent> list = stickies.get(intent.getAction());
        if (list == null) {
            list = new ArrayList<>();
            stickies.put(intent.getAction(), list);
        }
        final int stickiesCount = list.size();
        int i;
        for (i = 0; i < stickiesCount; i++) {
            if (intent.filterEquals(list.get(i))) {
                // This sticky already exists, replace it.
                list.set(i, new Intent(intent));
                break;
            }
        }
        if (i >= stickiesCount) {
            list.add(new Intent(intent));
        }
    }
    int[] users;
    if (userId == UserHandle.USER_ALL) {
        // Caller wants broadcast to go to all started users.
        users = mUserController.getStartedUserArray();
    } else {
        // Caller wants broadcast to go to one specific user.
        users = new int[] { userId };
    }
    // Figure out who all will receive this broadcast.
    List receivers = null;
    List<BroadcastFilter> registeredReceivers = null;
    // Need to resolve the intent to interested receivers...
    if ((intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
        receivers = collectReceiverComponents(intent, resolvedType, callingUid, users);
    }
    if (intent.getComponent() == null) {
        if (userId == UserHandle.USER_ALL && callingUid == SHELL_UID) {
            // Query one target user at a time, excluding shell-restricted users
            for (int i = 0; i < users.length; i++) {
                if (mUserController.hasUserRestriction(UserManager.DISALLOW_DEBUGGING_FEATURES, users[i])) {
                    continue;
                }
                List<BroadcastFilter> registeredReceiversForUser = mReceiverResolver.queryIntent(intent, resolvedType, false, /*defaultOnly*/
                users[i]);
                if (registeredReceivers == null) {
                    registeredReceivers = registeredReceiversForUser;
                } else if (registeredReceiversForUser != null) {
                    registeredReceivers.addAll(registeredReceiversForUser);
                }
            }
        } else {
            registeredReceivers = mReceiverResolver.queryIntent(intent, resolvedType, false, /*defaultOnly*/
            userId);
        }
    }
    final boolean replacePending = (intent.getFlags() & Intent.FLAG_RECEIVER_REPLACE_PENDING) != 0;
    if (DEBUG_BROADCAST)
        Slog.v(TAG_BROADCAST, "Enqueueing broadcast: " + intent.getAction() + " replacePending=" + replacePending);
    int NR = registeredReceivers != null ? registeredReceivers.size() : 0;
    if (!ordered && NR > 0) {
        // components to be launched.
        if (isCallerSystem) {
            checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid, isProtectedBroadcast, registeredReceivers);
        }
        final BroadcastQueue queue = broadcastQueueForIntent(intent);
        BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId);
        if (DEBUG_BROADCAST)
            Slog.v(TAG_BROADCAST, "Enqueueing parallel broadcast " + r);
        final boolean replaced = replacePending && (queue.replaceParallelBroadcastLocked(r) != null);
        // Note: We assume resultTo is null for non-ordered broadcasts.
        if (!replaced) {
            queue.enqueueParallelBroadcastLocked(r);
            queue.scheduleBroadcastsLocked();
        }
        registeredReceivers = null;
        NR = 0;
    }
    // Merge into one list.
    int ir = 0;
    if (receivers != null) {
        // A special case for PACKAGE_ADDED: do not allow the package
        // being added to see this broadcast.  This prevents them from
        // using this as a back door to get run as soon as they are
        // installed.  Maybe in the future we want to have a special install
        // broadcast or such for apps, but we'd like to deliberately make
        // this decision.
        String[] skipPackages = null;
        if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction()) || Intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction()) || Intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
            Uri data = intent.getData();
            if (data != null) {
                String pkgName = data.getSchemeSpecificPart();
                if (pkgName != null) {
                    skipPackages = new String[] { pkgName };
                }
            }
        } else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(intent.getAction())) {
            skipPackages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
        }
        if (skipPackages != null && (skipPackages.length > 0)) {
            for (String skipPackage : skipPackages) {
                if (skipPackage != null) {
                    int NT = receivers.size();
                    for (int it = 0; it < NT; it++) {
                        ResolveInfo curt = (ResolveInfo) receivers.get(it);
                        if (curt.activityInfo.packageName.equals(skipPackage)) {
                            receivers.remove(it);
                            it--;
                            NT--;
                        }
                    }
                }
            }
        }
        int NT = receivers != null ? receivers.size() : 0;
        int it = 0;
        ResolveInfo curt = null;
        BroadcastFilter curr = null;
        while (it < NT && ir < NR) {
            if (curt == null) {
                curt = (ResolveInfo) receivers.get(it);
            }
            if (curr == null) {
                curr = registeredReceivers.get(ir);
            }
            if (curr.getPriority() >= curt.priority) {
                // Insert this broadcast record into the final list.
                receivers.add(it, curr);
                ir++;
                curr = null;
                it++;
                NT++;
            } else {
                // Skip to the next ResolveInfo in the final list.
                it++;
                curt = null;
            }
        }
    }
    while (ir < NR) {
        if (receivers == null) {
            receivers = new ArrayList();
        }
        receivers.add(registeredReceivers.get(ir));
        ir++;
    }
    if (isCallerSystem) {
        checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid, isProtectedBroadcast, receivers);
    }
    if ((receivers != null && receivers.size() > 0) || resultTo != null) {
        BroadcastQueue queue = broadcastQueueForIntent(intent);
        BroadcastRecord r = new BroadcastRecord(queue, intent, callerApp, callerPackage, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, appOp, brOptions, receivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId);
        if (DEBUG_BROADCAST)
            Slog.v(TAG_BROADCAST, "Enqueueing ordered broadcast " + r + ": prev had " + queue.mOrderedBroadcasts.size());
        if (DEBUG_BROADCAST)
            Slog.i(TAG_BROADCAST, "Enqueueing broadcast " + r.intent.getAction());
        final BroadcastRecord oldRecord = replacePending ? queue.replaceOrderedBroadcastLocked(r) : null;
        if (oldRecord != null) {
            // Replaced, fire the result-to receiver.
            if (oldRecord.resultTo != null) {
                final BroadcastQueue oldQueue = broadcastQueueForIntent(oldRecord.intent);
                try {
                    oldQueue.performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo, oldRecord.intent, Activity.RESULT_CANCELED, null, null, false, false, oldRecord.userId);
                } catch (RemoteException e) {
                    Slog.w(TAG, "Failure [" + queue.mQueueName + "] sending broadcast result of " + intent, e);
                }
            }
        } else {
            queue.enqueueOrderedBroadcastLocked(r);
            queue.scheduleBroadcastsLocked();
        }
    } else {
        // that it happened.
        if (intent.getComponent() == null && intent.getPackage() == null && (intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
            // This was an implicit broadcast... let's record it for posterity.
            addBroadcastStatLocked(intent.getAction(), callerPackage, 0, 0, 0);
        }
    }
    return ActivityManager.BROADCAST_SUCCESS;
}
#end_block

#method_before
private float getSpeedPerPixel() {
    if (!mHasCalculatedMillisPerPixel) {
        mMillisPerPixel = calculateSpeedPerPixel(mDisplayMetrics);
    }
    return mMillisPerPixel;
}
#method_after
private float getSpeedPerPixel() {
    if (!mHasCalculatedMillisPerPixel) {
        mMillisPerPixel = calculateSpeedPerPixel(mDisplayMetrics);
        mHasCalculatedMillisPerPixel = true;
    }
    return mMillisPerPixel;
}
#end_block

#method_before
private void testExifInterfaceCommon(String fileName, ExpectedValue expectedValue) throws IOException {
    File imageFile = new File(Environment.getExternalStorageDirectory(), fileName);
    String verboseTag = imageFile.getName();
    // Creates via file.
    ExifInterface exifInterface = new ExifInterface(imageFile);
    assertNotNull(exifInterface);
    compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
    // Creates via path.
    exifInterface = new ExifInterface(imageFile.getAbsolutePath());
    assertNotNull(exifInterface);
    compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
    InputStream in = null;
    // Creates via InputStream.
    try {
        in = new BufferedInputStream(new FileInputStream(imageFile.getAbsolutePath()));
        exifInterface = new ExifInterface(in);
        compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
    } finally {
        closeQuietly(in);
    }
    // Creates via FileDescriptor.
    if (Build.VERSION.SDK_INT >= 21) {
        FileDescriptor fd = null;
        try {
            fd = Os.open(imageFile.getAbsolutePath(), OsConstants.O_RDONLY, 0600);
            exifInterface = new ExifInterface(fd);
            compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
        } catch (Exception e) {
            throw new IOException("Failed to open file descriptor");
        } finally {
            closeQuietly(fd);
        }
    }
}
#method_after
private void testExifInterfaceCommon(String fileName, ExpectedValue expectedValue) throws IOException {
    File imageFile = new File(Environment.getExternalStorageDirectory(), fileName);
    String verboseTag = imageFile.getName();
    // Creates via file.
    ExifInterface exifInterface = new ExifInterface(imageFile);
    assertNotNull(exifInterface);
    compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
    // Creates via path.
    exifInterface = new ExifInterface(imageFile.getAbsolutePath());
    assertNotNull(exifInterface);
    compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
    InputStream in = null;
    // Creates via InputStream.
    try {
        in = new BufferedInputStream(new FileInputStream(imageFile.getAbsolutePath()));
        exifInterface = new ExifInterface(in);
        compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
    } finally {
        closeQuietly(in);
    }
    // Creates via FileDescriptor.
    if (Build.VERSION.SDK_INT >= 21) {
        FileDescriptor fd = null;
        try {
            fd = Os.open(imageFile.getAbsolutePath(), OsConstants.O_RDONLY, OsConstants.S_IRWXU);
            exifInterface = new ExifInterface(fd);
            compareWithExpectedValue(exifInterface, expectedValue, verboseTag);
        } catch (Exception e) {
            throw new IOException("Failed to open file descriptor", e);
        } finally {
            closeQuietly(fd);
        }
    }
}
#end_block

#method_before
private static boolean isSeekableFD(FileDescriptor fd) throws IOException {
    try {
        Os.lseek(fd, 0, OsConstants.SEEK_CUR);
        return true;
    } catch (Exception e) {
        return false;
    }
}
#method_after
private static boolean isSeekableFD(FileDescriptor fd) throws IOException {
    if (Build.VERSION.SDK_INT >= 21) {
        try {
            Os.lseek(fd, 0, OsConstants.SEEK_CUR);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
    return false;
}
#end_block

#method_before
public void saveAttributes() throws IOException {
    if (!mIsSupportedFile || mMimeType != IMAGE_TYPE_JPEG) {
        throw new IOException("ExifInterface only supports saving attributes on JPEG formats.");
    }
    if (mSeekableFileDescriptor == null && mFilename == null) {
        throw new IOException("ExifInterface does not support saving attributes for the current input.");
    }
    // Keep the thumbnail in memory
    mThumbnailBytes = getThumbnail();
    FileInputStream in = null;
    FileOutputStream out = null;
    File tempFile = null;
    try {
        // Move the original file to temporary file.
        if (mFilename != null) {
            tempFile = new File(mFilename + ".tmp");
            File originalFile = new File(mFilename);
            if (!originalFile.renameTo(tempFile)) {
                throw new IOException("Could'nt rename to " + tempFile.getAbsolutePath());
            }
        } else if (Build.VERSION.SDK_INT >= 21 && mSeekableFileDescriptor != null) {
            tempFile = File.createTempFile("temp", "jpg");
            Os.lseek(mSeekableFileDescriptor, 0, OsConstants.SEEK_SET);
            in = new FileInputStream(mSeekableFileDescriptor);
            out = new FileOutputStream(tempFile);
            copy(in, out);
        }
    } catch (Exception e) {
        throw new IOException("Failed to copy file");
    } finally {
        closeQuietly(in);
        closeQuietly(out);
    }
    in = null;
    out = null;
    try {
        // Save the new file.
        in = new FileInputStream(tempFile);
        if (mFilename != null) {
            out = new FileOutputStream(mFilename);
        } else if (Build.VERSION.SDK_INT >= 21 && mSeekableFileDescriptor != null) {
            Os.lseek(mSeekableFileDescriptor, 0, OsConstants.SEEK_SET);
            out = new FileOutputStream(mSeekableFileDescriptor);
        }
        saveJpegAttributes(in, out);
    } catch (Exception e) {
        throw new IOException("Failed to copy file");
    } finally {
        closeQuietly(in);
        closeQuietly(out);
        tempFile.delete();
    }
    // Discard the thumbnail in memory
    mThumbnailBytes = null;
}
#method_after
public void saveAttributes() throws IOException {
    if (!mIsSupportedFile || mMimeType != IMAGE_TYPE_JPEG) {
        throw new IOException("ExifInterface only supports saving attributes on JPEG formats.");
    }
    if (mSeekableFileDescriptor == null && mFilename == null) {
        throw new IOException("ExifInterface does not support saving attributes for the current input.");
    }
    // Keep the thumbnail in memory
    mThumbnailBytes = getThumbnail();
    FileInputStream in = null;
    FileOutputStream out = null;
    File tempFile = null;
    try {
        // Move the original file to temporary file.
        if (mFilename != null) {
            tempFile = new File(mFilename + ".tmp");
            File originalFile = new File(mFilename);
            if (!originalFile.renameTo(tempFile)) {
                throw new IOException("Couldn't rename to " + tempFile.getAbsolutePath());
            }
        } else if (Build.VERSION.SDK_INT >= 21 && mSeekableFileDescriptor != null) {
            tempFile = File.createTempFile("temp", "jpg");
            Os.lseek(mSeekableFileDescriptor, 0, OsConstants.SEEK_SET);
            in = new FileInputStream(mSeekableFileDescriptor);
            out = new FileOutputStream(tempFile);
            copy(in, out);
        }
    } catch (Exception e) {
        throw new IOException("Failed to copy file");
    } finally {
        closeQuietly(in);
        closeQuietly(out);
    }
    in = null;
    out = null;
    try {
        // Save the new file.
        in = new FileInputStream(tempFile);
        if (mFilename != null) {
            out = new FileOutputStream(mFilename);
        } else if (Build.VERSION.SDK_INT >= 21 && mSeekableFileDescriptor != null) {
            Os.lseek(mSeekableFileDescriptor, 0, OsConstants.SEEK_SET);
            out = new FileOutputStream(mSeekableFileDescriptor);
        }
        saveJpegAttributes(in, out);
    } catch (Exception e) {
        throw new IOException("Failed to copy file");
    } finally {
        closeQuietly(in);
        closeQuietly(out);
        tempFile.delete();
    }
    // Discard the thumbnail in memory
    mThumbnailBytes = null;
}
#end_block

#method_before
@NonNull
public static KeyedAppStatesReporter getInstance(@NonNull Context context) {
    if (context == null || context.getApplicationContext() == null) {
        throw new NullPointerException();
    }
    if (sSingleton == null) {
        if (sExecutor == null) {
            sExecutor = createExecutorService();
        }
        synchronized (KeyedAppStatesReporter.class) {
            if (sSingleton == null) {
                sSingleton = new KeyedAppStatesReporter(context);
                sSingleton.bind();
            }
        }
    }
    return sSingleton;
}
#method_after
@NonNull
public static KeyedAppStatesReporter getInstance(@NonNull Context context) {
    if (context == null || context.getApplicationContext() == null) {
        throw new NullPointerException();
    }
    if (sSingleton == null) {
        synchronized (KeyedAppStatesReporter.class) {
            if (sSingleton == null) {
                initializeSingleton(context, createExecutorService());
            }
        }
    }
    return sSingleton;
}
#end_block

#method_before
private void set(final Collection<KeyedAppState> states, final boolean immediate) {
    sExecutor.execute(new Runnable() {

        @Override
        public void run() {
            if (states.isEmpty()) {
                Log.i(LOG_TAG, "states provided was empty");
                return;
            }
            unbindOldBindings();
            bind();
            send(buildStatesBundle(states), immediate);
        }
    });
}
#method_after
private void set(final Collection<KeyedAppState> states, final boolean immediate) {
    mExecutor.execute(new Runnable() {

        @Override
        public void run() {
            if (states.isEmpty()) {
                return;
            }
            unbindOldBindings();
            bind();
            send(buildStatesBundle(states), immediate);
        }
    });
}
#end_block

#method_before
private void bind(Collection<String> acceptablePackageNames) {
    // Remove already-bound packages
    Collection<String> filteredPackageNames = new HashSet<>();
    for (String packageName : acceptablePackageNames) {
        if (!mServiceConnections.containsKey(packageName)) {
            filteredPackageNames.add(packageName);
        }
    }
    if (filteredPackageNames.isEmpty()) {
        return;
    }
    Collection<ServiceInfo> serviceInfos = getServiceInfoInPackages(new Intent(APP_STATES_ACTION), filteredPackageNames);
    for (ServiceInfo serviceInfo : serviceInfos) {
        Intent bindIntent = new Intent();
        bindIntent.setComponent(new ComponentName(serviceInfo.packageName, serviceInfo.name));
        BufferedServiceConnection bufferedServiceConnection = new BufferedServiceConnection(sExecutor, mContext, bindIntent, Context.BIND_AUTO_CREATE);
        bufferedServiceConnection.bindService();
        mServiceConnections.put(serviceInfo.packageName, bufferedServiceConnection);
    }
}
#method_after
private void bind(Collection<String> acceptablePackageNames) {
    // Remove already-bound packages
    Collection<String> filteredPackageNames = new HashSet<>();
    for (String packageName : acceptablePackageNames) {
        if (!mServiceConnections.containsKey(packageName)) {
            filteredPackageNames.add(packageName);
        }
    }
    if (filteredPackageNames.isEmpty()) {
        return;
    }
    Collection<ServiceInfo> serviceInfos = getServiceInfoInPackages(new Intent(APP_STATES_ACTION), filteredPackageNames);
    for (ServiceInfo serviceInfo : serviceInfos) {
        Intent bindIntent = new Intent();
        bindIntent.setComponent(new ComponentName(serviceInfo.packageName, serviceInfo.name));
        BufferedServiceConnection bufferedServiceConnection = new BufferedServiceConnection(mExecutor, mContext, bindIntent, Context.BIND_AUTO_CREATE);
        bufferedServiceConnection.bindService();
        mServiceConnections.put(serviceInfo.packageName, bufferedServiceConnection);
    }
}
#end_block

#method_before
@Before
public void setUp() {
    // Reset the singleton so tests are independent
    KeyedAppStatesReporter.resetSingleton();
    KeyedAppStatesReporter.setExecutor(mExecutor);
}
#method_after
@Before
public void setUp() {
    // Reset the singleton so tests are independent
    KeyedAppStatesReporter.resetSingleton();
}
#end_block

#method_before
@Test
@SmallTest
public void getInstance_nullContext_throwsNullPointerException() {
    try {
        KeyedAppStatesReporter.getInstance(null);
        fail();
    } catch (NullPointerException expected) {
    }
}
#method_after
@Test
@SmallTest
public void getInstance_nullContext_throwsNullPointerException() {
    KeyedAppStatesReporter.resetSingleton();
    try {
        KeyedAppStatesReporter.getInstance(null);
        fail();
    } catch (NullPointerException expected) {
    }
}
#end_block

#method_before
@Test
@SmallTest
public void setIncludesAppStateBundle() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    Bundle appStatesBundle = buildStatesBundle(singleton(mState));
    assertAppStateBundlesEqual(appStatesBundle, mTestHandler.latestMessage().getData());
}
#method_after
@Test
@SmallTest
public void setIncludesAppStateBundle() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    Bundle appStatesBundle = buildStatesBundle(singleton(mState));
    assertAppStateBundlesEqual(appStatesBundle, mTestHandler.latestMessage().getData());
}
#end_block

#method_before
@Test
@SmallTest
public void setEmpty_doesNotSend() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(Collections.<KeyedAppState>emptyList());
    assertThat(mTestHandler.latestMessage()).isNull();
}
#method_after
@Test
@SmallTest
public void setEmpty_doesNotSend() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(Collections.<KeyedAppState>emptyList());
    assertThat(mTestHandler.latestMessage()).isNull();
}
#end_block

#method_before
@Test
@SmallTest
public void setNotImmediate() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage().what).isEqualTo(WHAT_STATE);
}
#method_after
@Test
@SmallTest
public void setNotImmediate() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage().what).isEqualTo(WHAT_STATE);
}
#end_block

#method_before
@Test
@SmallTest
public void setImmediate() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.setImmediate(singletonList(mState));
    assertThat(mTestHandler.latestMessage().what).isEqualTo(WHAT_IMMEDIATE_STATE);
}
#method_after
@Test
@SmallTest
public void setImmediate() {
    setTestHandlerReceivesStates();
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.setImmediate(singletonList(mState));
    assertThat(mTestHandler.latestMessage().what).isEqualTo(WHAT_IMMEDIATE_STATE);
}
#end_block

#method_before
@Test
@SmallTest
public void set_doesNotGoToNormalApps() {
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNull();
}
#method_after
@Test
@SmallTest
public void set_doesNotGoToNormalApps() {
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_goesToDeviceOwner() {
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setDeviceOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_goesToDeviceOwner() {
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setDeviceOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_goesToProfileOwner() {
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_goesToProfileOwner() {
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_goesToPhonesky() {
    ComponentName phoneskyComponentName = new ComponentName(PHONESKY_PACKAGE_NAME, "");
    addComponentAsRespondingToAppStatesIntent(phoneskyComponentName);
    setComponentBindingToHandler(phoneskyComponentName, mTestHandler);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_goesToPhonesky() {
    ComponentName phoneskyComponentName = new ComponentName(PHONESKY_PACKAGE_NAME, "");
    addComponentAsRespondingToAppStatesIntent(phoneskyComponentName);
    setComponentBindingToHandler(phoneskyComponentName, mTestHandler);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_goesToMultiple() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    ComponentName phoneskyComponentName = new ComponentName(PHONESKY_PACKAGE_NAME, "");
    TestHandler phoneskyTestHandler = new TestHandler();
    addComponentAsRespondingToAppStatesIntent(phoneskyComponentName);
    setComponentBindingToHandler(phoneskyComponentName, phoneskyTestHandler);
    // Act
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNotNull();
    assertThat(phoneskyTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_goesToMultiple() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    ComponentName phoneskyComponentName = new ComponentName(PHONESKY_PACKAGE_NAME, "");
    TestHandler phoneskyTestHandler = new TestHandler();
    addComponentAsRespondingToAppStatesIntent(phoneskyComponentName);
    setComponentBindingToHandler(phoneskyComponentName, phoneskyTestHandler);
    // Act
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNotNull();
    assertThat(phoneskyTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_changeProfileOwner_goesToNewProfileOwner() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    mTestHandler.reset();
    ComponentName newComponentName = new ComponentName("second_test_package", "");
    TestHandler newTestHandler = new TestHandler();
    addComponentAsRespondingToAppStatesIntent(newComponentName);
    setComponentBindingToHandler(newComponentName, newTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(newComponentName);
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_changeProfileOwner_goesToNewProfileOwner() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    mTestHandler.reset();
    ComponentName newComponentName = new ComponentName("second_test_package", "");
    TestHandler newTestHandler = new TestHandler();
    addComponentAsRespondingToAppStatesIntent(newComponentName);
    setComponentBindingToHandler(newComponentName, newTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(newComponentName);
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_changeDeviceOwner_goesToNewDeviceOwner() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setDeviceOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    reporter.set(singletonList(mState));
    mTestHandler.reset();
    ComponentName newComponentName = new ComponentName("second_test_package", "");
    TestHandler newTestHandler = new TestHandler();
    addComponentAsRespondingToAppStatesIntent(newComponentName);
    setComponentBindingToHandler(newComponentName, newTestHandler);
    shadowOf(mDevicePolicyManager).setDeviceOwner(newComponentName);
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_changeDeviceOwner_goesToNewDeviceOwner() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setDeviceOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    reporter.set(singletonList(mState));
    mTestHandler.reset();
    ComponentName newComponentName = new ComponentName("second_test_package", "");
    TestHandler newTestHandler = new TestHandler();
    addComponentAsRespondingToAppStatesIntent(newComponentName);
    setComponentBindingToHandler(newComponentName, newTestHandler);
    shadowOf(mDevicePolicyManager).setDeviceOwner(newComponentName);
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
@Config(minSdk = 26)
public void set_deadConnection_reconnectsAndSendsToNewApp() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    // Set the binding to a different handler - as if the app has restarted.
    TestHandler newAppTestHandler = new TestHandler();
    setComponentBindingToHandler(mTestComponentName, newAppTestHandler);
    simulateDeadServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newAppTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
@Config(minSdk = 26)
public void set_deadConnection_reconnectsAndSendsToNewApp() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    // Set the binding to a different handler - as if the app has restarted.
    TestHandler newAppTestHandler = new TestHandler();
    setComponentBindingToHandler(mTestComponentName, newAppTestHandler);
    simulateDeadServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newAppTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
@Config(maxSdk = 25)
public void set_connectionHasDisconnected_sdkLessThan26_reconnectsAndSendsToNewApp() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    // Set the binding to a different handler - as if the app has restarted.
    TestHandler newAppTestHandler = new TestHandler();
    setComponentBindingToHandler(mTestComponentName, newAppTestHandler);
    simulateDisconnectingServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newAppTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
@Config(maxSdk = 25)
public void set_connectionHasDisconnected_sdkLessThan26_reconnectsAndSendsToNewApp() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    // Set the binding to a different handler - as if the app has restarted.
    TestHandler newAppTestHandler = new TestHandler();
    setComponentBindingToHandler(mTestComponentName, newAppTestHandler);
    simulateDisconnectingServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
    assertThat(newAppTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
@Config(minSdk = 26)
public void set_connectionHasDisconnected_doesNotSend() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    simulateDisconnectingServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
}
#method_after
@Test
@SmallTest
@Config(minSdk = 26)
public void set_connectionHasDisconnected_doesNotSend() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    simulateDisconnectingServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNull();
}
#end_block

#method_before
@Test
@SmallTest
@Config(minSdk = 26)
public void set_sendsWhenReconnected() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    simulateDisconnectingServiceConnection();
    reporter.set(singletonList(mState));
    // Act
    simulateReconnectingServiceConnection();
    // Assert
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
@Config(minSdk = 26)
public void set_sendsWhenReconnected() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    simulateDisconnectingServiceConnection();
    reporter.set(singletonList(mState));
    // Act
    simulateReconnectingServiceConnection();
    // Assert
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
@Test
@SmallTest
public void set_connectionHasReconnected_doesSend() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = KeyedAppStatesReporter.getInstance(mContext);
    // Change the component binding to ensure that it doesn't reconnect
    setComponentBindingToHandler(mTestComponentName, new TestHandler());
    simulateDisconnectingServiceConnection();
    simulateReconnectingServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#method_after
@Test
@SmallTest
public void set_connectionHasReconnected_doesSend() {
    // Arrange
    addComponentAsRespondingToAppStatesIntent(mTestComponentName);
    setComponentBindingToHandler(mTestComponentName, mTestHandler);
    shadowOf(mDevicePolicyManager).setProfileOwner(mTestComponentName);
    KeyedAppStatesReporter reporter = getReporter(mContext);
    // Change the component binding to ensure that it doesn't reconnect
    setComponentBindingToHandler(mTestComponentName, new TestHandler());
    simulateDisconnectingServiceConnection();
    simulateReconnectingServiceConnection();
    // Act
    reporter.set(singletonList(mState));
    // Assert
    assertThat(mTestHandler.latestMessage()).isNotNull();
}
#end_block

#method_before
MediaMetadata extractMetadata(MediaItem mediaItem, boolean isMusic) {
    MediaMetadataRetriever retriever = null;
    String path = "";
    try {
        if (mediaItem == null) {
            return null;
        } else if (mediaItem instanceof UriMediaItem) {
            Uri uri = ((UriMediaItem) mediaItem).getUri();
            // Save file name as title since the file may not have a title Metadata.
            if (UriUtil.isFromNetwork(uri)) {
                path = uri.getPath();
            } else if ("file".equals(uri.getScheme())) {
                path = uri.getLastPathSegment();
            } else {
            // TODO: needs default title. b/120515913
            }
            retriever = new MediaMetadataRetriever();
            retriever.setDataSource(getContext(), uri);
        } else if (mediaItem instanceof FileMediaItem) {
            retriever = new MediaMetadataRetriever();
            retriever.setDataSource(((FileMediaItem) mediaItem).getParcelFileDescriptor().getFileDescriptor(), ((FileMediaItem) mediaItem).getFileDescriptorOffset(), ((FileMediaItem) mediaItem).getFileDescriptorLength());
        }
    } catch (IllegalArgumentException e) {
        Log.v(TAG, "Cannot retrieve metadata for this media file.");
        retriever = null;
    }
    MediaMetadata metadata = mediaItem.getMetadata();
    // Do not extract metadata of a media item which is not the current item.
    if (mediaItem != mMediaItem) {
        if (retriever != null) {
            retriever.release();
        }
        return null;
    }
    if (!isMusic) {
        mTitle = extractString(metadata, MediaMetadata.METADATA_KEY_TITLE, retriever, MediaMetadataRetriever.METADATA_KEY_TITLE, path);
    } else {
        Resources resources = getResources();
        mTitle = extractString(metadata, MediaMetadata.METADATA_KEY_TITLE, retriever, MediaMetadataRetriever.METADATA_KEY_TITLE, resources.getString(R.string.mcv2_music_title_unknown_text));
        mMusicArtistText = extractString(metadata, MediaMetadata.METADATA_KEY_ARTIST, retriever, MediaMetadataRetriever.METADATA_KEY_ARTIST, resources.getString(R.string.mcv2_music_artist_unknown_text));
        mMusicAlbumDrawable = extractAlbumArt(metadata, retriever, resources.getDrawable(R.drawable.ic_default_album_image));
    }
    if (retriever != null) {
        retriever.release();
    }
    // Set duration and title values as MediaMetadata for MediaControlView
    MediaMetadata.Builder builder = new MediaMetadata.Builder();
    if (isMusic) {
        builder.putString(MediaMetadata.METADATA_KEY_ARTIST, mMusicArtistText);
    }
    builder.putString(MediaMetadata.METADATA_KEY_TITLE, mTitle);
    builder.putLong(MediaMetadata.METADATA_KEY_DURATION, mMediaSession.getPlayer().getDuration());
    builder.putString(MediaMetadata.METADATA_KEY_MEDIA_ID, mediaItem.getMediaId());
    builder.putLong(MediaMetadata.METADATA_KEY_PLAYABLE, 1);
    return builder.build();
}
#method_after
@SuppressLint("RestrictedApi")
MediaMetadata extractMetadata(MediaItem mediaItem, boolean isMusic) {
    MediaMetadataRetriever retriever = null;
    String path = "";
    try {
        if (mediaItem == null) {
            return null;
        } else if (mediaItem instanceof UriMediaItem) {
            Uri uri = ((UriMediaItem) mediaItem).getUri();
            // Save file name as title since the file may not have a title Metadata.
            if (UriUtil.isFromNetwork(uri)) {
                path = uri.getPath();
            } else if ("file".equals(uri.getScheme())) {
                path = uri.getLastPathSegment();
            } else {
            // TODO: needs default title. b/120515913
            }
            retriever = new MediaMetadataRetriever();
            retriever.setDataSource(mContext, uri);
        } else if (mediaItem instanceof FileMediaItem) {
            retriever = new MediaMetadataRetriever();
            retriever.setDataSource(((FileMediaItem) mediaItem).getParcelFileDescriptor().getFileDescriptor(), ((FileMediaItem) mediaItem).getFileDescriptorOffset(), ((FileMediaItem) mediaItem).getFileDescriptorLength());
        }
    } catch (IllegalArgumentException e) {
        Log.v(TAG, "Cannot retrieve metadata for this media file.");
        retriever = null;
    }
    MediaMetadata metadata = mediaItem.getMetadata();
    // Do not extract metadata of a media item which is not the current item.
    if (mediaItem != mMediaItem) {
        if (retriever != null) {
            retriever.release();
        }
        return null;
    }
    if (!isMusic) {
        mTitle = extractString(metadata, MediaMetadata.METADATA_KEY_TITLE, retriever, MediaMetadataRetriever.METADATA_KEY_TITLE, path);
    } else {
        Resources resources = getResources();
        mTitle = extractString(metadata, MediaMetadata.METADATA_KEY_TITLE, retriever, MediaMetadataRetriever.METADATA_KEY_TITLE, resources.getString(R.string.mcv2_music_title_unknown_text));
        mMusicArtistText = extractString(metadata, MediaMetadata.METADATA_KEY_ARTIST, retriever, MediaMetadataRetriever.METADATA_KEY_ARTIST, resources.getString(R.string.mcv2_music_artist_unknown_text));
        mMusicAlbumDrawable = extractAlbumArt(metadata, retriever, resources.getDrawable(R.drawable.ic_default_album_image));
    }
    if (retriever != null) {
        retriever.release();
    }
    // Set duration and title values as MediaMetadata for MediaControlView
    MediaMetadata.Builder builder = new MediaMetadata.Builder();
    if (isMusic) {
        builder.putString(MediaMetadata.METADATA_KEY_ARTIST, mMusicArtistText);
    }
    builder.putString(MediaMetadata.METADATA_KEY_TITLE, mTitle);
    builder.putLong(MediaMetadata.METADATA_KEY_DURATION, mMediaSession.getPlayer().getDuration());
    builder.putString(MediaMetadata.METADATA_KEY_MEDIA_ID, mediaItem.getMediaId());
    builder.putLong(MediaMetadata.METADATA_KEY_PLAYABLE, 1);
    return builder.build();
}
#end_block

#method_before
private boolean requestConnectToService() {
    // Service. Needs to get fresh binder whenever connection is needed.
    final Intent intent = new Intent(MediaSessionService.SERVICE_INTERFACE);
    intent.setClassName(mToken.getPackageName(), mToken.getServiceName());
    // and using bindService() will be better fit with it.
    synchronized (mLock) {
        boolean result = mContext.bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);
        if (!result) {
            Log.w(TAG, "bind to " + mToken + " failed");
            return false;
        } else if (DEBUG) {
            Log.d(TAG, "bind to " + mToken + " succeeded");
        }
    }
    return true;
}
#method_after
private boolean requestConnectToService() {
    // Service. Needs to get fresh binder whenever connection is needed.
    final Intent intent = new Intent(MediaSessionService.SERVICE_INTERFACE);
    intent.setClassName(mToken.getPackageName(), mToken.getServiceName());
    // and using bindService() will be better fit with it.
    synchronized (mLock) {
        boolean result = mContext.bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);
        if (!result) {
            Log.w(TAG, "bind to " + mToken + " failed");
            return false;
        }
    }
    if (DEBUG) {
        Log.d(TAG, "bind to " + mToken + " succeeded");
    }
    return true;
}
#end_block

#method_before
@Override
public void onServiceConnected(ComponentName name, IBinder service) {
    boolean connectionRequested = false;
    try {
        // Note that it's always main-thread.
        if (DEBUG) {
            Log.d(TAG, "onServiceConnected " + name + " " + this);
        }
        // Sanity check
        if (!mToken.getPackageName().equals(name.getPackageName())) {
            Log.wtf(TAG, "Expected connection to " + mToken.getPackageName() + " but is" + " connected to " + name);
            return;
        }
        IMediaSessionService iService = IMediaSessionService.Stub.asInterface(service);
        if (iService == null) {
            Log.wtf(TAG, "Service interface is missing.");
            return;
        }
        ConnectionRequest request = new ConnectionRequest(getContext().getPackageName(), Process.myPid());
        iService.connect(mControllerStub, MediaUtils.toParcelable(request));
    } catch (RemoteException e) {
        Log.w(TAG, "Service " + name + " has died prematurely");
    } finally {
        if (!connectionRequested) {
            mInstance.close();
        }
    }
}
#method_after
@Override
public void onServiceConnected(ComponentName name, IBinder service) {
    boolean connectionRequested = false;
    try {
        // Note that it's always main-thread.
        if (DEBUG) {
            Log.d(TAG, "onServiceConnected " + name + " " + this);
        }
        // Sanity check
        if (!mToken.getPackageName().equals(name.getPackageName())) {
            Log.wtf(TAG, "Expected connection to " + mToken.getPackageName() + " but is" + " connected to " + name);
            return;
        }
        IMediaSessionService iService = IMediaSessionService.Stub.asInterface(service);
        if (iService == null) {
            Log.wtf(TAG, "Service interface is missing.");
            return;
        }
        ConnectionRequest request = new ConnectionRequest(getContext().getPackageName(), Process.myPid());
        iService.connect(mControllerStub, MediaUtils.toParcelable(request));
        connectionRequested = true;
    } catch (RemoteException e) {
        Log.w(TAG, "Service " + name + " has died prematurely");
    } finally {
        if (!connectionRequested) {
            mInstance.close();
        }
    }
}
#end_block

#method_before
@Override
public void onServiceDisconnected(ComponentName name) {
    // rebind, but we'd better to close() here. Otherwise
    if (DEBUG) {
        Log.w(TAG, "Session service " + name + " is disconnected.");
    }
    mInstance.close();
}
#method_after
@Override
public void onServiceDisconnected(ComponentName name) {
    // different session everytime.
    if (DEBUG) {
        Log.w(TAG, "Session service " + name + " is disconnected.");
    }
    mInstance.close();
}
#end_block

#method_before
@Test
public void testShowOverflowMenu() throws Throwable {
    String overflowItemText = "overflow_item_text";
    CarMenuItem overflowItem = new CarMenuItem.Builder().setDisplayBehavior(// Overflow menu item
    CarMenuItem.DisplayBehavior.NEVER).setTitle(overflowItemText).build();
    mActivityRule.runOnUiThread(() -> {
        mToolbar.setMenuItems(Collections.singletonList(overflowItem));
        mToolbar.showOverflowMenu();
    });
    onView(withText(overflowItemText)).inRoot(isDialog()).check(matches(isDisplayed()));
}
#method_after
@Test
public void testShowOverflowMenu() throws Throwable {
    String overflowItemText = "overflow_item_text";
    CarMenuItem overflowItem = new CarMenuItem.Builder().setDisplayBehavior(// Overflow menu item
    CarMenuItem.DisplayBehavior.NEVER).setTitle(overflowItemText).build();
    mActivityRule.runOnUiThread(() -> mToolbar.setMenuItems(Collections.singletonList(overflowItem)));
    // Since overflow items are set in onMeasure, need to wait for the views to be laid out.
    InstrumentationRegistry.getInstrumentation().waitForIdleSync();
    mActivityRule.runOnUiThread(() -> mToolbar.showOverflowMenu());
    onView(withText(overflowItemText)).inRoot(isDialog()).check(matches(isDisplayed()));
}
#end_block

#method_before
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    // Desired height should be the height constraint for all child views.
    int desiredHeight = getPaddingTop() + getSuggestedMinimumHeight() + getPaddingBottom();
    int childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(desiredHeight, MeasureSpec.AT_MOST);
    int width = 0;
    // display priority than the title, subtitle, or the titleIcon.
    if (mNavButtonView.getVisibility() != GONE) {
        // Size of nav button is fixed.
        int measureSpec = MeasureSpec.makeMeasureSpec(mEdgeButtonIconSize, MeasureSpec.EXACTLY);
        mNavButtonView.measure(measureSpec, measureSpec);
        // Nav button width includes its container.
        int navWidth = Math.max(mEdgeButtonContainerWidth, mNavButtonView.getMeasuredWidth());
        width += navWidth + getHorizontalMargins(mNavButtonView);
    }
    if (mOverflowButtonView.getVisibility() != GONE) {
        int measureSpec = MeasureSpec.makeMeasureSpec(mEdgeButtonIconSize, MeasureSpec.EXACTLY);
        mOverflowButtonView.measure(measureSpec, measureSpec);
        width += Math.max(mEdgeButtonContainerWidth, mOverflowButtonView.getMeasuredWidth()) + getHorizontalMargins(mOverflowButtonView);
    }
    for (View view : mActionViews) {
        measureChild(view, widthMeasureSpec, width, childHeightMeasureSpec, 0);
        width += view.getMeasuredWidth() + getHorizontalMargins(view);
    }
    if (mTitleIconView.getVisibility() != GONE) {
        int measureSpec = MeasureSpec.makeMeasureSpec(mTitleIconSize, MeasureSpec.EXACTLY);
        mTitleIconView.measure(measureSpec, measureSpec);
        width += mTitleIconView.getMeasuredWidth() + getHorizontalMargins(mTitleIconView);
    }
    int titleLength = 0;
    int subtitleLength = 0;
    if (mTitleTextView.getVisibility() != GONE) {
        measureChild(mTitleTextView, widthMeasureSpec, width, childHeightMeasureSpec, 0);
        titleLength = mTitleTextView.getMeasuredWidth() + getHorizontalMargins(mTitleTextView);
    }
    if (mSubtitleTextView.getVisibility() != GONE) {
        measureChild(mSubtitleTextView, widthMeasureSpec, width, childHeightMeasureSpec, 0);
        subtitleLength = mSubtitleTextView.getMeasuredWidth() + getHorizontalMargins(mSubtitleTextView);
    }
    width += Math.max(titleLength, subtitleLength);
    setMeasuredDimension(resolveSize(width, widthMeasureSpec), resolveSize(desiredHeight, heightMeasureSpec));
}
#method_after
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    // Desired height should be the height constraint for all child views.
    int desiredHeight = getPaddingTop() + getSuggestedMinimumHeight() + getPaddingBottom();
    int childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(desiredHeight, MeasureSpec.AT_MOST);
    int width = 0;
    // display priority than the title, subtitle, or the titleIcon.
    if (mNavButtonView.getVisibility() != GONE) {
        // Size of nav button is fixed.
        int measureSpec = MeasureSpec.makeMeasureSpec(mEdgeButtonIconSize, MeasureSpec.EXACTLY);
        mNavButtonView.measure(measureSpec, measureSpec);
        // Nav button width includes its container.
        int navWidth = Math.max(mEdgeButtonContainerWidth, mNavButtonView.getMeasuredWidth());
        width += navWidth + getHorizontalMargins(mNavButtonView);
    }
    mToolbarItems.forEach(this::removeView);
    mToolbarItems.clear();
    mOverflowMenuItems.clear();
    // Measure items that will always be shown on the toolbar.
    int alwaysItemsWidth = measureAlwaysItems(width, widthMeasureSpec, childHeightMeasureSpec);
    width += alwaysItemsWidth;
    // Decide how many IF_ROOM items to show, and measure them.
    width += measureIfRoomItems(width, alwaysItemsWidth, widthMeasureSpec, childHeightMeasureSpec);
    // Done post measurement to ensure the order in the two lists matches the passed-in items.
    for (InflatedMenuItem inflatedItem : mAllMenuItems) {
        if (inflatedItem.mIsDisplayedOnToolbar) {
            mToolbarItems.add(inflatedItem.mView);
        } else {
            mOverflowMenuItems.add(inflatedItem.mItem);
        }
    }
    // Show the overflow menu button if there are any overflow menu items.
    mOverflowButtonView.setVisibility(mOverflowMenuItems.isEmpty() ? GONE : VISIBLE);
    if (mOverflowButtonView.getVisibility() != GONE) {
        int measureSpec = MeasureSpec.makeMeasureSpec(mEdgeButtonIconSize, MeasureSpec.EXACTLY);
        mOverflowButtonView.measure(measureSpec, measureSpec);
        width += Math.max(mEdgeButtonContainerWidth, mOverflowButtonView.getMeasuredWidth()) + getHorizontalMargins(mOverflowButtonView);
    }
    if (mTitleIconView.getVisibility() != GONE) {
        int measureSpec = MeasureSpec.makeMeasureSpec(mTitleIconSize, MeasureSpec.EXACTLY);
        mTitleIconView.measure(measureSpec, measureSpec);
        width += mTitleIconView.getMeasuredWidth() + getHorizontalMargins(mTitleIconView);
    }
    int titleLength = 0;
    int subtitleLength = 0;
    if (mTitleTextView.getVisibility() != GONE) {
        measureChild(mTitleTextView, widthMeasureSpec, width, childHeightMeasureSpec, 0);
        titleLength = mTitleTextView.getMeasuredWidth() + getHorizontalMargins(mTitleTextView);
    }
    if (mSubtitleTextView.getVisibility() != GONE) {
        measureChild(mSubtitleTextView, widthMeasureSpec, width, childHeightMeasureSpec, 0);
        subtitleLength = mSubtitleTextView.getMeasuredWidth() + getHorizontalMargins(mSubtitleTextView);
    }
    width += Math.max(titleLength, subtitleLength);
    setMeasuredDimension(resolveSize(width, widthMeasureSpec), resolveSize(desiredHeight, heightMeasureSpec));
}
#end_block

#method_before
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    int height = bottom - top;
    int layoutLeft = getPaddingLeft();
    int layoutRight = getPaddingRight();
    if (mNavButtonView.getVisibility() != GONE) {
        // Nav button is centered in container.
        int navButtonWidth = mNavButtonView.getMeasuredWidth();
        int containerWidth = Math.max(mEdgeButtonContainerWidth, navButtonWidth);
        int navButtonLeft = (containerWidth - navButtonWidth) / 2;
        layoutViewFromLeftVerticallyCentered(mNavButtonView, navButtonLeft, height);
        layoutLeft += containerWidth;
    }
    if (mOverflowButtonView.getVisibility() != GONE) {
        int horizontalMargin = (mEdgeButtonContainerWidth - mOverflowButtonView.getMeasuredWidth()) / 2;
        layoutViewFromRightVerticallyCentered(mOverflowButtonView, right - horizontalMargin, height);
        layoutRight += Math.max(mEdgeButtonContainerWidth, mOverflowButtonView.getMeasuredWidth());
    }
    for (View view : mActionViews) {
        layoutViewFromRightVerticallyCentered(view, right - layoutRight, height);
        layoutRight += view.getMeasuredWidth();
    }
    if (mTitleIconView.getVisibility() != GONE) {
        MarginLayoutParams marginParams = (MarginLayoutParams) mTitleIconView.getLayoutParams();
        layoutLeft += marginParams.getMarginStart();
        layoutViewFromLeftVerticallyCentered(mTitleIconView, layoutLeft, height);
        layoutLeft += mTitleIconView.getMeasuredWidth() + marginParams.getMarginEnd();
    }
    if (mTitleTextView.getVisibility() != GONE && mSubtitleTextView.getVisibility() != GONE) {
        layoutTextViewsVerticallyCentered(mTitleTextView, mSubtitleTextView, layoutLeft, height);
    } else if (mTitleTextView.getVisibility() != GONE) {
        layoutViewFromLeftVerticallyCentered(mTitleTextView, layoutLeft, height);
    } else if (mSubtitleTextView.getVisibility() != GONE) {
        layoutViewFromLeftVerticallyCentered(mSubtitleTextView, layoutLeft, height);
    }
}
#method_after
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    int height = bottom - top;
    int layoutLeft = getPaddingLeft();
    int layoutRight = getPaddingRight();
    if (mNavButtonView.getVisibility() != GONE) {
        // Nav button is centered in container.
        int navButtonWidth = mNavButtonView.getMeasuredWidth();
        int containerWidth = Math.max(mEdgeButtonContainerWidth, navButtonWidth);
        int navButtonLeft = (containerWidth - navButtonWidth) / 2;
        layoutViewFromLeftVerticallyCentered(mNavButtonView, navButtonLeft, height);
        layoutLeft += containerWidth;
    }
    if (mOverflowButtonView.getVisibility() != GONE) {
        int horizontalMargin = (mEdgeButtonContainerWidth - mOverflowButtonView.getMeasuredWidth()) / 2;
        layoutViewFromRightVerticallyCentered(mOverflowButtonView, right - horizontalMargin, height);
        layoutRight += Math.max(mEdgeButtonContainerWidth, mOverflowButtonView.getMeasuredWidth());
    }
    for (View view : mToolbarItems) {
        layoutViewFromRightVerticallyCentered(view, right - layoutRight, height);
        layoutRight += view.getMeasuredWidth();
    }
    if (mTitleIconView.getVisibility() != GONE) {
        MarginLayoutParams marginParams = (MarginLayoutParams) mTitleIconView.getLayoutParams();
        layoutLeft += marginParams.getMarginStart();
        layoutViewFromLeftVerticallyCentered(mTitleIconView, layoutLeft, height);
        layoutLeft += mTitleIconView.getMeasuredWidth() + marginParams.getMarginEnd();
    }
    if (mTitleTextView.getVisibility() != GONE && mSubtitleTextView.getVisibility() != GONE) {
        layoutTextViewsVerticallyCentered(mTitleTextView, mSubtitleTextView, layoutLeft, height);
    } else if (mTitleTextView.getVisibility() != GONE) {
        layoutViewFromLeftVerticallyCentered(mTitleTextView, layoutLeft, height);
    } else if (mSubtitleTextView.getVisibility() != GONE) {
        layoutViewFromLeftVerticallyCentered(mSubtitleTextView, layoutLeft, height);
    }
}
#end_block

#method_before
public void setMenuItems(@Nullable List<CarMenuItem> items) {
    mMenuItems = items;
    mOverflowMenuItems.clear();
    // Remove all old action views from the Layout then the list.
    mActionViews.forEach(this::removeView);
    mActionViews.clear();
    List<CarMenuItem> actionItems = new ArrayList<>();
    List<CarMenuItem> ifRoomItems = new ArrayList<>();
    if (mMenuItems != null) {
        for (CarMenuItem item : mMenuItems) {
            if (item.getDisplayBehavior() == CarMenuItem.DisplayBehavior.ALWAYS) {
                actionItems.add(item);
            } else if (item.getDisplayBehavior() == CarMenuItem.DisplayBehavior.IF_ROOM) {
                ifRoomItems.add(item);
            } else {
                // Treat If-Room items as overflow until that behavior is supported.
                mOverflowMenuItems.add(item);
            }
        }
    }
    // Process IF_ROOM items afterwards to prioritize displaying ALWAYS items.
    for (CarMenuItem item : ifRoomItems) {
        // Checkable items are not supported in the overflow menu yet.
        if (item.isCheckable() || actionItems.size() < RECOMMENDED_ACTION_ITEM_LIMIT) {
            actionItems.add(item);
        } else {
            // If the IF_ROOM item is being pushed to the overflow menu, add it to the front.
            mOverflowMenuItems.add(0, item);
        }
    }
    // Show the overflow menu button if there are any overflow menu items.
    mOverflowButtonView.setVisibility(mOverflowMenuItems.isEmpty() ? GONE : VISIBLE);
    for (CarMenuItem item : actionItems) {
        View action = item.isCheckable() ? createCheckableAction(item) : createAction(item);
        MarginLayoutParams marginLayoutParams = new MarginLayoutParams(LayoutParams.WRAP_CONTENT, mActionButtonHeight);
        action.setLayoutParams(marginLayoutParams);
        mActionViews.add(action);
        addView(action);
    }
    requestLayout();
}
#method_after
public void setMenuItems(@Nullable List<CarMenuItem> items) {
    mMenuItems = items;
    mAllMenuItems.clear();
    mAlwaysItemCount = 0;
    if (mMenuItems == null) {
        requestLayout();
        return;
    }
    // Create Views for all ALWAYS and IF_ROOM items.
    for (CarMenuItem item : mMenuItems) {
        View action;
        switch(item.getDisplayBehavior()) {
            case ALWAYS:
                mAlwaysItemCount++;
            // Fall-through
            case IF_ROOM:
                action = item.isCheckable() ? createCheckableAction(item) : createAction(item);
                break;
            case NEVER:
                action = null;
                break;
            default:
                throw new IllegalStateException("Unknown display behavior: " + item.getDisplayBehavior());
        }
        mAllMenuItems.add(new InflatedMenuItem(item, action));
    }
    requestLayout();
}
#end_block

#method_before
private Button createAction(CarMenuItem item) {
    Context context = getContext();
    Button button = new Button(context, null, 0, item.getStyleResId());
    CharSequence title = item.getTitle();
    button.setText(title);
    if (item.getIcon() != null) {
        Drawable icon = item.getIcon().loadDrawable(context);
        icon.setBounds(0, 0, mActionButtonIconBound, mActionButtonIconBound);
        // Set the Drawable on the left side.
        button.setCompoundDrawables(icon, null, null, null);
        if (!TextUtils.isEmpty(title)) {
            // Add padding after the icon only if there's a title.
            button.setCompoundDrawablePadding(mActionButtonPadding);
        }
    }
    button.setEnabled(item.isEnabled());
    button.setOnClickListener(v -> {
        CarMenuItem.OnClickListener onClickListener = item.getOnClickListener();
        if (onClickListener != null) {
            onClickListener.onClick(item);
        }
    });
    return button;
}
#method_after
private Button createAction(CarMenuItem item) {
    Context context = getContext();
    Button button = new Button(context, null, 0, item.getStyleResId());
    button.setLayoutParams(new MarginLayoutParams(LayoutParams.WRAP_CONTENT, mActionButtonHeight));
    CharSequence title = item.getTitle();
    button.setText(title);
    if (item.getIcon() != null) {
        Drawable icon = item.getIcon().loadDrawable(context);
        icon.setBounds(0, 0, mActionButtonIconBound, mActionButtonIconBound);
        // Set the Drawable on the left side.
        button.setCompoundDrawables(icon, null, null, null);
        if (!TextUtils.isEmpty(title)) {
            // Add padding after the icon only if there's a title.
            button.setCompoundDrawablePadding(mActionButtonPadding);
        }
    }
    button.setEnabled(item.isEnabled());
    button.setOnClickListener(v -> {
        CarMenuItem.OnClickListener onClickListener = item.getOnClickListener();
        if (onClickListener != null) {
            onClickListener.onClick(item);
        }
    });
    return button;
}
#end_block

#method_before
private void populateOverflowMenu() {
    if (mOverflowMenuItems == null || mOverflowMenuItems.isEmpty()) {
        mOverflowDialog = null;
        return;
    }
    CharSequence[] titles = mOverflowMenuItems.stream().map(CarMenuItem::getTitle).toArray(CharSequence[]::new);
    mOverflowDialog = new CarListDialog.Builder(getContext()).setItems(titles, mOverflowDialogClickListener).create();
}
#method_after
private void populateOverflowMenu() {
    if (mOverflowMenuItems.isEmpty()) {
        mOverflowDialog = null;
        return;
    }
    CharSequence[] titles = mOverflowMenuItems.stream().map(CarMenuItem::getTitle).toArray(CharSequence[]::new);
    mOverflowDialog = new CarListDialog.Builder(getContext()).setItems(titles, mOverflowDialogClickListener).create();
}
#end_block

#method_before
@Test
public void test_fallbackCurrencySymbolForUnknownLocale() {
    Currency c = Currency.getInstance("XXX");
    assertNotNull(c);
    assertEquals("¤", c.getSymbol());
}
#method_after
@Test
public void test_fallbackCurrencySymbolForUnknownLocale() {
    // "¤"
    final String unknownCurrencySymbol = "\u00a4";
    Currency c = Currency.getInstance("XXX");
    assertNotNull(c);
    assertEquals(unknownCurrencySymbol, c.getSymbol(Locale.ROOT));
    android.icu.util.Currency ac = android.icu.util.Currency.getInstance("XXX");
    assertNotNull(ac);
    assertEquals(unknownCurrencySymbol, ac.getSymbol(android.icu.util.ULocale.ROOT));
}
#end_block

#method_before
private void postDelayedRunnable(Runnable runnable, long interval) {
    if (interval != DISABLE_DELAYED_ANIMATION) {
        postDelayed(runnable, interval);
    }
}
#method_after
void postDelayedRunnable(Runnable runnable, long interval) {
    if (interval != DISABLE_DELAYED_ANIMATION) {
        postDelayed(runnable, interval);
    }
}
#end_block

#method_before
private void onGraphCreated(@Nullable Bundle startDestinationArgs) {
    if (mNavigatorStateToRestore != null) {
        ArrayList<String> navigatorNames = mNavigatorStateToRestore.getStringArrayList(KEY_NAVIGATOR_STATE_NAMES);
        if (navigatorNames != null) {
            for (String name : navigatorNames) {
                Navigator navigator = mNavigatorProvider.getNavigator(name);
                Bundle bundle = mNavigatorStateToRestore.getBundle(name);
                if (bundle != null) {
                    bundle.setClassLoader(mContext.getClassLoader());
                    navigator.onRestoreState(bundle);
                }
            }
        }
    }
    if (mBackStackIdsToRestore != null) {
        for (int index = 0; index < mBackStackIdsToRestore.length; index++) {
            int destinationId = mBackStackIdsToRestore[index];
            Bundle args = (Bundle) mBackStackArgsToRestore[index];
            NavDestination node = findDestination(destinationId);
            if (node == null) {
                throw new IllegalStateException("unknown destination during restore: " + mContext.getResources().getResourceName(destinationId));
            }
            if (args != null) {
                args.setClassLoader(mContext.getClassLoader());
            }
            mBackStack.add(new NavBackStackEntry(node, args));
        }
        mBackStackIdsToRestore = null;
        mBackStackArgsToRestore = null;
    }
    if (mGraph != null && mBackStack.isEmpty()) {
        boolean deepLinked = mActivity != null && handleDeepLink(mActivity.getIntent());
        if (!deepLinked) {
            // Navigate to the first destination in the graph
            // if we haven't deep linked to a destination
            navigate(mGraph, startDestinationArgs, null, null);
        }
    }
}
#method_after
private void onGraphCreated(@Nullable Bundle startDestinationArgs) {
    if (mNavigatorStateToRestore != null) {
        ArrayList<String> navigatorNames = mNavigatorStateToRestore.getStringArrayList(KEY_NAVIGATOR_STATE_NAMES);
        if (navigatorNames != null) {
            for (String name : navigatorNames) {
                Navigator navigator = mNavigatorProvider.getNavigator(name);
                Bundle bundle = mNavigatorStateToRestore.getBundle(name);
                if (bundle != null) {
                    navigator.onRestoreState(bundle);
                }
            }
        }
    }
    if (mBackStackIdsToRestore != null) {
        for (int index = 0; index < mBackStackIdsToRestore.length; index++) {
            int destinationId = mBackStackIdsToRestore[index];
            Bundle args = (Bundle) mBackStackArgsToRestore[index];
            NavDestination node = findDestination(destinationId);
            if (node == null) {
                throw new IllegalStateException("unknown destination during restore: " + mContext.getResources().getResourceName(destinationId));
            }
            if (args != null) {
                args.setClassLoader(mContext.getClassLoader());
            }
            mBackStack.add(new NavBackStackEntry(node, args));
        }
        mBackStackIdsToRestore = null;
        mBackStackArgsToRestore = null;
    }
    if (mGraph != null && mBackStack.isEmpty()) {
        boolean deepLinked = mActivity != null && handleDeepLink(mActivity.getIntent());
        if (!deepLinked) {
            // Navigate to the first destination in the graph
            // if we haven't deep linked to a destination
            navigate(mGraph, startDestinationArgs, null, null);
        }
    }
}
#end_block

#method_before
private DeviceEvent getEventFromFree(IManagedTestDevice managedDevice, FreeDeviceState deviceState) {
    switch(deviceState) {
        case UNRESPONSIVE:
            return DeviceEvent.FREE_UNRESPONSIVE;
        case AVAILABLE:
            return DeviceEvent.FREE_AVAILABLE;
        case UNAVAILABLE:
            // connection is gone.
            if (TestDeviceState.NOT_AVAILABLE.equals(managedDevice.getDeviceState())) {
                String devices = executeGlobalAdbCommand("devices");
                Pattern p = Pattern.compile(String.format("\\b%s\\b", managedDevice.getSerialNumber()));
                if (devices == null || !p.matcher(devices).find()) {
                    return DeviceEvent.FREE_UNKNOWN;
                }
            }
            return DeviceEvent.FREE_UNAVAILABLE;
        case IGNORE:
            return DeviceEvent.FREE_UNKNOWN;
    }
    throw new IllegalStateException("unknown FreeDeviceState");
}
#method_after
private DeviceEvent getEventFromFree(IManagedTestDevice managedDevice, FreeDeviceState deviceState) {
    switch(deviceState) {
        case UNRESPONSIVE:
            return DeviceEvent.FREE_UNRESPONSIVE;
        case AVAILABLE:
            return DeviceEvent.FREE_AVAILABLE;
        case UNAVAILABLE:
            // connection is gone.
            if (TestDeviceState.NOT_AVAILABLE.equals(managedDevice.getDeviceState())) {
                String devices = executeGlobalAdbCommand("devices");
                Pattern p = Pattern.compile(String.format(DEVICE_LIST_PATTERN, managedDevice.getSerialNumber()));
                if (devices == null || !p.matcher(devices).find()) {
                    return DeviceEvent.FREE_UNKNOWN;
                }
            }
            return DeviceEvent.FREE_UNAVAILABLE;
        case IGNORE:
            return DeviceEvent.FREE_UNKNOWN;
    }
    throw new IllegalStateException("unknown FreeDeviceState");
}
#end_block

#method_before
@Override
public void recoverDevices(List<IManagedTestDevice> devices) {
    if (mDisable) {
        // Skip device recovery
        return;
    }
    try (UsbHelper usb = getUsbHelper()) {
        // Find USB-connected Android devices
        Set<String> deviceSerials = usb.getSerialNumbers(/* AOAv2-compatible */
        true);
        // Find devices currently in fastboot
        FastbootHelper fastboot = getFastbootHelper();
        Set<String> fastbootSerials = fastboot.getDevices();
        deviceSerials.addAll(fastbootSerials);
        // Filter out managed devices in a valid state
        for (IManagedTestDevice device : devices) {
            if (!shouldReset(device, fastbootSerials)) {
                deviceSerials.remove(device.getSerialNumber());
            }
        }
        // Perform a USB port reset on the remaining devices
        for (String serial : deviceSerials) {
            try (UsbDevice device = usb.getDevice(serial)) {
                if (device != null) {
                    CLog.d("Resetting USB port for device '%s'", serial);
                    device.reset();
                } else {
                    CLog.w("Device '%s' not found during USB reset.", serial);
                }
            }
        }
    } catch (UsbException e) {
        CLog.w("Failed to reset USB ports.");
        CLog.e(e);
    }
}
#method_after
@Override
public void recoverDevices(List<IManagedTestDevice> devices) {
    if (mDisable) {
        // Skip device recovery
        return;
    }
    Map<String, IManagedTestDevice> managedDeviceMap = Maps.uniqueIndex(devices, INativeDevice::getSerialNumber);
    try (UsbHelper usb = getUsbHelper()) {
        // Find USB-connected Android devices, using AOA compatibility to differentiate between
        // Android and non-Android devices (supported in 4.1+)
        Set<String> deviceSerials = usb.getSerialNumbers(/* AOAv2-compatible */
        true);
        // Find devices currently in fastboot
        FastbootHelper fastboot = getFastbootHelper();
        Set<String> fastbootSerials = fastboot.getDevices();
        // AOA check fails on Fastboot devices, so add them to the set of connected devices
        deviceSerials.addAll(fastbootSerials);
        // Filter out managed devices in a valid state
        for (IManagedTestDevice device : devices) {
            if (!shouldReset(device)) {
                deviceSerials.remove(device.getSerialNumber());
            }
        }
        // Perform a USB port reset on the remaining devices
        for (String serial : deviceSerials) {
            try (UsbDevice device = usb.getDevice(serial)) {
                if (device == null) {
                    CLog.w("Device '%s' not found during USB reset.", serial);
                    continue;
                }
                CLog.d("Resetting USB port for device '%s'", serial);
                device.reset();
                // If device was managed, attempt to reboot it
                if (managedDeviceMap.containsKey(serial)) {
                    tryReboot(managedDeviceMap.get(serial));
                }
            }
        }
    } catch (UsbException e) {
        CLog.w("Failed to reset USB ports.");
        CLog.e(e);
    }
}
#end_block

#method_before
private boolean shouldReset(IManagedTestDevice device, Set<String> fastbootSerials) {
    // Skip stub devices, but make sure not to skip those in fastboot
    IDevice iDevice = device.getIDevice();
    if (iDevice instanceof StubDevice && !(iDevice instanceof DeviceManager.FastbootDevice)) {
        return false;
    }
    DeviceAllocationState state = device.getAllocationState();
    // Always reset Unknown or Unavailable devices
    return DeviceAllocationState.Unknown.equals(state) || DeviceAllocationState.Unavailable.equals(state) || // If device is in Fastboot but unallocated, this is suspicious and it is reset
    (fastbootSerials.contains(device.getSerialNumber()) && !DeviceAllocationState.Allocated.equals(state));
}
#method_after
private boolean shouldReset(IManagedTestDevice device) {
    // Skip stub devices, but make sure not to skip those in fastboot
    IDevice iDevice = device.getIDevice();
    if (iDevice instanceof StubDevice && !(iDevice instanceof DeviceManager.FastbootDevice)) {
        return false;
    }
    // Recover all devices that are neither available nor allocated
    DeviceAllocationState state = device.getAllocationState();
    return !DeviceAllocationState.Allocated.equals(state) && !DeviceAllocationState.Available.equals(state);
}
#end_block

#method_before
@Test
public void testRecover_unavailable() {
    // connected but unavailable device
    when(mUsb.getSerialNumbers(anyBoolean())).thenReturn(Sets.newHashSet(SERIAL));
    when(mDevice.getAllocationState()).thenReturn(DeviceAllocationState.Unavailable);
    mRecoverer.recoverDevices(Arrays.asList(mDevice));
    // device is in an invalid state and reset is performed
    verify(mUsb.getDevice(SERIAL), times(1)).reset();
}
#method_after
@Test
public void testRecover_unavailable() throws DeviceNotAvailableException {
    // connected but unavailable device
    when(mUsb.getSerialNumbers(anyBoolean())).thenReturn(Sets.newHashSet(SERIAL));
    when(mDevice.getAllocationState()).thenReturn(DeviceAllocationState.Unavailable);
    mRecoverer.recoverDevices(Arrays.asList(mDevice));
    // device is in an invalid state and reset/reboot is performed
    verify(mUsb.getDevice(SERIAL), times(1)).reset();
    verify(mDevice, times(1)).reboot();
}
#end_block

#method_before
@Test
public void testRecover_notManaged() {
    // connected device found, but no managed devices
    when(mUsb.getSerialNumbers(anyBoolean())).thenReturn(Sets.newHashSet(SERIAL));
    mRecoverer.recoverDevices(new ArrayList<>());
    // reset still performed on connected device
    verify(mUsb.getDevice(SERIAL), times(1)).reset();
}
#method_after
@Test
public void testRecover_notManaged() throws DeviceNotAvailableException {
    // connected device found, but no managed devices
    when(mUsb.getSerialNumbers(anyBoolean())).thenReturn(Sets.newHashSet(SERIAL));
    mRecoverer.recoverDevices(new ArrayList<>());
    // reset still performed on connected device, but no reboot
    verify(mUsb.getDevice(SERIAL), times(1)).reset();
    verify(mDevice, never()).reboot();
}
#end_block

#method_before
@Test
public void testRecover_notConnected() {
    // no connected devices found, but one managed device in an unknown state
    when(mUsb.getSerialNumbers(anyBoolean())).thenReturn(new HashSet<>());
    when(mDevice.getAllocationState()).thenReturn(DeviceAllocationState.Unknown);
    mRecoverer.recoverDevices(Arrays.asList(mDevice));
    // device not found and not recovered
    verify(mUsb.getDevice(SERIAL), never()).reset();
}
#method_after
@Test
public void testRecover_notConnected() throws DeviceNotAvailableException {
    // no connected devices found, but one managed device in an unknown state
    when(mUsb.getSerialNumbers(anyBoolean())).thenReturn(new HashSet<>());
    when(mDevice.getAllocationState()).thenReturn(DeviceAllocationState.Unknown);
    mRecoverer.recoverDevices(Arrays.asList(mDevice));
    // device not found and not recovered
    verify(mUsb.getDevice(SERIAL), never()).reset();
    verify(mDevice, never()).reboot();
}
#end_block

#method_before
@Override
@SuppressWarnings("RestrictedApi")
protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    mSavedStateRegistry.performRestore(savedInstanceState);
    ReportFragment.injectIfNeededIn(this);
    Integer layoutId = sAnnotationIds.get(getClass());
    if (layoutId == null) {
        ContentView annotation = getClass().getAnnotation(ContentView.class);
        if (annotation != null) {
            layoutId = annotation.value();
            sAnnotationIds.put(getClass(), layoutId);
        }
    }
    if (layoutId != null && layoutId != 0) {
        setContentView(layoutId);
    }
}
#method_after
@Override
@SuppressWarnings("RestrictedApi")
protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    mSavedStateRegistry.performRestore(savedInstanceState);
    ReportFragment.injectIfNeededIn(this);
    Class<? extends ComponentActivity> clazz = getClass();
    if (!sAnnotationIds.containsKey(clazz)) {
        ContentView annotation = clazz.getAnnotation(ContentView.class);
        if (annotation != null) {
            sAnnotationIds.put(clazz, annotation.value());
        } else {
            sAnnotationIds.put(clazz, null);
        }
    }
    Integer layoutId = sAnnotationIds.get(clazz);
    if (layoutId != null && layoutId != 0) {
        setContentView(layoutId);
    }
}
#end_block

#method_before
private void refreshUi() {
    try {
        mActivityRule.runOnUiThread(() -> {
            mAdapter.notifyDataSetChanged();
        });
    } catch (Throwable throwable) {
        throwable.printStackTrace();
        throw new RuntimeException(throwable);
    }
    InstrumentationRegistry.getInstrumentation().waitForIdleSync();
}
#method_after
private void refreshUi() {
    try {
        mActivityRule.runOnUiThread(() -> mAdapter.notifyDataSetChanged());
    } catch (Throwable throwable) {
        throwable.printStackTrace();
        throw new RuntimeException(throwable);
    }
    InstrumentationRegistry.getInstrumentation().waitForIdleSync();
}
#end_block

#method_before
private void setupPagedListView(List<SwitchListItem> items) {
    ListItemProvider provider = new ListItemProvider.ListProvider(new ArrayList<>(items));
    try {
        mAdapter = new ListItemAdapter(mActivity, provider);
        mActivityRule.runOnUiThread(() -> {
            mPagedListView.setAdapter(mAdapter);
        });
    } catch (Throwable throwable) {
        throwable.printStackTrace();
        throw new RuntimeException(throwable);
    }
    refreshUi();
}
#method_after
private void setupPagedListView(List<SwitchListItem> items) {
    ListItemProvider provider = new ListItemProvider.ListProvider(new ArrayList<>(items));
    try {
        mAdapter = new ListItemAdapter(mActivity, provider);
        mActivityRule.runOnUiThread(() -> mPagedListView.setAdapter(mAdapter));
    } catch (Throwable throwable) {
        throwable.printStackTrace();
        throw new RuntimeException(throwable);
    }
    InstrumentationRegistry.getInstrumentation().waitForIdleSync();
}
#end_block

#method_before
@Override
protected void resolveDirtyState() {
    mBinders.clear();
    // Create binders that adjust layout params of each view.
    setPrimaryAction();
    setText();
    setSupplementalActions();
    setItemClickable();
}
#method_after
@Override
@CallSuper
protected void resolveDirtyState() {
    mBinders.clear();
    // Create binders that adjust layout params of each view.
    setPrimaryAction();
    setText();
    setSwitch();
    setItemClickable();
}
#end_block

#method_before
public void setTitle(CharSequence title) {
    mTitle = title;
    markDirty();
}
#method_after
public void setTitle(@Nullable CharSequence title) {
    mTitle = title;
    markDirty();
}
#end_block

#method_before
public void setBody(CharSequence body) {
    mBody = body;
    markDirty();
}
#method_after
public void setBody(@Nullable CharSequence body) {
    mBody = body;
    markDirty();
}
#end_block

#method_before
public void setSwitchOnCheckedChangeListener(CompoundButton.OnCheckedChangeListener listener) {
    mSwitchOnCheckedChangeListener = listener;
    // This method invalidates previous listener. Reset so that we *only*
    // notify when the checked state changes and not on the initial bind.
    mShouldNotifySwitchChecked = false;
    markDirty();
}
#method_after
public void setSwitchOnCheckedChangeListener(@Nullable CompoundButton.OnCheckedChangeListener listener) {
    mSwitchOnCheckedChangeListener = listener;
    // This method invalidates previous listener. Reset so that we *only*
    // notify when the checked state changes and not on the initial bind.
    mShouldNotifySwitchChecked = false;
    markDirty();
}
#end_block

#method_before
@NonNull
protected Context getContext() {
    return mContext;
}
#method_after
@NonNull
protected final Context getContext() {
    return mContext;
}
#end_block

#method_before
RcsParticipant getParticipantFromId(int participantId) throws RemoteException {
    RcsParticipant participant = null;
    try (Cursor cursor = mContentResolver.query(RCS_PARTICIPANT_URI.buildUpon().appendPath(Integer.toString(participantId)).build(), null, null, null)) {
        if (cursor == null && !cursor.moveToNext()) {
            throw new RemoteException("Could not find participant with id: " + participantId);
        }
        participant = new RcsParticipant(cursor.getInt(cursor.getColumnIndex(RCS_PARTICIPANT_ID_COLUMN)));
    }
    return participant;
}
#method_after
RcsParticipant getParticipantFromId(int participantId) throws RemoteException {
    RcsParticipant participant = null;
    try (Cursor cursor = mContentResolver.query(Uri.withAppendedPath(RCS_PARTICIPANT_URI, Integer.toString(participantId)), null, null, null)) {
        if (cursor == null && !cursor.moveToNext()) {
            throw new RemoteException("Could not find participant with id: " + participantId);
        }
        participant = new RcsParticipant(cursor.getInt(cursor.getColumnIndex(RCS_PARTICIPANT_ID_COLUMN)));
    }
    return participant;
}
#end_block

#method_before
RcsParticipantQueryResult performParticipantQuery(Bundle bundle) throws RemoteException {
    RcsParticipantQueryContinuationToken continuationToken = null;
    List<Integer> participantList = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(RCS_PARTICIPANT_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Could not perform participant query, bundle: " + bundle);
        }
        while (cursor.moveToNext()) {
            participantList.add(cursor.getInt(cursor.getColumnIndex(RCS_PARTICIPANT_ID_COLUMN)));
        }
        Bundle cursorExtras = cursor.getExtras();
        if (cursorExtras != null) {
            continuationToken = cursorExtras.getParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN);
        }
    }
    return new RcsParticipantQueryResult(continuationToken, participantList);
}
#method_after
RcsParticipantQueryResult performParticipantQuery(Bundle bundle) throws RemoteException {
    RcsQueryContinuationToken continuationToken = null;
    List<Integer> participantList = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(RCS_PARTICIPANT_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Could not perform participant query, bundle: " + bundle);
        }
        while (cursor.moveToNext()) {
            participantList.add(cursor.getInt(cursor.getColumnIndex(RCS_PARTICIPANT_ID_COLUMN)));
        }
        Bundle cursorExtras = cursor.getExtras();
        if (cursorExtras != null) {
            continuationToken = cursorExtras.getParcelable(QUERY_CONTINUATION_TOKEN);
        }
    }
    return new RcsParticipantQueryResult(continuationToken, participantList);
}
#end_block

#method_before
RcsMessageQueryResult performMessageQuery(Bundle bundle) throws RemoteException {
    RcsMessageQueryContinuationToken continuationToken = null;
    List<RcsTypeIdPair> messageTypeIdPairs = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(UNIFIED_MESSAGE_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Could not perform message query, bundle: " + bundle);
        }
        while (cursor != null && cursor.moveToNext()) {
            boolean isIncoming = cursor.getInt(cursor.getColumnIndex(IS_INCOMING_COLUMN)) == 1;
            int messageId = cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN));
            messageTypeIdPairs.add(new RcsTypeIdPair(isIncoming ? MESSAGE_TYPE_INCOMING : MESSAGE_TYPE_OUTGOING, messageId));
        }
        if (cursor != null) {
            Bundle cursorExtras = cursor.getExtras();
            if (cursorExtras != null) {
                continuationToken = cursorExtras.getParcelable(MESSAGE_QUERY_CONTINUATION_TOKEN);
            }
        }
    }
    return new RcsMessageQueryResult(continuationToken, messageTypeIdPairs);
}
#method_after
RcsMessageQueryResult performMessageQuery(Bundle bundle) throws RemoteException {
    RcsQueryContinuationToken continuationToken = null;
    List<RcsTypeIdPair> messageTypeIdPairs = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(UNIFIED_MESSAGE_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Could not perform message query, bundle: " + bundle);
        }
        while (cursor != null && cursor.moveToNext()) {
            boolean isIncoming = cursor.getInt(cursor.getColumnIndex(MESSAGE_TYPE_COLUMN)) == MESSAGE_TYPE_INCOMING;
            int messageId = cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN));
            messageTypeIdPairs.add(new RcsTypeIdPair(isIncoming ? MESSAGE_TYPE_INCOMING : MESSAGE_TYPE_OUTGOING, messageId));
        }
        if (cursor != null) {
            Bundle cursorExtras = cursor.getExtras();
            if (cursorExtras != null) {
                continuationToken = cursorExtras.getParcelable(QUERY_CONTINUATION_TOKEN);
            }
        }
    }
    return new RcsMessageQueryResult(continuationToken, messageTypeIdPairs);
}
#end_block

#method_before
ContentValues getContentValuesForFileTransfer(RcsFileTransferCreationParameters fileTransferCreationParameters) {
    ContentValues contentValues = new ContentValues();
    contentValues.put(SESSION_ID_COLUMN, fileTransferCreationParameters.getRcsFileTransferSessionId());
    contentValues.put(CONTENT_URI_COLUMN, fileTransferCreationParameters.getContentUri().toString());
    contentValues.put(CONTENT_TYPE_COLUMN, fileTransferCreationParameters.getContentType());
    contentValues.put(FILE_SIZE_COLUMN, fileTransferCreationParameters.getFileSize());
    contentValues.put(TRANSFER_OFFSET_COLUMN, fileTransferCreationParameters.getTransferOffset());
    contentValues.put(TRANSFER_STATUS_COLUMN, fileTransferCreationParameters.getFileTransferStatus());
    contentValues.put(WIDTH_COLUMN, fileTransferCreationParameters.getWidth());
    contentValues.put(HEIGHT_COLUMN, fileTransferCreationParameters.getHeight());
    contentValues.put(LENGTH_COLUMN, fileTransferCreationParameters.getLength());
    contentValues.put(PREVIEW_URI_COLUMN, fileTransferCreationParameters.getPreviewUri().toString());
    contentValues.put(PREVIEW_TYPE_COLUMN, fileTransferCreationParameters.getPreviewType());
    return contentValues;
}
#method_after
ContentValues getContentValuesForFileTransfer(RcsFileTransferCreationParameters fileTransferCreationParameters) {
    ContentValues contentValues = new ContentValues();
    contentValues.put(SESSION_ID_COLUMN, fileTransferCreationParameters.getRcsFileTransferSessionId());
    contentValues.put(CONTENT_URI_COLUMN, fileTransferCreationParameters.getContentUri().toString());
    contentValues.put(CONTENT_TYPE_COLUMN, fileTransferCreationParameters.getContentMimeType());
    contentValues.put(FILE_SIZE_COLUMN, fileTransferCreationParameters.getFileSize());
    contentValues.put(SUCCESSFULLY_TRANSFERRED_BYTES, fileTransferCreationParameters.getTransferOffset());
    contentValues.put(TRANSFER_STATUS_COLUMN, fileTransferCreationParameters.getFileTransferStatus());
    contentValues.put(WIDTH_COLUMN, fileTransferCreationParameters.getWidth());
    contentValues.put(HEIGHT_COLUMN, fileTransferCreationParameters.getHeight());
    contentValues.put(DURATION_MILLIS_COLUMN, fileTransferCreationParameters.getMediaDuration());
    contentValues.put(PREVIEW_URI_COLUMN, fileTransferCreationParameters.getPreviewUri().toString());
    contentValues.put(PREVIEW_TYPE_COLUMN, fileTransferCreationParameters.getPreviewMimeType());
    return contentValues;
}
#end_block

#method_before
RcsEventQueryResult performEventQuery(Bundle bundle) throws RemoteException {
    RcsEventQueryContinuationToken continuationToken = null;
    List<RcsEvent> eventList = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(RCS_EVENT_QUERY_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Event query failed, bundle: " + bundle);
        }
        while (cursor.moveToNext()) {
            int eventType = cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN));
            switch(eventType) {
                case PARTICIPANT_ALIAS_CHANGED_EVENT_TYPE:
                    eventList.add(createNewParticipantAliasChangedEvent(cursor));
                    break;
                case PARTICIPANT_JOINED_EVENT_TYPE:
                    eventList.add(createNewParticipantJoinedEvent(cursor));
                    break;
                case PARTICIPANT_LEFT_EVENT_TYPE:
                    eventList.add(createNewParticipantLeftEvent(cursor));
                    break;
                case NAME_CHANGED_EVENT_TYPE:
                    eventList.add(createNewGroupNameChangedEvent(cursor));
                    break;
                case ICON_CHANGED_EVENT_TYPE:
                    eventList.add(createNewGroupIconChangedEvent(cursor));
                    break;
                default:
                    Rlog.e(RcsMessageStoreController.TAG, "RcsEventQueryHelper: invalid event type: " + eventType);
            }
        }
        Bundle cursorExtras = cursor.getExtras();
        if (cursorExtras != null) {
            continuationToken = cursorExtras.getParcelable(EVENT_QUERY_CONTINUATION_TOKEN);
        }
    }
    return new RcsEventQueryResult(continuationToken, eventList);
}
#method_after
RcsEventQueryResult performEventQuery(Bundle bundle) throws RemoteException {
    RcsQueryContinuationToken continuationToken = null;
    List<RcsEvent> eventList = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(RCS_EVENT_QUERY_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Event query failed, bundle: " + bundle);
        }
        while (cursor.moveToNext()) {
            int eventType = cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN));
            switch(eventType) {
                case PARTICIPANT_ALIAS_CHANGED_EVENT_TYPE:
                    eventList.add(createNewParticipantAliasChangedEvent(cursor));
                    break;
                case PARTICIPANT_JOINED_EVENT_TYPE:
                    eventList.add(createNewParticipantJoinedEvent(cursor));
                    break;
                case PARTICIPANT_LEFT_EVENT_TYPE:
                    eventList.add(createNewParticipantLeftEvent(cursor));
                    break;
                case NAME_CHANGED_EVENT_TYPE:
                    eventList.add(createNewGroupNameChangedEvent(cursor));
                    break;
                case ICON_CHANGED_EVENT_TYPE:
                    eventList.add(createNewGroupIconChangedEvent(cursor));
                    break;
                default:
                    Rlog.e(RcsMessageStoreController.TAG, "RcsEventQueryHelper: invalid event type: " + eventType);
            }
        }
        Bundle cursorExtras = cursor.getExtras();
        if (cursorExtras != null) {
            continuationToken = cursorExtras.getParcelable(QUERY_CONTINUATION_TOKEN);
        }
    }
    return new RcsEventQueryResult(continuationToken, eventList);
}
#end_block

#method_before
private RcsGroupThreadIconChangedEvent createNewGroupIconChangedEvent(Cursor cursor) {
    String oldIcon = cursor.getString(cursor.getColumnIndex(OLD_ICON_URI_COLUMN));
    String newIcon = cursor.getString(cursor.getColumnIndex(NEW_ICON_URI_COLUMN));
    return new RcsGroupThreadIconChangedEvent(cursor.getInt(cursor.getColumnIndex(EVENT_ID_COLUMN)), cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(ORIGINATING_PARTICIPANT_COLUMN)), oldIcon == null ? null : Uri.parse(oldIcon), newIcon == null ? null : Uri.parse(newIcon));
}
#method_after
private RcsGroupThreadIconChangedEvent createNewGroupIconChangedEvent(Cursor cursor) {
    String newIcon = cursor.getString(cursor.getColumnIndex(NEW_ICON_URI_COLUMN));
    return new RcsGroupThreadIconChangedEvent(cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(SOURCE_PARTICIPANT_ID_COLUMN)), newIcon == null ? null : Uri.parse(newIcon));
}
#end_block

#method_before
private RcsGroupThreadNameChangedEvent createNewGroupNameChangedEvent(Cursor cursor) {
    return new RcsGroupThreadNameChangedEvent(cursor.getInt(cursor.getColumnIndex(EVENT_ID_COLUMN)), cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(ORIGINATING_PARTICIPANT_COLUMN)), cursor.getString(cursor.getColumnIndex(OLD_NAME_COLUMN)), cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN)));
}
#method_after
private RcsGroupThreadNameChangedEvent createNewGroupNameChangedEvent(Cursor cursor) {
    return new RcsGroupThreadNameChangedEvent(cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(SOURCE_PARTICIPANT_ID_COLUMN)), cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN)));
}
#end_block

#method_before
private RcsGroupThreadParticipantLeftEvent createNewParticipantLeftEvent(Cursor cursor) {
    return new RcsGroupThreadParticipantLeftEvent(cursor.getInt(cursor.getColumnIndex(EVENT_ID_COLUMN)), cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(ORIGINATING_PARTICIPANT_COLUMN)), cursor.getInt(cursor.getColumnIndex(DESTINATION_PARTICIPANT_COLUMN)));
}
#method_after
private RcsGroupThreadParticipantLeftEvent createNewParticipantLeftEvent(Cursor cursor) {
    return new RcsGroupThreadParticipantLeftEvent(cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(SOURCE_PARTICIPANT_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(DESTINATION_PARTICIPANT_ID_COLUMN)));
}
#end_block

#method_before
private RcsGroupThreadParticipantJoinedEvent createNewParticipantJoinedEvent(Cursor cursor) {
    return new RcsGroupThreadParticipantJoinedEvent(cursor.getInt(cursor.getColumnIndex(EVENT_ID_COLUMN)), cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(ORIGINATING_PARTICIPANT_COLUMN)), cursor.getInt(cursor.getColumnIndex(DESTINATION_PARTICIPANT_COLUMN)));
}
#method_after
private RcsGroupThreadParticipantJoinedEvent createNewParticipantJoinedEvent(Cursor cursor) {
    return new RcsGroupThreadParticipantJoinedEvent(cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(SOURCE_PARTICIPANT_ID_COLUMN)), cursor.getInt(cursor.getColumnIndex(DESTINATION_PARTICIPANT_ID_COLUMN)));
}
#end_block

#method_before
private RcsParticipantAliasChangedEvent createNewParticipantAliasChangedEvent(Cursor cursor) {
    return new RcsParticipantAliasChangedEvent(cursor.getInt(cursor.getColumnIndex(EVENT_ID_COLUMN)), cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_PARTICIPANT_ID_COLUMN)), cursor.getString(cursor.getColumnIndex(OLD_ALIAS_COLUMN)), cursor.getString(cursor.getColumnIndex(NEW_ALIAS_COLUMN)));
}
#method_after
private RcsParticipantAliasChangedEvent createNewParticipantAliasChangedEvent(Cursor cursor) {
    return new RcsParticipantAliasChangedEvent(cursor.getLong(cursor.getColumnIndex(TIMESTAMP_COLUMN)), cursor.getInt(cursor.getColumnIndex(RCS_PARTICIPANT_ID_COLUMN)), cursor.getString(cursor.getColumnIndex(NEW_ALIAS_COLUMN)));
}
#end_block

#method_before
private void performUpdate(Uri uri, ContentValues contentValues, String errorMessage) throws RemoteException {
    int updateCount = mContentResolver.update(uri, contentValues, null, null);
    if (updateCount <= 0) {
        throw new RemoteException(errorMessage);
    }
}
#method_after
private void performUpdate(Uri uri, ContentValues contentValues, String errorMessage) throws RemoteException {
    int updateCount = mContentResolver.update(uri, contentValues, null, null);
    // TODO - convert remote exceptions to return values.
    if (updateCount <= 0) {
        throw new RemoteException(errorMessage);
    }
}
#end_block

#method_before
RcsThreadQueryResult performThreadQuery(Bundle bundle) throws RemoteException {
    RcsThreadQueryContinuationToken continuationToken = null;
    List<RcsTypeIdPair> rcsThreadIdList = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(RCS_THREAD_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Could not perform thread query, bundle: " + bundle);
        }
        while (cursor.moveToNext()) {
            boolean isGroup = cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN)) == THREAD_TYPE_GROUP;
            if (isGroup) {
                int threadId = cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN));
                rcsThreadIdList.add(new RcsTypeIdPair(THREAD_TYPE_GROUP, threadId));
            } else {
                int threadId = cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN));
                rcsThreadIdList.add(new RcsTypeIdPair(THREAD_TYPE_1_TO_1, threadId));
            }
        }
        // If there is a continuation token, add it to the query result.
        Bundle cursorExtras = cursor.getExtras();
        if (cursorExtras != null) {
            continuationToken = cursorExtras.getParcelable(THREAD_QUERY_CONTINUATION_TOKEN);
        }
    }
    return new RcsThreadQueryResult(continuationToken, rcsThreadIdList);
}
#method_after
RcsThreadQueryResult performThreadQuery(Bundle bundle) throws RemoteException {
    RcsQueryContinuationToken continuationToken = null;
    List<RcsTypeIdPair> rcsThreadIdList = new ArrayList<>();
    try (Cursor cursor = mContentResolver.query(RCS_THREAD_URI, null, bundle, null)) {
        if (cursor == null) {
            throw new RemoteException("Could not perform thread query, bundle: " + bundle);
        }
        while (cursor.moveToNext()) {
            boolean isGroup = cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN)) == THREAD_TYPE_GROUP;
            if (isGroup) {
                int threadId = cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN));
                rcsThreadIdList.add(new RcsTypeIdPair(THREAD_TYPE_GROUP, threadId));
            } else {
                int threadId = cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN));
                rcsThreadIdList.add(new RcsTypeIdPair(THREAD_TYPE_1_TO_1, threadId));
            }
        }
        // If there is a continuation token, add it to the query result.
        Bundle cursorExtras = cursor.getExtras();
        if (cursorExtras != null) {
            continuationToken = cursorExtras.getParcelable(QUERY_CONTINUATION_TOKEN);
        }
    }
    return new RcsThreadQueryResult(continuationToken, rcsThreadIdList);
}
#end_block

#method_before
@Test
public void testGetRcsThreads() {
    doReturn(123).when(mMockParticipant).getId();
    RcsThreadQueryParameters queryParameters = RcsThreadQueryParameters.builder().withParticipant(mMockParticipant).setThreadType(ONLY_GROUP_THREADS).limitResultsTo(30).build();
    // TODO - limit the query as per queryParameters. This will change how the query is executed
    mFakeRcsProvider.setExpectedQueryParameters(Uri.parse("content://rcs/thread"), null, null, null, null);
    try {
        mRcsMessageStoreController.getRcsThreads(queryParameters);
    } catch (RemoteException e) {
    // eat the exception as there is no provider - we care about the expected update assert
    }
}
#method_after
@Test
public void testGetRcsThreads() {
    doReturn(123).when(mMockParticipant).getId();
    RcsThreadQueryParameters queryParameters = new RcsThreadQueryParameters.Builder().setParticipant(mMockParticipant).setThreadType(THREAD_TYPE_GROUP).setResultLimit(30).build();
    // TODO - limit the query as per queryParameters. This will change how the query is executed
    mFakeRcsProvider.setExpectedQueryParameters(Uri.parse("content://rcs/thread"), null, null, null, null);
    try {
        mRcsMessageStoreController.getRcsThreads(queryParameters);
    } catch (RemoteException e) {
    // eat the exception as there is no provider - we care about the expected update assert
    }
}
#end_block

#method_before
@Test
public void testUpdateRcsParticipantAlias() {
    ContentValues contentValues = new ContentValues(1);
    contentValues.put("rcs_alias", "New Alias");
    mFakeRcsProvider.setExpectedUpdateParameters(Uri.parse("content://rcs/participant/551"), contentValues, null, null);
    try {
        mRcsMessageStoreController.updateRcsParticipantAlias(551, "New Alias");
    } catch (RemoteException e) {
    // eat the exception as there is no provider - we care about the expected update assert
    }
}
#method_after
@Test
public void testUpdateRcsParticipantAlias() {
    ContentValues contentValues = new ContentValues(1);
    contentValues.put("rcs_alias", "New Alias");
    mFakeRcsProvider.setExpectedUpdateParameters(Uri.parse("content://rcs/participant/551"), contentValues, null, null);
    try {
        mRcsMessageStoreController.setRcsParticipantAlias(551, "New Alias");
    } catch (RemoteException e) {
    // eat the exception as there is no provider - we care about the expected update assert
    }
}
#end_block

#method_before
@Override
public void deleteThread(int threadId, int threadType) {
    mContentResolver.delete(threadType == THREAD_TYPE_GROUP ? RCS_GROUP_THREAD_URI : RCS_1_TO_1_THREAD_URI, RCS_THREAD_ID_COLUMN + "=?", new String[] { Integer.toString(threadId) });
}
#method_after
@Override
public boolean deleteThread(int threadId, int threadType) {
    int deletionCount = mContentResolver.delete(threadType == THREAD_TYPE_GROUP ? RCS_GROUP_THREAD_URI : RCS_1_TO_1_THREAD_URI, RCS_THREAD_ID_COLUMN + "=?", new String[] { Integer.toString(threadId) });
    return deletionCount > 0;
}
#end_block

#method_before
@Override
public RcsThreadQueryResult getRcsThreadsWithToken(RcsThreadQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_CONTINUATION_TOKEN, continuationToken);
    return mThreadQueryHelper.performThreadQuery(bundle);
}
#method_after
@Override
public RcsThreadQueryResult getRcsThreadsWithToken(RcsQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    return mThreadQueryHelper.performThreadQuery(bundle);
}
#end_block

#method_before
@Override
public RcsParticipantQueryResult getParticipantsWithToken(RcsParticipantQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN, continuationToken);
    return mParticipantQueryHelper.performParticipantQuery(bundle);
}
#method_after
@Override
public RcsParticipantQueryResult getParticipantsWithToken(RcsQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    return mParticipantQueryHelper.performParticipantQuery(bundle);
}
#end_block

#method_before
@Override
public RcsMessageQueryResult getMessagesWithToken(RcsMessageQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_CONTINUATION_TOKEN, continuationToken);
    return mMessageQueryHelper.performMessageQuery(bundle);
}
#method_after
@Override
public RcsMessageQueryResult getMessagesWithToken(RcsQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    return mMessageQueryHelper.performMessageQuery(bundle);
}
#end_block

#method_before
@Override
public RcsEventQueryResult getEventsWithToken(RcsEventQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_CONTINUATION_TOKEN, continuationToken);
    return mEventQueryHelper.performEventQuery(bundle);
}
#method_after
@Override
public RcsEventQueryResult getEventsWithToken(RcsQueryContinuationToken continuationToken) throws RemoteException {
    Bundle bundle = new Bundle();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    return mEventQueryHelper.performEventQuery(bundle);
}
#end_block

#method_before
@Override
public int createRcs1To1Thread(int recipientId) throws RemoteException {
    // Look up if a similar thread exists. Fail the call if it does
    RcsParticipant participant = mParticipantQueryHelper.getParticipantFromId(recipientId);
    if (participant == null) {
        throw new RemoteException("RcsParticipant with id: " + recipientId + " does not exist.");
    }
    RcsThreadQueryParameters queryParameters = RcsThreadQueryParameters.builder().setThreadType(RcsThreadQueryParameters.ONLY_1_TO_1_THREADS).withParticipant(participant).build();
    RcsThreadQueryResult queryResult = getRcsThreads(queryParameters);
    if (queryResult.getThreads().size() > 0) {
        throw new RemoteException("Rcs1To1Thread with recipient " + recipientId + " already exists.");
    }
    int rcs1To1ThreadId = mThreadQueryHelper.create1To1Thread();
    // add the recipient
    Uri recipientUri = RCS_1_TO_1_THREAD_URI.buildUpon().appendPath(Integer.toString(rcs1To1ThreadId)).appendPath(RCS_PARTICIPANT_URI_PART).appendPath(Integer.toString(recipientId)).build();
    Uri insertionResult = mContentResolver.insert(recipientUri, null);
    if (insertionResult.equals(recipientUri)) {
        // insertion successful, return the created thread
        return rcs1To1ThreadId;
    }
    throw new RemoteException("Creating Rcs1To1Thread failed");
}
#method_after
@Override
public int createRcs1To1Thread(int recipientId) throws RemoteException {
    // Look up if a similar thread exists. Fail the call if it does
    RcsParticipant participant = mParticipantQueryHelper.getParticipantFromId(recipientId);
    if (participant == null) {
        throw new RemoteException("RcsParticipant with id: " + recipientId + " does not exist.");
    }
    RcsThreadQueryParameters queryParameters = new RcsThreadQueryParameters.Builder().setThreadType(RcsThreadQueryParameters.THREAD_TYPE_1_TO_1).setParticipant(participant).build();
    RcsThreadQueryResult queryResult = getRcsThreads(queryParameters);
    if (queryResult.getThreads().size() > 0) {
        throw new RemoteException("Rcs1To1Thread with recipient " + recipientId + " already exists.");
    }
    int rcs1To1ThreadId = mThreadQueryHelper.create1To1Thread();
    // add the recipient
    Uri recipientUri = RCS_1_TO_1_THREAD_URI.buildUpon().appendPath(Integer.toString(rcs1To1ThreadId)).appendPath(RCS_PARTICIPANT_URI_PART).appendPath(Integer.toString(recipientId)).build();
    Uri insertionResult = mContentResolver.insert(recipientUri, null);
    if (insertionResult.equals(recipientUri)) {
        // insertion successful, return the created thread
        return rcs1To1ThreadId;
    }
    throw new RemoteException("Creating Rcs1To1Thread failed");
}
#end_block

#method_before
@Override
public int createGroupThread(int[] participantIds, String groupName, Uri groupIcon) throws RemoteException {
    int groupThreadId = mThreadQueryHelper.createGroupThread(groupName, groupIcon);
    if (groupThreadId <= 0) {
        throw new RemoteException("Could not create RcsGroupThread.");
    }
    // Insert participants
    if (participantIds != null) {
        for (int participantId : participantIds) {
            addParticipantToGroupThread(groupThreadId, participantId);
        }
    }
    return groupThreadId;
}
#method_after
@Override
public int createGroupThread(int[] participantIds, String groupName, Uri groupIcon) throws RemoteException {
    int groupThreadId = mThreadQueryHelper.createGroupThread(groupName, groupIcon);
    if (groupThreadId <= 0) {
        throw new RemoteException("Could not create RcsGroupThread.");
    }
    // one transaction
    if (participantIds != null) {
        for (int participantId : participantIds) {
            addParticipantToGroupThread(groupThreadId, participantId);
        }
    }
    return groupThreadId;
}
#end_block

#method_before
@Override
public int createRcsParticipant(String canonicalAddress, String alias) throws RemoteException {
    // Lookup the participant in RcsProvider to get the canonical row id in MmsSmsProvider
    int rowInCanonicalAddressesTable = Integer.MIN_VALUE;
    try (Cursor cursor = mContentResolver.query(RcsParticipantQueryHelper.CANONICAL_ADDRESSES_URI, new String[] { BaseColumns._ID }, Telephony.CanonicalAddressesColumns.ADDRESS + "=?", new String[] { canonicalAddress }, null)) {
        if (cursor != null && cursor.getCount() == 1 && cursor.moveToNext()) {
            rowInCanonicalAddressesTable = cursor.getInt(0);
        }
    }
    ContentValues contentValues = new ContentValues();
    contentValues.put(Telephony.CanonicalAddressesColumns.ADDRESS, canonicalAddress);
    if (rowInCanonicalAddressesTable == Integer.MIN_VALUE) {
        // We couldn't find any existing canonical addresses. Add a new one.
        Uri newCanonicalAddress = mContentResolver.insert(RcsParticipantQueryHelper.CANONICAL_ADDRESSES_URI, contentValues);
        if (newCanonicalAddress != null) {
            try {
                rowInCanonicalAddressesTable = Integer.parseInt(newCanonicalAddress.getLastPathSegment());
            } catch (NumberFormatException e) {
                throw new RemoteException("Uri returned after canonical address insertion is malformed: " + newCanonicalAddress);
            }
        }
    }
    // Now we have a row in canonical_addresses table, and its value is in
    // rowInCanonicalAddressesTable. Put this row id in RCS participants table.
    contentValues.clear();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, rowInCanonicalAddressesTable);
    Uri newParticipantUri = mContentResolver.insert(RCS_PARTICIPANT_URI, contentValues);
    int newParticipantRowId;
    try {
        if (newParticipantUri != null) {
            newParticipantRowId = Integer.parseInt(newParticipantUri.getLastPathSegment());
        } else {
            throw new RemoteException("Error inserting new participant into RcsProvider");
        }
    } catch (NumberFormatException e) {
        throw new RemoteException("Uri returned after creating a participant is malformed: " + newParticipantUri);
    }
    return newParticipantRowId;
}
#method_after
@Override
public int createRcsParticipant(String canonicalAddress, String alias) throws RemoteException {
    // Lookup the participant in RcsProvider to get the canonical row id in MmsSmsProvider
    int rowInCanonicalAddressesTable = Integer.MIN_VALUE;
    try (Cursor cursor = mContentResolver.query(RcsParticipantQueryHelper.CANONICAL_ADDRESSES_URI, new String[] { BaseColumns._ID }, Telephony.CanonicalAddressesColumns.ADDRESS + "=?", new String[] { canonicalAddress }, null)) {
        if (cursor != null && cursor.getCount() == 1 && cursor.moveToNext()) {
            rowInCanonicalAddressesTable = cursor.getInt(0);
        }
    }
    ContentValues contentValues = new ContentValues();
    contentValues.put(Telephony.CanonicalAddressesColumns.ADDRESS, canonicalAddress);
    if (rowInCanonicalAddressesTable == Integer.MIN_VALUE) {
        // We couldn't find any existing canonical addresses. Add a new one.
        Uri newCanonicalAddress = mContentResolver.insert(RcsParticipantQueryHelper.CANONICAL_ADDRESSES_URI, contentValues);
        if (newCanonicalAddress != null) {
            try {
                rowInCanonicalAddressesTable = Integer.parseInt(newCanonicalAddress.getLastPathSegment());
            } catch (NumberFormatException e) {
                throw new RemoteException("Uri returned after canonical address insertion is malformed: " + newCanonicalAddress);
            }
        }
    }
    // Now we have a row in canonical_addresses table, and its value is in
    // rowInCanonicalAddressesTable. Put this row id in RCS participants table.
    contentValues.clear();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, rowInCanonicalAddressesTable);
    Uri newParticipantUri = mContentResolver.insert(RCS_PARTICIPANT_URI, contentValues);
    int newParticipantRowId;
    try {
        if (newParticipantUri != null) {
            newParticipantRowId = Integer.parseInt(newParticipantUri.getLastPathSegment());
        } else {
            // TODO (123719857) - Disallow creation of duplicate participants
            throw new RemoteException("Error inserting new participant into RcsProvider");
        }
    } catch (NumberFormatException e) {
        throw new RemoteException("Uri returned after creating a participant is malformed: " + newParticipantUri);
    }
    return newParticipantRowId;
}
#end_block

#method_before
@Override
public int addIncomingMessage(int rcsThreadId, RcsIncomingMessageCreationParameters rcsIncomingMessageCreationParameters) throws RemoteException {
    ContentValues contentValues = new ContentValues();
    contentValues.put(ARRIVAL_TIMESTAMP_COLUMN, rcsIncomingMessageCreationParameters.getArrivalTimestamp());
    contentValues.put(NOTIFIED_TIMESTAMP_COLUMN, rcsIncomingMessageCreationParameters.getNotifiedTimestamp());
    contentValues.put(SENDER_PARTICIPANT_COLUMN, rcsIncomingMessageCreationParameters.getSenderParticipantId());
    mMessageQueryHelper.createContentValuesForGenericMessage(contentValues, rcsThreadId, rcsIncomingMessageCreationParameters);
    return addMessage(rcsThreadId, true, contentValues);
}
#method_after
@Override
public int addIncomingMessage(int rcsThreadId, RcsIncomingMessageCreationParameters rcsIncomingMessageCreationParameters) throws RemoteException {
    ContentValues contentValues = new ContentValues();
    contentValues.put(ARRIVAL_TIMESTAMP_COLUMN, rcsIncomingMessageCreationParameters.getArrivalTimestamp());
    contentValues.put(SEEN_TIMESTAMP_COLUMN, rcsIncomingMessageCreationParameters.getSeenTimestamp());
    contentValues.put(SENDER_PARTICIPANT_ID_COLUMN, rcsIncomingMessageCreationParameters.getSenderParticipantId());
    mMessageQueryHelper.createContentValuesForGenericMessage(contentValues, rcsThreadId, rcsIncomingMessageCreationParameters);
    return addMessage(rcsThreadId, true, contentValues);
}
#end_block

#method_before
@Override
public int addOutgoingMessage(int rcsThreadId, RcsOutgoingMessageCreationParameters rcsOutgoingMessageCreationParameters) throws RemoteException {
    ContentValues contentValues = new ContentValues();
    mMessageQueryHelper.createContentValuesForGenericMessage(contentValues, rcsThreadId, rcsOutgoingMessageCreationParameters);
    int messageId = addMessage(rcsThreadId, false, contentValues);
    return messageId;
}
#method_after
@Override
public int addOutgoingMessage(int rcsThreadId, RcsMessageCreationParameters rcsOutgoingMessageCreationParameters) throws RemoteException {
    ContentValues contentValues = new ContentValues();
    mMessageQueryHelper.createContentValuesForGenericMessage(contentValues, rcsThreadId, rcsOutgoingMessageCreationParameters);
    return addMessage(rcsThreadId, false, contentValues);
}
#end_block

#method_before
@Override
public void setTextForMessage(int messageId, boolean isIncoming, String text) throws RemoteException {
    mMessageStoreUtil.updateValueOfProviderUri(mMessageQueryHelper.getMessageUpdateUri(messageId, isIncoming), TEXT_COLUMN, text, "Could not set the text for message");
}
#method_after
@Override
public void setTextForMessage(int messageId, boolean isIncoming, String text) throws RemoteException {
    mMessageStoreUtil.updateValueOfProviderUri(mMessageQueryHelper.getMessageUpdateUri(messageId, isIncoming), MESSAGE_TEXT_COLUMN, text, "Could not set the text for message");
}
#end_block

#method_before
@Override
public String getTextForMessage(int messageId, boolean isIncoming) throws RemoteException {
    return mMessageStoreUtil.getStringValueFromTableRow(getMessageTableUri(isIncoming), TEXT_COLUMN, MESSAGE_ID_COLUMN, messageId);
}
#method_after
@Override
public String getTextForMessage(int messageId, boolean isIncoming) throws RemoteException {
    return mMessageStoreUtil.getStringValueFromTableRow(getMessageTableUri(isIncoming), MESSAGE_TEXT_COLUMN, MESSAGE_ID_COLUMN, messageId);
}
#end_block

#method_before
@Override
public int getSenderParticipant(int messageId) throws RemoteException {
    return mMessageStoreUtil.getIntValueFromTableRow(INCOMING_MESSAGE_URI, SENDER_PARTICIPANT_COLUMN, MESSAGE_ID_COLUMN, messageId);
}
#method_after
@Override
public int getSenderParticipant(int messageId) throws RemoteException {
    return mMessageStoreUtil.getIntValueFromTableRow(INCOMING_MESSAGE_URI, SENDER_PARTICIPANT_ID_COLUMN, MESSAGE_ID_COLUMN, messageId);
}
#end_block

#method_before
@Override
public void setFileTransferTransferOffset(int partId, long transferOffset) throws RemoteException {
    mMessageStoreUtil.updateValueOfProviderUri(mMessageQueryHelper.getFileTransferUpdateUri(partId), TRANSFER_OFFSET_COLUMN, transferOffset, "Could not set transfer offset for file transfer");
}
#method_after
@Override
public void setFileTransferTransferOffset(int partId, long transferOffset) throws RemoteException {
    mMessageStoreUtil.updateValueOfProviderUri(mMessageQueryHelper.getFileTransferUpdateUri(partId), SUCCESSFULLY_TRANSFERRED_BYTES, transferOffset, "Could not set transfer offset for file transfer");
}
#end_block

#method_before
@Override
public long getFileTransferTransferOffset(int partId) throws RemoteException {
    return mMessageStoreUtil.getLongValueFromTableRow(FILE_TRANSFER_URI, TRANSFER_OFFSET_COLUMN, FILE_TRANSFER_ID_COLUMN, partId);
}
#method_after
@Override
public long getFileTransferTransferOffset(int partId) throws RemoteException {
    return mMessageStoreUtil.getLongValueFromTableRow(FILE_TRANSFER_URI, SUCCESSFULLY_TRANSFERRED_BYTES, FILE_TRANSFER_ID_COLUMN, partId);
}
#end_block

#method_before
@Override
public void setFileTransferLength(int partId, long length) throws RemoteException {
    mMessageStoreUtil.updateValueOfProviderUri(mMessageQueryHelper.getFileTransferUpdateUri(partId), LENGTH_COLUMN, length, "Could not set length of file transfer");
}
#method_after
@Override
public void setFileTransferLength(int partId, long length) throws RemoteException {
    mMessageStoreUtil.updateValueOfProviderUri(mMessageQueryHelper.getFileTransferUpdateUri(partId), DURATION_MILLIS_COLUMN, length, "Could not set length of file transfer");
}
#end_block

#method_before
@Override
public long getFileTransferLength(int partId) throws RemoteException {
    return mMessageStoreUtil.getLongValueFromTableRow(FILE_TRANSFER_URI, LENGTH_COLUMN, FILE_TRANSFER_ID_COLUMN, partId);
}
#method_after
@Override
public long getFileTransferLength(int partId) throws RemoteException {
    return mMessageStoreUtil.getLongValueFromTableRow(FILE_TRANSFER_URI, DURATION_MILLIS_COLUMN, FILE_TRANSFER_ID_COLUMN, partId);
}
#end_block

#method_before
@Override
public Uri getFileTransferPreviewUri(int partId) throws RemoteException {
    return mMessageStoreUtil.getUriValueFromTableRow(FILE_TRANSFER_URI, LENGTH_COLUMN, FILE_TRANSFER_ID_COLUMN, partId);
}
#method_after
@Override
public Uri getFileTransferPreviewUri(int partId) throws RemoteException {
    return mMessageStoreUtil.getUriValueFromTableRow(FILE_TRANSFER_URI, DURATION_MILLIS_COLUMN, FILE_TRANSFER_ID_COLUMN, partId);
}
#end_block

#method_before
@Override
public int createGroupThreadNameChangedEvent(long timestamp, int threadId, int originationParticipantId, String oldName, String newName) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(OLD_NAME_COLUMN, oldName);
    eventSpecificValues.put(NEW_NAME_COLUMN, newName);
    return mMessageStoreUtil.createGroupThreadEvent(NAME_CHANGED_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#method_after
@Override
public int createGroupThreadNameChangedEvent(long timestamp, int threadId, int originationParticipantId, String newName) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(NEW_NAME_COLUMN, newName);
    return mEventQueryHelper.createGroupThreadEvent(NAME_CHANGED_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#end_block

#method_before
@Override
public int createGroupThreadIconChangedEvent(long timestamp, int threadId, int originationParticipantId, Uri oldIcon, Uri newIcon) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(OLD_ICON_URI_COLUMN, oldIcon == null ? null : oldIcon.toString());
    eventSpecificValues.put(NEW_ICON_URI_COLUMN, newIcon == null ? null : newIcon.toString());
    return mMessageStoreUtil.createGroupThreadEvent(ICON_CHANGED_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#method_after
@Override
public int createGroupThreadIconChangedEvent(long timestamp, int threadId, int originationParticipantId, Uri newIcon) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(NEW_ICON_URI_COLUMN, newIcon == null ? null : newIcon.toString());
    return mEventQueryHelper.createGroupThreadEvent(ICON_CHANGED_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#end_block

#method_before
@Override
public int createGroupThreadParticipantJoinedEvent(long timestamp, int threadId, int originationParticipantId, int participantId) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(DESTINATION_PARTICIPANT_COLUMN, participantId);
    return mMessageStoreUtil.createGroupThreadEvent(PARTICIPANT_JOINED_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#method_after
@Override
public int createGroupThreadParticipantJoinedEvent(long timestamp, int threadId, int originationParticipantId, int participantId) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(DESTINATION_PARTICIPANT_ID_COLUMN, participantId);
    return mEventQueryHelper.createGroupThreadEvent(PARTICIPANT_JOINED_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#end_block

#method_before
@Override
public int createGroupThreadParticipantLeftEvent(long timestamp, int threadId, int originationParticipantId, int participantId) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(DESTINATION_PARTICIPANT_COLUMN, participantId);
    return mMessageStoreUtil.createGroupThreadEvent(PARTICIPANT_LEFT_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#method_after
@Override
public int createGroupThreadParticipantLeftEvent(long timestamp, int threadId, int originationParticipantId, int participantId) throws RemoteException {
    ContentValues eventSpecificValues = new ContentValues();
    eventSpecificValues.put(DESTINATION_PARTICIPANT_ID_COLUMN, participantId);
    return mEventQueryHelper.createGroupThreadEvent(PARTICIPANT_LEFT_EVENT_TYPE, timestamp, threadId, originationParticipantId, eventSpecificValues);
}
#end_block

#method_before
@Override
public int createParticipantAliasChangedEvent(long timestamp, int participantId, String oldAlias, String newAlias) throws RemoteException {
    ContentValues contentValues = new ContentValues(4);
    contentValues.put(TIMESTAMP_COLUMN, timestamp);
    contentValues.put(RCS_PARTICIPANT_ID_COLUMN, participantId);
    contentValues.put(OLD_ALIAS_COLUMN, oldAlias);
    contentValues.put(NEW_ALIAS_COLUMN, newAlias);
    Uri uri = mContentResolver.insert(mEventQueryHelper.getParticipantEventInsertionUri(participantId), contentValues);
    if (uri == null) {
        throw new RemoteException("Could not create RcsParticipantAliasChangedEvent with participant id: " + participantId);
    }
    return Integer.parseInt(uri.getLastPathSegment());
}
#method_after
@Override
public int createParticipantAliasChangedEvent(long timestamp, int participantId, String newAlias) throws RemoteException {
    ContentValues contentValues = new ContentValues(4);
    contentValues.put(TIMESTAMP_COLUMN, timestamp);
    contentValues.put(RCS_PARTICIPANT_ID_COLUMN, participantId);
    contentValues.put(NEW_ALIAS_COLUMN, newAlias);
    Uri uri = mContentResolver.insert(mEventQueryHelper.getParticipantEventInsertionUri(participantId), contentValues);
    if (uri == null) {
        throw new RemoteException("Could not create RcsParticipantAliasChangedEvent with participant id: " + participantId);
    }
    return Integer.parseInt(uri.getLastPathSegment());
}
#end_block

#method_before
@MessageType
public int getMessageType() {
    return mMessageType;
}
#method_after
public int getMessageType() {
    return mMessageType;
}
#end_block

#method_before
public int getSortingProperty() {
    return mSortingProperty;
}
#method_after
@SortingProperty
public int getSortingProperty() {
    return mSortingProperty;
}
#end_block

#method_before
@CheckResult
public Builder setMessageType(@MessageType int messageType) {
    mMessageType = messageType;
    return this;
}
#method_after
@CheckResult
public Builder setMessageType(int messageType) {
    mMessageType = messageType;
    return this;
}
#end_block

#method_before
@CheckResult
public Builder setFileTransferPresence(@FileTransferPresence int fileTransferPresence) {
    mFileTransferPresence = fileTransferPresence;
    return this;
}
#method_after
@CheckResult
public Builder setFileTransferPresence(int fileTransferPresence) {
    mFileTransferPresence = fileTransferPresence;
    return this;
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    Uri newIconUri = Uri.parse("content://new_icon");
    RcsGroupThreadIconChangedEvent iconChangedEvent = RcsGroupThreadIconChangedEvent.builder(rcsGroupThread, rcsParticipant).setNewIcon(newIconUri).setTimestamp(1234567890).buildForTest();
    Parcel parcel = Parcel.obtain();
    iconChangedEvent.writeToParcel(parcel, iconChangedEvent.describeContents());
    parcel.setDataPosition(0);
    iconChangedEvent = RcsGroupThreadIconChangedEvent.CREATOR.createFromParcel(parcel);
    assertThat(iconChangedEvent.getNewIcon()).isEqualTo(newIconUri);
    assertThat(iconChangedEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(iconChangedEvent.getOriginatingParticipant().getId()).isEqualTo(2);
    assertThat(iconChangedEvent.getTimestamp()).isEqualTo(1234567890);
}
#method_after
@Test
public void testCanUnparcel() {
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    Uri newIconUri = Uri.parse("content://new_icon");
    RcsGroupThreadIconChangedEvent iconChangedEvent = new RcsGroupThreadIconChangedEvent(1234567890, rcsGroupThread, rcsParticipant, newIconUri);
    Parcel parcel = Parcel.obtain();
    iconChangedEvent.writeToParcel(parcel, iconChangedEvent.describeContents());
    parcel.setDataPosition(0);
    iconChangedEvent = RcsGroupThreadIconChangedEvent.CREATOR.createFromParcel(parcel);
    assertThat(iconChangedEvent.getNewIcon()).isEqualTo(newIconUri);
    assertThat(iconChangedEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(iconChangedEvent.getOriginatingParticipant().getId()).isEqualTo(2);
    assertThat(iconChangedEvent.getTimestamp()).isEqualTo(1234567890);
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeInt(mId);
    dest.writeLong(mTimestamp);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeLong(mTimestamp);
}
#end_block

#method_before
@Nullable
@WorkerThread
public String getCanonicalAddress() throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getParticipantCanonicalAddress(mId));
}
#method_after
@Nullable
@WorkerThread
public String getCanonicalAddress() throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getRcsParticipantCanonicalAddress(mId));
}
#end_block

#method_before
@Nullable
@WorkerThread
public String getAlias() throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getParticipantAlias(mId));
}
#method_after
@Nullable
@WorkerThread
public String getAlias() throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getRcsParticipantAlias(mId));
}
#end_block

#method_before
@WorkerThread
public void setAlias(String alias) throws RcsMessageStoreException {
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.updateRcsParticipantAlias(mId, alias));
}
#method_after
@WorkerThread
public void setAlias(String alias) throws RcsMessageStoreException {
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.setRcsParticipantAlias(mId, alias));
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeParcelable(mOldIcon, flags);
    dest.writeParcelable(mNewIcon, flags);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeParcelable(mNewIcon, flags);
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    RcsGroupThreadParticipantJoinedEvent participantJoinedEvent = RcsGroupThreadParticipantJoinedEvent.builder(rcsGroupThread, rcsParticipant).setJoinedParticipant(rcsParticipant).setTimestamp(1234567890).buildForTest();
    Parcel parcel = Parcel.obtain();
    participantJoinedEvent.writeToParcel(parcel, participantJoinedEvent.describeContents());
    parcel.setDataPosition(0);
    participantJoinedEvent = RcsGroupThreadParticipantJoinedEvent.CREATOR.createFromParcel(parcel);
    assertThat(participantJoinedEvent.getJoinedParticipant().getId()).isEqualTo(2);
    assertThat(participantJoinedEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(participantJoinedEvent.getOriginatingParticipant().getId()).isEqualTo(2);
    assertThat(participantJoinedEvent.getTimestamp()).isEqualTo(1234567890);
}
#method_after
@Test
public void testCanUnparcel() {
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    RcsGroupThreadParticipantJoinedEvent participantJoinedEvent = new RcsGroupThreadParticipantJoinedEvent(1234567890, rcsGroupThread, rcsParticipant, rcsParticipant);
    Parcel parcel = Parcel.obtain();
    participantJoinedEvent.writeToParcel(parcel, participantJoinedEvent.describeContents());
    parcel.setDataPosition(0);
    participantJoinedEvent = RcsGroupThreadParticipantJoinedEvent.CREATOR.createFromParcel(parcel);
    assertThat(participantJoinedEvent.getJoinedParticipant().getId()).isEqualTo(2);
    assertThat(participantJoinedEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(participantJoinedEvent.getOriginatingParticipant().getId()).isEqualTo(2);
    assertThat(participantJoinedEvent.getTimestamp()).isEqualTo(1234567890);
}
#end_block

#method_before
static <R> R call(RcsServiceCall<R> serviceCall) throws RcsMessageStoreException {
    IRcs iRcs = IRcs.Stub.asInterface(ServiceManager.getService("ircs"));
    if (iRcs == null) {
        throw new RcsMessageStoreException("Could not connect to RCS storage service");
    }
    try {
        return serviceCall.call(iRcs);
    } catch (RemoteException exception) {
        throw new RcsMessageStoreException(exception.getMessage());
    }
}
#method_after
static <R> R call(RcsServiceCall<R> serviceCall) throws RcsMessageStoreException {
    IRcs iRcs = IRcs.Stub.asInterface(ServiceManager.getService(Context.TELEPHONY_RCS_SERVICE));
    if (iRcs == null) {
        throw new RcsMessageStoreException("Could not connect to RCS storage service");
    }
    try {
        return serviceCall.methodOnIRcs(iRcs);
    } catch (RemoteException exception) {
        throw new RcsMessageStoreException(exception.getMessage());
    }
}
#end_block

#method_before
static void callWithNoReturn(RcsServiceCallWithNoReturn serviceCall) throws RcsMessageStoreException {
    IRcs iRcs = IRcs.Stub.asInterface(ServiceManager.getService("ircs"));
    if (iRcs == null) {
        throw new RcsMessageStoreException("Could not connect to RCS storage service");
    }
    try {
        serviceCall.call(iRcs);
    } catch (RemoteException exception) {
        throw new RcsMessageStoreException(exception.getMessage());
    }
}
#method_after
static void callWithNoReturn(RcsServiceCallWithNoReturn serviceCall) throws RcsMessageStoreException {
    IRcs iRcs = IRcs.Stub.asInterface(ServiceManager.getService(Context.TELEPHONY_RCS_SERVICE));
    if (iRcs == null) {
        throw new RcsMessageStoreException("Could not connect to RCS storage service");
    }
    try {
        serviceCall.methodOnIRcs(iRcs);
    } catch (RemoteException exception) {
        throw new RcsMessageStoreException(exception.getMessage());
    }
}
#end_block

#method_before
@WorkerThread
public void setGroupIcon(Uri groupIcon) throws RcsMessageStoreException {
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.setGroupThreadIcon(mThreadId, groupIcon));
}
#method_after
@WorkerThread
public void setGroupIcon(@Nullable Uri groupIcon) throws RcsMessageStoreException {
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.setGroupThreadIcon(mThreadId, groupIcon));
}
#end_block

#method_before
@WorkerThread
@NonNull
public Set<RcsParticipant> getParticipants() throws RcsMessageStoreException {
    RcsParticipantQueryParameters queryParameters = new RcsParticipantQueryParameters.Builder().inThread(this).build();
    RcsParticipantQueryResult queryResult = RcsControllerCall.call(iRcs -> iRcs.getParticipants(queryParameters));
    List<RcsParticipant> participantList = queryResult.getParticipants();
    Set<RcsParticipant> participantSet = new LinkedHashSet<>(participantList);
    return Collections.unmodifiableSet(participantSet);
}
#method_after
@WorkerThread
@NonNull
public Set<RcsParticipant> getParticipants() throws RcsMessageStoreException {
    RcsParticipantQueryParameters queryParameters = new RcsParticipantQueryParameters.Builder().setThread(this).build();
    RcsParticipantQueryResult queryResult = RcsControllerCall.call(iRcs -> iRcs.getParticipants(queryParameters));
    List<RcsParticipant> participantList = queryResult.getParticipants();
    Set<RcsParticipant> participantSet = new LinkedHashSet<>(participantList);
    return Collections.unmodifiableSet(participantSet);
}
#end_block

#method_before
private static List<Integer> convertParticipantSetToIdList(Set<RcsParticipant> participants) {
    List<Integer> ids = new ArrayList<Integer>(participants.size());
    for (RcsParticipant participant : participants) {
        ids.add(participant.getId());
    }
    return ids;
}
#method_after
private static List<Integer> convertParticipantSetToIdList(Set<RcsParticipant> participants) {
    List<Integer> ids = new ArrayList<>(participants.size());
    for (RcsParticipant participant : participants) {
        ids.add(participant.getId());
    }
    return ids;
}
#end_block

#method_before
@ThreadType
public int getThreadType() {
    return mThreadType;
}
#method_after
public int getThreadType() {
    return mThreadType;
}
#end_block

#method_before
public int getSortingProperty() {
    return mSortingProperty;
}
#method_after
@SortingProperty
public int getSortingProperty() {
    return mSortingProperty;
}
#end_block

#method_before
@CheckResult
public Builder setThreadType(@ThreadType int threadType) {
    mThreadType = threadType;
    return this;
}
#method_after
@CheckResult
public Builder setThreadType(int threadType) {
    mThreadType = threadType;
    return this;
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeString(mOldName);
    dest.writeString(mNewName);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeString(mNewName);
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    RcsParticipantQueryParameters rcsParticipantQueryParameters = new RcsParticipantQueryParameters.Builder().setAliasLike("%alias_").setCanonicalAddressLike("_canonical%").sortBy(RcsParticipantQueryParameters.CANONICAL_ADDRESS).sortAscending(true).limitResultsTo(432).build();
    Parcel parcel = Parcel.obtain();
    rcsParticipantQueryParameters.writeToParcel(parcel, rcsParticipantQueryParameters.describeContents());
    parcel.setDataPosition(0);
    rcsParticipantQueryParameters = RcsParticipantQueryParameters.CREATOR.createFromParcel(parcel);
    assertThat(rcsParticipantQueryParameters.getAliasLike()).isEqualTo("%alias_");
    assertThat(rcsParticipantQueryParameters.getCanonicalAddressLike()).contains("_canonical%");
    assertThat(rcsParticipantQueryParameters.getLimit()).isEqualTo(432);
    assertThat(rcsParticipantQueryParameters.getSortingProperty()).isEqualTo(RcsParticipantQueryParameters.CANONICAL_ADDRESS);
    assertThat(rcsParticipantQueryParameters.isAscending()).isTrue();
}
#method_after
@Test
public void testCanUnparcel() {
    RcsParticipantQueryParameters rcsParticipantQueryParameters = new RcsParticipantQueryParameters.Builder().setAliasLike("%alias_").setCanonicalAddressLike("_canonical%").setSortProperty(RcsParticipantQueryParameters.SORT_BY_CANONICAL_ADDRESS).setSortDirection(true).setResultLimit(432).build();
    Parcel parcel = Parcel.obtain();
    rcsParticipantQueryParameters.writeToParcel(parcel, rcsParticipantQueryParameters.describeContents());
    parcel.setDataPosition(0);
    rcsParticipantQueryParameters = RcsParticipantQueryParameters.CREATOR.createFromParcel(parcel);
    assertThat(rcsParticipantQueryParameters.getAliasLike()).isEqualTo("%alias_");
    assertThat(rcsParticipantQueryParameters.getCanonicalAddressLike()).contains("_canonical%");
    assertThat(rcsParticipantQueryParameters.getLimit()).isEqualTo(432);
    assertThat(rcsParticipantQueryParameters.getSortingProperty()).isEqualTo(RcsParticipantQueryParameters.SORT_BY_CANONICAL_ADDRESS);
    assertThat(rcsParticipantQueryParameters.getSortDirection()).isTrue();
}
#end_block

#method_before
public String getRcsMessageGlobalId() {
    return mRcsMessageGlobalId;
}
#method_after
@Nullable
public String getRcsMessageGlobalId() {
    return mRcsMessageGlobalId;
}
#end_block

#method_before
public String getText() {
    return mText;
}
#method_after
@Nullable
public String getText() {
    return mText;
}
#end_block

#method_before
public Builder setStatus(@RcsMessage.RcsMessageStatus int rcsMessageStatus) {
    mMessageStatus = rcsMessageStatus;
    return this;
}
#method_after
@CheckResult
public Builder setStatus(@RcsMessage.RcsMessageStatus int rcsMessageStatus) {
    mMessageStatus = rcsMessageStatus;
    return this;
}
#end_block

#method_before
public Builder setRcsMessageId(String rcsMessageId) {
    mRcsMessageGlobalId = rcsMessageId;
    return this;
}
#method_after
@CheckResult
public Builder setRcsMessageId(String rcsMessageId) {
    mRcsMessageGlobalId = rcsMessageId;
    return this;
}
#end_block

#method_before
public Builder setText(String text) {
    mText = text;
    return this;
}
#method_after
@CheckResult
public Builder setText(String text) {
    mText = text;
    return this;
}
#end_block

#method_before
public Builder setLatitude(double latitude) {
    mLatitude = latitude;
    return this;
}
#method_after
@CheckResult
public Builder setLatitude(double latitude) {
    mLatitude = latitude;
    return this;
}
#end_block

#method_before
public Builder setLongitude(double longitude) {
    mLongitude = longitude;
    return this;
}
#method_after
@CheckResult
public Builder setLongitude(double longitude) {
    mLongitude = longitude;
    return this;
}
#end_block

#method_before
public long getSeenTimestamp() throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getOutgoingDeliverySeenTimestamp(mRcsOutgoingMessageId, mRecipientId));
}
#method_after
@WorkerThread
public long getSeenTimestamp() throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getOutgoingDeliverySeenTimestamp(mRcsOutgoingMessageId, mRecipientId));
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    RcsParticipantAliasChangedEvent aliasChangedEvent = RcsParticipantAliasChangedEvent.builder(mParticipant).setTimestamp(1234567890).setOldAlias(OLD_ALIAS).setNewAlias(NEW_ALIAS).buildForTest();
    Parcel parcel = Parcel.obtain();
    aliasChangedEvent.writeToParcel(parcel, aliasChangedEvent.describeContents());
    parcel.setDataPosition(0);
    aliasChangedEvent = RcsParticipantAliasChangedEvent.CREATOR.createFromParcel(parcel);
    assertThat(aliasChangedEvent.getParticipantId().getId()).isEqualTo(3);
    assertThat(aliasChangedEvent.getOldAlias()).isEqualTo(OLD_ALIAS);
    assertThat(aliasChangedEvent.getNewAlias()).isEqualTo(NEW_ALIAS);
    assertThat(aliasChangedEvent.getTimestamp()).isEqualTo(1234567890);
}
#method_after
@Test
public void testCanUnparcel() {
    RcsParticipantAliasChangedEvent aliasChangedEvent = new RcsParticipantAliasChangedEvent(1234567890, mParticipant, NEW_ALIAS);
    Parcel parcel = Parcel.obtain();
    aliasChangedEvent.writeToParcel(parcel, aliasChangedEvent.describeContents());
    parcel.setDataPosition(0);
    aliasChangedEvent = RcsParticipantAliasChangedEvent.CREATOR.createFromParcel(parcel);
    assertThat(aliasChangedEvent.getParticipantId().getId()).isEqualTo(3);
    assertThat(aliasChangedEvent.getNewAlias()).isEqualTo(NEW_ALIAS);
    assertThat(aliasChangedEvent.getTimestamp()).isEqualTo(1234567890);
}
#end_block

#method_before
@WorkerThread
@NonNull
public RcsThreadQueryResult getRcsThreads(RcsThreadQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getRcsThreadsWithToken(continuationToken));
}
#method_after
@WorkerThread
@NonNull
public RcsThreadQueryResult getRcsThreads(@NonNull RcsQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getRcsThreadsWithToken(continuationToken));
}
#end_block

#method_before
@WorkerThread
@NonNull
public RcsParticipantQueryResult getRcsParticipants(RcsParticipantQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getParticipantsWithToken(continuationToken));
}
#method_after
@WorkerThread
@NonNull
public RcsParticipantQueryResult getRcsParticipants(@NonNull RcsQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getParticipantsWithToken(continuationToken));
}
#end_block

#method_before
@WorkerThread
@NonNull
public RcsMessageQueryResult getRcsMessages(RcsMessageQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getMessagesWithToken(continuationToken));
}
#method_after
@WorkerThread
@NonNull
public RcsMessageQueryResult getRcsMessages(@NonNull RcsQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getMessagesWithToken(continuationToken));
}
#end_block

#method_before
@WorkerThread
@NonNull
public RcsEventQueryResult getRcsEvents(RcsEventQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getEventsWithToken(continuationToken));
}
#method_after
@WorkerThread
@NonNull
public RcsEventQueryResult getRcsEvents(@NonNull RcsQueryContinuationToken continuationToken) throws RcsMessageStoreException {
    return RcsControllerCall.call(iRcs -> iRcs.getEventsWithToken(continuationToken));
}
#end_block

#method_before
@WorkerThread
public void deleteThread(@NonNull RcsThread thread) throws RcsMessageStoreException {
    if (thread == null) {
        return;
    }
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.deleteThread(thread.getThreadId(), thread.getThreadType()));
}
#method_after
@WorkerThread
public void deleteThread(@NonNull RcsThread thread) throws RcsMessageStoreException {
    if (thread == null) {
        return;
    }
    boolean isDeleteSucceeded = RcsControllerCall.call(iRcs -> iRcs.deleteThread(thread.getThreadId(), thread.getThreadType()));
    if (!isDeleteSucceeded) {
        throw new RcsMessageStoreException("Could not delete RcsThread");
    }
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    String oldName = "old name";
    String newName = "new name";
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    RcsGroupThreadNameChangedEvent nameChangedEvent = RcsGroupThreadNameChangedEvent.builder(rcsGroupThread, rcsParticipant).setOldName(oldName).setNewName(newName).setTimestamp(1234567890).buildForTest();
    Parcel parcel = Parcel.obtain();
    nameChangedEvent.writeToParcel(parcel, nameChangedEvent.describeContents());
    parcel.setDataPosition(0);
    nameChangedEvent = RcsGroupThreadNameChangedEvent.CREATOR.createFromParcel(parcel);
    assertThat(nameChangedEvent.getOldName()).isEqualTo(oldName);
    assertThat(nameChangedEvent.getNewName()).isEqualTo(newName);
    assertThat(nameChangedEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(nameChangedEvent.getOriginatingParticipant().getId()).isEqualTo(2);
    assertThat(nameChangedEvent.getTimestamp()).isEqualTo(1234567890);
}
#method_after
@Test
public void testCanUnparcel() {
    String newName = "new name";
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    RcsGroupThreadNameChangedEvent nameChangedEvent = new RcsGroupThreadNameChangedEvent(1234567890, rcsGroupThread, rcsParticipant, newName);
    Parcel parcel = Parcel.obtain();
    nameChangedEvent.writeToParcel(parcel, nameChangedEvent.describeContents());
    parcel.setDataPosition(0);
    nameChangedEvent = RcsGroupThreadNameChangedEvent.CREATOR.createFromParcel(parcel);
    assertThat(nameChangedEvent.getNewName()).isEqualTo(newName);
    assertThat(nameChangedEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(nameChangedEvent.getOriginatingParticipant().getId()).isEqualTo(2);
    assertThat(nameChangedEvent.getTimestamp()).isEqualTo(1234567890);
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    RcsParticipant rcsParticipant = new RcsParticipant(1);
    RcsThreadQueryParameters rcsThreadQueryParameters = RcsThreadQueryParameters.builder().setThreadType(ONLY_GROUP_THREADS).withParticipant(rcsParticipant).limitResultsTo(50).sortBy(TIMESTAMP).sortAscending(true).build();
    Parcel parcel = Parcel.obtain();
    rcsThreadQueryParameters.writeToParcel(parcel, rcsThreadQueryParameters.describeContents());
    parcel.setDataPosition(0);
    rcsThreadQueryParameters = RcsThreadQueryParameters.CREATOR.createFromParcel(parcel);
    assertThat(rcsThreadQueryParameters.getThreadType()).isEqualTo(ONLY_GROUP_THREADS);
    assertThat(rcsThreadQueryParameters.getRcsParticipantsIds()).contains(rcsParticipant.getId());
    assertThat(rcsThreadQueryParameters.getLimit()).isEqualTo(50);
    assertThat(rcsThreadQueryParameters.getSortingProperty()).isEqualTo(TIMESTAMP);
    assertThat(rcsThreadQueryParameters.isAscending()).isTrue();
}
#method_after
@Test
public void testCanUnparcel() {
    RcsParticipant rcsParticipant = new RcsParticipant(1);
    RcsThreadQueryParameters rcsThreadQueryParameters = new RcsThreadQueryParameters.Builder().setThreadType(THREAD_TYPE_GROUP).setParticipant(rcsParticipant).setResultLimit(50).setSortProperty(SORT_BY_TIMESTAMP).setSortDirection(true).build();
    Parcel parcel = Parcel.obtain();
    rcsThreadQueryParameters.writeToParcel(parcel, rcsThreadQueryParameters.describeContents());
    parcel.setDataPosition(0);
    rcsThreadQueryParameters = RcsThreadQueryParameters.CREATOR.createFromParcel(parcel);
    assertThat(rcsThreadQueryParameters.getThreadType()).isEqualTo(THREAD_TYPE_GROUP);
    assertThat(rcsThreadQueryParameters.getRcsParticipantsIds()).contains(rcsParticipant.getId());
    assertThat(rcsThreadQueryParameters.getLimit()).isEqualTo(50);
    assertThat(rcsThreadQueryParameters.getSortingProperty()).isEqualTo(SORT_BY_TIMESTAMP);
    assertThat(rcsThreadQueryParameters.getSortDirection()).isTrue();
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeString(mRcsFileTransferSessionId);
    dest.writeParcelable(mContentUri, flags);
    dest.writeString(mContentType);
    dest.writeLong(mFileSize);
    dest.writeLong(mTransferOffset);
    dest.writeInt(mWidth);
    dest.writeInt(mHeight);
    dest.writeLong(mLength);
    dest.writeParcelable(mPreviewUri, flags);
    dest.writeString(mPreviewType);
    dest.writeInt(mFileTransferStatus);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeString(mRcsFileTransferSessionId);
    dest.writeParcelable(mContentUri, flags);
    dest.writeString(mContentMimeType);
    dest.writeLong(mFileSize);
    dest.writeLong(mTransferOffset);
    dest.writeInt(mWidth);
    dest.writeInt(mHeight);
    dest.writeLong(mMediaDuration);
    dest.writeParcelable(mPreviewUri, flags);
    dest.writeString(mPreviewMimeType);
    dest.writeInt(mFileTransferStatus);
}
#end_block

#method_before
@NonNull
@WorkerThread
public List<RcsOutgoingMessageDelivery> getOutgoingDeliveries() throws RcsMessageStoreException {
    int[] deliveryParticipants;
    List<RcsOutgoingMessageDelivery> messageDeliveries = new ArrayList<>();
    deliveryParticipants = RcsControllerCall.call(iRcs -> iRcs.getOutgoingDeliveriesForMessage(mId));
    if (deliveryParticipants != null) {
        for (Integer deliveryParticipant : deliveryParticipants) {
            messageDeliveries.add(new RcsOutgoingMessageDelivery(deliveryParticipant, mId));
        }
    }
    return messageDeliveries;
}
#method_after
@NonNull
@WorkerThread
public List<RcsOutgoingMessageDelivery> getOutgoingDeliveries() throws RcsMessageStoreException {
    int[] deliveryParticipants;
    List<RcsOutgoingMessageDelivery> messageDeliveries = new ArrayList<>();
    deliveryParticipants = RcsControllerCall.call(iRcs -> iRcs.getMessageRecipients(mId));
    if (deliveryParticipants != null) {
        for (Integer deliveryParticipant : deliveryParticipants) {
            messageDeliveries.add(new RcsOutgoingMessageDelivery(deliveryParticipant, mId));
        }
    }
    return messageDeliveries;
}
#end_block

#method_before
@WorkerThread
@NonNull
public RcsIncomingMessage addIncomingMessage(RcsIncomingMessageCreationParameters rcsIncomingMessageCreationParameters) throws RcsMessageStoreException {
    return new RcsIncomingMessage(RcsControllerCall.call(iRcs -> iRcs.addIncomingMessage(mThreadId, rcsIncomingMessageCreationParameters)));
}
#method_after
@WorkerThread
@NonNull
public RcsIncomingMessage addIncomingMessage(@NonNull RcsIncomingMessageCreationParameters rcsIncomingMessageCreationParameters) throws RcsMessageStoreException {
    return new RcsIncomingMessage(RcsControllerCall.call(iRcs -> iRcs.addIncomingMessage(mThreadId, rcsIncomingMessageCreationParameters)));
}
#end_block

#method_before
@WorkerThread
@NonNull
public RcsOutgoingMessage addOutgoingMessage(RcsOutgoingMessageCreationParameters rcsOutgoingMessageCreationParameters) throws RcsMessageStoreException {
    int messageId = RcsControllerCall.call(iRcs -> iRcs.addOutgoingMessage(mThreadId, rcsOutgoingMessageCreationParameters));
    return new RcsOutgoingMessage(messageId);
}
#method_after
@WorkerThread
@NonNull
public RcsOutgoingMessage addOutgoingMessage(@NonNull RcsMessageCreationParameters rcsMessageCreationParameters) throws RcsMessageStoreException {
    int messageId = RcsControllerCall.call(iRcs -> iRcs.addOutgoingMessage(mThreadId, rcsMessageCreationParameters));
    return new RcsOutgoingMessage(messageId);
}
#end_block

#method_before
@WorkerThread
public void deleteMessage(RcsMessage rcsMessage) throws RcsMessageStoreException {
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.deleteMessage(rcsMessage.getId(), rcsMessage.isIncoming(), mThreadId, isGroup()));
}
#method_after
@WorkerThread
public void deleteMessage(@NonNull RcsMessage rcsMessage) throws RcsMessageStoreException {
    RcsControllerCall.callWithNoReturn(iRcs -> iRcs.deleteMessage(rcsMessage.getId(), rcsMessage.isIncoming(), mThreadId, isGroup()));
}
#end_block

#method_before
@WorkerThread
public RcsMessageQueryResult getMessages() throws RcsMessageStoreException {
    RcsMessageQueryParameters queryParameters = RcsMessageQueryParameters.builder().limitToThread(this).build();
    return RcsControllerCall.call(iRcs -> iRcs.getMessages(queryParameters));
}
#method_after
@WorkerThread
@NonNull
public RcsMessageQueryResult getMessages() throws RcsMessageStoreException {
    RcsMessageQueryParameters queryParameters = new RcsMessageQueryParameters.Builder().setThread(this).build();
    return RcsControllerCall.call(iRcs -> iRcs.getMessages(queryParameters));
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeLong(mArrivalTimestamp);
    dest.writeLong(mNotifiedTimestamp);
    dest.writeInt(mSenderParticipantId);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeLong(mArrivalTimestamp);
    dest.writeLong(mSeenTimestamp);
    dest.writeInt(mSenderParticipantId);
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeString(mOldAlias);
    dest.writeString(mNewAlias);
    dest.writeInt(mParticipantId);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    super.writeToParcel(dest, flags);
    dest.writeString(mNewAlias);
    dest.writeInt(mParticipantId);
}
#end_block

#method_before
@Test
public void testCanUnparcel() {
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    RcsGroupThreadParticipantLeftEvent participantLeftEvent = RcsGroupThreadParticipantLeftEvent.builder(rcsGroupThread, rcsParticipant).setLeavingParticipant(rcsParticipant).setTimestamp(1234567890).buildForTest();
    Parcel parcel = Parcel.obtain();
    participantLeftEvent.writeToParcel(parcel, participantLeftEvent.describeContents());
    parcel.setDataPosition(0);
    // create from parcel
    parcel.setDataPosition(0);
    participantLeftEvent = RcsGroupThreadParticipantLeftEvent.CREATOR.createFromParcel(parcel);
    assertThat(participantLeftEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(participantLeftEvent.getLeavingParticipantId().getId()).isEqualTo(2);
    assertThat(participantLeftEvent.getTimestamp()).isEqualTo(1234567890);
}
#method_after
@Test
public void testCanUnparcel() {
    RcsGroupThread rcsGroupThread = new RcsGroupThread(1);
    RcsParticipant rcsParticipant = new RcsParticipant(2);
    RcsGroupThreadParticipantLeftEvent participantLeftEvent = new RcsGroupThreadParticipantLeftEvent(1234567890, rcsGroupThread, rcsParticipant, rcsParticipant);
    Parcel parcel = Parcel.obtain();
    participantLeftEvent.writeToParcel(parcel, participantLeftEvent.describeContents());
    parcel.setDataPosition(0);
    // create from parcel
    parcel.setDataPosition(0);
    participantLeftEvent = RcsGroupThreadParticipantLeftEvent.CREATOR.createFromParcel(parcel);
    assertThat(participantLeftEvent.getRcsGroupThread().getThreadId()).isEqualTo(1);
    assertThat(participantLeftEvent.getLeavingParticipantId().getId()).isEqualTo(2);
    assertThat(participantLeftEvent.getTimestamp()).isEqualTo(1234567890);
}
#end_block

#method_before
public RcsEventQueryParameters build() {
    return new RcsEventQueryParameters(mEventType, mSortingProperty, mIsAscending, mLimit);
}
#method_after
public RcsEventQueryParameters build() {
    return new RcsEventQueryParameters(mEventType, mThreadId, mSortingProperty, mIsAscending, mLimit);
}
#end_block

#method_before
@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeInt(mEventType);
    dest.writeInt(mSortingProperty);
    dest.writeBoolean(mIsAscending);
    dest.writeInt(mLimit);
}
#method_after
@Override
public void writeToParcel(Parcel dest, int flags) {
    dest.writeInt(mEventType);
    dest.writeInt(mThreadId);
    dest.writeInt(mSortingProperty);
    dest.writeBoolean(mIsAscending);
    dest.writeInt(mLimit);
}
#end_block

#method_before
@VisibleForTesting
public static void createThreadTables(SQLiteDatabase db) {
    Log.d(TAG, "Creating thread tables");
    // Add the thread tables
    db.execSQL("CREATE TABLE " + RCS_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT);");
    db.execSQL("CREATE TABLE " + RCS_1_TO_1_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + " INTEGER PRIMARY KEY, " + FALLBACK_THREAD_ID_COLUMN + " INTEGER, " + "FOREIGN KEY(" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + "(" + RCS_THREAD_ID_COLUMN + ")," + "FOREIGN KEY(" + FALLBACK_THREAD_ID_COLUMN + ") REFERENCES threads( " + BaseColumns._ID + "))");
    db.execSQL("CREATE TABLE " + RCS_GROUP_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + " INTEGER PRIMARY KEY, " + OWNER_PARTICIPANT_COLUMN + " INTEGER, " + GROUP_NAME_COLUMN + " TEXT, " + GROUP_ICON_COLUMN + " TEXT, " + CONFERENCE_URI_COLUMN + " TEXT, " + "FOREIGN KEY(" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + "(" + RCS_THREAD_ID_COLUMN + "))");
    // Add the views
    // The following is a unified thread view. Since SQLite does not support right or full
    // joins, we are using a union with null values for unused variables for each thread type.
    // The isGroup column is an easy way to figure out whether the entry came from a 1 to 1
    // thread or a group thread. The last message is added to figure out the latest threads and
    // snippet text. We use COALESCE so that MAX() can take null values into account in order to
    // have threads with no messages still represented here
    // 
    // SELECT <1 to 1 thread and first message>
    // FROM (
    // SELECT *
    // FROM rcs_1_to_1_thread LEFT JOIN rcs_message
    // ON rcs_1_to_1_thread.rcs_thread_id=rcs_message.rcs_thread_id)
    // GROUP BY rcs_thread_id
    // HAVING MAX(COALESCE(origination_timestamp,1))
    // 
    // UNION
    // SELECT <group thread and first message>
    // FROM (
    // SELECT *
    // FROM rcs_group_thread LEFT JOIN rcs_message
    // ON rcs_group_thread.rcs_thread_id=rcs_message.rcs_thread_id)
    // GROUP BY rcs_thread_id
    // HAVING MAX(COALESCE(origination_timestamp,1))
    db.execSQL("CREATE VIEW " + UNIFIED_RCS_THREAD_VIEW + " AS " + "SELECT rcs_thread_id, rcs_fallback_thread_id, null AS owner_participant, null " + "AS group_name, null AS group_icon, null AS conference_uri, 0 AS thread_type, " + "origination_timestamp, rcs_text, status FROM (SELECT * FROM rcs_1_to_1_thread " + "LEFT JOIN rcs_message ON rcs_1_to_1_thread.rcs_thread_id=rcs_message" + ".rcs_thread_id) GROUP BY rcs_thread_id HAVING MAX(COALESCE" + "(origination_timestamp,1)) UNION SELECT rcs_thread_id, null AS " + "rcs_fallback_thread_id, owner_participant, group_name, group_icon, " + "conference_uri, 1 AS thread_type, origination_timestamp, rcs_text, status FROM " + "(SELECT * FROM rcs_group_thread LEFT JOIN rcs_message ON rcs_group_thread" + ".rcs_thread_id=rcs_message.rcs_thread_id) GROUP BY rcs_thread_id HAVING MAX" + "(COALESCE(origination_timestamp,1))");
    // Add the triggers
    // Delete the corresponding rcs_thread row upon deleting a row in rcs_1_to_1_thread
    // 
    // CREATE TRIGGER deleteRcsThreadBefore1to1
    // AFTER DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM rcs_thread WHERE rcs_thread._id=OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER deleteRcsThreadBefore1to1 AFTER DELETE ON rcs_1_to_1_thread BEGIN" + " DELETE FROM rcs_thread WHERE " + "rcs_thread.rcs_thread_id=OLD.rcs_thread_id; END");
    // Delete the corresponding rcs_thread row upon deleting a row in rcs_group_thread
    // 
    // CREATE TRIGGER deleteRcsThreadBefore1to1
    // AFTER DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM rcs_thread WHERE rcs_thread._id=OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER deleteRcsThreadBeforeGroup AFTER DELETE ON rcs_group_thread BEGIN" + " DELETE FROM rcs_thread WHERE " + "rcs_thread.rcs_thread_id=OLD.rcs_thread_id; END");
    // Delete the junction table entries upon deleting a 1 to 1 thread
    // 
    // CREATE TRIGGER delete1To1JunctionEntries
    // AFTER
    // DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM
    // rcs_thread_participant
    // WHERE
    // rcs_thread_participant.rcs_thread_id = OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER delete1To1JunctionEntries AFTER DELETE ON rcs_1_to_1_thread " + "BEGIN DELETE FROM rcs_thread_participant WHERE rcs_thread_participant" + ".rcs_thread_id=OLD.rcs_thread_id; END");
    // Delete the junction table entries upon deleting a group thread
    // 
    // CREATE TRIGGER delete1To1JunctionEntries
    // AFTER
    // DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM
    // rcs_thread_participant
    // WHERE
    // rcs_thread_participant.rcs_thread_id = OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER deleteGroupJunctionEntries AFTER DELETE ON rcs_group_thread " + "BEGIN DELETE FROM rcs_thread_participant WHERE rcs_thread_participant" + ".rcs_thread_id=OLD.rcs_thread_id; END");
// TODO - create indexes for faster querying
}
#method_after
@VisibleForTesting
public static void createThreadTables(SQLiteDatabase db) {
    Log.d(TAG, "Creating thread tables");
    // Add the thread tables
    db.execSQL("CREATE TABLE " + RCS_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT);");
    db.execSQL("CREATE TABLE " + RCS_1_TO_1_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + " INTEGER PRIMARY KEY, " + FALLBACK_THREAD_ID_COLUMN + " INTEGER, " + "FOREIGN KEY(" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + "(" + RCS_THREAD_ID_COLUMN + ")," + "FOREIGN KEY(" + FALLBACK_THREAD_ID_COLUMN + ") REFERENCES threads( " + BaseColumns._ID + "))");
    db.execSQL("CREATE TABLE " + RCS_GROUP_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + " INTEGER PRIMARY KEY, " + OWNER_PARTICIPANT_COLUMN + " INTEGER, " + GROUP_NAME_COLUMN + " TEXT, " + GROUP_ICON_COLUMN + " TEXT, " + CONFERENCE_URI_COLUMN + " TEXT, " + "FOREIGN KEY(" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + "(" + RCS_THREAD_ID_COLUMN + "))");
    // Add the views
    // The following is a unified thread view. Since SQLite does not support right or full
    // joins, we are using a union with null values for unused variables for each thread type.
    // The thread_type column is an easy way to figure out whether the entry came from a 1 to 1
    // thread or a group thread. The last message in each thread is appended to the table
    // entries to figure out the latest threads and snippet text. We use COALESCE so that MAX()
    // can take null values into account in order to have threads with no messages still
    // represented here
    // 
    // SELECT <1 to 1 thread and first message>
    // FROM (
    // SELECT *
    // FROM rcs_1_to_1_thread LEFT JOIN rcs_message
    // ON rcs_1_to_1_thread.rcs_thread_id=rcs_message.rcs_thread_id)
    // GROUP BY rcs_thread_id
    // HAVING MAX(COALESCE(origination_timestamp,1))
    // 
    // UNION
    // SELECT <group thread and first message>
    // FROM (
    // SELECT *
    // FROM rcs_group_thread LEFT JOIN rcs_message
    // ON rcs_group_thread.rcs_thread_id=rcs_message.rcs_thread_id)
    // GROUP BY rcs_thread_id
    // HAVING MAX(COALESCE(origination_timestamp,1))
    db.execSQL("CREATE VIEW " + UNIFIED_RCS_THREAD_VIEW + " AS " + "SELECT " + RCS_THREAD_ID_COLUMN + ", " + FALLBACK_THREAD_ID_COLUMN + ", " + "null AS " + OWNER_PARTICIPANT_COLUMN + ", " + "null AS " + GROUP_NAME_COLUMN + ", " + "null AS " + GROUP_ICON_COLUMN + ", " + "null AS " + CONFERENCE_URI_COLUMN + ", " + "0 AS " + THREAD_TYPE_COLUMN + ", " + ORIGINATION_TIMESTAMP_COLUMN + ", " + MESSAGE_TEXT_COLUMN + ", " + STATUS_COLUMN + " FROM (SELECT * FROM " + RCS_1_TO_1_THREAD_TABLE + " LEFT JOIN " + RCS_MESSAGE_TABLE + " ON " + RCS_1_TO_1_THREAD_TABLE + "." + RCS_THREAD_ID_COLUMN + "=" + RCS_MESSAGE_TABLE + "." + RCS_THREAD_ID_COLUMN + ")" + " GROUP BY " + RCS_THREAD_ID_COLUMN + " HAVING MAX(COALESCE(" + ORIGINATION_TIMESTAMP_COLUMN + ", 1))" + " UNION SELECT " + RCS_THREAD_ID_COLUMN + ", " + "null AS " + FALLBACK_THREAD_ID_COLUMN + ", " + OWNER_PARTICIPANT_COLUMN + ", " + GROUP_NAME_COLUMN + ", " + GROUP_ICON_COLUMN + ", " + CONFERENCE_URI_COLUMN + ", " + "1 AS " + THREAD_TYPE_COLUMN + ", " + ORIGINATION_TIMESTAMP_COLUMN + ", " + MESSAGE_TEXT_COLUMN + ", " + STATUS_COLUMN + " FROM (SELECT * FROM " + RCS_GROUP_THREAD_TABLE + " LEFT JOIN " + RCS_MESSAGE_TABLE + " ON " + RCS_GROUP_THREAD_TABLE + "." + RCS_THREAD_ID_COLUMN + "=" + RCS_MESSAGE_TABLE + "." + RCS_THREAD_ID_COLUMN + ")" + " GROUP BY " + RCS_THREAD_ID_COLUMN + " HAVING MAX(COALESCE(" + ORIGINATION_TIMESTAMP_COLUMN + ", 1))");
    // Add the triggers
    // Delete the corresponding rcs_thread row upon deleting a row in rcs_1_to_1_thread
    // 
    // CREATE TRIGGER deleteRcsThreadAfter1to1
    // AFTER DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM rcs_thread WHERE rcs_thread._id=OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER deleteRcsThreadAfter1to1 AFTER DELETE ON " + RCS_1_TO_1_THREAD_TABLE + " BEGIN DELETE FROM " + RCS_THREAD_TABLE + " WHERE " + RCS_THREAD_TABLE + "." + RCS_THREAD_ID_COLUMN + "=OLD." + RCS_THREAD_ID_COLUMN + "; END");
    // Delete the corresponding rcs_thread row upon deleting a row in rcs_group_thread
    // 
    // CREATE TRIGGER deleteRcsThreadAfter1to1
    // AFTER DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM rcs_thread WHERE rcs_thread._id=OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER deleteRcsThreadAfterGroup AFTER DELETE ON " + RCS_GROUP_THREAD_TABLE + " BEGIN DELETE FROM " + RCS_THREAD_TABLE + " WHERE " + RCS_THREAD_TABLE + "." + RCS_THREAD_ID_COLUMN + "=OLD." + RCS_THREAD_ID_COLUMN + "; END");
    // Delete the junction table entries upon deleting a 1 to 1 thread
    // 
    // CREATE TRIGGER delete1To1JunctionEntries
    // AFTER
    // DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM
    // rcs_thread_participant
    // WHERE
    // rcs_thread_participant.rcs_thread_id = OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER delete1To1JunctionEntries AFTER DELETE ON " + RCS_1_TO_1_THREAD_TABLE + " BEGIN DELETE FROM " + RCS_PARTICIPANT_THREAD_JUNCTION_TABLE + " WHERE " + RCS_PARTICIPANT_THREAD_JUNCTION_TABLE + "." + RCS_THREAD_ID_COLUMN + "=OLD." + RCS_THREAD_ID_COLUMN + "; END");
    // Delete the junction table entries upon deleting a group thread
    // 
    // CREATE TRIGGER delete1To1JunctionEntries
    // AFTER
    // DELETE ON rcs_1_to_1_thread
    // BEGIN
    // DELETE FROM
    // rcs_thread_participant
    // WHERE
    // rcs_thread_participant.rcs_thread_id = OLD.rcs_thread_id;
    // END
    db.execSQL("CREATE TRIGGER deleteGroupJunctionEntries AFTER DELETE ON " + RCS_GROUP_THREAD_TABLE + " BEGIN DELETE FROM " + RCS_PARTICIPANT_THREAD_JUNCTION_TABLE + " WHERE " + RCS_PARTICIPANT_THREAD_JUNCTION_TABLE + "." + RCS_THREAD_ID_COLUMN + "=OLD." + RCS_THREAD_ID_COLUMN + "; END");
// TODO - delete all messages in a thread after deleting a thread
// TODO - create indexes for faster querying
}
#end_block

#method_before
Cursor queryUnifiedThread(Bundle bundle) {
    RcsThreadQueryParameters queryParameters = null;
    RcsThreadQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(THREAD_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(THREAD_QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    if (queryParameters == null) {
        queryParameters = RcsThreadQueryParameters.builder().build();
    }
    return performInitialQuery(queryParameters);
}
#method_after
Cursor queryUnifiedThread(Bundle bundle) {
    RcsThreadQueryParameters queryParameters = null;
    RcsQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(THREAD_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    if (queryParameters == null) {
        queryParameters = new RcsThreadQueryParameters.Builder().build();
    }
    return performInitialQuery(queryParameters);
}
#end_block

#method_before
private Cursor performInitialQuery(RcsThreadQueryParameters queryParameters) {
    if (queryParameters == null) {
        // return everything for test purposes
        queryParameters = RcsThreadQueryParameters.builder().build();
    }
    SQLiteDatabase db = mSqLiteOpenHelper.getReadableDatabase();
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ").append(UNIFIED_RCS_THREAD_VIEW);
    if (queryParameters.getThreadType() == RcsThreadQueryParameters.ONLY_1_TO_1_THREADS) {
        rawQuery.append(" WHERE ").append(THREAD_TYPE_COLUMN).append("=0");
    } else if (queryParameters.getThreadType() == RcsThreadQueryParameters.ONLY_GROUP_THREADS) {
        rawQuery.append(" WHERE ").append(THREAD_TYPE_COLUMN).append("=1");
    }
    rawQuery.append(" ORDER BY ");
    if (queryParameters.getSortingProperty() == RcsThreadQueryParameters.TIMESTAMP) {
        rawQuery.append(ORIGINATION_TIMESTAMP_COLUMN);
    } else {
        rawQuery.append(RCS_THREAD_ID_COLUMN);
    }
    rawQuery.append(queryParameters.isAscending() ? " ASC " : " DESC ");
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // If this is a paginated query, build the next query and return as a Cursor extra. Only do
    // this if the current query returned a result.
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsThreadQueryContinuationToken(rawQueryAsString, limit, limit), THREAD_QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#method_after
private Cursor performInitialQuery(RcsThreadQueryParameters queryParameters) {
    if (queryParameters == null) {
        // return everything for test purposes
        queryParameters = new RcsThreadQueryParameters.Builder().build();
    }
    SQLiteDatabase db = mSqLiteOpenHelper.getReadableDatabase();
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ").append(UNIFIED_RCS_THREAD_VIEW);
    if (queryParameters.getThreadType() == RcsThreadQueryParameters.THREAD_TYPE_1_TO_1) {
        rawQuery.append(" WHERE ").append(THREAD_TYPE_COLUMN).append("=0");
    } else if (queryParameters.getThreadType() == RcsThreadQueryParameters.THREAD_TYPE_GROUP) {
        rawQuery.append(" WHERE ").append(THREAD_TYPE_COLUMN).append("=1");
    }
    rawQuery.append(" ORDER BY ");
    if (queryParameters.getSortingProperty() == RcsThreadQueryParameters.SORT_BY_TIMESTAMP) {
        rawQuery.append(ORIGINATION_TIMESTAMP_COLUMN);
    } else {
        rawQuery.append(RCS_THREAD_ID_COLUMN);
    }
    rawQuery.append(queryParameters.getSortDirection() ? " ASC " : " DESC ");
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // If this is a paginated query, build the next query and return as a Cursor extra. Only do
    // this if the current query returned a result.
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsQueryContinuationToken(THREAD_QUERY_CONTINUATION_TOKEN_TYPE, rawQueryAsString, limit, limit), QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#end_block

#method_before
@VisibleForTesting
public static void createRcsEventTables(SQLiteDatabase db) {
    Log.d(TAG, "Creating event tables");
    // Add the event tables
    db.execSQL("CREATE TABLE " + RCS_THREAD_EVENT_TABLE + "(" + EVENT_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + RCS_THREAD_ID_COLUMN + " INTEGER, " + ORIGINATING_PARTICIPANT_COLUMN + " INTEGER, " + EVENT_TYPE_COLUMN + " INTEGER, " + TIMESTAMP_COLUMN + " INTEGER, " + DESTINATION_PARTICIPANT_COLUMN + " INTEGER, " + OLD_ICON_URI_COLUMN + " TEXT, " + NEW_ICON_URI_COLUMN + " TEXT, " + OLD_NAME_COLUMN + " TEXT, " + NEW_NAME_COLUMN + " TEXT, " + " FOREIGN KEY (" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + "), FOREIGN KEY (" + ORIGINATING_PARTICIPANT_COLUMN + ") REFERENCES " + RCS_PARTICIPANT_TABLE + " (" + RCS_PARTICIPANT_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_PARTICIPANT_EVENT_TABLE + "(" + EVENT_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + ORIGINATING_PARTICIPANT_COLUMN + " INTEGER, " + TIMESTAMP_COLUMN + " INTEGER, " + OLD_ALIAS_COLUMN + " TEXT, " + NEW_ALIAS_COLUMN + " TEXT," + " FOREIGN KEY (" + ORIGINATING_PARTICIPANT_COLUMN + ") REFERENCES " + RCS_PARTICIPANT_TABLE + " (" + RCS_PARTICIPANT_ID_COLUMN + "))");
    // Add the views
    // The following is a unified event view that puts every entry in both tables into one query
    db.execSQL("CREATE VIEW " + RCS_UNIFIED_EVENT_VIEW + " AS " + "SELECT 1 AS event_type, event_id, originating_participant, " + "origination_timestamp, old_alias, new_alias, NULL as rcs_thread_id, NULL as " + "destination_participant, NULL as old_icon_uri, NULL as new_icon_uri, NULL as " + "old_name, NULL as new_name " + "FROM rcs_participant_event" + " UNION " + "SELECT event_type, event_id, originating_participant, origination_timestamp, " + "NULL as old_alias, NULL as new_alias, rcs_thread_id, destination_participant, " + "old_icon_uri, new_icon_uri, old_name, new_name " + "FROM rcs_thread_event");
}
#method_after
@VisibleForTesting
public static void createRcsEventTables(SQLiteDatabase db) {
    Log.d(TAG, "Creating event tables");
    // Add the event tables
    db.execSQL("CREATE TABLE " + RCS_THREAD_EVENT_TABLE + "(" + EVENT_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + RCS_THREAD_ID_COLUMN + " INTEGER, " + SOURCE_PARTICIPANT_ID_COLUMN + " INTEGER, " + EVENT_TYPE_COLUMN + " INTEGER, " + TIMESTAMP_COLUMN + " INTEGER, " + DESTINATION_PARTICIPANT_ID_COLUMN + " INTEGER, " + NEW_ICON_URI_COLUMN + " TEXT, " + NEW_NAME_COLUMN + " TEXT, " + " FOREIGN KEY (" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + " (" + RCS_THREAD_ID_COLUMN + "), FOREIGN KEY (" + SOURCE_PARTICIPANT_ID_COLUMN + ") REFERENCES " + RCS_PARTICIPANT_TABLE + " (" + RCS_PARTICIPANT_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_PARTICIPANT_EVENT_TABLE + "(" + EVENT_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + SOURCE_PARTICIPANT_ID_COLUMN + " INTEGER, " + TIMESTAMP_COLUMN + " INTEGER, " + NEW_ALIAS_COLUMN + " TEXT," + " FOREIGN KEY (" + SOURCE_PARTICIPANT_ID_COLUMN + ") REFERENCES " + RCS_PARTICIPANT_TABLE + " (" + RCS_PARTICIPANT_ID_COLUMN + "))");
    // Add the views
    // The following is a unified event view that puts every entry in both tables into one query
    db.execSQL("CREATE VIEW " + RCS_UNIFIED_EVENT_VIEW + " AS " + "SELECT 1 AS event_type, event_id, originating_participant, " + "origination_timestamp, old_alias, new_alias, NULL as rcs_thread_id, NULL as " + "destination_participant, NULL as old_icon_uri, NULL as new_icon_uri, NULL as " + "old_name, NULL as new_name " + "FROM rcs_participant_event" + " UNION " + "SELECT event_type, event_id, originating_participant, origination_timestamp, " + "NULL as old_alias, NULL as new_alias, rcs_thread_id, destination_participant, " + "old_icon_uri, new_icon_uri, old_name, new_name " + "FROM rcs_thread_event");
}
#end_block

#method_before
Cursor queryEvents(Bundle bundle) {
    RcsEventQueryParameters queryParameters = null;
    RcsEventQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(EVENT_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(EVENT_QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    // if no query parameters were entered, build an empty query parameters object
    if (queryParameters == null) {
        queryParameters = RcsEventQueryParameters.builder().build();
    }
    return performInitialQuery(queryParameters);
}
#method_after
Cursor queryEvents(Bundle bundle) {
    RcsEventQueryParameters queryParameters = null;
    RcsQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(EVENT_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    // if no query parameters were entered, build an empty query parameters object
    if (queryParameters == null) {
        queryParameters = new RcsEventQueryParameters.Builder().build();
    }
    return performInitialQuery(queryParameters);
}
#end_block

#method_before
private Cursor performInitialQuery(RcsEventQueryParameters queryParameters) {
    SQLiteDatabase db = mSqLiteOpenHelper.getReadableDatabase();
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ").append(RCS_UNIFIED_EVENT_VIEW);
    int eventType = queryParameters.getEventType();
    if (eventType != ALL_EVENTS) {
        rawQuery.append(" WHERE ").append(EVENT_TYPE_COLUMN);
        if (eventType == ALL_GROUP_THREAD_EVENTS) {
            rawQuery.append(" IN (").append(PARTICIPANT_JOINED_EVENT_TYPE).append(", ").append(PARTICIPANT_LEFT_EVENT_TYPE).append(", ").append(ICON_CHANGED_EVENT_TYPE).append(", ").append(NAME_CHANGED_EVENT_TYPE).append(")");
        } else {
            rawQuery.append("=").append(eventType);
        }
    }
    rawQuery.append(" ORDER BY ");
    int sortingProperty = queryParameters.getSortingProperty();
    if (sortingProperty == RcsEventQueryParameters.TIMESTAMP) {
        rawQuery.append(TIMESTAMP_COLUMN);
    } else {
        rawQuery.append(EVENT_ID_COLUMN);
    }
    rawQuery.append(queryParameters.isAscending() ? " ASC " : " DESC ");
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // if the query was paginated, build the next query
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsEventQueryContinuationToken(rawQueryAsString, limit, limit), EVENT_QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#method_after
private Cursor performInitialQuery(RcsEventQueryParameters queryParameters) {
    SQLiteDatabase db = mSqLiteOpenHelper.getReadableDatabase();
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ").append(RCS_UNIFIED_EVENT_VIEW);
    int eventType = queryParameters.getEventType();
    if (eventType != ALL_EVENTS) {
        rawQuery.append(" WHERE ").append(EVENT_TYPE_COLUMN);
        if (eventType == ALL_GROUP_THREAD_EVENTS) {
            rawQuery.append(" IN (").append(PARTICIPANT_JOINED_EVENT_TYPE).append(", ").append(PARTICIPANT_LEFT_EVENT_TYPE).append(", ").append(ICON_CHANGED_EVENT_TYPE).append(", ").append(NAME_CHANGED_EVENT_TYPE).append(")");
        } else {
            rawQuery.append("=").append(eventType);
        }
    }
    rawQuery.append(" ORDER BY ");
    int sortingProperty = queryParameters.getSortingProperty();
    if (sortingProperty == RcsEventQueryParameters.SORT_BY_TIMESTAMP) {
        rawQuery.append(TIMESTAMP_COLUMN);
    } else {
        rawQuery.append(EVENT_ID_COLUMN);
    }
    rawQuery.append(queryParameters.getSortDirection() ? " ASC " : " DESC ");
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // if the query was paginated, build the next query
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsQueryContinuationToken(EVENT_QUERY_CONTINUATION_TOKEN_TYPE, rawQueryAsString, limit, limit), QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#end_block

#method_before
long insertParticipantEvent(Uri uri, ContentValues values) {
    String participantId = getParticipantIdFromUri(uri);
    SQLiteDatabase db = mSqLiteOpenHelper.getWritableDatabase();
    values.put(ORIGINATING_PARTICIPANT_COLUMN, participantId);
    long rowId = db.insert(RCS_PARTICIPANT_EVENT_TABLE, ORIGINATING_PARTICIPANT_COLUMN, values);
    values.remove(ORIGINATING_PARTICIPANT_COLUMN);
    if (rowId == INSERTION_FAILED) {
        return TRANSACTION_FAILED;
    }
    return rowId;
}
#method_after
long insertParticipantEvent(Uri uri, ContentValues values) {
    String participantId = getParticipantIdFromUri(uri);
    SQLiteDatabase db = mSqLiteOpenHelper.getWritableDatabase();
    values.put(SOURCE_PARTICIPANT_ID_COLUMN, participantId);
    long rowId = db.insert(RCS_PARTICIPANT_EVENT_TABLE, SOURCE_PARTICIPANT_ID_COLUMN, values);
    values.remove(SOURCE_PARTICIPANT_ID_COLUMN);
    if (rowId == INSERTION_FAILED) {
        return TRANSACTION_FAILED;
    }
    return rowId;
}
#end_block

#method_before
long insertParticipantJoinedEvent(Uri uri, ContentValues values) {
    return insertParticipantChangedEvent(uri, values, PARTICIPANT_JOINED_EVENT_TYPE);
}
#method_after
long insertParticipantJoinedEvent(Uri uri, ContentValues values) {
    return insertGroupThreadEvent(uri, values, PARTICIPANT_JOINED_EVENT_TYPE);
}
#end_block

#method_before
long insertParticipantLeftEvent(Uri uri, ContentValues values) {
    return insertParticipantChangedEvent(uri, values, PARTICIPANT_LEFT_EVENT_TYPE);
}
#method_after
long insertParticipantLeftEvent(Uri uri, ContentValues values) {
    return insertGroupThreadEvent(uri, values, PARTICIPANT_LEFT_EVENT_TYPE);
}
#end_block

#method_before
long insertThreadNameChangeEvent(Uri uri, ContentValues values) {
    return insertParticipantChangedEvent(uri, values, NAME_CHANGED_EVENT_TYPE);
}
#method_after
long insertThreadNameChangeEvent(Uri uri, ContentValues values) {
    return insertGroupThreadEvent(uri, values, NAME_CHANGED_EVENT_TYPE);
}
#end_block

#method_before
long insertThreadIconChangeEvent(Uri uri, ContentValues values) {
    return insertParticipantChangedEvent(uri, values, ICON_CHANGED_EVENT_TYPE);
}
#method_after
long insertThreadIconChangeEvent(Uri uri, ContentValues values) {
    return insertGroupThreadEvent(uri, values, ICON_CHANGED_EVENT_TYPE);
}
#end_block

#method_before
@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    mRcsProvider = new RcsProviderTestable();
    MockContextWithProvider context = new MockContextWithProvider(mRcsProvider);
    mContentResolver = context.getContentResolver();
    // insert two participants
    Uri participantUri = Uri.parse("content://rcs/participant");
    ContentValues contentValues = new ContentValues();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, 99);
    contentValues.put(RCS_ALIAS_COLUMN, "Some alias");
    mContentResolver.insert(participantUri, contentValues);
    contentValues.clear();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, 100);
    contentValues.put(RCS_ALIAS_COLUMN, "Some other alias");
    mContentResolver.insert(participantUri, contentValues);
    // insert two 1 to 1 threads
    ContentValues p2pContentValues = new ContentValues(0);
    Uri threadsUri = Uri.parse("content://rcs/p2p_thread");
    assertThat(mContentResolver.insert(threadsUri, p2pContentValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1"));
    assertThat(mContentResolver.insert(threadsUri, p2pContentValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/2"));
    // insert one group thread
    ContentValues groupContentValues = new ContentValues(1);
    groupContentValues.put(GROUP_NAME_COLUMN, GROUP_NAME);
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread"), groupContentValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3"));
    // put participants into the group
    mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/participant/1"), null);
    mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/participant/2"), null);
    // insert two messages into first thread, leave the second one empty, insert one into group
    // thread
    ContentValues messageValues = new ContentValues();
    messageValues.put(ORIGINATION_TIMESTAMP_COLUMN, 300);
    messageValues.put(TEXT_COLUMN, "Old message");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/incoming_message/1"));
    messageValues.clear();
    messageValues.put(ORIGINATION_TIMESTAMP_COLUMN, 400);
    messageValues.put(TEXT_COLUMN, "New message");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/outgoing_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/outgoing_message/2"));
    messageValues.clear();
    messageValues.put(ORIGINATION_TIMESTAMP_COLUMN, 200);
    messageValues.put(TEXT_COLUMN, "Group message");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3/incoming_message/3"));
    // Add two events to the group thread
    ContentValues eventValues = new ContentValues();
    eventValues.put(OLD_NAME_COLUMN, "Old group name");
    eventValues.put(NEW_NAME_COLUMN, "New group name");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/name_changed_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3/name_changed_event/1"));
    eventValues.clear();
    eventValues.put(ORIGINATING_PARTICIPANT_COLUMN, 1);
    eventValues.put(DESTINATION_PARTICIPANT_COLUMN, 2);
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/participant_joined_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3/participant_joined_event/2"));
}
#method_after
@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    mRcsProvider = new RcsProviderTestable();
    MockContextWithProvider context = new MockContextWithProvider(mRcsProvider);
    mContentResolver = context.getContentResolver();
    // insert two participants
    Uri participantUri = Uri.parse("content://rcs/participant");
    ContentValues contentValues = new ContentValues();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, 99);
    contentValues.put(RCS_ALIAS_COLUMN, "Some alias");
    mContentResolver.insert(participantUri, contentValues);
    contentValues.clear();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, 100);
    contentValues.put(RCS_ALIAS_COLUMN, "Some other alias");
    mContentResolver.insert(participantUri, contentValues);
    // insert two 1 to 1 threads
    ContentValues p2pContentValues = new ContentValues(0);
    Uri threadsUri = Uri.parse("content://rcs/p2p_thread");
    assertThat(mContentResolver.insert(threadsUri, p2pContentValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1"));
    assertThat(mContentResolver.insert(threadsUri, p2pContentValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/2"));
    // insert one group thread
    ContentValues groupContentValues = new ContentValues(1);
    groupContentValues.put(GROUP_NAME_COLUMN, GROUP_NAME);
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread"), groupContentValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3"));
    // put participants into the group
    mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/participant/1"), null);
    mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/participant/2"), null);
    // insert two messages into first thread, leave the second one empty, insert one into group
    // thread
    ContentValues messageValues = new ContentValues();
    messageValues.put(ORIGINATION_TIMESTAMP_COLUMN, 300);
    messageValues.put(MESSAGE_TEXT_COLUMN, "Old message");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/incoming_message/1"));
    messageValues.clear();
    messageValues.put(ORIGINATION_TIMESTAMP_COLUMN, 400);
    messageValues.put(MESSAGE_TEXT_COLUMN, "New message");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/outgoing_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/outgoing_message/2"));
    messageValues.clear();
    messageValues.put(ORIGINATION_TIMESTAMP_COLUMN, 200);
    messageValues.put(MESSAGE_TEXT_COLUMN, "Group message");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3/incoming_message/3"));
    // Add two events to the group thread
    ContentValues eventValues = new ContentValues();
    eventValues.put(NEW_NAME_COLUMN, "New group name");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/name_changed_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3/name_changed_event/1"));
    eventValues.clear();
    eventValues.put(SOURCE_PARTICIPANT_ID_COLUMN, 1);
    eventValues.put(DESTINATION_PARTICIPANT_ID_COLUMN, 2);
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/3/participant_joined_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/3/participant_joined_event/2"));
}
#end_block

#method_before
@Test
public void testCanQueryUnifiedThreads() {
    RcsThreadQueryParameters queryParameters = RcsThreadQueryParameters.builder().build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(3);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(1);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(GROUP_NAME);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("Group message");
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo(null);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(400);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("New message");
}
#method_after
@Test
public void testCanQueryUnifiedThreads() {
    RcsThreadQueryParameters queryParameters = new RcsThreadQueryParameters.Builder().build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(3);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(1);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(GROUP_NAME);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo("Group message");
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo(null);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(400);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo("New message");
}
#end_block

#method_before
@Test
public void testCanQueryUnifiedThreadsWithLimitAndSorting() {
    RcsThreadQueryParameters queryParameters = RcsThreadQueryParameters.builder().setThreadType(RcsThreadQueryParameters.ONLY_1_TO_1_THREADS).limitResultsTo(1).sortBy(RcsThreadQueryParameters.TIMESTAMP).sortAscending(true).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo(null);
}
#method_after
@Test
public void testCanQueryUnifiedThreadsWithLimitAndSorting() {
    RcsThreadQueryParameters queryParameters = new RcsThreadQueryParameters.Builder().setThreadType(RcsThreadQueryParameters.THREAD_TYPE_1_TO_1).setResultLimit(1).setSortProperty(RcsThreadQueryParameters.SORT_BY_TIMESTAMP).setSortDirection(true).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo(null);
}
#end_block

#method_before
@Test
public void testCanContinueThreadQuery() {
    // Limit results to 1.
    RcsThreadQueryParameters queryParameters = RcsThreadQueryParameters.builder().limitResultsTo(1).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_PARAMETERS_KEY, queryParameters);
    // Perform an initial query, verify first thread is returned
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(1);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(GROUP_NAME);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("Group message");
    // Put the continuation token in the bundle to do a follow up query
    RcsThreadQueryContinuationToken continuationToken = cursor.getExtras().getParcelable(THREAD_QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(THREAD_QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor.close();
    cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo(null);
    cursor.close();
    // Put the continuation token in the bundle to do a follow up query again, verify third
    // thread is returned
    continuationToken = cursor.getExtras().getParcelable(THREAD_QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(THREAD_QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(400);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("New message");
    cursor.close();
}
#method_after
@Test
public void testCanContinueThreadQuery() {
    // Limit results to 1.
    RcsThreadQueryParameters queryParameters = new RcsThreadQueryParameters.Builder().setResultLimit(1).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(THREAD_QUERY_PARAMETERS_KEY, queryParameters);
    // Perform an initial query, verify first thread is returned
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(1);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(GROUP_NAME);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo("Group message");
    // Put the continuation token in the bundle to do a follow up query
    RcsQueryContinuationToken continuationToken = cursor.getExtras().getParcelable(QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor.close();
    cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo(null);
    cursor.close();
    // Put the continuation token in the bundle to do a follow up query again, verify third
    // thread is returned
    continuationToken = cursor.getExtras().getParcelable(QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(Uri.parse("content://rcs/thread"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(THREAD_TYPE_COLUMN))).isEqualTo(0);
    assertThat(cursor.getString(cursor.getColumnIndex(GROUP_NAME_COLUMN))).isEqualTo(null);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(400);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo("New message");
    cursor.close();
}
#end_block

#method_before
@Test
public void testQueryParticipantWithContinuation() {
    Uri participantUri = Uri.parse("content://rcs/participant");
    // Perform the initial query
    RcsParticipantQueryParameters queryParameters = new RcsParticipantQueryParameters.Builder().setAliasLike("%ali%").sortBy(RcsParticipantQueryParameters.ALIAS).sortAscending(true).limitResultsTo(1).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(PARTICIPANT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(participantUri, null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(1);
    assertThat(cursor.getInt(1)).isEqualTo(99);
    assertThat(cursor.getString(2)).isEqualTo("Some alias");
    // Perform the continuation query
    RcsParticipantQueryContinuationToken continuationToken = cursor.getExtras().getParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(participantUri, null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(2);
    assertThat(cursor.getInt(1)).isEqualTo(100);
    assertThat(cursor.getString(2)).isEqualTo("Some other alias");
    // Perform the continuation query to verify no entries left
    continuationToken = cursor.getExtras().getParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(participantUri, null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(0);
    continuationToken = cursor.getExtras().getParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN);
    assertThat(continuationToken).isNull();
}
#method_after
@Test
public void testQueryParticipantWithContinuation() {
    Uri participantUri = Uri.parse("content://rcs/participant");
    // Perform the initial query
    RcsParticipantQueryParameters queryParameters = new RcsParticipantQueryParameters.Builder().setAliasLike("%ali%").setSortProperty(RcsParticipantQueryParameters.SORT_BY_ALIAS).setSortDirection(true).setResultLimit(1).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(PARTICIPANT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(participantUri, null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(1);
    assertThat(cursor.getInt(1)).isEqualTo(99);
    assertThat(cursor.getString(2)).isEqualTo("Some alias");
    // Perform the continuation query
    RcsQueryContinuationToken continuationToken = cursor.getExtras().getParcelable(QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(participantUri, null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(2);
    assertThat(cursor.getInt(1)).isEqualTo(100);
    assertThat(cursor.getString(2)).isEqualTo("Some other alias");
    // Perform the continuation query to verify no entries left
    continuationToken = cursor.getExtras().getParcelable(QUERY_CONTINUATION_TOKEN);
    bundle.clear();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(participantUri, null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(0);
    continuationToken = cursor.getExtras().getParcelable(QUERY_CONTINUATION_TOKEN);
    assertThat(continuationToken).isNull();
}
#end_block

#method_before
@Test
public void testQueryEvents() {
    RcsEventQueryParameters queryParameters = RcsEventQueryParameters.builder().build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/event"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(PARTICIPANT_JOINED_EVENT_TYPE);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATING_PARTICIPANT_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(DESTINATION_PARTICIPANT_COLUMN))).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(GROUP_THREAD_NAME_CHANGED_EVENT);
    assertThat(cursor.getString(cursor.getColumnIndex(OLD_NAME_COLUMN))).isEqualTo("Old group name");
    assertThat(cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN))).isEqualTo("New group name");
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testQueryEvents() {
    RcsEventQueryParameters queryParameters = new RcsEventQueryParameters.Builder().build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/event"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(PARTICIPANT_JOINED_EVENT_TYPE);
    assertThat(cursor.getInt(cursor.getColumnIndex(SOURCE_PARTICIPANT_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(DESTINATION_PARTICIPANT_ID_COLUMN))).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(GROUP_THREAD_NAME_CHANGED_EVENT);
    assertThat(cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN))).isEqualTo("New group name");
}
#end_block

#method_before
@Test
public void testQueryEventsWithContinuation() {
    RcsEventQueryParameters queryParameters = RcsEventQueryParameters.builder().limitResultsTo(1).sortAscending(true).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/event"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(GROUP_THREAD_NAME_CHANGED_EVENT);
    assertThat(cursor.getString(cursor.getColumnIndex(OLD_NAME_COLUMN))).isEqualTo("Old group name");
    assertThat(cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN))).isEqualTo("New group name");
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testQueryEventsWithContinuation() {
    RcsEventQueryParameters queryParameters = new RcsEventQueryParameters.Builder().setResultLimit(1).setSortDirection(true).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/event"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(GROUP_THREAD_NAME_CHANGED_EVENT);
    assertThat(cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN))).isEqualTo("New group name");
}
#end_block

#method_before
@Test
public void testQueryEventsWithTypeLimitation() {
    RcsEventQueryParameters queryParameters = RcsEventQueryParameters.builder().setEventType(GROUP_THREAD_NAME_CHANGED_EVENT).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/event"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(GROUP_THREAD_NAME_CHANGED_EVENT);
    assertThat(cursor.getString(cursor.getColumnIndex(OLD_NAME_COLUMN))).isEqualTo("Old group name");
    assertThat(cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN))).isEqualTo("New group name");
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testQueryEventsWithTypeLimitation() {
    RcsEventQueryParameters queryParameters = new RcsEventQueryParameters.Builder().setEventType(GROUP_THREAD_NAME_CHANGED_EVENT).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(EVENT_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/event"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(EVENT_TYPE_COLUMN))).isEqualTo(GROUP_THREAD_NAME_CHANGED_EVENT);
    assertThat(cursor.getString(cursor.getColumnIndex(NEW_NAME_COLUMN))).isEqualTo("New group name");
}
#end_block

#method_before
@Test
public void testQueryMessages() {
    RcsMessageQueryParameters queryParameters = RcsMessageQueryParameters.builder().build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(3);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(3);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(2);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(1);
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testQueryMessages() {
    RcsMessageQueryParameters queryParameters = new RcsMessageQueryParameters.Builder().build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_PARAMETERS_KEY, queryParameters);
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(3);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(3);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(2);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(1);
}
#end_block

#method_before
@Test
public void testQueryMessagesWithContinuation() {
    RcsMessageQueryParameters queryParameters = RcsMessageQueryParameters.builder().setMessageLike("%o%message").limitResultsTo(1).sortBy(RcsMessageQueryParameters.TIMESTAMP).sortAscending(true).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_PARAMETERS_KEY, queryParameters);
    // Perform the initial query
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("Group message");
    // Perform the continuation query
    RcsMessageQueryContinuationToken continuationToken = cursor.getExtras().getParcelable(MESSAGE_QUERY_CONTINUATION_TOKEN);
    assertThat(continuationToken).isNotNull();
    bundle.clear();
    bundle.putParcelable(MESSAGE_QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(300);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("Old message");
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testQueryMessagesWithContinuation() {
    RcsMessageQueryParameters queryParameters = new RcsMessageQueryParameters.Builder().setMessageLike("%o%message").setResultLimit(1).setSortProperty(RcsMessageQueryParameters.SORT_BY_TIMESTAMP).setSortDirection(true).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_PARAMETERS_KEY, queryParameters);
    // Perform the initial query
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TYPE_COLUMN))).isEqualTo("Group message");
    // Perform the continuation query
    RcsQueryContinuationToken continuationToken = cursor.getExtras().getParcelable(QUERY_CONTINUATION_TOKEN);
    assertThat(continuationToken).isNotNull();
    bundle.clear();
    bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
    cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(1);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(300);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo("Old message");
}
#end_block

#method_before
@Test
public void testQueryMessagesWithThreadFilter() {
    RcsMessageQueryParameters queryParameters = RcsMessageQueryParameters.builder().limitToThread(new RcsGroupThread(3)).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_PARAMETERS_KEY, queryParameters);
    // Perform the initial query
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(TEXT_COLUMN))).isEqualTo("Group message");
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testQueryMessagesWithThreadFilter() {
    RcsMessageQueryParameters queryParameters = new RcsMessageQueryParameters.Builder().setThread(new RcsGroupThread(3)).build();
    Bundle bundle = new Bundle();
    bundle.putParcelable(MESSAGE_QUERY_PARAMETERS_KEY, queryParameters);
    // Perform the initial query
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, bundle, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(cursor.getColumnIndex(MESSAGE_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(RCS_THREAD_ID_COLUMN))).isEqualTo(3);
    assertThat(cursor.getInt(cursor.getColumnIndex(ORIGINATION_TIMESTAMP_COLUMN))).isEqualTo(200);
    assertThat(cursor.getString(cursor.getColumnIndex(MESSAGE_TEXT_COLUMN))).isEqualTo("Group message");
}
#end_block

#method_before
@Test
public void testUpdateIncomingMessageSpecificColumn() {
    // update the message
    ContentValues updateValues = new ContentValues(1);
    updateValues.put(ARRIVAL_TIMESTAMP_COLUMN, 987654321);
    assertThat(mContentResolver.update(Uri.parse("content://rcs/incoming_message/3"), updateValues, null, null)).isEqualTo(1);
    // verify the value is actually updated
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/incoming_message/3"), null, null, null, null, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getLong(7)).isEqualTo(987654321);
    cursor.close();
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testUpdateIncomingMessageSpecificColumn() {
    // update the message
    ContentValues updateValues = new ContentValues(1);
    updateValues.put(ARRIVAL_TIMESTAMP_COLUMN, 987654321);
    assertThat(mContentResolver.update(Uri.parse("content://rcs/incoming_message/3"), updateValues, null, null)).isEqualTo(1);
    // verify the value is actually updated
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/incoming_message/3"), null, null, null, null, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getLong(7)).isEqualTo(987654321);
    cursor.close();
}
#end_block

#method_before
@Test
public void testUpdateMessageDelivery() {
    ContentValues updateValues = new ContentValues();
    updateValues.put(DELIVERED_TIMESTAMP_COLUMN, 12345);
    updateValues.put(SEEN_TIMESTAMP_COLUMN, 54321);
    assertThat(mContentResolver.update(Uri.parse("content://rcs/outgoing_message/2/delivery/1"), updateValues, null, null)).isEqualTo(1);
    // verify the value is actually updated
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/outgoing_message/2/delivery"), null, null, null, null, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(2);
    assertThat(cursor.getInt(1)).isEqualTo(1);
    assertThat(cursor.getLong(2)).isEqualTo(12345);
    assertThat(cursor.getLong(3)).isEqualTo(54321);
}
#method_after
@Test
public void testUpdateMessageDelivery() {
    ContentValues updateValues = new ContentValues();
    updateValues.put(DELIVERED_TIMESTAMP_COLUMN, 12345);
    updateValues.put(RcsMessageDeliveryColumns.SEEN_TIMESTAMP_COLUMN, 54321);
    assertThat(mContentResolver.update(Uri.parse("content://rcs/outgoing_message/2/delivery/1"), updateValues, null, null)).isEqualTo(1);
    // verify the value is actually updated
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/outgoing_message/2/delivery"), null, null, null, null, null);
    assertThat(cursor.getCount()).isEqualTo(1);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(2);
    assertThat(cursor.getInt(1)).isEqualTo(1);
    assertThat(cursor.getLong(2)).isEqualTo(12345);
    assertThat(cursor.getLong(3)).isEqualTo(54321);
}
#end_block

#method_before
@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    mRcsProvider = new RcsProviderTestable();
    RcsProviderTestable.MockContextWithProvider context = new RcsProviderTestable.MockContextWithProvider(mRcsProvider);
    mContentResolver = context.getContentResolver();
    // insert a participant
    // first into the MmsSmsProvider
    mRcsProvider.getWritableDatabase().execSQL("INSERT INTO canonical_addresses VALUES (1, \"+15551234567\")");
    // then into the RcsProvider
    ContentValues participantValues = new ContentValues();
    participantValues.put(RCS_ALIAS_COLUMN, "Bob");
    participantValues.put(CANONICAL_ADDRESS_ID_COLUMN, 1);
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/participant"), participantValues)).isEqualTo(Uri.parse("content://rcs/participant/1"));
    // insert one 1 to 1 thread
    ContentValues p2pContentValues = new ContentValues();
    Uri p2pThreadUri = Uri.parse("content://rcs/p2p_thread");
    p2pContentValues.put(FALLBACK_THREAD_ID_COLUMN, 1);
    assertThat(mContentResolver.insert(p2pThreadUri, p2pContentValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1"));
    // insert one group thread
    ContentValues groupContentValues = new ContentValues();
    groupContentValues.put(OWNER_PARTICIPANT_COLUMN, 1);
    groupContentValues.put(GROUP_NAME_COLUMN, "name");
    Uri groupThreadUri = Uri.parse("content://rcs/group_thread");
    assertThat(mContentResolver.insert(groupThreadUri, groupContentValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2"));
    // add the participant into both threads
    Uri addParticipantTo1To1Thread = Uri.parse("content://rcs/p2p_thread/1/participant/1");
    assertThat(mContentResolver.insert(addParticipantTo1To1Thread, null)).isEqualTo(addParticipantTo1To1Thread);
    Uri addParticipantToGroupThread = Uri.parse("content://rcs/group_thread/2/participant/1");
    assertThat(mContentResolver.insert(addParticipantToGroupThread, null)).isEqualTo(addParticipantToGroupThread);
    // add incoming and outgoing messages to both threads
    ContentValues messageValues = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/incoming_message/1"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/outgoing_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/outgoing_message/2"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2/incoming_message/3"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/outgoing_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2/outgoing_message/4"));
    // add a file transfer to a message
    ContentValues fileTransferValues = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/message/3/file_transfer"), fileTransferValues)).isEqualTo(Uri.parse("content://rcs/file_transfer/1"));
    // insert an alias change event
    ContentValues eventValues = new ContentValues();
    eventValues.put(OLD_ALIAS_COLUMN, "old alias");
    eventValues.put(NEW_ALIAS_COLUMN, "new alias");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/participant/1/alias_change_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/participant/1/alias_change_event/1"));
    // create a group name change event
    eventValues.clear();
    eventValues.put(OLD_NAME_COLUMN, "old name");
    eventValues.put(NEW_NAME_COLUMN, "new name");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/name_changed_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2/name_changed_event/1"));
}
#method_after
@Before
public void setUp() {
    MockitoAnnotations.initMocks(this);
    mRcsProvider = new RcsProviderTestable();
    RcsProviderTestable.MockContextWithProvider context = new RcsProviderTestable.MockContextWithProvider(mRcsProvider);
    mContentResolver = context.getContentResolver();
    // insert a participant
    // first into the MmsSmsProvider
    mRcsProvider.getWritableDatabase().execSQL("INSERT INTO canonical_addresses VALUES (1, \"+15551234567\")");
    // then into the RcsProvider
    ContentValues participantValues = new ContentValues();
    participantValues.put(RCS_ALIAS_COLUMN, "Bob");
    participantValues.put(CANONICAL_ADDRESS_ID_COLUMN, 1);
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/participant"), participantValues)).isEqualTo(Uri.parse("content://rcs/participant/1"));
    // insert one 1 to 1 thread
    ContentValues p2pContentValues = new ContentValues();
    Uri p2pThreadUri = Uri.parse("content://rcs/p2p_thread");
    p2pContentValues.put(FALLBACK_THREAD_ID_COLUMN, 1);
    assertThat(mContentResolver.insert(p2pThreadUri, p2pContentValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1"));
    // insert one group thread
    ContentValues groupContentValues = new ContentValues();
    groupContentValues.put(OWNER_PARTICIPANT_COLUMN, 1);
    groupContentValues.put(GROUP_NAME_COLUMN, "name");
    Uri groupThreadUri = Uri.parse("content://rcs/group_thread");
    assertThat(mContentResolver.insert(groupThreadUri, groupContentValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2"));
    // add the participant into both threads
    Uri addParticipantTo1To1Thread = Uri.parse("content://rcs/p2p_thread/1/participant/1");
    assertThat(mContentResolver.insert(addParticipantTo1To1Thread, null)).isEqualTo(addParticipantTo1To1Thread);
    Uri addParticipantToGroupThread = Uri.parse("content://rcs/group_thread/2/participant/1");
    assertThat(mContentResolver.insert(addParticipantToGroupThread, null)).isEqualTo(addParticipantToGroupThread);
    // add incoming and outgoing messages to both threads
    ContentValues messageValues = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/incoming_message/1"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/outgoing_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/outgoing_message/2"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/incoming_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2/incoming_message/3"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/outgoing_message"), messageValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2/outgoing_message/4"));
    // add a file transfer to a message
    ContentValues fileTransferValues = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/message/3/file_transfer"), fileTransferValues)).isEqualTo(Uri.parse("content://rcs/file_transfer/1"));
    // insert an alias change event
    ContentValues eventValues = new ContentValues();
    eventValues.put(NEW_ALIAS_COLUMN, "new alias");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/participant/1/alias_change_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/participant/1/alias_change_event/1"));
    // create a group name change event
    eventValues.clear();
    eventValues.put(NEW_NAME_COLUMN, "new name");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/name_changed_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/2/name_changed_event/1"));
}
#end_block

#method_before
@Test
public void testDeleteMessage() {
    // verify there exists 4 messages
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, null, null);
    assertThat(cursor.getCount()).isEqualTo(4);
    cursor.close();
    // delete 2 of them
    assertThat(mContentResolver.delete(Uri.parse("content://rcs/incoming_message/1"), null, null)).isEqualTo(1);
    assertThat(mContentResolver.delete(Uri.parse("content://rcs/outgoing_message/4"), null, null)).isEqualTo(1);
    // verify that only 2 messages are left
    cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, null, null);
    assertThat(cursor.getCount()).isEqualTo(2);
    cursor.close();
    // verify that entries in common table is deleted and only messages with id's 2 and 3 remain
    SQLiteDatabase db = mRcsProvider.getWritableDatabase();
    cursor = db.query(RCS_MESSAGE_TABLE, null, null, null, null, null, null);
    assertThat(cursor.getCount()).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(3);
    cursor.close();
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testDeleteMessage() {
    // verify there exists 4 messages
    Cursor cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, null, null);
    assertThat(cursor.getCount()).isEqualTo(4);
    cursor.close();
    // delete 2 of them
    assertThat(mContentResolver.delete(Uri.parse("content://rcs/incoming_message/1"), null, null)).isEqualTo(1);
    assertThat(mContentResolver.delete(Uri.parse("content://rcs/outgoing_message/4"), null, null)).isEqualTo(1);
    // verify that only 2 messages are left
    cursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, null, null);
    assertThat(cursor.getCount()).isEqualTo(2);
    cursor.close();
    // verify that entries in common table is deleted and only messages with id's 2 and 3 remain
    SQLiteDatabase db = mRcsProvider.getWritableDatabase();
    cursor = db.query(RCS_MESSAGE_TABLE, null, null, null, null, null, null);
    assertThat(cursor.getCount()).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(2);
    cursor.moveToNext();
    assertThat(cursor.getInt(0)).isEqualTo(3);
    cursor.close();
}
#end_block

#method_before
Cursor queryParticipant(Bundle bundle) {
    RcsParticipantQueryParameters queryParameters = null;
    RcsParticipantQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(PARTICIPANT_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(PARTICIPANT_QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    if (queryParameters == null) {
        queryParameters = RcsParticipantQueryParameters.builder().build();
    }
    return performInitialQuery(queryParameters);
}
#method_after
Cursor queryParticipant(Bundle bundle) {
    RcsParticipantQueryParameters queryParameters = null;
    RcsQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(PARTICIPANT_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    if (queryParameters == null) {
        queryParameters = new RcsParticipantQueryParameters.Builder().build();
    }
    return performInitialQuery(queryParameters);
}
#end_block

#method_before
private Cursor performInitialQuery(RcsParticipantQueryParameters queryParameters) {
    SQLiteDatabase db = mSqLiteOpenHelper.getWritableDatabase();
    StringBuilder rawQuery = buildInitialRawQuery(queryParameters);
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // If the query was paginated, build the next query
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsParticipantQueryContinuationToken(rawQueryAsString, limit, limit), PARTICIPANT_QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#method_after
private Cursor performInitialQuery(RcsParticipantQueryParameters queryParameters) {
    SQLiteDatabase db = mSqLiteOpenHelper.getWritableDatabase();
    StringBuilder rawQuery = buildInitialRawQuery(queryParameters);
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // If the query was paginated, build the next query
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsQueryContinuationToken(PARTICIPANT_QUERY_CONTINUATION_TOKEN_TYPE, rawQueryAsString, limit, limit), QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#end_block

#method_before
private StringBuilder buildInitialRawQuery(RcsParticipantQueryParameters queryParameters) {
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ");
    boolean isThreadFiltered = queryParameters.getThreadId() > 0;
    if (isThreadFiltered) {
        rawQuery.append(RCS_PARTICIPANT_WITH_THREAD_VIEW);
    } else {
        rawQuery.append(RCS_PARTICIPANT_WITH_ADDRESS_VIEW);
    }
    boolean isAliasFiltered = !TextUtils.isEmpty(queryParameters.getAliasLike());
    boolean isCanonicalAddressFiltered = !TextUtils.isEmpty(queryParameters.getCanonicalAddressLike());
    if (isAliasFiltered || isCanonicalAddressFiltered || isThreadFiltered) {
        rawQuery.append(" WHERE ");
    }
    if (isAliasFiltered) {
        rawQuery.append(RCS_ALIAS_COLUMN).append(" LIKE \"").append(queryParameters.getAliasLike()).append("\"");
    }
    if (isCanonicalAddressFiltered) {
        if (isAliasFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(ADDRESS).append(" LIKE \"").append(queryParameters.getCanonicalAddressLike()).append("\"");
    }
    if (isThreadFiltered) {
        if (isAliasFiltered || isCanonicalAddressFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(RCS_THREAD_ID_COLUMN).append("=").append(queryParameters.getThreadId());
    }
    rawQuery.append(" ORDER BY ");
    int sortingProperty = queryParameters.getSortingProperty();
    if (sortingProperty == RcsParticipantQueryParameters.ALIAS) {
        rawQuery.append(RCS_ALIAS_COLUMN);
    } else if (sortingProperty == RcsParticipantQueryParameters.CANONICAL_ADDRESS) {
        rawQuery.append(ADDRESS);
    } else {
        rawQuery.append(RCS_PARTICIPANT_ID_COLUMN);
    }
    rawQuery.append(queryParameters.isAscending() ? " ASC " : " DESC ");
    return rawQuery;
}
#method_after
private StringBuilder buildInitialRawQuery(RcsParticipantQueryParameters queryParameters) {
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ");
    boolean isThreadFiltered = queryParameters.getThreadId() > 0;
    if (isThreadFiltered) {
        rawQuery.append(RCS_PARTICIPANT_WITH_THREAD_VIEW);
    } else {
        rawQuery.append(RCS_PARTICIPANT_WITH_ADDRESS_VIEW);
    }
    boolean isAliasFiltered = !TextUtils.isEmpty(queryParameters.getAliasLike());
    boolean isCanonicalAddressFiltered = !TextUtils.isEmpty(queryParameters.getCanonicalAddressLike());
    if (isAliasFiltered || isCanonicalAddressFiltered || isThreadFiltered) {
        rawQuery.append(" WHERE ");
    }
    if (isAliasFiltered) {
        rawQuery.append(RCS_ALIAS_COLUMN).append(" LIKE \"").append(queryParameters.getAliasLike()).append("\"");
    }
    if (isCanonicalAddressFiltered) {
        if (isAliasFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(ADDRESS).append(" LIKE \"").append(queryParameters.getCanonicalAddressLike()).append("\"");
    }
    if (isThreadFiltered) {
        if (isAliasFiltered || isCanonicalAddressFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(RCS_THREAD_ID_COLUMN).append("=").append(queryParameters.getThreadId());
    }
    rawQuery.append(" ORDER BY ");
    int sortingProperty = queryParameters.getSortingProperty();
    if (sortingProperty == RcsParticipantQueryParameters.SORT_BY_ALIAS) {
        rawQuery.append(RCS_ALIAS_COLUMN);
    } else if (sortingProperty == RcsParticipantQueryParameters.SORT_BY_CANONICAL_ADDRESS) {
        rawQuery.append(ADDRESS);
    } else {
        rawQuery.append(RCS_PARTICIPANT_ID_COLUMN);
    }
    rawQuery.append(queryParameters.getSortDirection() ? " ASC " : " DESC ");
    return rawQuery;
}
#end_block

#method_before
@Test
public void testInsertMessageIntoThread() {
    // create two threads
    ContentValues values = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread"), values)).isNotNull();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread"), values)).isNotNull();
    // add messages to threads
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/incoming_message"), values)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/incoming_message/1"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/outgoing_message"), values)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/outgoing_message/2"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/incoming_message"), values)).isEqualTo(Uri.parse("content://rcs/group_thread/2/incoming_message/3"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/outgoing_message"), values)).isEqualTo(Uri.parse("content://rcs/group_thread/2/outgoing_message/4"));
    // assert that they are accessible in messages table
    Cursor messageCursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, null, null, null);
    assertThat(messageCursor.getCount()).isEqualTo(4);
}
#method_after
@Test
// TODO: fix and un-ignore
@Ignore
public void testInsertMessageIntoThread() {
    // create two threads
    ContentValues values = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread"), values)).isNotNull();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread"), values)).isNotNull();
    // add messages to threads
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/incoming_message"), values)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/incoming_message/1"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/p2p_thread/1/outgoing_message"), values)).isEqualTo(Uri.parse("content://rcs/p2p_thread/1/outgoing_message/2"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/incoming_message"), values)).isEqualTo(Uri.parse("content://rcs/group_thread/2/incoming_message/3"));
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/2/outgoing_message"), values)).isEqualTo(Uri.parse("content://rcs/group_thread/2/outgoing_message/4"));
    // assert that they are accessible in messages table
    Cursor messageCursor = mContentResolver.query(Uri.parse("content://rcs/message"), null, null, null, null);
    assertThat(messageCursor.getCount()).isEqualTo(4);
}
#end_block

#method_before
@Test
public void testInsertParticipantEvent() {
    // create a participant
    ContentValues contentValues = new ContentValues();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, 23);
    mContentResolver.insert(Uri.parse("content://rcs/participant"), contentValues);
    // insert an alias change event
    ContentValues eventValues = new ContentValues();
    eventValues.put(OLD_ALIAS_COLUMN, "old alias");
    eventValues.put(NEW_ALIAS_COLUMN, "new alias");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/participant/1/alias_change_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/participant/1/alias_change_event/1"));
}
#method_after
@Test
public void testInsertParticipantEvent() {
    // create a participant
    ContentValues contentValues = new ContentValues();
    contentValues.put(CANONICAL_ADDRESS_ID_COLUMN, 23);
    mContentResolver.insert(Uri.parse("content://rcs/participant"), contentValues);
    // insert an alias change event
    ContentValues eventValues = new ContentValues();
    eventValues.put(NEW_ALIAS_COLUMN, "new alias");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/participant/1/alias_change_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/participant/1/alias_change_event/1"));
}
#end_block

#method_before
@Test
public void testInsertGroupThreadEvent() {
    // create a group thread
    ContentValues contentValues = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread"), contentValues)).isEqualTo(Uri.parse("content://rcs/group_thread/1"));
    // create a group name change event
    ContentValues eventValues = new ContentValues();
    eventValues.put(OLD_NAME_COLUMN, "old name");
    eventValues.put(NEW_NAME_COLUMN, "new name");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/1/name_changed_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/1/name_changed_event/1"));
}
#method_after
@Test
public void testInsertGroupThreadEvent() {
    // create a group thread
    ContentValues contentValues = new ContentValues();
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread"), contentValues)).isEqualTo(Uri.parse("content://rcs/group_thread/1"));
    // create a group name change event
    ContentValues eventValues = new ContentValues();
    eventValues.put(NEW_NAME_COLUMN, "new name");
    assertThat(mContentResolver.insert(Uri.parse("content://rcs/group_thread/1/name_changed_event"), eventValues)).isEqualTo(Uri.parse("content://rcs/group_thread/1/name_changed_event/1"));
}
#end_block

#method_before
@VisibleForTesting
public static void createRcsMessageTables(SQLiteDatabase db) {
    Log.d(TAG, "Creating message tables");
    // Add the message tables
    db.execSQL("CREATE TABLE " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + RCS_THREAD_ID_COLUMN + " INTEGER, " + GLOBAL_ID_COLUMN + " TEXT, " + SUB_ID_COLUMN + " INTEGER, " + TEXT_COLUMN + " TEXT," + LATITUDE_COLUMN + " REAL, " + LONGITUDE_COLUMN + " REAL, " + STATUS_COLUMN + " INTEGER, " + ORIGINATION_TIMESTAMP_COLUMN + " INTEGER, FOREIGN KEY(" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + "(" + RCS_THREAD_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_INCOMING_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER PRIMARY KEY, " + SENDER_PARTICIPANT_COLUMN + " INTEGER, " + ARRIVAL_TIMESTAMP_COLUMN + " INTEGER, " + NOTIFIED_TIMESTAMP_COLUMN + " INTEGER, FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_OUTGOING_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER PRIMARY KEY, FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_MESSAGE_DELIVERY_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER, " + RCS_PARTICIPANT_ID_COLUMN + " INTEGER, " + DELIVERED_TIMESTAMP_COLUMN + " INTEGER, " + SEEN_TIMESTAMP_COLUMN + " INTEGER, " + "CONSTRAINT message_delivery PRIMARY KEY (" + MESSAGE_ID_COLUMN + ", " + RCS_PARTICIPANT_ID_COLUMN + "), FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "), FOREIGN KEY (" + RCS_PARTICIPANT_ID_COLUMN + ") REFERENCES " + RCS_PARTICIPANT_TABLE + "(" + RCS_PARTICIPANT_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_FILE_TRANSFER_TABLE + " (" + FILE_TRANSFER_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + MESSAGE_ID_COLUMN + " INTEGER, " + SESSION_ID_COLUMN + " TEXT, " + CONTENT_URI_COLUMN + " TEXT, " + CONTENT_TYPE_COLUMN + " TEXT, " + FILE_SIZE_COLUMN + " INTEGER, " + TRANSFER_OFFSET_COLUMN + " INTEGER, " + TRANSFER_STATUS_COLUMN + " INTEGER, " + WIDTH_COLUMN + " INTEGER, " + HEIGHT_COLUMN + " INTEGER, " + LENGTH_COLUMN + " INTEGER, " + PREVIEW_URI_COLUMN + " TEXT, " + PREVIEW_TYPE_COLUMN + " TEXT, FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "))");
    // Add the views
    // 
    // The following view inner joins incoming messages with all messages, inner joins outgoing
    // messages with all messages, and unions them together, while also adding an is_incoming
    // column for easily telling where the record came from. This may have been achieved with
    // an outer join but SQLite doesn't support them.
    // 
    // CREATE VIEW unified_message_view AS
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp,
    // 0 AS sender_participant,
    // 0 AS arrival_timestamp,
    // 0 AS notification_timestamp,
    // 0 AS is_incoming
    // 
    // FROM rcs_message INNER JOIN rcs_outgoing_message
    // ON rcs_message.rcs_message_row_id=rcs_outgoing_message.rcs_message_row_id
    // 
    // UNION
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp,
    // rcs_incoming_message.sender_participant,
    // rcs_incoming_message.arrival_timestamp,
    // rcs_incoming_message.notification_timestamp,
    // 1 AS is_incoming
    // 
    // FROM rcs_message INNER JOIN rcs_incoming_message
    // ON rcs_message.rcs_message_row_id=rcs_incoming_message.rcs_message_row_id
    // 
    db.execSQL("CREATE VIEW " + UNIFIED_MESSAGE_VIEW + " AS SELECT " + "rcs_message.rcs_message_row_id, rcs_message.rcs_thread_id, " + "rcs_message.rcs_message_global_id, rcs_message.sub_id, " + "rcs_message.status, rcs_message.origination_timestamp, " + "rcs_message.rcs_text, 0 AS sender_participant, 0 AS arrival_timestamp, 0" + " AS notified_timestamp, 0 AS is_incoming FROM rcs_message INNER JOIN " + "rcs_outgoing_message ON " + "rcs_message.rcs_message_row_id=rcs_outgoing_message.rcs_message_row_id " + "UNION SELECT rcs_message.rcs_message_row_id, rcs_message.rcs_thread_id, " + "rcs_message.rcs_message_global_id, rcs_message.sub_id, " + "rcs_message.status, rcs_message.origination_timestamp, " + "rcs_message.rcs_text, rcs_incoming_message.sender_participant, " + "rcs_incoming_message.arrival_timestamp, " + "rcs_incoming_message.notified_timestamp, 1 AS is_incoming FROM " + "rcs_message INNER JOIN rcs_incoming_message ON " + "rcs_message.rcs_message_row_id=rcs_incoming_message.rcs_message_row_id");
    // The following view inner joins incoming messages with all messages
    // 
    // CREATE VIEW unified_incoming_message_view AS
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp,
    // rcs_incoming_message.sender_participant,
    // rcs_incoming_message.arrival_timestamp,
    // rcs_incoming_message.notification_timestamp,
    // 
    // FROM rcs_message INNER JOIN rcs_incoming_message
    // ON rcs_message.rcs_message_row_id=rcs_incoming_message.rcs_message_row_id
    db.execSQL("CREATE VIEW unified_incoming_message_view AS SELECT rcs_message" + ".rcs_message_row_id, rcs_message.rcs_thread_id, rcs_message" + ".rcs_message_global_id, rcs_message.sub_id, rcs_message.status, " + "rcs_message.origination_timestamp, rcs_incoming_message" + ".sender_participant, rcs_incoming_message.arrival_timestamp, " + "rcs_incoming_message.notified_timestamp FROM " + "rcs_message INNER JOIN rcs_incoming_message ON rcs_message." + "rcs_message_row_id=rcs_incoming_message.rcs_message_row_id");
    // The following view inner joins incoming messages with all messages.
    // 
    // CREATE VIEW unified_outgoing_message AS
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp
    // 
    // FROM rcs_message INNER JOIN rcs_outgoing_message
    // ON rcs_message.rcs_message_row_id=rcs_outgoing_message.rcs_message_row_id
    db.execSQL("CREATE VIEW unified_outgoing_message_view AS SELECT rcs_message" + ".rcs_message_row_id, rcs_message.rcs_thread_id, rcs_message" + ".rcs_message_global_id, rcs_message.sub_id, rcs_message.status, " + "rcs_message.origination_timestamp FROM rcs_message INNER JOIN " + "rcs_outgoing_message ON rcs_message" + ".rcs_message_row_id=rcs_outgoing_message.rcs_message_row_id");
    // Add triggers
    // Delete the corresponding rcs_message row upon deleting a row in rcs_incoming_message
    // 
    // CREATE TRIGGER delete_common_message_after_incoming
    // AFTER DELETE ON rcs_incoming_message
    // BEGIN
    // DELETE FROM rcs_message WHERE rcs_message.rcs_message_row_id=OLD.rcs_message_row_id;
    // END
    db.execSQL("CREATE TRIGGER delete_common_message_after_incoming AFTER DELETE ON " + "rcs_incoming_message BEGIN DELETE FROM rcs_message WHERE rcs_message" + ".rcs_message_row_id=OLD.rcs_message_row_id; END");
    // Delete the corresponding rcs_message row upon deleting a row in rcs_outgoing_message
    // 
    // CREATE TRIGGER delete_common_message_after_outgoing
    // AFTER DELETE ON rcs_outgoing_message
    // BEGIN
    // DELETE FROM rcs_message WHERE rcs_message.rcs_message_row_id=OLD.rcs_message_row_id;
    // END
    db.execSQL("CREATE TRIGGER delete_common_message_after_outgoing AFTER DELETE ON " + "rcs_outgoing_message BEGIN DELETE FROM rcs_message WHERE rcs_message" + ".rcs_message_row_id=OLD.rcs_message_row_id; END");
}
#method_after
@VisibleForTesting
public static void createRcsMessageTables(SQLiteDatabase db) {
    Log.d(TAG, "Creating message tables");
    // Add the message tables
    db.execSQL("CREATE TABLE " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + RCS_THREAD_ID_COLUMN + " INTEGER, " + GLOBAL_ID_COLUMN + " TEXT, " + SUB_ID_COLUMN + " INTEGER, " + MESSAGE_TEXT_COLUMN + " TEXT," + LATITUDE_COLUMN + " REAL, " + LONGITUDE_COLUMN + " REAL, " + STATUS_COLUMN + " INTEGER, " + ORIGINATION_TIMESTAMP_COLUMN + " INTEGER, FOREIGN KEY(" + RCS_THREAD_ID_COLUMN + ") REFERENCES " + RCS_THREAD_TABLE + "(" + RCS_THREAD_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_INCOMING_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER PRIMARY KEY, " + SENDER_PARTICIPANT_ID_COLUMN + " INTEGER, " + ARRIVAL_TIMESTAMP_COLUMN + " INTEGER, " + RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN + " INTEGER, FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_OUTGOING_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER PRIMARY KEY, FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_MESSAGE_DELIVERY_TABLE + "(" + MESSAGE_ID_COLUMN + " INTEGER, " + RCS_PARTICIPANT_ID_COLUMN + " INTEGER, " + DELIVERED_TIMESTAMP_COLUMN + " INTEGER, " + RcsMessageDeliveryColumns.SEEN_TIMESTAMP_COLUMN + " INTEGER, " + "CONSTRAINT message_delivery PRIMARY KEY (" + MESSAGE_ID_COLUMN + ", " + RCS_PARTICIPANT_ID_COLUMN + "), FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "), FOREIGN KEY (" + RCS_PARTICIPANT_ID_COLUMN + ") REFERENCES " + RCS_PARTICIPANT_TABLE + "(" + RCS_PARTICIPANT_ID_COLUMN + "))");
    db.execSQL("CREATE TABLE " + RCS_FILE_TRANSFER_TABLE + " (" + FILE_TRANSFER_ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT, " + MESSAGE_ID_COLUMN + " INTEGER, " + SESSION_ID_COLUMN + " TEXT, " + CONTENT_URI_COLUMN + " TEXT, " + CONTENT_TYPE_COLUMN + " TEXT, " + FILE_SIZE_COLUMN + " INTEGER, " + SUCCESSFULLY_TRANSFERRED_BYTES + " INTEGER, " + TRANSFER_STATUS_COLUMN + " INTEGER, " + WIDTH_COLUMN + " INTEGER, " + HEIGHT_COLUMN + " INTEGER, " + DURATION_MILLIS_COLUMN + " INTEGER, " + PREVIEW_URI_COLUMN + " TEXT, " + PREVIEW_TYPE_COLUMN + " TEXT, FOREIGN KEY (" + MESSAGE_ID_COLUMN + ") REFERENCES " + RCS_MESSAGE_TABLE + "(" + MESSAGE_ID_COLUMN + "))");
    // Add the views
    // 
    // The following view inner joins incoming messages with all messages, inner joins outgoing
    // messages with all messages, and unions them together, while also adding an is_incoming
    // column for easily telling where the record came from. This may have been achieved with
    // an outer join but SQLite doesn't support them.
    // 
    // CREATE VIEW unified_message_view AS
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp,
    // rcs_message.rcs_text,
    // rcs_message.latitude,
    // rcs_message.longitude,
    // 0 AS sender_participant,
    // 0 AS arrival_timestamp,
    // 0 AS seen_timestamp,
    // outgoing AS message_type
    // 
    // FROM rcs_message INNER JOIN rcs_outgoing_message
    // ON rcs_message.rcs_message_row_id=rcs_outgoing_message.rcs_message_row_id
    // 
    // UNION
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp,
    // rcs_message.rcs_text,
    // rcs_message.latitude,
    // rcs_message.longitude,
    // rcs_incoming_message.sender_participant,
    // rcs_incoming_message.arrival_timestamp,
    // rcs_incoming_message.seen_timestamp,
    // incoming AS message_type
    // 
    // FROM rcs_message INNER JOIN rcs_incoming_message
    // ON rcs_message.rcs_message_row_id=rcs_incoming_message.rcs_message_row_id
    // 
    db.execSQL("CREATE VIEW " + UNIFIED_MESSAGE_VIEW + " AS SELECT " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + RCS_THREAD_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + GLOBAL_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + SUB_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + STATUS_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + ORIGINATION_TIMESTAMP_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + MESSAGE_TEXT_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LATITUDE_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LONGITUDE_COLUMN + ", " + "0 AS " + SENDER_PARTICIPANT_ID_COLUMN + ", " + "0 AS " + ARRIVAL_TIMESTAMP_COLUMN + ", " + "0 AS " + RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN + ", " + MESSAGE_TYPE_OUTGOING + " AS " + MESSAGE_TYPE_COLUMN + " FROM " + RCS_MESSAGE_TABLE + " INNER JOIN " + RCS_OUTGOING_MESSAGE_TABLE + " ON " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + "=" + RCS_OUTGOING_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + " UNION SELECT " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + RCS_THREAD_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + GLOBAL_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + SUB_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + STATUS_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + ORIGINATION_TIMESTAMP_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + MESSAGE_TEXT_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LATITUDE_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LONGITUDE_COLUMN + ", " + RCS_INCOMING_MESSAGE_TABLE + "." + SENDER_PARTICIPANT_ID_COLUMN + ", " + RCS_INCOMING_MESSAGE_TABLE + "." + ARRIVAL_TIMESTAMP_COLUMN + ", " + RCS_INCOMING_MESSAGE_TABLE + "." + RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN + ", " + MESSAGE_TYPE_INCOMING + " AS " + MESSAGE_TYPE_COLUMN + " FROM " + RCS_MESSAGE_TABLE + " INNER JOIN " + RCS_INCOMING_MESSAGE_TABLE + " ON " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + "=" + RCS_INCOMING_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN);
    // The following view inner joins incoming messages with all messages
    // 
    // CREATE VIEW unified_incoming_message_view AS
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp,
    // rcs_message.rcs_text,
    // rcs_message.latitude,
    // rcs_message.longitude,
    // rcs_incoming_message.sender_participant,
    // rcs_incoming_message.arrival_timestamp,
    // rcs_incoming_message.seen_timestamp,
    // 
    // FROM rcs_message INNER JOIN rcs_incoming_message
    // ON rcs_message.rcs_message_row_id=rcs_incoming_message.rcs_message_row_id
    db.execSQL("CREATE VIEW " + UNIFIED_INCOMING_MESSAGE_VIEW + " AS SELECT " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + RCS_THREAD_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + GLOBAL_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + SUB_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + STATUS_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + ORIGINATION_TIMESTAMP_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + MESSAGE_TEXT_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LATITUDE_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LONGITUDE_COLUMN + ", " + RCS_INCOMING_MESSAGE_TABLE + "." + SENDER_PARTICIPANT_ID_COLUMN + ", " + RCS_INCOMING_MESSAGE_TABLE + "." + ARRIVAL_TIMESTAMP_COLUMN + ", " + RCS_INCOMING_MESSAGE_TABLE + "." + RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN + " FROM " + RCS_MESSAGE_TABLE + " INNER JOIN " + RCS_INCOMING_MESSAGE_TABLE + " ON " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + "=" + RCS_INCOMING_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN);
    // The following view inner joins outgoing messages with all messages.
    // 
    // CREATE VIEW unified_outgoing_message AS
    // 
    // SELECT rcs_message.rcs_message_row_id,
    // rcs_message.rcs_thread_id,
    // rcs_message.rcs_message_global_id,
    // rcs_message.sub_id,
    // rcs_message.status,
    // rcs_message.origination_timestamp
    // rcs_message.rcs_text,
    // rcs_message.latitude,
    // rcs_message.longitude,
    // 
    // FROM rcs_message INNER JOIN rcs_outgoing_message
    // ON rcs_message.rcs_message_row_id=rcs_outgoing_message.rcs_message_row_id
    db.execSQL("CREATE VIEW " + UNIFIED_OUTGOING_MESSAGE_VIEW + " AS SELECT " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + RCS_THREAD_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + GLOBAL_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + SUB_ID_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + STATUS_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + ORIGINATION_TIMESTAMP_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + MESSAGE_TEXT_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LATITUDE_COLUMN + ", " + RCS_MESSAGE_TABLE + "." + LONGITUDE_COLUMN + " FROM " + RCS_MESSAGE_TABLE + " INNER JOIN " + RCS_OUTGOING_MESSAGE_TABLE + " ON " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + "=" + RCS_OUTGOING_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN);
    // Add triggers
    // Delete the corresponding rcs_message row upon deleting a row in rcs_incoming_message
    // 
    // CREATE TRIGGER delete_common_message_after_incoming
    // AFTER DELETE ON rcs_incoming_message
    // BEGIN
    // DELETE FROM rcs_message WHERE rcs_message.rcs_message_row_id=OLD.rcs_message_row_id;
    // END
    db.execSQL("CREATE TRIGGER deleteCommonMessageAfterIncoming AFTER DELETE ON " + RCS_INCOMING_MESSAGE_TABLE + " BEGIN DELETE FROM " + RCS_MESSAGE_TABLE + " WHERE " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + "=OLD." + MESSAGE_ID_COLUMN + "; END");
    // Delete the corresponding rcs_message row upon deleting a row in rcs_outgoing_message
    // 
    // CREATE TRIGGER delete_common_message_after_outgoing
    // AFTER DELETE ON rcs_outgoing_message
    // BEGIN
    // DELETE FROM rcs_message WHERE rcs_message.rcs_message_row_id=OLD.rcs_message_row_id;
    // END
    db.execSQL("CREATE TRIGGER deleteCommonMessageAfterOutgoing AFTER DELETE ON " + RCS_OUTGOING_MESSAGE_TABLE + " BEGIN DELETE FROM " + RCS_MESSAGE_TABLE + " WHERE " + RCS_MESSAGE_TABLE + "." + MESSAGE_ID_COLUMN + "=OLD." + MESSAGE_ID_COLUMN + "; END");
}
#end_block

#method_before
Cursor queryMessages(Bundle bundle) {
    RcsMessageQueryParameters queryParameters = null;
    RcsMessageQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(MESSAGE_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(MESSAGE_QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    // if no parameters were entered, build an empty query parameters object
    if (queryParameters == null) {
        queryParameters = RcsMessageQueryParameters.builder().build();
    }
    return performInitialQuery(queryParameters);
}
#method_after
Cursor queryMessages(Bundle bundle) {
    RcsMessageQueryParameters queryParameters = null;
    RcsQueryContinuationToken continuationToken = null;
    if (bundle != null) {
        queryParameters = bundle.getParcelable(MESSAGE_QUERY_PARAMETERS_KEY);
        continuationToken = bundle.getParcelable(QUERY_CONTINUATION_TOKEN);
    }
    if (continuationToken != null) {
        return RcsProviderUtil.performContinuationQuery(mSqLiteOpenHelper.getReadableDatabase(), continuationToken);
    }
    // if no parameters were entered, build an empty query parameters object
    if (queryParameters == null) {
        queryParameters = new RcsMessageQueryParameters.Builder().build();
    }
    return performInitialQuery(queryParameters);
}
#end_block

#method_before
private Cursor performInitialQuery(RcsMessageQueryParameters queryParameters) {
    SQLiteDatabase db = mSqLiteOpenHelper.getReadableDatabase();
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ").append(UNIFIED_MESSAGE_VIEW);
    @RcsMessageQueryParameters.MessageType
    int messageType = queryParameters.getMessageType();
    String messageLike = queryParameters.getMessageLike();
    int threadId = queryParameters.getThreadId();
    boolean isMessageLikePresent = !TextUtils.isEmpty(messageLike);
    boolean isMessageTypeFiltered = messageType != INCOMING_AND_OUTGOING;
    boolean isThreadFiltered = threadId != THREAD_ID_NOT_SET;
    if (isMessageLikePresent || isMessageTypeFiltered || isThreadFiltered) {
        rawQuery.append(" WHERE ");
    }
    if (messageType == INCOMING_ONLY) {
        rawQuery.append(IS_INCOMING_COLUMN).append("=1");
    } else if (messageType == OUTGOING_ONLY) {
        rawQuery.append(IS_INCOMING_COLUMN).append("=0");
    }
    if (isMessageLikePresent) {
        if (isMessageTypeFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(TEXT_COLUMN).append(" LIKE \"").append(messageLike).append("\"");
    }
    if (isThreadFiltered) {
        if (isMessageLikePresent || isMessageTypeFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(RCS_THREAD_ID_COLUMN).append("=").append(threadId);
    }
    // TODO - figure out a way to see if this message has file transfer or not. Ideally we
    // should join the unified table with file transfer table, but using a trigger to change a
    // flag on rcs_message would also work
    rawQuery.append(" ORDER BY ");
    int sortingProperty = queryParameters.getSortingProperty();
    if (sortingProperty == RcsMessageQueryParameters.TIMESTAMP) {
        rawQuery.append(ORIGINATION_TIMESTAMP_COLUMN);
    } else {
        rawQuery.append(MESSAGE_ID_COLUMN);
    }
    rawQuery.append(queryParameters.isAscending() ? " ASC " : " DESC ");
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // If the query was paginated, build the next query
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsMessageQueryContinuationToken(rawQueryAsString, limit, limit), MESSAGE_QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#method_after
private Cursor performInitialQuery(RcsMessageQueryParameters queryParameters) {
    SQLiteDatabase db = mSqLiteOpenHelper.getReadableDatabase();
    StringBuilder rawQuery = new StringBuilder("SELECT * FROM ").append(UNIFIED_MESSAGE_VIEW);
    int messageType = queryParameters.getMessageType();
    String messageLike = queryParameters.getMessageLike();
    int threadId = queryParameters.getThreadId();
    boolean isMessageLikePresent = !TextUtils.isEmpty(messageLike);
    boolean isMessageTypeFiltered = (messageType == MESSAGE_TYPE_INCOMING) || (messageType == MESSAGE_TYPE_OUTGOING);
    boolean isThreadFiltered = threadId != THREAD_ID_NOT_SET;
    if (isMessageLikePresent || isMessageTypeFiltered || isThreadFiltered) {
        rawQuery.append(" WHERE ");
    }
    if (messageType == MESSAGE_TYPE_INCOMING) {
        rawQuery.append(MESSAGE_TYPE_COLUMN).append("=").append(MESSAGE_TYPE_INCOMING);
    } else if (messageType == MESSAGE_TYPE_OUTGOING) {
        rawQuery.append(MESSAGE_TYPE_COLUMN).append("=").append(MESSAGE_TYPE_OUTGOING);
    }
    if (isMessageLikePresent) {
        if (isMessageTypeFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(MESSAGE_TEXT_COLUMN).append(" LIKE \"").append(messageLike).append("\"");
    }
    if (isThreadFiltered) {
        if (isMessageLikePresent || isMessageTypeFiltered) {
            rawQuery.append(" AND ");
        }
        rawQuery.append(RCS_THREAD_ID_COLUMN).append("=").append(threadId);
    }
    // TODO - figure out a way to see if this message has file transfer or not. Ideally we
    // should join the unified table with file transfer table, but using a trigger to change a
    // flag on rcs_message would also work
    rawQuery.append(" ORDER BY ");
    int sortingProperty = queryParameters.getSortingProperty();
    if (sortingProperty == RcsMessageQueryParameters.SORT_BY_TIMESTAMP) {
        rawQuery.append(ORIGINATION_TIMESTAMP_COLUMN);
    } else {
        rawQuery.append(MESSAGE_ID_COLUMN);
    }
    rawQuery.append(queryParameters.getSortDirection() ? " ASC " : " DESC ");
    RcsProviderUtil.appendLimit(rawQuery, queryParameters.getLimit());
    String rawQueryAsString = rawQuery.toString();
    Cursor cursor = db.rawQuery(rawQueryAsString, null);
    // If the query was paginated, build the next query
    int limit = queryParameters.getLimit();
    if (limit > 0) {
        RcsProviderUtil.createContinuationTokenBundle(cursor, new RcsQueryContinuationToken(MESSAGE_QUERY_CONTINUATION_TOKEN_TYPE, rawQueryAsString, limit, limit), QUERY_CONTINUATION_TOKEN);
    }
    return cursor;
}
#end_block

#method_before
private ContentValues getIncomingMessageValues(ContentValues allValues) {
    ContentValues incomingMessageValues = new ContentValues();
    if (allValues.containsKey(SENDER_PARTICIPANT_COLUMN)) {
        incomingMessageValues.put(SENDER_PARTICIPANT_COLUMN, allValues.getAsInteger(SENDER_PARTICIPANT_COLUMN));
        allValues.remove(SENDER_PARTICIPANT_COLUMN);
    }
    if (allValues.containsKey(ARRIVAL_TIMESTAMP_COLUMN)) {
        incomingMessageValues.put(ARRIVAL_TIMESTAMP_COLUMN, allValues.getAsLong(ARRIVAL_TIMESTAMP_COLUMN));
        allValues.remove(ARRIVAL_TIMESTAMP_COLUMN);
    }
    if (allValues.containsKey(NOTIFIED_TIMESTAMP_COLUMN)) {
        incomingMessageValues.put(NOTIFIED_TIMESTAMP_COLUMN, allValues.getAsLong(NOTIFIED_TIMESTAMP_COLUMN));
        allValues.remove(NOTIFIED_TIMESTAMP_COLUMN);
    }
    return incomingMessageValues;
}
#method_after
private ContentValues getIncomingMessageValues(ContentValues allValues) {
    ContentValues incomingMessageValues = new ContentValues();
    if (allValues.containsKey(SENDER_PARTICIPANT_ID_COLUMN)) {
        incomingMessageValues.put(SENDER_PARTICIPANT_ID_COLUMN, allValues.getAsInteger(SENDER_PARTICIPANT_ID_COLUMN));
        allValues.remove(SENDER_PARTICIPANT_ID_COLUMN);
    }
    if (allValues.containsKey(ARRIVAL_TIMESTAMP_COLUMN)) {
        incomingMessageValues.put(ARRIVAL_TIMESTAMP_COLUMN, allValues.getAsLong(ARRIVAL_TIMESTAMP_COLUMN));
        allValues.remove(ARRIVAL_TIMESTAMP_COLUMN);
    }
    if (allValues.containsKey(RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN)) {
        incomingMessageValues.put(RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN, allValues.getAsLong(RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN));
        allValues.remove(RcsIncomingMessageColumns.SEEN_TIMESTAMP_COLUMN);
    }
    return incomingMessageValues;
}
#end_block

#method_before
static Cursor performContinuationQuery(SQLiteDatabase db, RcsQueryContinuationToken continuationToken) {
    String rawQuery = continuationToken.getRawQuery();
    int offset = continuationToken.getOffset();
    if (offset <= 0 || TextUtils.isEmpty(rawQuery)) {
        Log.e(TAG, "RcsProviderUtil: Invalid continuation token");
        return null;
    }
    String continuationQuery = rawQuery + " OFFSET " + offset;
    Cursor cursor = db.rawQuery(continuationQuery, null);
    if (cursor.getCount() > 0) {
        continuationToken.incrementOffset();
        Bundle bundle = new Bundle();
        bundle.putParcelable(continuationToken.getKey(), continuationToken);
        cursor.setExtras(bundle);
    }
    return cursor;
}
#method_after
static Cursor performContinuationQuery(SQLiteDatabase db, RcsQueryContinuationToken continuationToken) {
    String rawQuery = continuationToken.getRawQuery();
    int offset = continuationToken.getOffset();
    if (offset <= 0 || TextUtils.isEmpty(rawQuery)) {
        Log.e(TAG, "RcsProviderUtil: Invalid continuation token");
        return null;
    }
    String continuationQuery = rawQuery + " OFFSET " + offset;
    Cursor cursor = db.rawQuery(continuationQuery, null);
    if (cursor.getCount() > 0) {
        continuationToken.incrementOffset();
        Bundle bundle = new Bundle();
        bundle.putParcelable(QUERY_CONTINUATION_TOKEN, continuationToken);
        cursor.setExtras(bundle);
    }
    return cursor;
}
#end_block

#method_before
@Override
public void registerCallback(final ITvInputManagerCallback callback, int userId) {
    final int resolvedUserId = resolveCallingUserId(Binder.getCallingPid(), Binder.getCallingUid(), userId, "registerCallback");
    final long identity = Binder.clearCallingIdentity();
    try {
        synchronized (mLock) {
            final UserState userState = getOrCreateUserStateLocked(resolvedUserId);
            userState.callbackSet.add(callback);
            try {
                callback.asBinder().linkToDeath(new IBinder.DeathRecipient() {

                    @Override
                    public void binderDied() {
                        synchronized (mLock) {
                            if (userState.callbackSet != null) {
                                userState.callbackSet.remove(callback);
                            }
                        }
                    }
                }, 0);
            } catch (RemoteException e) {
                Slog.e(TAG, "client process has already died", e);
            }
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}
#method_after
@Override
public void registerCallback(final ITvInputManagerCallback callback, int userId) {
    final int resolvedUserId = resolveCallingUserId(Binder.getCallingPid(), Binder.getCallingUid(), userId, "registerCallback");
    final long identity = Binder.clearCallingIdentity();
    try {
        synchronized (mLock) {
            final UserState userState = getOrCreateUserStateLocked(resolvedUserId);
            userState.callbackSet.add(callback);
            mDeathRecipient = new IBinder.DeathRecipient() {

                @Override
                public void binderDied() {
                    synchronized (mLock) {
                        if (userState.callbackSet != null) {
                            userState.callbackSet.remove(callback);
                        }
                    }
                }
            };
            try {
                callback.asBinder().linkToDeath(mDeathRecipient, 0);
            } catch (RemoteException e) {
                Slog.e(TAG, "client process has already died", e);
            }
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}
#end_block

#method_before
@Override
public void unregisterCallback(ITvInputManagerCallback callback, int userId) {
    final int resolvedUserId = resolveCallingUserId(Binder.getCallingPid(), Binder.getCallingUid(), userId, "unregisterCallback");
    final long identity = Binder.clearCallingIdentity();
    try {
        synchronized (mLock) {
            UserState userState = getOrCreateUserStateLocked(resolvedUserId);
            userState.callbackSet.remove(callback);
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}
#method_after
@Override
public void unregisterCallback(ITvInputManagerCallback callback, int userId) {
    final int resolvedUserId = resolveCallingUserId(Binder.getCallingPid(), Binder.getCallingUid(), userId, "unregisterCallback");
    final long identity = Binder.clearCallingIdentity();
    try {
        synchronized (mLock) {
            UserState userState = getOrCreateUserStateLocked(resolvedUserId);
            userState.callbackSet.remove(callback);
            callback.asBinder().unlinkToDeath(mDeathRecipient, 0);
        }
    } finally {
        Binder.restoreCallingIdentity(identity);
    }
}
#end_block

#method_before
public boolean setAlwaysOnVpnPackageForUser(int userId, @Nullable String vpnPackage, boolean lockdownEnabled) {
    try {
        return mService.setAlwaysOnVpnPackage(userId, vpnPackage, lockdownEnabled);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}
#method_after
@RequiresPermission(android.Manifest.permission.CONTROL_ALWAYS_ON_VPN)
public boolean setAlwaysOnVpnPackageForUser(int userId, @Nullable String vpnPackage, boolean lockdownEnabled, @Nullable List<String> lockdownWhitelist) {
    try {
        return mService.setAlwaysOnVpnPackage(userId, vpnPackage, lockdownEnabled, lockdownWhitelist);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}
#end_block

#method_before
public String getAlwaysOnVpnPackageForUser(int userId) {
    try {
        return mService.getAlwaysOnVpnPackage(userId);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}
#method_after
@RequiresPermission(android.Manifest.permission.CONTROL_ALWAYS_ON_VPN)
public String getAlwaysOnVpnPackageForUser(int userId) {
    try {
        return mService.getAlwaysOnVpnPackage(userId);
    } catch (RemoteException e) {
        throw e.rethrowFromSystemServer();
    }
}
#end_block

#method_before
@Deprecated
public static boolean setProcessDefaultNetwork(@Nullable Network network) {
    int netId = (network == null) ? NETID_UNSET : network.netId;
    if (netId == NetworkUtils.getBoundNetworkForProcess()) {
        return true;
    }
    if (NetworkUtils.bindProcessToNetwork(netId)) {
        // TODO: Deprecate this static method and replace it with a non-static version.
        try {
            Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
        } catch (SecurityException e) {
            // The process doesn't have ACCESS_NETWORK_STATE, so we can't fetch the proxy.
            Log.e(TAG, "Can't set proxy properties", e);
        }
        // Must flush DNS cache as new network may have different DNS resolutions.
        InetAddress.clearDnsCache();
        // Must flush socket pool as idle sockets will be bound to previous network and may
        // cause subsequent fetches to be performed on old network.
        NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
        return true;
    } else {
        return false;
    }
}
#method_after
@Deprecated
public static boolean setProcessDefaultNetwork(@Nullable Network network) {
    int netId = (network == null) ? NETID_UNSET : network.netId;
    boolean isSameNetId = (netId == NetworkUtils.getBoundNetworkForProcess());
    if (netId != NETID_UNSET) {
        netId = network.getNetIdForResolv();
    }
    if (!NetworkUtils.bindProcessToNetwork(netId)) {
        return false;
    }
    if (!isSameNetId) {
        // TODO: Deprecate this static method and replace it with a non-static version.
        try {
            Proxy.setHttpProxySystemProperty(getInstance().getDefaultProxy());
        } catch (SecurityException e) {
            // The process doesn't have ACCESS_NETWORK_STATE, so we can't fetch the proxy.
            Log.e(TAG, "Can't set proxy properties", e);
        }
        // Must flush DNS cache as new network may have different DNS resolutions.
        InetAddress.clearDnsCache();
        // Must flush socket pool as idle sockets will be bound to previous network and may
        // cause subsequent fetches to be performed on old network.
        NetworkEventDispatcher.getInstance().onNetworkConfigurationChanged();
    }
    return true;
}
#end_block

#method_before
@NonNull
public Request build() {
    return new Request(uriSchemeFix(mText.toString(), mStartIndex, mEndIndex), mStartIndex, mEndIndex, mDefaultLocales, mReferenceTime, mExtras == null ? Bundle.EMPTY : BundleUtils.deepCopy(mExtras));
}
#method_after
@NonNull
public TextClassification build() {
    return new TextClassification(mText, mActions, new EntityConfidence(mEntityConfidence), mId, mExtras == null ? Bundle.EMPTY : BundleUtils.deepCopy(mExtras));
}
#end_block

#method_before
@NonNull
public Request build() {
    return new Request(uriSchemeFix(mText.toString(), mStartIndex, mEndIndex), mStartIndex, mEndIndex, mDefaultLocales, mReferenceTime, mExtras == null ? Bundle.EMPTY : BundleUtils.deepCopy(mExtras));
}
#method_after
@NonNull
public Request build() {
    return new Request(normalizeIfUri(mText, mStartIndex, mEndIndex), mStartIndex, mEndIndex, mDefaultLocales, mReferenceTime, mExtras == null ? Bundle.EMPTY : BundleUtils.deepCopy(mExtras));
}
#end_block

#method_before
@Test
public void testBundleRequest() {
    TextClassification.Request reference = createTextClassificationRequestBuilder().setExtras(BUNDLE).build();
    // Serialize/deserialize.
    TextClassification.Request result = TextClassification.Request.createFromBundle(reference.toBundle());
    assertEquals(TEXT, result.getText());
    assertEquals(START_INDEX, result.getStartIndex());
    assertEquals(END_INDEX, result.getEndIndex());
    assertEquals(LOCALE_LIST.toLanguageTags(), result.getDefaultLocales().toLanguageTags());
    assertEquals(REFERENCE_TIME_IN_MS, result.getReferenceTime());
    assertEquals(BUNDLE_VALUE, result.getExtras().getString(BUNDLE_KEY));
}
#method_after
@Test
public void testBundleRequest() {
    TextClassification.Request reference = createTextClassificationRequestBuilder().setExtras(BUNDLE).build();
    // Serialize/deserialize.
    TextClassification.Request result = TextClassification.Request.createFromBundle(reference.toBundle());
    assertEquals(TEXT, result.getText().toString());
    assertEquals(START_INDEX, result.getStartIndex());
    assertEquals(END_INDEX, result.getEndIndex());
    assertEquals(LOCALE_LIST.toLanguageTags(), result.getDefaultLocales().toLanguageTags());
    assertEquals(REFERENCE_TIME_IN_MS, result.getReferenceTime());
    assertEquals(BUNDLE_VALUE, result.getExtras().getString(BUNDLE_KEY));
}
#end_block

#method_before
@Test
public void testMinimalBundleRequest() {
    TextClassification.Request reference = new TextClassification.Request.Builder(TEXT, START_INDEX, END_INDEX).build();
    // Serialize/deserialize.
    TextClassification.Request result = TextClassification.Request.createFromBundle(reference.toBundle());
    assertEquals(TEXT, result.getText());
    assertEquals(START_INDEX, result.getStartIndex());
    assertEquals(END_INDEX, result.getEndIndex());
    assertEquals(null, result.getReferenceTime());
}
#method_after
@Test
public void testMinimalBundleRequest() {
    TextClassification.Request reference = new TextClassification.Request.Builder(TEXT, START_INDEX, END_INDEX).build();
    // Serialize/deserialize.
    TextClassification.Request result = TextClassification.Request.createFromBundle(reference.toBundle());
    assertEquals(TEXT, result.getText().toString());
    assertEquals(START_INDEX, result.getStartIndex());
    assertEquals(END_INDEX, result.getEndIndex());
    assertEquals(null, result.getReferenceTime());
}
#end_block

#method_before
@Test
@SdkSuppress(minSdkVersion = 28)
public void testToPlatformRequest() {
    TextClassification.Request request = createTextClassificationRequestBuilder().build();
    android.view.textclassifier.TextClassification.Request platformRequest = (android.view.textclassifier.TextClassification.Request) request.toPlatform();
    assertThat(platformRequest.getStartIndex()).isEqualTo(START_INDEX);
    assertThat(platformRequest.getEndIndex()).isEqualTo(END_INDEX);
    assertThat(platformRequest.getText()).isEqualTo(TEXT);
    assertThat(platformRequest.getDefaultLocales().toLanguageTags()).isEqualTo(LOCALE_LIST.toLanguageTags());
    assertThat(platformRequest.getReferenceTime().toInstant().toEpochMilli()).isEqualTo(REFERENCE_TIME_IN_MS);
}
#method_after
@Test
@SdkSuppress(minSdkVersion = 28)
public void testToPlatformRequest() {
    TextClassification.Request request = createTextClassificationRequestBuilder().build();
    android.view.textclassifier.TextClassification.Request platformRequest = (android.view.textclassifier.TextClassification.Request) request.toPlatform();
    assertThat(platformRequest.getStartIndex()).isEqualTo(START_INDEX);
    assertThat(platformRequest.getEndIndex()).isEqualTo(END_INDEX);
    assertThat(platformRequest.getText().toString()).isEqualTo(TEXT);
    assertThat(platformRequest.getDefaultLocales().toLanguageTags()).isEqualTo(LOCALE_LIST.toLanguageTags());
    assertThat(platformRequest.getReferenceTime().toInstant().toEpochMilli()).isEqualTo(REFERENCE_TIME_IN_MS);
}
#end_block

#method_before
@Test
@SdkSuppress(minSdkVersion = 28)
public void testRequestFromPlatform() {
    android.view.textclassifier.TextClassification.Request platformRequest = new android.view.textclassifier.TextClassification.Request.Builder(TEXT, START_INDEX, END_INDEX).setDefaultLocales((LocaleList) LOCALE_LIST.unwrap()).setReferenceTime(ConvertUtils.createZonedDateTimeFromUtc(REFERENCE_TIME_IN_MS)).build();
    TextClassification.Request request = TextClassification.Request.fromPlatform(platformRequest);
    assertThat(request.getStartIndex()).isEqualTo(START_INDEX);
    assertThat(request.getEndIndex()).isEqualTo(END_INDEX);
    assertThat(request.getText()).isEqualTo(TEXT);
    assertThat(request.getDefaultLocales().toLanguageTags()).isEqualTo(LOCALE_LIST.toLanguageTags());
    assertThat(request.getReferenceTime()).isEqualTo(REFERENCE_TIME_IN_MS);
}
#method_after
@Test
@SdkSuppress(minSdkVersion = 28)
public void testRequestFromPlatform() {
    android.view.textclassifier.TextClassification.Request platformRequest = new android.view.textclassifier.TextClassification.Request.Builder(TEXT, START_INDEX, END_INDEX).setDefaultLocales((LocaleList) LOCALE_LIST.unwrap()).setReferenceTime(ConvertUtils.createZonedDateTimeFromUtc(REFERENCE_TIME_IN_MS)).build();
    TextClassification.Request request = TextClassification.Request.fromPlatform(platformRequest);
    assertThat(request.getStartIndex()).isEqualTo(START_INDEX);
    assertThat(request.getEndIndex()).isEqualTo(END_INDEX);
    assertThat(request.getText().toString()).isEqualTo(TEXT);
    assertThat(request.getDefaultLocales().toLanguageTags()).isEqualTo(LOCALE_LIST.toLanguageTags());
    assertThat(request.getReferenceTime()).isEqualTo(REFERENCE_TIME_IN_MS);
}
#end_block

#method_before
@Test
@SdkSuppress(minSdkVersion = 28)
public void testConvertFromPlatformTextClassification() {
    final PendingIntent primaryPendingIntent = createPendingIntent(PRIMARY_INTENT);
    final RemoteActionCompat remoteAction0 = new RemoteActionCompat(PRIMARY_ICON, PRIMARY_LABEL, PRIMARY_DESCRIPTION, primaryPendingIntent);
    final PendingIntent secondaryPendingIntent = createPendingIntent(SECONDARY_INTENT);
    final RemoteActionCompat remoteAction1 = new RemoteActionCompat(SECONDARY_ICON, SECONDARY_LABEL, SECONDARY_DESCRIPTION, secondaryPendingIntent);
    android.view.textclassifier.TextClassification platformTextClassification = new android.view.textclassifier.TextClassification.Builder().setText(TEXT.toString()).addAction(remoteAction0.toRemoteAction()).addAction(remoteAction1.toRemoteAction()).setEntityType(TextClassifier.TYPE_ADDRESS, ADDRESS_SCORE).setEntityType(TextClassifier.TYPE_PHONE, PHONE_SCORE).setId(ID).build();
    TextClassification actual = TextClassification.fromPlatform(mContext, platformTextClassification);
    assertTextClassificationEquals(actual, createExpectedBuilderWithRemoteActions().build());
}
#method_after
@Test
@SdkSuppress(minSdkVersion = 28)
public void testConvertFromPlatformTextClassification() {
    final PendingIntent primaryPendingIntent = createPendingIntent(PRIMARY_INTENT);
    final RemoteActionCompat remoteAction0 = new RemoteActionCompat(PRIMARY_ICON, PRIMARY_LABEL, PRIMARY_DESCRIPTION, primaryPendingIntent);
    final PendingIntent secondaryPendingIntent = createPendingIntent(SECONDARY_INTENT);
    final RemoteActionCompat remoteAction1 = new RemoteActionCompat(SECONDARY_ICON, SECONDARY_LABEL, SECONDARY_DESCRIPTION, secondaryPendingIntent);
    android.view.textclassifier.TextClassification platformTextClassification = new android.view.textclassifier.TextClassification.Builder().setText(TEXT).addAction(remoteAction0.toRemoteAction()).addAction(remoteAction1.toRemoteAction()).setEntityType(TextClassifier.TYPE_ADDRESS, ADDRESS_SCORE).setEntityType(TextClassifier.TYPE_PHONE, PHONE_SCORE).setId(ID).build();
    TextClassification actual = TextClassification.fromPlatform(mContext, platformTextClassification);
    assertTextClassificationEquals(actual, createExpectedBuilderWithRemoteActions().build());
}
#end_block

#method_before
@Test
@SdkSuppress(minSdkVersion = 26, maxSdkVersion = 27)
public void testConvertFromPlatformTextClassification_O() {
    android.view.textclassifier.TextClassification platformTextClassification = new android.view.textclassifier.TextClassification.Builder().setText(TEXT.toString()).setEntityType(TextClassifier.TYPE_ADDRESS, ADDRESS_SCORE).setEntityType(TextClassifier.TYPE_PHONE, PHONE_SCORE).setIcon(mContext.getDrawable(R.drawable.abc_ic_star_black_16dp)).setLabel(PRIMARY_LABEL).setIntent(PRIMARY_INTENT).build();
    TextClassification actual = TextClassification.fromPlatform(mContext, platformTextClassification);
    TextClassification expected = createExpectedBuilder().setId(null).addAction(createRemoteActionCompat(PRIMARY_INTENT, PRIMARY_ICON, PRIMARY_LABEL, PRIMARY_LABEL)).build();
    assertTextClassificationEquals(actual, expected);
}
#method_after
@Test
@SdkSuppress(minSdkVersion = 26, maxSdkVersion = 27)
public void testConvertFromPlatformTextClassification_O() {
    android.view.textclassifier.TextClassification platformTextClassification = new android.view.textclassifier.TextClassification.Builder().setText(TEXT).setEntityType(TextClassifier.TYPE_ADDRESS, ADDRESS_SCORE).setEntityType(TextClassifier.TYPE_PHONE, PHONE_SCORE).setIcon(mContext.getDrawable(R.drawable.abc_ic_star_black_16dp)).setLabel(PRIMARY_LABEL).setIntent(PRIMARY_INTENT).build();
    TextClassification actual = TextClassification.fromPlatform(mContext, platformTextClassification);
    TextClassification expected = createExpectedBuilder().setId(null).addAction(createRemoteActionCompat(PRIMARY_INTENT, PRIMARY_ICON, PRIMARY_LABEL, PRIMARY_LABEL)).build();
    assertTextClassificationEquals(actual, expected);
}
#end_block

#method_before
@Test
@SdkSuppress(minSdkVersion = 26, maxSdkVersion = 27)
public void testConvertToPlatformTextClassification_O() {
    TextClassification reference = createExpectedBuilderWithRemoteActions().build();
    android.view.textclassifier.TextClassification platformTextClassification = (android.view.textclassifier.TextClassification) reference.toPlatform(mContext);
    assertThat(platformTextClassification.getText()).isEqualTo(TEXT.toString());
    assertThat(platformTextClassification.getIcon()).isNotNull();
    assertThat(platformTextClassification.getOnClickListener()).isNotNull();
    assertThat(platformTextClassification.getEntityCount()).isEqualTo(2);
    assertThat(platformTextClassification.getEntity(0)).isEqualTo(TextClassifier.TYPE_ADDRESS);
    assertThat(platformTextClassification.getEntity(1)).isEqualTo(TextClassifier.TYPE_PHONE);
    assertThat(platformTextClassification.getIntent()).isNull();
}
#method_after
@Test
@SdkSuppress(minSdkVersion = 26, maxSdkVersion = 27)
public void testConvertToPlatformTextClassification_O() {
    TextClassification reference = createExpectedBuilderWithRemoteActions().build();
    android.view.textclassifier.TextClassification platformTextClassification = (android.view.textclassifier.TextClassification) reference.toPlatform(mContext);
    assertThat(platformTextClassification.getText()).isEqualTo(TEXT);
    assertThat(platformTextClassification.getIcon()).isNotNull();
    assertThat(platformTextClassification.getOnClickListener()).isNotNull();
    assertThat(platformTextClassification.getEntityCount()).isEqualTo(2);
    assertThat(platformTextClassification.getEntity(0)).isEqualTo(TextClassifier.TYPE_ADDRESS);
    assertThat(platformTextClassification.getEntity(1)).isEqualTo(TextClassifier.TYPE_PHONE);
    assertThat(platformTextClassification.getIntent()).isNull();
}
#end_block

#method_before
private TextClassification.Builder createExpectedBuilder() {
    TextClassification.Builder builder = new TextClassification.Builder().setText(TEXT.toString()).setEntityType(TextClassifier.TYPE_ADDRESS, ADDRESS_SCORE).setEntityType(TextClassifier.TYPE_PHONE, PHONE_SCORE).setId(ID);
    return builder;
}
#method_after
private TextClassification.Builder createExpectedBuilder() {
    TextClassification.Builder builder = new TextClassification.Builder().setText(TEXT).setEntityType(TextClassifier.TYPE_ADDRESS, ADDRESS_SCORE).setEntityType(TextClassifier.TYPE_PHONE, PHONE_SCORE).setId(ID);
    return builder;
}
#end_block

#method_before
@Override
public void schedule(WorkSpec... workSpecs) {
    WorkDatabase workDatabase = mWorkManager.getWorkDatabase();
    for (WorkSpec workSpec : workSpecs) {
        workDatabase.beginTransaction();
        try {
            // It is possible that this WorkSpec got cancelled/pruned since this isn't part of
            // the same database transaction as marking it enqueued (for example, if we using
            // any of the synchronous operations).  For now, handle this gracefully by exiting
            // the loop.  When we plumb ListenableFutures all the way through, we can remove the
            // *sync methods and return ListenableFutures, which will block on an operation on
            // the background task thread so all database operations happen on the same thread.
            // See b/114705286.
            WorkSpec currentDbWorkSpec = workDatabase.workSpecDao().getWorkSpec(workSpec.id);
            if (currentDbWorkSpec == null) {
                Logger.get().warning(TAG, "Skipping scheduling " + workSpec.id + " because it's no longer in the DB");
                continue;
            } else if (currentDbWorkSpec.state != WorkInfo.State.ENQUEUED) {
                Logger.get().warning(TAG, "Skipping scheduling " + workSpec.id + " because it is no longer enqueued");
                continue;
            }
            SystemIdInfo info = workDatabase.systemIdInfoDao().getSystemIdInfo(workSpec.id);
            if (info != null) {
                JobInfo jobInfo = getScheduledJobInfo(mJobScheduler, workSpec.id);
                if (jobInfo != null) {
                    Logger.get().debug(TAG, String.format("Skipping scheduling %s because JobScheduler is aware of it " + "already.", workSpec.id));
                    continue;
                }
            }
            int jobId = info != null ? info.systemId : mIdGenerator.nextJobSchedulerIdWithRange(mWorkManager.getConfiguration().getMinJobSchedulerId(), mWorkManager.getConfiguration().getMaxJobSchedulerId());
            if (info == null) {
                SystemIdInfo newSystemIdInfo = new SystemIdInfo(workSpec.id, jobId);
                mWorkManager.getWorkDatabase().systemIdInfoDao().insertSystemIdInfo(newSystemIdInfo);
            }
            scheduleInternal(workSpec, jobId);
            // in SystemJobService as needed.
            if (Build.VERSION.SDK_INT == 23) {
                int nextJobId = mIdGenerator.nextJobSchedulerIdWithRange(mWorkManager.getConfiguration().getMinJobSchedulerId(), mWorkManager.getConfiguration().getMaxJobSchedulerId());
                scheduleInternal(workSpec, nextJobId);
            }
            workDatabase.setTransactionSuccessful();
        } finally {
            workDatabase.endTransaction();
        }
    }
}
#method_after
@Override
public void schedule(WorkSpec... workSpecs) {
    WorkDatabase workDatabase = mWorkManager.getWorkDatabase();
    for (WorkSpec workSpec : workSpecs) {
        workDatabase.beginTransaction();
        try {
            // It is possible that this WorkSpec got cancelled/pruned since this isn't part of
            // the same database transaction as marking it enqueued (for example, if we using
            // any of the synchronous operations).  For now, handle this gracefully by exiting
            // the loop.  When we plumb ListenableFutures all the way through, we can remove the
            // *sync methods and return ListenableFutures, which will block on an operation on
            // the background task thread so all database operations happen on the same thread.
            // See b/114705286.
            WorkSpec currentDbWorkSpec = workDatabase.workSpecDao().getWorkSpec(workSpec.id);
            if (currentDbWorkSpec == null) {
                Logger.get().warning(TAG, "Skipping scheduling " + workSpec.id + " because it's no longer in the DB");
                continue;
            } else if (currentDbWorkSpec.state != WorkInfo.State.ENQUEUED) {
                Logger.get().warning(TAG, "Skipping scheduling " + workSpec.id + " because it is no longer enqueued");
                continue;
            }
            SystemIdInfo info = workDatabase.systemIdInfoDao().getSystemIdInfo(workSpec.id);
            if (info != null) {
                JobInfo jobInfo = getPendingJobInfo(mJobScheduler, workSpec.id);
                if (jobInfo != null) {
                    Logger.get().debug(TAG, String.format("Skipping scheduling %s because JobScheduler is aware of it " + "already.", workSpec.id));
                    continue;
                }
            }
            int jobId = info != null ? info.systemId : mIdGenerator.nextJobSchedulerIdWithRange(mWorkManager.getConfiguration().getMinJobSchedulerId(), mWorkManager.getConfiguration().getMaxJobSchedulerId());
            if (info == null) {
                SystemIdInfo newSystemIdInfo = new SystemIdInfo(workSpec.id, jobId);
                mWorkManager.getWorkDatabase().systemIdInfoDao().insertSystemIdInfo(newSystemIdInfo);
            }
            scheduleInternal(workSpec, jobId);
            // in SystemJobService as needed.
            if (Build.VERSION.SDK_INT == 23) {
                int nextJobId = mIdGenerator.nextJobSchedulerIdWithRange(mWorkManager.getConfiguration().getMinJobSchedulerId(), mWorkManager.getConfiguration().getMaxJobSchedulerId());
                scheduleInternal(workSpec, nextJobId);
            }
            workDatabase.setTransactionSuccessful();
        } finally {
            workDatabase.endTransaction();
        }
    }
}
#end_block

#method_before
@Override
public void cancel(@NonNull String workSpecId) {
    // Note: despite what the word "pending" and the associated Javadoc might imply, this is
    // actually a list of all unfinished jobs that JobScheduler knows about for the current
    // process.
    JobInfo jobInfo = getScheduledJobInfo(mJobScheduler, workSpecId);
    if (jobInfo != null) {
        mWorkManager.getWorkDatabase().systemIdInfoDao().removeSystemIdInfo(workSpecId);
        mJobScheduler.cancel(jobInfo.getId());
    }
    if (Build.VERSION.SDK_INT == 23) {
        // There is a second job scheduled which needs to be cancelled
        jobInfo = getScheduledJobInfo(mJobScheduler, workSpecId);
        if (jobInfo != null) {
            // Its safe to call this method twice.
            mWorkManager.getWorkDatabase().systemIdInfoDao().removeSystemIdInfo(workSpecId);
            mJobScheduler.cancel(jobInfo.getId());
        }
    }
}
#method_after
@Override
public void cancel(@NonNull String workSpecId) {
    // Note: despite what the word "pending" and the associated Javadoc might imply, this is
    // actually a list of all unfinished jobs that JobScheduler knows about for the current
    // process.
    List<JobInfo> allJobInfos = mJobScheduler.getAllPendingJobs();
    if (allJobInfos != null) {
        // Apparently this CAN be null on API 23?
        for (JobInfo jobInfo : allJobInfos) {
            if (workSpecId.equals(jobInfo.getExtras().getString(SystemJobInfoConverter.EXTRA_WORK_SPEC_ID))) {
                // Its safe to call this method twice.
                mWorkManager.getWorkDatabase().systemIdInfoDao().removeSystemIdInfo(workSpecId);
                mJobScheduler.cancel(jobInfo.getId());
                // See comment in #schedule.
                if (Build.VERSION.SDK_INT != 23) {
                    return;
                }
            }
        }
    }
}
#end_block

#method_before
public static void jobSchedulerCancelAll(@NonNull Context context) {
    JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
    if (jobScheduler != null) {
        List<JobInfo> jobInfos = jobScheduler.getAllPendingJobs();
        // Apparently this can be null on API 23?
        if (jobInfos != null) {
            for (JobInfo jobInfo : jobInfos) {
                PersistableBundle extras = jobInfo.getExtras();
                // This is a job scheduled by WorkManager.
                if (extras.containsKey(EXTRA_WORK_SPEC_ID)) {
                    jobScheduler.cancel(jobInfo.getId());
                }
            }
        }
    }
}
#method_after
public static void jobSchedulerCancelAll(@NonNull Context context) {
    JobScheduler jobScheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
    if (jobScheduler != null) {
        List<JobInfo> jobInfos = jobScheduler.getAllPendingJobs();
        // Apparently this can be null on API 23?
        if (jobInfos != null) {
            for (JobInfo jobInfo : jobInfos) {
                PersistableBundle extras = jobInfo.getExtras();
                // This is a job scheduled by WorkManager.
                if (extras.containsKey(SystemJobInfoConverter.EXTRA_WORK_SPEC_ID)) {
                    jobScheduler.cancel(jobInfo.getId());
                }
            }
        }
    }
}
#end_block

#method_before
private void procNetSane(String path) {
    File f = new File(path);
    assertFalse(f.canRead());
    assertFalse(f.canWrite());
    assertFalse(f.canExecute());
    assertFileOwnedBy(f, "root");
    assertFileOwnedByGroup(f, "root");
}
#method_after
private static void procNetSane(String path) {
    File f = new File(path);
    assertFalse(f.canRead());
    assertFalse(f.canWrite());
    assertFalse(f.canExecute());
    assertFileOwnedBy(f, "root");
    assertFileOwnedByGroup(f, "root");
}
#end_block

#method_before
@Test
public void testFromTreeUriUsesFullDocumentId() {
    Context context = ApplicationProvider.getApplicationContext();
    DocumentFile rootDoc = DocumentFile.fromTreeUri(context, CONTENT_TREE_ROOT_URI);
    assertThat(rootDoc.getUri(), equalTo(EXT_ROOT_TREE_URI));
    DocumentFile subDirDoc = DocumentFile.fromTreeUri(context, DOWNLOAD_URI);
    assertThat(subDirDoc.getUri(), equalTo(DOWNLOAD_URI));
}
#method_after
@Test
@SdkSuppress(minSdkVersion = 21)
public void testFromTreeUriUsesFullDocumentId() {
    Context context = ApplicationProvider.getApplicationContext();
    DocumentFile rootDoc = DocumentFile.fromTreeUri(context, CONTENT_TREE_ROOT_URI);
    assertThat(rootDoc.getUri(), equalTo(EXT_ROOT_TREE_URI));
    DocumentFile subDirDoc = DocumentFile.fromTreeUri(context, DOWNLOAD_URI);
    assertThat(subDirDoc.getUri(), equalTo(DOWNLOAD_URI));
}
#end_block

#method_before
@Nullable
public static DocumentFile fromTreeUri(@NonNull Context context, @NonNull Uri treeUri) {
    if (Build.VERSION.SDK_INT >= 21) {
        return new TreeDocumentFile(null, context, DocumentsContract.buildDocumentUriUsingTree(treeUri, getTreeDocumentId(treeUri)));
    } else {
        return null;
    }
}
#method_after
@Nullable
public static DocumentFile fromTreeUri(@NonNull Context context, @NonNull Uri treeUri) {
    if (Build.VERSION.SDK_INT >= 21) {
        String documentId = DocumentsContract.getTreeDocumentId(treeUri);
        if (DocumentsContract.isDocumentUri(context, treeUri)) {
            documentId = DocumentsContract.getDocumentId(treeUri);
        }
        return new TreeDocumentFile(null, context, DocumentsContract.buildDocumentUriUsingTree(treeUri, documentId));
    } else {
        return null;
    }
}
#end_block

#method_before
@Test
public void testLocalDayNightModeRecreatesActivity() throws Throwable {
    // Verify first that we're in day mode
    onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));
    // Now force the local night mode to be yes (aka night mode)
    setLocalNightModeAndWaitForRecreate(mActivityTestRule.getActivity(), AppCompatDelegate.MODE_NIGHT_YES);
    // Now check the text has changed, signifying that night resources are being used
    onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_NIGHT)));
}
#method_after
@Test
public void testLocalDayNightModeRecreatesActivity() throws Throwable {
    // Verify first that we're in day mode
    onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_DAY)));
    // Now force the local night mode to be yes (aka night mode)
    setLocalNightModeAndWaitForRecreate(mActivityTestRule.getActivity(), AppCompatDelegate.MODE_NIGHT_YES);
    // Assert that the new local night mode is returned
    assertEquals(AppCompatDelegate.MODE_NIGHT_YES, mActivityTestRule.getActivity().getDelegate().getLocalNightMode());
    // Now check the text has changed, signifying that night resources are being used
    onView(withId(R.id.text_night_mode)).check(matches(withText(STRING_NIGHT)));
}
#end_block

#method_before
@Override
public void onConfigurationChanged(Configuration newConfig) {
    // be properly initialized.
    if (mHasActionBar && mSubDecorInstalled) {
        // Note: The action bar will need to access
        // view changes from superclass.
        ActionBar ab = getSupportActionBar();
        if (ab != null) {
            ab.onConfigurationChanged(newConfig);
        }
    }
    // Make sure that the DrawableManager knows about the new config
    AppCompatDrawableManager.get().onConfigurationChanged(mContext);
    // Re-apply Day/Night with the new configuration
    applyDayNight();
}
#method_after
@Override
public void onConfigurationChanged(Configuration newConfig) {
    // be properly initialized.
    if (mHasActionBar && mSubDecorInstalled) {
        // Note: The action bar will need to access
        // view changes from superclass.
        ActionBar ab = getSupportActionBar();
        if (ab != null) {
            ab.onConfigurationChanged(newConfig);
        }
    }
    // Make sure that the DrawableManager knows about the new config
    AppCompatDrawableManager.get().onConfigurationChanged(mContext);
    // Re-apply Day/Night with the new configuration but disable recreations. Since this
    // configuration change has only just happened we can safely just update the resources now
    applyDayNight(false);
}
#end_block

#method_before
@Override
public boolean applyDayNight() {
    boolean applied = false;
    @NightMode
    final int nightMode = getNightMode();
    @ApplyableNightMode
    final int modeToApply = mapNightMode(nightMode);
    if (modeToApply != MODE_NIGHT_FOLLOW_SYSTEM) {
        applied = updateForNightMode(modeToApply);
    }
    if (nightMode == MODE_NIGHT_AUTO_TIME) {
        // If we're already been started, we may need to setup auto mode again
        getAutoTimeNightModeManager().setup();
    } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {
        getAutoBatteryNightModeManager().setup();
    }
    return applied;
}
#method_after
@Override
public boolean applyDayNight() {
    return applyDayNight(true);
}
#end_block

#method_before
@Override
public boolean applyDayNight() {
    boolean applied = false;
    @NightMode
    final int nightMode = getNightMode();
    @ApplyableNightMode
    final int modeToApply = mapNightMode(nightMode);
    if (modeToApply != MODE_NIGHT_FOLLOW_SYSTEM) {
        applied = updateForNightMode(modeToApply);
    }
    if (nightMode == MODE_NIGHT_AUTO_TIME) {
        // If we're already been started, we may need to setup auto mode again
        getAutoTimeNightModeManager().setup();
    } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {
        getAutoBatteryNightModeManager().setup();
    }
    return applied;
}
#method_after
private boolean applyDayNight(final boolean recreateIfNeeded) {
    @NightMode
    final int nightMode = calculateNightMode();
    @ApplyableNightMode
    final int modeToApply = mapNightMode(nightMode);
    final boolean applied = updateForNightMode(modeToApply, recreateIfNeeded);
    if (nightMode == MODE_NIGHT_AUTO_TIME) {
        // If we're already been started, we may need to setup auto mode again
        getAutoTimeNightModeManager().setup();
    } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {
        getAutoBatteryNightModeManager().setup();
    }
    return applied;
}
#end_block

#method_before
@Override
public void setLocalNightMode(@NightMode final int mode) {
    if (mLocalNightMode != mode) {
        mLocalNightMode = mode;
        applyDayNight();
    }
}
#method_after
@Override
public void setLocalNightMode(@NightMode int mode) {
    if (mLocalNightMode != mode) {
        mLocalNightMode = mode;
        applyDayNight();
    }
}
#end_block

#method_before
private boolean updateForNightMode(@ApplyableNightMode final int mode) {
    final Resources res = mContext.getResources();
    final Configuration config = res.getConfiguration();
    final int currentNightMode = config.uiMode & Configuration.UI_MODE_NIGHT_MASK;
    final int newNightMode = (mode == MODE_NIGHT_YES) ? Configuration.UI_MODE_NIGHT_YES : Configuration.UI_MODE_NIGHT_NO;
    boolean handled = false;
    if (currentNightMode != newNightMode) {
        final boolean manifestHandlingUiMode = isActivityManifestHandlingUiMode();
        final boolean shouldRecreateOnNightModeChange = !manifestHandlingUiMode && mCreated && mContext instanceof Activity;
        if (shouldRecreateOnNightModeChange) {
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, recreating Activity");
            }
            // If we've already been created, we need to recreate the Activity for the
            // mode to be applied
            ((Activity) mContext).recreate();
        } else if (!manifestHandlingUiMode) {
            // If the Activity is not set to handle uiMode config changes we will
            // update the Resources with a new Configuration with an updated UI Mode
            final Configuration newConf = new Configuration(config);
            newConf.uiMode = newNightMode | (config.uiMode & ~Configuration.UI_MODE_NIGHT_MASK);
            res.updateConfiguration(newConf, res.getDisplayMetrics());
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, updated res config");
            }
            // We may need to flush the Resources' drawable cache due to framework bugs.
            if (Build.VERSION.SDK_INT < 26) {
                ResourcesFlusher.flush(res);
            }
            if (mThemeResId != 0) {
                // We need to re-apply the theme so that it reflected the new
                // configuration
                mContext.setTheme(mThemeResId);
                if (Build.VERSION.SDK_INT >= 23) {
                    // On M+ setTheme only applies if the themeResId actually changes,
                    // since we have no way to publicly check what the Theme's current
                    // themeResId is, we just manually apply it anyway. Most of the time
                    // this is what we need anyway (since the themeResId does not
                    // often change)
                    mContext.getTheme().applyStyle(mThemeResId, true);
                }
            }
        }
        handled = true;
    } else {
        if (DEBUG) {
            Log.d(TAG, "applyNightMode() | Skipping. Night mode has not changed: " + mode);
        }
    }
    // Notify the activity of the night mode
    if (mContext instanceof AppCompatActivity) {
        ((AppCompatActivity) mContext).onNightModeChanged(mode);
    }
    return handled;
}
#method_after
private boolean updateForNightMode(@ApplyableNightMode final int mode, final boolean allowRecreation) {
    final Resources res = mContext.getResources();
    final Configuration config = res.getConfiguration();
    final int currentNightMode = config.uiMode & Configuration.UI_MODE_NIGHT_MASK;
    int newNightMode = currentNightMode;
    switch(mode) {
        case MODE_NIGHT_YES:
            newNightMode = Configuration.UI_MODE_NIGHT_YES;
            break;
        case MODE_NIGHT_NO:
            newNightMode = Configuration.UI_MODE_NIGHT_NO;
            break;
        case MODE_NIGHT_FOLLOW_SYSTEM:
            // If we're following the system, we just use the system default from the
            // application context
            newNightMode = mContext.getApplicationContext().getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
            break;
    }
    boolean handled = false;
    if (currentNightMode != newNightMode) {
        final boolean manifestHandlingUiMode = isActivityManifestHandlingUiMode();
        final boolean shouldRecreateOnNightModeChange = allowRecreation && !manifestHandlingUiMode && mCreated && mContext instanceof Activity;
        if (shouldRecreateOnNightModeChange) {
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, recreating Activity." + " Mode: " + mode);
            }
            // If we've already been created, we need to recreate the Activity for the
            // mode to be applied
            ((Activity) mContext).recreate();
        } else if (!manifestHandlingUiMode) {
            // If the Activity is not set to handle uiMode config changes we will
            // update the Resources with a new Configuration with an updated UI Mode
            final Configuration newConf = new Configuration(config);
            newConf.uiMode = newNightMode | (config.uiMode & ~Configuration.UI_MODE_NIGHT_MASK);
            res.updateConfiguration(newConf, res.getDisplayMetrics());
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, updated res config." + " Mode: " + mode);
            }
            // We may need to flush the Resources' drawable cache due to framework bugs.
            if (Build.VERSION.SDK_INT < 26) {
                ResourcesFlusher.flush(res);
            }
            if (mThemeResId != 0) {
                // We need to re-apply the theme so that it reflected the new
                // configuration
                mContext.setTheme(mThemeResId);
                if (Build.VERSION.SDK_INT >= 23) {
                    // On M+ setTheme only applies if the themeResId actually changes,
                    // since we have no way to publicly check what the Theme's current
                    // themeResId is, we just manually apply it anyway. Most of the time
                    // this is what we need anyway (since the themeResId does not
                    // often change)
                    mContext.getTheme().applyStyle(mThemeResId, true);
                }
            }
        }
        handled = true;
    } else {
        if (DEBUG) {
            Log.d(TAG, "applyNightMode() | Skipping. Night mode has not changed: " + mode);
        }
    }
    // Notify the activity of the night mode
    if (mContext instanceof AppCompatActivity) {
        ((AppCompatActivity) mContext).onNightModeChanged(mode);
    }
    return handled;
}
#end_block

#method_before
@Override
public void tearDown(ITestDevice device, IBuildInfo buildInfo, Throwable e) throws DeviceNotAvailableException {
    // Clean up existing host and device files unconditionally
    if (mHostFilePushed != null) {
        FileUtil.deleteFile(new File(mHostFilePushed));
    }
    if (mDeviceFilePushed != null && !(e instanceof DeviceNotAvailableException)) {
        removeDeviceFile(device);
    }
    if (mGCSFile != null) {
        FileUtil.deleteFile(mGCSFile);
    }
}
#method_after
@Override
public void tearDown(ITestDevice device, IBuildInfo buildInfo, Throwable e) throws DeviceNotAvailableException {
    // Clean up existing host and device files unconditionally
    if (mHostFilePushed != null) {
        FileUtil.deleteFile(new File(mHostFilePushed));
    }
    if (mDeviceFilePushed != null && !(e instanceof DeviceNotAvailableException)) {
        removeDeviceFile(device);
    }
}
#end_block

#method_before
private String getToken() {
    String keyFilePath = getKeyFile();
    if (Strings.isNullOrEmpty(keyFilePath)) {
        CLog.d("Can not get the service key file successfully.");
        return null;
    }
    if (Strings.isNullOrEmpty(mApiScope)) {
        CLog.d("API scope not set, use flag --business-logic-api-scope.");
        return null;
    }
    try {
        Credential credential = GoogleCredential.fromStream(new FileInputStream(keyFilePath)).createScoped(Collections.singleton(mApiScope));
        credential.refreshToken();
        return credential.getAccessToken();
    } catch (FileNotFoundException e) {
        CLog.e(String.format("Service key file %s doesn't exist.", keyFilePath));
    } catch (IOException e) {
        CLog.e(String.format("Can't read the service key file, %s", keyFilePath));
    }
    return null;
}
#method_after
private String getToken() {
    String keyFilePath = System.getenv("APE_API_KEY");
    if (Strings.isNullOrEmpty(keyFilePath)) {
        File globalKeyFile = GlobalConfiguration.getInstance().getHostOptions().getServiceAccountJsonKeyFiles().get(GLOBAL_APE_API_KEY);
        if (globalKeyFile == null || !globalKeyFile.exists()) {
            CLog.d("Unable to fetch the service key because neither environment variable " + "APE_API_KEY is set nor the key file is dynamically downloaded.");
            return null;
        }
        keyFilePath = globalKeyFile.getAbsolutePath();
    }
    if (Strings.isNullOrEmpty(mApiScope)) {
        CLog.d("API scope not set, use flag --business-logic-api-scope.");
        return null;
    }
    try {
        Credential credential = GoogleCredential.fromStream(new FileInputStream(keyFilePath)).createScoped(Collections.singleton(mApiScope));
        credential.refreshToken();
        return credential.getAccessToken();
    } catch (FileNotFoundException e) {
        CLog.e(String.format("Service key file %s doesn't exist.", keyFilePath));
    } catch (IOException e) {
        CLog.e(String.format("Can't read the service key file, %s", keyFilePath));
    }
    return null;
}
#end_block

#method_before
@Override
public void onCreate(Bundle savedInstanceState) {
    if (mOriginalWindowCallback instanceof Activity) {
        String parentActivityName = null;
        try {
            parentActivityName = NavUtils.getParentActivityName((Activity) mOriginalWindowCallback);
        } catch (IllegalArgumentException iae) {
        // Ignore in this case
        }
        if (parentActivityName != null) {
            // Peek at the Action Bar and update it if it already exists
            ActionBar ab = peekSupportActionBar();
            if (ab == null) {
                mEnableDefaultActionBarUp = true;
            } else {
                ab.setDefaultDisplayHomeAsUpEnabled(true);
            }
        }
    }
    boolean systemDefaultUiModeSet = false;
    if (savedInstanceState != null) {
        if (mLocalNightMode == MODE_NIGHT_UNSPECIFIED) {
            // If we have a icicle and we haven't had a local night mode set yet, try and read
            // it from the icicle
            mLocalNightMode = savedInstanceState.getInt(KEY_LOCAL_NIGHT_MODE, MODE_NIGHT_UNSPECIFIED);
        }
        if (savedInstanceState.containsKey(KEY_DEFAULT_SYSTEM_UI_MODE)) {
            mSystemDefaultUiMode = savedInstanceState.getInt(KEY_DEFAULT_SYSTEM_UI_MODE);
            systemDefaultUiModeSet = true;
        }
    }
    if (!systemDefaultUiModeSet) {
        // This looks really weird but we need a way to keep a record of the system's
        // default uiMode. Since configuration's persist over recreate()ions, we need a
        // reliable way to know which value is from the system. If we haven't loaded the
        // value from an icicle above, we're a new activity and should store the current
        // config value
        mSystemDefaultUiMode = mContext.getResources().getConfiguration().uiMode;
    }
    applyDayNight();
    mCreated = true;
}
#method_after
@Override
public void onCreate(Bundle savedInstanceState) {
    if (mOriginalWindowCallback instanceof Activity) {
        String parentActivityName = null;
        try {
            parentActivityName = NavUtils.getParentActivityName((Activity) mOriginalWindowCallback);
        } catch (IllegalArgumentException iae) {
        // Ignore in this case
        }
        if (parentActivityName != null) {
            // Peek at the Action Bar and update it if it already exists
            ActionBar ab = peekSupportActionBar();
            if (ab == null) {
                mEnableDefaultActionBarUp = true;
            } else {
                ab.setDefaultDisplayHomeAsUpEnabled(true);
            }
        }
    }
    if (savedInstanceState != null && mLocalNightMode == MODE_NIGHT_UNSPECIFIED) {
        // If we have a icicle and we haven't had a local night mode set yet, try and read
        // it from the icicle
        mLocalNightMode = savedInstanceState.getInt(KEY_LOCAL_NIGHT_MODE, MODE_NIGHT_UNSPECIFIED);
    }
    applyDayNight();
    mCreated = true;
}
#end_block

#method_before
@Override
public void onConfigurationChanged(Configuration newConfig) {
    // be properly initialized.
    if (mHasActionBar && mSubDecorInstalled) {
        // Note: The action bar will need to access
        // view changes from superclass.
        ActionBar ab = getSupportActionBar();
        if (ab != null) {
            ab.onConfigurationChanged(newConfig);
        }
    }
    // Make sure that the DrawableManager knows about the new config
    AppCompatDrawableManager.get().onConfigurationChanged(mContext);
    // Re-apply Day/Night with the new configuration
    applyDayNight();
}
#method_after
@Override
public void onConfigurationChanged(Configuration newConfig) {
    // be properly initialized.
    if (mHasActionBar && mSubDecorInstalled) {
        // Note: The action bar will need to access
        // view changes from superclass.
        ActionBar ab = getSupportActionBar();
        if (ab != null) {
            ab.onConfigurationChanged(newConfig);
        }
    }
    // Make sure that the DrawableManager knows about the new config
    AppCompatDrawableManager.get().onConfigurationChanged(mContext);
    // Re-apply Day/Night with the new configuration but disable recreations. Since this
    // configuration change has only just happened we can safely just update the resources now
    applyDayNight(false);
}
#end_block

#method_before
@Override
public void onStop() {
    ActionBar ab = getSupportActionBar();
    if (ab != null) {
        ab.setShowHideAnimationEnabled(false);
    }
    // Make sure we clean up any receivers setup for AUTO mode
    if (mAutoNightModeManager != null) {
        mAutoNightModeManager.cleanup();
    }
}
#method_after
@Override
public void onStop() {
    ActionBar ab = getSupportActionBar();
    if (ab != null) {
        ab.setShowHideAnimationEnabled(false);
    }
    // Make sure we clean up any receivers setup for AUTO mode
    if (mAutoTimeNightModeManager != null) {
        mAutoTimeNightModeManager.cleanup();
    }
    if (mAutoBatteryNightModeManager != null) {
        mAutoBatteryNightModeManager.cleanup();
    }
}
#end_block

#method_before
@Override
public void onSaveInstanceState(Bundle outState) {
    if (mLocalNightMode != MODE_NIGHT_UNSPECIFIED) {
        // If we have a local night mode set, save it
        outState.putInt(KEY_LOCAL_NIGHT_MODE, mLocalNightMode);
    }
    outState.putInt(KEY_DEFAULT_SYSTEM_UI_MODE, mSystemDefaultUiMode);
}
#method_after
@Override
public void onSaveInstanceState(Bundle outState) {
    if (mLocalNightMode != MODE_NIGHT_UNSPECIFIED) {
        // If we have a local night mode set, save it
        outState.putInt(KEY_LOCAL_NIGHT_MODE, mLocalNightMode);
    }
}
#end_block

#method_before
@Override
public void onDestroy() {
    if (mInvalidatePanelMenuPosted) {
        mWindow.getDecorView().removeCallbacks(mInvalidatePanelMenuRunnable);
    }
    mIsDestroyed = true;
    if (mActionBar != null) {
        mActionBar.onDestroy();
    }
    // Make sure we clean up any receivers setup for AUTO mode
    if (mAutoNightModeManager != null) {
        mAutoNightModeManager.cleanup();
    }
}
#method_after
@Override
public void onDestroy() {
    if (mInvalidatePanelMenuPosted) {
        mWindow.getDecorView().removeCallbacks(mInvalidatePanelMenuRunnable);
    }
    mIsDestroyed = true;
    if (mActionBar != null) {
        mActionBar.onDestroy();
    }
    // Make sure we clean up any receivers setup for AUTO mode
    if (mAutoTimeNightModeManager != null) {
        mAutoTimeNightModeManager.cleanup();
    }
    if (mAutoBatteryNightModeManager != null) {
        mAutoBatteryNightModeManager.cleanup();
    }
}
#end_block

#method_before
@Override
public boolean applyDayNight() {
    @NightMode
    final int nightMode = getNightMode();
    @ApplyableNightMode
    final int modeToApply = mapNightMode(nightMode);
    final boolean applied = updateForNightMode(modeToApply);
    if (nightMode == MODE_NIGHT_AUTO) {
        // If we're already been started, we may need to setup auto mode again
        ensureAutoNightModeManager();
        mAutoNightModeManager.setup();
    }
    return applied;
}
#method_after
@Override
public boolean applyDayNight() {
    return applyDayNight(true);
}
#end_block

#method_before
@Override
public boolean applyDayNight() {
    @NightMode
    final int nightMode = getNightMode();
    @ApplyableNightMode
    final int modeToApply = mapNightMode(nightMode);
    final boolean applied = updateForNightMode(modeToApply);
    if (nightMode == MODE_NIGHT_AUTO) {
        // If we're already been started, we may need to setup auto mode again
        ensureAutoNightModeManager();
        mAutoNightModeManager.setup();
    }
    return applied;
}
#method_after
private boolean applyDayNight(final boolean recreateIfNeeded) {
    @NightMode
    final int nightMode = getNightMode();
    @ApplyableNightMode
    final int modeToApply = mapNightMode(nightMode);
    final boolean applied = updateForNightMode(modeToApply, recreateIfNeeded);
    if (nightMode == MODE_NIGHT_AUTO_TIME) {
        // If we're already been started, we may need to setup auto mode again
        getAutoTimeNightModeManager().setup();
    } else if (nightMode == MODE_NIGHT_AUTO_BATTERY) {
        getAutoBatteryNightModeManager().setup();
    }
    return applied;
}
#end_block

#method_before
@Override
public void setLocalNightMode(@NightMode final int mode) {
    switch(mode) {
        case MODE_NIGHT_AUTO:
        case MODE_NIGHT_NO:
        case MODE_NIGHT_YES:
        case MODE_NIGHT_FOLLOW_SYSTEM:
            if (mLocalNightMode != mode) {
                mLocalNightMode = mode;
                applyDayNight();
            }
            break;
        default:
            Log.i(TAG, "setLocalNightMode() called with an unknown mode");
            break;
    }
}
#method_after
@Override
public void setLocalNightMode(@NightMode final int mode) {
    switch(mode) {
        case MODE_NIGHT_NO:
        case MODE_NIGHT_YES:
        case MODE_NIGHT_FOLLOW_SYSTEM:
        case MODE_NIGHT_AUTO_TIME:
        case MODE_NIGHT_AUTO_BATTERY:
            if (mLocalNightMode != mode) {
                mLocalNightMode = mode;
                applyDayNight();
            }
            break;
    }
}
#end_block

#method_before
@ApplyableNightMode
int mapNightMode(@NightMode final int mode) {
    switch(mode) {
        case MODE_NIGHT_AUTO:
            if (Build.VERSION.SDK_INT >= 23) {
                UiModeManager uiModeManager = mContext.getSystemService(UiModeManager.class);
                if (uiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO) {
                    // we'll just let the system handle it by returning FOLLOW_SYSTEM
                    return MODE_NIGHT_FOLLOW_SYSTEM;
                }
            }
            ensureAutoNightModeManager();
            return mAutoNightModeManager.getApplyableNightMode();
        case MODE_NIGHT_UNSPECIFIED:
            // If we don't have a mode specified, just let the system handle it
            return MODE_NIGHT_FOLLOW_SYSTEM;
        default:
            return mode;
    }
}
#method_after
@ApplyableNightMode
int mapNightMode(@NightMode final int mode) {
    switch(mode) {
        case MODE_NIGHT_AUTO_TIME:
            if (Build.VERSION.SDK_INT >= 23) {
                UiModeManager uiModeManager = mContext.getSystemService(UiModeManager.class);
                if (uiModeManager.getNightMode() == UiModeManager.MODE_NIGHT_AUTO) {
                    // we'll just let the system handle it by returning FOLLOW_SYSTEM
                    return MODE_NIGHT_FOLLOW_SYSTEM;
                }
            }
            return getAutoTimeNightModeManager().getApplyableNightMode();
        case MODE_NIGHT_AUTO_BATTERY:
            return getAutoBatteryNightModeManager().getApplyableNightMode();
        case MODE_NIGHT_UNSPECIFIED:
            // If we don't have a mode specified, just let the system handle it
            return MODE_NIGHT_FOLLOW_SYSTEM;
    }
    return mode;
}
#end_block

#method_before
private boolean updateForNightMode(@ApplyableNightMode final int mode) {
    final Resources res = mContext.getResources();
    final Configuration config = res.getConfiguration();
    final int currentNightMode = config.uiMode & Configuration.UI_MODE_NIGHT_MASK;
    int newNightMode = currentNightMode;
    switch(mode) {
        case MODE_NIGHT_YES:
            newNightMode = Configuration.UI_MODE_NIGHT_YES;
            break;
        case MODE_NIGHT_NO:
            newNightMode = Configuration.UI_MODE_NIGHT_NO;
            break;
        case MODE_NIGHT_FOLLOW_SYSTEM:
            // If we're following the system, we just use the system default
            newNightMode = mSystemDefaultUiMode & Configuration.UI_MODE_NIGHT_MASK;
            break;
    }
    boolean handled = false;
    if (currentNightMode != newNightMode) {
        final boolean manifestHandlingUiMode = isActivityManifestHandlingUiMode();
        final boolean shouldRecreateOnNightModeChange = !manifestHandlingUiMode && mCreated && mContext instanceof Activity;
        if (shouldRecreateOnNightModeChange) {
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, recreating Activity." + " Mode: " + mode);
            }
            // If we've already been created, we need to recreate the Activity for the
            // mode to be applied
            ((Activity) mContext).recreate();
        } else if (!manifestHandlingUiMode) {
            // If the Activity is not set to handle uiMode config changes we will
            // update the Resources with a new Configuration with an updated UI Mode
            final Configuration newConf = new Configuration(config);
            newConf.uiMode = newNightMode | (config.uiMode & ~Configuration.UI_MODE_NIGHT_MASK);
            res.updateConfiguration(newConf, res.getDisplayMetrics());
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, updated res config." + " Mode: " + mode);
            }
            // We may need to flush the Resources' drawable cache due to framework bugs.
            if (Build.VERSION.SDK_INT < 26) {
                ResourcesFlusher.flush(res);
            }
            if (mThemeResId != 0) {
                // We need to re-apply the theme so that it reflected the new
                // configuration
                mContext.setTheme(mThemeResId);
                if (Build.VERSION.SDK_INT >= 23) {
                    // On M+ setTheme only applies if the themeResId actually changes,
                    // since we have no way to publicly check what the Theme's current
                    // themeResId is, we just manually apply it anyway. Most of the time
                    // this is what we need anyway (since the themeResId does not
                    // often change)
                    mContext.getTheme().applyStyle(mThemeResId, true);
                }
            }
        }
        handled = true;
    } else {
        if (DEBUG) {
            Log.d(TAG, "applyNightMode() | Skipping. Night mode has not changed: " + mode);
        }
    }
    // Notify the activity of the night mode
    if (mContext instanceof AppCompatActivity) {
        ((AppCompatActivity) mContext).onNightModeChanged(mode);
    }
    return handled;
}
#method_after
private boolean updateForNightMode(@ApplyableNightMode final int mode, final boolean allowRecreation) {
    final Resources res = mContext.getResources();
    final Configuration config = res.getConfiguration();
    final int currentNightMode = config.uiMode & Configuration.UI_MODE_NIGHT_MASK;
    int newNightMode = currentNightMode;
    switch(mode) {
        case MODE_NIGHT_YES:
            newNightMode = Configuration.UI_MODE_NIGHT_YES;
            break;
        case MODE_NIGHT_NO:
            newNightMode = Configuration.UI_MODE_NIGHT_NO;
            break;
        case MODE_NIGHT_FOLLOW_SYSTEM:
            // If we're following the system, we just use the system default from the
            // application context
            newNightMode = mContext.getApplicationContext().getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
            break;
    }
    boolean handled = false;
    if (currentNightMode != newNightMode) {
        final boolean manifestHandlingUiMode = isActivityManifestHandlingUiMode();
        final boolean shouldRecreateOnNightModeChange = allowRecreation && !manifestHandlingUiMode && mCreated && mContext instanceof Activity;
        if (shouldRecreateOnNightModeChange) {
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, recreating Activity." + " Mode: " + mode);
            }
            // If we've already been created, we need to recreate the Activity for the
            // mode to be applied
            ((Activity) mContext).recreate();
        } else if (!manifestHandlingUiMode) {
            // If the Activity is not set to handle uiMode config changes we will
            // update the Resources with a new Configuration with an updated UI Mode
            final Configuration newConf = new Configuration(config);
            newConf.uiMode = newNightMode | (config.uiMode & ~Configuration.UI_MODE_NIGHT_MASK);
            res.updateConfiguration(newConf, res.getDisplayMetrics());
            if (DEBUG) {
                Log.d(TAG, "updateForNightMode. Night mode changed, updated res config." + " Mode: " + mode);
            }
            // We may need to flush the Resources' drawable cache due to framework bugs.
            if (Build.VERSION.SDK_INT < 26) {
                ResourcesFlusher.flush(res);
            }
            if (mThemeResId != 0) {
                // We need to re-apply the theme so that it reflected the new
                // configuration
                mContext.setTheme(mThemeResId);
                if (Build.VERSION.SDK_INT >= 23) {
                    // On M+ setTheme only applies if the themeResId actually changes,
                    // since we have no way to publicly check what the Theme's current
                    // themeResId is, we just manually apply it anyway. Most of the time
                    // this is what we need anyway (since the themeResId does not
                    // often change)
                    mContext.getTheme().applyStyle(mThemeResId, true);
                }
            }
        }
        handled = true;
    } else {
        if (DEBUG) {
            Log.d(TAG, "applyNightMode() | Skipping. Night mode has not changed: " + mode);
        }
    }
    // Notify the activity of the night mode
    if (mContext instanceof AppCompatActivity) {
        ((AppCompatActivity) mContext).onNightModeChanged(mode);
    }
    return handled;
}
#end_block

#method_before
void setup() {
    cleanup();
    // case
    if (mAutoTimeChangeReceiver == null) {
        mAutoTimeChangeReceiver = new BroadcastReceiver() {

            @Override
            public void onReceive(Context context, Intent intent) {
                if (DEBUG) {
                    Log.d("AutoTimeChangeReceiver", "onReceive | Intent: " + intent);
                }
                dispatchTimeChanged();
            }
        };
    }
    if (mAutoTimeChangeReceiverFilter == null) {
        mAutoTimeChangeReceiverFilter = new IntentFilter();
        mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_CHANGED);
        mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
        mAutoTimeChangeReceiverFilter.addAction(Intent.ACTION_TIME_TICK);
    }
    mContext.registerReceiver(mAutoTimeChangeReceiver, mAutoTimeChangeReceiverFilter);
}
#method_after
void setup() {
    cleanup();
    final IntentFilter filter = createIntentFilterForBroadcastReceiver();
    if (filter == null || filter.countActions() == 0) {
        // Null or empty IntentFilter, skip
        return;
    }
    if (mReceiver == null) {
        mReceiver = new BroadcastReceiver() {

            @Override
            public void onReceive(Context context, Intent intent) {
                onChange();
            }
        };
    }
    mContext.registerReceiver(mReceiver, filter);
}
#end_block

#method_before
void cleanup() {
    if (mAutoTimeChangeReceiver != null) {
        mContext.unregisterReceiver(mAutoTimeChangeReceiver);
        mAutoTimeChangeReceiver = null;
    }
}
#method_after
void cleanup() {
    if (mReceiver != null) {
        mContext.unregisterReceiver(mReceiver);
        mReceiver = null;
    }
}
#end_block

#method_before
static AnimatorSet ofTranslationYTogether(float startValue, float endValue, View... targets) {
    AnimatorSet set = new AnimatorSet();
    if (targets.length == 0)
        return set;
    AnimatorSet.Builder builder = set.play(ofTranslationY(startValue, endValue, targets[0]));
    for (int i = 1; i < targets.length; i++) {
        builder.with(ofTranslationY(startValue, endValue, targets[i]));
    }
    return set;
}
#method_after
static AnimatorSet ofTranslationYTogether(float startValue, float endValue, View[] targets) {
    AnimatorSet set = new AnimatorSet();
    if (targets.length == 0)
        return set;
    AnimatorSet.Builder builder = set.play(ofTranslationY(startValue, endValue, targets[0]));
    for (int i = 1; i < targets.length; i++) {
        builder.with(ofTranslationY(startValue, endValue, targets[i]));
    }
    return set;
}
#end_block

#method_before
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    final int width = resolveSize(getSuggestedMinimumWidth(), widthMeasureSpec);
    final int height = resolveSize(getSuggestedMinimumHeight(), heightMeasureSpec);
    int childState = 0;
    final int count = getChildCount();
    for (int i = 0; i < count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() == View.GONE) {
            continue;
        }
        LayoutParams lp = child.getLayoutParams();
        int childWidthSpec;
        if (lp.width == LayoutParams.MATCH_PARENT) {
            childWidthSpec = MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY);
        } else if (lp.width == LayoutParams.WRAP_CONTENT) {
            childWidthSpec = MeasureSpec.makeMeasureSpec(width, MeasureSpec.UNSPECIFIED);
        } else {
            childWidthSpec = MeasureSpec.makeMeasureSpec(lp.width, MeasureSpec.EXACTLY);
        }
        int childHeightSpec;
        if (lp.height == LayoutParams.MATCH_PARENT) {
            childHeightSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY);
        } else if (lp.height == LayoutParams.WRAP_CONTENT) {
            childHeightSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.UNSPECIFIED);
        } else {
            childHeightSpec = MeasureSpec.makeMeasureSpec(lp.height, MeasureSpec.EXACTLY);
        }
        child.measure(childWidthSpec, childHeightSpec);
        childState |= child.getMeasuredState();
    }
    setMeasuredDimension(resolveSizeAndState(width, widthMeasureSpec, childState), resolveSizeAndState(height, heightMeasureSpec, childState << View.MEASURED_HEIGHT_STATE_SHIFT));
}
#method_after
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    final int width = resolveSize(getSuggestedMinimumWidth(), widthMeasureSpec);
    final int height = resolveSize(getSuggestedMinimumHeight(), heightMeasureSpec);
    int childWidth = width - getPaddingLeft() - getPaddingRight();
    int childHeight = height - getPaddingTop() - getPaddingBottom();
    int childState = 0;
    if (childWidth < 0) {
        childWidth = 0;
        childState |= View.MEASURED_STATE_TOO_SMALL;
    }
    if (childHeight < 0) {
        childHeight = 0;
        childState |= (View.MEASURED_STATE_TOO_SMALL >> View.MEASURED_HEIGHT_STATE_SHIFT);
    }
    final int count = getChildCount();
    for (int i = 0; i < count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() == View.GONE) {
            continue;
        }
        LayoutParams lp = child.getLayoutParams();
        int childWidthSpec;
        if (lp.width == LayoutParams.MATCH_PARENT) {
            childWidthSpec = MeasureSpec.makeMeasureSpec(childWidth, MeasureSpec.EXACTLY);
        } else if (lp.width == LayoutParams.WRAP_CONTENT) {
            childWidthSpec = MeasureSpec.makeMeasureSpec(childWidth, MeasureSpec.UNSPECIFIED);
        } else {
            childWidthSpec = MeasureSpec.makeMeasureSpec(lp.width, MeasureSpec.EXACTLY);
        }
        int childHeightSpec;
        if (lp.height == LayoutParams.MATCH_PARENT) {
            childHeightSpec = MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.EXACTLY);
        } else if (lp.height == LayoutParams.WRAP_CONTENT) {
            childHeightSpec = MeasureSpec.makeMeasureSpec(childHeight, MeasureSpec.UNSPECIFIED);
        } else {
            childHeightSpec = MeasureSpec.makeMeasureSpec(lp.height, MeasureSpec.EXACTLY);
        }
        child.measure(childWidthSpec, childHeightSpec);
        childState |= child.getMeasuredState();
    }
    setMeasuredDimension(resolveSizeAndState(width, widthMeasureSpec, childState), resolveSizeAndState(height, heightMeasureSpec, childState << View.MEASURED_HEIGHT_STATE_SHIFT));
}
#end_block

#method_before
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    final int width = right - left;
    final int height = bottom - top;
    final int fullWidth = mBottomBarLeft.getMeasuredWidth() + mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int fullHeight = mTitleBar.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    final int embeddedWidth = mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int embeddedHeight = mTitleBar.getMeasuredHeight() + mEmbeddedTransportControls.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    int sizeType;
    if (mIsAdvertisement || (fullWidth <= width && fullHeight <= height)) {
        sizeType = SIZE_TYPE_FULL;
    } else if (embeddedWidth <= width && embeddedHeight <= height) {
        sizeType = SIZE_TYPE_EMBEDDED;
    } else {
        sizeType = SIZE_TYPE_MINIMAL;
    }
    if (mSizeType != sizeType) {
        mSizeType = sizeType;
        updateLayoutForSizeChange(sizeType);
    }
    mTitleBar.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mEmbeddedTransportControls.setVisibility(sizeType == SIZE_TYPE_EMBEDDED ? View.VISIBLE : View.INVISIBLE);
    mMinimalTransportControls.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarBackground.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarLeft.setVisibility(sizeType == SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    mTimeView.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBasicControls.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mMinimalFullScreenButton.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    if (sizeType == SIZE_TYPE_FULL) {
        mTitleBar.layout(0, 0, mTitleBar.getMeasuredWidth(), mTitleBar.getMeasuredHeight());
        mBottomBarBackground.layout(0, height - mBottomBarBackground.getMeasuredHeight(), mBottomBarBackground.getMeasuredWidth(), height);
        mBottomBarLeft.layout(0, height - mBottomBarLeft.getMeasuredHeight(), mBottomBarLeft.getMeasuredWidth(), height);
        mTimeView.layout(width - mBasicControls.getMeasuredWidth() - mTimeView.getMeasuredWidth(), height - mTimeView.getMeasuredHeight(), width - mBasicControls.getMeasuredWidth(), height);
        mBasicControls.layout(width - mBasicControls.getMeasuredWidth(), height - mBasicControls.getMeasuredHeight(), width, height);
        mExtraControls.layout(width, height - mExtraControls.getMeasuredHeight(), width + mExtraControls.getMeasuredWidth(), height);
        mProgressBar.layout(0, height - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom), mProgressBar.getMeasuredWidth(), height - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    } else if (sizeType == SIZE_TYPE_EMBEDDED) {
        mTitleBar.layout(0, 0, mTitleBar.getMeasuredWidth(), mTitleBar.getMeasuredHeight());
        mCenterView.layout((width - mCenterView.getMeasuredWidth()) / 2, (height - mCenterView.getMeasuredHeight()) / 2, (width + mCenterView.getMeasuredWidth()) / 2, (height + mCenterView.getMeasuredHeight()) / 2);
        mBottomBarBackground.layout(0, height - mBottomBarBackground.getMeasuredHeight(), mBottomBarBackground.getMeasuredWidth(), height);
        mTimeView.layout(0, height - mTimeView.getMeasuredHeight(), mTimeView.getMeasuredWidth(), height);
        mBasicControls.layout(width - mBasicControls.getMeasuredWidth(), height - mBasicControls.getMeasuredHeight(), width, height);
        mExtraControls.layout(width, height - mExtraControls.getMeasuredHeight(), width + mExtraControls.getMeasuredWidth(), height);
        mProgressBar.layout(0, height - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom), mProgressBar.getMeasuredWidth(), height - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    } else {
        // SIZE_TYPE_MINIMAL
        mCenterView.layout((width - mCenterView.getMeasuredWidth()) / 2, (height - mCenterView.getMeasuredHeight()) / 2, (width + mCenterView.getMeasuredWidth()) / 2, (height + mCenterView.getMeasuredHeight()) / 2);
        mMinimalFullScreenView.layout(0, height - mMinimalFullScreenView.getMeasuredHeight(), mMinimalFullScreenView.getMeasuredWidth(), height);
        mProgressBar.layout(0, height - mProgressBar.getMeasuredHeight(), mProgressBar.getMeasuredWidth(), height);
    }
}
#method_after
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    final int width = right - left - getPaddingLeft() - getPaddingRight();
    final int height = bottom - top - getPaddingTop() - getPaddingBottom();
    final int fullWidth = mBottomBarLeft.getMeasuredWidth() + mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int fullHeight = mTitleBar.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    final int embeddedWidth = mTimeView.getMeasuredWidth() + mBasicControls.getMeasuredWidth();
    final int embeddedHeight = mTitleBar.getMeasuredHeight() + mEmbeddedTransportControls.getMeasuredHeight() + mProgressBar.getMeasuredHeight() + mBottomBarBackground.getMeasuredHeight();
    int sizeType;
    if (mIsAdvertisement || (fullWidth <= width && fullHeight <= height)) {
        sizeType = SIZE_TYPE_FULL;
    } else if (embeddedWidth <= width && embeddedHeight <= height) {
        sizeType = SIZE_TYPE_EMBEDDED;
    } else {
        sizeType = SIZE_TYPE_MINIMAL;
    }
    if (mSizeType != sizeType) {
        mSizeType = sizeType;
        updateLayoutForSizeChange(sizeType);
    }
    mTitleBar.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mEmbeddedTransportControls.setVisibility(sizeType == SIZE_TYPE_EMBEDDED ? View.VISIBLE : View.INVISIBLE);
    mMinimalTransportControls.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarBackground.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBottomBarLeft.setVisibility(sizeType == SIZE_TYPE_FULL ? View.VISIBLE : View.INVISIBLE);
    mTimeView.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mBasicControls.setVisibility(sizeType != SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    mMinimalFullScreenButton.setVisibility(sizeType == SIZE_TYPE_MINIMAL ? View.VISIBLE : View.INVISIBLE);
    final int childLeft = getPaddingLeft();
    final int childRight = childLeft + width;
    final int childTop = getPaddingTop();
    final int childBottom = childTop + height;
    layoutChild(mTitleBar, childLeft, childTop);
    layoutChild(mCenterView, childLeft, childTop);
    layoutChild(mBottomBarBackground, childLeft, childBottom - mBottomBarBackground.getMeasuredHeight());
    layoutChild(mBottomBarLeft, childLeft, childBottom - mBottomBarLeft.getMeasuredHeight());
    layoutChild(mTimeView, sizeType == SIZE_TYPE_FULL ? childRight - mBasicControls.getMeasuredWidth() - mTimeView.getMeasuredWidth() : childLeft, childBottom - mTimeView.getMeasuredHeight());
    layoutChild(mBasicControls, childRight - mBasicControls.getMeasuredWidth(), childBottom - mBasicControls.getMeasuredHeight());
    layoutChild(mExtraControls, childRight, childBottom - mExtraControls.getMeasuredHeight());
    layoutChild(mProgressBar, childLeft, sizeType == SIZE_TYPE_MINIMAL ? childBottom - mProgressBar.getMeasuredHeight() : childBottom - mProgressBar.getMeasuredHeight() - mResources.getDimensionPixelSize(R.dimen.mcv2_custom_progress_margin_bottom));
    layoutChild(mMinimalFullScreenView, childLeft, childBottom - mMinimalFullScreenView.getMeasuredHeight());
}
#end_block

#method_before
private void initControllerView() {
    // Relating to Title Bar View
    mTitleBar = findViewById(R.id.title_bar);
    mTitleView = findViewById(R.id.title_text);
    mAdExternalLink = findViewById(R.id.ad_external_link);
    mRouteButton = findViewById(R.id.cast);
    // Relating to Center View
    mCenterView = findViewById(R.id.center_view);
    mEmbeddedTransportControls = initTransportControls(R.id.embedded_transport_controls);
    mMinimalTransportControls = initTransportControls(R.id.minimal_transport_controls);
    // Relating to Minimal Size FullScreen View
    mMinimalFullScreenView = findViewById(R.id.minimal_fullscreen_view);
    mMinimalFullScreenButton = findViewById(R.id.minimal_fullscreen);
    mMinimalFullScreenButton.setOnClickListener(mFullScreenListener);
    // Relating to Progress Bar View
    mProgressBar = findViewById(R.id.progress_bar);
    mProgress = findViewById(R.id.progress);
    mProgress.setOnSeekBarChangeListener(mSeekListener);
    mProgress.setMax(MAX_PROGRESS);
    mCurrentSeekPosition = SEEK_POSITION_NOT_SET;
    mNextSeekPosition = SEEK_POSITION_NOT_SET;
    // Relating to Bottom Bar View
    mBottomBarBackground = findViewById(R.id.bottom_bar_background);
    // Relating to Bottom Bar Left View
    mBottomBarLeft = findViewById(R.id.bottom_bar_left);
    mFullTransportControls = initTransportControls(R.id.full_transport_controls);
    mTimeView = findViewById(R.id.time);
    mEndTime = findViewById(R.id.time_end);
    mCurrentTime = findViewById(R.id.time_current);
    mAdSkipView = findViewById(R.id.ad_skip_time);
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    // Relating to Bottom Bar Right View
    mBasicControls = findViewById(R.id.basic_controls);
    mExtraControls = findViewById(R.id.extra_controls);
    mCustomButtons = findViewById(R.id.custom_buttons);
    mSubtitleButton = findViewById(R.id.subtitle);
    mSubtitleButton.setOnClickListener(mSubtitleListener);
    mFullScreenButton = findViewById(R.id.fullscreen);
    mFullScreenButton.setOnClickListener(mFullScreenListener);
    ImageButton overflowShowButton = findViewById(R.id.overflow_show);
    overflowShowButton.setOnClickListener(mOverflowShowListener);
    ImageButton overflowHideButton = findViewById(R.id.overflow_hide);
    overflowHideButton.setOnClickListener(mOverflowHideListener);
    ImageButton settingsButton = findViewById(R.id.settings);
    settingsButton.setOnClickListener(mSettingsButtonListener);
    mVideoQualityButton = findViewById(R.id.video_quality);
    mVideoQualityButton.setOnClickListener(mVideoQualityListener);
    mAdRemainingView = findViewById(R.id.ad_remaining);
    // Relating to Settings List View
    initializeSettingsLists();
    mSettingsListView = (ListView) inflateLayout(getContext(), R.layout.settings_list);
    mSettingsAdapter = new SettingsAdapter(mSettingsMainTextsList, mSettingsSubTextsList, mSettingsIconIdsList);
    mSubSettingsAdapter = new SubSettingsAdapter(null, 0);
    mSettingsListView.setAdapter(mSettingsAdapter);
    mSettingsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    mSettingsListView.setOnItemClickListener(mSettingsItemClickListener);
    // TransportControlsMap
    mTransportControlsMap.append(SIZE_TYPE_EMBEDDED, mEmbeddedTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_FULL, mFullTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_MINIMAL, mMinimalTransportControls);
    mEmbeddedSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_embedded_settings_width);
    mFullSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_full_settings_width);
    mSettingsItemHeight = mResources.getDimensionPixelSize(R.dimen.mcv2_settings_height);
    mSettingsWindowMargin = (-1) * mResources.getDimensionPixelSize(R.dimen.mcv2_settings_offset);
    mSettingsWindow = new PopupWindow(mSettingsListView, mEmbeddedSettingsItemWidth, LayoutParams.WRAP_CONTENT, true);
    mSettingsWindow.setOnDismissListener(mSettingsDismissListener);
    float titleBarHeight = mResources.getDimension(R.dimen.mcv2_title_bar_height);
    float progressBarHeight = mResources.getDimension(R.dimen.mcv2_custom_progress_thumb_size);
    float bottomBarHeight = mResources.getDimension(R.dimen.mcv2_bottom_bar_height);
    ValueAnimator fadeOutAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.INVISIBLE);
                mMinimalFullScreenView.setVisibility(View.INVISIBLE);
            }
        }
    });
    ValueAnimator fadeInAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    fadeInAnimator.setInterpolator(new LinearInterpolator());
    fadeInAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.VISIBLE);
                mMinimalFullScreenView.setVisibility(View.VISIBLE);
            }
        }
    });
    mHideMainBarsAnimator = new AnimatorSet();
    mHideMainBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight, mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar));
    mHideMainBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ONLY_PROGRESS_VISIBLE;
        }
    });
    mHideProgressBarAnimator = AnimatorUtil.ofTranslationYTogether(bottomBarHeight, bottomBarHeight + progressBarHeight, mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar);
    mHideProgressBarAnimator.setDuration(HIDE_TIME_MS);
    mHideProgressBarAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mHideAllBarsAnimator = new AnimatorSet();
    mHideAllBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight + progressBarHeight, mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar));
    mHideAllBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mShowMainBarsAnimator = new AnimatorSet();
    mShowMainBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight, 0, mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar));
    mShowMainBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mShowAllBarsAnimator = new AnimatorSet();
    mShowAllBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight + progressBarHeight, 0, mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar));
    mShowAllBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mOverflowShowAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    mOverflowShowAnimator.setDuration(SHOW_TIME_MS);
    mOverflowShowAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowShowAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mExtraControls.setVisibility(View.VISIBLE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mBasicControls.setVisibility(View.INVISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.INVISIBLE : View.GONE);
        }
    });
    mOverflowHideAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    mOverflowHideAnimator.setDuration(SHOW_TIME_MS);
    mOverflowHideAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowHideAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mBasicControls.setVisibility(View.VISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.VISIBLE : View.GONE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mExtraControls.setVisibility(View.GONE);
        }
    });
}
#method_after
private void initControllerView() {
    // Relating to Title Bar View
    mTitleBar = findViewById(R.id.title_bar);
    mTitleView = findViewById(R.id.title_text);
    mAdExternalLink = findViewById(R.id.ad_external_link);
    mRouteButton = findViewById(R.id.cast);
    // Relating to Center View
    mCenterView = findViewById(R.id.center_view);
    mEmbeddedTransportControls = initTransportControls(R.id.embedded_transport_controls);
    mMinimalTransportControls = initTransportControls(R.id.minimal_transport_controls);
    // Relating to Minimal Size FullScreen View
    mMinimalFullScreenView = findViewById(R.id.minimal_fullscreen_view);
    mMinimalFullScreenButton = findViewById(R.id.minimal_fullscreen);
    mMinimalFullScreenButton.setOnClickListener(mFullScreenListener);
    // Relating to Progress Bar View
    mProgressBar = findViewById(R.id.progress_bar);
    mProgress = findViewById(R.id.progress);
    mProgress.setOnSeekBarChangeListener(mSeekListener);
    mProgress.setMax(MAX_PROGRESS);
    mCurrentSeekPosition = SEEK_POSITION_NOT_SET;
    mNextSeekPosition = SEEK_POSITION_NOT_SET;
    // Relating to Bottom Bar View
    mBottomBarBackground = findViewById(R.id.bottom_bar_background);
    // Relating to Bottom Bar Left View
    mBottomBarLeft = findViewById(R.id.bottom_bar_left);
    mFullTransportControls = initTransportControls(R.id.full_transport_controls);
    mTimeView = findViewById(R.id.time);
    mEndTime = findViewById(R.id.time_end);
    mCurrentTime = findViewById(R.id.time_current);
    mAdSkipView = findViewById(R.id.ad_skip_time);
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    // Relating to Bottom Bar Right View
    mBasicControls = findViewById(R.id.basic_controls);
    mExtraControls = findViewById(R.id.extra_controls);
    mCustomButtons = findViewById(R.id.custom_buttons);
    mSubtitleButton = findViewById(R.id.subtitle);
    mSubtitleButton.setOnClickListener(mSubtitleListener);
    mFullScreenButton = findViewById(R.id.fullscreen);
    mFullScreenButton.setOnClickListener(mFullScreenListener);
    ImageButton overflowShowButton = findViewById(R.id.overflow_show);
    overflowShowButton.setOnClickListener(mOverflowShowListener);
    ImageButton overflowHideButton = findViewById(R.id.overflow_hide);
    overflowHideButton.setOnClickListener(mOverflowHideListener);
    ImageButton settingsButton = findViewById(R.id.settings);
    settingsButton.setOnClickListener(mSettingsButtonListener);
    mAdRemainingView = findViewById(R.id.ad_remaining);
    // Relating to Settings List View
    initializeSettingsLists();
    mSettingsListView = (ListView) inflateLayout(getContext(), R.layout.settings_list);
    mSettingsAdapter = new SettingsAdapter(mSettingsMainTextsList, mSettingsSubTextsList, mSettingsIconIdsList);
    mSubSettingsAdapter = new SubSettingsAdapter(null, 0);
    mSettingsListView.setAdapter(mSettingsAdapter);
    mSettingsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    mSettingsListView.setOnItemClickListener(mSettingsItemClickListener);
    // TransportControlsMap
    mTransportControlsMap.append(SIZE_TYPE_EMBEDDED, mEmbeddedTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_FULL, mFullTransportControls);
    mTransportControlsMap.append(SIZE_TYPE_MINIMAL, mMinimalTransportControls);
    mEmbeddedSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_embedded_settings_width);
    mFullSettingsItemWidth = mResources.getDimensionPixelSize(R.dimen.mcv2_full_settings_width);
    mSettingsItemHeight = mResources.getDimensionPixelSize(R.dimen.mcv2_settings_height);
    mSettingsWindowMargin = (-1) * mResources.getDimensionPixelSize(R.dimen.mcv2_settings_offset);
    mSettingsWindow = new PopupWindow(mSettingsListView, mEmbeddedSettingsItemWidth, LayoutParams.WRAP_CONTENT, true);
    mSettingsWindow.setOnDismissListener(mSettingsDismissListener);
    float titleBarHeight = mResources.getDimension(R.dimen.mcv2_title_bar_height);
    float progressBarHeight = mResources.getDimension(R.dimen.mcv2_custom_progress_thumb_size);
    float bottomBarHeight = mResources.getDimension(R.dimen.mcv2_bottom_bar_height);
    View[] bottomBarGroup = { mBottomBarBackground, mBottomBarLeft, mTimeView, mBasicControls, mExtraControls, mProgressBar };
    ValueAnimator fadeOutAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    fadeOutAnimator.setInterpolator(new LinearInterpolator());
    fadeOutAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.INVISIBLE);
                mMinimalFullScreenView.setVisibility(View.INVISIBLE);
            }
        }
    });
    ValueAnimator fadeInAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    fadeInAnimator.setInterpolator(new LinearInterpolator());
    fadeInAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            float alpha = (float) animation.getAnimatedValue();
            Drawable thumb = mProgress.getThumb();
            if (thumb != null) {
                thumb.setLevel((int) (MAX_SCALE_LEVEL * alpha));
            }
            mCenterView.setAlpha(alpha);
            mMinimalFullScreenView.setAlpha(alpha);
            if (alpha == 0.0f) {
                mCenterView.setVisibility(View.VISIBLE);
                mMinimalFullScreenView.setVisibility(View.VISIBLE);
            }
        }
    });
    mHideMainBarsAnimator = new AnimatorSet();
    mHideMainBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight, bottomBarGroup));
    mHideMainBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ONLY_PROGRESS_VISIBLE;
        }
    });
    mHideProgressBarAnimator = AnimatorUtil.ofTranslationYTogether(bottomBarHeight, bottomBarHeight + progressBarHeight, bottomBarGroup);
    mHideProgressBarAnimator.setDuration(HIDE_TIME_MS);
    mHideProgressBarAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mHideAllBarsAnimator = new AnimatorSet();
    mHideAllBarsAnimator.play(fadeOutAnimator).with(AnimatorUtil.ofTranslationY(0, -titleBarHeight, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(0, bottomBarHeight + progressBarHeight, bottomBarGroup));
    mHideAllBarsAnimator.setDuration(HIDE_TIME_MS);
    mHideAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_NONE_VISIBLE;
        }
    });
    mShowMainBarsAnimator = new AnimatorSet();
    mShowMainBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight, 0, bottomBarGroup));
    mShowMainBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowMainBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mShowAllBarsAnimator = new AnimatorSet();
    mShowAllBarsAnimator.play(fadeInAnimator).with(AnimatorUtil.ofTranslationY(-titleBarHeight, 0, mTitleBar)).with(AnimatorUtil.ofTranslationYTogether(bottomBarHeight + progressBarHeight, 0, bottomBarGroup));
    mShowAllBarsAnimator.setDuration(SHOW_TIME_MS);
    mShowAllBarsAnimator.getChildAnimations().get(0).addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mUxState = UX_STATE_ANIMATING;
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mUxState = UX_STATE_ALL_VISIBLE;
        }
    });
    mOverflowShowAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
    mOverflowShowAnimator.setDuration(SHOW_TIME_MS);
    mOverflowShowAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowShowAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mExtraControls.setVisibility(View.VISIBLE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mBasicControls.setVisibility(View.INVISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.INVISIBLE : View.GONE);
        }
    });
    mOverflowHideAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
    mOverflowHideAnimator.setDuration(SHOW_TIME_MS);
    mOverflowHideAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            animateOverflow((float) animation.getAnimatedValue());
        }
    });
    mOverflowHideAnimator.addListener(new AnimatorListenerAdapter() {

        @Override
        public void onAnimationStart(Animator animation) {
            mBasicControls.setVisibility(View.VISIBLE);
            findControlButton(SIZE_TYPE_FULL, R.id.ffwd).setVisibility(mController.canSeekForward() ? View.VISIBLE : View.GONE);
        }

        @Override
        public void onAnimationEnd(Animator animation) {
            mExtraControls.setVisibility(View.GONE);
        }
    });
}
#end_block

#method_before
void updateMetadata() {
    if (!mController.hasMetadata()) {
        return;
    }
    long duration = mController.getDurationMs();
    if (duration != 0) {
        mDuration = duration;
        setProgress();
    }
    if (mMediaType != MEDIA_TYPE_MUSIC) {
        CharSequence title = mController.getTitle();
        if (title != null) {
            mTitleView.setText(title.toString());
        }
    } else {
        CharSequence title = mController.getTitle();
        if (title == null) {
            title = mResources.getString(R.string.mcv2_music_title_unknown_text);
        }
        CharSequence artist = mController.getArtistText();
        if (artist == null) {
            artist = mResources.getString(R.string.mcv2_music_artist_unknown_text);
        }
        // Update title for Embedded size type
        mTitleView.setText(title.toString() + " - " + artist.toString());
        // Remove unnecessary buttons
        mVideoQualityButton.setVisibility(View.GONE);
    }
}
#method_after
void updateMetadata() {
    if (!mController.hasMetadata()) {
        return;
    }
    long duration = mController.getDurationMs();
    if (duration != 0) {
        mDuration = duration;
        setProgress();
    }
    if (mMediaType != MEDIA_TYPE_MUSIC) {
        CharSequence title = mController.getTitle();
        if (title != null) {
            mTitleView.setText(title.toString());
        }
    } else {
        CharSequence title = mController.getTitle();
        if (title == null) {
            title = mResources.getString(R.string.mcv2_music_title_unknown_text);
        }
        CharSequence artist = mController.getArtistText();
        if (artist == null) {
            artist = mResources.getString(R.string.mcv2_music_artist_unknown_text);
        }
        // Update title for Embedded size type
        mTitleView.setText(title.toString() + " - " + artist.toString());
    }
}
#end_block

#method_before
private void updateLayoutForSizeChange(int sizeType) {
    switch(sizeType) {
        case SIZE_TYPE_FULL:
            // Relating to Progress Bar
            mProgress.setThumb(mResources.getDrawable(R.drawable.custom_progress_thumb));
            mProgress.setThumbOffset(0);
            break;
        case SIZE_TYPE_EMBEDDED:
            // Relating to Progress Bar
            mProgress.setThumb(mResources.getDrawable(R.drawable.custom_progress_thumb));
            mProgress.setThumbOffset(0);
            break;
        case SIZE_TYPE_MINIMAL:
            // Relating to Progress Bar
            mProgress.setThumb(null);
            break;
    }
    // Update play/pause and ffwd buttons based on whether the media is currently stopped or
    // not.
    updateForStoppedState(mIsStopped);
}
#method_after
private void updateLayoutForSizeChange(int sizeType) {
    switch(sizeType) {
        case SIZE_TYPE_FULL:
        case SIZE_TYPE_EMBEDDED:
            // Relating to Progress Bar
            mProgress.setThumb(mResources.getDrawable(R.drawable.custom_progress_thumb));
            mProgress.setThumbOffset(0);
            break;
        case SIZE_TYPE_MINIMAL:
            // Relating to Progress Bar
            mProgress.setThumb(null);
            break;
    }
    // Update play/pause and ffwd buttons based on whether the media is currently stopped or
    // not.
    updateForStoppedState(mIsStopped);
}
#end_block

#method_before
private void initializeSettingsLists() {
    mSettingsMainTextsList = new ArrayList<String>();
    mSettingsMainTextsList.add(mResources.getString(R.string.MediaControlView_audio_track_text));
    mSettingsMainTextsList.add(mResources.getString(R.string.MediaControlView_playback_speed_text));
    mSettingsSubTextsList = new ArrayList<String>();
    mSettingsSubTextsList.add(mResources.getString(R.string.MediaControlView_audio_track_none_text));
    String normalSpeed = mResources.getString(R.string.MediaControlView_playback_speed_normal);
    mSettingsSubTextsList.add(normalSpeed);
    mSettingsSubTextsList.add(RESOURCE_EMPTY);
    mSettingsIconIdsList = new ArrayList<Integer>();
    mSettingsIconIdsList.add(R.drawable.ic_audiotrack);
    mSettingsIconIdsList.add(R.drawable.ic_play_circle_filled);
    mAudioTrackList = new ArrayList<String>();
    mAudioTrackList.add(mResources.getString(R.string.MediaControlView_audio_track_none_text));
    mVideoQualityList = new ArrayList<String>();
    mVideoQualityList.add(mResources.getString(R.string.MediaControlView_video_quality_auto_text));
    mPlaybackSpeedTextList = new ArrayList<String>(Arrays.asList(mResources.getStringArray(R.array.MediaControlView_playback_speeds)));
    // Select the normal speed (1x) as the default value.
    mPlaybackSpeedTextList.add(PLAYBACK_SPEED_1x_INDEX, normalSpeed);
    mSelectedSpeedIndex = PLAYBACK_SPEED_1x_INDEX;
    mPlaybackSpeedMultBy100List = new ArrayList<Integer>();
    int[] speeds = mResources.getIntArray(R.array.speed_multiplied_by_100);
    for (int i = 0; i < speeds.length; i++) {
        mPlaybackSpeedMultBy100List.add(speeds[i]);
    }
    mCustomPlaybackSpeedIndex = -1;
}
#method_after
private void initializeSettingsLists() {
    mSettingsMainTextsList = new ArrayList<String>();
    mSettingsMainTextsList.add(mResources.getString(R.string.MediaControlView_audio_track_text));
    mSettingsMainTextsList.add(mResources.getString(R.string.MediaControlView_playback_speed_text));
    mSettingsSubTextsList = new ArrayList<String>();
    mSettingsSubTextsList.add(mResources.getString(R.string.MediaControlView_audio_track_none_text));
    String normalSpeed = mResources.getString(R.string.MediaControlView_playback_speed_normal);
    mSettingsSubTextsList.add(normalSpeed);
    mSettingsSubTextsList.add(RESOURCE_EMPTY);
    mSettingsIconIdsList = new ArrayList<Integer>();
    mSettingsIconIdsList.add(R.drawable.ic_audiotrack);
    mSettingsIconIdsList.add(R.drawable.ic_play_circle_filled);
    mAudioTrackList = new ArrayList<String>();
    mAudioTrackList.add(mResources.getString(R.string.MediaControlView_audio_track_none_text));
    mPlaybackSpeedTextList = new ArrayList<String>(Arrays.asList(mResources.getStringArray(R.array.MediaControlView_playback_speeds)));
    // Select the normal speed (1x) as the default value.
    mPlaybackSpeedTextList.add(PLAYBACK_SPEED_1x_INDEX, normalSpeed);
    mSelectedSpeedIndex = PLAYBACK_SPEED_1x_INDEX;
    mPlaybackSpeedMultBy100List = new ArrayList<Integer>();
    int[] speeds = mResources.getIntArray(R.array.speed_multiplied_by_100);
    for (int i = 0; i < speeds.length; i++) {
        mPlaybackSpeedMultBy100List.add(speeds[i]);
    }
    mCustomPlaybackSpeedIndex = -1;
}
#end_block

#method_before
void displaySettingsWindow(BaseAdapter adapter) {
    // Set Adapter
    mSettingsListView.setAdapter(adapter);
    // Set width of window
    int itemWidth = (mSizeType == SIZE_TYPE_EMBEDDED) ? mEmbeddedSettingsItemWidth : mFullSettingsItemWidth;
    mSettingsWindow.setWidth(itemWidth);
    // Calculate height of window
    int maxHeight = getMeasuredHeight() + mSettingsWindowMargin * 2;
    int totalHeight = adapter.getCount() * mSettingsItemHeight;
    int height = (totalHeight < maxHeight) ? totalHeight : maxHeight;
    mSettingsWindow.setHeight(height);
    // Show window
    mNeedToHideBars = false;
    mSettingsWindow.dismiss();
    mSettingsWindow.showAsDropDown(this, mSettingsWindowMargin, mSettingsWindowMargin - height, Gravity.BOTTOM | Gravity.RIGHT);
    mNeedToHideBars = true;
}
#method_after
void displaySettingsWindow(BaseAdapter adapter) {
    // Set Adapter
    mSettingsListView.setAdapter(adapter);
    // Set width of window
    int itemWidth = (mSizeType == SIZE_TYPE_EMBEDDED) ? mEmbeddedSettingsItemWidth : mFullSettingsItemWidth;
    mSettingsWindow.setWidth(itemWidth);
    // Calculate height of window
    int maxHeight = getMeasuredHeight() + mSettingsWindowMargin * 2;
    int totalHeight = adapter.getCount() * mSettingsItemHeight;
    int height = (totalHeight < maxHeight) ? totalHeight : maxHeight;
    mSettingsWindow.setHeight(height);
    // Show window
    mNeedToHideBars = false;
    mSettingsWindow.dismiss();
    // Workaround for b/123271636.
    if (height > 0) {
        mSettingsWindow.showAsDropDown(this, mSettingsWindowMargin, mSettingsWindowMargin - height, Gravity.BOTTOM | Gravity.RIGHT);
        mNeedToHideBars = true;
    }
}
#end_block

#method_before
private void assertEquivalentLayouts(@Nullable View lhs, @Nullable View rhs) {
    // Make sure both are null or both are not null.
    Assert.assertEquals(lhs == null, rhs == null);
    if (lhs == null) {
        // If the two objects are null, then they are the same.
        return;
    }
    // The two views should have the same class and ID
    Assert.assertSame(lhs.getClass(), rhs.getClass());
    Assert.assertEquals(lhs.getId(), rhs.getId());
    // If these are ViewGroups, make sure the children are also equivalent.
    if (lhs instanceof ViewGroup) {
        ViewGroup lhsGroup = (ViewGroup) lhs;
        ViewGroup rhsGroup = (ViewGroup) rhs;
        Assert.assertEquals(lhsGroup.getChildCount(), rhsGroup.getChildCount());
        for (int i = 0; i < lhsGroup.getChildCount(); i++) {
            assertEquivalentLayouts(lhsGroup.getChildAt(i), rhsGroup.getChildAt(i));
        }
    }
}
#method_after
private void assertEquivalentLayouts(View lhs, View rhs) {
    // Make sure both are null or both are not null.
    Assert.assertEquals(lhs == null, rhs == null);
    if (lhs == null) {
        // If the two objects are null, then they are the same.
        return;
    }
    // The two views should have the same class and ID
    Assert.assertSame(lhs.getClass(), rhs.getClass());
    Assert.assertEquals(lhs.getId(), rhs.getId());
    // If these are ViewGroups, make sure the children are also equivalent.
    if (lhs instanceof ViewGroup) {
        ViewGroup lhsGroup = (ViewGroup) lhs;
        ViewGroup rhsGroup = (ViewGroup) rhs;
        Assert.assertEquals(lhsGroup.getChildCount(), rhsGroup.getChildCount());
        for (int i = 0; i < lhsGroup.getChildCount(); i++) {
            assertEquivalentLayouts(lhsGroup.getChildAt(i), rhsGroup.getChildAt(i));
        }
    }
}
#end_block

#method_before
public void onBindViewHolder(PreferenceViewHolder holder) {
    holder.itemView.setOnClickListener(mClickListener);
    holder.itemView.setId(mViewId);
    final TextView titleView = (TextView) holder.findViewById(android.R.id.title);
    if (titleView != null) {
        final CharSequence title = getTitle();
        if (!TextUtils.isEmpty(title)) {
            titleView.setText(title);
            titleView.setVisibility(View.VISIBLE);
            if (mHasSingleLineTitleAttr) {
                titleView.setSingleLine(mSingleLineTitle);
            }
        } else {
            titleView.setVisibility(View.GONE);
        }
    }
    final TextView summaryView = (TextView) holder.findViewById(android.R.id.summary);
    if (summaryView != null) {
        final CharSequence summary = getSummary();
        if (!TextUtils.isEmpty(summary)) {
            summaryView.setText(summary);
            summaryView.setVisibility(View.VISIBLE);
        } else {
            summaryView.setVisibility(View.GONE);
        }
    }
    final ImageView imageView = (ImageView) holder.findViewById(android.R.id.icon);
    if (imageView != null) {
        if (mIconResId != 0 || mIcon != null) {
            if (mIcon == null) {
                mIcon = AppCompatResources.getDrawable(mContext, mIconResId);
            }
            if (mIcon != null) {
                imageView.setImageDrawable(mIcon);
            }
        }
        if (mIcon != null) {
            imageView.setVisibility(View.VISIBLE);
        } else {
            imageView.setVisibility(mIconSpaceReserved ? View.INVISIBLE : View.GONE);
        }
    }
    View imageFrame = holder.findViewById(R.id.icon_frame);
    if (imageFrame == null) {
        imageFrame = holder.findViewById(AndroidResources.ANDROID_R_ICON_FRAME);
    }
    if (imageFrame != null) {
        if (mIcon != null) {
            imageFrame.setVisibility(View.VISIBLE);
        } else {
            imageFrame.setVisibility(mIconSpaceReserved ? View.INVISIBLE : View.GONE);
        }
    }
    if (mShouldDisableView) {
        setEnabledStateOnViews(holder.itemView, isEnabled());
    } else {
        setEnabledStateOnViews(holder.itemView, true);
    }
    final boolean selectable = isSelectable();
    holder.itemView.setFocusable(selectable);
    holder.itemView.setClickable(selectable);
    holder.setDividerAllowedAbove(mAllowDividerAbove);
    holder.setDividerAllowedBelow(mAllowDividerBelow);
    if (isCopyingEnabled()) {
        if (mOnCopyListener == null) {
            mOnCopyListener = new OnPreferenceCopyListener(this);
        }
        holder.itemView.setOnCreateContextMenuListener(mOnCopyListener);
    } else {
        holder.itemView.setOnCreateContextMenuListener(null);
    }
}
#method_after
public void onBindViewHolder(PreferenceViewHolder holder) {
    holder.itemView.setOnClickListener(mClickListener);
    holder.itemView.setId(mViewId);
    final TextView titleView = (TextView) holder.findViewById(android.R.id.title);
    if (titleView != null) {
        final CharSequence title = getTitle();
        if (!TextUtils.isEmpty(title)) {
            titleView.setText(title);
            titleView.setVisibility(View.VISIBLE);
            if (mHasSingleLineTitleAttr) {
                titleView.setSingleLine(mSingleLineTitle);
            }
        } else {
            titleView.setVisibility(View.GONE);
        }
    }
    final TextView summaryView = (TextView) holder.findViewById(android.R.id.summary);
    if (summaryView != null) {
        final CharSequence summary = getSummary();
        if (!TextUtils.isEmpty(summary)) {
            summaryView.setText(summary);
            summaryView.setVisibility(View.VISIBLE);
        } else {
            summaryView.setVisibility(View.GONE);
        }
    }
    final ImageView imageView = (ImageView) holder.findViewById(android.R.id.icon);
    if (imageView != null) {
        if (mIconResId != 0 || mIcon != null) {
            if (mIcon == null) {
                mIcon = AppCompatResources.getDrawable(mContext, mIconResId);
            }
            if (mIcon != null) {
                imageView.setImageDrawable(mIcon);
            }
        }
        if (mIcon != null) {
            imageView.setVisibility(View.VISIBLE);
        } else {
            imageView.setVisibility(mIconSpaceReserved ? View.INVISIBLE : View.GONE);
        }
    }
    View imageFrame = holder.findViewById(R.id.icon_frame);
    if (imageFrame == null) {
        imageFrame = holder.findViewById(AndroidResources.ANDROID_R_ICON_FRAME);
    }
    if (imageFrame != null) {
        if (mIcon != null) {
            imageFrame.setVisibility(View.VISIBLE);
        } else {
            imageFrame.setVisibility(mIconSpaceReserved ? View.INVISIBLE : View.GONE);
        }
    }
    if (mShouldDisableView) {
        setEnabledStateOnViews(holder.itemView, isEnabled());
    } else {
        setEnabledStateOnViews(holder.itemView, true);
    }
    final boolean selectable = isSelectable();
    holder.itemView.setFocusable(selectable);
    holder.itemView.setClickable(selectable);
    holder.setDividerAllowedAbove(mAllowDividerAbove);
    holder.setDividerAllowedBelow(mAllowDividerBelow);
    if (isCopyingEnabled() && mOnCopyListener == null) {
        mOnCopyListener = new OnPreferenceCopyListener(this);
    }
    holder.itemView.setOnCreateContextMenuListener(isCopyingEnabled() ? mOnCopyListener : null);
}
#end_block

