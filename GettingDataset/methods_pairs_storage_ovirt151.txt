88
#method_before
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshotFromDB(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#method_after
protected void UndoActionOnSourceAndDestination() {
    if (getDestinationDiskImage() != null) {
        RemoveSnapshot(getDestinationDiskImage());
    }
    if (getDiskImage() != null) {
        // Unlock source image:
        UnLockImage();
    }
}
#end_block

#method_before
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    RemoveSnapshotFromDB(snapshot);
    AdditionalImageRemoveTreatment(snapshot);
}
#method_after
/**
 * Vitaly TODO: move it other class in hierarchy
 */
protected void RemoveSnapshot(DiskImage snapshot) {
    getImageStorageDomainMapDao().remove(snapshot.getImageId());
    getImageDao().remove(snapshot.getImageId());
    List<DiskImage> imagesForDisk = getDiskImageDao().getAllSnapshotsForImageGroup(snapshot.getId());
    if (imagesForDisk == null || imagesForDisk.isEmpty()) {
        getBaseDiskDao().remove(snapshot.getId());
    }
}
#end_block

#method_before
protected void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#method_after
private void RemoveChildren(Guid snapshot) {
    List<Guid> children = new ArrayList<Guid>();
    GetImageChildren(snapshot, children);
    Collections.reverse(children);
    for (Guid child : children) {
        RemoveSnapshot(getDiskImageDao().getSnapshotById(child));
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    Network network = (Network) getSelectedItem();
    // CanRemove = SelectedItems != null && SelectedItems.Count > 0;
    getSetAsDisplayCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1 && network != null && !network.getCluster().getis_display() && network.getCluster().getStatus() != NetworkStatus.NonOperational);
}
#method_after
private void UpdateActionAvailability() {
    Network network = (Network) getSelectedItem();
    // CanRemove = SelectedItems != null && SelectedItems.Count > 0;
    getSetAsDisplayCommand().setIsExecutionAllowed(getSelectedItems() != null && getSelectedItems().size() == 1 && network != null && !network.getCluster().getis_display() && network.getCluster().getstatus() != NetworkStatus.NonOperational);
}
#end_block

#method_before
public void OnSave() {
    ClusterNetworkModel model = (ClusterNetworkModel) getWindow();
    if (getEntity() == null) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(new Network(null));
    if (!model.Validate() || getEntity().getstorage_pool_id() == null) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getstorage_pool_id());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(model.getcurrentNetwork().getstorage_pool_id().getValue(), model.getcurrentNetwork()), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result1) {
            ClusterNetworkListModel networkListModel1 = (ClusterNetworkListModel) result1.getState();
            VdcReturnValueBase retVal = result1.getReturnValue();
            boolean succeeded = false;
            if (retVal != null && retVal.getSucceeded()) {
                succeeded = true;
            }
            networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
        }
    }, this);
}
#method_after
public void OnSave() {
    ClusterNetworkModel model = (ClusterNetworkModel) getWindow();
    if (getEntity() == null) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(new Network());
    if (!model.Validate() || getEntity().getstorage_pool_id() == null) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getstorage_pool_id());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.StartProgress(null);
    Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(model.getcurrentNetwork().getstorage_pool_id().getValue(), model.getcurrentNetwork()), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result1) {
            ClusterNetworkListModel networkListModel1 = (ClusterNetworkListModel) result1.getState();
            VdcReturnValueBase retVal = result1.getReturnValue();
            boolean succeeded = false;
            if (retVal != null && retVal.getSucceeded()) {
                succeeded = true;
            }
            networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
        }
    }, this);
}
#end_block

#method_before
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    ClusterNetworkModel networkModel = (ClusterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    networkModel.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : networkModel.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            networkModel.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    Guid networkId = networkGuid;
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : networkModel.getnewClusters()) {
        Network tempVar = new Network(null);
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#method_after
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    ClusterNetworkModel networkModel = (ClusterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    networkModel.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : networkModel.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            networkModel.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    Guid networkId = networkGuid;
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : networkModel.getnewClusters()) {
        Network tempVar = new Network();
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#end_block

#method_before
public void OnSave() {
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    if (getEntity() == null || (!model.getIsNew() && getSelectedItem() == null)) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(model.getIsNew() ? new Network(null) : (Network) Cloner.clone(getSelectedItem()));
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getId());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : model.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            model.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    ArrayList<VDSGroup> detachNetworkFromClusters = Linq.Except(model.getOriginalClusters(), model.getnewClusters());
    ArrayList<VdcActionParametersBase> actionParameters = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup detachNetworkFromCluster : detachNetworkFromClusters) {
        actionParameters.add(new AttachNetworkToVdsGroupParameter(detachNetworkFromCluster, model.getcurrentNetwork()));
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.DetachNetworkToVdsGroup, actionParameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) result.getState();
            DataCenterNetworkModel networkModel = (DataCenterNetworkModel) networkListModel.getWindow();
            Network network = networkModel.getcurrentNetwork();
            if (networkModel.getIsNew()) {
                Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result1) {
                        DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                        VdcReturnValueBase retVal = result1.getReturnValue();
                        boolean succeeded = false;
                        if (retVal != null && retVal.getSucceeded()) {
                            succeeded = true;
                        }
                        networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
                    }
                }, networkListModel);
            } else {
                if ((Boolean) networkModel.getIsEnabled().getEntity()) {
                    Frontend.RunAction(VdcActionType.UpdateNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                            DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                            VdcReturnValueBase retVal = result1.getReturnValue();
                            networkListModel1.PostNetworkAction(null, retVal != null && retVal.getSucceeded());
                        }
                    }, networkListModel);
                } else {
                    PostNetworkAction(null, true);
                }
            }
        }
    }, this);
}
#method_after
public void OnSave() {
    DataCenterNetworkModel model = (DataCenterNetworkModel) getWindow();
    if (getEntity() == null || (!model.getIsNew() && getSelectedItem() == null)) {
        Cancel();
        return;
    }
    model.setcurrentNetwork(model.getIsNew() ? new Network() : (Network) Cloner.clone(getSelectedItem()));
    if (!model.Validate()) {
        return;
    }
    // Save changes.
    model.getcurrentNetwork().setstorage_pool_id(getEntity().getId());
    model.getcurrentNetwork().setname((String) model.getName().getEntity());
    model.getcurrentNetwork().setstp((Boolean) model.getIsStpEnabled().getEntity());
    model.getcurrentNetwork().setdescription((String) model.getDescription().getEntity());
    model.getcurrentNetwork().setVmNetwork((Boolean) model.getIsVmNetwork().getEntity());
    model.getcurrentNetwork().setMtu(0);
    if (model.getMtu().getEntity() != null) {
        model.getcurrentNetwork().setMtu(Integer.parseInt(model.getMtu().getEntity().toString()));
    }
    model.getcurrentNetwork().setvlan_id(null);
    if ((Boolean) model.getHasVLanTag().getEntity()) {
        model.getcurrentNetwork().setvlan_id(Integer.parseInt(model.getVLanTag().getEntity().toString()));
    }
    model.setnewClusters(new ArrayList<VDSGroup>());
    for (Object item : model.getNetworkClusterList().getItems()) {
        NetworkClusterModel networkClusterModel = (NetworkClusterModel) item;
        if (networkClusterModel.isAttached()) {
            model.getnewClusters().add(networkClusterModel.getEntity());
        }
    }
    ArrayList<VDSGroup> detachNetworkFromClusters = Linq.Except(model.getOriginalClusters(), model.getnewClusters());
    ArrayList<VdcActionParametersBase> actionParameters = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup detachNetworkFromCluster : detachNetworkFromClusters) {
        actionParameters.add(new AttachNetworkToVdsGroupParameter(detachNetworkFromCluster, model.getcurrentNetwork()));
    }
    model.StartProgress(null);
    Frontend.RunMultipleAction(VdcActionType.DetachNetworkToVdsGroup, actionParameters, new IFrontendMultipleActionAsyncCallback() {

        @Override
        public void Executed(FrontendMultipleActionAsyncResult result) {
            DataCenterNetworkListModel networkListModel = (DataCenterNetworkListModel) result.getState();
            DataCenterNetworkModel networkModel = (DataCenterNetworkModel) networkListModel.getWindow();
            Network network = networkModel.getcurrentNetwork();
            if (networkModel.getIsNew()) {
                Frontend.RunAction(VdcActionType.AddNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                    @Override
                    public void Executed(FrontendActionAsyncResult result1) {
                        DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                        VdcReturnValueBase retVal = result1.getReturnValue();
                        boolean succeeded = false;
                        if (retVal != null && retVal.getSucceeded()) {
                            succeeded = true;
                        }
                        networkListModel1.PostNetworkAction(succeeded ? (Guid) retVal.getActionReturnValue() : null, succeeded);
                    }
                }, networkListModel);
            } else {
                if ((Boolean) networkModel.getIsEnabled().getEntity()) {
                    Frontend.RunAction(VdcActionType.UpdateNetwork, new AddNetworkStoragePoolParameters(getEntity().getId(), network), new IFrontendActionAsyncCallback() {

                        @Override
                        public void Executed(FrontendActionAsyncResult result1) {
                            DataCenterNetworkListModel networkListModel1 = (DataCenterNetworkListModel) result1.getState();
                            VdcReturnValueBase retVal = result1.getReturnValue();
                            networkListModel1.PostNetworkAction(null, retVal != null && retVal.getSucceeded());
                        }
                    }, networkListModel);
                } else {
                    PostNetworkAction(null, true);
                }
            }
        }
    }, this);
}
#end_block

#method_before
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    DataCenterNetworkModel networkModel = (DataCenterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    Guid networkId = networkModel.getIsNew() ? networkGuid : network.getId();
    ArrayList<VDSGroup> attachNetworkToClusters = Linq.Except(networkModel.getnewClusters(), networkModel.getOriginalClusters());
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : attachNetworkToClusters) {
        Network tempVar = new Network(null);
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#method_after
public void PostNetworkAction(Guid networkGuid, boolean succeeded) {
    DataCenterNetworkModel networkModel = (DataCenterNetworkModel) getWindow();
    if (succeeded) {
        Cancel();
    } else {
        networkModel.StopProgress();
        return;
    }
    networkModel.StopProgress();
    Network network = networkModel.getcurrentNetwork();
    Guid networkId = networkModel.getIsNew() ? networkGuid : network.getId();
    ArrayList<VDSGroup> attachNetworkToClusters = Linq.Except(networkModel.getnewClusters(), networkModel.getOriginalClusters());
    ArrayList<VdcActionParametersBase> actionParameters1 = new ArrayList<VdcActionParametersBase>();
    for (VDSGroup attachNetworkToCluster : attachNetworkToClusters) {
        Network tempVar = new Network();
        tempVar.setId(networkId);
        tempVar.setname(network.getname());
        // Init default network_cluster values (required, display, status)
        tempVar.setCluster(new network_cluster());
        actionParameters1.add(new AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar));
    }
    Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1);
}
#end_block

#method_before
private void New() {
    VM vm = (VM) getEntity();
    if (getWindow() != null) {
        return;
    }
    ArrayList<VmNetworkInterface> interfaces = Linq.<VmNetworkInterface>Cast(getItems());
    String newNicName = DataProvider.GetNewNicName(interfaces);
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms");
    model.setIsNew(true);
    model.getNicType().setItems(DataProvider.GetNicTypeList(vm.getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(vm.getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    model.getActive().setEntity(true);
    model.getPortMirroring().setEntity(false);
    // $NON-NLS-1$
    final UICommand okCommand = new UICommand("OnSave", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // wait for data to fetch
    okCommand.setIsExecutionAllowed(false);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getStatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(null);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
            // fetch completed
            okCommand.setIsExecutionAllowed(true);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
}
#method_after
private void New() {
    VM vm = (VM) getEntity();
    if (getWindow() != null) {
        return;
    }
    ArrayList<VmNetworkInterface> interfaces = Linq.<VmNetworkInterface>Cast(getItems());
    String newNicName = DataProvider.GetNewNicName(interfaces);
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms");
    model.setIsNew(true);
    model.getNicType().setItems(DataProvider.GetNicTypeList(vm.getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(vm.getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    model.getActive().setEntity(true);
    model.getPortMirroring().setEntity(false);
    // $NON-NLS-1$
    final UICommand okCommand = new UICommand("OnSave", this);
    okCommand.setTitle(ConstantsManager.getInstance().getConstants().ok());
    okCommand.setIsDefault(true);
    // wait for data to fetch
    okCommand.setIsExecutionAllowed(false);
    model.getCommands().add(okCommand);
    // $NON-NLS-1$
    UICommand cancelCommand = new UICommand("Cancel", this);
    cancelCommand.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    cancelCommand.setIsCancel(true);
    model.getCommands().add(cancelCommand);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getstatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(null);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
            // fetch completed
            okCommand.setIsExecutionAllowed(true);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
}
#end_block

#method_before
private void Edit() {
    VM vm = (VM) getEntity();
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("edit_network_interface_vms");
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(vm.getvm_os(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(vm.getvm_os()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsChangable(false);
    model.getMAC().setEntity(nic.getMacAddress());
    model.getActive().setIsAvailable(false);
    model.getPortMirroring().setEntity(nic.isPortMirroring());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getStatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic1 = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic1.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
private void Edit() {
    VM vm = (VM) getEntity();
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    if (getWindow() != null) {
        return;
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("edit_network_interface_vms");
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(vm.getvm_os(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(vm.getvm_os()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsChangable(false);
    model.getMAC().setEntity(nic.getMacAddress());
    model.getActive().setIsAvailable(false);
    model.getPortMirroring().setEntity(nic.isPortMirroring());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model1, Object result1) {
            VmInterfaceListModel vmInterfaceListModel = (VmInterfaceListModel) model1;
            VmInterfaceModel vmInterfaceModel = (VmInterfaceModel) vmInterfaceListModel.getWindow();
            ArrayList<Network> networks = new ArrayList<Network>();
            for (Network a : (ArrayList<Network>) result1) {
                if (a.getCluster().getstatus() == NetworkStatus.Operational) {
                    networks.add(a);
                }
            }
            if (vmInterfaceModel.getIsNew()) {
                vmInterfaceModel.getNetwork().setItems(networks);
                vmInterfaceModel.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
            } else {
                VmNetworkInterface nic1 = (VmNetworkInterface) vmInterfaceListModel.getSelectedItem();
                vmInterfaceModel.getNetwork().setItems(networks);
                for (Network a : networks) {
                    if (StringHelper.stringsEqual(a.getname(), nic1.getNetworkName())) {
                        vmInterfaceModel.getNetwork().setSelectedItem(a);
                        break;
                    }
                }
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, vm.getvds_group_id());
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
private static Network CloneNetwork(Network instance) {
    Network obj = new Network(null);
    obj.setaddr(instance.getaddr());
    obj.setdescription(instance.getdescription());
    obj.setId(instance.getId());
    obj.setname(instance.getname());
    obj.setsubnet(instance.getsubnet());
    obj.setgateway(instance.getgateway());
    obj.settype(instance.gettype());
    obj.setvlan_id(instance.getvlan_id());
    obj.setstp(instance.getstp());
    obj.setstorage_pool_id(instance.getstorage_pool_id());
    if (instance.getCluster() != null) {
        obj.setCluster(new network_cluster());
        obj.getCluster().setstatus(instance.getCluster().getstatus());
        obj.getCluster().setis_display(instance.getCluster().getis_display());
        obj.getCluster().setRequired(instance.getCluster().isRequired());
    }
    return obj;
}
#method_after
private static Network CloneNetwork(Network instance) {
    Network obj = new Network();
    obj.setaddr(instance.getaddr());
    obj.setdescription(instance.getdescription());
    obj.setId(instance.getId());
    obj.setname(instance.getname());
    obj.setsubnet(instance.getsubnet());
    obj.setgateway(instance.getgateway());
    obj.settype(instance.gettype());
    obj.setvlan_id(instance.getvlan_id());
    obj.setstp(instance.getstp());
    obj.setstorage_pool_id(instance.getstorage_pool_id());
    if (instance.getCluster() != null) {
        obj.setCluster(new network_cluster());
        obj.getCluster().setstatus(instance.getCluster().getstatus());
        obj.getCluster().setis_display(instance.getCluster().getis_display());
        obj.getCluster().setRequired(instance.getCluster().isRequired());
    }
    return obj;
}
#end_block

#method_before
@Override
public NetworkStatus getStatus() {
    return (getEntity().getCluster() == null ? null : getEntity().getCluster().getStatus());
}
#method_after
@Override
public NetworkStatus getStatus() {
    return (getEntity().getCluster() == null ? null : getEntity().getCluster().getstatus());
}
#end_block

#method_before
void initTable(final ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new NetworkStatusColumn(), constants.empty(), "20px");
    TextColumnWithTooltip<Network> nameColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getname();
        }
    };
    getTable().addColumn(nameColumn, constants.nameNetwork());
    TextColumnWithTooltip<Network> statusColumn = new EnumColumn<Network, NetworkStatus>() {

        @Override
        public NetworkStatus getRawValue(Network object) {
            return object.getCluster().getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusNetwork());
    TextColumnWithTooltip<Network> roleColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            // according to ClusterNetworkListView.xaml:45
            return (object.getCluster() == null ? false : object.getCluster().getis_display()) ? constants.displayNetwork() : constants.empty();
        }
    };
    getTable().addColumn(roleColumn, constants.roleNetwork());
    TextColumnWithTooltip<Network> descColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getdescription();
        }
    };
    getTable().addColumn(descColumn, constants.descriptionNetwork());
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.addNetworkNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getNewNetworkCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.assignDetatchNetworksNework()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getManageCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.setAsDisplayNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSetAsDisplayCommand();
        }
    });
}
#method_after
void initTable(final ApplicationConstants constants) {
    // $NON-NLS-1$
    getTable().addColumn(new NetworkStatusColumn(), constants.empty(), "20px");
    TextColumnWithTooltip<Network> nameColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getname();
        }
    };
    getTable().addColumn(nameColumn, constants.nameNetwork());
    TextColumnWithTooltip<Network> statusColumn = new EnumColumn<Network, NetworkStatus>() {

        @Override
        public NetworkStatus getRawValue(Network object) {
            return object.getCluster().getstatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusNetwork());
    TextColumnWithTooltip<Network> roleColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            // according to ClusterNetworkListView.xaml:45
            return (object.getCluster() == null ? false : object.getCluster().getis_display()) ? constants.displayNetwork() : constants.empty();
        }
    };
    getTable().addColumn(roleColumn, constants.roleNetwork());
    TextColumnWithTooltip<Network> descColumn = new TextColumnWithTooltip<Network>() {

        @Override
        public String getValue(Network object) {
            return object.getdescription();
        }
    };
    getTable().addColumn(descColumn, constants.descriptionNetwork());
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.addNetworkNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getNewNetworkCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.assignDetatchNetworksNework()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getManageCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<Network>(constants.setAsDisplayNetwork()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getSetAsDisplayCommand();
        }
    });
}
#end_block

#method_before
public void Edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (StringHelper.stringsEqual(network.getname(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getname(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.Except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getvlan_id() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new Linq.NetworkByNameComparer());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network(null);
                tempVar.setId(NGuid.Empty);
                // $NON-NLS-1$
                tempVar.setname("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = new UICommand("OnSave", hostInterfaceListModel);
                tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
                tempVar3.setIsDefault(true);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                tempVar4.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void Edit() {
    if (getWindow() != null) {
        return;
    }
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networksByCluster = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            ArrayList<Network> networksToAdd = new ArrayList<Network>();
            Network selectedNetwork = null;
            if (item.getVlanId() != null) {
                for (Network network : networksByCluster) {
                    if (StringHelper.stringsEqual(network.getname(), item.getNetworkName())) {
                        networksToAdd.add(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
            } else {
                // creating dictionary of networks by name
                HashMap<String, Network> networkDictionary = new HashMap<String, Network>();
                for (Network network : networksByCluster) {
                    networkDictionary.put(network.getname(), network);
                }
                // creating list of attached networks.
                ArrayList<Network> attachedNetworks = new ArrayList<Network>();
                for (VdsNetworkInterface nic : hostInterfaceListModel.getAllItems()) {
                    if (nic.getNetworkName() != null && networkDictionary.containsKey(nic.getNetworkName())) {
                        attachedNetworks.add(networkDictionary.get(nic.getNetworkName()));
                    }
                }
                ArrayList<Network> unAttachedNetworks = Linq.Except(networksByCluster, attachedNetworks);
                // adding selected network names to list.
                boolean isVlanSelected = false;
                boolean isManagementSelected = false;
                ArrayList<VdsNetworkInterface> selectedItems = hostInterfaceListModel.getSelectedItemsWithVlans();
                ArrayList<String> selectedNicsNetworks = new ArrayList<String>();
                for (VdsNetworkInterface nic : selectedItems) {
                    if (!StringHelper.isNullOrEmpty(nic.getNetworkName())) {
                        if (nic.getIsManagement()) {
                            isManagementSelected = true;
                        }
                        selectedNicsNetworks.add(nic.getNetworkName());
                        if (!isVlanSelected && nic.getVlanId() != null) {
                            isVlanSelected = true;
                        }
                    }
                }
                for (String selectedNetworkName : selectedNicsNetworks) {
                    if (networkDictionary.containsKey(selectedNetworkName)) {
                        Network network = networkDictionary.get(selectedNetworkName);
                        networksToAdd.add(network);
                        attachedNetworks.remove(network);
                        if (selectedNetwork == null) {
                            selectedNetwork = network;
                        }
                    }
                }
                if (!isManagementSelected || isVlanSelected) {
                    for (Network unAttachedNetwork : unAttachedNetworks) {
                        if (isVlanSelected) {
                            if (unAttachedNetwork.getvlan_id() != null) {
                                networksToAdd.add(unAttachedNetwork);
                            }
                        } else {
                            networksToAdd.add(unAttachedNetwork);
                        }
                    }
                }
            }
            Collections.sort(networksToAdd, new Linq.NetworkByNameComparer());
            // Add a 'none' option to networks.
            if (!StringHelper.isNullOrEmpty(item.getNetworkName())) {
                Network tempVar = new Network();
                tempVar.setId(NGuid.Empty);
                // $NON-NLS-1$
                tempVar.setname("None");
                networksToAdd.add(0, tempVar);
            }
            HostInterfaceModel hostInterfaceModel = new HostInterfaceModel();
            hostInterfaceListModel.setWindow(hostInterfaceModel);
            hostInterfaceModel.setEntity(item.getName());
            hostInterfaceModel.setTitle(ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle());
            // $NON-NLS-1$
            hostInterfaceModel.setHashName("edit_network_interface_hosts");
            hostInterfaceModel.setNetworks(hostInterfaceListModel.getSelectedItemsWithVlans());
            hostInterfaceModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            hostInterfaceModel.setBootProtocol(!hostInterfaceModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            hostInterfaceModel.getAddress().setEntity(item.getAddress());
            hostInterfaceModel.getSubnet().setEntity(item.getSubnet());
            hostInterfaceModel.getNetwork().setItems(networksToAdd);
            hostInterfaceModel.getName().setEntity(item.getName());
            hostInterfaceModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                hostInterfaceModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                hostInterfaceModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                hostInterfaceModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            if (selectedNetwork == null && networksToAdd.size() > 0) {
                selectedNetwork = networksToAdd.get(0);
            }
            hostInterfaceModel.getNetwork().setSelectedItem(selectedNetwork);
            hostInterfaceModel.getCheckConnectivity().setIsAvailable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setIsChangable(!StringHelper.isNullOrEmpty(item.getNetworkName()) && item.getIsManagement());
            hostInterfaceModel.getCheckConnectivity().setEntity(item.getIsManagement());
            if (networksToAdd.isEmpty()) {
                hostInterfaceModel.setMessage(ConstantsManager.getInstance().getConstants().thereAreNoNetworksAvailablePleaseAddAdditionalNetworksMsg());
                // $NON-NLS-1$
                UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar2.setTitle(ConstantsManager.getInstance().getConstants().close());
                tempVar2.setIsDefault(true);
                tempVar2.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar2);
            } else {
                // $NON-NLS-1$
                UICommand tempVar3 = new UICommand("OnSave", hostInterfaceListModel);
                tempVar3.setTitle(ConstantsManager.getInstance().getConstants().ok());
                tempVar3.setIsDefault(true);
                hostInterfaceModel.getCommands().add(tempVar3);
                // $NON-NLS-1$
                UICommand tempVar4 = new UICommand("Cancel", hostInterfaceListModel);
                tempVar4.setTitle(ConstantsManager.getInstance().getConstants().cancel());
                tempVar4.setIsCancel(true);
                hostInterfaceModel.getCommands().add(tempVar4);
            }
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
public void EditManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.FindNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            String defaultInterfaceName = null;
            RefObject<String> tempRef_defaultInterfaceName = new RefObject<String>(defaultInterfaceName);
            ArrayList<VdsNetworkInterface> interfaces = AsyncDataProvider.GetInterfaceOptionsForEditNetwork(getOriginalItems(), item, networkToEdit, getEntity().getId(), tempRef_defaultInterfaceName);
            defaultInterfaceName = tempRef_defaultInterfaceName.argvalue;
            managementModel.getInterface().setItems(interfaces);
            managementModel.getInterface().setSelectedItem(Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(interfaces), defaultInterfaceName));
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
            }
            managementModel.getCheckConnectivity().setIsAvailable(true);
            managementModel.getCheckConnectivity().setIsChangable(true);
            // currently, always should be
            managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
            // true
            managementModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                managementModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            managementModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            managementModel.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void EditManagementNetwork() {
    if (getWindow() != null) {
        return;
    }
    HostManagementNetworkModel managementNicModel = new HostManagementNetworkModel();
    setWindow(managementNicModel);
    managementNicModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkTitle());
    // $NON-NLS-1$
    managementNicModel.setHashName("edit_management_network");
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> clusterNetworks = (ArrayList<Network>) ReturnValue;
            VdsNetworkInterface item = (VdsNetworkInterface) hostInterfaceListModel.getSelectedItem();
            HostManagementNetworkModel managementModel = (HostManagementNetworkModel) hostInterfaceListModel.getWindow();
            Network networkToEdit = Linq.FindNetworkByName(clusterNetworks, item.getNetworkName());
            managementModel.setEntity(networkToEdit);
            managementModel.setNoneBootProtocolAvailable(!item.getIsManagement());
            managementModel.setBootProtocol(!managementModel.getNoneBootProtocolAvailable() && item.getBootProtocol() == NetworkBootProtocol.None ? NetworkBootProtocol.Dhcp : item.getBootProtocol());
            managementModel.getAddress().setEntity(item.getAddress());
            managementModel.getSubnet().setEntity(item.getSubnet());
            managementModel.getGateway().setEntity(item.getGateway());
            String defaultInterfaceName = null;
            RefObject<String> tempRef_defaultInterfaceName = new RefObject<String>(defaultInterfaceName);
            ArrayList<VdsNetworkInterface> interfaces = DataProvider.GetInterfaceOptionsForEditNetwork(getOriginalItems(), item, networkToEdit, getEntity().getId(), tempRef_defaultInterfaceName);
            defaultInterfaceName = tempRef_defaultInterfaceName.argvalue;
            managementModel.getInterface().setItems(interfaces);
            managementModel.getInterface().setSelectedItem(Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(interfaces), defaultInterfaceName));
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getInterface().setTitle(ConstantsManager.getInstance().getConstants().interfaceListTitle());
                managementModel.getInterface().getSelectedItemChangedEvent().addListener(hostInterfaceListModel);
            }
            managementModel.getCheckConnectivity().setIsAvailable(true);
            managementModel.getCheckConnectivity().setIsChangable(true);
            // currently, always should be
            managementModel.getCheckConnectivity().setEntity(item.getIsManagement());
            // true
            managementModel.getBondingOptions().setIsAvailable(false);
            if (item.getBonded() != null && item.getBonded().equals(true)) {
                managementModel.getBondingOptions().setIsAvailable(true);
                Map.Entry<String, EntityModel> defaultItem = null;
                RefObject<Map.Entry<String, EntityModel>> tempRef_defaultItem = new RefObject<Map.Entry<String, EntityModel>>(defaultItem);
                ArrayList<Map.Entry<String, EntityModel>> list = DataProvider.GetBondingOptionList(tempRef_defaultItem);
                defaultItem = tempRef_defaultItem.argvalue;
                Map.Entry<String, EntityModel> selectBondingOpt = new KeyValuePairCompat<String, EntityModel>();
                boolean containsSelectBondingOpt = false;
                managementModel.getBondingOptions().setItems(list);
                for (int i = 0; i < list.size(); i++) {
                    if (StringHelper.stringsEqual(list.get(i).getKey(), item.getBondOptions())) {
                        selectBondingOpt = list.get(i);
                        containsSelectBondingOpt = true;
                        break;
                    }
                }
                if (containsSelectBondingOpt == false) {
                    if (StringHelper.stringsEqual(item.getBondOptions(), DataProvider.GetDefaultBondingOption())) {
                        selectBondingOpt = defaultItem;
                    } else {
                        selectBondingOpt = list.get(list.size() - 1);
                        EntityModel entityModel = selectBondingOpt.getValue();
                        entityModel.setEntity(item.getBondOptions());
                    }
                }
                managementModel.getBondingOptions().setSelectedItem(selectBondingOpt);
            }
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnEditManagementNetworkConfirmation", hostInterfaceListModel);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            managementModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", hostInterfaceListModel);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            managementModel.getCommands().add(tempVar2);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
public void OnDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    setcurrentModel(model);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
            Network defaultNetwork = new Network(null);
            VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar != null) ? tempVar : defaultNetwork;
            hostInterfaceListModel.StartProgress(null);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, hostInterfaceListModel);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#method_after
public void OnDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    setcurrentModel(model);
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(this);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object ReturnValue) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) model;
            ArrayList<Network> networks = (ArrayList<Network>) ReturnValue;
            Network defaultNetwork = new Network();
            VdsNetworkInterface nic = (VdsNetworkInterface) getSelectedItem();
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar != null) ? tempVar : defaultNetwork;
            hostInterfaceListModel.StartProgress(null);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, hostInterfaceListModel);
        }
    };
    AsyncDataProvider.GetClusterNetworkList(_asyncQuery, getEntity().getvds_group_id());
}
#end_block

#method_before
public void OnSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(getAllItems()), nicName);
    if (nic == null) {
        Cancel();
        return;
    }
    Network network = (Network) model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(NGuid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnConfirmManagementDetach", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
            Network defaultNetwork = new Network(null);
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar3 = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
            model.StartProgress(null);
            setcurrentModel(model);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, this);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().getValue().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (StringHelper.stringsEqual(network.getname(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && StringHelper.stringsEqual(item.getNetworkName(), network.getname())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getvlan_id() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = (Map.Entry<String, EntityModel>) model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress((String) model.getAddress().getEntity());
            parameters.setSubnet((String) model.getSubnet().getEntity());
        }
        model.StartProgress(null);
        setcurrentModel(model);
        Frontend.RunAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if ((Boolean) commitChanges.getEntity()) {
                        SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                        hostInterfaceListModel.Cancel();
                        hostInterfaceListModel.Search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                }
            }
        }, this);
    }
}
#method_after
public void OnSave() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (!model.Validate()) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.VdsNetworkInterfaceListToBase(getAllItems()), nicName);
    if (nic == null) {
        Cancel();
        return;
    }
    Network network = (Network) model.getNetwork().getSelectedItem();
    // Save changes.
    if (network.getId().equals(NGuid.Empty)) {
        if (nic.getIsManagement()) {
            // We are trying to disconnect the management interface from its
            // network -> ask for the user's confirmation before doing that.
            ConfirmationModel confirmModel = new ConfirmationModel();
            setConfirmWindow(confirmModel);
            confirmModel.setTitle(ConstantsManager.getInstance().getConstants().editManagementNetworkInterfaceTitle());
            // $NON-NLS-1$
            confirmModel.setHashName("edit_management_network_interface");
            confirmModel.setMessage(ConstantsManager.getInstance().getMessages().youAreAboutToDisconnectHostInterfaceMsg(nic.getName()));
            // $NON-NLS-1$
            UICommand tempVar = new UICommand("OnConfirmManagementDetach", this);
            tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
            tempVar.setIsDefault(true);
            confirmModel.getCommands().add(tempVar);
            // $NON-NLS-1$
            UICommand tempVar2 = new UICommand("Cancel", this);
            tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
            tempVar2.setIsCancel(true);
            confirmModel.getCommands().add(tempVar2);
        } else {
            if (model.getProgress() != null) {
                return;
            }
            ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
            Network defaultNetwork = new Network();
            defaultNetwork.setname(nic.getNetworkName());
            Network tempVar3 = Linq.FindNetworkByName(networks, nic.getNetworkName());
            Network net = (tempVar3 != null) ? tempVar3 : defaultNetwork;
            model.StartProgress(null);
            setcurrentModel(model);
            Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

                @Override
                public void Executed(FrontendActionAsyncResult result) {
                    HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                    VdcReturnValueBase returnValueBase = result.getReturnValue();
                    if (returnValueBase != null && returnValueBase.getSucceeded()) {
                        EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                        if ((Boolean) commitChanges.getEntity()) {
                            SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                        } else {
                            hostInterfaceListModel.getcurrentModel().StopProgress();
                            hostInterfaceListModel.Cancel();
                            hostInterfaceListModel.Search();
                        }
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                    }
                }
            }, this);
        }
    } else {
        if (model.getProgress() != null) {
            return;
        }
        AttachNetworkToVdsParameters parameters;
        VdcActionType actionType;
        boolean vLanAttached = false;
        boolean bondWithVlans = false;
        boolean isUpdateVlan = false;
        if (nic.getBonded() != null && nic.getBonded()) {
            for (HostInterfaceLineModel item : (ArrayList<HostInterfaceLineModel>) getItems()) {
                if (item.getInterface() != null && item.getInterface().getId().getValue().equals(nic.getId())) {
                    if (item.getVLans() != null && item.getVLans().size() > 0) {
                        bondWithVlans = true;
                        for (HostVLan vLan : item.getVLans()) {
                            if (StringHelper.stringsEqual(network.getname(), vLan.getNetworkName())) {
                                vLanAttached = true;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else {
            for (VdsNetworkInterface item : getSelectedItemsWithVlans()) {
                if (item.getVlanId() != null && StringHelper.stringsEqual(item.getNetworkName(), network.getname())) {
                    isUpdateVlan = true;
                    break;
                }
            }
        }
        // and the selected network in the dialog is a new vlan, attach selected network.
        if ((StringHelper.isNullOrEmpty(nic.getNetworkName()) && !isUpdateVlan) || (bondWithVlans && (!vLanAttached && network.getvlan_id() != null))) {
            parameters = new AttachNetworkToVdsParameters(getEntity().getId(), network, nic);
            actionType = VdcActionType.AttachNetworkToVdsInterface;
        } else {
            parameters = new UpdateNetworkToVdsParameters(getEntity().getId(), network, new ArrayList<VdsNetworkInterface>(Arrays.asList(new VdsNetworkInterface[] { nic })));
            parameters.setCheckConnectivity((Boolean) model.getCheckConnectivity().getEntity());
            actionType = VdcActionType.UpdateNetworkToVdsInterface;
        }
        Map.Entry<String, EntityModel> bondingOption;
        if (model.getBondingOptions().getSelectedItem() != null) {
            bondingOption = (Map.Entry<String, EntityModel>) model.getBondingOptions().getSelectedItem();
            if (// $NON-NLS-1$
            !bondingOption.getKey().equals("custom")) {
                parameters.setBondingOptions((StringHelper.isNullOrEmpty(bondingOption.getKey()) ? null : bondingOption.getKey()));
            } else {
                EntityModel entityModel = bondingOption.getValue();
                if (entityModel.getEntity() != null) {
                    parameters.setBondingOptions(entityModel.getEntity().toString());
                }
            }
        }
        parameters.setBootProtocol(model.getBootProtocol());
        if (model.getIsStaticAddress()) {
            parameters.setAddress((String) model.getAddress().getEntity());
            parameters.setSubnet((String) model.getSubnet().getEntity());
        }
        model.StartProgress(null);
        setcurrentModel(model);
        Frontend.RunAction(actionType, parameters, new IFrontendActionAsyncCallback() {

            @Override
            public void Executed(FrontendActionAsyncResult result) {
                HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
                VdcReturnValueBase returnValueBase = result.getReturnValue();
                if (returnValueBase != null && returnValueBase.getSucceeded()) {
                    EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                    if ((Boolean) commitChanges.getEntity()) {
                        SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                    } else {
                        hostInterfaceListModel.getcurrentModel().StopProgress();
                        hostInterfaceListModel.Cancel();
                        hostInterfaceListModel.Search();
                    }
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                }
            }
        }, this);
    }
}
#end_block

#method_before
public void OnConfirmManagementDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.<NetworkInterface>Cast(getInterfaceItems()), nicName);
    ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
    Network defaultNetwork = new Network(null);
    defaultNetwork.setname(nic.getNetworkName());
    Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
    Network net = (tempVar != null) ? tempVar : defaultNetwork;
    model.StartProgress(null);
    setcurrentModel(model);
    Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                    hostInterfaceListModel.Cancel();
                    hostInterfaceListModel.Search();
                }
            } else {
                hostInterfaceListModel.getcurrentModel().StopProgress();
            }
        }
    }, this);
}
#method_after
public void OnConfirmManagementDetach() {
    HostInterfaceModel model = (HostInterfaceModel) getWindow();
    if (model.getProgress() != null) {
        return;
    }
    String nicName = (String) model.getEntity();
    VdsNetworkInterface nic = (VdsNetworkInterface) Linq.FindInterfaceByName(Linq.<NetworkInterface>Cast(getInterfaceItems()), nicName);
    ArrayList<Network> networks = DataProvider.GetClusterNetworkList(getEntity().getvds_group_id());
    Network defaultNetwork = new Network();
    defaultNetwork.setname(nic.getNetworkName());
    Network tempVar = Linq.FindNetworkByName(networks, nic.getNetworkName());
    Network net = (tempVar != null) ? tempVar : defaultNetwork;
    model.StartProgress(null);
    setcurrentModel(model);
    Frontend.RunAction(VdcActionType.DetachNetworkFromVdsInterface, new AttachNetworkToVdsParameters(getEntity().getId(), net, nic), new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            HostInterfaceListModel hostInterfaceListModel = (HostInterfaceListModel) result.getState();
            VdcReturnValueBase returnValueBase = result.getReturnValue();
            if (returnValueBase != null && returnValueBase.getSucceeded()) {
                EntityModel commitChanges = ((HostInterfaceModel) hostInterfaceListModel.getcurrentModel()).getCommitChanges();
                if ((Boolean) commitChanges.getEntity()) {
                    SaveNetworkConfig(hostInterfaceListModel.getEntity().getId(), hostInterfaceListModel);
                } else {
                    hostInterfaceListModel.getcurrentModel().StopProgress();
                    hostInterfaceListModel.Cancel();
                    hostInterfaceListModel.Search();
                }
            } else {
                hostInterfaceListModel.getcurrentModel().StopProgress();
            }
        }
    }, this);
}
#end_block

#method_before
private void showNetwork(LogicalNetworkModel networkModel) {
    contents.removeAllRows();
    Network entity = networkModel.getEntity();
    addRow(templates.titleSetupNetworkTooltip(networkModel.getName()));
    if (entity.getdescription() != null && !entity.getdescription().trim().equals("")) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(entity.getdescription()));
    }
    // Usages
    boolean isDisplay = entity.getCluster() == null ? false : entity.getCluster().getis_display();
    if (networkModel.isManagement() || isDisplay || entity.isVmNetwork()) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(constants.usageItemInfo() + ":"));
        if (networkModel.isManagement()) {
            addRow(templates.imageTextSetupNetworkUsage(mgmtNetworkImage, constants.managementItemInfo()));
        }
        if (isDisplay) {
            addRow(templates.imageTextSetupNetworkUsage(monitorImage, constants.displayItemInfo()));
        }
        if (entity.isVmNetwork()) {
            addRow(templates.imageTextSetupNetworkUsage(vmImage, constants.vmItemInfo()));
        }
        // Mtu
        if (entity.getMtu() != 0) {
            addRow(constants.mtuItemInfo(), String.valueOf(entity.getMtu()));
        }
    }
}
#method_after
private void showNetwork(LogicalNetworkModel networkModel) {
    contents.removeAllRows();
    Network entity = networkModel.getEntity();
    addRow(templates.titleSetupNetworkTooltip(networkModel.getName()));
    if (entity.getdescription() != null && !entity.getdescription().trim().equals("")) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(entity.getdescription()));
    }
    // Usages
    boolean isDisplay = entity.getCluster() == null ? false : entity.getCluster().getis_display();
    if (entity.getCluster() == null || networkModel.isManagement() || isDisplay || entity.isVmNetwork()) {
        // $NON-NLS-1$
        addRow(SafeHtmlUtils.fromString(constants.usageItemInfo() + ":"));
        if (entity.getCluster() == null) {
            addRow(templates.imageTextSetupNetworkUsage(unknownImage, constants.unknownItemInfo()));
        } else {
            if (networkModel.isManagement()) {
                addRow(templates.imageTextSetupNetworkUsage(mgmtNetworkImage, constants.managementItemInfo()));
            }
            if (isDisplay) {
                addRow(templates.imageTextSetupNetworkUsage(monitorImage, constants.displayItemInfo()));
            }
            if (entity.isVmNetwork()) {
                addRow(templates.imageTextSetupNetworkUsage(vmImage, constants.vmItemInfo()));
            }
        }
    }
    // Mtu
    if (entity.getMtu() != 0) {
        addRow(constants.mtuItemInfo(), String.valueOf(entity.getMtu()));
    }
}
#end_block

#method_before
private void AddNetworkPostData() {
    if (nics == null || networks == null) {
        return;
    }
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    ArrayList<Network> operationalNetworks = new ArrayList<Network>();
    for (Network a : networks) {
        if (a.getCluster().getStatus() == NetworkStatus.Operational) {
            operationalNetworks.add(a);
        }
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms_guide");
    model.setIsNew(true);
    model.getNetwork().setItems(operationalNetworks);
    model.getNetwork().setSelectedItem(operationalNetworks.size() > 0 ? operationalNetworks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntity().getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntity().getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    if (isActivateSupported) {
        model.getActive().setEntity(true);
    } else {
        model.getActive().setEntity(false);
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnAddNetwork", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    StopProgress();
}
#method_after
private void AddNetworkPostData() {
    if (nics == null || networks == null) {
        return;
    }
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    ArrayList<Network> operationalNetworks = new ArrayList<Network>();
    for (Network a : networks) {
        if (a.getCluster().getstatus() == NetworkStatus.Operational) {
            operationalNetworks.add(a);
        }
    }
    VmInterfaceModel model = new VmInterfaceModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().newNetworkInterfaceTitle());
    // $NON-NLS-1$
    model.setHashName("new_network_interface_vms_guide");
    model.setIsNew(true);
    model.getNetwork().setItems(operationalNetworks);
    model.getNetwork().setSelectedItem(operationalNetworks.size() > 0 ? operationalNetworks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntity().getvm_os(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntity().getvm_os()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsChangable(false);
    model.getActive().setIsChangable(isActivateSupported);
    if (isActivateSupported) {
        model.getActive().setEntity(true);
    } else {
        model.getActive().setEntity(false);
    }
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnAddNetwork", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
    StopProgress();
}
#end_block

#method_before
@Override
protected Widget getContents() {
    LogicalNetworkModel network = (LogicalNetworkModel) item;
    Image mgmtNetworkImage = new Image(network.isManagement() ? resources.mgmtNetwork() : resources.empty());
    Image vmImage = new Image(network.getEntity().isVmNetwork() ? resources.networkVm() : resources.empty());
    Image monitorImage;
    if (network.getEntity().getCluster() == null) {
        monitorImage = new Image(resources.questionMarkImage());
    } else {
        monitorImage = new Image(network.getEntity().getCluster().getis_display() ? resources.networkMonitor() : resources.empty());
    }
    Grid rowPanel = new Grid(1, 7);
    rowPanel.setCellSpacing(3);
    // $NON-NLS-1$
    rowPanel.setWidth("100%");
    // $NON-NLS-1$
    rowPanel.setHeight("100%");
    ColumnFormatter columnFormatter = rowPanel.getColumnFormatter();
    // $NON-NLS-1$
    columnFormatter.setWidth(0, "5px");
    // $NON-NLS-1$
    columnFormatter.setWidth(1, "20px");
    // $NON-NLS-1$
    columnFormatter.setWidth(2, "100%");
    if (network.isManagement()) {
        mgmtNetworkImage.setStylePrimaryName(style.networkImageBorder());
    }
    if (network.getEntity().isVmNetwork()) {
        vmImage.setStylePrimaryName(style.networkImageBorder());
    }
    if (network.getEntity().getCluster() != null) {
        if (network.getEntity().getCluster().getis_display()) {
            monitorImage.setStylePrimaryName(style.networkImageBorder());
        }
    }
    rowPanel.setWidget(0, 0, dragImage);
    ImageResource statusImage = getStatusImage();
    if (statusImage != null) {
        rowPanel.setWidget(0, 1, new Image(statusImage));
    }
    Label titleLabel = new Label(getItemTitle());
    rowPanel.setWidget(0, 2, titleLabel);
    rowPanel.setWidget(0, 3, actionButton);
    rowPanel.setWidget(0, 4, mgmtNetworkImage);
    rowPanel.setWidget(0, 5, monitorImage);
    rowPanel.setWidget(0, 6, vmImage);
    return rowPanel;
}
#method_after
@Override
protected Widget getContents() {
    LogicalNetworkModel network = (LogicalNetworkModel) item;
    Image mgmtNetworkImage;
    Image vmImage;
    Image monitorImage;
    if (network.getEntity().getCluster() == null) {
        monitorImage = new Image(resources.questionMarkImage());
        mgmtNetworkImage = new Image(resources.empty());
        vmImage = new Image(resources.empty());
    } else {
        monitorImage = new Image(network.getEntity().getCluster().getis_display() ? resources.networkMonitor() : resources.empty());
        mgmtNetworkImage = new Image(network.isManagement() ? resources.mgmtNetwork() : resources.empty());
        vmImage = new Image(network.getEntity().isVmNetwork() ? resources.networkVm() : resources.empty());
        if (network.isManagement()) {
            mgmtNetworkImage.setStylePrimaryName(style.networkImageBorder());
        }
        if (network.getEntity().isVmNetwork()) {
            vmImage.setStylePrimaryName(style.networkImageBorder());
        }
        if (network.getEntity().getCluster().getis_display()) {
            monitorImage.setStylePrimaryName(style.networkImageBorder());
        }
    }
    Grid rowPanel = new Grid(1, 7);
    rowPanel.setCellSpacing(3);
    // $NON-NLS-1$
    rowPanel.setWidth("100%");
    // $NON-NLS-1$
    rowPanel.setHeight("100%");
    ColumnFormatter columnFormatter = rowPanel.getColumnFormatter();
    // $NON-NLS-1$
    columnFormatter.setWidth(0, "5px");
    // $NON-NLS-1$
    columnFormatter.setWidth(1, "20px");
    // $NON-NLS-1$
    columnFormatter.setWidth(2, "100%");
    rowPanel.setWidget(0, 0, dragImage);
    ImageResource statusImage = getStatusImage();
    if (statusImage != null) {
        rowPanel.setWidget(0, 1, new Image(statusImage));
    }
    Label titleLabel = new Label(getItemTitle());
    rowPanel.setWidget(0, 2, titleLabel);
    rowPanel.setWidget(0, 3, actionButton);
    rowPanel.setWidget(0, 4, mgmtNetworkImage);
    rowPanel.setWidget(0, 5, monitorImage);
    rowPanel.setWidget(0, 6, vmImage);
    return rowPanel;
}
#end_block

#method_before
public void PostGetClusterNetworkList_New(ArrayList<Network> network_list) {
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getStatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    ArrayList<VmNetworkInterface> nics = Linq.<VmNetworkInterface>Cast(getItems());
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    model.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void PostGetClusterNetworkList_New(ArrayList<Network> network_list) {
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getstatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    ArrayList<VmNetworkInterface> nics = Linq.<VmNetworkInterface>Cast(getItems());
    int nicCount = nics.size();
    String newNicName = DataProvider.GetNewNicName(nics);
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    model.getNetwork().setSelectedItem(networks.size() > 0 ? networks.get(0) : null);
    model.getNicType().setItems(DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), false));
    model.getNicType().setSelectedItem(DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()));
    model.getName().setEntity(newNicName);
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
public void PostGetClusterNetworkList_Edit(ArrayList<Network> network_list) {
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    int nicCount = Linq.<VmNetworkInterface>Cast(getItems()).size();
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getStatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    Network network = null;
    for (Network a : networks) {
        if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
            network = a;
            break;
        }
    }
    model.getNetwork().setSelectedItem(network);
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#method_after
public void PostGetClusterNetworkList_Edit(ArrayList<Network> network_list) {
    VmNetworkInterface nic = (VmNetworkInterface) getSelectedItem();
    int nicCount = Linq.<VmNetworkInterface>Cast(getItems()).size();
    ArrayList<Network> networks = new ArrayList<Network>();
    for (Network a : network_list) {
        if (a.getCluster().getstatus() == NetworkStatus.Operational) {
            networks.add(a);
        }
    }
    VmInterfaceModel model = (VmInterfaceModel) getWindow();
    model.getNetwork().setItems(networks);
    Network network = null;
    for (Network a : networks) {
        if (StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) {
            network = a;
            break;
        }
    }
    model.getNetwork().setSelectedItem(network);
    Integer selectedNicType = nic.getType();
    ArrayList<VmInterfaceType> nicTypes = DataProvider.GetNicTypeList(getEntityStronglyTyped().getos(), VmInterfaceType.forValue(selectedNicType) == VmInterfaceType.rtl8139_pv);
    model.getNicType().setItems(nicTypes);
    if (selectedNicType == null || !nicTypes.contains(VmInterfaceType.forValue(selectedNicType))) {
        selectedNicType = DataProvider.GetDefaultNicType(getEntityStronglyTyped().getos()).getValue();
    }
    model.getNicType().setSelectedItem(VmInterfaceType.forValue(selectedNicType));
    model.getName().setEntity(nic.getName());
    model.getMAC().setIsAvailable(false);
    // $NON-NLS-1$
    UICommand tempVar = new UICommand("OnSave", this);
    tempVar.setTitle(ConstantsManager.getInstance().getConstants().ok());
    tempVar.setIsDefault(true);
    model.getCommands().add(tempVar);
    // $NON-NLS-1$
    UICommand tempVar2 = new UICommand("Cancel", this);
    tempVar2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    tempVar2.setIsCancel(true);
    model.getCommands().add(tempVar2);
}
#end_block

#method_before
@Override
public ImageResource getValue(Network nwk) {
    switch(nwk.getCluster().getStatus()) {
        case Operational:
            return getApplicationResources().upImage();
        case NonOperational:
            return getApplicationResources().downImage();
        default:
            return getApplicationResources().downImage();
    }
}
#method_after
@Override
public ImageResource getValue(Network nwk) {
    switch(nwk.getCluster().getstatus()) {
        case Operational:
            return getApplicationResources().upImage();
        case NonOperational:
            return getApplicationResources().downImage();
        default:
            return getApplicationResources().downImage();
    }
}
#end_block

#method_before
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(items.size() == 1);
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#method_after
private void UpdateActionAvailability() {
    List items = getSelectedItems() != null && getSelectedItem() != null ? getSelectedItems() : new ArrayList();
    getEditCommand().setIsExecutionAllowed(isEditCommandExecutionAllowed(items));
    getRemoveCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RemoveVm));
    getRunCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVm));
    getPauseCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.HibernateVm));
    getShutdownCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ShutdownVm));
    getStopCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.StopVm));
    getMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MigrateVm));
    getCancelMigrateCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.CancelMigrateVm));
    getNewTemplateCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.AddVmTemplate));
    getRunOnceCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.RunVmOnce));
    getExportCommand().setIsExecutionAllowed(items.size() > 0 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ExportVm));
    getMoveCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.MoveVm));
    getRetrieveIsoImagesCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getChangeCdCommand().setIsExecutionAllowed(items.size() == 1 && VdcActionUtils.CanExecute(items, VM.class, VdcActionType.ChangeDisk));
    getAssignTagsCommand().setIsExecutionAllowed(items.size() > 0);
    getGuideCommand().setIsExecutionAllowed(getGuideContext() != null || (getSelectedItem() != null && getSelectedItems() != null && getSelectedItems().size() == 1));
}
#end_block

#method_before
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export();
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelError")) {
        CancelError();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (command.getName().equals("closeVncInfo")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#method_after
@Override
public void ExecuteCommand(UICommand command) {
    super.ExecuteCommand(command);
    if (command == getNewServerCommand()) {
        NewServer();
    } else if (command == getNewDesktopCommand()) {
        NewDesktop();
    } else if (command == getEditCommand()) {
        Edit();
    } else if (command == getRemoveCommand()) {
        remove();
    } else if (command == getRunCommand()) {
        Run();
    } else if (command == getPauseCommand()) {
        Pause();
    } else if (command == getStopCommand()) {
        stop();
    } else if (command == getShutdownCommand()) {
        Shutdown();
    } else if (command == getMigrateCommand()) {
        Migrate();
    } else if (command == getNewTemplateCommand()) {
        NewTemplate();
    } else if (command == getRunOnceCommand()) {
        RunOnce();
    } else if (command == getExportCommand()) {
        Export(ConstantsManager.getInstance().getConstants().exportVirtualMachineTitle());
    } else if (command == getMoveCommand()) {
        Move();
    } else if (command == getGuideCommand()) {
        Guide();
    } else if (command == getRetrieveIsoImagesCommand()) {
        RetrieveIsoImages();
    } else if (command == getChangeCdCommand()) {
        ChangeCD();
    } else if (command == getAssignTagsCommand()) {
        AssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnAssignTags")) {
        OnAssignTags();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "Cancel")) {
        Cancel();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnSave")) {
        OnSave();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRemove")) {
        OnRemove();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExport")) {
        OnExport();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnExportNoTemplates")) {
        OnExportNoTemplates();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelConfirmation")) {
        CancelConfirmation();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "CancelError")) {
        CancelError();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnRunOnce")) {
        OnRunOnce();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) {
        OnNewTemplate();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnMigrate")) {
        OnMigrate();
    } else if (command == getCancelMigrateCommand()) {
        CancelMigration();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnShutdown")) {
        OnShutdown();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnStop")) {
        OnStop();
    } else if (// $NON-NLS-1$
    StringHelper.stringsEqual(command.getName(), "OnChangeCD")) {
        OnChangeCD();
    } else if (command.getName().equals("closeVncInfo")) {
        // $NON-NLS-1$
        setWindow(null);
    }
}
#end_block

#method_before
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (otp != null && !isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#method_after
@Override
protected boolean validateInputs() {
    if (!super.validateInputs()) {
        return false;
    }
    VdcQueryReturnValue returnValue = getQueryReturnValue();
    returnValue.setExceptionString("");
    try {
        String hostName = getParameters().getVdsHostName();
        if (StringUtils.isEmpty(hostName)) {
            returnValue.setExceptionString("Cannot register Host - no Hostname address specified.");
            return false;
        }
        List<VDS> vdssByUniqueId = getVdssByUniqueId();
        if (vdssByUniqueId.size() > 1) {
            returnValue.setExceptionString("Cannot register Host - unique id is ambigious.");
            return false;
        }
        if (vdssByUniqueId.size() == 1) {
            VDS vds = vdssByUniqueId.get(0);
            if (!VdsHandler.isPendingOvirt(vds)) {
                returnValue.setExceptionString(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name());
                return false;
            }
            Long otp = getParameters().getOtp();
            if (!isValidOtp(vds, otp)) {
                returnValue.setExceptionString(String.format("Invalid OTP for host %s", hostName));
                return false;
            }
        }
    } catch (RuntimeException ex) {
        log.error(ex);
        returnValue.setExceptionString(String.format("Cannot register Host - An exception has been thrown: %1$s", ex.getMessage()));
        return false;
    }
    return true;
}
#end_block

#method_before
private boolean isValidOtp(VDS vds, Long otp) {
    if (otp.longValue() == vds.getOtpValidity()) {
        Integer otpExpiration = Config.<Integer>GetValue(ConfigValues.OtpExpirationInSeconds);
        DateTime otpValidity = new DateTime(otp);
        otpValidity.AddSeconds(otpExpiration);
        if (otpValidity.before(DateTime.getUtcNow())) {
            return true;
        }
    }
    return false;
}
#method_after
private boolean isValidOtp(VDS vds, Long otp) {
    if (otp != null && otp.longValue() == vds.getOtpValidity()) {
        Integer otpExpiration = Config.<Integer>GetValue(ConfigValues.OtpExpirationInSeconds);
        DateTime otpValidity = new DateTime(otp);
        otpValidity.AddSeconds(otpExpiration);
        if (otpValidity.before(DateTime.getUtcNow())) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingStorage() throws Exception {
    // there is one specific quota and all the general ones defined on this storage domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_MASTER, NUM_QUOTAS);
}
#method_after
@Test
public void testGetRelevantQuotasExistingStorage() throws Exception {
    // there is one specific quota and all the general ones defined on this storage domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_MASTER, STORAGE_NUM_QUOTAS);
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingStorageNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_ISO, NUM_QUOTAS - 1);
}
#method_after
@Test
public void testGetRelevantQuotasExistingStorageNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this domain
    assertGetAllRelevantQuoatsForStorage(FixturesTool.STORAGE_DOAMIN_NFS_ISO, STORAGE_NUM_QUOTAS - 1);
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingVdsGroup() throws Exception {
    // there is one specific quota and all the general ones defined on this VDS Group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS, NUM_QUOTAS);
}
#method_after
@Test
public void testGetRelevantQuotasExistingVdsGroup() throws Exception {
    // there is one specific quota and all the general ones defined on this VDS Group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS, VDS_GRUOP_NUM_QUOTAS);
}
#end_block

#method_before
@Test
public void testGetRelevantQuotasExistingVdsGroupNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS_NO_SPECIFIC_QUOTAS, NUM_QUOTAS - 1);
}
#method_after
@Test
public void testGetRelevantQuotasExistingVdsGroupNoSpecificQuotas() throws Exception {
    // there are no specific quotas, but all the general quotas relate to the storage pool containing this group
    assertGetAllRelevantQuoatsForVdsGroup(FixturesTool.VDS_GROUP_RHEL6_NFS_NO_SPECIFIC_QUOTAS, VDS_GRUOP_NUM_QUOTAS - 1);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getGlusterVolume() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID);
        return false;
    }
    setVdsGroupId(getGlusterVolume().getClusterId());
    return true;
}
#method_after
@Override
protected boolean canDoAction() {
    if (getGlusterVolume() == null) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID);
        return false;
    }
    setVdsGroupId(getGlusterVolume().getClusterId());
    // super class canDoAction expects cluster id (VdsGroupId).
    if (!super.canDoAction()) {
        return false;
    }
    return true;
}
#end_block

#method_before
public VdsStaticDAO getVdsStaticDao() {
    return DbFacade.getInstance().getVdsStaticDAO();
}
#method_after
public VdsStaticDAO getVdsStaticDao() {
    return getDbFacade().getVdsStaticDAO();
}
#end_block

#method_before
public static boolean CanRunVm(VM vm, ArrayList<String> message, RunVmParams runParams, VdsSelector vdsSelector, SnapshotsValidator snapshotsValidator, VmPropertiesUtils vmPropsUtils) {
    boolean retValue = true;
    List<VmPropertiesUtils.ValidationError> validationErrors = null;
    if (vm == null) {
        retValue = false;
        if (message != null) {
            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString());
        }
    } else if (!(validationErrors = vmPropsUtils.validateVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData())).isEmpty()) {
        handleCustomPropertiesError(validationErrors, message);
        retValue = false;
    } else {
        BootSequence boot_sequence = ((runParams.getBootSequence()) != null) ? runParams.getBootSequence() : vm.getdefault_boot_sequence();
        Guid storagePoolId = vm.getstorage_pool_id();
        // Block from running a VM with no HDD when its first boot device is
        // HD
        // and no other boot devices are configured
        List<Disk> vmDisks = getPluggedDisks(vm);
        if (boot_sequence == BootSequence.C && vmDisks.size() == 0) {
            String messageStr = !vmDisks.isEmpty() ? VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_PLUGGED_DISK.toString() : VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK.toString();
            message.add(messageStr);
            retValue = false;
        } else {
            if (boot_sequence == BootSequence.CD && findActiveISODomain(storagePoolId) == null) {
                message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
                retValue = false;
            } else // custom properties allowed only from cluster 2.3
            if (!StringUtils.isEmpty(vm.getStaticData().getCustomProperties()) && !Config.<Boolean>GetValue(ConfigValues.SupportCustomProperties, vm.getvds_group_compatibility_version().getValue())) {
                message.add(VdcBllMessages.CUSTOM_VM_PROPERTIES_INVALID_VALUES_NOT_ALLOWED_IN_CURRENT_CLUSTER.toString());
                retValue = false;
            } else {
                // otherwise the vm cannot be run in vdsm
                if (boot_sequence == BootSequence.N && DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()).size() == 0) {
                    message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK.toString());
                    retValue = false;
                } else if (vmDisks.size() > 0) {
                    ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vm.getId());
                    if (!vmDuringSnapshotResult.isValid()) {
                        message.add(vmDuringSnapshotResult.getMessage().name());
                        retValue = false;
                    }
                    // if VM is not HA VM
                    if (retValue && !ImagesHandler.PerformImagesChecks(vm, message, vm.getstorage_pool_id(), Guid.Empty, !vm.getauto_startup(), true, false, false, false, false, !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), vmDisks)) {
                        retValue = false;
                    }
                    // Check if iso and floppy path exists
                    if (retValue && !vm.getauto_startup() && !validateIsoPath(findActiveISODomain(vm.getstorage_pool_id()), runParams, message)) {
                        retValue = false;
                    } else if (retValue) {
                        boolean isVmDuringInit = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsVmDuringInitiating, new IsVmDuringInitiatingVDSCommandParameters(vm.getId())).getReturnValue()).booleanValue();
                        if (vm.isStatusUp() || (vm.getstatus() == VMStatus.NotResponding) || isVmDuringInit) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING.toString());
                            }
                        } else if (vm.getstatus() == VMStatus.Paused && vm.getrun_on_vds() != null) {
                            VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vm.getrun_on_vds().toString()));
                            if (vds.getstatus() != VDSStatus.Up) {
                                retValue = false;
                                if (message != null) {
                                    message.add(VdcBllMessages.VAR__HOST_STATUS__UP.toString());
                                    message.add(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL.toString());
                                }
                            }
                        }
                        boolean isStatelessVm = shouldVmRunAsStateless(runParams, vm);
                        if (retValue && isStatelessVm && ImagesHandler.isVmInPreview(vm.getId())) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_WHILE_IN_PREVIEW.toString());
                            }
                        }
                        // if the VM itself is stateless or run once as stateless
                        if (retValue && isStatelessVm && vm.getauto_startup()) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_HA.toString());
                            }
                        }
                        retValue = retValue == false ? retValue : vdsSelector.CanFindVdsToRunOn(message, false);
                        /**
                         * only if can do action ok then check with actions matrix that status is valid for this
                         * action
                         */
                        if (retValue && !VdcActionUtils.CanExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
                            retValue = false;
                            if (message != null) {
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL.toString());
                            }
                        }
                    }
                }
            }
        }
    }
    return retValue;
}
#method_after
public static boolean CanRunVm(VM vm, ArrayList<String> message, RunVmParams runParams, VdsSelector vdsSelector, SnapshotsValidator snapshotsValidator, VmPropertiesUtils vmPropsUtils) {
    boolean retValue = true;
    List<VmPropertiesUtils.ValidationError> validationErrors = null;
    if (vm == null) {
        retValue = false;
        message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.toString());
    } else if (!(validationErrors = vmPropsUtils.validateVMProperties(vm.getvds_group_compatibility_version(), vm.getStaticData())).isEmpty()) {
        handleCustomPropertiesError(validationErrors, message);
        retValue = false;
    } else {
        BootSequence boot_sequence = ((runParams.getBootSequence()) != null) ? runParams.getBootSequence() : vm.getdefault_boot_sequence();
        Guid storagePoolId = vm.getstorage_pool_id();
        // Block from running a VM with no HDD when its first boot device is
        // HD
        // and no other boot devices are configured
        List<Disk> vmDisks = getPluggedDisks(vm);
        if (boot_sequence == BootSequence.C && vmDisks.size() == 0) {
            String messageStr = !vmDisks.isEmpty() ? VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_PLUGGED_DISK.toString() : VdcBllMessages.VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK.toString();
            message.add(messageStr);
            retValue = false;
        } else {
            if (boot_sequence == BootSequence.CD && findActiveISODomain(storagePoolId) == null) {
                message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_CD_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO.toString());
                retValue = false;
            } else // custom properties allowed only from cluster 2.3
            if (!StringUtils.isEmpty(vm.getStaticData().getCustomProperties()) && !Config.<Boolean>GetValue(ConfigValues.SupportCustomProperties, vm.getvds_group_compatibility_version().getValue())) {
                message.add(VdcBllMessages.CUSTOM_VM_PROPERTIES_INVALID_VALUES_NOT_ALLOWED_IN_CURRENT_CLUSTER.toString());
                retValue = false;
            } else {
                // otherwise the vm cannot be run in vdsm
                if (boot_sequence == BootSequence.N && DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(vm.getId()).size() == 0) {
                    message.add(VdcBllMessages.VM_CANNOT_RUN_FROM_NETWORK_WITHOUT_NETWORK.toString());
                    retValue = false;
                } else if (vmDisks.size() > 0) {
                    ValidationResult vmDuringSnapshotResult = snapshotsValidator.vmNotDuringSnapshot(vm.getId());
                    if (!vmDuringSnapshotResult.isValid()) {
                        message.add(vmDuringSnapshotResult.getMessage().name());
                        retValue = false;
                    }
                    // if VM is not HA VM
                    if (retValue && !ImagesHandler.PerformImagesChecks(vm, message, vm.getstorage_pool_id(), Guid.Empty, !vm.getauto_startup(), true, false, false, false, false, !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), !vm.getauto_startup() || !runParams.getIsInternal() && vm.getauto_startup(), vmDisks)) {
                        retValue = false;
                    }
                    // Check if iso and floppy path exists
                    if (retValue && !vm.getauto_startup() && !validateIsoPath(findActiveISODomain(vm.getstorage_pool_id()), runParams, message)) {
                        retValue = false;
                    } else if (retValue) {
                        boolean isVmDuringInit = ((Boolean) Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.IsVmDuringInitiating, new IsVmDuringInitiatingVDSCommandParameters(vm.getId())).getReturnValue()).booleanValue();
                        if (vm.isStatusUp() || (vm.getstatus() == VMStatus.NotResponding) || isVmDuringInit) {
                            retValue = false;
                            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING.toString());
                        } else if (vm.getstatus() == VMStatus.Paused && vm.getrun_on_vds() != null) {
                            VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vm.getrun_on_vds().toString()));
                            if (vds.getstatus() != VDSStatus.Up) {
                                retValue = false;
                                message.add(VdcBllMessages.VAR__HOST_STATUS__UP.toString());
                                message.add(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL.toString());
                            }
                        }
                        boolean isStatelessVm = shouldVmRunAsStateless(runParams, vm);
                        if (retValue && isStatelessVm && ImagesHandler.isVmInPreview(vm.getId())) {
                            retValue = false;
                            message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_WHILE_IN_PREVIEW.toString());
                        }
                        // if the VM itself is stateless or run once as stateless
                        if (retValue && isStatelessVm && vm.getauto_startup()) {
                            retValue = false;
                            message.add(VdcBllMessages.VM_CANNOT_RUN_STATELESS_HA.toString());
                        }
                        retValue = retValue == false ? retValue : vdsSelector.CanFindVdsToRunOn(message, false);
                        /**
                         * only if can do action ok then check with actions matrix that status is valid for this
                         * action
                         */
                        if (retValue && !VdcActionUtils.CanExecute(Arrays.asList(vm), VM.class, VdcActionType.RunVm)) {
                            retValue = false;
                            message.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL.toString());
                        }
                    }
                }
            }
        }
    }
    return retValue;
}
#end_block

#method_before
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            Class<?> actionType = null;
            String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
            try {
                actionType = Class.forName(formattedClassName);
            } catch (ClassNotFoundException cnfe) {
                log.debug("StorageHelperDirector Error:: the lookup for following class has failed: " + formattedClassName, cnfe);
            }
            // if action type not exist - operation invalid
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                _helpers.put(storageType, currentHelper);
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#method_after
private void InitializeHelpers() {
    try {
        for (StorageType storageType : StorageType.values()) {
            Class<?> actionType = null;
            String formattedClassName = String.format("%1$s.%2$s%3$s", ACTION_TYPE_PACKAGE, storageType.name(), ACTION_TYPE_CLASS);
            try {
                actionType = Class.forName(formattedClassName);
            } catch (ClassNotFoundException cnfe) {
                log.debugFormat("StorageHelperDirector Error:: the lookup for following class has failed: {0}", formattedClassName);
            }
            // if action type not exist - operation invalid
            if (actionType != null) {
                Constructor<?> info = actionType.getConstructors()[0];
                IStorageHelper currentHelper = (IStorageHelper) info.newInstance(null);
                _helpers.put(storageType, currentHelper);
            }
        }
    } catch (Exception ex) {
        log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex);
        throw new ApplicationException("JTODO missing exception", ex);
    }
}
#end_block

#method_before
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    CheckboxHeader assignAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.assignAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(manageModel)) {
                    changeIsAttached(manageModel, value);
                }
                networks.redraw();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(manageModel)) {
                    if (!manageModel.isAttached()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : networks.getVisibleItems()) {
                if (model.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addEntityModelColumn(new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).getName();
        }
    }, constants.nameNetwork());
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
            changeIsAttached(manageModel, value);
            networks.redraw();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ClusterManageNetworkPopupView.this.canEditAssign(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.assign()));
        }
    }, assignAllHeader, // $NON-NLS-1$
    "90px");
    CheckboxHeader requiredAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.requiredAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(manageModel)) {
                    manageModel.setRequired(value);
                }
                networks.redraw();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : networks.getVisibleItems()) {
                ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(manageModel)) {
                    if (!manageModel.isRequired()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : networks.getVisibleItems()) {
                if (model.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ((ClusterNetworkManageModel) model).setRequired(value);
            networks.redraw();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isRequired();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return canEditRequired(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.required()));
        }
    }, requiredAllHeader, // $NON-NLS-1$
    "110px");
    networks.addColumn(new EntityModelCheckboxColumn() {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isVmNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return false;
        }
    }, constants.vmNetwork(), // $NON-NLS-1$
    "90px");
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel manageModel = (ClusterNetworkManageModel) model;
            // remove existing display
            if (displayNetwork != null) {
                displayNetwork.setDisplayNetwork(false);
            }
            // set current display
            displayNetwork = value ? manageModel : null;
            manageModel.setDisplayNetwork(value);
            networks.redraw();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isDisplayNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }
    }, constants.displayNetwork(), // $NON-NLS-1$
    "100px");
}
#method_after
void initEntityModelCellTable(final ApplicationConstants constants, final ApplicationTemplates templates) {
    CheckboxHeader assignAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.assignAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(clusterNetworkManageModel)) {
                    changeIsAttached(clusterNetworkManageModel, value);
                }
            }
            refreshNetworksTable();
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditAssign(clusterNetworkManageModel)) {
                    if (!clusterNetworkManageModel.isAttached()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (clusterNetworkManageModel.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addEntityModelColumn(new TextColumnWithTooltip<EntityModel>() {

        @Override
        public String getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).getName();
        }
    }, constants.nameNetwork());
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
            changeIsAttached(clusterNetworkManageModel, value);
            refreshNetworksTable();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ClusterManageNetworkPopupView.this.canEditAssign(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.assign()));
        }
    }, assignAllHeader, // $NON-NLS-1$
    "90px");
    CheckboxHeader requiredAllHeader = new CheckboxHeader(templates.textForCheckBoxHeader(constants.requiredAll())) {

        @Override
        protected void selectionChanged(Boolean value) {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(clusterNetworkManageModel)) {
                    clusterNetworkManageModel.setRequired(value);
                }
                refreshNetworksTable();
            }
        }

        @Override
        public Boolean getValue() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (canEditRequired(clusterNetworkManageModel)) {
                    if (!clusterNetworkManageModel.isRequired()) {
                        return false;
                    }
                }
            }
            return true;
        }

        @Override
        public boolean isEnabled() {
            for (EntityModel model : getNetworksTableItems()) {
                ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
                if (clusterNetworkManageModel.getIsChangable()) {
                    return true;
                }
            }
            return false;
        }
    };
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ((ClusterNetworkManageModel) model).setRequired(value);
            refreshNetworksTable();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isRequired();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return canEditRequired(model);
        }

        @Override
        public void render(Context context, EntityModel object, SafeHtmlBuilder sb) {
            super.render(context, object, sb);
            sb.append(templates.textForCheckBox(constants.required()));
        }
    }, requiredAllHeader, // $NON-NLS-1$
    "110px");
    networks.addColumn(new EntityModelCheckboxColumn() {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isVmNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return false;
        }
    }, constants.vmNetwork(), // $NON-NLS-1$
    "90px");
    networks.addColumn(new EntityModelCheckboxColumn(new FieldUpdater<EntityModel, Boolean>() {

        @Override
        public void update(int index, EntityModel model, Boolean value) {
            ClusterNetworkManageModel clusterNetworkManageModel = (ClusterNetworkManageModel) model;
            // remove existing display
            if (displayNetwork != null) {
                displayNetwork.setDisplayNetwork(false);
            }
            // set current display
            displayNetwork = value ? clusterNetworkManageModel : null;
            clusterNetworkManageModel.setDisplayNetwork(value);
            refreshNetworksTable();
        }
    }) {

        @Override
        public Boolean getValue(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isDisplayNetwork();
        }

        @Override
        protected boolean canEdit(EntityModel model) {
            return ((ClusterNetworkManageModel) model).isAttached();
        }
    }, constants.displayNetwork(), // $NON-NLS-1$
    "100px");
}
#end_block

#method_before
private void changeIsAttached(ClusterNetworkManageModel manageModel, Boolean value) {
    manageModel.setAttached(value);
    if (!value && manageModel.isDisplayNetwork()) {
        manageModel.setDisplayNetwork(false);
    }
}
#method_after
private void changeIsAttached(ClusterNetworkManageModel clusterNetworkManageModel, Boolean value) {
    clusterNetworkManageModel.setAttached(value);
    if (!value && clusterNetworkManageModel.isDisplayNetwork()) {
        clusterNetworkManageModel.setDisplayNetwork(false);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean result = super.canDoAction();
    ApplicationMode appMode = ApplicationMode.from(Config.<Integer>GetValue(ConfigValues.ApplicationMode));
    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VAR__ACTION__CREATE.toString());
    if (DbFacade.getInstance().getVdsGroupDAO().getByName(getVdsGroup().getname()) != null) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
        result = false;
    } else if (appMode != ApplicationMode.GlusterOnly && !CpuFlagsManagerHandler.CheckIfCpusExist(getVdsGroup().getcpu_name(), getVdsGroup().getcompatibility_version())) {
        // cpu check not required in gluster only mode
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
        result = false;
    } else if (!VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    } else if (getVdsGroup().getstorage_pool_id() != null) {
        setStoragePoolId(getVdsGroup().getstorage_pool_id());
        if (getStoragePool() != null && getStoragePool().getcompatibility_version().compareTo(getVdsGroup().getcompatibility_version()) > 0) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL.toString());
            result = false;
        }
    }
    if (result && getVdsGroup().getstorage_pool_id() != null) {
        storage_pool storagePool = DbFacade.getInstance().getStoragePoolDAO().get(getVdsGroup().getstorage_pool_id().getValue());
        // breaking Fk_vds_groups_storage_pool_id
        if (storagePool == null) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST.toString());
            result = false;
        } else if (storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!DbFacade.getInstance().getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getstorage_pool_id().getValue()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else // selection algorithm must be set to none in localfs
            if (getVdsGroup().getselection_algorithm() != VdsSelectionAlgorithm.None) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_SELECTION_ALGORITHM_MUST_BE_SET_TO_NONE_ON_LOCAL_STORAGE.toString());
                result = false;
            }
        }
    }
    if (result) {
        result = validateMetrics();
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        }
    }
    return result;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean result = super.canDoAction();
    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VAR__ACTION__CREATE.toString());
    if (DbFacade.getInstance().getVdsGroupDAO().getByName(getVdsGroup().getname()) != null) {
        addCanDoActionMessage(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE);
        result = false;
    } else if (getVdsGroup().supportsVirtService() && !CpuFlagsManagerHandler.CheckIfCpusExist(getVdsGroup().getcpu_name(), getVdsGroup().getcompatibility_version())) {
        // cpu check required only if the cluster supports Virt service
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND);
        result = false;
    } else if (!VersionSupport.checkVersionSupported(getVdsGroup().getcompatibility_version())) {
        addCanDoActionMessage(VersionSupport.getUnsupportedVersionMessage());
        result = false;
    } else if (getVdsGroup().getstorage_pool_id() != null) {
        setStoragePoolId(getVdsGroup().getstorage_pool_id());
        if (getStoragePool() != null && getStoragePool().getcompatibility_version().compareTo(getVdsGroup().getcompatibility_version()) > 0) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL.toString());
            result = false;
        }
    }
    if (result && getVdsGroup().getstorage_pool_id() != null) {
        storage_pool storagePool = DbFacade.getInstance().getStoragePoolDAO().get(getVdsGroup().getstorage_pool_id().getValue());
        // breaking Fk_vds_groups_storage_pool_id
        if (storagePool == null) {
            getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST.toString());
            result = false;
        } else if (storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
            // we allow only one cluster in localfs data center
            if (!DbFacade.getInstance().getVdsGroupDAO().getAllForStoragePool(getVdsGroup().getstorage_pool_id().getValue()).isEmpty()) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE.toString());
                result = false;
            } else // selection algorithm must be set to none in localfs
            if (getVdsGroup().getselection_algorithm() != VdsSelectionAlgorithm.None) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VDS_GROUP_SELECTION_ALGORITHM_MUST_BE_SET_TO_NONE_ON_LOCAL_STORAGE.toString());
                result = false;
            }
        }
    }
    if (result) {
        result = validateMetrics();
    }
    if (result) {
        if (!(getVdsGroup().supportsGlusterService() || getVdsGroup().supportsVirtService())) {
            addCanDoActionMessage(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED);
            result = false;
        }
    }
    return result;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    return updateBrickServerNames(getParameters().getBricks(), true);
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT);
        }
    } else if (getGlusterVolume().getVolumeType() == GlusterVolumeType.STRIPE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE) {
        if (getParameters().getStripeCount() > getGlusterVolume().getStripeCount() + 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getStripeCount() < getGlusterVolume().getStripeCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT);
        }
    }
    return updateBrickServerNames(getParameters().getBricks(), true);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    if (getVdsIdRef() != null && CanBeRemoved(getVdsId())) {
        Guid vdsGroupId = getVds().getvds_group_id();
        glusterHostRemove();
        RemoveVdsStatisticsFromDb();
        RemoveVdsDynamicFromDb();
        RemoveVdsStaticFromDb();
        RemoveVdsFromCollection();
        setSucceeded(true);
    }
}
#method_after
@Override
protected void executeCommand() {
    if (getVdsIdRef() != null && CanBeRemoved(getVdsId())) {
        glusterHostRemove();
        RemoveVdsStatisticsFromDb();
        RemoveVdsDynamicFromDb();
        RemoveVdsStaticFromDb();
        RemoveVdsFromCollection();
        setSucceeded(true);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean returnValue = CanRemoveVds(getVdsId(), getReturnValue().getCanDoActionMessages());
    storage_pool storagePool = getStoragePoolDAO().getForVds(getParameters().getVdsId());
    if (returnValue && storagePool != null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!getStorageDomainDAO().getAllForStoragePool(storagePool.getId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_WITH_LOCAL_STORAGE);
            returnValue = false;
        }
    }
    if (isGlusterEnabled() && hasVolumeOnServer()) {
        addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
        returnValue = false;
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    return returnValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean returnValue = CanRemoveVds(getVdsId(), getReturnValue().getCanDoActionMessages());
    storage_pool storagePool = getStoragePoolDAO().getForVds(getParameters().getVdsId());
    if (returnValue && storagePool != null && storagePool.getstorage_pool_type() == StorageType.LOCALFS) {
        if (!getStorageDomainDAO().getAllForStoragePool(storagePool.getId()).isEmpty()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_WITH_LOCAL_STORAGE);
            returnValue = false;
        }
    }
    if (isGlusterEnabled()) {
        if (hasVolumeOnServer()) {
            addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_REMOVE_HOST_HAVING_GLUSTER_VOLUME);
            returnValue = false;
        }
        if (getVdsDAO().getAllForVdsGroup(getVdsGroupId()).size() > 1) {
            try {
                getClusterUtils().getUpServer(getVdsGroupId());
            } catch (VdcBLLException e) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND);
                returnValue = false;
            }
        }
    }
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST);
    return returnValue;
}
#end_block

#method_before
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAll().size() > 1 && !hasVolumeOnServer()) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((ClusterUtils.getInstance().getUpServer(getVdsGroupId())).getId(), getVds().gethost_name(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!returnValue.getSucceeded()) {
            if (!getSucceeded()) {
                VdcFault fault = new VdcFault();
                fault.setError(VdcBllErrors.GlusterAddHostFailed);
                fault.setMessage(returnValue.getVdsError().getMessage());
                getReturnValue().setFault(fault);
            }
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
        }
    }
}
#method_after
private void glusterHostRemove() {
    // UI will implement forceAction later
    // Now assume that the force option is false
    boolean forceAction = false;
    if (isGlusterEnabled() && getVdsDAO().getAllForVdsGroup(getVdsGroupId()).size() > 1 && !hasVolumeOnServer()) {
        VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostRemove, new GlusterHostRemoveVDSParameters((getClusterUtils().getUpServer(getVdsGroupId())).getId(), getVds().gethost_name(), forceAction));
        setSucceeded(returnValue.getSucceeded());
        if (!getSucceeded()) {
            getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
            getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
            errorType = AuditLogType.GLUSTER_HOST_REMOVE_FAILED;
            return;
        }
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    return validateBricks(getParameters().getBricks());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
            return false;
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
            return false;
        }
    }
    return validateBricks(getParameters().getBricks());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), bricks));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getGlusterVolume(), bricks);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#method_after
@Override
protected void executeCommand() {
    int replicaCount = (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) ? getParameters().getReplicaCount() : 0;
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterVolumeRemoveBricks, new GlusterVolumeRemoveBricksVDSParameters(getUpServer().getId(), getGlusterVolumeName(), bricks, replicaCount));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
        removeBricksFromVolumeInDb(getGlusterVolume(), bricks);
    } else {
        handleVdsError(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, returnValue.getVdsError().getMessage());
        return;
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getUpServer().getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                VdcFault fault = new VdcFault();
                fault.setError(VdcBllErrors.GlusterAddHostFailed);
                fault.setMessage(returnValue.getVdsError().getMessage());
                getReturnValue().setFault(fault);
            }
        }
    }
}
#method_after
@Override
protected void executeCommand() {
    Guid oVirtId = getParameters().getVdsForUniqueId();
    if (oVirtId != null) {
        // if fails to remove deprecated entry, we might attempt to add new oVirt host with an existing unique-id.
        if (!removeDeprecatedOvirtEntry(oVirtId)) {
            log.errorFormat("Failed to remove duplicated oVirt entry with id {0}. Abort adding oVirt Host type", oVirtId);
            throw new VdcBLLException(VdcBllErrors.HOST_ALREADY_EXISTS);
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            AddVdsStaticToDb();
            AddVdsDynamicToDb();
            AddVdsStatisticsToDb();
            getCompensationContext().stateChanged();
            return null;
        }
    });
    // set vds spm id
    if (getVdsGroup().getstorage_pool_id() != null) {
        VdsActionParameters tempVar = new VdsActionParameters(getVdsIdRef().getValue());
        tempVar.setSessionId(getParameters().getSessionId());
        tempVar.setCompensationEnabled(true);
        CompensationContext compensationContext = getCompensationContext();
        VdcReturnValueBase addVdsSpmIdReturn = Backend.getInstance().runInternalAction(VdcActionType.AddVdsSpmId, tempVar, new CommandContext(compensationContext));
        if (!addVdsSpmIdReturn.getSucceeded()) {
            setSucceeded(false);
            getReturnValue().setFault(addVdsSpmIdReturn.getFault());
            return;
        }
    }
    TransactionSupport.executeInNewTransaction(new TransactionMethod<Void>() {

        @Override
        public Void runInTransaction() {
            InitializeVds();
            AlertIfPowerManagementNotConfigured(getParameters().getVdsStaticData());
            TestVdsPowerManagementStatus(getParameters().getVdsStaticData());
            setSucceeded(true);
            setActionReturnValue(getVdsIdRef());
            // If the installation failed, we don't want to compensate for the failure since it will remove the
            // host, but instead the host should be left in an "install failed" status.
            getCompensationContext().resetCompensation();
            return null;
        }
    });
    // clients). they are installed as part of the approve process
    if (Config.<Boolean>GetValue(ConfigValues.InstallVds) && !getParameters().getAddPending()) {
        final InstallVdsParameters installVdsParameters = new InstallVdsParameters(getVdsId(), getParameters().getRootPassword());
        installVdsParameters.setOverrideFirewall(getParameters().getOverrideFirewall());
        installVdsParameters.setRebootAfterInstallation(getParameters().isRebootAfterInstallation());
        Map<String, String> values = new HashMap<String, String>();
        values.put(VdcObjectType.VDS.name().toLowerCase(), getParameters().getvds().getvds_name());
        Step installStep = ExecutionHandler.addSubStep(getExecutionContext(), getExecutionContext().getJob().getStep(StepEnum.EXECUTING), StepEnum.INSTALLING_HOST, ExecutionMessageDirector.resolveStepMessage(StepEnum.INSTALLING_HOST, values));
        final ExecutionContext installCtx = new ExecutionContext();
        installCtx.setJob(getExecutionContext().getJob());
        installCtx.setStep(installStep);
        installCtx.setMonitored(true);
        installCtx.setShouldEndJob(true);
        ThreadPoolUtil.execute(new Runnable() {

            @Override
            public void run() {
                Backend.getInstance().runInternalAction(VdcActionType.InstallVds, installVdsParameters, new CommandContext(installCtx));
            }
        });
        ExecutionHandler.setAsyncJob(getExecutionContext(), true);
    } else {
        // only on non vds installation mode.
        if (getVdsGroup().supportsGlusterService() && getAllVds(getVdsGroupId()).size() > 1) {
            String hostName = (getParameters().getvds().gethost_name().isEmpty()) ? getParameters().getvds().getManagmentIp() : getParameters().getvds().gethost_name();
            VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterHostAdd, new GlusterHostAddVDSParameters(getUpServer().getId(), hostName));
            setSucceeded(returnValue.getSucceeded());
            if (!getSucceeded()) {
                getReturnValue().getFault().setError(returnValue.getVdsError().getCode());
                getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage());
                return;
            }
        }
    }
}
#end_block

#method_before
@Override
public LUNListReturnForXmlRpc getDeviceList(int storageType) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.getDeviceList(storageType);
        LUNListReturnForXmlRpc wrapper = new LUNListReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#method_after
@Override
public LUNListReturnForXmlRpc getDeviceList(int storageType, XmlRpcStruct options) {
    try {
        Map<String, Object> xmlRpcReturnValue = vdsServer.getDeviceList(storageType, options.getInnerMap());
        LUNListReturnForXmlRpc wrapper = new LUNListReturnForXmlRpc(xmlRpcReturnValue);
        return wrapper;
    } catch (UndeclaredThrowableException ute) {
        throw new XmlRpcRunTimeException(ute);
    }
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
        }
    }
    return validateBricks(getParameters().getBricks());
}
#method_after
@Override
protected boolean canDoAction() {
    if (!super.canDoAction()) {
        return false;
    }
    if (getParameters().getBricks() == null || getParameters().getBricks().size() == 0) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED);
        return false;
    }
    if (getGlusterVolume().getBricks().size() == 1 || getGlusterVolume().getBricks().size() <= getParameters().getBricks().size()) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME);
        return false;
    }
    if (getGlusterVolume().getVolumeType() == GlusterVolumeType.REPLICATE || getGlusterVolume().getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE) {
        if (getParameters().getReplicaCount() < getGlusterVolume().getReplicaCount() - 1) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT_MORE_THAN_ONE);
            return false;
        } else if (getParameters().getReplicaCount() > getGlusterVolume().getReplicaCount()) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT);
            return false;
        }
    }
    return validateBricks(getParameters().getBricks());
}
#end_block

#method_before
private static String getOvirtIsoPrefix() {
    // (for performance), and with the reloadable configuration feature, the value of the config may change
    if (OVIRT_ISO_PREFIX == null) {
        OVIRT_ISO_PREFIX = Config.<String>GetValue(ConfigValues.OvirtIsoPrefix);
    }
    return OVIRT_ISO_PREFIX;
}
#method_after
private static String getOvirtIsoPrefix() {
    return Config.<String>GetValue(ConfigValues.OvirtIsoPrefix);
}
#end_block

#method_before
private static Pattern getIsoPattern() {
    if (isoPattern == null) {
        isoPattern = Pattern.compile(getOvirtIsoPrefix() + "-.*.iso");
    }
    return isoPattern;
}
#method_after
private static Pattern getIsoPattern() {
    String expectedPattern = getOvirtIsoPrefix() + "-.*.iso";
    if (isoPattern == null || !expectedPattern.equals(isoPattern.toString())) {
        isoPattern = Pattern.compile(expectedPattern);
    }
    return isoPattern;
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    return canRemoveAdGroup(getParameters().getAdElementId(), getReturnValue().getCanDoActionMessages());
}
#method_after
@Override
protected boolean canDoAction() {
    Guid groupId = getParameters().getAdElementId();
    List<String> reasons = getReturnValue().getCanDoActionMessages();
    boolean returnValue = true;
    if (isLastSuperUserGroup(groupId)) {
        returnValue = false;
        reasons.add(VdcBllMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString());
    }
    if (groupId.equals(MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID)) {
        returnValue = false;
        reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE.name());
    }
    return returnValue;
}
#end_block

#method_before
@SuppressWarnings("rawtypes")
public void assertExecuteQueryCommandResult(Guid requestedUser, boolean includeDiskData, boolean expectedResults) {
    mockQueryParameters(requestedUser, includeDiskData);
    // Mock the result of the DAO
    final VM expectedVM = mockVMFromDAO(requestedUser);
    final DiskImage expectedDisk = mockDisk();
    final ArrayList<DiskImage> snapshots = mockSnapshots();
    DiskImage expectedSnapshot = snapshots.get(0);
    // Mock the disks, if needed
    if (includeDiskData) {
        doAnswer(new Answer() {

            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                expectedDisk.getSnapshots().addAll(snapshots);
                expectedVM.getDiskMap().put(expectedDisk.getinternal_drive_mapping(), expectedDisk);
                expectedVM.getDiskList().add(expectedDisk);
                return null;
            }
        }).when(getQuery()).updateDisksFromDB(expectedVM);
        doNothing().when(getQuery()).fillImagesBySnapshots(expectedVM);
    }
    doNothing().when(getQuery()).updateVmGuestAgentVersion(expectedVM);
    getQuery().executeQueryCommand();
    @SuppressWarnings("unchecked")
    List<VM> actualVMs = (List<VM>) getQuery().getQueryReturnValue().getReturnValue();
    if (!expectedResults) {
        assertTrue("no VMs should have been returned", actualVMs.isEmpty());
    } else {
        assertEquals("wrong number of VMs returned", 1, actualVMs.size());
        VM actualVM = actualVMs.get(0);
        assertEquals("wrong VMs returned", expectedVM, actualVM);
        if (includeDiskData) {
            assertEquals("Wrong number of disks on VM", 1, actualVM.getDiskList().size());
            DiskImage actualDisk = actualVM.getDiskList().get(0);
            assertEquals("Wrong disk on VM", expectedDisk, actualDisk);
            assertEquals("Wrong number of snapshots", 1, actualDisk.getSnapshots().size());
            DiskImage actualSnapshot = actualDisk.getSnapshots().get(0);
            assertEquals("Wrong snapshot", expectedSnapshot, actualSnapshot);
        }
    }
}
#method_after
@SuppressWarnings("rawtypes")
public void assertExecuteQueryCommandResult(Guid requestedUser, boolean includeDiskData, boolean expectedResults) {
    mockQueryParameters(requestedUser, includeDiskData);
    // Mock the result of the DAO
    final VM expectedVM = mockVMFromDAO(requestedUser);
    final DiskImage expectedDisk = mockDisk();
    final ArrayList<DiskImage> snapshots = mockSnapshots();
    DiskImage expectedSnapshot = snapshots.get(0);
    // Mock the disks, if needed
    if (includeDiskData) {
        doAnswer(new Answer() {

            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                expectedDisk.getSnapshots().addAll(snapshots);
                expectedVM.getDiskMap().put(expectedDisk.getId(), expectedDisk);
                expectedVM.getDiskList().add(expectedDisk);
                return null;
            }
        }).when(getQuery()).updateDisksFromDB(expectedVM);
        doNothing().when(getQuery()).fillImagesBySnapshots(expectedVM);
    }
    doNothing().when(getQuery()).updateVmGuestAgentVersion(expectedVM);
    getQuery().executeQueryCommand();
    @SuppressWarnings("unchecked")
    List<VM> actualVMs = (List<VM>) getQuery().getQueryReturnValue().getReturnValue();
    if (!expectedResults) {
        assertTrue("no VMs should have been returned", actualVMs.isEmpty());
    } else {
        assertEquals("wrong number of VMs returned", 1, actualVMs.size());
        VM actualVM = actualVMs.get(0);
        assertEquals("wrong VMs returned", expectedVM, actualVM);
        if (includeDiskData) {
            assertEquals("Wrong number of disks on VM", 1, actualVM.getDiskList().size());
            DiskImage actualDisk = actualVM.getDiskList().get(0);
            assertEquals("Wrong disk on VM", expectedDisk, actualDisk);
            assertEquals("Wrong number of snapshots", 1, actualDisk.getSnapshots().size());
            DiskImage actualSnapshot = actualDisk.getSnapshots().get(0);
            assertEquals("Wrong snapshot", expectedSnapshot, actualSnapshot);
        }
    }
}
#end_block

#method_before
private static DiskImage mockDisk() {
    // Prepare the disk
    Guid diskGuid = Guid.NewGuid();
    Guid itGuid = Guid.NewGuid();
    final DiskImage expectedDisk = new DiskImage();
    expectedDisk.setImageId(diskGuid);
    expectedDisk.setit_guid(itGuid);
    expectedDisk.setInternalDriveMapping(RandomUtils.instance().nextInt());
    return expectedDisk;
}
#method_after
private static DiskImage mockDisk() {
    // Prepare the disk
    Guid diskGuid = Guid.NewGuid();
    Guid itGuid = Guid.NewGuid();
    final DiskImage expectedDisk = new DiskImage();
    expectedDisk.setImageId(diskGuid);
    expectedDisk.setit_guid(itGuid);
    return expectedDisk;
}
#end_block

#method_before
@Before
public void initializeCommand() {
    command = spy(createSpiedCommand());
    mockVds();
    when(command.getActionType()).thenReturn(getCommandActionType());
    doReturn(mock(VmNetworkInterfaceDAO.class)).when(command).getVmNetworkInterfaceDAO();
}
#method_after
@Before
public void initializeCommand() {
    command = spy(createCommand());
    mockVds();
    when(command.getActionType()).thenReturn(getCommandActionType());
    doReturn(mock(VmNetworkInterfaceDAO.class)).when(command).getVmNetworkInterfaceDAO();
}
#end_block

#method_before
private void initListBoxEditors() {
    serverEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).getvds_name();
        }
    });
}
#method_after
private void initListBoxEditors() {
    serverEditor = new ListModelListBoxEditor<Object>(new NullSafeRenderer<Object>() {

        @Override
        public String renderNullSafe(Object object) {
            return ((VDS) object).gethost_name();
        }
    });
}
#end_block

#method_before
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType().name());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#method_after
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#end_block

#method_before
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.getvds_name());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.StartProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#method_after
private void onReplaceBrick() {
    ReplaceBrickModel replaceBrickModel = (ReplaceBrickModel) getWindow();
    if (replaceBrickModel == null) {
        return;
    }
    if (!replaceBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    GlusterBrickEntity existingBrick = (GlusterBrickEntity) getSelectedItem();
    if (existingBrick == null) {
        return;
    }
    VDS server = (VDS) replaceBrickModel.getServers().getSelectedItem();
    GlusterBrickEntity newBrick = new GlusterBrickEntity();
    newBrick.setVolumeId(volumeEntity.getId());
    newBrick.setServerId(server.getId());
    newBrick.setServerName(server.gethost_name());
    newBrick.setBrickDirectory((String) replaceBrickModel.getBrickDirectory().getEntity());
    replaceBrickModel.StartProgress(null);
    GlusterVolumeReplaceBrickActionParameters parameter = new GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), GlusterTaskOperation.START, existingBrick, newBrick, false);
    Frontend.RunAction(VdcActionType.ReplaceGlusterVolumeBrick, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            ReplaceBrickModel localModel = (ReplaceBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, replaceBrickModel);
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(DataCenterNetworkPopupPresenterWidget.class, DataCenterNetworkPopupPresenterWidget.ViewDef.class, DataCenterNetworkPopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Login section
    bindPresenter(LoginSectionPresenter.class, LoginSectionPresenter.ViewDef.class, LoginSectionView.class, LoginSectionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(LoginPopupPresenterWidget.class, LoginPopupPresenterWidget.ViewDef.class, LoginPopupView.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindSingletonPresenterWidget(SearchPanelPresenterWidget.class, SearchPanelPresenterWidget.ViewDef.class, SearchPanelView.class);
    bindSingletonPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindSingletonPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    // Main section: main tabs
    bindPresenter(MainTabPanelPresenter.class, MainTabPanelPresenter.ViewDef.class, MainTabPanelView.class, MainTabPanelPresenter.ProxyDef.class);
    bindPresenter(MainTabDataCenterPresenter.class, MainTabDataCenterPresenter.ViewDef.class, MainTabDataCenterView.class, MainTabDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainTabClusterPresenter.class, MainTabClusterPresenter.ViewDef.class, MainTabClusterView.class, MainTabClusterPresenter.ProxyDef.class);
    bindPresenter(MainTabHostPresenter.class, MainTabHostPresenter.ViewDef.class, MainTabHostView.class, MainTabHostPresenter.ProxyDef.class);
    bindPresenter(MainTabStoragePresenter.class, MainTabStoragePresenter.ViewDef.class, MainTabStorageView.class, MainTabStoragePresenter.ProxyDef.class);
    bindPresenter(MainTabVirtualMachinePresenter.class, MainTabVirtualMachinePresenter.ViewDef.class, MainTabVirtualMachineView.class, MainTabVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainTabPoolPresenter.class, MainTabPoolPresenter.ViewDef.class, MainTabPoolView.class, MainTabPoolPresenter.ProxyDef.class);
    bindPresenter(MainTabTemplatePresenter.class, MainTabTemplatePresenter.ViewDef.class, MainTabTemplateView.class, MainTabTemplatePresenter.ProxyDef.class);
    bindPresenter(MainTabUserPresenter.class, MainTabUserPresenter.ViewDef.class, MainTabUserView.class, MainTabUserPresenter.ProxyDef.class);
    bindPresenter(MainTabEventPresenter.class, MainTabEventPresenter.ViewDef.class, MainTabEventView.class, MainTabEventPresenter.ProxyDef.class);
    bindPresenter(MainTabReportsPresenter.class, MainTabReportsPresenter.ViewDef.class, MainTabReportsView.class, MainTabReportsPresenter.ProxyDef.class);
    bindPresenter(MainTabQuotaPresenter.class, MainTabQuotaPresenter.ViewDef.class, MainTabQuotaView.class, MainTabQuotaPresenter.ProxyDef.class);
    bindPresenter(MainTabVolumePresenter.class, MainTabVolumePresenter.ViewDef.class, MainTabVolumeView.class, MainTabVolumePresenter.ProxyDef.class);
    bindPresenter(MainTabDiskPresenter.class, MainTabDiskPresenter.ViewDef.class, MainTabDiskView.class, MainTabDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGeneralPresenter.class, SubTabHostGeneralPresenter.ViewDef.class, SubTabHostGeneralView.class, SubTabHostGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(DataCenterNetworkPopupPresenterWidget.class, DataCenterNetworkPopupPresenterWidget.ViewDef.class, DataCenterNetworkPopupView.class);
    // Cluster
    bindPresenterWidget(ClusterNetworkPopupPresenterWidget.class, ClusterNetworkPopupPresenterWidget.ViewDef.class, ClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(HostInterfacePopupPresenterWidget.class, HostInterfacePopupPresenterWidget.ViewDef.class, HostInterfacePopupView.class);
    bindPresenterWidget(HostManagementPopupPresenterWidget.class, HostManagementPopupPresenterWidget.ViewDef.class, HostManagementPopupView.class);
    bindPresenterWidget(HostBondPopupPresenterWidget.class, HostBondPopupPresenterWidget.ViewDef.class, HostBondPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(DetachConfirmationPopupPresenterWidget.class, DetachConfirmationPopupPresenterWidget.ViewDef.class, DetachConfirmationPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmPopupPresenterWidget.class, ImportVmPopupPresenterWidget.ViewDef.class, ImportVmPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(VmDesktopNewPopupPresenterWidget.class, VmDesktopNewPopupPresenterWidget.ViewDef.class, VmDesktopNewPopupView.class);
    bindPresenterWidget(VmServerNewPopupPresenterWidget.class, VmServerNewPopupPresenterWidget.ViewDef.class, VmServerNewPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateNewPresenterWidget.class, TemplateNewPresenterWidget.ViewDef.class, TemplateNewPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Reports
    bindPresenterWidget(ReportPresenterWidget.class, ReportPresenterWidget.ViewDef.class, ReportView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
}
#end_block

#method_before
void initTable(ApplicationConstants constants) {
    TextColumnWithTooltip<GlusterBrickEntity> serverColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getServerName();
        }
    };
    getTable().addColumn(serverColumn, constants.serverVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> directoryColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getBrickDirectory();
        }
    };
    getTable().addColumn(directoryColumn, constants.brickDirectoryVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> freeSpaceColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            // $NON-NLS-1$
            return "???";
        }
    };
    getTable().addColumn(freeSpaceColumn, constants.freeSpaceGBVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> totalSpaceColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            // $NON-NLS-1$
            return "???";
        }
    };
    getTable().addColumn(totalSpaceColumn, constants.totalSpaceGBVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> statusColumn = new EnumColumn<GlusterBrickEntity, GlusterBrickStatus>() {

        @Override
        protected GlusterBrickStatus getRawValue(GlusterBrickEntity object) {
            return object.getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusBrick());
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.addBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getAddBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.removeBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.replaceBrickBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getReplaceBrickCommand();
        }
    });
}
#method_after
void initTable(ApplicationConstants constants) {
    TextColumnWithTooltip<GlusterBrickEntity> serverColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getServerName();
        }
    };
    getTable().addColumn(serverColumn, constants.serverVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> directoryColumn = new TextColumnWithTooltip<GlusterBrickEntity>() {

        @Override
        public String getValue(GlusterBrickEntity brick) {
            return brick.getBrickDirectory();
        }
    };
    getTable().addColumn(directoryColumn, constants.brickDirectoryVolumeBrick());
    TextColumnWithTooltip<GlusterBrickEntity> statusColumn = new EnumColumn<GlusterBrickEntity, GlusterBrickStatus>() {

        @Override
        protected GlusterBrickStatus getRawValue(GlusterBrickEntity object) {
            return object.getStatus();
        }
    };
    getTable().addColumn(statusColumn, constants.statusBrick());
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.addBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getAddBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.removeBricksBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getRemoveBricksCommand();
        }
    });
    getTable().addActionButton(new WebAdminButtonDefinition<GlusterBrickEntity>(constants.replaceBrickBrick()) {

        @Override
        protected UICommand resolveCommand() {
            return getDetailModel().getReplaceBrickCommand();
        }
    });
}
#end_block

#method_before
private void ExecuteQuery(VM vm) {
    AsyncQuery _asyncQuery0 = new AsyncQuery();
    _asyncQuery0.setModel(this);
    _asyncQuery0.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model0, Object result0) {
            SpiceConsoleModel thisSpiceConsoleModel = (SpiceConsoleModel) model0;
            VM thisVm = thisSpiceConsoleModel.getEntity();
            storage_domains isoDomain = null;
            if (result0 != null) {
                isoDomain = (storage_domains) result0;
            }
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            queryTypeList.add(VdcQueryType.GetVdsByVdsId);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetVdsCertificateSubjectByVdsId);
            queryTypeList.add(VdcQueryType.GetCACertificate);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SSLEnabled));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.CipherSuite));
            GetConfigurationValueParameters spiceSecureChannelParams = new GetConfigurationValueParameters(ConfigurationValues.SpiceSecureChannels);
            spiceSecureChannelParams.setVersion(thisVm.getvds_group_compatibility_version().toString());
            parametersList.add(spiceSecureChannelParams);
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.EnableSpiceRootCertificateValidation));
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new VdcQueryParametersBase());
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceToggleFullScreenKeys));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceReleaseCursorKeys));
            if (isoDomain != null) {
                queryTypeList.add(VdcQueryType.GetAllIsoImagesList);
                GetAllIsoImagesListParameters getIsoPamams = new GetAllIsoImagesListParameters();
                getIsoPamams.setStorageDomainId(isoDomain.getId());
                getIsoPamams.setForceRefresh(false);
                parametersList.add(getIsoPamams);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, thisSpiceConsoleModel);
        }
    };
    AsyncDataProvider.GetIsoDomainByDataCenterId(_asyncQuery0, vm.getstorage_pool_id());
}
#method_after
private void ExecuteQuery(final VM vm) {
    AsyncQuery _asyncQuery0 = new AsyncQuery();
    _asyncQuery0.setModel(this);
    _asyncQuery0.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model0, Object result0) {
            SpiceConsoleModel thisSpiceConsoleModel = (SpiceConsoleModel) model0;
            VM thisVm = thisSpiceConsoleModel.getEntity();
            storage_domains isoDomain = null;
            if (result0 != null) {
                isoDomain = (storage_domains) result0;
            }
            ArrayList<VdcQueryType> queryTypeList = new ArrayList<VdcQueryType>();
            queryTypeList.add(VdcQueryType.GetVdsByVdsId);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetVdsCertificateSubjectByVdsId);
            queryTypeList.add(VdcQueryType.GetCACertificate);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            queryTypeList.add(VdcQueryType.GetConfigurationValue);
            ArrayList<VdcQueryParametersBase> parametersList = new ArrayList<VdcQueryParametersBase>();
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SSLEnabled));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.CipherSuite));
            GetConfigurationValueParameters spiceSecureChannelParams = new GetConfigurationValueParameters(ConfigurationValues.SpiceSecureChannels);
            spiceSecureChannelParams.setVersion(thisVm.getvds_group_compatibility_version().toString());
            parametersList.add(spiceSecureChannelParams);
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.EnableSpiceRootCertificateValidation));
            parametersList.add(new GetVdsByVdsIdParameters(thisVm.getrun_on_vds().getValue()));
            parametersList.add(new VdcQueryParametersBase());
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceToggleFullScreenKeys));
            parametersList.add(new GetConfigurationValueParameters(ConfigurationValues.SpiceReleaseCursorKeys));
            if (isoDomain != null) {
                queryTypeList.add(VdcQueryType.GetAllIsoImagesListByStoragePoolId);
                GetAllImagesListByStoragePoolIdParameters getIsoPamams = new GetAllImagesListByStoragePoolIdParameters(vm.getstorage_pool_id());
                parametersList.add(getIsoPamams);
            }
            Frontend.RunMultipleQueries(queryTypeList, parametersList, thisSpiceConsoleModel);
        }
    };
    AsyncDataProvider.GetIsoDomainByDataCenterId(_asyncQuery0, vm.getstorage_pool_id());
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new ReplaceGlusterVolumeBrickActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getAction(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
    if (returnValue.getSucceeded()) {
        replaceVolumeBrickInDb(getParameters().getExistingBrick(), getParameters().getNewBrick());
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ReplaceGlusterVolumeBrick, new ReplaceGlusterVolumeBrickActionVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().getAction(), getParameters().getExistingBrick().getQualifiedName(), getParameters().getNewBrick().getQualifiedName(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
}
#end_block

#method_before
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) {
    VdsStatic server = getVdsStaticDao().get(brick.getServerId());
    if ((server == null || !server.getvds_group_id().equals(getVdsGroupId())) && addCanDoActionMessage) {
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID);
        return false;
    }
    brick.setServerName(server.gethost_name());
    return true;
}
#method_after
protected boolean updateBrickServerName(GlusterBrickEntity brick, boolean addCanDoActionMessage) {
    VdsStatic server = getVdsStaticDao().get(brick.getServerId());
    if ((server == null || !server.getvds_group_id().equals(getVdsGroupId()))) {
        if (addCanDoActionMessage) {
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID);
        }
        return false;
    }
    brick.setServerName(server.gethost_name());
    return true;
}
#end_block

#method_before
private boolean isValidVolumeBrick(GlusterBrickEntity volumeBrick) {
    for (GlusterBrickEntity brick : getGlusterVolume().getBricks()) {
        if (brick.equals(volumeBrick)) {
            return true;
        }
    }
    return false;
}
#method_after
private boolean isValidVolumeBrick(GlusterBrickEntity volumeBrick) {
    for (GlusterBrickEntity brick : getGlusterVolume().getBricks()) {
        if (brick.getQualifiedName().equals(volumeBrick.getQualifiedName())) {
            return true;
        }
    }
    return false;
}
#end_block

#method_before
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    checkSeverities();
}
#method_after
private static void initSeverities() {
    initDefaultSeverities();
    initNetworkSeverities();
    initImportExportSeverities();
    initEngineSeverities();
    initVMsPoolSeverities();
    initBookmarkSeverities();
    initVMSeverities();
    initQuotaSeverities();
    initTagSeverities();
    initClusterSeverities();
    initMLASeverities();
    initHostSeverities();
    initStorageSeverities();
    initTaskSeverities();
    initGlusterVolumeSeverities();
    initDwhSeverities();
    initConfigSeverities();
    checkSeverities();
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_HOST_REMOVE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
public static void GetHostList(AsyncQuery aQuery) {
    aQuery.converterCallback = new IAsyncConverter() {

        @Override
        public Object Convert(Object source, AsyncQuery _asyncQuery) {
            if (source != null) {
                ArrayList<VDS> list = Linq.<VDS>Cast((Iterable) source);
                return list;
            }
            return new ArrayList<VDS>();
        }
    };
    // $NON-NLS-1$
    SearchParameters searchParameters = new SearchParameters("Host:", SearchType.VDS);
    searchParameters.setMaxCount(9999);
    Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery);
}
#method_after
public static void GetHostList(AsyncQuery aQuery) {
    GetHostListByStatus(aQuery, null);
}
#end_block

#method_before
@Override
public Response start(Action action) {
    return doAction(VdcActionType.StartGlusterVolume, new GlusterVolumeActionParameters(guid, action.isForce() == null ? false : action.isForce()), action);
}
#method_after
@Override
public Response start(Action action) {
    return doAction(VdcActionType.StartGlusterVolume, new GlusterVolumeActionParameters(guid, action.isSetForce() ? action.isForce() : false), action);
}
#end_block

#method_before
@Override
public Response stop(Action action) {
    return doAction(VdcActionType.StopGlusterVolume, new GlusterVolumeActionParameters(guid, action.isForce() == null ? false : action.isForce()), action);
}
#method_after
@Override
public Response stop(Action action) {
    return doAction(VdcActionType.StopGlusterVolume, new GlusterVolumeActionParameters(guid, action.isSetForce() ? action.isForce() : false), action);
}
#end_block

#method_before
@Override
public Response rebalance(Action action) {
    boolean fixLayoutOnly = (action.isFixLayout() == null ? false : action.isFixLayout());
    boolean force = (action.isForce() == null ? false : action.isForce());
    return doAction(VdcActionType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceParameters(guid, fixLayoutOnly, force), action);
}
#method_after
@Override
public Response rebalance(Action action) {
    boolean fixLayoutOnly = (action.isSetFixLayout() ? action.isFixLayout() : false);
    boolean force = (action.isSetForce() ? action.isForce() : false);
    return doAction(VdcActionType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceParameters(guid, fixLayoutOnly, force), action);
}
#end_block

#method_before
@Override
public Response resetOption(Action action) {
    Option option = action.getOption();
    validateParameters(option, "name");
    return resetOption(action, option.getName(), action.isForce() == null ? false : action.isForce());
}
#method_after
@Override
public Response resetOption(Action action) {
    Option option = action.getOption();
    validateParameters(option, "name");
    return resetOption(action, option.getName(), action.isSetForce() ? action.isForce() : false);
}
#end_block

#method_before
@Override
public Response resetAllOptions(Action action) {
    return resetOption(action, null, action.isForce() == null ? false : action.isForce());
}
#method_after
@Override
public Response resetAllOptions(Action action) {
    return resetOption(action, null, action.isSetForce() ? action.isForce() : false);
}
#end_block

#method_before
@Test
public void testGetAllAttachableDisksByPoolWithNoPermissionsFilterDisabled() {
    List<Disk> result = dao.getAllAttachableDisksByPoolId(null, PRIVILEGED_USER_ID, false);
    assertFullGetAllAttachableDisksByPoolId(result);
}
#method_after
@Test
public void testGetAllAttachableDisksByPoolWithNoPermissionsFilterDisabled() {
    List<Disk> result = dao.getAllAttachableDisksByPoolId(null, UNPRIVILEGED_USER_ID, false);
    assertFullGetAllAttachableDisksByPoolId(result);
}
#end_block

#method_before
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REPLACE_BRICK_START_FAILED, AuditLogSeverity.ERROR);
}
#method_after
private static void initGlusterVolumeSeverities() {
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_CREATE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_DELETE_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_REBALANCE_START_FAILED, AuditLogSeverity.ERROR);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK, AuditLogSeverity.NORMAL);
    mSeverities.put(AuditLogType.GLUSTER_VOLUME_ADD_BRICK_FAILED, AuditLogSeverity.ERROR);
}
#end_block

#method_before
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeReplaceBrickStartFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#method_after
@Override
protected void ProceedProxyReturnValue() {
    VdcBllErrors returnStatus = GetReturnValueFromStatus(getReturnStatus());
    switch(returnStatus) {
        case GlusterVolumeCreateFailed:
        case GlusterVolumeStartFailed:
        case GlusterVolumeStopFailed:
        case GlusterVolumeSetOptionFailed:
        case GlusterVolumeResetOptionsFailed:
        case GlusterVolumeRebalanceStartFailed:
        case GlusterVolumeDeleteFailed:
        case GlusterVolumeRemoveBricksFailed:
        case GlusterVolumeReplaceBrickStartFailed:
            // Capture error from gluster command and record failure
            getVDSReturnValue().setVdsError(new VDSError(returnStatus, getReturnStatus().mMessage));
            getVDSReturnValue().setSucceeded(false);
            break;
        default:
            super.ProceedProxyReturnValue();
            break;
    }
}
#end_block

#method_before
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__START);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME_REBALANCE);
}
#method_after
@Override
protected void setActionMessageParameters() {
    addCanDoActionMessage(VdcBllMessages.VAR__ACTION__START);
    addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME);
}
#end_block

#method_before
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().isFixLayoutOnly(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
    if (getSucceeded()) {
    // addToTaskListInDb(getVdsGroupId(), getGlusterVolumeName(), getParameters().isForceAction());
    }
}
#method_after
@Override
protected void executeCommand() {
    VDSReturnValue returnValue = runVdsCommand(VDSCommandType.StartRebalanceGlusterVolume, new GlusterVolumeRebalanceVDSParameters(getUpServer().getId(), getGlusterVolumeName(), getParameters().isFixLayoutOnly(), getParameters().isForceAction()));
    setSucceeded(returnValue.getSucceeded());
}
#end_block

#method_before
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#method_after
private void addBricks() {
    if (getWindow() != null) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    VolumeBrickModel volumeBrickModel = new VolumeBrickModel();
    volumeBrickModel.getReplicaCount().setEntity(volumeEntity.getReplicaCount());
    volumeBrickModel.getReplicaCount().setIsChangable(true);
    volumeBrickModel.getReplicaCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_REPLICATE);
    volumeBrickModel.getStripeCount().setEntity(volumeEntity.getStripeCount());
    volumeBrickModel.getStripeCount().setIsChangable(true);
    volumeBrickModel.getStripeCount().setIsAvailable(volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || volumeEntity.getVolumeType() == GlusterVolumeType.DISTRIBUTED_STRIPE);
    setWindow(volumeBrickModel);
    volumeBrickModel.setTitle(ConstantsManager.getInstance().getConstants().addBricksVolume());
    // $NON-NLS-1$
    volumeBrickModel.setHashName("add_bricks");
    volumeBrickModel.getVolumeType().setEntity(volumeEntity.getVolumeType().name());
    AsyncQuery _asyncQuery = new AsyncQuery();
    _asyncQuery.setModel(volumeBrickModel);
    _asyncQuery.asyncCallback = new INewAsyncCallback() {

        @Override
        public void OnSuccess(Object model, Object result) {
            VDSGroup cluster = (VDSGroup) result;
            AsyncQuery _asyncQueryInner = new AsyncQuery();
            _asyncQueryInner.setModel(model);
            _asyncQueryInner.asyncCallback = new INewAsyncCallback() {

                @Override
                public void OnSuccess(Object model, Object result) {
                    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) model;
                    ArrayList<VDS> hostList = (ArrayList<VDS>) result;
                    volumeBrickModel.getServers().setItems(hostList);
                }
            };
            AsyncDataProvider.GetHostListByCluster(_asyncQueryInner, cluster.getname());
        }
    };
    AsyncDataProvider.GetClusterById(_asyncQuery, volumeEntity.getClusterId());
    // TODO: fetch the mount points to display
    volumeBrickModel.getBricks().setItems(new ArrayList<EntityModel>());
    // $NON-NLS-1$
    UICommand command = new UICommand("Ok", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
    // $NON-NLS-1$
    command = new UICommand("Cancel", this);
    command.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command.setIsDefault(true);
    volumeBrickModel.getCommands().add(command);
}
#end_block

#method_before
private void onAddBricks() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    // TODO: add the code to do the action (which is currently not available)
    setWindow(null);
}
#method_after
private void onAddBricks() {
    VolumeBrickModel volumeBrickModel = (VolumeBrickModel) getWindow();
    if (volumeBrickModel == null) {
        return;
    }
    if (!volumeBrickModel.validate()) {
        return;
    }
    GlusterVolumeEntity volumeEntity = (GlusterVolumeEntity) getEntity();
    if (volumeEntity == null) {
        return;
    }
    ArrayList<GlusterBrickEntity> brickList = new ArrayList<GlusterBrickEntity>();
    for (Object model : volumeBrickModel.getBricks().getItems()) {
        GlusterBrickEntity brickEntity = (GlusterBrickEntity) ((EntityModel) model).getEntity();
        brickEntity.setVolumeId(volumeEntity.getId());
        brickList.add(brickEntity);
    }
    volumeBrickModel.setMessage(null);
    if (brickList.size() == 0) {
        volumeBrickModel.setMessage(ConstantsManager.getInstance().getConstants().emptyAddBricksMsg());
        return;
    }
    if (!VolumeBrickModel.validateBrickCount(volumeEntity.getVolumeType(), volumeEntity.getBricks().size() + brickList.size(), volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue())) {
        volumeBrickModel.setMessage(VolumeBrickModel.getValidationFailedMsg(volumeEntity.getVolumeType()));
        return;
    }
    volumeBrickModel.StartProgress(null);
    GlusterVolumeBricksActionParameters parameter = new GlusterVolumeBricksActionParameters(volumeEntity.getId(), brickList, volumeBrickModel.getReplicaCountValue(), volumeBrickModel.getStripeCountValue());
    Frontend.RunAction(VdcActionType.AddBricksToGlusterVolume, parameter, new IFrontendActionAsyncCallback() {

        @Override
        public void Executed(FrontendActionAsyncResult result) {
            VolumeBrickModel localModel = (VolumeBrickModel) result.getState();
            localModel.StopProgress();
            setWindow(null);
        }
    }, volumeBrickModel);
}
#end_block

#method_before
private void removeBricks() {
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_bricks");
    model.setMessage(ConstantsManager.getInstance().getConstants().removeBricksMessage());
    if (getSelectedItems() == null) {
        return;
    }
    java.util.ArrayList<String> list = new java.util.ArrayList<String>();
    for (GlusterBrickEntity item : Linq.<GlusterBrickEntity>Cast(getSelectedItems())) {
        list.add(item.getQualifiedName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand command1 = new UICommand("OnRemove", this);
    command1.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command1.setIsDefault(true);
    model.getCommands().add(command1);
    // $NON-NLS-1$
    UICommand command2 = new UICommand("Cancel", this);
    command2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command2.setIsCancel(true);
    model.getCommands().add(command2);
}
#method_after
private void removeBricks() {
    if (getSelectedItems() == null || getSelectedItems().isEmpty()) {
        return;
    }
    if (getWindow() != null) {
        return;
    }
    ConfirmationModel model = new ConfirmationModel();
    setWindow(model);
    model.setTitle(ConstantsManager.getInstance().getConstants().removeBricksTitle());
    // $NON-NLS-1$
    model.setHashName("remove_bricks");
    model.setMessage(ConstantsManager.getInstance().getConstants().removeBricksMessage());
    java.util.ArrayList<String> list = new java.util.ArrayList<String>();
    for (GlusterBrickEntity item : Linq.<GlusterBrickEntity>Cast(getSelectedItems())) {
        list.add(item.getQualifiedName());
    }
    model.setItems(list);
    // $NON-NLS-1$
    UICommand command1 = new UICommand("OnRemove", this);
    command1.setTitle(ConstantsManager.getInstance().getConstants().ok());
    command1.setIsDefault(true);
    model.getCommands().add(command1);
    // $NON-NLS-1$
    UICommand command2 = new UICommand("Cancel", this);
    command2.setTitle(ConstantsManager.getInstance().getConstants().cancel());
    command2.setIsCancel(true);
    model.getCommands().add(command2);
}
#end_block

#method_before
@Override
protected boolean canDoAction() {
    boolean retValue = false;
    List<ValidationError> validationErrors = null;
    String vmName = getParameters().getVm().getvm_name();
    if (vmName == null || vmName.isEmpty()) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    } else {
        // check that VM name is not too long
        boolean vmNameValidLength = isVmNameValidLength(getParameters().getVm());
        if (!vmNameValidLength) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        } else if (getVm().getStaticData() != null) {
            VM vm = DbFacade.getInstance().getVmDAO().get(getVm().getStaticData().getId());
            // Checking if a desktop with same name already exists
            VmStatic vmStaticDataFromParams = getParameters().getVmStaticData();
            boolean exists = (Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(vmStaticDataFromParams.getvm_name())).getReturnValue();
            if (exists && (!StringHelper.EqOp(vm.getvm_name(), vmStaticDataFromParams.getvm_name()))) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST);
            } else if (!(validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(getVdsVersion(), vmStaticDataFromParams)).isEmpty()) {
                handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
            } else if (vmStaticDataFromParams.getauto_startup() && vmStaticDataFromParams.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString());
            } else if (VmHandler.isMemorySizeLegal(vmStaticDataFromParams.getos(), vmStaticDataFromParams.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
                if (StringHelper.EqOp(vmStaticDataFromParams.getvm_name(), "")) {
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_NAME_CANNOT_BE_EMPTY.toString());
                } else if (vm != null) {
                    retValue = areUpdatedFieldsLegal(vm, vmStaticDataFromParams);
                    if (!retValue) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
                    } else if (!getVm().getStaticData().getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
                        retValue = false;
                    }
                    if (vmStaticDataFromParams.getdedicated_vm_for_vds() != null) {
                        VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vmStaticDataFromParams.getdedicated_vm_for_vds().toString()));
                        // if vds doesnt exist or not the same cluster
                        if (vds == null || !vds.getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_DEFAULT_VDS_NOT_VALID);
                            retValue = false;
                        }
                    }
                    // Check if number of monitors passed is legal
                    if (!VmHandler.isNumOfMonitorsLegal(vmStaticDataFromParams.getdefault_display_type(), vmStaticDataFromParams.getnum_of_monitors(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (vm.getnum_of_monitors() < vmStaticDataFromParams.getnum_of_monitors()) {
                        List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmId());
                        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getVmId());
                        retValue = retValue && CheckPCIAndIDELimit(vmStaticDataFromParams.getnum_of_monitors(), interfaces, allDisks, getReturnValue().getCanDoActionMessages());
                    }
                    if (!VmTemplateCommand.IsVmPriorityValueLegal(vmStaticDataFromParams.getpriority(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (retValue && vm.getVmPoolId() != null && vmStaticDataFromParams.getis_stateless()) {
                        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
                        retValue = false;
                    }
                }
            }
            if (retValue) {
                retValue = AddVmCommand.CheckCpuSockets(vmStaticDataFromParams.getnum_of_sockets(), vmStaticDataFromParams.getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
            }
            // Check id dedicated host is same as VM cluster
            if (retValue) {
                retValue = isDedicatedVdsOnSameCluster(getParameters().getVmStaticData());
            }
            // check for Vm Payload
            if (retValue && getParameters().getVmPayload() != null) {
                retValue = checkPayload(getParameters().getVmPayload(), vmStaticDataFromParams.getiso_path());
                if (retValue) {
                    // we save the content in base64 string
                    getParameters().getVmPayload().setContent(Base64.encodeBase64String(getParameters().getVmPayload().getContent().getBytes()));
                }
            }
        }
    }
    return retValue;
}
#method_after
@Override
protected boolean canDoAction() {
    boolean retValue = false;
    List<ValidationError> validationErrors = null;
    String vmName = getParameters().getVm().getvm_name();
    if (vmName == null || vmName.isEmpty()) {
        retValue = false;
        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY);
    } else {
        // check that VM name is not too long
        boolean vmNameValidLength = isVmNameValidLength(getParameters().getVm());
        if (!vmNameValidLength) {
            retValue = false;
            addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG);
        } else if (getVm().getStaticData() != null) {
            VM vm = DbFacade.getInstance().getVmDAO().get(getVm().getStaticData().getId());
            // Checking if a desktop with same name already exists
            VmStatic vmStaticDataFromParams = getParameters().getVmStaticData();
            boolean exists = (Boolean) Backend.getInstance().runInternalQuery(VdcQueryType.IsVmWithSameNameExist, new IsVmWithSameNameExistParameters(vmStaticDataFromParams.getvm_name())).getReturnValue();
            if (exists && (!StringHelper.EqOp(vm.getvm_name(), vmStaticDataFromParams.getvm_name()))) {
                addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_ALREADY_EXIST);
            } else if (!(validationErrors = VmPropertiesUtils.getInstance().validateVMProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams)).isEmpty()) {
                handleCustomPropertiesError(validationErrors, getReturnValue().getCanDoActionMessages());
            } else if (vmStaticDataFromParams.getauto_startup() && vmStaticDataFromParams.getMigrationSupport() == MigrationSupport.PINNED_TO_HOST) {
                getReturnValue().getCanDoActionMessages().add(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString());
            } else if (VmHandler.isMemorySizeLegal(vmStaticDataFromParams.getos(), vmStaticDataFromParams.getmem_size_mb(), getReturnValue().getCanDoActionMessages(), getVdsGroup().getcompatibility_version().toString())) {
                if (StringHelper.EqOp(vmStaticDataFromParams.getvm_name(), "")) {
                    getReturnValue().getCanDoActionMessages().add(VdcBllMessages.VM_NAME_CANNOT_BE_EMPTY.toString());
                } else if (vm != null) {
                    setCustomDefinedProperties(vmStaticDataFromParams);
                    setCustomDefinedProperties(getVm().getStaticData());
                    retValue = areUpdatedFieldsLegal();
                    if (!retValue) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_ILLEGAL_FIELD);
                    } else if (!getVm().getStaticData().getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                        addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_CLUSTER);
                        retValue = false;
                    }
                    if (vmStaticDataFromParams.getdedicated_vm_for_vds() != null) {
                        VDS vds = DbFacade.getInstance().getVdsDAO().get(new Guid(vmStaticDataFromParams.getdedicated_vm_for_vds().toString()));
                        // if vds doesnt exist or not the same cluster
                        if (vds == null || !vds.getvds_group_id().equals(vmStaticDataFromParams.getvds_group_id())) {
                            addCanDoActionMessage(VdcBllMessages.VM_CANNOT_UPDATE_DEFAULT_VDS_NOT_VALID);
                            retValue = false;
                        }
                    }
                    // Check if number of monitors passed is legal
                    if (!VmHandler.isNumOfMonitorsLegal(vmStaticDataFromParams.getdefault_display_type(), vmStaticDataFromParams.getnum_of_monitors(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (vm.getnum_of_monitors() < vmStaticDataFromParams.getnum_of_monitors()) {
                        List<Disk> allDisks = DbFacade.getInstance().getDiskDao().getAllForVm(getVmId());
                        List<VmNetworkInterface> interfaces = DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(getVmId());
                        retValue = retValue && CheckPCIAndIDELimit(vmStaticDataFromParams.getnum_of_monitors(), interfaces, allDisks, getReturnValue().getCanDoActionMessages());
                    }
                    if (!VmTemplateCommand.IsVmPriorityValueLegal(vmStaticDataFromParams.getpriority(), getReturnValue().getCanDoActionMessages())) {
                        retValue = false;
                    }
                    if (retValue && vm.getVmPoolId() != null && vmStaticDataFromParams.getis_stateless()) {
                        addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_FROM_POOL_CANNOT_BE_STATELESS);
                        retValue = false;
                    }
                }
            }
            if (retValue) {
                retValue = AddVmCommand.CheckCpuSockets(vmStaticDataFromParams.getnum_of_sockets(), vmStaticDataFromParams.getcpu_per_socket(), getVdsGroup().getcompatibility_version().toString(), getReturnValue().getCanDoActionMessages());
            }
            // Check id dedicated host is same as VM cluster
            if (retValue) {
                retValue = isDedicatedVdsOnSameCluster(getParameters().getVmStaticData());
            }
            // check for Vm Payload
            if (retValue && getParameters().getVmPayload() != null) {
                retValue = checkPayload(getParameters().getVmPayload(), vmStaticDataFromParams.getiso_path());
                if (retValue) {
                    // we save the content in base64 string
                    getParameters().getVmPayload().setContent(Base64.encodeBase64String(getParameters().getVmPayload().getContent().getBytes()));
                }
            }
        }
    }
    return retValue;
}
#end_block

#method_before
protected boolean areUpdatedFieldsLegal(VM vm, VmStatic vmStaticDataFromParams) {
    boolean retValue;
    setCustomDefinedProperties(vmStaticDataFromParams);
    setCustomDefinedProperties(getVm().getStaticData());
    retValue = VmHandler.mUpdateVmsStatic.IsUpdateValid(getVm().getStaticData(), vmStaticDataFromParams, vm.getstatus());
    return retValue;
}
#method_after
protected boolean areUpdatedFieldsLegal() {
    return VmHandler.mUpdateVmsStatic.IsUpdateValid(getVm().getStaticData(), getParameters().getVmStaticData(), getVm().getstatus());
}
#end_block

#method_before
protected void setCustomDefinedProperties(VmStatic vmStaticDataFromParams) {
    VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsVersion(), vmStaticDataFromParams.getCustomProperties());
    vmStaticDataFromParams.setPredefinedProperties(properties.getPredefinedProperties());
    vmStaticDataFromParams.setUserDefinedProperties(properties.getUseDefinedProperties());
}
#method_after
private void setCustomDefinedProperties(VmStatic vmStaticDataFromParams) {
    VMCustomProperties properties = VmPropertiesUtils.getInstance().parseProperties(getVdsGroupDAO().get(getParameters().getVm().getvds_group_id()).getcompatibility_version(), vmStaticDataFromParams.getCustomProperties());
    vmStaticDataFromParams.setPredefinedProperties(properties.getPredefinedProperties());
    vmStaticDataFromParams.setUserDefinedProperties(properties.getUseDefinedProperties());
}
#end_block

#method_before
@Before
public void setUp() {
    VmHandler.Init();
    vm = new VM();
    vmStatic = new VmStatic();
    VmManagementParametersBase params = new VmManagementParametersBase();
    params.setCommandType(VdcActionType.UpdateVm);
    params.setVm(vm);
    command = spy(new UpdateVmCommand<VmManagementParametersBase>(params));
    doNothing().when(command).setCustomDefinedProperties(any(VmStatic.class));
    doReturn(vm).when(command).getVm();
}
#method_after
@Before
public void setUp() {
    VmHandler.Init();
    vm = new VM();
    vmStatic = new VmStatic();
    VmManagementParametersBase params = new VmManagementParametersBase();
    params.setCommandType(VdcActionType.UpdateVm);
    params.setVmStaticData(vmStatic);
    command = spy(new UpdateVmCommand<VmManagementParametersBase>(params));
    doReturn(vm).when(command).getVm();
}
#end_block

#method_before
@Test
public void testUpdateFieldsQuotaEnforcementType() {
    vm.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED);
    vmStatic.setQuotaEnforcementType(QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT);
    assertTrue("Quota enforcement type should be updatable", command.areUpdatedFieldsLegal(vm, vmStatic));
}
#method_after
@Test
public void testUpdateFieldsQuotaEnforcementType() {
    vm.setQuotaEnforcementType(QuotaEnforcementTypeEnum.DISABLED);
    vmStatic.setQuotaEnforcementType(QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT);
    assertTrue("Quota enforcement type should be updatable", command.areUpdatedFieldsLegal());
}
#end_block

#method_before
@Test
public void testUpdateFieldsQutoaDefault() {
    vm.setIsQuotaDefault(true);
    vmStatic.setIsQuotaDefault(false);
    assertTrue("Quota default should be updatable", command.areUpdatedFieldsLegal(vm, vmStatic));
}
#method_after
@Test
public void testUpdateFieldsQutoaDefault() {
    vm.setIsQuotaDefault(true);
    vmStatic.setIsQuotaDefault(false);
    assertTrue("Quota default should be updatable", command.areUpdatedFieldsLegal());
}
#end_block

#method_before
@Before
public void initConfig() {
    IConfigUtilsInterface mockConfigUtils = mock(IConfigUtilsInterface.class);
    Config.setConfigUtils(mockConfigUtils);
    when(mockConfigUtils.<String>GetValue(ConfigValues.AuthenticationMethod, Config.DefaultConfigurationVersion)).thenReturn("LDAP");
    when(mockConfigUtils.<String>GetValue(ConfigValues.DBEngine, Config.DefaultConfigurationVersion)).thenReturn("postgres");
    when(mockConfigUtils.<String>GetValue(ConfigValues.LDAPSecurityAuthentication, Config.DefaultConfigurationVersion)).thenReturn("SIMPLE");
    when(mockConfigUtils.<Integer>GetValue(ConfigValues.SearchResultsLimit, Config.DefaultConfigurationVersion)).thenReturn(100);
}
#method_after
public void initConfig() {
    mcr.<String>mockConfigValue(ConfigValues.LDAPSecurityAuthentication, Config.DefaultConfigurationVersion, "SIMPLE");
    mcr.<Integer>mockConfigValue(ConfigValues.SearchResultsLimit, Config.DefaultConfigurationVersion, 100);
    mcr.<String>mockConfigValue(ConfigValues.AuthenticationMethod, Config.DefaultConfigurationVersion, "LDAP");
    mcr.<String>mockConfigValue(ConfigValues.DBEngine, Config.DefaultConfigurationVersion, "postgres");
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Test
public void testSearchQuery() {
    when(getDbFacadeMockInstance().getDbEngineDialect()).thenReturn(new PostgresDbEngineDialect());
    doReturn(DOMAIN).when(getQuery()).getDefaultDomain();
    LdapBroker ldapFactoryMock = mock(LdapBroker.class);
    doReturn(ldapFactoryMock).when(getQuery()).getLdapFactory(DOMAIN);
    LdapReturnValueBase ldapRerunValue = new LdapReturnValueBase();
    ldapRerunValue.setSucceeded(true);
    ldapRerunValue.setReturnValue(Collections.singletonList(result));
    when(ldapFactoryMock.RunAdAction(eq(AdActionType.SearchUserByQuery), argThat(new LdapParametersMatcher("gandalf")))).thenReturn(ldapRerunValue);
    getQuery().setInternalExecution(true);
    getQuery().Execute();
    assertTrue("Query should succeed, but failed with: " + getQuery().getQueryReturnValue().getExceptionString(), getQuery().getQueryReturnValue().getIsSearchValid());
    assertEquals("Wrong user returned", result, ((List<AdUser>) getQuery().getQueryReturnValue().getReturnValue()).get(0));
}
#method_after
@SuppressWarnings("unchecked")
@Test
public void testSearchQuery() {
    initConfig();
    when(getDbFacadeMockInstance().getDbEngineDialect()).thenReturn(new PostgresDbEngineDialect());
    doReturn(DOMAIN).when(getQuery()).getDefaultDomain();
    LdapBroker ldapFactoryMock = mock(LdapBroker.class);
    doReturn(ldapFactoryMock).when(getQuery()).getLdapFactory(DOMAIN);
    LdapReturnValueBase ldapRerunValue = new LdapReturnValueBase();
    ldapRerunValue.setSucceeded(true);
    ldapRerunValue.setReturnValue(Collections.singletonList(result));
    when(ldapFactoryMock.RunAdAction(eq(AdActionType.SearchUserByQuery), argThat(new LdapParametersMatcher("gandalf")))).thenReturn(ldapRerunValue);
    getQuery().setInternalExecution(true);
    getQuery().Execute();
    assertTrue("Query should succeed, but failed with: " + getQuery().getQueryReturnValue().getExceptionString(), getQuery().getQueryReturnValue().getIsSearchValid());
    assertEquals("Wrong user returned", result, ((List<AdUser>) getQuery().getQueryReturnValue().getReturnValue()).get(0));
}
#end_block

#method_before
@Override
protected void executeCommand() {
    // add user session
    // todo : insert correct values of all arguments, separate
    HandleUserSession(_adUser);
    setActionReturnValue(getCurrentUser());
    ((VdcLoginReturnValueBase) getReturnValue()).setLoginResult(LoginResult.Autheticated);
    // Permissions for this user might been changed since last login so
    // update hiss isAdmin flag accordingly
    updateUserData();
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    // add user session
    // todo : insert correct values of all arguments, separate
    HandleUserSession(_adUser);
    setActionReturnValue(getCurrentUser());
    ((VdcLoginReturnValueBase) getReturnValue()).setLoginResult(LoginResult.Autheticated);
    // Permissions for this user might been changed since last login so
    // update his isAdmin flag accordingly
    updateUserData();
    setSucceeded(true);
}
#end_block

