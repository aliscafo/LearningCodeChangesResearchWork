public List < String > METHOD_1 ( Account account , TYPE_1 < TYPE_2 > VAR_1 ) { List < String > VAR_2 = new ArrayList < > ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; if ( account . METHOD_3 ( ) != null ) { VAR_2 . METHOD_4 ( account . METHOD_3 ( ) ) ; } Collections . METHOD_5 ( VAR_2 ) ; return VAR_2 ; }
public TYPE_1 METHOD_1 ( TYPE_2 db , Change c ) throws OrmException , TYPE_3 { return METHOD_1 ( db , c . getProject ( ) , c . getId ( ) ) ; }
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) ; listener ( ) . to ( VAR_2 class ) ; bind ( VAR_4 class ) ; bind ( VAR_5 class ) ; listener ( ) . to ( VAR_5 class ) ; factory ( VAR_6 . Factory class ) ; }
private static TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > schema , TYPE_4 cfg , TYPE_5 VAR_1 ) throws IOException { if ( TYPE_6 . METHOD_2 ( cfg ) ) { return new TYPE_11 ( ) ; } TYPE_7 VAR_2 = TYPE_9 . METHOD_3 ( VAR_1 , VAR_3 + STRING_1 , schema ) ; return TYPE_10 . METHOD_4 ( VAR_2 ) ; }
private void METHOD_1 ( ) throws IOException { RevCommit VAR_1 = rp . METHOD_2 ( ) . parseCommit ( VAR_2 ) ; psId = TYPE_1 . METHOD_3 ( VAR_3 , notes . getChange ( ) . currentPatchSetId ( ) ) ; info = VAR_4 . get ( rp . METHOD_2 ( ) , VAR_1 , psId ) ; cmd = new ReceiveCommand ( ObjectId . METHOD_4 ( ) , VAR_2 , psId . METHOD_5 ( ) ) ; }
private void METHOD_1 ( TYPE_1 project , ReceiveCommand cmd ) { VAR_1 . METHOD_2 ( project . METHOD_3 ( ) , cmd , VAR_2 . get ( ) . METHOD_4 ( ) ) ; }
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; listener ( ) . to ( VAR_1 class ) ; }
void METHOD_1 ( String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; }
private Map < Change . Key , Change > METHOD_1 ( Branch . NameKey branch ) throws OrmException { Map < Change . Key , Change > r = new TYPE_1 < > ( ) ; for ( ChangeData cd : VAR_1 . get ( ) . METHOD_2 ( branch ) ) { r . put ( cd . change ( ) . getKey ( ) , cd . change ( ) ) ; } return r ; }
public void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , IOException { METHOD_2 ( ) ; METHOD_3 ( ctx ) ; ctx . METHOD_5 ( new ReceiveCommand ( ObjectId . METHOD_6 ( ) , commit , METHOD_7 ( ) . METHOD_8 ( ) , VAR_3 ) ) ; }
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 { TYPE_3 cm = VAR_1 . create ( ctx . getProject ( ) , change.getId ( ) ) ; cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) ; cm . METHOD_4 ( patchSet , VAR_2 ) ; cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; cm . METHOD_9 ( ) ; }
public ChangeInfo apply ( TYPE_1 req , TYPE_2 input ) throws TYPE_3 , TYPE_4 , OrmException { TYPE_5 VAR_1 = req . METHOD_1 ( ) ; if ( ! VAR_1 . METHOD_4 ( VAR_3 . get ( ) ) ) { throw new TYPE_7 ( STRING_1 ) ; } Change change = METHOD_5 ( VAR_1 , input . message ) ; return VAR_4 . create ( VAR_5 ) . format ( change ) ; }
public void METHOD_1 ( TYPE_1 ctx ) throws OrmException { try { TYPE_2 cm = VAR_1 . create ( ctx . getProject ( ) , change.getId ( ) ) ; if ( account != null ) { cm . METHOD_2 ( account . getId ( ) ) ; } cm . METHOD_3 ( message ) ; cm . METHOD_4 ( ) ; } catch ( Exception e ) { log . error ( STRING_1 + change.getId ( ) , e ) ; } VAR_2 . METHOD_5 ( change , patchSet , account , VAR_3 ) ; }
private TYPE_1 METHOD_1 ( ) { final List < TYPE_2 > modules = new ArrayList < > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; if ( ! VAR_3 ) { modules.add ( new TYPE_3 ( ) ) ; } modules.add ( new TYPE_4 ( VAR_4 , VAR_1 . METHOD_2 ( VAR_5 class ) ) ) ; if ( ! VAR_4 && VAR_6 == VAR_7 ) { modules.add ( new TYPE_5 ( ) ) ; } return VAR_1 . METHOD_3 ( modules ) ; }
public < TYPE_1 > List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > factory ) { List < TYPE_1 > VAR_1 = new ArrayList < > ( ) ; for ( TYPE_4 VAR_2 : VAR_3 ) { for ( TYPE_5 < ? > VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_1 . add ( factory . METHOD_4 ( VAR_4 ) ) ; } } return VAR_1 ; }
public TYPE_1 < ? > METHOD_1 ( final int id ) { TYPE_1 < ? > result = null ; for ( final TYPE_2 e : VAR_1 ) { final TYPE_1 < ? > t = e . METHOD_1 ( id ) ; if ( t != null ) { if ( result != null ) { return null ; } result = t ; } } return result ; }
public TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { return VAR_1 ; } else if ( METHOD_3 ( ) && ! METHOD_4 ( ) ) { return VAR_2 ; } else if ( VAR_3 . get ( ) ) { return VAR_4 ; } final long VAR_5 = METHOD_5 ( VAR_6 ) ; if ( VAR_5 <= 0 ) { return VAR_7 ; } return VAR_8 ; }
boolean METHOD_1 ( ) { List < String > projects = config . METHOD_2 ( ) ; boolean VAR_1 = ( projects . size ( ) == 1 ) ; if ( VAR_1 ) { String VAR_2 = projects . get ( 0 ) ; if ( TYPE_1 . METHOD_3 ( VAR_2 ) != VAR_3 ) { VAR_1 = false ; } } return VAR_1 ; }
private TYPE_1 METHOD_1 ( ChangeData cd , boolean VAR_1 ) throws OrmException { if ( ! VAR_1 ) { return cd . METHOD_5 ( ) . getProject ( ) . METHOD_6 ( ) ; } TYPE_2 VAR_2 = cd . METHOD_2 ( ) ; if ( ! VAR_2 . METHOD_3 ( ) ) { METHOD_4 ( STRING_1 + cd . getId ( ) + STRING_2 + VAR_3 ) ; } return VAR_2 . type ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) throws TYPE_4 , IOException , OrmException , TYPE_5 { Change change = new Change ( VAR_2 . getChange ( ) ) ; METHOD_2 ( VAR_1 , VAR_2 ) ; return TYPE_1 . METHOD_3 ( change , VAR_1 . METHOD_4 ( ) ) ; }
public TYPE_1 METHOD_1 ( String VAR_1 ) { switch ( type ) { case VAR_2 : this . VAR_3 = VAR_1 != null ? TYPE_2 . METHOD_2 ( METHOD_3 ( VAR_1 ) ) : null ; return this ; default : throw new TYPE_3 ( String . format ( STRING_1 , type ) ) ; } }
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : case VAR_3 : case VAR_4 : throw new TYPE_3 ( String . format ( STRING_1 , type ) ) ; default : this . revision = METHOD_2 ( revision ) ; return this ; } }
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; default : revision = METHOD_2 ( revision , VAR_14 ) ; METHOD_3 ( revision == VAR_14 , STRING_1 , type ) ; break ; } this . VAR_15 = revision ; return this ; }
void METHOD_1 ( String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; }
private Map < Change . Key , Change > METHOD_1 ( Branch . NameKey branch ) throws OrmException { Map < Change . Key , Change > r = new TYPE_1 < > ( ) ; for ( ChangeData cd : VAR_1 . get ( ) . METHOD_2 ( branch ) ) { r . put ( cd . change ( ) . getKey ( ) , cd . change ( ) ) ; } return r ; }
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws OrmException , IOException { if ( VAR_1 == TYPE_2 . METHOD_2 ( ) ) { return new TYPE_1 ( db , repo , rp . METHOD_3 ( ) ) ; } return new TYPE_1 ( project . METHOD_4 ( ) ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 db , Change change , TYPE_3 user ) throws TYPE_4 , TYPE_5 , IOException , OrmException { ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_6 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; }
public static boolean METHOD_1 ( String ref , Account . Id VAR_1 ) { if ( VAR_1 == null ) { return false ; } String VAR_2 = new StringBuilder ( METHOD_2 ( VAR_1 ) ) . append ( CHAR_1 ) . append ( VAR_3 ) . toString ( ) ; return ref . METHOD_3 ( VAR_2 ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( Branch . NameKey VAR_1 ) { METHOD_2 ( STRING_1 + VAR_1 ) ; TYPE_1 < TYPE_2 > VAR_2 = new ArrayList < > ( ) ; for ( TYPE_2 s : VAR_3 ) { if ( s . METHOD_3 ( ) . equals ( VAR_1 ) ) { METHOD_2 ( STRING_2 + s ) ; VAR_2 . add ( s ) ; } } return VAR_2 ; }
public TYPE_1 METHOD_1 ( ) { if ( user == null ) { if ( METHOD_2 ( ) ) { user = VAR_3 . create ( VAR_4 . getAccountId ( ) ) ; } else { user = VAR_5 . get ( ) ; } } return user ; }
void METHOD_1 ( String token ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( token ) ; try { TYPE_3 . METHOD_3 ( VAR_1 . label ( ) ) ; TYPE_4 . METHOD_4 ( VAR_2 , VAR_1 . label ( ) , VAR_1 . value ( ) ) ; } catch ( TYPE_5 e ) { throw VAR_3 . reject ( e . getMessage ( ) ) ; } VAR_4 . put ( VAR_1 . label ( ) , VAR_1 . value ( ) ) ; }
private Map < Change . Key , Change > METHOD_1 ( Branch . NameKey branch ) throws OrmException { Map < Change . Key , Change > r = new TYPE_1 < > ( ) ; for ( ChangeData cd : VAR_1 . get ( ) . METHOD_2 ( branch ) ) { r . put ( cd . change ( ) . getKey ( ) , cd . change ( ) ) ; } return r ; }
public TYPE_1 create ( Project . NameKey name , Repository VAR_1 , TYPE_2 user , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = factory . create ( name , VAR_1 , VAR_2 ) ; VAR_3 . METHOD_1 ( ) . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_2 ( user ) ; return VAR_3 ; }
protected void METHOD_1 ( String changeId , int psId ) throws OrmException { TYPE_1 VAR_2 = VAR_3 . create ( METHOD_2 ( VAR_1 . get ( ) . METHOD_3 ( changeId ) ) . change ( ) ) ; PatchSetApproval VAR_4 = VAR_5 . METHOD_5 ( db , VAR_2 , new PatchSet . Id ( VAR_2 . getChangeId ( ) , psId ) ) ; assertThat ( VAR_4 ) . METHOD_6 ( ) ; }
protected void METHOD_1 ( TYPE_1 < ? > VAR_1 , boolean VAR_2 ) throws IOException { METHOD_2 ( VAR_1 , VAR_2 ) ; RevCommit VAR_3 = METHOD_3 ( ) ; assertThat ( VAR_3 . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( ) ; assertThat ( VAR_3 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( ) ; }
private String METHOD_1 ( ) throws IOException { try ( Repository repo = VAR_1 . METHOD_2 ( project ) ; TYPE_1 rw = new TYPE_1 ( repo ) ) { ObjectId VAR_2 = repo . METHOD_3 ( STRING_1 ) ; ObjectId VAR_3 = repo . METHOD_3 ( STRING_2 ) ; return METHOD_4 ( repo , VAR_2 , VAR_3 ) ; } }
private String METHOD_1 ( Repository repo , ObjectId VAR_1 , ObjectId VAR_2 ) throws IOException { TYPE_1 out = new TYPE_1 ( ) ; try ( TYPE_2 VAR_3 = new TYPE_2 ( out ) ) { VAR_3 . METHOD_2 ( repo ) ; VAR_3 . format ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return out . toString ( ) ; } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = VAR_1 . METHOD_3 ( ) ? STRING_1 : STRING_2 ; VAR_3 . METHOD_4 ( VAR_2 ) ; TYPE_2 VAR_4 = VAR_1 . METHOD_5 ( ) ; if ( VAR_4 != null ) { VAR_3 . METHOD_6 ( STRING_3 , METHOD_7 ( VAR_4 ) ) ; } METHOD_8 ( VAR_1 ) ; VAR_3 . close ( VAR_2 ) ; }
protected TYPE_1 < ? > METHOD_1 ( String name , Project . NameKey project = METHOD_2 ( name , VAR_1 ) ; METHOD_3 ( VAR_2 , project , STRING_1 ) ; METHOD_3 ( VAR_3 , project , STRING_2 ) ; return METHOD_4 ( project ) ; }
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 in ) throws TYPE_5 , Exception { if ( in == null ) { throw new TYPE_5 ( STRING_1 ) ; } if ( ! METHOD_1 ( in ) ) { throw new TYPE_5 ( STRING_2 ) ; } return METHOD_2 ( METHOD_3 ( VAR_2 , VAR_3 , in ) ) ; }
private void add ( List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { try { VAR_1 . add ( new TYPE_2 ( VAR_2 . getKey ( ) , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) ; } catch ( TYPE_5 e ) { throw e ; } catch ( TYPE_6 e ) { METHOD_2 ( VAR_2 ) ; } }
public void METHOD_1 ( String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; VAR_2 . METHOD_4 ( rsrc ) ; VAR_2 . apply ( account , new TYPE_4 ( ) ) ; } catch ( OrmException | IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } }
public void METHOD_1 ( String id ) throws TYPE_1 { try { TYPE_2 rsrc = changes . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( id ) ) ; TYPE_4 VAR_2 = new TYPE_4 ( account . METHOD_4 ( ) , rsrc ) ; VAR_3 . apply ( VAR_2 , new TYPE_5 ( ) ) ; } catch ( OrmException | IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } }
private String METHOD_1 ( ) throws IOException { client ( ) . METHOD_5 ( ) ; final String result = STRING_1 + METHOD_3 ( ) + STRING_2 ; log . METHOD_6 ( STRING_3 , result ) ; return result ; }
private boolean METHOD_1 ( ) { ui . message ( STRING_1 ) ; try { new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) . METHOD_2 ( ) . METHOD_3 ( ) ; ui . message ( STRING_2 ) ; return true ; } catch ( TYPE_2 e ) { ui . message ( STRING_3 , e . toString ( ) ) ; return false ; } }
protected void METHOD_1 ( ) { bind ( VAR_1 class ) ; bind ( VAR_2 class ) . to ( VAR_1 class ) ; DynamicSet . bind ( binder ( ) , VAR_5 class ) . to ( VAR_1 class ) ; listener ( ) . to ( VAR_1 class ) ; }
