45
#method_before
private void refreshVolumeCapacity(GlusterVolumeEntity volume, GlusterVolumeAdvancedDetails volumeAdvancedDetails) {
    Long confirmedFreeSize = calculateConfirmedVolumeCapacity(volume);
    if (volume.getAdvancedDetails().getCapacityInfo() == null) {
        volumeDao.addVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    } else {
        volumeAdvancedDetails.getCapacityInfo().setConfirmedFreeSize(confirmedFreeSize);
        volumeDao.updateVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    }
    if (confirmedFreeSize != null) {
        storageDomainStaticDao.getAllForStoragePool(clusterDao.get(volume.getClusterId()).getStoragePoolId()).stream().map(StorageDomainStatic::getId).filter(sd -> storageServerConnectionDao.getAllForDomain(sd).stream().anyMatch(c -> volume.getId().equals(c.getGlusterVolumeId()))).map(i -> storageDomainDynamicDao.get(i)).forEach(d -> {
            d.setConfirmedAvailableDiskSize((int) (confirmedFreeSize / (1024 * 1024 * 1024)));
            storageDomainDynamicDao.updateConfirmedSize(d);
        });
    }
}
#method_after
private void refreshVolumeCapacity(GlusterVolumeEntity volume, GlusterVolumeAdvancedDetails volumeAdvancedDetails) {
    Long confirmedFreeSize = calculateConfirmedVolumeCapacity(volume);
    if (volume.getAdvancedDetails().getCapacityInfo() == null) {
        volumeDao.addVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    } else {
        volumeAdvancedDetails.getCapacityInfo().setConfirmedFreeSize(confirmedFreeSize);
        volumeDao.updateVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    }
    if (confirmedFreeSize != null) {
        storageDomainStaticDao.getAllForStoragePool(clusterDao.get(volume.getClusterId()).getStoragePoolId()).stream().map(StorageDomainStatic::getId).filter(sd -> storageServerConnectionDao.getAllForDomain(sd).stream().anyMatch(c -> volume.getId().equals(c.getGlusterVolumeId()))).map(i -> storageDomainDynamicDao.get(i)).forEach(d -> {
            d.setConfirmedAvailableDiskSize((int) (confirmedFreeSize / SizeConverter.BYTES_IN_GB));
            storageDomainDynamicDao.updateConfirmedSize(d);
        });
    }
}
#end_block

#method_before
private Map<Guid, GlusterLocalVolumeInfo> getLocalVolumeInfo(Guid clusterId) {
    Map<Guid, GlusterLocalVolumeInfo> localVolumeInfoMap = new HashMap<>();
    for (VDS vds : vdsDao.getAllForCluster(clusterId)) {
        if (vds.getStatus() != VDSStatus.Up) {
            continue;
        }
        log.debug("Getting LVM/VDO information for the host {}", vds.getName());
        GlusterLocalVolumeInfo localVolumeInfo = new GlusterLocalVolumeInfo();
        VDSReturnValue logicalVolumesResult = runVdsCommand(VDSCommandType.GetGlusterLocalLogicalVolumeList, new VdsIdVDSCommandParametersBase(vds.getId()));
        if (logicalVolumesResult.getSucceeded()) {
            localVolumeInfo.setLogicalVolumes((List<GlusterLocalLogicalVolume>) logicalVolumesResult.getReturnValue());
        }
        VDSReturnValue physicalVolumesResult = runVdsCommand(VDSCommandType.GetGlusterLocalPhysicalVolumeList, new VdsIdVDSCommandParametersBase(vds.getId()));
        if (physicalVolumesResult.getSucceeded()) {
            localVolumeInfo.setPhysicalVolumes((List<GlusterLocalPhysicalVolume>) physicalVolumesResult.getReturnValue());
        }
        VDSReturnValue vdoVolumesResult = runVdsCommand(VDSCommandType.GetGlusterVDOVolumeList, new VdsIdVDSCommandParametersBase(vds.getId()));
        if (vdoVolumesResult.getSucceeded()) {
            localVolumeInfo.setVdoVolumes((List<GlusterVDOVolume>) vdoVolumesResult.getReturnValue());
        }
        localVolumeInfoMap.put(vds.getId(), localVolumeInfo);
    }
    return localVolumeInfoMap;
}
#method_after
private Map<Guid, GlusterLocalVolumeInfo> getLocalVolumeInfo(Guid clusterId) {
    Map<Guid, GlusterLocalVolumeInfo> localVolumeInfoMap = new HashMap<>();
    for (VDS vds : vdsDao.getAllForCluster(clusterId)) {
        if (vds.getStatus() != VDSStatus.Up) {
            continue;
        }
        try {
            log.debug("Getting LVM/VDO information for the host {}", vds.getName());
            GlusterLocalVolumeInfo localVolumeInfo = new GlusterLocalVolumeInfo();
            VDSReturnValue logicalVolumesResult = runVdsCommand(VDSCommandType.GetGlusterLocalLogicalVolumeList, new VdsIdVDSCommandParametersBase(vds.getId()));
            if (logicalVolumesResult.getSucceeded()) {
                localVolumeInfo.setLogicalVolumes((List<GlusterLocalLogicalVolume>) logicalVolumesResult.getReturnValue());
            }
            VDSReturnValue physicalVolumesResult = runVdsCommand(VDSCommandType.GetGlusterLocalPhysicalVolumeList, new VdsIdVDSCommandParametersBase(vds.getId()));
            if (physicalVolumesResult.getSucceeded()) {
                localVolumeInfo.setPhysicalVolumes((List<GlusterLocalPhysicalVolume>) physicalVolumesResult.getReturnValue());
            }
            VDSReturnValue vdoVolumesResult = runVdsCommand(VDSCommandType.GetGlusterVDOVolumeList, new VdsIdVDSCommandParametersBase(vds.getId()));
            if (vdoVolumesResult.getSucceeded()) {
                localVolumeInfo.setVdoVolumes((List<GlusterVDOVolume>) vdoVolumesResult.getReturnValue());
            }
            localVolumeInfoMap.put(vds.getId(), localVolumeInfo);
        } catch (Exception ex) {
            log.debug("Getting VDSM/VDO information failed at host {}, old vdsm?", vds.getName());
        }
    }
    return localVolumeInfoMap;
}
#end_block

#method_before
private void refreshBrickDetails(GlusterVolumeEntity volume, GlusterVolumeAdvancedDetails volumeAdvancedDetails, Map<Guid, GlusterLocalVolumeInfo> localVolumeInfo) {
    List<GlusterBrickEntity> bricksToUpdate = new ArrayList<>();
    List<GlusterBrickEntity> brickPropertiesToUpdate = new ArrayList<>();
    List<GlusterBrickEntity> brickPropertiesToAdd = new ArrayList<>();
    Map<Guid, BrickProperties> brickPropertiesMap = getBrickPropertiesMap(volumeAdvancedDetails);
    for (GlusterBrickEntity brick : volume.getBricks()) {
        BrickProperties brickProperties = brickPropertiesMap.get(brick.getId());
        if (brickProperties != null) {
            brickProperties.setConfirmedFreeSize(localVolumeInfo.get(brick.getServerId()).getThinSizeForDevice(brickProperties.getDevice()).map(Long::doubleValue).map(v -> v / 1048576).orElseGet(null));
            if (brickProperties.getStatus() != brick.getStatus()) {
                logBrickStatusChange(volume, brick, brickProperties.getStatus());
                brick.setStatus(brickProperties.getStatus());
                bricksToUpdate.add(brick);
            }
            if (brick.getBrickProperties() == null) {
                BrickDetails brickDetails = new BrickDetails();
                brickDetails.setBrickProperties(brickProperties);
                brick.setBrickDetails(brickDetails);
                brickPropertiesToAdd.add(brick);
            } else if (brickProperties.getTotalSize() != brick.getBrickProperties().getTotalSize() || brickProperties.getFreeSize() != brick.getBrickProperties().getFreeSize()) {
                brick.getBrickDetails().setBrickProperties(brickProperties);
                brickPropertiesToUpdate.add(brick);
            }
        }
    }
    if (!brickPropertiesToAdd.isEmpty()) {
        brickDao.addBrickProperties(brickPropertiesToAdd);
    }
    if (!brickPropertiesToUpdate.isEmpty()) {
        brickDao.updateBrickProperties(brickPropertiesToUpdate);
    }
    if (!bricksToUpdate.isEmpty()) {
        brickDao.updateBrickStatuses(bricksToUpdate);
    }
}
#method_after
private void refreshBrickDetails(GlusterVolumeEntity volume, GlusterVolumeAdvancedDetails volumeAdvancedDetails, Map<Guid, GlusterLocalVolumeInfo> localVolumeInfo) {
    List<GlusterBrickEntity> bricksToUpdate = new ArrayList<>();
    List<GlusterBrickEntity> brickPropertiesToUpdate = new ArrayList<>();
    List<GlusterBrickEntity> brickPropertiesToAdd = new ArrayList<>();
    Map<Guid, BrickProperties> brickPropertiesMap = getBrickPropertiesMap(volumeAdvancedDetails);
    for (GlusterBrickEntity brick : volume.getBricks()) {
        BrickProperties brickProperties = brickPropertiesMap.get(brick.getId());
        if (brickProperties != null) {
            if (brickProperties.getDevice() != null) {
                brickProperties.setConfirmedFreeSize(localVolumeInfo.get(brick.getServerId()).getAvailableThinSizeForDevice(brickProperties.getDevice()).map(Long::doubleValue).map(v -> v / SizeConverter.BYTES_IN_MB).orElseGet(null));
            }
            if (brickProperties.getStatus() != brick.getStatus()) {
                logBrickStatusChange(volume, brick, brickProperties.getStatus());
                brick.setStatus(brickProperties.getStatus());
                bricksToUpdate.add(brick);
            }
            if (brick.getBrickProperties() == null) {
                BrickDetails brickDetails = new BrickDetails();
                brickDetails.setBrickProperties(brickProperties);
                brick.setBrickDetails(brickDetails);
                brickPropertiesToAdd.add(brick);
            } else if (brickProperties.getTotalSize() != brick.getBrickProperties().getTotalSize() || brickProperties.getFreeSize() != brick.getBrickProperties().getFreeSize()) {
                brick.getBrickDetails().setBrickProperties(brickProperties);
                brickPropertiesToUpdate.add(brick);
            }
        }
    }
    if (!brickPropertiesToAdd.isEmpty()) {
        brickDao.addBrickProperties(brickPropertiesToAdd);
    }
    if (!brickPropertiesToUpdate.isEmpty()) {
        brickDao.updateBrickProperties(brickPropertiesToUpdate);
    }
    if (!bricksToUpdate.isEmpty()) {
        brickDao.updateBrickStatuses(bricksToUpdate);
    }
}
#end_block

#method_before
private void refreshVolumeCapacity(GlusterVolumeEntity volume, GlusterVolumeAdvancedDetails volumeAdvancedDetails) {
    if (volumeAdvancedDetails.getCapacityInfo() != null) {
        volumeAdvancedDetails.getCapacityInfo().setConfirmedFreeSize(calculateConfirmedVolumeCapacity(volume));
        if (volume.getAdvancedDetails().getCapacityInfo() == null) {
            volumeDao.addVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
        } else {
            volumeDao.updateVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
        }
    }
}
#method_after
private void refreshVolumeCapacity(GlusterVolumeEntity volume, GlusterVolumeAdvancedDetails volumeAdvancedDetails) {
    if (volume.getAdvancedDetails().getCapacityInfo() == null) {
        volumeDao.addVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    } else {
        volumeAdvancedDetails.getCapacityInfo().setConfirmedFreeSize(calculateConfirmedVolumeCapacity(volume));
        volumeDao.updateVolumeCapacityInfo(volumeAdvancedDetails.getCapacityInfo());
    }
}
#end_block

#method_before
private Long calculateConfirmedVolumeCapacity(GlusterVolumeEntity volume) {
    List<BrickProperties> bricks = volume.getBricks().stream().map(GlusterBrickEntity::getId).map(b -> brickDao.getById(b)).map(GlusterBrickEntity::getBrickProperties).collect(Collectors.toList());
    if (bricks.stream().map(BrickProperties::getConfirmedFreeSize).filter(b -> b == null).findAny().isPresent()) {
        // If we have bricks missing confirmed size, we can't calculate it for the volume.
        return null;
    }
    Stream<Double> brickSizes = bricks.stream().map(BrickProperties::getConfirmedFreeSize).map(v -> v * 1024 * 1024);
    switch(volume.getVolumeType()) {
        case REPLICATE:
            return brickSizes.map(Double::longValue).min(Long::compare).orElseGet(null);
        case DISTRIBUTE:
        case DISTRIBUTED_REPLICATE:
        case STRIPE:
        case DISTRIBUTED_STRIPE:
        case STRIPED_REPLICATE:
        case DISTRIBUTED_STRIPED_REPLICATE:
        case DISPERSE:
        default:
            return brickSizes.collect(Collectors.summingLong(Double::longValue));
    }
}
#method_after
private Long calculateConfirmedVolumeCapacity(GlusterVolumeEntity volume) {
    List<BrickProperties> bricks = volume.getBricks().stream().map(GlusterBrickEntity::getId).map(b -> brickDao.getById(b)).filter(Objects::nonNull).map(GlusterBrickEntity::getBrickProperties).collect(Collectors.toList());
    if (bricks.stream().map(BrickProperties::getConfirmedFreeSize).filter(b -> b == null).findAny().isPresent()) {
        // If we have bricks missing confirmed size, we can't calculate it for the volume.
        log.info("Volume {} have non-thin bricks, skipping confirmed free size calculation", volume.getName());
        return null;
    }
    Stream<Double> brickSizes = bricks.stream().map(BrickProperties::getConfirmedFreeSize).map(v -> v * 1024 * 1024);
    switch(volume.getVolumeType()) {
        case REPLICATE:
            return brickSizes.map(Double::longValue).min(Long::compare).orElseGet(null);
        case DISTRIBUTE:
        case DISTRIBUTED_REPLICATE:
        case STRIPE:
        case DISTRIBUTED_STRIPE:
        case STRIPED_REPLICATE:
        case DISTRIBUTED_STRIPED_REPLICATE:
        case DISPERSE:
        default:
            return brickSizes.collect(Collectors.summingLong(Double::longValue));
    }
}
#end_block

#method_before
@Override
protected void updateSingleNic(XmlNode node, VmNetworkInterface iface, int nicIdx) {
    super.updateSingleNic(node, iface, nicIdx);
    XmlNode macNode = selectSingleNode(node, "rasd:Address", _xmlNS);
    if (macNode == null) {
        // fallback for clients like virt-v2v that may still use MACAddress
        macNode = selectSingleNode(node, "rasd:MACAddress", _xmlNS);
    }
    iface.setMacAddress(macNode != null ? macNode.innerText.replaceAll("-", ":") : null);
}
#method_after
@Override
protected void updateSingleNic(XmlNode node, VmNetworkInterface iface, int nicIdx) {
    super.updateSingleNic(node, iface, nicIdx);
    XmlNode macNode = selectSingleNode(node, "rasd:MACAddress", _xmlNS);
    iface.setMacAddress(macNode != null ? macNode.innerText : null);
}
#end_block

#method_before
@Override
public int hashCode() {
    return Objects.hash(getVmId(), forceMigrationForNonMigrateableVm, targetClusterId, reason);
}
#method_after
@Override
public int hashCode() {
    return Objects.hash(getVmId(), forceMigrationForNonMigratableVm, targetClusterId, reason);
}
#end_block

#method_before
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof MigrateVmParameters)) {
        return false;
    }
    MigrateVmParameters other = (MigrateVmParameters) obj;
    return Objects.equals(getVmId(), other.getVmId()) && forceMigrationForNonMigrateableVm == other.forceMigrationForNonMigrateableVm && Objects.equals(targetClusterId, other.targetClusterId) && Objects.equals(reason, other.reason);
}
#method_after
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof MigrateVmParameters)) {
        return false;
    }
    MigrateVmParameters other = (MigrateVmParameters) obj;
    return Objects.equals(getVmId(), other.getVmId()) && forceMigrationForNonMigratableVm == other.forceMigrationForNonMigratableVm && Objects.equals(targetClusterId, other.targetClusterId) && Objects.equals(reason, other.reason);
}
#end_block

#method_before
@Test
public void defaultProperties() {
    try {
        String basedir = System.getProperty("basedir");
        assumeNotNull(basedir, "Test isn't run via Maven. Please set the basedir system property");
        OsinfoPropertiesParser.parse(Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString());
    } catch (Exception e) {
        fail("oVirt-engine will fail to load with a broken osinfo properties file.\n" + "Please fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo.\n" + "Exception thrown:\n" + e);
    }
}
#method_after
@Test
public void defaultProperties() {
    String basedir = System.getProperty("basedir");
    assumeNotNull(basedir, "Test isn't run via Maven. Please set the basedir system property");
    OsinfoPropertiesParser.parse(Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString());
}
#end_block

#method_before
public static boolean isStatusOk(Map<String, Object> response) {
    if (response.get("error") != null) {
        String errorCode = response.get("error_code") == null ? (String) response.get("error") : (String) response.get("error_code");
        String errorDescription = response.get("error_description") == null ? (String) response.get("error") : (String) response.get("error_description");
        throw new RuntimeException(String.format("%s: %s", errorCode, errorDescription));
    }
    return true;
}
#method_after
public static boolean isStatusOk(Map<String, Object> response) {
    if (response.get("error") != null) {
        Object errorCode = response.get("error_code");
        String msg;
        // if error code is null the error is send as error and error_description
        if (errorCode == null) {
            msg = String.format("%s: %s", response.get("error"), response.get("error_description"));
        } else {
            msg = String.format("%s: %s", errorCode, response.get("error"));
        }
        throw new RuntimeException(msg);
    }
    return true;
}
#end_block

#method_before
@Mapping(from = AffinityGroup.class, to = org.ovirt.engine.core.common.scheduling.AffinityGroup.class)
public static org.ovirt.engine.core.common.scheduling.AffinityGroup map(AffinityGroup model, org.ovirt.engine.core.common.scheduling.AffinityGroup template) {
    org.ovirt.engine.core.common.scheduling.AffinityGroup entity = template != null ? template : new org.ovirt.engine.core.common.scheduling.AffinityGroup();
    if (model.isSetId()) {
        entity.setId(GuidUtils.asGuid(model.getId()));
    }
    if (model.isSetName()) {
        entity.setName(model.getName());
    }
    if (model.isSetDescription()) {
        entity.setDescription(model.getDescription());
    }
    if (model.isSetCluster() && model.getCluster().isSetId()) {
        entity.setClusterId(GuidUtils.asGuid(model.getCluster().getId()));
    }
    AffinityRule hostsRule = model.getHostsRule();
    if (hostsRule != null) {
        if (hostsRule.isSetEnabled()) {
            if (!hostsRule.isEnabled()) {
                entity.setVdsAffinityRule(EntityAffinityRule.DISABLED);
            } else if (hostsRule.isSetPositive()) {
                entity.setVdsAffinityRule(hostsRule.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
            }
        // If 'positive' is not set, leaving the existing value
        } else {
            if (hostsRule.isSetPositive() && entity.isVdsAffinityEnabled()) {
                entity.setVdsAffinityRule(hostsRule.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
            }
        }
        if (hostsRule.isSetEnforcing()) {
            entity.setVdsEnforcing(hostsRule.isEnforcing());
        }
    }
    AffinityRule vmsRule = model.getVmsRule();
    if (vmsRule != null) {
        if (vmsRule.isSetEnabled()) {
            if (!vmsRule.isEnabled()) {
                entity.setVmAffinityRule(EntityAffinityRule.DISABLED);
            } else if (vmsRule.isSetPositive()) {
                entity.setVmAffinityRule(vmsRule.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
            }
        // If 'positive' is not set, leaving the existing value
        } else {
            if (vmsRule.isSetPositive() && entity.isVmAffinityEnabled()) {
                entity.setVmAffinityRule(vmsRule.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
            }
        }
        if (vmsRule.isSetEnforcing()) {
            entity.setVmEnforcing(vmsRule.isEnforcing());
        }
    } else {
        if (model.isSetPositive()) {
            entity.setVmAffinityRule(model.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
        // Default to DISABLED for new entities,
        // but do not touch existing values when no change is requested
        } else if (entity.getVmAffinityRule() == null) {
            entity.setVmAffinityRule(EntityAffinityRule.DISABLED);
        }
        if (model.isSetEnforcing()) {
            entity.setVmEnforcing(model.isEnforcing());
        }
    }
    if (model.isSetHosts()) {
        List<Guid> hostIds = entity.getVdsIds();
        if (hostIds == null) {
            hostIds = new ArrayList<>();
            entity.setVdsIds(hostIds);
        }
        // Replace the existing list with the provided one
        hostIds.clear();
        model.getHosts().getHosts().stream().filter(Host::isSetId).map(Host::getId).map(Guid::createGuidFromString).forEach(hostIds::add);
    }
    if (model.isSetVms()) {
        List<Guid> vmIds = entity.getVmIds();
        if (vmIds == null) {
            vmIds = new ArrayList<>();
            entity.setVmIds(vmIds);
        }
        // Replace the existing list with the provided one
        vmIds.clear();
        model.getVms().getVms().stream().filter(Vm::isSetId).map(Vm::getId).map(Guid::createGuidFromString).forEach(vmIds::add);
    }
    return entity;
}
#method_after
@Mapping(from = AffinityGroup.class, to = org.ovirt.engine.core.common.scheduling.AffinityGroup.class)
public static org.ovirt.engine.core.common.scheduling.AffinityGroup map(AffinityGroup model, org.ovirt.engine.core.common.scheduling.AffinityGroup template) {
    org.ovirt.engine.core.common.scheduling.AffinityGroup entity = template != null ? template : new org.ovirt.engine.core.common.scheduling.AffinityGroup();
    if (model.isSetId()) {
        entity.setId(GuidUtils.asGuid(model.getId()));
    }
    if (model.isSetName()) {
        entity.setName(model.getName());
    }
    if (model.isSetDescription()) {
        entity.setDescription(model.getDescription());
    }
    if (model.isSetCluster() && model.getCluster().isSetId()) {
        entity.setClusterId(GuidUtils.asGuid(model.getCluster().getId()));
    }
    AffinityRule hostsRule = model.getHostsRule();
    if (hostsRule != null) {
        if (hostsRule.isSetEnabled() && !hostsRule.isEnabled()) {
            entity.setVdsAffinityRule(EntityAffinityRule.DISABLED);
        } else if (hostsRule.isSetPositive()) {
            entity.setVdsAffinityRule(hostsRule.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
        }
        if (hostsRule.isSetEnforcing()) {
            entity.setVdsEnforcing(hostsRule.isEnforcing());
        }
    }
    AffinityRule vmsRule = model.getVmsRule();
    if (vmsRule != null) {
        if (vmsRule.isSetEnabled() && !vmsRule.isEnabled()) {
            entity.setVmAffinityRule(EntityAffinityRule.DISABLED);
        } else if (vmsRule.isSetPositive()) {
            entity.setVmAffinityRule(vmsRule.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
        }
        if (vmsRule.isSetEnforcing()) {
            entity.setVmEnforcing(vmsRule.isEnforcing());
        }
    } else {
        if (model.isSetPositive()) {
            entity.setVmAffinityRule(model.isPositive() ? EntityAffinityRule.POSITIVE : EntityAffinityRule.NEGATIVE);
        // Default to DISABLED for new entities,
        // but do not touch existing values when no change is requested
        } else if (entity.getVmAffinityRule() == null) {
            entity.setVmAffinityRule(EntityAffinityRule.DISABLED);
        }
        if (model.isSetEnforcing()) {
            entity.setVmEnforcing(model.isEnforcing());
        }
    }
    if (model.isSetHosts()) {
        List<Guid> hostIds = entity.getVdsIds();
        if (hostIds == null) {
            hostIds = new ArrayList<>();
            entity.setVdsIds(hostIds);
        }
        // Replace the existing list with the provided one
        hostIds.clear();
        model.getHosts().getHosts().stream().filter(Host::isSetId).map(Host::getId).map(Guid::createGuidFromString).forEach(hostIds::add);
    }
    if (model.isSetVms()) {
        List<Guid> vmIds = entity.getVmIds();
        if (vmIds == null) {
            vmIds = new ArrayList<>();
            entity.setVmIds(vmIds);
        }
        // Replace the existing list with the provided one
        vmIds.clear();
        model.getVms().getVms().stream().filter(Vm::isSetId).map(Vm::getId).map(Guid::createGuidFromString).forEach(vmIds::add);
    }
    return entity;
}
#end_block

#method_before
@SuppressWarnings("incomplete-switch")
private void writeCpu(boolean addVmNumaNodes) {
    writer.writeStartElement("cpu");
    String cpuType = vm.getCpuName();
    if (vm.isUseHostCpuFlags()) {
        cpuType = "hostPassthrough";
    }
    switch(vm.getClusterArch().getFamily()) {
        case x86:
            writer.writeAttributeString("match", "exact");
            // is this a list of strings??..
            switch(cpuType) {
                case "hostPassthrough":
                    writer.writeAttributeString("mode", "host-passthrough");
                    break;
                case "hostModel":
                    writer.writeAttributeString("mode", "host-model");
                    break;
                default:
                    writer.writeStartElement("model");
                    writer.writeRaw(cpuType);
                    // TODO: features
                    writer.writeEndElement();
                    break;
            }
            break;
        case ppc:
            writer.writeElement("model", cpuType);
    }
    if ((boolean) Config.getValue(ConfigValues.SendSMPOnRunVm)) {
        writer.writeStartElement("topology");
        writer.writeAttributeString("cores", Integer.toString(vm.getCpuPerSocket()));
        writer.writeAttributeString("threads", Integer.toString(vm.getThreadsPerCpu()));
        int vcpus = FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch()) ? VmCpuCountHelper.calcMaxVCpu(vm, vm.getClusterCompatibilityVersion()) : vm.getNumOfCpus();
        writer.writeAttributeString("sockets", String.valueOf(vcpus / vm.getCpuPerSocket() / vm.getThreadsPerCpu()));
        writer.writeEndElement();
    }
    if (addVmNumaNodes) {
        writer.writeStartElement("numa");
        NumaSettingFactory.buildVmNumaNodeSetting(vmNumaNodesSupplier.get()).forEach(vmNumaNode -> {
            writer.writeStartElement("cell");
            writer.writeAttributeString("cpus", vmNumaNode.get(VdsProperties.NUMA_NODE_CPU_LIST).toString());
            writer.writeAttributeString("memory", String.valueOf(Integer.parseInt((String) vmNumaNode.get(VdsProperties.VM_NUMA_NODE_MEM)) * 1024));
            if (HugePageUtils.isHugepagesShared(vm.getStaticData())) {
                writer.writeAttributeString("memAccess", "shared");
            }
            writer.writeEndElement();
        });
        writer.writeEndElement();
    }
    writer.writeEndElement();
}
#method_after
@SuppressWarnings("incomplete-switch")
private void writeCpu(boolean addVmNumaNodes) {
    writer.writeStartElement("cpu");
    String cpuType = vm.getCpuName();
    if (vm.isUseHostCpuFlags()) {
        cpuType = "hostPassthrough";
    }
    switch(vm.getClusterArch().getFamily()) {
        case x86:
            writer.writeAttributeString("match", "exact");
            // is this a list of strings??..
            switch(cpuType) {
                case "hostPassthrough":
                    writer.writeAttributeString("mode", "host-passthrough");
                    break;
                case "hostModel":
                    writer.writeAttributeString("mode", "host-model");
                    break;
                default:
                    writer.writeStartElement("model");
                    writer.writeRaw(cpuType);
                    // TODO: features
                    writer.writeEndElement();
                    break;
            }
            break;
        case ppc:
            writer.writeElement("model", cpuType);
    }
    if ((boolean) Config.getValue(ConfigValues.SendSMPOnRunVm)) {
        writer.writeStartElement("topology");
        writer.writeAttributeString("cores", Integer.toString(vm.getCpuPerSocket()));
        writer.writeAttributeString("threads", Integer.toString(vm.getThreadsPerCpu()));
        int vcpus = FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch()) ? VmCpuCountHelper.calcMaxVCpu(vm, vm.getClusterCompatibilityVersion()) : vm.getNumOfCpus();
        writer.writeAttributeString("sockets", String.valueOf(vcpus / vm.getCpuPerSocket() / vm.getThreadsPerCpu()));
        writer.writeEndElement();
    }
    if (addVmNumaNodes) {
        writer.writeStartElement("numa");
        NumaSettingFactory.buildVmNumaNodeSetting(vmNumaNodesSupplier.get()).forEach(vmNumaNode -> {
            writer.writeStartElement("cell");
            writer.writeAttributeString("id", vmNumaNode.get(VdsProperties.NUMA_NODE_INDEX).toString());
            writer.writeAttributeString("cpus", vmNumaNode.get(VdsProperties.NUMA_NODE_CPU_LIST).toString());
            writer.writeAttributeString("memory", String.valueOf(Integer.parseInt((String) vmNumaNode.get(VdsProperties.VM_NUMA_NODE_MEM)) * 1024));
            if (HugePageUtils.isHugepagesShared(vm.getStaticData())) {
                writer.writeAttributeString("memAccess", "shared");
            }
            writer.writeEndElement();
        });
        writer.writeEndElement();
    }
    writer.writeEndElement();
}
#end_block

#method_before
private void writeCdRom(List<VmDevice> devices) {
    // <disk type='file' device='cdrom' snapshot='no'>
    // <driver name='qemu' type='raw' error_policy='report' />
    // <source file='<path>' startupPolicy='optional'/>
    // <target dev='hdc' bus='ide'/>
    // <readonly/>
    // <address type='drive' controller='0' bus='1' target='0' unit='0'/>
    // </disk>
    devices.stream().filter(d -> VmPayload.isPayload(d.getSpecParams())).forEach(device -> {
        writer.writeStartElement("disk");
        writer.writeAttributeString("type", "file");
        writer.writeAttributeString("device", "cdrom");
        writer.writeAttributeString("snapshot", "no");
        writer.writeStartElement("driver");
        writer.writeAttributeString("name", "qemu");
        writer.writeAttributeString("type", "raw");
        writer.writeAttributeString("error_policy", "report");
        writer.writeEndElement();
        writer.writeStartElement("source");
        writer.writeAttributeString("file", "PAYLOAD:");
        writer.writeAttributeString("startupPolicy", "optional");
        writer.writeEndElement();
        payloadIndex = VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface);
        writer.writeStartElement("target");
        String name = vmInfoBuildUtils.makeDiskName(cdInterface, payloadIndex);
        writer.writeAttributeString("dev", name);
        writer.writeAttributeString("bus", cdInterface);
        writer.writeEndElement();
        writer.writeElement("readonly");
        writeAlias(device);
        if ("scsi".equals(cdInterface)) {
            int index = VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface);
            writeAddress(vmInfoBuildUtils.createAddressForScsiDisk(0, index));
        }
        payloadMetadata = new Pair<>(name, new VmPayload(device));
        writer.writeEndElement();
    });
    // add a device that points to vm.getCdPath()
    String cdPath = vm.getCdPath();
    VmDevice nonPayload = devices.stream().filter(d -> !VmPayload.isPayload(d.getSpecParams())).findAny().orElse(null);
    if (nonPayload != null || (vm.isRunOnce() && !StringUtils.isEmpty(cdPath))) {
        cdRomIndex = VmDeviceCommonUtils.getCdDeviceIndex(cdInterface);
        String dev = vmInfoBuildUtils.makeDiskName(cdInterface, cdRomIndex);
        boolean isoOnBlockDomain = vmInfoBuildUtils.isBlockDomainPath(cdPath);
        if (isoOnBlockDomain) {
            diskMetadata.put(dev, vmInfoBuildUtils.createDiskUuidsMap(vm, cdPath));
        }
        writer.writeStartElement("disk");
        writer.writeAttributeString("type", isoOnBlockDomain ? "block" : "file");
        writer.writeAttributeString("device", "cdrom");
        writer.writeAttributeString("snapshot", "no");
        writer.writeStartElement("driver");
        writer.writeAttributeString("name", "qemu");
        writer.writeAttributeString("type", "raw");
        writer.writeAttributeString("error_policy", "report");
        writer.writeEndElement();
        writer.writeStartElement("source");
        writer.writeAttributeString(isoOnBlockDomain ? "dev" : "file", cdPath);
        writer.writeAttributeString("startupPolicy", "optional");
        writer.writeEndElement();
        writer.writeStartElement("target");
        writer.writeAttributeString("dev", dev);
        writer.writeAttributeString("bus", cdInterface);
        writer.writeEndElement();
        writer.writeElement("readonly");
        if (nonPayload != null) {
            writeAlias(nonPayload);
            writeAddress(nonPayload);
            writeBootOrder(nonPayload.getBootOrder());
        }
        writer.writeEndElement();
    }
}
#method_after
private void writeCdRom(List<VmDevice> devices) {
    // <disk type='file' device='cdrom' snapshot='no'>
    // <driver name='qemu' type='raw' error_policy='report' />
    // <source file='<path>' startupPolicy='optional'/>
    // <target dev='hdc' bus='ide'/>
    // <readonly/>
    // <address type='drive' controller='0' bus='1' target='0' unit='0'/>
    // </disk>
    devices.stream().filter(d -> VmPayload.isPayload(d.getSpecParams())).forEach(device -> {
        writer.writeStartElement("disk");
        writer.writeAttributeString("type", "file");
        writer.writeAttributeString("device", "cdrom");
        writer.writeAttributeString("snapshot", "no");
        writer.writeStartElement("driver");
        writer.writeAttributeString("name", "qemu");
        writer.writeAttributeString("type", "raw");
        writer.writeAttributeString("error_policy", "report");
        writer.writeEndElement();
        writer.writeStartElement("source");
        writer.writeAttributeString("file", "PAYLOAD:");
        writer.writeAttributeString("startupPolicy", "optional");
        writer.writeEndElement();
        payloadIndex = VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface);
        writer.writeStartElement("target");
        String name = vmInfoBuildUtils.makeDiskName(cdInterface, payloadIndex);
        writer.writeAttributeString("dev", name);
        writer.writeAttributeString("bus", cdInterface);
        writer.writeEndElement();
        writer.writeElement("readonly");
        writeAlias(device);
        if ("scsi".equals(cdInterface)) {
            int index = VmDeviceCommonUtils.getCdPayloadDeviceIndex(cdInterface);
            writeAddress(vmInfoBuildUtils.createAddressForScsiDisk(0, index));
        }
        payloadMetadata = new Pair<>(name, new VmPayload(device));
        writer.writeEndElement();
    });
    // add a device that points to vm.getCdPath()
    String cdPath = vm.getCdPath();
    VmDevice nonPayload = devices.stream().filter(d -> !VmPayload.isPayload(d.getSpecParams())).findAny().orElse(null);
    if (nonPayload != null || (vm.isRunOnce() && !StringUtils.isEmpty(cdPath))) {
        cdRomIndex = VmDeviceCommonUtils.getCdDeviceIndex(cdInterface);
        String dev = vmInfoBuildUtils.makeDiskName(cdInterface, cdRomIndex);
        boolean isoOnBlockDomain = vmInfoBuildUtils.isBlockDomainPath(cdPath);
        if (isoOnBlockDomain) {
            diskMetadata.put(dev, vmInfoBuildUtils.createDiskUuidsMap(vm, cdPath));
        }
        writer.writeStartElement("disk");
        writer.writeAttributeString("type", isoOnBlockDomain ? "block" : "file");
        writer.writeAttributeString("device", "cdrom");
        writer.writeAttributeString("snapshot", "no");
        writer.writeStartElement("driver");
        writer.writeAttributeString("name", "qemu");
        writer.writeAttributeString("type", "raw");
        writer.writeAttributeString("error_policy", "report");
        writer.writeEndElement();
        writer.writeStartElement("source");
        writer.writeAttributeString(isoOnBlockDomain ? "dev" : "file", cdPath);
        writer.writeAttributeString("startupPolicy", "optional");
        writer.writeEndElement();
        writer.writeStartElement("target");
        writer.writeAttributeString("dev", dev);
        writer.writeAttributeString("bus", cdInterface);
        writer.writeEndElement();
        writer.writeElement("readonly");
        if (nonPayload != null) {
            writeAlias(nonPayload);
            if ("scsi".equals(cdInterface)) {
                writeAddress(vmInfoBuildUtils.createAddressForScsiDisk(0, cdRomIndex));
            } else {
                writeAddress(nonPayload);
            }
            writeBootOrder(nonPayload.getBootOrder());
        }
        writer.writeEndElement();
    }
}
#end_block

#method_before
private void writeInterface(VmDevice device, VmNic nic) {
    // <interface type="bridge">
    // <mac address="aa:bb:dd:dd:aa:bb"/>
    // <model type="virtio"/>
    // <source bridge="engine"/>
    // [<driver name="vhost/qemu" queues="int"/>]
    // [<filterref filter='filter name'>
    // [<parameter name='parameter name' value='parameter value'>]
    // </filterref>]
    // [<tune><sndbuf>0</sndbuf></tune>]
    // [<link state='up|down'/>]
    // [<bandwidth>
    // [<inbound average="int" [burst="int"]  [peak="int"]/>]
    // [<outbound average="int" [burst="int"]  [peak="int"]/>]
    // </bandwidth>]
    // </interface>
    // 
    // -- or -- a slightly different SR-IOV network interface
    // <interface type='hostdev' managed='no'>
    // <driver name='vfio'/>
    // <source>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // </source>
    // <mac address='52:54:00:6d:90:02'/>
    // <vlan>
    // <tag id=100/>
    // </vlan>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // <boot order='1'/>
    // </interface>
    writer.writeStartElement("interface");
    VnicProfile vnicProfile = vmInfoBuildUtils.getVnicProfile(nic.getVnicProfileId());
    Network network = vnicProfile != null ? vmInfoBuildUtils.getNetwork(vnicProfile.getNetworkId()) : null;
    switch(device.getDevice()) {
        case "bridge":
            writer.writeAttributeString("type", "bridge");
            writer.writeStartElement("model");
            VmInterfaceType ifaceType = nic.getType() != null ? VmInterfaceType.forValue(nic.getType()) : VmInterfaceType.rtl8139;
            String evaluatedIfaceType = vmInfoBuildUtils.evaluateInterfaceType(ifaceType, vm.getHasAgent());
            if ("pv".equals(evaluatedIfaceType)) {
                evaluatedIfaceType = "virtio";
            }
            writer.writeAttributeString("type", evaluatedIfaceType);
            writer.writeEndElement();
            writer.writeStartElement("link");
            writer.writeAttributeString("state", nic.isLinked() ? "up" : "down");
            writer.writeEndElement();
            // The source element is different when using legacy or OVS bridge. We
            // expect VDSM to replace the source element if it is a non legacy bridge
            writer.writeStartElement("source");
            writer.writeAttributeString("bridge", network != null ? network.getVdsmName() : "");
            writer.writeEndElement();
            String queues = vnicProfile != null ? vnicProfile.getCustomProperties().remove("queues") : null;
            String driverName = getDriverNameForNetwork(network != null ? network.getName() : "");
            if (queues != null || driverName != null) {
                writer.writeStartElement("driver");
                if (queues != null) {
                    writer.writeAttributeString("queues", queues);
                    if (driverName == null) {
                        driverName = "vhost";
                    }
                }
                writer.writeAttributeString("name", driverName);
                writer.writeEndElement();
            }
            break;
        case "hostdev":
            writer.writeAttributeString("type", "hostdev");
            writer.writeAttributeString("managed", "no");
            writer.writeStartElement("driver");
            writer.writeAttributeString("name", "vfio");
            writer.writeEndElement();
            if (network != null && NetworkUtils.isVlan(network)) {
                writer.writeStartElement("vlan");
                writer.writeStartElement("tag");
                writer.writeAttributeString("id", network.getVlanId().toString());
                writer.writeEndElement();
                writer.writeEndElement();
            }
            writer.writeStartElement("source");
            writer.writeStartElement("address");
            String vfDeviceName = passthroughVnicToVfMap.get(nic.getId());
            Map<String, String> sourceAddress = hostDevicesSupplier.get().get(vfDeviceName).getAddress();
            sourceAddress.put("type", "pci");
            sourceAddress.forEach(writer::writeAttributeString);
            writer.writeEndElement();
            writer.writeEndElement();
            break;
    }
    writeAlias(device);
    writeAddress(device);
    writeBootOrder(device.getBootOrder());
    writer.writeStartElement("mac");
    writer.writeAttributeString("address", nic.getMacAddress());
    writer.writeEndElement();
    NetworkFilter networkFilter = vmInfoBuildUtils.fetchVnicProfileNetworkFilter(nic);
    if (networkFilter != null) {
        writer.writeStartElement("filterref");
        writer.writeAttributeString("filter", networkFilter.getName());
        vmInfoBuildUtils.getAllNetworkFiltersForVmNic(nic.getId()).forEach(parameter -> {
            writer.writeStartElement("parameter");
            writer.writeAttributeString("name", parameter.getName());
            writer.writeAttributeString("value", parameter.getValue());
            writer.writeEndElement();
        });
        writer.writeEndElement();
    }
    String sndbuf = vmCustomProperties.get("sndbuf");
    if (sndbuf != null) {
        writer.writeStartElement("tune");
        writer.writeElement("sndbuf", sndbuf);
        writer.writeEndElement();
    }
    Map<String, Object> profileData = new HashMap<>();
    vmInfoBuildUtils.addProfileDataToNic(profileData, vm, device, nic);
    List<String> portMirroring = (List<String>) profileData.get(VdsProperties.PORT_MIRRORING);
    if (portMirroring != null && !portMirroring.isEmpty()) {
        // store port mirroring in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("portMirroring", portMirroring);
    }
    Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(device.getId());
    if (runtimeCustomProperties != null && !runtimeCustomProperties.isEmpty()) {
        // store runtime custom properties in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("runtimeCustomProperties", runtimeCustomProperties);
    }
    if (vnicProfile != null && vnicProfile.getCustomProperties() != null) {
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).putAll(vnicProfile.getCustomProperties());
    }
    writer.writeStartElement("bandwidth");
    @SuppressWarnings("unchecked")
    Map<String, Object> specParams = (Map<String, Object>) profileData.get("specParams");
    if (specParams != null && (specParams.containsKey("inbound") || specParams.containsKey("outbound"))) {
        @SuppressWarnings("unchecked")
        Map<String, String> inboundMap = (Map<String, String>) specParams.get("inbound");
        if (inboundMap != null && !inboundMap.isEmpty()) {
            writer.writeStartElement("inbound");
            writer.writeAttributeString("average", String.valueOf(inboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(inboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(inboundMap.get("peak")));
            writer.writeEndElement();
        }
        @SuppressWarnings("unchecked")
        Map<String, String> outboundMap = (Map<String, String>) specParams.get("outbound");
        if (outboundMap != null && !outboundMap.isEmpty()) {
            writer.writeStartElement("outbound");
            writer.writeAttributeString("average", String.valueOf(outboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(outboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(outboundMap.get("peak")));
            writer.writeEndElement();
        }
    }
    writer.writeEndElement();
    writer.writeEndElement();
}
#method_after
private void writeInterface(VmDevice device, VmNic nic) {
    // <interface type="bridge">
    // <mac address="aa:bb:dd:dd:aa:bb"/>
    // <model type="virtio"/>
    // <source bridge="engine"/>
    // [<driver name="vhost/qemu" queues="int"/>]
    // [<filterref filter='filter name'>
    // [<parameter name='parameter name' value='parameter value'>]
    // </filterref>]
    // [<tune><sndbuf>0</sndbuf></tune>]
    // [<link state='up|down'/>]
    // [<bandwidth>
    // [<inbound average="int" [burst="int"]  [peak="int"]/>]
    // [<outbound average="int" [burst="int"]  [peak="int"]/>]
    // </bandwidth>]
    // </interface>
    // 
    // -- or -- a slightly different SR-IOV network interface
    // <interface type='hostdev' managed='no'>
    // <driver name='vfio'/>
    // <source>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // </source>
    // <mac address='52:54:00:6d:90:02'/>
    // <vlan>
    // <tag id=100/>
    // </vlan>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // <boot order='1'/>
    // </interface>
    writer.writeStartElement("interface");
    VnicProfile vnicProfile = vmInfoBuildUtils.getVnicProfile(nic.getVnicProfileId());
    Network network = vnicProfile != null ? vmInfoBuildUtils.getNetwork(vnicProfile.getNetworkId()) : null;
    boolean networkless = network == null;
    switch(device.getDevice()) {
        case "bridge":
            writer.writeAttributeString("type", "bridge");
            writer.writeStartElement("model");
            VmInterfaceType ifaceType = nic.getType() != null ? VmInterfaceType.forValue(nic.getType()) : VmInterfaceType.rtl8139;
            String evaluatedIfaceType = vmInfoBuildUtils.evaluateInterfaceType(ifaceType, vm.getHasAgent());
            if ("pv".equals(evaluatedIfaceType)) {
                evaluatedIfaceType = "virtio";
            }
            writer.writeAttributeString("type", evaluatedIfaceType);
            writer.writeEndElement();
            writer.writeStartElement("link");
            writer.writeAttributeString("state", !networkless && nic.isLinked() ? "up" : "down");
            writer.writeEndElement();
            // The source element is different when using legacy or OVS bridge. We
            // expect VDSM to replace the source element if it is a non legacy bridge
            writer.writeStartElement("source");
            writer.writeAttributeString("bridge", !networkless ? network.getVdsmName() : ";vdsmdummy;");
            writer.writeEndElement();
            String queues = vnicProfile != null ? vnicProfile.getCustomProperties().remove("queues") : null;
            String driverName = getDriverNameForNetwork(!networkless ? network.getName() : "");
            if (queues != null || driverName != null) {
                writer.writeStartElement("driver");
                if (queues != null) {
                    writer.writeAttributeString("queues", queues);
                    if (driverName == null) {
                        driverName = "vhost";
                    }
                }
                writer.writeAttributeString("name", driverName);
                writer.writeEndElement();
            }
            break;
        case "hostdev":
            writer.writeAttributeString("type", "hostdev");
            writer.writeAttributeString("managed", "no");
            writer.writeStartElement("driver");
            writer.writeAttributeString("name", "vfio");
            writer.writeEndElement();
            if (!networkless && NetworkUtils.isVlan(network)) {
                writer.writeStartElement("vlan");
                writer.writeStartElement("tag");
                writer.writeAttributeString("id", network.getVlanId().toString());
                writer.writeEndElement();
                writer.writeEndElement();
            }
            writer.writeStartElement("source");
            writer.writeStartElement("address");
            String vfDeviceName = passthroughVnicToVfMap.get(nic.getId());
            Map<String, String> sourceAddress = hostDevicesSupplier.get().get(vfDeviceName).getAddress();
            sourceAddress.put("type", "pci");
            sourceAddress.forEach(writer::writeAttributeString);
            writer.writeEndElement();
            writer.writeEndElement();
            break;
    }
    writeAlias(device);
    writeAddress(device);
    writeBootOrder(device.getBootOrder());
    writer.writeStartElement("mac");
    writer.writeAttributeString("address", nic.getMacAddress());
    writer.writeEndElement();
    NetworkFilter networkFilter = vmInfoBuildUtils.fetchVnicProfileNetworkFilter(nic);
    if (networkFilter != null) {
        writer.writeStartElement("filterref");
        writer.writeAttributeString("filter", networkFilter.getName());
        vmInfoBuildUtils.getAllNetworkFiltersForVmNic(nic.getId()).forEach(parameter -> {
            writer.writeStartElement("parameter");
            writer.writeAttributeString("name", parameter.getName());
            writer.writeAttributeString("value", parameter.getValue());
            writer.writeEndElement();
        });
        writer.writeEndElement();
    }
    String sndbuf = vmCustomProperties.get("sndbuf");
    if (sndbuf != null) {
        writer.writeStartElement("tune");
        writer.writeElement("sndbuf", sndbuf);
        writer.writeEndElement();
    }
    Map<String, Object> profileData = new HashMap<>();
    vmInfoBuildUtils.addProfileDataToNic(profileData, vm, device, nic);
    List<String> portMirroring = (List<String>) profileData.get(VdsProperties.PORT_MIRRORING);
    if (portMirroring != null && !portMirroring.isEmpty()) {
        // store port mirroring in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("portMirroring", portMirroring);
    }
    Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(device.getId());
    if (runtimeCustomProperties != null && !runtimeCustomProperties.isEmpty()) {
        // store runtime custom properties in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("runtimeCustomProperties", runtimeCustomProperties);
    }
    if (vnicProfile != null && vnicProfile.getCustomProperties() != null) {
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).putAll(vnicProfile.getCustomProperties());
    }
    writer.writeStartElement("bandwidth");
    @SuppressWarnings("unchecked")
    Map<String, Object> specParams = (Map<String, Object>) profileData.get("specParams");
    if (specParams != null && (specParams.containsKey("inbound") || specParams.containsKey("outbound"))) {
        @SuppressWarnings("unchecked")
        Map<String, String> inboundMap = (Map<String, String>) specParams.get("inbound");
        if (inboundMap != null && !inboundMap.isEmpty()) {
            writer.writeStartElement("inbound");
            writer.writeAttributeString("average", String.valueOf(inboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(inboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(inboundMap.get("peak")));
            writer.writeEndElement();
        }
        @SuppressWarnings("unchecked")
        Map<String, String> outboundMap = (Map<String, String>) specParams.get("outbound");
        if (outboundMap != null && !outboundMap.isEmpty()) {
            writer.writeStartElement("outbound");
            writer.writeAttributeString("average", String.valueOf(outboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(outboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(outboundMap.get("peak")));
            writer.writeEndElement();
        }
    }
    writer.writeEndElement();
    writer.writeEndElement();
}
#end_block

#method_before
private KdumpDetectionResult detectHostKdumping() {
    VdsKdumpStatus kdumpStatus;
    long messageInterval = TimeUnit.SECONDS.toMillis(Config.<Integer>getValue(ConfigValues.FenceKdumpMessageInterval));
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.SECOND, Config.<Integer>getValue(ConfigValues.KdumpStartedTimeout));
    long timeout = cal.getTimeInMillis();
    boolean kdumpDetected = false;
    while (true) {
        if (!isListenerAlive()) {
            // fence_kdump listener is down, continue with hard fencing
            return KdumpDetectionResult.LISTENER_NOT_ALIVE;
        }
        kdumpStatus = vdsKdumpStatusDao.get(getVdsId());
        if (kdumpStatus == null) {
            // host kdump flow hasn't started yet
            if (timeout < System.currentTimeMillis()) {
                // host kdump flow not detected until timeout, continue with hard fencing
                return KdumpDetectionResult.KDUMP_NOT_DETECTED;
            }
        } else {
            if (!kdumpDetected) {
                // host kdump status detected
                kdumpDetected = true;
                auditLogDirector.log(this, AuditLogType.KDUMP_FLOW_DETECTED_ON_VDS);
                // set status to Kdumping to prevent Host Monitoring errors and wait until kdump finishes
                setVdsStatus(VDSStatus.Kdumping);
                // restart VMs running on Vds
                restartVdsVms();
                // execute all actions needed to manual fence the host (without PM fencing)
                executeFenceVdsManuallyAction();
            }
            if (kdumpStatus.getStatus() == KdumpFlowStatus.FINISHED) {
                auditLogDirector.log(this, AuditLogType.KDUMP_FLOW_FINISHED_ON_VDS);
                // host finished its kdump flow, set status to Non Responsive
                setVdsStatus(VDSStatus.NonResponsive);
                return KdumpDetectionResult.KDUMP_FINISHED;
            }
        }
        ThreadUtils.sleep(messageInterval);
    }
}
#method_after
private KdumpDetectionResult detectHostKdumping() {
    VdsKdumpStatus kdumpStatus;
    long messageInterval = TimeUnit.SECONDS.toMillis(Config.<Integer>getValue(ConfigValues.FenceKdumpMessageInterval));
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.SECOND, Config.<Integer>getValue(ConfigValues.KdumpStartedTimeout));
    long timeout = cal.getTimeInMillis();
    boolean kdumpDetected = false;
    while (true) {
        if (!isListenerAlive()) {
            // fence_kdump listener is down, continue with hard fencing
            return KdumpDetectionResult.LISTENER_NOT_ALIVE;
        }
        kdumpStatus = vdsKdumpStatusDao.get(getVdsId());
        if (kdumpStatus == null) {
            // host kdump flow hasn't started yet
            if (timeout < System.currentTimeMillis()) {
                // host kdump flow not detected until timeout, continue with hard fencing
                return KdumpDetectionResult.KDUMP_NOT_DETECTED;
            }
        } else {
            if (!kdumpDetected) {
                // host kdump status detected
                kdumpDetected = true;
                auditLogDirector.log(this, AuditLogType.KDUMP_FLOW_DETECTED_ON_VDS);
                // set status to Kdumping to prevent Host Monitoring errors and wait until kdump finishes
                setVdsStatus(VDSStatus.Kdumping);
                // restart VMs running on Vds
                restartVdsVms();
                // execute all actions needed to manual fence the host (without PM fencing)
                executeFenceVdsManuallyAction();
            }
            if (kdumpStatus.getStatus() == KdumpFlowStatus.FINISHED) {
                // host finished its kdump flow, set status to Non Responsive
                setVdsStatus(VDSStatus.NonResponsive);
                return KdumpDetectionResult.KDUMP_FINISHED;
            }
        }
        ThreadUtils.sleep(messageInterval);
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    setVds(null);
    if (getVds() == null) {
        setCommandShouldBeLogged(false);
        log.info("Kdump detection will not be executed on host '{}' ({}) since it doesn't exist anymore.", getVdsName(), getVdsId());
        getReturnValue().setSucceeded(false);
        return;
    }
    kdumpDetectionResult = detectHostKdumping();
    getReturnValue().setSucceeded(kdumpDetectionResult == KdumpDetectionResult.KDUMP_FINISHED);
}
#method_after
@Override
protected void executeCommand() {
    setVds(null);
    if (getVds() == null) {
        setCommandShouldBeLogged(false);
        log.info("Kdump detection will not be executed on host '{}' ({}) since it doesn't exist anymore.", getVdsName(), getVdsId());
        getReturnValue().setSucceeded(false);
        return;
    }
    setCommandShouldBeLogged(true);
    kdumpDetectionResult = detectHostKdumping();
    getReturnValue().setSucceeded(kdumpDetectionResult == KdumpDetectionResult.KDUMP_FINISHED);
}
#end_block

#method_before
@Override
public void setUsePatternFly(final boolean use) {
    super.setUsePatternFly(use);
    if (use) {
        getCheckboxWidgetLabel().getStyle().setPaddingLeft(10, Unit.PX);
        getCheckboxWidgetLabel().getStyle().setPaddingRight(10, Unit.PX);
        getCheckboxWidgetLabel().getStyle().setPosition(Position.RELATIVE);
        // $NON-NLS-1$
        getCheckboxWidgetLabel().getStyle().setProperty(MAX_WIDTH, "94%");
        noPaddingNoFixes();
        removeWrapperStyleName(CBE_RIGHT_OF_LABEL_PFLY_FIX);
    }
}
#method_after
@Override
public void setUsePatternFly(final boolean use) {
    super.setUsePatternFly(use);
    if (use) {
        getCheckboxWidgetLabel().getStyle().setPaddingLeft(10, Unit.PX);
        getCheckboxWidgetLabel().getStyle().setPaddingRight(10, Unit.PX);
        getCheckboxWidgetLabel().getStyle().setPosition(Position.RELATIVE);
        // $NON-NLS-1$
        getCheckboxWidgetLabel().getStyle().setProperty(MAX_WIDTH, "94%");
        noPaddingNoFixes();
    }
}
#end_block

#method_before
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Menu
    bindSingletonPresenterWidget(MenuPresenterWidget.class, MenuPresenterWidget.ViewDef.class, MenuView.class);
    bind(MenuDetailsProvider.class).to(MenuPresenterWidget.class).in(Singleton.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    bindPresenterWidget(AffinityLabelPopupPresenterWidget.class, AffinityLabelPopupPresenterWidget.ViewDef.class, AffinityLabelPopupView.class);
    // Main section: main tabs
    bindPresenter(MainDataCenterPresenter.class, MainDataCenterPresenter.ViewDef.class, MainDataCenterView.class, MainDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainClusterPresenter.class, MainClusterPresenter.ViewDef.class, MainClusterView.class, MainClusterPresenter.ProxyDef.class);
    bindPresenter(MainHostPresenter.class, MainHostPresenter.ViewDef.class, MainHostView.class, MainHostPresenter.ProxyDef.class);
    bindPresenter(MainNetworkPresenter.class, MainNetworkPresenter.ViewDef.class, MainNetworkView.class, MainNetworkPresenter.ProxyDef.class);
    bindPresenter(MainVnicProfilePresenter.class, MainVnicProfilePresenter.ViewDef.class, MainVnicProfileView.class, MainVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainProviderPresenter.class, MainProviderPresenter.ViewDef.class, MainProviderView.class, MainProviderPresenter.ProxyDef.class);
    bindPresenter(MainEngineErrataPresenter.class, MainEngineErrataPresenter.ViewDef.class, MainEngineErrataView.class, MainEngineErrataPresenter.ProxyDef.class);
    bindPresenter(MainSessionPresenter.class, MainSessionPresenter.ViewDef.class, MainSessionView.class, MainSessionPresenter.ProxyDef.class);
    bindPresenter(MainStoragePresenter.class, MainStoragePresenter.ViewDef.class, MainStorageView.class, MainStoragePresenter.ProxyDef.class);
    bindPresenter(MainVirtualMachinePresenter.class, MainVirtualMachinePresenter.ViewDef.class, MainVirtualMachineView.class, MainVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainPoolPresenter.class, MainPoolPresenter.ViewDef.class, MainPoolView.class, MainPoolPresenter.ProxyDef.class);
    bindPresenter(MainTemplatePresenter.class, MainTemplatePresenter.ViewDef.class, MainTemplateView.class, MainTemplatePresenter.ProxyDef.class);
    bindPresenter(MainUserPresenter.class, MainUserPresenter.ViewDef.class, MainUserView.class, MainUserPresenter.ProxyDef.class);
    bindPresenter(MainEventPresenter.class, MainEventPresenter.ViewDef.class, MainEventView.class, MainEventPresenter.ProxyDef.class);
    bindPresenter(MainQuotaPresenter.class, MainQuotaPresenter.ViewDef.class, MainQuotaView.class, MainQuotaPresenter.ProxyDef.class);
    bindPresenter(MainVolumePresenter.class, MainVolumePresenter.ViewDef.class, MainVolumeView.class, MainVolumePresenter.ProxyDef.class);
    bindPresenter(MainDiskPresenter.class, MainDiskPresenter.ViewDef.class, MainDiskView.class, MainDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQosPresenter.class, SubTabDataCenterQosPresenter.ViewDef.class, SubTabDataCenterQosView.class, SubTabDataCenterQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<StoragePool, DataCenterListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<DataCenterListModel>>() {
    }, new TypeLiteral<SearchPanelView<DataCenterListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<StoragePool, DataCenterListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<StoragePool>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<StoragePool, DataCenterListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<StoragePool>>() {
    }, new TypeLiteral<ActionPanelView<StoragePool>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StoragePool>>() {
    }, new TypeLiteral<DetailActionPanelView<StoragePool>>() {
    });
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterDiskPresenter.class, SubTabStorageRegisterDiskPresenter.ViewDef.class, SubTabStorageRegisterDiskView.class, SubTabStorageRegisterDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterDiskImagePresenter.class, SubTabStorageRegisterDiskImagePresenter.ViewDef.class, SubTabStorageRegisterDiskImageView.class, SubTabStorageRegisterDiskImagePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDRPresenter.class, SubTabStorageDRPresenter.ViewDef.class, SubTabStorageDRView.class, SubTabStorageDRPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageLeasePresenter.class, SubTabStorageLeasePresenter.ViewDef.class, SubTabStorageLeaseView.class, SubTabStorageLeasePresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<StorageDomain, StorageListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<StorageListModel>>() {
    }, new TypeLiteral<SearchPanelView<StorageListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<StorageDomain, StorageListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<StorageDomain>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<StorageDomain, StorageListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<StorageDomain>>() {
    }, new TypeLiteral<ActionPanelView<StorageDomain>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageDomain>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageDomain>>() {
    });
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    bindPresenterWidget(GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotConfigureOptionsPopupView.class);
    bindPresenterWidget(GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterClusterSnapshotConfigureOptionsPopupView.class);
    bindPresenterWidget(GlusterVolumeSnapshotCreatePopupPresenterWidget.class, GlusterVolumeSnapshotCreatePopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotCreatePopupView.class);
    bindPresenter(SubTabClusterAffinityLabelPresenter.class, SubTabClusterAffinityLabelPresenter.ViewDef.class, SubTabClusterAffinityLabelView.class, SubTabClusterAffinityLabelPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Cluster, ClusterListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<ClusterListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<ClusterListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Cluster, ClusterListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Cluster>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Cluster, ClusterListModel<Void>>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Cluster>>() {
    }, new TypeLiteral<ActionPanelView<Cluster>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Cluster>>() {
    }, new TypeLiteral<DetailActionPanelView<Cluster>>() {
    });
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(HostGeneralSubTabPresenter.class, HostGeneralSubTabPresenter.ViewDef.class, HostGeneralSubTabView.class, HostGeneralSubTabPresenter.ProxyDef.class);
    bindPresenter(SubTabHostErrataPresenter.class, SubTabHostErrataPresenter.ViewDef.class, SubTabHostErrataView.class, SubTabHostErrataPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostDevicePresenter.class, SubTabHostDevicePresenter.ViewDef.class, SubTabHostDeviceView.class, SubTabHostDevicePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterStorageDevicesPresenter.class, SubTabHostGlusterStorageDevicesPresenter.ViewDef.class, SubTabHostGlusterStorageDevicesView.class, SubTabHostGlusterStorageDevicesPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VDS, HostListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<HostListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<HostListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<VDS, HostListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<VDS>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<VDS, HostListModel<Void>>>() {
    });
    bindPresenter(SubTabHostAffinityLabelPresenter.class, SubTabHostAffinityLabelPresenter.ViewDef.class, SubTabHostAffinityLabelView.class, SubTabHostAffinityLabelPresenter.ProxyDef.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VDS>>() {
    }, new TypeLiteral<ActionPanelView<VDS>>() {
    });
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGuestContainerPresenter.class, SubTabVirtualMachineGuestContainerPresenter.ViewDef.class, SubTabVirtualMachineGuestContainerView.class, SubTabVirtualMachineGuestContainerPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVmDevicePresenter.class, SubTabVirtualMachineVmDevicePresenter.ViewDef.class, SubTabVirtualMachineVmDevicesView.class, SubTabVirtualMachineVmDevicePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGuestInfoPresenter.class, SubTabVirtualMachineGuestInfoPresenter.ViewDef.class, SubTabVirtualMachineGuestInfoView.class, SubTabVirtualMachineGuestInfoPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineHostDevicePresenter.class, SubTabVirtualMachineHostDevicePresenter.ViewDef.class, SubTabVirtualMachineHostDeviceView.class, SubTabVirtualMachineHostDevicePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineErrataPresenter.class, SubTabVirtualMachineErrataPresenter.ViewDef.class, SubTabVirtualMachineErrataView.class, SubTabVirtualMachineErrataPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VM, VmListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<VmListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<VmListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<VM, VmListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<VM>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<VM, VmListModel<Void>>>() {
    });
    bindPresenter(SubTabVirtualMachineAffinityLabelPresenter.class, SubTabVirtualMachineAffinityLabelPresenter.ViewDef.class, SubTabVirtualMachineAffinityLabelView.class, SubTabVirtualMachineAffinityLabelPresenter.ProxyDef.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VM>>() {
    }, new TypeLiteral<ActionPanelView<VM>>() {
    });
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VmPool, PoolListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<PoolListModel>>() {
    }, new TypeLiteral<SearchPanelView<PoolListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<VmPool, PoolListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<VmPool>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<VmPool, PoolListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VmPool>>() {
    }, new TypeLiteral<ActionPanelView<VmPool>>() {
    });
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VmTemplate, TemplateListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<TemplateListModel>>() {
    }, new TypeLiteral<SearchPanelView<TemplateListModel>>() {
    });
    bindPresenterWidget(TemplateBreadCrumbsPresenterWidget.class, TemplateBreadCrumbsPresenterWidget.TemplateBreadCrumbsViewDef.class, TemplateBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VmTemplate>>() {
    }, new TypeLiteral<ActionPanelView<VmTemplate>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VmTemplate>>() {
    }, new TypeLiteral<DetailActionPanelView<VmTemplate>>() {
    });
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<DbUser, UserListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<UserListModel>>() {
    }, new TypeLiteral<SearchPanelView<UserListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<DbUser, UserListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<DbUser>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<DbUser, UserListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<DbUser>>() {
    }, new TypeLiteral<ActionPanelView<DbUser>>() {
    });
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Quota, QuotaListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<QuotaListModel>>() {
    }, new TypeLiteral<SearchPanelView<QuotaListModel>>() {
    });
    bindPresenterWidget(QuotaBreadCrumbsPresenterWidget.class, QuotaBreadCrumbsPresenterWidget.QuotaBreadCrumbsViewDef.class, QuotaBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Quota>>() {
    }, new TypeLiteral<ActionPanelView<Quota>>() {
    });
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Disk, DiskListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<DiskListModel>>() {
    }, new TypeLiteral<SearchPanelView<DiskListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Disk, DiskListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Disk>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Disk, DiskListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Disk>>() {
    }, new TypeLiteral<ActionPanelView<Disk>>() {
    });
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<NetworkView, NetworkListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<NetworkListModel>>() {
    }, new TypeLiteral<SearchPanelView<NetworkListModel>>() {
    });
    bindPresenterWidget(NetworkBreadCrumbsPresenterWidget.class, NetworkBreadCrumbsPresenterWidget.NetworkBreadCrumbsViewDef.class, NetworkBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<NetworkView>>() {
    }, new TypeLiteral<ActionPanelView<NetworkView>>() {
    });
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderSecretPresenter.class, SubTabProviderSecretPresenter.ViewDef.class, SubTabProviderSecretView.class, SubTabProviderSecretPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Provider, ProviderListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<ProviderListModel>>() {
    }, new TypeLiteral<SearchPanelView<ProviderListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Provider, ProviderListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Provider>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Provider, ProviderListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Provider>>() {
    }, new TypeLiteral<ActionPanelView<Provider>>() {
    });
    // Errata
    bindPresenter(ErrataSubTabPanelPresenter.class, ErrataSubTabPanelPresenter.ViewDef.class, ErrataSubTabPanelView.class, ErrataSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabEngineErrataDetailsPresenter.class, SubTabEngineErrataDetailsPresenter.ViewDef.class, SubTabEngineErrataDetailsView.class, SubTabEngineErrataDetailsPresenter.ProxyDef.class);
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Erratum, EngineErrataListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Erratum>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Erratum, EngineErrataListModel>>() {
    });
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    bindPresenterWidget(VnicProfileBreadCrumbsPresenterWidget.class, VnicProfileBreadCrumbsPresenterWidget.VnicProfileBreadCrumbsViewDef.class, VnicProfileBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VnicProfileView>>() {
    }, new TypeLiteral<ActionPanelView<VnicProfileView>>() {
    });
    // User Sessions
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<UserSession, SessionListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<SessionListModel>>() {
    }, new TypeLiteral<SearchPanelView<SessionListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<UserSession, SessionListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<UserSession>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<UserSession, SessionListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<UserSession>>() {
    }, new TypeLiteral<ActionPanelView<UserSession>>() {
    });
    // Volume
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<GlusterVolumeEntity, VolumeListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<VolumeListModel>>() {
    }, new TypeLiteral<SearchPanelView<VolumeListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<GlusterVolumeEntity, VolumeListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<GlusterVolumeEntity>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<GlusterVolumeEntity, VolumeListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<GlusterVolumeEntity>>() {
    }, new TypeLiteral<ActionPanelView<GlusterVolumeEntity>>() {
    });
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    bindPresenterWidget(VmHighPerformanceConfigurationPresenterWidget.class, VmHighPerformanceConfigurationPresenterWidget.ViewDef.class, VmHighPerformanceConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(ClusterWarningsPopupPresenterWidget.class, ClusterWarningsPopupPresenterWidget.ViewDef.class, ClusterWarningsPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.class, GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.ViewDef.class, GeoRepActionConfirmPopUpView.class);
    bindPresenterWidget(GlusterVolumeGeoReplicationSessionConfigPopupPresenterWidget.class, GlusterVolumeGeoReplicationSessionConfigPopupPresenterWidget.ViewDef.class, GlusterVolumeGeoReplicationSessionConfigPopupView.class);
    bindPresenterWidget(VolumeGeoRepSessionDetailsPopUpPresenterWidget.class, VolumeGeoRepSessionDetailsPopUpPresenterWidget.ViewDef.class, VolumeGeoRepSessionDetailsPopUpView.class);
    bindPresenterWidget(GlusterVolumeGeoRepCreateSessionPopupPresenterWidget.class, GlusterVolumeGeoRepCreateSessionPopupPresenterWidget.ViewDef.class, GlusterVolumeGeoRepCreateSessionPopupView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    bindPresenterWidget(AddDataCenterClusterPopupPresenterWidget.class, AddDataCenterClusterPopupPresenterWidget.ViewDef.class, AddDataCenterClusterPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(NetworkAttachmentPopupPresenterWidget.class, NetworkAttachmentPopupPresenterWidget.ViewDef.class, NetworkAttachmentPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(VfsConfigPopupPresenterWidget.class, VfsConfigPopupPresenterWidget.ViewDef.class, VfsConfigPopupView.class);
    bindPresenterWidget(SetupNetworksLabelPopupPresenterWidget.class, SetupNetworksLabelPopupPresenterWidget.ViewDef.class, SetupNetworksLabelPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    bindPresenterWidget(HostFenceAgentPopupPresenterWidget.class, HostFenceAgentPopupPresenterWidget.ViewDef.class, HostFenceAgentPopupView.class);
    bindPresenterWidget(HostFenceProxyPopupPresenterWidget.class, HostFenceProxyPopupPresenterWidget.ViewDef.class, HostFenceProxyPopupView.class);
    bindPresenterWidget(HostMaintenanceConfirmationPopupPresenterWidget.class, HostMaintenanceConfirmationPopupPresenterWidget.ViewDef.class, HostMaintenanceConfirmationPopupView.class);
    bindPresenterWidget(HostUpgradePopupPresenterWidget.class, HostUpgradePopupPresenterWidget.ViewDef.class, HostUpgradePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportVmFromExternalProviderPopupPresenterWidget.class, ImportVmFromExternalProviderPopupPresenterWidget.ViewDef.class, ImportVmFromExternalProviderPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(VnicProfileMappingPopupPresenterWidget.class, VnicProfileMappingPopupPresenterWidget.ViewDef.class, VnicProfileMappingPopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    bindPresenterWidget(UploadImagePopupPresenterWidget.class, UploadImagePopupPresenterWidget.ViewDef.class, UploadImagePopupView.class);
    bindPresenterWidget(StorageDRPopupPresenterWidget.class, StorageDRPopupPresenterWidget.ViewDef.class, StorageDRPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // OVA Export
    bindPresenterWidget(VmExportOvaPopupPresenterWidget.class, VmExportOvaPopupPresenterWidget.ViewDef.class, VmExportOvaPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    bindPresenterWidget(SingleSelectionVmDiskAttachPopupPresenterWidget.class, SingleSelectionVmDiskAttachPopupPresenterWidget.ViewDef.class, SingleSelectionVmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // VM Sparsify Disk
    bindPresenterWidget(VmDiskSparsifyPopupPresenterWidget.class, VmDiskSparsifyPopupPresenterWidget.ViewDef.class, VmDiskSparsifyPopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateEditPresenterWidget.class, TemplateEditPresenterWidget.ViewDef.class, TemplateEditPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    bindPresenterWidget(StorageQosRemovePopupPresenterWidget.class, StorageQosRemovePopupPresenterWidget.ViewDef.class, StorageQosRemovePopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Host Devices
    bindPresenterWidget(AddVmHostDevicePopupPresenterWidget.class, AddVmHostDevicePopupPresenterWidget.ViewDef.class, AddVmHostDevicePopupView.class);
    bindPresenterWidget(VmRepinHostPopupPresenterWidget.class, VmRepinHostPopupPresenterWidget.ViewDef.class, VmRepinHostPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(CreateBrickPopupPresenterWidget.class, CreateBrickPopupPresenterWidget.ViewDef.class, CreateBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    bindPresenterWidget(ResetBrickPopupPresenterWidget.class, ResetBrickPopupPresenterWidget.ViewDef.class, ResetBrickPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<AuditLog, EventListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<EventListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<EventListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<AuditLog, EventListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<AuditLog>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<AuditLog, EventListModel<Void>>>() {
    });
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    bindPresenterWidget(ProviderSecretPopupPresenterWidget.class, ProviderSecretPopupPresenterWidget.ViewDef.class, ProviderSecretPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
    // Errata details
    bindPresenterWidget(HostErrataListWithDetailsPopupPresenterWidget.class, HostErrataListWithDetailsPopupPresenterWidget.ViewDef.class, HostErrataListWithDetailsPopupView.class);
    bindPresenterWidget(VmErrataListWithDetailsPopupPresenterWidget.class, VmErrataListWithDetailsPopupPresenterWidget.ViewDef.class, VmErrataListWithDetailsPopupView.class);
    bindPresenterWidget(ExpandAllButtonPresenterWidget.class, ExpandAllButtonPresenterWidget.ViewDef.class, ExpandAllButtonView.class);
    // Overlays
    // Tasks
    bindPresenterWidget(TasksPresenterWidget.class, TasksPresenterWidget.ViewDef.class, TasksView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPresenterWidget.class, BookmarkPresenterWidget.ViewDef.class, BookmarkView.class);
    // Tags
    bindPresenterWidget(TagsPresenterWidget.class, TagsPresenterWidget.ViewDef.class, TagsView.class);
    // Popup/detail Action panels
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Permission>>() {
    }, new TypeLiteral<ActionPanelView<Permission>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<MacPool>>() {
    }, new TypeLiteral<ActionPanelView<MacPool>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Role>>() {
    }, new TypeLiteral<ActionPanelView<Role>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<ClusterPolicy>>() {
    }, new TypeLiteral<ActionPanelView<ClusterPolicy>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<InstanceType>>() {
    }, new TypeLiteral<ActionPanelView<InstanceType>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<CpuQos>>() {
    }, new TypeLiteral<ActionPanelView<CpuQos>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<NetworkQoS>>() {
    }, new TypeLiteral<ActionPanelView<NetworkQoS>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<HostNetworkQos>>() {
    }, new TypeLiteral<ActionPanelView<HostNetworkQos>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<DiskProfile>>() {
    }, new TypeLiteral<ActionPanelView<DiskProfile>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<CpuProfile>>() {
    }, new TypeLiteral<ActionPanelView<CpuProfile>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VmNetworkInterface>>() {
    }, new TypeLiteral<ActionPanelView<VmNetworkInterface>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Snapshot>>() {
    }, new TypeLiteral<ActionPanelView<Snapshot>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<HostDeviceView>>() {
    }, new TypeLiteral<ActionPanelView<HostDeviceView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Label>>() {
    }, new TypeLiteral<DetailActionPanelView<Label>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterHookEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterHookEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Network>>() {
    }, new TypeLiteral<DetailActionPanelView<Network>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<IscsiBond>>() {
    }, new TypeLiteral<DetailActionPanelView<IscsiBond>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterBrickEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterBrickEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterVolumeOptionEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterVolumeOptionEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageDevice>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageDevice>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterVolumeSnapshotEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterVolumeSnapshotEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterServerService>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterServerService>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<NetworkCluster>>() {
    }, new TypeLiteral<DetailActionPanelView<NetworkCluster>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<ExternalSubnet>>() {
    }, new TypeLiteral<DetailActionPanelView<ExternalSubnet>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<LibvirtSecret>>() {
    }, new TypeLiteral<DetailActionPanelView<LibvirtSecret>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Permission>>() {
    }, new TypeLiteral<DetailActionPanelView<Permission>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterGeoRepSession>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterGeoRepSession>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<Cluster, NetworkCluster>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<Cluster, NetworkCluster>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<VdsNetworkInterface, VDS>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<VdsNetworkInterface, VDS>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<VmNetworkInterface, VM>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<VmNetworkInterface, VM>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<VmNetworkInterface, VmTemplate>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<VmNetworkInterface, VmTemplate>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageDomainDR>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageDomainDR>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<RepoImage>>() {
    }, new TypeLiteral<DetailActionPanelView<RepoImage>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<DiskModel>>() {
    }, new TypeLiteral<DetailActionPanelView<DiskModel>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<EventSubscriber>>() {
    }, new TypeLiteral<DetailActionPanelView<EventSubscriber>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<AffinityGroup>>() {
    }, new TypeLiteral<DetailActionPanelView<AffinityGroup>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<MacPool>>() {
    }, new TypeLiteral<DetailActionPanelView<MacPool>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Role>>() {
    }, new TypeLiteral<DetailActionPanelView<Role>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<ClusterPolicy>>() {
    }, new TypeLiteral<DetailActionPanelView<ClusterPolicy>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<InstanceType>>() {
    }, new TypeLiteral<DetailActionPanelView<InstanceType>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<CpuQos>>() {
    }, new TypeLiteral<DetailActionPanelView<CpuQos>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<NetworkQoS>>() {
    }, new TypeLiteral<DetailActionPanelView<NetworkQoS>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<HostNetworkQos>>() {
    }, new TypeLiteral<DetailActionPanelView<HostNetworkQos>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<DiskProfile>>() {
    }, new TypeLiteral<DetailActionPanelView<DiskProfile>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<CpuProfile>>() {
    }, new TypeLiteral<DetailActionPanelView<CpuProfile>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VmNetworkInterface>>() {
    }, new TypeLiteral<DetailActionPanelView<VmNetworkInterface>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Snapshot>>() {
    }, new TypeLiteral<DetailActionPanelView<Snapshot>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<HostDeviceView>>() {
    }, new TypeLiteral<DetailActionPanelView<HostDeviceView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<HostInterfaceLineModel>>() {
    }, new TypeLiteral<DetailActionPanelView<HostInterfaceLineModel>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageQos>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageQos>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VDS>>() {
    }, new TypeLiteral<DetailActionPanelView<VDS>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Quota>>() {
    }, new TypeLiteral<DetailActionPanelView<Quota>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VM>>() {
    }, new TypeLiteral<DetailActionPanelView<VM>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VnicProfileView>>() {
    }, new TypeLiteral<DetailActionPanelView<VnicProfileView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<NetworkView>>() {
    }, new TypeLiteral<DetailActionPanelView<NetworkView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Disk>>() {
    }, new TypeLiteral<DetailActionPanelView<Disk>>() {
    });
}
#method_after
@Override
protected void configure() {
    // Common stuff
    bindCommonPresenters();
    // Menu
    bindSingletonPresenterWidget(MenuPresenterWidget.class, MenuPresenterWidget.ViewDef.class, MenuView.class);
    bind(MenuDetailsProvider.class).to(MenuPresenterWidget.class).in(Singleton.class);
    // Main section: common stuff
    bindPresenter(MainSectionPresenter.class, MainSectionPresenter.ViewDef.class, MainSectionView.class, MainSectionPresenter.ProxyDef.class);
    bindPresenter(MainContentPresenter.class, MainContentPresenter.ViewDef.class, MainContentView.class, MainContentPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(HeaderPresenterWidget.class, HeaderPresenterWidget.ViewDef.class, HeaderView.class);
    bindPresenterWidget(AboutPopupPresenterWidget.class, AboutPopupPresenterWidget.ViewDef.class, AboutPopupView.class);
    bindPresenterWidget(ConfigurePopupPresenterWidget.class, ConfigurePopupPresenterWidget.ViewDef.class, ConfigurePopupView.class);
    bindPresenterWidget(RolePopupPresenterWidget.class, RolePopupPresenterWidget.ViewDef.class, RolePopupView.class);
    bindPresenterWidget(ClusterPolicyPopupPresenterWidget.class, ClusterPolicyPopupPresenterWidget.ViewDef.class, ClusterPolicyPopupView.class);
    bindPresenterWidget(ManagePolicyUnitPopupPresenterWidget.class, ManagePolicyUnitPopupPresenterWidget.ViewDef.class, ManagePolicyUnitPopupView.class);
    bindPresenterWidget(SharedMacPoolPopupPresenterWidget.class, SharedMacPoolPopupPresenterWidget.ViewDef.class, SharedMacPoolPopupView.class);
    bindPresenterWidget(AffinityGroupPopupPresenterWidget.class, AffinityGroupPopupPresenterWidget.ViewDef.class, AffinityGroupPopupView.class);
    bindPresenterWidget(AffinityLabelPopupPresenterWidget.class, AffinityLabelPopupPresenterWidget.ViewDef.class, AffinityLabelPopupView.class);
    // Main section: main tabs
    bindPresenter(MainDataCenterPresenter.class, MainDataCenterPresenter.ViewDef.class, MainDataCenterView.class, MainDataCenterPresenter.ProxyDef.class);
    bindPresenter(MainClusterPresenter.class, MainClusterPresenter.ViewDef.class, MainClusterView.class, MainClusterPresenter.ProxyDef.class);
    bindPresenter(MainHostPresenter.class, MainHostPresenter.ViewDef.class, MainHostView.class, MainHostPresenter.ProxyDef.class);
    bindPresenter(MainNetworkPresenter.class, MainNetworkPresenter.ViewDef.class, MainNetworkView.class, MainNetworkPresenter.ProxyDef.class);
    bindPresenter(MainVnicProfilePresenter.class, MainVnicProfilePresenter.ViewDef.class, MainVnicProfileView.class, MainVnicProfilePresenter.ProxyDef.class);
    bindPresenter(MainProviderPresenter.class, MainProviderPresenter.ViewDef.class, MainProviderView.class, MainProviderPresenter.ProxyDef.class);
    bindPresenter(MainEngineErrataPresenter.class, MainEngineErrataPresenter.ViewDef.class, MainEngineErrataView.class, MainEngineErrataPresenter.ProxyDef.class);
    bindPresenter(MainSessionPresenter.class, MainSessionPresenter.ViewDef.class, MainSessionView.class, MainSessionPresenter.ProxyDef.class);
    bindPresenter(MainStoragePresenter.class, MainStoragePresenter.ViewDef.class, MainStorageView.class, MainStoragePresenter.ProxyDef.class);
    bindPresenter(MainVirtualMachinePresenter.class, MainVirtualMachinePresenter.ViewDef.class, MainVirtualMachineView.class, MainVirtualMachinePresenter.ProxyDef.class);
    bindPresenter(MainPoolPresenter.class, MainPoolPresenter.ViewDef.class, MainPoolView.class, MainPoolPresenter.ProxyDef.class);
    bindPresenter(MainTemplatePresenter.class, MainTemplatePresenter.ViewDef.class, MainTemplateView.class, MainTemplatePresenter.ProxyDef.class);
    bindPresenter(MainUserPresenter.class, MainUserPresenter.ViewDef.class, MainUserView.class, MainUserPresenter.ProxyDef.class);
    bindPresenter(MainEventPresenter.class, MainEventPresenter.ViewDef.class, MainEventView.class, MainEventPresenter.ProxyDef.class);
    bindPresenter(MainQuotaPresenter.class, MainQuotaPresenter.ViewDef.class, MainQuotaView.class, MainQuotaPresenter.ProxyDef.class);
    bindPresenter(MainVolumePresenter.class, MainVolumePresenter.ViewDef.class, MainVolumeView.class, MainVolumePresenter.ProxyDef.class);
    bindPresenter(MainDiskPresenter.class, MainDiskPresenter.ViewDef.class, MainDiskView.class, MainDiskPresenter.ProxyDef.class);
    // Main section: sub tabs
    // DataCenter
    bindPresenter(DataCenterSubTabPanelPresenter.class, DataCenterSubTabPanelPresenter.ViewDef.class, DataCenterSubTabPanelView.class, DataCenterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterStoragePresenter.class, SubTabDataCenterStoragePresenter.ViewDef.class, SubTabDataCenterStorageView.class, SubTabDataCenterStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterIscsiBondPresenter.class, SubTabDataCenterIscsiBondPresenter.ViewDef.class, SubTabDataCenterIscsiBondView.class, SubTabDataCenterIscsiBondPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterNetworkPresenter.class, SubTabDataCenterNetworkPresenter.ViewDef.class, SubTabDataCenterNetworkView.class, SubTabDataCenterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQosPresenter.class, SubTabDataCenterQosPresenter.ViewDef.class, SubTabDataCenterQosView.class, SubTabDataCenterQosPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterClusterPresenter.class, SubTabDataCenterClusterPresenter.ViewDef.class, SubTabDataCenterClusterView.class, SubTabDataCenterClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterQuotaPresenter.class, SubTabDataCenterQuotaPresenter.ViewDef.class, SubTabDataCenterQuotaView.class, SubTabDataCenterQuotaPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterPermissionPresenter.class, SubTabDataCenterPermissionPresenter.ViewDef.class, SubTabDataCenterPermissionView.class, SubTabDataCenterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabDataCenterEventPresenter.class, SubTabDataCenterEventPresenter.ViewDef.class, SubTabDataCenterEventView.class, SubTabDataCenterEventPresenter.ProxyDef.class);
    bindPresenterWidget(RecoveryStoragePopupPresenterWidget.class, RecoveryStoragePopupPresenterWidget.ViewDef.class, RecoveryStorageConfirmationPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<StoragePool, DataCenterListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<DataCenterListModel>>() {
    }, new TypeLiteral<SearchPanelView<DataCenterListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<StoragePool, DataCenterListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<StoragePool>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<StoragePool, DataCenterListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<StoragePool>>() {
    }, new TypeLiteral<ActionPanelView<StoragePool>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StoragePool>>() {
    }, new TypeLiteral<DetailActionPanelView<StoragePool>>() {
    });
    // Storage
    bindPresenter(StorageSubTabPanelPresenter.class, StorageSubTabPanelPresenter.ViewDef.class, StorageSubTabPanelView.class, StorageSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageGeneralPresenter.class, SubTabStorageGeneralPresenter.ViewDef.class, SubTabStorageGeneralView.class, SubTabStorageGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDataCenterPresenter.class, SubTabStorageDataCenterPresenter.ViewDef.class, SubTabStorageDataCenterView.class, SubTabStorageDataCenterPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmBackupPresenter.class, SubTabStorageVmBackupPresenter.ViewDef.class, SubTabStorageVmBackupView.class, SubTabStorageVmBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplateBackupPresenter.class, SubTabStorageTemplateBackupPresenter.ViewDef.class, SubTabStorageTemplateBackupView.class, SubTabStorageTemplateBackupPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterVmPresenter.class, SubTabStorageRegisterVmPresenter.ViewDef.class, SubTabStorageRegisterVmView.class, SubTabStorageRegisterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterTemplatePresenter.class, SubTabStorageRegisterTemplatePresenter.ViewDef.class, SubTabStorageRegisterTemplateView.class, SubTabStorageRegisterTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageVmPresenter.class, SubTabStorageVmPresenter.ViewDef.class, SubTabStorageVmView.class, SubTabStorageVmPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageTemplatePresenter.class, SubTabStorageTemplatePresenter.ViewDef.class, SubTabStorageTemplateView.class, SubTabStorageTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageIsoPresenter.class, SubTabStorageIsoPresenter.ViewDef.class, SubTabStorageIsoView.class, SubTabStorageIsoPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskPresenter.class, SubTabStorageDiskPresenter.ViewDef.class, SubTabStorageDiskView.class, SubTabStorageDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterDiskPresenter.class, SubTabStorageRegisterDiskPresenter.ViewDef.class, SubTabStorageRegisterDiskView.class, SubTabStorageRegisterDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageRegisterDiskImagePresenter.class, SubTabStorageRegisterDiskImagePresenter.ViewDef.class, SubTabStorageRegisterDiskImageView.class, SubTabStorageRegisterDiskImagePresenter.ProxyDef.class);
    bindPresenter(SubTabStorageSnapshotPresenter.class, SubTabStorageSnapshotPresenter.ViewDef.class, SubTabStorageSnapshotView.class, SubTabStorageSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDRPresenter.class, SubTabStorageDRPresenter.ViewDef.class, SubTabStorageDRView.class, SubTabStorageDRPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageLeasePresenter.class, SubTabStorageLeasePresenter.ViewDef.class, SubTabStorageLeaseView.class, SubTabStorageLeasePresenter.ProxyDef.class);
    bindPresenter(SubTabStoragePermissionPresenter.class, SubTabStoragePermissionPresenter.ViewDef.class, SubTabStoragePermissionView.class, SubTabStoragePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageEventPresenter.class, SubTabStorageEventPresenter.ViewDef.class, SubTabStorageEventView.class, SubTabStorageEventPresenter.ProxyDef.class);
    bindPresenter(SubTabStorageDiskProfilePresenter.class, SubTabStorageDiskProfilePresenter.ViewDef.class, SubTabStorageDiskProfileView.class, SubTabStorageDiskProfilePresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<StorageDomain, StorageListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<StorageListModel>>() {
    }, new TypeLiteral<SearchPanelView<StorageListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<StorageDomain, StorageListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<StorageDomain>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<StorageDomain, StorageListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<StorageDomain>>() {
    }, new TypeLiteral<ActionPanelView<StorageDomain>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageDomain>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageDomain>>() {
    });
    // Cluster
    bindPresenter(ClusterSubTabPanelPresenter.class, ClusterSubTabPanelPresenter.ViewDef.class, ClusterSubTabPanelView.class, ClusterSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGeneralPresenter.class, SubTabClusterGeneralPresenter.ViewDef.class, SubTabClusterGeneralView.class, SubTabClusterGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterHostPresenter.class, SubTabClusterHostPresenter.ViewDef.class, SubTabClusterHostView.class, SubTabClusterHostPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterVmPresenter.class, SubTabClusterVmPresenter.ViewDef.class, SubTabClusterVmView.class, SubTabClusterVmPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterNetworkPresenter.class, SubTabClusterNetworkPresenter.ViewDef.class, SubTabClusterNetworkView.class, SubTabClusterNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterServicePresenter.class, SubTabClusterServicePresenter.ViewDef.class, SubTabClusterServiceView.class, SubTabClusterServicePresenter.ProxyDef.class);
    bindPresenter(SubTabClusterGlusterHookPresenter.class, SubTabClusterGlusterHookPresenter.ViewDef.class, SubTabClusterGlusterHookView.class, SubTabClusterGlusterHookPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterAffinityGroupPresenter.class, SubTabClusterAffinityGroupPresenter.ViewDef.class, SubTabClusterAffinityGroupView.class, SubTabClusterAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterPermissionPresenter.class, SubTabClusterPermissionPresenter.ViewDef.class, SubTabClusterPermissionView.class, SubTabClusterPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabClusterCpuProfilePresenter.class, SubTabClusterCpuProfilePresenter.ViewDef.class, SubTabClusterCpuProfileView.class, SubTabClusterCpuProfilePresenter.ProxyDef.class);
    bindPresenterWidget(GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterVolumeSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotConfigureOptionsPopupView.class);
    bindPresenterWidget(GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.class, GlusterClusterSnapshotConfigureOptionsPopupPresenterWidget.ViewDef.class, GlusterClusterSnapshotConfigureOptionsPopupView.class);
    bindPresenterWidget(GlusterVolumeSnapshotCreatePopupPresenterWidget.class, GlusterVolumeSnapshotCreatePopupPresenterWidget.ViewDef.class, GlusterVolumeSnapshotCreatePopupView.class);
    bindPresenter(SubTabClusterAffinityLabelPresenter.class, SubTabClusterAffinityLabelPresenter.ViewDef.class, SubTabClusterAffinityLabelView.class, SubTabClusterAffinityLabelPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Cluster, ClusterListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<ClusterListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<ClusterListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Cluster, ClusterListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Cluster>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Cluster, ClusterListModel<Void>>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Cluster>>() {
    }, new TypeLiteral<ActionPanelView<Cluster>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Cluster>>() {
    }, new TypeLiteral<DetailActionPanelView<Cluster>>() {
    });
    // Host
    bindPresenter(HostSubTabPanelPresenter.class, HostSubTabPanelPresenter.ViewDef.class, HostSubTabPanelView.class, HostSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(HostGeneralSubTabPresenter.class, HostGeneralSubTabPresenter.ViewDef.class, HostGeneralSubTabView.class, HostGeneralSubTabPresenter.ProxyDef.class);
    bindPresenter(SubTabHostErrataPresenter.class, SubTabHostErrataPresenter.ViewDef.class, SubTabHostErrataView.class, SubTabHostErrataPresenter.ProxyDef.class);
    bindPresenter(SubTabHostVmPresenter.class, SubTabHostVmPresenter.ViewDef.class, SubTabHostVmView.class, SubTabHostVmPresenter.ProxyDef.class);
    bindPresenter(SubTabHostInterfacePresenter.class, SubTabHostInterfacePresenter.ViewDef.class, SubTabHostInterfaceView.class, SubTabHostInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabHostDevicePresenter.class, SubTabHostDevicePresenter.ViewDef.class, SubTabHostDeviceView.class, SubTabHostDevicePresenter.ProxyDef.class);
    bindPresenter(SubTabHostHookPresenter.class, SubTabHostHookPresenter.ViewDef.class, SubTabHostHookView.class, SubTabHostHookPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterSwiftPresenter.class, SubTabHostGlusterSwiftPresenter.ViewDef.class, SubTabHostGlusterSwiftView.class, SubTabHostGlusterSwiftPresenter.ProxyDef.class);
    bindPresenter(SubTabHostPermissionPresenter.class, SubTabHostPermissionPresenter.ViewDef.class, SubTabHostPermissionView.class, SubTabHostPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabHostEventPresenter.class, SubTabHostEventPresenter.ViewDef.class, SubTabHostEventView.class, SubTabHostEventPresenter.ProxyDef.class);
    bindPresenter(SubTabHostBrickPresenter.class, SubTabHostBrickPresenter.ViewDef.class, SubTabHostBrickView.class, SubTabHostBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabHostGlusterStorageDevicesPresenter.class, SubTabHostGlusterStorageDevicesPresenter.ViewDef.class, SubTabHostGlusterStorageDevicesView.class, SubTabHostGlusterStorageDevicesPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VDS, HostListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<HostListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<HostListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<VDS, HostListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<VDS>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<VDS, HostListModel<Void>>>() {
    });
    bindPresenter(SubTabHostAffinityLabelPresenter.class, SubTabHostAffinityLabelPresenter.ViewDef.class, SubTabHostAffinityLabelView.class, SubTabHostAffinityLabelPresenter.ProxyDef.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VDS>>() {
    }, new TypeLiteral<ActionPanelView<VDS>>() {
    });
    // VirtualMachine
    bindPresenter(VirtualMachineSubTabPanelPresenter.class, VirtualMachineSubTabPanelPresenter.ViewDef.class, VirtualMachineSubTabPanelView.class, VirtualMachineSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGeneralPresenter.class, SubTabVirtualMachineGeneralPresenter.ViewDef.class, SubTabVirtualMachineGeneralView.class, SubTabVirtualMachineGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineNetworkInterfacePresenter.class, SubTabVirtualMachineNetworkInterfacePresenter.ViewDef.class, SubTabVirtualMachineNetworkInterfaceView.class, SubTabVirtualMachineNetworkInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVirtualDiskPresenter.class, SubTabVirtualMachineVirtualDiskPresenter.ViewDef.class, SubTabVirtualMachineVirtualDiskView.class, SubTabVirtualMachineVirtualDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineSnapshotPresenter.class, SubTabVirtualMachineSnapshotPresenter.ViewDef.class, SubTabVirtualMachineSnapshotView.class, SubTabVirtualMachineSnapshotPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineApplicationPresenter.class, SubTabVirtualMachineApplicationPresenter.ViewDef.class, SubTabVirtualMachineApplicationView.class, SubTabVirtualMachineApplicationPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGuestContainerPresenter.class, SubTabVirtualMachineGuestContainerPresenter.ViewDef.class, SubTabVirtualMachineGuestContainerView.class, SubTabVirtualMachineGuestContainerPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineVmDevicePresenter.class, SubTabVirtualMachineVmDevicePresenter.ViewDef.class, SubTabVirtualMachineVmDevicesView.class, SubTabVirtualMachineVmDevicePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineAffinityGroupPresenter.class, SubTabVirtualMachineAffinityGroupPresenter.ViewDef.class, SubTabVirtualMachineAffinityGroupView.class, SubTabVirtualMachineAffinityGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachinePermissionPresenter.class, SubTabVirtualMachinePermissionPresenter.ViewDef.class, SubTabVirtualMachinePermissionView.class, SubTabVirtualMachinePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineGuestInfoPresenter.class, SubTabVirtualMachineGuestInfoPresenter.ViewDef.class, SubTabVirtualMachineGuestInfoView.class, SubTabVirtualMachineGuestInfoPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineEventPresenter.class, SubTabVirtualMachineEventPresenter.ViewDef.class, SubTabVirtualMachineEventView.class, SubTabVirtualMachineEventPresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineHostDevicePresenter.class, SubTabVirtualMachineHostDevicePresenter.ViewDef.class, SubTabVirtualMachineHostDeviceView.class, SubTabVirtualMachineHostDevicePresenter.ProxyDef.class);
    bindPresenter(SubTabVirtualMachineErrataPresenter.class, SubTabVirtualMachineErrataPresenter.ViewDef.class, SubTabVirtualMachineErrataView.class, SubTabVirtualMachineErrataPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VM, VmListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<VmListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<VmListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<VM, VmListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<VM>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<VM, VmListModel<Void>>>() {
    });
    bindPresenter(SubTabVirtualMachineAffinityLabelPresenter.class, SubTabVirtualMachineAffinityLabelPresenter.ViewDef.class, SubTabVirtualMachineAffinityLabelView.class, SubTabVirtualMachineAffinityLabelPresenter.ProxyDef.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VM>>() {
    }, new TypeLiteral<ActionPanelView<VM>>() {
    });
    // Pool
    bindPresenter(PoolSubTabPanelPresenter.class, PoolSubTabPanelPresenter.ViewDef.class, PoolSubTabPanelView.class, PoolSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolGeneralPresenter.class, SubTabPoolGeneralPresenter.ViewDef.class, SubTabPoolGeneralView.class, SubTabPoolGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolVmPresenter.class, SubTabPoolVmPresenter.ViewDef.class, SubTabPoolVmView.class, SubTabPoolVmPresenter.ProxyDef.class);
    bindPresenter(SubTabPoolPermissionPresenter.class, SubTabPoolPermissionPresenter.ViewDef.class, SubTabPoolPermissionView.class, SubTabPoolPermissionPresenter.ProxyDef.class);
    bindPresenterWidget(PoolNewPopupPresenterWidget.class, PoolNewPopupPresenterWidget.ViewDef.class, PoolNewPopupView.class);
    bindPresenterWidget(PoolEditPopupPresenterWidget.class, PoolEditPopupPresenterWidget.ViewDef.class, PoolEditPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VmPool, PoolListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<PoolListModel>>() {
    }, new TypeLiteral<SearchPanelView<PoolListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<VmPool, PoolListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<VmPool>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<VmPool, PoolListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VmPool>>() {
    }, new TypeLiteral<ActionPanelView<VmPool>>() {
    });
    // Template
    bindPresenter(TemplateSubTabPanelPresenter.class, TemplateSubTabPanelPresenter.ViewDef.class, TemplateSubTabPanelView.class, TemplateSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateGeneralPresenter.class, SubTabTemplateGeneralPresenter.ViewDef.class, SubTabTemplateGeneralView.class, SubTabTemplateGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateVmPresenter.class, SubTabTemplateVmPresenter.ViewDef.class, SubTabTemplateVmView.class, SubTabTemplateVmPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateInterfacePresenter.class, SubTabTemplateInterfacePresenter.ViewDef.class, SubTabTemplateInterfaceView.class, SubTabTemplateInterfacePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateDiskPresenter.class, SubTabTemplateDiskPresenter.ViewDef.class, SubTabTemplateDiskView.class, SubTabTemplateDiskPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateStoragePresenter.class, SubTabTemplateStoragePresenter.ViewDef.class, SubTabTemplateStorageView.class, SubTabTemplateStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabTemplatePermissionPresenter.class, SubTabTemplatePermissionPresenter.ViewDef.class, SubTabTemplatePermissionView.class, SubTabTemplatePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabTemplateEventPresenter.class, SubTabTemplateEventPresenter.ViewDef.class, SubTabTemplateEventView.class, SubTabTemplateEventPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<VmTemplate, TemplateListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<TemplateListModel>>() {
    }, new TypeLiteral<SearchPanelView<TemplateListModel>>() {
    });
    bindPresenterWidget(TemplateBreadCrumbsPresenterWidget.class, TemplateBreadCrumbsPresenterWidget.TemplateBreadCrumbsViewDef.class, TemplateBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VmTemplate>>() {
    }, new TypeLiteral<ActionPanelView<VmTemplate>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VmTemplate>>() {
    }, new TypeLiteral<DetailActionPanelView<VmTemplate>>() {
    });
    // User
    bindPresenter(UserSubTabPanelPresenter.class, UserSubTabPanelPresenter.ViewDef.class, UserSubTabPanelView.class, UserSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGeneralPresenter.class, SubTabUserGeneralPresenter.ViewDef.class, SubTabUserGeneralView.class, SubTabUserGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabUserPermissionPresenter.class, SubTabUserPermissionPresenter.ViewDef.class, SubTabUserPermissionView.class, SubTabUserPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventNotifierPresenter.class, SubTabUserEventNotifierPresenter.ViewDef.class, SubTabUserEventNotifierView.class, SubTabUserEventNotifierPresenter.ProxyDef.class);
    bindPresenter(SubTabUserEventPresenter.class, SubTabUserEventPresenter.ViewDef.class, SubTabUserEventView.class, SubTabUserEventPresenter.ProxyDef.class);
    bindPresenter(SubTabUserGroupPresenter.class, SubTabUserGroupPresenter.ViewDef.class, SubTabUserGroupView.class, SubTabUserGroupPresenter.ProxyDef.class);
    bindPresenter(SubTabUserQuotaPresenter.class, SubTabUserQuotaPresenter.ViewDef.class, SubTabUserQuotaView.class, SubTabUserQuotaPresenter.ProxyDef.class);
    bindPresenterWidget(UserRolesPopupPresenterWidget.class, UserRolesPopupPresenterWidget.ViewDef.class, UserRolesPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<DbUser, UserListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<UserListModel>>() {
    }, new TypeLiteral<SearchPanelView<UserListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<DbUser, UserListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<DbUser>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<DbUser, UserListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<DbUser>>() {
    }, new TypeLiteral<ActionPanelView<DbUser>>() {
    });
    // Quota
    bindPresenter(QuotaSubTabPanelPresenter.class, QuotaSubTabPanelPresenter.ViewDef.class, QuotaSubTabPanelView.class, QuotaSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaClusterPresenter.class, SubTabQuotaClusterPresenter.ViewDef.class, SubTabQuotaClusterView.class, SubTabQuotaClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaStoragePresenter.class, SubTabQuotaStoragePresenter.ViewDef.class, SubTabQuotaStorageView.class, SubTabQuotaStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaVmPresenter.class, SubTabQuotaVmPresenter.ViewDef.class, SubTabQuotaVmView.class, SubTabQuotaVmPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaTemplatePresenter.class, SubTabQuotaTemplatePresenter.ViewDef.class, SubTabQuotaTemplateView.class, SubTabQuotaTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaUserPresenter.class, SubTabQuotaUserPresenter.ViewDef.class, SubTabQuotaUserView.class, SubTabQuotaUserPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaPermissionPresenter.class, SubTabQuotaPermissionPresenter.ViewDef.class, SubTabQuotaPermissionView.class, SubTabQuotaPermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabQuotaEventPresenter.class, SubTabQuotaEventPresenter.ViewDef.class, SubTabQuotaEventView.class, SubTabQuotaEventPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Quota, QuotaListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<QuotaListModel>>() {
    }, new TypeLiteral<SearchPanelView<QuotaListModel>>() {
    });
    bindPresenterWidget(QuotaBreadCrumbsPresenterWidget.class, QuotaBreadCrumbsPresenterWidget.QuotaBreadCrumbsViewDef.class, QuotaBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Quota>>() {
    }, new TypeLiteral<ActionPanelView<Quota>>() {
    });
    // Disk
    bindPresenter(DiskSubTabPanelPresenter.class, DiskSubTabPanelPresenter.ViewDef.class, DiskSubTabPanelView.class, DiskSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskGeneralPresenter.class, SubTabDiskGeneralPresenter.ViewDef.class, SubTabDiskGeneralView.class, SubTabDiskGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskVmPresenter.class, SubTabDiskVmPresenter.ViewDef.class, SubTabDiskVmView.class, SubTabDiskVmPresenter.ProxyDef.class);
    bindPresenter(SubTabDiskTemplatePresenter.class, SubTabDiskTemplatePresenter.ViewDef.class, SubTabDiskTemplateView.class, SubTabDiskTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskStoragePresenter.class, SubTabDiskStoragePresenter.ViewDef.class, SubTabDiskStorageView.class, SubTabDiskStoragePresenter.ProxyDef.class);
    bindPresenter(SubTabDiskPermissionPresenter.class, SubTabDiskPermissionPresenter.ViewDef.class, SubTabDiskPermissionView.class, SubTabDiskPermissionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Disk, DiskListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<DiskListModel>>() {
    }, new TypeLiteral<SearchPanelView<DiskListModel>>() {
    });
    bindPresenterWidget(DisksBreadCrumbsPresenterWidget.class, DisksBreadCrumbsPresenterWidget.DiskBreadCrumbsViewDef.class, DisksBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Disk>>() {
    }, new TypeLiteral<ActionPanelView<Disk>>() {
    });
    // Network
    bindPresenter(NetworkSubTabPanelPresenter.class, NetworkSubTabPanelPresenter.ViewDef.class, NetworkSubTabPanelView.class, NetworkSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkGeneralPresenter.class, SubTabNetworkGeneralPresenter.ViewDef.class, SubTabNetworkGeneralView.class, SubTabNetworkGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkProfilePresenter.class, SubTabNetworkProfilePresenter.ViewDef.class, SubTabNetworkProfileView.class, SubTabNetworkProfilePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkExternalSubnetPresenter.class, SubTabNetworkExternalSubnetPresenter.ViewDef.class, SubTabNetworkExternalSubnetView.class, SubTabNetworkExternalSubnetPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkClusterPresenter.class, SubTabNetworkClusterPresenter.ViewDef.class, SubTabNetworkClusterView.class, SubTabNetworkClusterPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkHostPresenter.class, SubTabNetworkHostPresenter.ViewDef.class, SubTabNetworkHostView.class, SubTabNetworkHostPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkVmPresenter.class, SubTabNetworkVmPresenter.ViewDef.class, SubTabNetworkVmView.class, SubTabNetworkVmPresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkTemplatePresenter.class, SubTabNetworkTemplatePresenter.ViewDef.class, SubTabNetworkTemplateView.class, SubTabNetworkTemplatePresenter.ProxyDef.class);
    bindPresenter(SubTabNetworkPermissionPresenter.class, SubTabNetworkPermissionPresenter.ViewDef.class, SubTabNetworkPermissionView.class, SubTabNetworkPermissionPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<NetworkView, NetworkListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<NetworkListModel>>() {
    }, new TypeLiteral<SearchPanelView<NetworkListModel>>() {
    });
    bindPresenterWidget(NetworkBreadCrumbsPresenterWidget.class, NetworkBreadCrumbsPresenterWidget.NetworkBreadCrumbsViewDef.class, NetworkBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<NetworkView>>() {
    }, new TypeLiteral<ActionPanelView<NetworkView>>() {
    });
    // Provider
    bindPresenter(ProviderSubTabPanelPresenter.class, ProviderSubTabPanelPresenter.ViewDef.class, ProviderSubTabPanelView.class, ProviderSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderGeneralPresenter.class, SubTabProviderGeneralPresenter.ViewDef.class, SubTabProviderGeneralView.class, SubTabProviderGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderNetworkPresenter.class, SubTabProviderNetworkPresenter.ViewDef.class, SubTabProviderNetworkView.class, SubTabProviderNetworkPresenter.ProxyDef.class);
    bindPresenter(SubTabProviderSecretPresenter.class, SubTabProviderSecretPresenter.ViewDef.class, SubTabProviderSecretView.class, SubTabProviderSecretPresenter.ProxyDef.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<Provider, ProviderListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<ProviderListModel>>() {
    }, new TypeLiteral<SearchPanelView<ProviderListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Provider, ProviderListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Provider>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Provider, ProviderListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Provider>>() {
    }, new TypeLiteral<ActionPanelView<Provider>>() {
    });
    // Errata
    bindPresenter(ErrataSubTabPanelPresenter.class, ErrataSubTabPanelPresenter.ViewDef.class, ErrataSubTabPanelView.class, ErrataSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabEngineErrataDetailsPresenter.class, SubTabEngineErrataDetailsPresenter.ViewDef.class, SubTabEngineErrataDetailsView.class, SubTabEngineErrataDetailsPresenter.ProxyDef.class);
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<Erratum, EngineErrataListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<Erratum>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<Erratum, EngineErrataListModel>>() {
    });
    // Profile
    bindPresenter(VnicProfileSubTabPanelPresenter.class, VnicProfileSubTabPanelPresenter.ViewDef.class, VnicProfileSubTabPanelView.class, VnicProfileSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfilePermissionPresenter.class, SubTabVnicProfilePermissionPresenter.ViewDef.class, SubTabVnicProfilePermissionView.class, SubTabVnicProfilePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileVmPresenter.class, SubTabVnicProfileVmPresenter.ViewDef.class, SubTabVnicProfileVmView.class, SubTabVnicProfileVmPresenter.ProxyDef.class);
    bindPresenter(SubTabVnicProfileTemplatePresenter.class, SubTabVnicProfileTemplatePresenter.ViewDef.class, SubTabVnicProfileTemplateView.class, SubTabVnicProfileTemplatePresenter.ProxyDef.class);
    bindPresenterWidget(VnicProfileBreadCrumbsPresenterWidget.class, VnicProfileBreadCrumbsPresenterWidget.VnicProfileBreadCrumbsViewDef.class, VnicProfileBreadCrumbsView.class);
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VnicProfileView>>() {
    }, new TypeLiteral<ActionPanelView<VnicProfileView>>() {
    });
    // User Sessions
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<UserSession, SessionListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<SessionListModel>>() {
    }, new TypeLiteral<SearchPanelView<SessionListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<UserSession, SessionListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<UserSession>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<UserSession, SessionListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<UserSession>>() {
    }, new TypeLiteral<ActionPanelView<UserSession>>() {
    });
    // Volume
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<GlusterVolumeEntity, VolumeListModel>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<VolumeListModel>>() {
    }, new TypeLiteral<SearchPanelView<VolumeListModel>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<GlusterVolumeEntity, VolumeListModel>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<GlusterVolumeEntity>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<GlusterVolumeEntity, VolumeListModel>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<GlusterVolumeEntity>>() {
    }, new TypeLiteral<ActionPanelView<GlusterVolumeEntity>>() {
    });
    // Main section: popups
    // Permissions
    bindPresenterWidget(PermissionsPopupPresenterWidget.class, PermissionsPopupPresenterWidget.ViewDef.class, PermissionsPopupView.class);
    bindPresenterWidget(SystemPermissionsRemoveConfirmationPopupPresenterWidget.class, SystemPermissionsRemoveConfirmationPopupPresenterWidget.ViewDef.class, SystemPermissionsRemoveConfirmationPopupView.class);
    bindPresenterWidget(VmNextRunConfigurationPresenterWidget.class, VmNextRunConfigurationPresenterWidget.ViewDef.class, VmNextRunConfigurationPopupView.class);
    bindPresenterWidget(VmHighPerformanceConfigurationPresenterWidget.class, VmHighPerformanceConfigurationPresenterWidget.ViewDef.class, VmHighPerformanceConfigurationPopupView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPopupPresenterWidget.class, BookmarkPopupPresenterWidget.ViewDef.class, BookmarkPopupView.class);
    // Tags
    bindPresenterWidget(TagPopupPresenterWidget.class, TagPopupPresenterWidget.ViewDef.class, TagPopupView.class);
    // Guide
    bindPresenterWidget(GuidePopupPresenterWidget.class, GuidePopupPresenterWidget.ViewDef.class, GuidePopupView.class);
    bindPresenterWidget(MoveHostPopupPresenterWidget.class, MoveHostPopupPresenterWidget.ViewDef.class, MoveHostPopupView.class);
    // DataCenter
    bindPresenterWidget(DataCenterPopupPresenterWidget.class, DataCenterPopupPresenterWidget.ViewDef.class, DataCenterPopupView.class);
    bindPresenterWidget(FindMultiStoragePopupPresenterWidget.class, FindMultiStoragePopupPresenterWidget.ViewDef.class, FindMultiStoragePopupView.class);
    bindPresenterWidget(FindSingleStoragePopupPresenterWidget.class, FindSingleStoragePopupPresenterWidget.ViewDef.class, FindSingleStoragePopupView.class);
    bindPresenterWidget(NewDataCenterNetworkPopupPresenterWidget.class, NewDataCenterNetworkPopupPresenterWidget.ViewDef.class, NewDataCenterNetworkPopupView.class);
    bindPresenterWidget(EditDataCenterNetworkPopupPresenterWidget.class, EditDataCenterNetworkPopupPresenterWidget.ViewDef.class, EditDataCenterNetworkPopupView.class);
    bindPresenterWidget(DataCenterForceRemovePopupPresenterWidget.class, DataCenterForceRemovePopupPresenterWidget.ViewDef.class, DataCenterForceRemovePopupView.class);
    // Cluster
    bindPresenterWidget(NewClusterNetworkPopupPresenterWidget.class, NewClusterNetworkPopupPresenterWidget.ViewDef.class, NewClusterNetworkPopupView.class);
    bindPresenterWidget(ClusterManageNetworkPopupPresenterWidget.class, ClusterManageNetworkPopupPresenterWidget.ViewDef.class, ClusterManageNetworkPopupView.class);
    bindPresenterWidget(ClusterPopupPresenterWidget.class, ClusterPopupPresenterWidget.ViewDef.class, ClusterPopupView.class);
    bindPresenterWidget(ClusterWarningsPopupPresenterWidget.class, ClusterWarningsPopupPresenterWidget.ViewDef.class, ClusterWarningsPopupView.class);
    bindPresenterWidget(VolumePopupPresenterWidget.class, VolumePopupPresenterWidget.ViewDef.class, VolumePopupView.class);
    bindPresenterWidget(DetachGlusterHostsPopupPresenterWidget.class, DetachGlusterHostsPopupPresenterWidget.ViewDef.class, DetachGlusterHostsPopupView.class);
    bindPresenterWidget(GlusterHookContentPopupPresenterWidget.class, GlusterHookContentPopupPresenterWidget.ViewDef.class, GlusterHookContentPopupView.class);
    bindPresenterWidget(GlusterHookResolveConflictsPopupPresenterWidget.class, GlusterHookResolveConflictsPopupPresenterWidget.ViewDef.class, GlusterHookResolveConflictsPopupView.class);
    bindPresenterWidget(VolumeRebalanceStatusPopupPresenterWidget.class, VolumeRebalanceStatusPopupPresenterWidget.ViewDef.class, VolumeRebalanceStatusPopupView.class);
    bindPresenterWidget(GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.class, GlusterVolumeGeoRepActionConfirmPopUpViewPresenterWidget.ViewDef.class, GeoRepActionConfirmPopUpView.class);
    bindPresenterWidget(GlusterVolumeGeoReplicationSessionConfigPopupPresenterWidget.class, GlusterVolumeGeoReplicationSessionConfigPopupPresenterWidget.ViewDef.class, GlusterVolumeGeoReplicationSessionConfigPopupView.class);
    bindPresenterWidget(VolumeGeoRepSessionDetailsPopUpPresenterWidget.class, VolumeGeoRepSessionDetailsPopUpPresenterWidget.ViewDef.class, VolumeGeoRepSessionDetailsPopUpView.class);
    bindPresenterWidget(GlusterVolumeGeoRepCreateSessionPopupPresenterWidget.class, GlusterVolumeGeoRepCreateSessionPopupPresenterWidget.ViewDef.class, GlusterVolumeGeoRepCreateSessionPopupView.class);
    bindPresenterWidget(RemoveBrickStatusPopupPresenterWidget.class, RemoveBrickStatusPopupPresenterWidget.ViewDef.class, RemoveBrickStatusPopupView.class);
    bindPresenterWidget(ManageGlusterSwiftPopupPresenterWidget.class, ManageGlusterSwiftPopupPresenterWidget.ViewDef.class, ManageGlusterSwiftPopupView.class);
    bindPresenterWidget(VolumeProfileStatisticsPopupPresenterWidget.class, VolumeProfileStatisticsPopupPresenterWidget.ViewDef.class, VolumeProfileStatisticsPopupView.class);
    bindPresenterWidget(AddDataCenterClusterPopupPresenterWidget.class, AddDataCenterClusterPopupPresenterWidget.ViewDef.class, AddDataCenterClusterPopupView.class);
    // Host
    bindPresenterWidget(HostPopupPresenterWidget.class, HostPopupPresenterWidget.ViewDef.class, HostPopupView.class);
    bindPresenterWidget(HostInstallPopupPresenterWidget.class, HostInstallPopupPresenterWidget.ViewDef.class, HostInstallPopupView.class);
    bindPresenterWidget(NetworkAttachmentPopupPresenterWidget.class, NetworkAttachmentPopupPresenterWidget.ViewDef.class, NetworkAttachmentPopupView.class);
    bindPresenterWidget(SetupNetworksBondPopupPresenterWidget.class, SetupNetworksBondPopupPresenterWidget.ViewDef.class, SetupNetworksBondPopupView.class);
    bindPresenterWidget(VfsConfigPopupPresenterWidget.class, VfsConfigPopupPresenterWidget.ViewDef.class, VfsConfigPopupView.class);
    bindPresenterWidget(SetupNetworksLabelPopupPresenterWidget.class, SetupNetworksLabelPopupPresenterWidget.ViewDef.class, SetupNetworksLabelPopupView.class);
    bindPresenterWidget(HostSetupNetworksPopupPresenterWidget.class, HostSetupNetworksPopupPresenterWidget.ViewDef.class, HostSetupNetworksPopupView.class);
    bindPresenterWidget(ManualFencePopupPresenterWidget.class, ManualFencePopupPresenterWidget.ViewDef.class, ManualFenceConfirmationPopupView.class);
    bindPresenterWidget(ConfigureLocalStoragePopupPresenterWidget.class, ConfigureLocalStoragePopupPresenterWidget.ViewDef.class, HostConfigureLocalStoragePopupView.class);
    bindPresenterWidget(MultipleHostsPopupPresenterWidget.class, MultipleHostsPopupPresenterWidget.ViewDef.class, MultipleHostsPopupView.class);
    bindPresenterWidget(HostFenceAgentPopupPresenterWidget.class, HostFenceAgentPopupPresenterWidget.ViewDef.class, HostFenceAgentPopupView.class);
    bindPresenterWidget(HostFenceProxyPopupPresenterWidget.class, HostFenceProxyPopupPresenterWidget.ViewDef.class, HostFenceProxyPopupView.class);
    bindPresenterWidget(HostMaintenanceConfirmationPopupPresenterWidget.class, HostMaintenanceConfirmationPopupPresenterWidget.ViewDef.class, HostMaintenanceConfirmationPopupView.class);
    bindPresenterWidget(HostUpgradePopupPresenterWidget.class, HostUpgradePopupPresenterWidget.ViewDef.class, HostUpgradePopupView.class);
    // Storage
    bindPresenterWidget(StoragePopupPresenterWidget.class, StoragePopupPresenterWidget.ViewDef.class, StoragePopupView.class);
    bindPresenterWidget(FindMultiDcPopupPresenterWidget.class, FindMultiDcPopupPresenterWidget.ViewDef.class, FindMultiDcPopupView.class);
    bindPresenterWidget(FindSingleDcPopupPresenterWidget.class, FindSingleDcPopupPresenterWidget.ViewDef.class, FindSingleDcPopupView.class);
    bindPresenterWidget(ImportVmFromExportDomainPopupPresenterWidget.class, ImportVmFromExportDomainPopupPresenterWidget.ViewDef.class, ImportVmFromExportDomainPopupView.class);
    bindPresenterWidget(ImportVmFromExternalProviderPopupPresenterWidget.class, ImportVmFromExternalProviderPopupPresenterWidget.ViewDef.class, ImportVmFromExternalProviderPopupView.class);
    bindPresenterWidget(ImportTemplatePopupPresenterWidget.class, ImportTemplatePopupPresenterWidget.ViewDef.class, ImportTemplatePopupView.class);
    bindPresenterWidget(RegisterVmPopupPresenterWidget.class, RegisterVmPopupPresenterWidget.ViewDef.class, RegisterVmPopupView.class);
    bindPresenterWidget(RegisterTemplatePopupPresenterWidget.class, RegisterTemplatePopupPresenterWidget.ViewDef.class, RegisterTemplatePopupView.class);
    bindPresenterWidget(VnicProfileMappingPopupPresenterWidget.class, VnicProfileMappingPopupPresenterWidget.ViewDef.class, VnicProfileMappingPopupView.class);
    bindPresenterWidget(ImportCloneDialogPresenterWidget.class, ImportCloneDialogPresenterWidget.ViewDef.class, ImportCloneDialogPopupView.class);
    bindPresenterWidget(DisksAllocationPopupPresenterWidget.class, DisksAllocationPopupPresenterWidget.ViewDef.class, DisksAllocationPopupView.class);
    bindPresenterWidget(ChangeQuotaPopupPresenterWidget.class, ChangeQuotaPopupPresenterWidget.ViewDef.class, ChangeQuotaPopupView.class);
    bindPresenterWidget(ImportExportImagePopupPresenterWidget.class, ImportExportImagePopupPresenterWidget.ViewDef.class, ImportExportImagePopupView.class);
    bindPresenterWidget(UploadImagePopupPresenterWidget.class, UploadImagePopupPresenterWidget.ViewDef.class, UploadImagePopupView.class);
    bindPresenterWidget(StorageDRPopupPresenterWidget.class, StorageDRPopupPresenterWidget.ViewDef.class, StorageDRPopupView.class);
    // Storage Remove
    bindPresenterWidget(StorageRemovePopupPresenterWidget.class, StorageRemovePopupPresenterWidget.ViewDef.class, StorageRemovePopupView.class);
    // Storage Destroy
    bindPresenterWidget(StorageDestroyPopupPresenterWidget.class, StorageDestroyPopupPresenterWidget.ViewDef.class, StorageDestroyPopupView.class);
    bindPresenterWidget(StorageForceCreatePopupPresenterWidget.class, StorageForceCreatePopupPresenterWidget.ViewDef.class, StorageForceCreatePopupView.class);
    bindPresenterWidget(VmPopupPresenterWidget.class, VmPopupPresenterWidget.ViewDef.class, VmPopupView.class);
    // VM Snapshot Create
    bindPresenterWidget(VmSnapshotCreatePopupPresenterWidget.class, VmSnapshotCreatePopupPresenterWidget.ViewDef.class, VmSnapshotCreatePopupView.class);
    // VM Snapshot Preview
    bindPresenterWidget(VmSnapshotPreviewPopupPresenterWidget.class, VmSnapshotPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotPreviewPopupView.class);
    bindPresenterWidget(VmSnapshotCustomPreviewPopupPresenterWidget.class, VmSnapshotCustomPreviewPopupPresenterWidget.ViewDef.class, VmSnapshotCustomPreviewPopupView.class);
    // VM Clone from Snapshot
    bindPresenterWidget(VmClonePopupPresenterWidget.class, VmClonePopupPresenterWidget.ViewDef.class, VmClonePopupView.class);
    // VM Assign Tags
    bindPresenterWidget(AssignTagsPopupPresenterWidget.class, AssignTagsPopupPresenterWidget.ViewDef.class, AssignTagsPopupView.class);
    // VM RunOnce
    bindPresenterWidget(VmRunOncePopupPresenterWidget.class, VmRunOncePopupPresenterWidget.ViewDef.class, VmRunOncePopupView.class);
    // VM Make Template
    bindPresenterWidget(VmMakeTemplatePopupPresenterWidget.class, VmMakeTemplatePopupPresenterWidget.ViewDef.class, VmMakeTemplatePopupView.class);
    // VM Change CD
    bindPresenterWidget(VmChangeCDPopupPresenterWidget.class, VmChangeCDPopupPresenterWidget.ViewDef.class, VmChangeCDPopupView.class);
    // Clone VM
    bindPresenterWidget(CloneVmPopupPresenterWidget.class, CloneVmPopupPresenterWidget.ViewDef.class, CloneVmPopupView.class);
    // VM Migrate
    bindPresenterWidget(VmMigratePopupPresenterWidget.class, VmMigratePopupPresenterWidget.ViewDef.class, VmMigratePopupView.class);
    // VM Export
    bindPresenterWidget(VmExportPopupPresenterWidget.class, VmExportPopupPresenterWidget.ViewDef.class, VmExportPopupView.class);
    // OVA Export
    bindPresenterWidget(VmExportOvaPopupPresenterWidget.class, VmExportOvaPopupPresenterWidget.ViewDef.class, VmExportOvaPopupView.class);
    // VM Remove
    bindPresenterWidget(VmRemovePopupPresenterWidget.class, VmRemovePopupPresenterWidget.ViewDef.class, VmRemovePopupView.class);
    // VM VNC info
    bindPresenterWidget(VncInfoPopupPresenterWidget.class, VncInfoPopupPresenterWidget.ViewDef.class, VncInfoPopupView.class);
    // VM Add/Edit Interface
    bindPresenterWidget(VmInterfacePopupPresenterWidget.class, VmInterfacePopupPresenterWidget.ViewDef.class, VmInterfacePopupView.class);
    // VM Add/Edit Disk
    bindPresenterWidget(VmDiskPopupPresenterWidget.class, VmDiskPopupPresenterWidget.ViewDef.class, VmDiskPopupView.class);
    // VM Attach Disk
    bindPresenterWidget(VmDiskAttachPopupPresenterWidget.class, VmDiskAttachPopupPresenterWidget.ViewDef.class, VmDiskAttachPopupView.class);
    bindPresenterWidget(SingleSelectionVmDiskAttachPopupPresenterWidget.class, SingleSelectionVmDiskAttachPopupPresenterWidget.ViewDef.class, SingleSelectionVmDiskAttachPopupView.class);
    // VM Detach/Remove Disk
    bindPresenterWidget(VmDiskRemovePopupPresenterWidget.class, VmDiskRemovePopupPresenterWidget.ViewDef.class, VmDiskRemovePopupView.class);
    // VM Sparsify Disk
    bindPresenterWidget(VmDiskSparsifyPopupPresenterWidget.class, VmDiskSparsifyPopupPresenterWidget.ViewDef.class, VmDiskSparsifyPopupView.class);
    // Edit Template
    bindPresenterWidget(TemplateEditPresenterWidget.class, TemplateEditPresenterWidget.ViewDef.class, TemplateEditPopupView.class);
    // Instance Types
    bindPresenterWidget(InstanceTypesPopupPresenterWidget.class, InstanceTypesPopupPresenterWidget.ViewDef.class, InstanceTypesPopupView.class);
    // Add/Edit Template's NIC
    bindPresenterWidget(TemplateInterfacePopupPresenterWidget.class, TemplateInterfacePopupPresenterWidget.ViewDef.class, TemplateInterfacePopupView.class);
    // Users Manage Events
    bindPresenterWidget(ManageEventsPopupPresenterWidget.class, ManageEventsPopupPresenterWidget.ViewDef.class, ManageEventsPopupView.class);
    // Quota
    bindPresenterWidget(QuotaPopupPresenterWidget.class, QuotaPopupPresenterWidget.ViewDef.class, QuotaPopupView.class);
    // Network QoS
    bindPresenterWidget(NetworkQoSPopupPresenterWidget.class, NetworkQoSPopupPresenterWidget.ViewDef.class, NetworkQoSPopupView.class);
    // Storage QoS
    bindPresenterWidget(StorageQosPopupPresenterWidget.class, StorageQosPopupPresenterWidget.ViewDef.class, StorageQosPopupView.class);
    bindPresenterWidget(StorageQosRemovePopupPresenterWidget.class, StorageQosRemovePopupPresenterWidget.ViewDef.class, StorageQosRemovePopupView.class);
    // Cpu QoS
    bindPresenterWidget(CpuQosPopupPresenterWidget.class, CpuQosPopupPresenterWidget.ViewDef.class, CpuQosPopupView.class);
    // Host Network QoS
    bindPresenterWidget(HostNetworkQosPopupPresenterWidget.class, HostNetworkQosPopupPresenterWidget.ViewDef.class, HostNetworkQosPopupView.class);
    bindPresenterWidget(EditQuotaClusterPopupPresenterWidget.class, EditQuotaClusterPopupPresenterWidget.ViewDef.class, EditQuotaClusterPopupView.class);
    bindPresenterWidget(EditQuotaStoragePopupPresenterWidget.class, EditQuotaStoragePopupPresenterWidget.ViewDef.class, EditQuotaStoragePopupView.class);
    bindPresenterWidget(ImportVmsPopupPresenterWidget.class, ImportVmsPopupPresenterWidget.ViewDef.class, ImportVmsPopupView.class);
    // Host Devices
    bindPresenterWidget(AddVmHostDevicePopupPresenterWidget.class, AddVmHostDevicePopupPresenterWidget.ViewDef.class, AddVmHostDevicePopupView.class);
    bindPresenterWidget(VmRepinHostPopupPresenterWidget.class, VmRepinHostPopupPresenterWidget.ViewDef.class, VmRepinHostPopupView.class);
    // Volume
    bindPresenter(VolumeSubTabPanelPresenter.class, VolumeSubTabPanelPresenter.ViewDef.class, VolumeSubTabPanelView.class, VolumeSubTabPanelPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeneralPresenter.class, SubTabVolumeGeneralPresenter.ViewDef.class, SubTabVolumeGeneralView.class, SubTabVolumeGeneralPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeBrickPresenter.class, SubTabVolumeBrickPresenter.ViewDef.class, SubTabVolumeBrickView.class, SubTabVolumeBrickPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeGeoRepPresenter.class, SubTabVolumeGeoRepPresenter.ViewDef.class, SubTabVolumeGeoRepView.class, SubTabVolumeGeoRepPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeParameterPresenter.class, SubTabVolumeParameterPresenter.ViewDef.class, SubTabVolumeParameterView.class, SubTabVolumeParameterPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumePermissionPresenter.class, SubTabVolumePermissionPresenter.ViewDef.class, SubTabVolumePermissionView.class, SubTabVolumePermissionPresenter.ProxyDef.class);
    bindPresenter(SubTabVolumeEventPresenter.class, SubTabVolumeEventPresenter.ViewDef.class, SubTabVolumeEventView.class, SubTabVolumeEventPresenter.ProxyDef.class);
    bindPresenter(SubTabGlusterVolumeSnapshotPresenter.class, SubTabGlusterVolumeSnapshotPresenter.ViewDef.class, SubTabGlusterVolumeSnapshotView.class, SubTabGlusterVolumeSnapshotPresenter.ProxyDef.class);
    bindPresenterWidget(AddBrickPopupPresenterWidget.class, AddBrickPopupPresenterWidget.ViewDef.class, AddBrickPopupView.class);
    bindPresenterWidget(CreateBrickPopupPresenterWidget.class, CreateBrickPopupPresenterWidget.ViewDef.class, CreateBrickPopupView.class);
    bindPresenterWidget(RemoveBrickPopupPresenterWidget.class, RemoveBrickPopupPresenterWidget.ViewDef.class, RemoveBrickPopupView.class);
    bindPresenterWidget(ReplaceBrickPopupPresenterWidget.class, ReplaceBrickPopupPresenterWidget.ViewDef.class, ReplaceBrickPopupView.class);
    bindPresenterWidget(BrickAdvancedDetailsPopupPresenterWidget.class, BrickAdvancedDetailsPopupPresenterWidget.ViewDef.class, BrickAdvancedDetailsPopupView.class);
    bindPresenterWidget(VolumeParameterPopupPresenterWidget.class, VolumeParameterPopupPresenterWidget.ViewDef.class, VolumeParameterPopupView.class);
    bindPresenterWidget(ResetBrickPopupPresenterWidget.class, ResetBrickPopupPresenterWidget.ViewDef.class, ResetBrickPopupView.class);
    // Network
    bindPresenterWidget(NewNetworkPopupPresenterWidget.class, NewNetworkPopupPresenterWidget.ViewDef.class, NewNetworkPopupView.class);
    bindPresenterWidget(EditNetworkPopupPresenterWidget.class, EditNetworkPopupPresenterWidget.ViewDef.class, EditNetworkPopupView.class);
    // Event
    bindPresenterWidget(EventPopupPresenterWidget.class, EventPopupPresenterWidget.ViewDef.class, EventPopupView.class);
    bindSingletonPresenterWidget(new TypeLiteral<SearchPanelPresenterWidget<AuditLog, EventListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelPresenterWidget.ViewDef<EventListModel<Void>>>() {
    }, new TypeLiteral<SearchPanelView<EventListModel<Void>>>() {
    });
    bindPresenterWidget(new TypeLiteral<OvirtBreadCrumbsPresenterWidget<AuditLog, EventListModel<Void>>>() {
    }, new TypeLiteral<OvirtBreadCrumbsPresenterWidget.ViewDef<AuditLog>>() {
    }, new TypeLiteral<OvirtBreadCrumbsView<AuditLog, EventListModel<Void>>>() {
    });
    // Provider
    bindPresenterWidget(ProviderPopupPresenterWidget.class, ProviderPopupPresenterWidget.ViewDef.class, ProviderPopupView.class);
    bindPresenterWidget(ImportNetworksPopupPresenterWidget.class, ImportNetworksPopupPresenterWidget.ViewDef.class, ImportNetworksPopupView.class);
    bindPresenterWidget(ProviderSecretPopupPresenterWidget.class, ProviderSecretPopupPresenterWidget.ViewDef.class, ProviderSecretPopupView.class);
    // Profile
    bindPresenterWidget(VnicProfilePopupPresenterWidget.class, VnicProfilePopupPresenterWidget.ViewDef.class, VnicProfilePopupView.class);
    bindPresenterWidget(DiskProfilePopupPresenterWidget.class, DiskProfilePopupPresenterWidget.ViewDef.class, DiskProfilePopupView.class);
    bindPresenterWidget(CpuProfilePopupPresenterWidget.class, CpuProfilePopupPresenterWidget.ViewDef.class, CpuProfilePopupView.class);
    // External Subnet
    bindPresenterWidget(ExternalSubnetPopupPresenterWidget.class, ExternalSubnetPopupPresenterWidget.ViewDef.class, ExternalSubnetPopupView.class);
    // ISCSI Bond
    bindPresenterWidget(IscsiBondPopupPresenterWidget.class, IscsiBondPopupPresenterWidget.ViewDef.class, IscsiBondPopupView.class);
    // Errata details
    bindPresenterWidget(HostErrataListWithDetailsPopupPresenterWidget.class, HostErrataListWithDetailsPopupPresenterWidget.ViewDef.class, HostErrataListWithDetailsPopupView.class);
    bindPresenterWidget(VmErrataListWithDetailsPopupPresenterWidget.class, VmErrataListWithDetailsPopupPresenterWidget.ViewDef.class, VmErrataListWithDetailsPopupView.class);
    bindPresenterWidget(ExpandAllButtonPresenterWidget.class, ExpandAllButtonPresenterWidget.ViewDef.class, ExpandAllButtonView.class);
    // Overlays
    // Tasks
    bindPresenterWidget(TasksPresenterWidget.class, TasksPresenterWidget.ViewDef.class, TasksView.class);
    // Bookmarks
    bindPresenterWidget(BookmarkPresenterWidget.class, BookmarkPresenterWidget.ViewDef.class, BookmarkView.class);
    // Tags
    bindPresenterWidget(TagsPresenterWidget.class, TagsPresenterWidget.ViewDef.class, TagsView.class);
    // Popup/detail Action panels
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Permission>>() {
    }, new TypeLiteral<ActionPanelView<Permission>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<MacPool>>() {
    }, new TypeLiteral<ActionPanelView<MacPool>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Role>>() {
    }, new TypeLiteral<ActionPanelView<Role>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<ClusterPolicy>>() {
    }, new TypeLiteral<ActionPanelView<ClusterPolicy>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<InstanceType>>() {
    }, new TypeLiteral<ActionPanelView<InstanceType>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<CpuQos>>() {
    }, new TypeLiteral<ActionPanelView<CpuQos>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<NetworkQoS>>() {
    }, new TypeLiteral<ActionPanelView<NetworkQoS>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<HostNetworkQos>>() {
    }, new TypeLiteral<ActionPanelView<HostNetworkQos>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<DiskProfile>>() {
    }, new TypeLiteral<ActionPanelView<DiskProfile>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<CpuProfile>>() {
    }, new TypeLiteral<ActionPanelView<CpuProfile>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<VmNetworkInterface>>() {
    }, new TypeLiteral<ActionPanelView<VmNetworkInterface>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<Snapshot>>() {
    }, new TypeLiteral<ActionPanelView<Snapshot>>() {
    });
    bindActionPanel(new TypeLiteral<ActionPanelPresenterWidget.ViewDef<HostDeviceView>>() {
    }, new TypeLiteral<ActionPanelView<HostDeviceView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Label>>() {
    }, new TypeLiteral<DetailActionPanelView<Label>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterHookEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterHookEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Network>>() {
    }, new TypeLiteral<DetailActionPanelView<Network>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<IscsiBond>>() {
    }, new TypeLiteral<DetailActionPanelView<IscsiBond>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterBrickEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterBrickEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterVolumeOptionEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterVolumeOptionEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageDevice>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageDevice>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterVolumeSnapshotEntity>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterVolumeSnapshotEntity>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterServerService>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterServerService>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<NetworkCluster>>() {
    }, new TypeLiteral<DetailActionPanelView<NetworkCluster>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<ExternalSubnet>>() {
    }, new TypeLiteral<DetailActionPanelView<ExternalSubnet>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<LibvirtSecret>>() {
    }, new TypeLiteral<DetailActionPanelView<LibvirtSecret>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Permission>>() {
    }, new TypeLiteral<DetailActionPanelView<Permission>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<GlusterGeoRepSession>>() {
    }, new TypeLiteral<DetailActionPanelView<GlusterGeoRepSession>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<Cluster, NetworkCluster>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<Cluster, NetworkCluster>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<VdsNetworkInterface, VDS>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<VdsNetworkInterface, VDS>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<VmNetworkInterface, VM>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<VmNetworkInterface, VM>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<PairQueryable<VmNetworkInterface, VmTemplate>>>() {
    }, new TypeLiteral<DetailActionPanelView<PairQueryable<VmNetworkInterface, VmTemplate>>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageDomainDR>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageDomainDR>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<RepoImage>>() {
    }, new TypeLiteral<DetailActionPanelView<RepoImage>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<DiskModel>>() {
    }, new TypeLiteral<DetailActionPanelView<DiskModel>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<EventSubscriber>>() {
    }, new TypeLiteral<DetailActionPanelView<EventSubscriber>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<AffinityGroup>>() {
    }, new TypeLiteral<DetailActionPanelView<AffinityGroup>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<MacPool>>() {
    }, new TypeLiteral<DetailActionPanelView<MacPool>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Role>>() {
    }, new TypeLiteral<DetailActionPanelView<Role>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<ClusterPolicy>>() {
    }, new TypeLiteral<DetailActionPanelView<ClusterPolicy>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<InstanceType>>() {
    }, new TypeLiteral<DetailActionPanelView<InstanceType>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<CpuQos>>() {
    }, new TypeLiteral<DetailActionPanelView<CpuQos>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<NetworkQoS>>() {
    }, new TypeLiteral<DetailActionPanelView<NetworkQoS>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<HostNetworkQos>>() {
    }, new TypeLiteral<DetailActionPanelView<HostNetworkQos>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<DiskProfile>>() {
    }, new TypeLiteral<DetailActionPanelView<DiskProfile>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<CpuProfile>>() {
    }, new TypeLiteral<DetailActionPanelView<CpuProfile>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VmNetworkInterface>>() {
    }, new TypeLiteral<DetailActionPanelView<VmNetworkInterface>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Snapshot>>() {
    }, new TypeLiteral<DetailActionPanelView<Snapshot>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<HostDeviceView>>() {
    }, new TypeLiteral<DetailActionPanelView<HostDeviceView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<HostInterfaceLineModel>>() {
    }, new TypeLiteral<DetailActionPanelView<HostInterfaceLineModel>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<StorageQos>>() {
    }, new TypeLiteral<DetailActionPanelView<StorageQos>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VDS>>() {
    }, new TypeLiteral<DetailActionPanelView<VDS>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Quota>>() {
    }, new TypeLiteral<DetailActionPanelView<Quota>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VM>>() {
    }, new TypeLiteral<DetailActionPanelView<VM>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<VnicProfileView>>() {
    }, new TypeLiteral<DetailActionPanelView<VnicProfileView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<NetworkView>>() {
    }, new TypeLiteral<DetailActionPanelView<NetworkView>>() {
    });
    bindActionPanel(new TypeLiteral<DetailActionPanelPresenterWidget.ViewDef<Disk>>() {
    }, new TypeLiteral<DetailActionPanelView<Disk>>() {
    });
}
#end_block

#method_before
private void updateActionAvailability() {
    GlusterVolumeEntity volumeEntity = getEntity();
    boolean allowRemove = true;
    boolean allowReplace = true;
    boolean allowAdvanced = true;
    boolean allowAdd = true;
    boolean allowReset = true;
    if (volumeEntity == null || volumeEntity.getVolumeType().isDispersedType() || !volumeEntity.getVolumeType().isSupported()) {
        allowRemove = false;
        allowAdd = false;
    }
    if (volumeEntity == null || getSelectedItems() == null || getSelectedItems().size() == 0) {
        allowRemove = false;
        allowReplace = false;
        allowAdvanced = false;
        allowReset = false;
    } else {
        if (getSelectedItems().size() == 1) {
            allowAdvanced = volumeEntity.isOnline() && getSelectedItems().get(0).isOnline();
            allowReset = true;
        } else {
            allowReplace = false;
            allowAdvanced = false;
            allowReset = false;
        }
        GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
        if (volumeTask != null && (volumeTask.getStatus() == JobExecutionStatus.STARTED || volumeTask.getType() == GlusterTaskType.REMOVE_BRICK && volumeTask.getStatus() == JobExecutionStatus.FINISHED)) {
            allowRemove = false;
            allowReplace = false;
            allowReset = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || getSelectedItems().size() == volumeEntity.getBricks().size()) {
            allowRemove = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && (volumeEntity.getBricks().size() == VolumeListModel.REPLICATE_COUNT_DEFAULT || getSelectedItems().size() > 1)) {
            allowRemove = false;
        }
    }
    getRemoveBricksCommand().setIsExecutionAllowed(allowRemove);
    getReplaceBrickCommand().setIsExecutionAllowed(allowReplace);
    getBrickAdvancedDetailsCommand().setIsExecutionAllowed(allowAdvanced);
    getAddBricksCommand().setIsExecutionAllowed(allowAdd);
    getResetBrickCommand().setIsExecutionAllowed(allowReset);
}
#method_after
private void updateActionAvailability() {
    GlusterVolumeEntity volumeEntity = getEntity();
    boolean allowRemove = true;
    boolean allowReplace = true;
    boolean allowAdvanced = true;
    boolean allowAdd = true;
    boolean allowReset = true;
    if (volumeEntity == null || volumeEntity.getVolumeType().isDispersedType() || !volumeEntity.getVolumeType().isSupported()) {
        allowRemove = false;
        allowAdd = false;
    }
    if (volumeEntity == null || getSelectedItems() == null || getSelectedItems().size() == 0) {
        allowRemove = false;
        allowReplace = false;
        allowAdvanced = false;
        allowReset = false;
    } else {
        if (getSelectedItems().size() == 1) {
            allowAdvanced = volumeEntity.isOnline() && getSelectedItems().get(0).isOnline();
        } else {
            allowReplace = false;
            allowAdvanced = false;
            allowReset = false;
        }
        GlusterAsyncTask volumeTask = volumeEntity.getAsyncTask();
        if (volumeTask != null && (volumeTask.getStatus() == JobExecutionStatus.STARTED || volumeTask.getType() == GlusterTaskType.REMOVE_BRICK && volumeTask.getStatus() == JobExecutionStatus.FINISHED)) {
            allowRemove = false;
            allowReplace = false;
            allowReset = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.STRIPE || getSelectedItems().size() == volumeEntity.getBricks().size()) {
            allowRemove = false;
        } else if (volumeEntity.getVolumeType() == GlusterVolumeType.REPLICATE && (volumeEntity.getBricks().size() == VolumeListModel.REPLICATE_COUNT_DEFAULT || getSelectedItems().size() > 1)) {
            allowRemove = false;
        }
    }
    getRemoveBricksCommand().setIsExecutionAllowed(allowRemove);
    getReplaceBrickCommand().setIsExecutionAllowed(allowReplace);
    getBrickAdvancedDetailsCommand().setIsExecutionAllowed(allowAdvanced);
    getAddBricksCommand().setIsExecutionAllowed(allowAdd);
    getResetBrickCommand().setIsExecutionAllowed(allowReset);
}
#end_block

#method_before
@SuppressWarnings("unchecked")
@Override
public <T> boolean visit(final EditorContext<T> ctx) {
    final String absolutePath = ctx.getAbsolutePath();
    LeafValueEditor<T> currentLeafEditor = ctx.asLeafValueEditor();
    if (currentLeafEditor == null) {
        // Ignore non-leaf Editors
        return super.visit(ctx);
    }
    final LeafValueEditor<T> editor = getActualEditor(currentLeafEditor);
    // If this Editor implements HasValueChangeHandlers, register a value change listener
    if (editor instanceof HasValueChangeHandlers) {
        ((HasValueChangeHandlers<T>) editor).addValueChangeHandler(event -> setInModel(ctx, event.getSource(), event.getValue()));
    }
    final UiCommonEditor<T> functionalEditor = getFunctionalEditor(currentLeafEditor);
    if (functionalEditor != null) {
        // Pass in the EditorDelegate
        if (editor instanceof HasEditorDelegate) {
            ((HasEditorDelegate<T>) editor).setDelegate((AbstractEditorDelegate<T, ?>) ctx.getEditorDelegate());
        }
        // Set tab index, unless it's being set manually (i.e. already been set)
        if (functionalEditor.getTabIndex() <= 0) {
            functionalEditor.setTabIndex(++tabIndexCounter);
        }
        // Add key press handler
        functionalEditor.addKeyPressHandler(event -> {
            if (KeyCodes.KEY_ENTER == event.getNativeEvent().getKeyCode()) {
                setInModel(ctx, editor, editor.getValue());
            }
        });
    }
    // Handle owner entity models
    if (ownerModels.containsKey(absolutePath)) {
        Model ownerModel = ownerModels.get(absolutePath);
        // If this editor edits a ListModel, initialize it
        if (editor instanceof TakesConstrainedValueListEditor && ownerModel instanceof ListModel) {
            updateListEditor((TakesConstrainedValueListEditor<T>) editor, (ListModel) ownerModel);
        } else if (editor instanceof TakesConstrainedValueEditor && ownerModel instanceof ListModel) {
            updateListEditor((TakesConstrainedValueEditor<T>) editor, (ListModel) ownerModel);
        }
        if (functionalEditor != null) {
            // Register a property change listener on the owner entity model
            ownerModel.getPropertyChangedEvent().addListener((ev, sender, args) -> {
                Model owner = (Model) sender;
                String propName = args.propertyName;
                // IsValid
                if ("IsValid".equals(propName)) {
                    // $NON-NLS-1$
                    onIsValidPropertyChange(functionalEditor, owner);
                } else // IsChangable
                if ("IsChangable".equals(propName)) {
                    // $NON-NLS-1$
                    onIsChangablePropertyChange(functionalEditor, owner);
                } else // ChangeProhibitionReason
                if ("ChangeProhibitionReason".equals(propName)) {
                    // $NON-NLS-1$
                    onChangeProhibitionReasonChange(functionalEditor, owner);
                } else // IsAvailable
                if ("IsAvailable".equals(propName)) {
                    // $NON-NLS-1$
                    onIsAvailablePropertyChange(functionalEditor, owner);
                }
            });
            // Update editor since we might have missed property change
            // events fired as part of the entity model constructor
            onIsValidPropertyChange(functionalEditor, ownerModel);
            onIsChangablePropertyChange(functionalEditor, ownerModel);
            onChangeProhibitionReasonChange(functionalEditor, ownerModel);
            onIsAvailablePropertyChange(functionalEditor, ownerModel);
        }
    }
    // Register listeners
    // $NON-NLS-1$
    eventMap.registerListener(// $NON-NLS-1$
    absolutePath, // $NON-NLS-1$
    "EntityChanged", (ev, sender, args) -> editor.setValue((T) ((EntityModel) sender).getEntity()));
    // $NON-NLS-1$
    eventMap.registerListener(// $NON-NLS-1$
    absolutePath, // $NON-NLS-1$
    "ItemsChanged", (ev, sender, args) -> updateListEditor((TakesConstrainedValueEditor<T>) editor, (ListModel) sender));
    eventMap.registerListener(absolutePath, "SelectedItemChanged", (ev, sender, args) -> {
        // $NON-NLS-1$
        T selectedItem = (T) ((ListModel) sender).getSelectedItem();
        if (editor instanceof TakesConstrainedValueListEditor && ownerModels.get(absolutePath) instanceof ListModel) {
            editor.setValue((T) Arrays.asList(selectedItem));
        } else {
            editor.setValue(selectedItem);
        }
    });
    eventMap.registerListener(absolutePath, "SelectedItemsChanged", (ev, sender, args) -> {
        // $NON-NLS-1$
        if (editor instanceof TakesConstrainedValueListEditor && ownerModels.get(absolutePath) instanceof ListModel) {
            ((TakesConstrainedValueListEditor) editor).setListValue((List<T>) ((ListModel) sender).getSelectedItems());
        }
    });
    return super.visit(ctx);
}
#method_after
@SuppressWarnings("unchecked")
@Override
public <T> boolean visit(final EditorContext<T> ctx) {
    final String absolutePath = ctx.getAbsolutePath();
    LeafValueEditor<T> currentLeafEditor = ctx.asLeafValueEditor();
    if (currentLeafEditor == null) {
        // Ignore non-leaf Editors
        return super.visit(ctx);
    }
    final LeafValueEditor<T> editor = getActualEditor(currentLeafEditor);
    // If this Editor implements HasValueChangeHandlers, register a value change listener
    if (editor instanceof HasValueChangeHandlers) {
        ((HasValueChangeHandlers<T>) editor).addValueChangeHandler(event -> setInModel(ctx, event.getSource(), event.getValue()));
    }
    final UiCommonEditor<T> functionalEditor = getFunctionalEditor(currentLeafEditor);
    if (functionalEditor != null) {
        // Pass in the EditorDelegate
        if (editor instanceof HasEditorDelegate) {
            ((HasEditorDelegate<T>) editor).setDelegate(ctx.getEditorDelegate());
        }
        // Set tab index, unless it's being set manually (i.e. already been set)
        if (functionalEditor.getTabIndex() <= 0) {
            functionalEditor.setTabIndex(++tabIndexCounter);
        }
        // Add key press handler
        functionalEditor.addKeyPressHandler(event -> {
            if (KeyCodes.KEY_ENTER == event.getNativeEvent().getKeyCode()) {
                setInModel(ctx, editor, editor.getValue());
            }
        });
    }
    // Handle owner entity models
    if (ownerModels.containsKey(absolutePath)) {
        Model ownerModel = ownerModels.get(absolutePath);
        // If this editor edits a ListModel, initialize it
        if (editor instanceof TakesConstrainedValueListEditor && ownerModel instanceof ListModel) {
            updateListEditor((TakesConstrainedValueListEditor<T>) editor, (ListModel) ownerModel);
        } else if (editor instanceof TakesConstrainedValueEditor && ownerModel instanceof ListModel) {
            updateListEditor((TakesConstrainedValueEditor<T>) editor, (ListModel) ownerModel);
        }
        if (functionalEditor != null) {
            // Register a property change listener on the owner entity model
            ownerModel.getPropertyChangedEvent().addListener((ev, sender, args) -> {
                Model owner = (Model) sender;
                String propName = args.propertyName;
                // IsValid
                if ("IsValid".equals(propName)) {
                    // $NON-NLS-1$
                    onIsValidPropertyChange(functionalEditor, owner);
                } else // IsChangable
                if ("IsChangable".equals(propName)) {
                    // $NON-NLS-1$
                    onIsChangablePropertyChange(functionalEditor, owner);
                } else // ChangeProhibitionReason
                if ("ChangeProhibitionReason".equals(propName)) {
                    // $NON-NLS-1$
                    onChangeProhibitionReasonChange(functionalEditor, owner);
                } else // IsAvailable
                if ("IsAvailable".equals(propName)) {
                    // $NON-NLS-1$
                    onIsAvailablePropertyChange(functionalEditor, owner);
                }
            });
            // Update editor since we might have missed property change
            // events fired as part of the entity model constructor
            onIsValidPropertyChange(functionalEditor, ownerModel);
            onIsChangablePropertyChange(functionalEditor, ownerModel);
            onChangeProhibitionReasonChange(functionalEditor, ownerModel);
            onIsAvailablePropertyChange(functionalEditor, ownerModel);
        }
    }
    // Register listeners
    // $NON-NLS-1$
    eventMap.registerListener(// $NON-NLS-1$
    absolutePath, // $NON-NLS-1$
    "EntityChanged", (ev, sender, args) -> editor.setValue((T) ((EntityModel) sender).getEntity()));
    // $NON-NLS-1$
    eventMap.registerListener(// $NON-NLS-1$
    absolutePath, // $NON-NLS-1$
    "ItemsChanged", (ev, sender, args) -> updateListEditor((TakesConstrainedValueEditor<T>) editor, (ListModel) sender));
    eventMap.registerListener(absolutePath, "SelectedItemChanged", (ev, sender, args) -> {
        // $NON-NLS-1$
        T selectedItem = (T) ((ListModel) sender).getSelectedItem();
        if (editor instanceof TakesConstrainedValueListEditor && ownerModels.get(absolutePath) instanceof ListModel) {
            editor.setValue((T) Arrays.asList(selectedItem));
        } else {
            editor.setValue(selectedItem);
        }
    });
    eventMap.registerListener(absolutePath, "SelectedItemsChanged", (ev, sender, args) -> {
        // $NON-NLS-1$
        if (editor instanceof TakesConstrainedValueListEditor && ownerModels.get(absolutePath) instanceof ListModel) {
            ((TakesConstrainedValueListEditor) editor).setListValue((List<T>) ((ListModel) sender).getSelectedItems());
        }
    });
    return super.visit(ctx);
}
#end_block

#method_before
@Override
public final void process(C ctx) {
    if (logger.isTraceEnabled()) {
        logger.trace("On flow {} processing handler {}", ctx.getId(), getName());
    }
    HandlerOutcome outcome = tryHandle(ctx);
    switch(outcome) {
        case SUCCESS:
            processCase(onSuccess, ctx, SUCCESS);
            break;
        case NEUTRAL:
            processCase(onNeutral, ctx, NEUTRAL);
            break;
        case FAILURE:
            processCase(onFailure, ctx, FAILURE);
            break;
        case EXCEPTION:
            logger.error("Exception in handler {}", getClass().getCanonicalName(), ctx.getException());
            processCase(onException, ctx, EXCEPTION);
        default:
            logger.error("On flow {} handler {} terminated the flow with {}", ctx.getId(), getName(), outcome);
            break;
    }
}
#method_after
@Override
public final void process(C ctx) {
    if (logger.isDebugEnabled()) {
        logger.debug("On flow {} processing handler {}", ctx.getId(), getName());
    }
    HandlerOutcome outcome = tryHandle(ctx);
    switch(outcome) {
        case SUCCESS:
            processCase(onSuccess, ctx, SUCCESS);
            break;
        case NEUTRAL:
            processCase(onNeutral, ctx, NEUTRAL);
            break;
        case FAILURE:
            processCase(onFailure, ctx, FAILURE);
            break;
        case EXCEPTION:
            logger.error("Exception in handler {}", getClass().getCanonicalName(), ctx.getException());
            processCase(onException, ctx, EXCEPTION);
        default:
            logger.error("On flow {} handler {} terminated the flow with {}", ctx.getId(), getName(), outcome);
            break;
    }
}
#end_block

#method_before
private void processCase(Handler<C> handler, C ctx, HandlerOutcome outcome) {
    if (logger.isTraceEnabled()) {
        logger.trace("On flow {} handler {} returned {}", ctx.getId(), getName(), outcome.name());
    }
    if (handler != null) {
        handler.process(ctx);
    }
}
#method_after
private void processCase(Handler<C> handler, C ctx, HandlerOutcome outcome) {
    if (logger.isDebugEnabled()) {
        logger.debug("On flow {} handler {} returned {}", ctx.getId(), getName(), outcome.name());
    }
    if (handler != null) {
        handler.process(ctx);
    }
}
#end_block

#method_before
private Guid findAvailableStorageDomain(Map<Guid, Long> targetDomainsSize, long diskSize, List<Guid> storageIds) {
    Guid dest = storageIds.stream().min(Comparator.comparingLong(targetDomainsSize::get)).orElse(storageIds.get(0));
    long destSize = targetDomainsSize.get(dest);
    targetDomainsSize.put(dest, destSize - diskSize);
    return dest;
}
#method_after
private Guid findAvailableStorageDomain(Map<Guid, Long> targetDomainsSize, long diskSize, List<Guid> storageIds) {
    Guid dest = storageIds.stream().max(Comparator.comparingLong(targetDomainsSize::get)).orElse(storageIds.get(0));
    long destSize = targetDomainsSize.get(dest);
    targetDomainsSize.put(dest, destSize - diskSize);
    return dest;
}
#end_block

#method_before
public void refreshHostSync(VDS vds) {
    VDSReturnValue caps = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new VdsIdAndVdsVDSCommandParametersBase(vds));
    handleRefreshCapabilitiesResponse(vds, caps);
}
#method_after
public void refreshHostSync(VDS vds) {
    VDSReturnValue caps = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new VdsIdAndVdsVDSCommandParametersBase(vds));
    handleRefreshCapabilitiesResponse(vds, caps, true);
}
#end_block

#method_before
@Override
public void onResponse(Map<String, Object> response) {
    try {
        VDSReturnValue caps = (VDSReturnValue) response.get("result");
        handleRefreshCapabilitiesResponse(vds, caps);
    } catch (Throwable t) {
        onFailure(t);
    }
}
#method_after
@Override
public void onResponse(Map<String, Object> response) {
    VDSReturnValue caps = (VDSReturnValue) response.get("result");
    handleRefreshCapabilitiesResponse(vds, caps, false);
}
#end_block

#method_before
@Override
public void onFailure(Throwable t) {
    log.error("Unable to RefreshCapabilities: {}", ExceptionUtils.getRootCauseMessage(t));
    log.debug("Exception", t);
}
#method_after
@Override
public void onFailure(Throwable t) {
    logRefreshCapabilitiesFailure(t);
}
#end_block

#method_before
private void handleRefreshCapabilitiesResponse(VDS vds, VDSReturnValue caps) {
    try {
        invokeGetHardwareInfo(vds, caps);
        processRefreshCapabilitiesResponse(new AtomicBoolean(), vds, vds.clone(), caps);
    } finally {
        if (vds != null) {
            updateDynamicData(vds.getDynamicData());
            updateNumaData(vds);
            // Update VDS after testing special hardware capabilities
            monitoringStrategy.processHardwareCapabilities(vds);
            // Always check VdsVersion
            resourceManager.getEventListener().handleVdsVersion(vds.getId());
        }
    }
}
#method_after
private void handleRefreshCapabilitiesResponse(VDS vds, VDSReturnValue caps, boolean throwException) {
    try {
        invokeGetHardwareInfo(vds, caps);
        processRefreshCapabilitiesResponse(new AtomicBoolean(), vds, vds.clone(), caps);
    } catch (Throwable t) {
        logRefreshCapabilitiesFailure(t);
        if (throwException) {
            throw t;
        }
    } finally {
        if (vds != null) {
            updateDynamicData(vds.getDynamicData());
            updateNumaData(vds);
            // Update VDS after testing special hardware capabilities
            monitoringStrategy.processHardwareCapabilities(vds);
            // Always check VdsVersion
            resourceManager.getEventListener().handleVdsVersion(vds.getId());
        }
    }
}
#end_block

#method_before
public Map<String, String> build() {
    if (poolId == null || domainId == null || imageGroupId == null || volumeId == null) {
        throw new IllegalArgumentException("One or more of the PDIV IDs is null");
    }
    Map<String, String> pdivMap = new HashMap<>();
    pdivMap.put("poolID", poolId.toString());
    pdivMap.put("domainID", domainId.toString());
    pdivMap.put("imageID", imageGroupId.toString());
    pdivMap.put("volumeID", volumeId.toString());
    return pdivMap;
}
#method_after
public Map<String, String> build() {
    if (poolId == null || domainId == null || imageGroupId == null || volumeId == null) {
        throw new IllegalArgumentException("One or more of the PDIV IDs is null");
    }
    Map<String, String> pdivMap = new HashMap<>(8);
    pdivMap.put("poolID", poolId.toString());
    pdivMap.put("domainID", domainId.toString());
    pdivMap.put("imageID", imageGroupId.toString());
    pdivMap.put("volumeID", volumeId.toString());
    return pdivMap;
}
#end_block

#method_before
private void writePayloadMetadata() {
    if (payloadMetadata != null) {
        writer.writeStartElement(OVIRT_VM_URI, "device");
        writer.writeAttributeString("devtype", "disk");
        writer.writeAttributeString("name", payloadMetadata.getFirst());
        writer.writeStartElement(OVIRT_VM_URI, "payload");
        if (payloadMetadata.getSecond().getVolumeId() != null) {
            writer.writeElement(OVIRT_VM_URI, "volId", payloadMetadata.getSecond().getVolumeId());
        }
        payloadMetadata.getSecond().getFiles().forEach((path, data) -> {
            writer.writeStartElement(OVIRT_VM_URI, "file");
            writer.writeAttributeString("path", path);
            writer.writeRaw(data);
            writer.writeEndElement();
        });
        writer.writeEndElement();
        writer.writeEndElement();
    }
}
#method_after
private void writePayloadMetadata() {
    if (payloadMetadata == null) {
        return;
    }
    writer.writeStartElement(OVIRT_VM_URI, "device");
    writer.writeAttributeString("devtype", "disk");
    writer.writeAttributeString("name", payloadMetadata.getFirst());
    writer.writeStartElement(OVIRT_VM_URI, "payload");
    String volumeId = payloadMetadata.getSecond().getVolumeId();
    if (volumeId != null) {
        writer.writeElement(OVIRT_VM_URI, "volId", volumeId);
    }
    Map<String, String> files = payloadMetadata.getSecond().getFiles();
    if (files != null) {
        files.forEach((path, data) -> {
            writer.writeStartElement(OVIRT_VM_URI, "file");
            writer.writeAttributeString("path", path);
            writer.writeRaw(data);
            writer.writeEndElement();
        });
    }
    writer.writeEndElement();
    writer.writeEndElement();
}
#end_block

#method_before
private List<VmDevice> overrideDevicesForRunOnce(List<VmDevice> devices) {
    if (!vm.isRunOnce()) {
        return devices;
    }
    // video device handling
    DisplayType displayType = vm.getDefaultDisplayType();
    if (displayType != null) {
        // remove existing video device
        devices = devices.stream().filter(dev -> dev.getType() != VmDeviceGeneralType.VIDEO).collect(Collectors.toList());
        // add new video device
        if (displayType != DisplayType.none) {
            devices.add(vmInfoBuildUtils.createVideoDeviceByDisplayType(displayType, vm.getId()));
        }
    }
    // graphics device handling
    if (displayType == DisplayType.none || (vm.getGraphicsInfos() != null && !vm.getGraphicsInfos().isEmpty())) {
        // remove existing graphics devices
        devices = devices.stream().filter(dev -> dev.getType() != VmDeviceGeneralType.GRAPHICS).collect(Collectors.toList());
        if (displayType != DisplayType.none) {
            // add new graphics devices
            Map<GraphicsType, GraphicsInfo> infos = vm.getGraphicsInfos();
            Map<String, Object> specParamsFromVm = new HashMap<>();
            vmInfoBuildUtils.addVmGraphicsOptions(infos, specParamsFromVm, vm);
            devices.addAll(vmInfoBuildUtils.createGraphicsDevices(infos, specParamsFromVm, vm.getId()));
        }
    }
    // the user may specify floppy path while there is no device in the database
    if (!StringUtils.isEmpty(vm.getFloppyPath()) && !devices.stream().anyMatch(dev -> !dev.getDevice().equals(VmDeviceType.FLOPPY.getName()))) {
        devices.add(vmInfoBuildUtils.createFloppyDevice(vm));
    }
    return devices;
}
#method_after
private List<VmDevice> overrideDevicesForRunOnce(List<VmDevice> devices) {
    if (!vm.isRunOnce()) {
        return devices;
    }
    // video device handling
    DisplayType displayType = vm.getDefaultDisplayType();
    if (displayType != null) {
        // remove existing video device
        devices = devices.stream().filter(dev -> dev.getType() != VmDeviceGeneralType.VIDEO).collect(Collectors.toList());
        // add new video device
        if (displayType != DisplayType.none) {
            devices.add(vmInfoBuildUtils.createVideoDeviceByDisplayType(displayType, vm.getId()));
        }
    }
    // graphics device handling
    if (displayType == DisplayType.none || (vm.getGraphicsInfos() != null && !vm.getGraphicsInfos().isEmpty())) {
        // remove existing graphics devices
        devices = devices.stream().filter(dev -> dev.getType() != VmDeviceGeneralType.GRAPHICS).collect(Collectors.toList());
        if (displayType != DisplayType.none) {
            // add new graphics devices
            Map<GraphicsType, GraphicsInfo> infos = vm.getGraphicsInfos();
            Map<String, Object> specParamsFromVm = new HashMap<>();
            vmInfoBuildUtils.addVmGraphicsOptions(infos, specParamsFromVm, vm);
            devices.addAll(vmInfoBuildUtils.createGraphicsDevices(infos, specParamsFromVm, vm.getId()));
        }
    }
    // the user may specify floppy path while there is no device in the database
    if (!StringUtils.isEmpty(vm.getFloppyPath()) && !devices.stream().anyMatch(dev -> dev.getDevice().equals(VmDeviceType.FLOPPY.getName()))) {
        devices.add(vmInfoBuildUtils.createFloppyDevice(vm));
    }
    return devices;
}
#end_block

#method_before
private void writeFloppy(VmDevice device) {
    if (device == null) {
        return;
    }
    // <disk device="floppy" snapshot="no" type="file">
    // <source file="/var/run/vdsm/payload/8b5fa6b8-9c57-4d7c-80cb-64537eea560f.6e38a5ccb3c6b2b674086e9d07126a03.img" startupPolicy="optional" />
    // <target bus="fdc" dev="fda" />
    // <readonly />
    // </disk>
    writer.writeStartElement("disk");
    writer.writeAttributeString("type", "file");
    writer.writeAttributeString("device", "floppy");
    writer.writeAttributeString("snapshot", "no");
    writer.writeStartElement("source");
    writer.writeAttributeString("file", VmPayload.isPayload(device.getSpecParams()) ? "PAYLOAD:" : vm.getFloppyPath());
    writer.writeAttributeString("startupPolicy", "optional");
    writer.writeEndElement();
    writer.writeStartElement("target");
    // IDE slot 2 is reserved by VDSM to CDROM
    String name = vmInfoBuildUtils.makeDiskName(VdsProperties.Fdc, 0);
    writer.writeAttributeString("dev", name);
    writer.writeAttributeString("bus", VdsProperties.Fdc);
    writer.writeEndElement();
    writer.writeElement("readonly");
    writeAlias(device);
    writeAddress(device);
    payloadMetadata = new Pair<>(name, new VmPayload(device));
    writer.writeEndElement();
}
#method_after
private void writeFloppy(VmDevice device) {
    if (device == null) {
        return;
    }
    // <disk device="floppy" snapshot="no" type="file">
    // <source file="/var/run/vdsm/payload/8b5fa6b8-9c57-4d7c-80cb-64537eea560f.6e38a5ccb3c6b2b674086e9d07126a03.img" startupPolicy="optional" />
    // <target bus="fdc" dev="fda" />
    // <readonly />
    // </disk>
    writer.writeStartElement("disk");
    writer.writeAttributeString("type", "file");
    writer.writeAttributeString("device", "floppy");
    writer.writeAttributeString("snapshot", "no");
    final boolean payload = VmPayload.isPayload(device.getSpecParams());
    writer.writeStartElement("source");
    writer.writeAttributeString("file", payload ? "PAYLOAD:" : vm.getFloppyPath());
    writer.writeAttributeString("startupPolicy", "optional");
    writer.writeEndElement();
    writer.writeStartElement("target");
    // IDE slot 2 is reserved by VDSM to CDROM
    String name = vmInfoBuildUtils.makeDiskName(VdsProperties.Fdc, 0);
    writer.writeAttributeString("dev", name);
    writer.writeAttributeString("bus", VdsProperties.Fdc);
    writer.writeEndElement();
    writer.writeElement("readonly");
    writeAlias(device);
    writeAddress(device);
    if (payload) {
        payloadMetadata = new Pair<>(name, new VmPayload(device));
    }
    writer.writeEndElement();
}
#end_block

#method_before
private void writeAlias(VmDevice device) {
    writer.writeStartElement("alias");
    writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId()));
    writer.writeEndElement();
}
#method_after
private void writeAlias(VmDevice device) {
    if (device.isManaged()) {
        writer.writeStartElement("alias");
        writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId()));
        writer.writeEndElement();
    }
}
#end_block

#method_before
@Override
protected void executeCommand() {
    final Guid dataCenterId = getStoragePoolId();
    final Network network = getNetwork();
    network.setDataCenterId(dataCenterId);
    ActionReturnValue addNetworkReturnValue = addNetwork(dataCenterId, network);
    if (!addNetworkReturnValue.getSucceeded()) {
        propagateFailure(addNetworkReturnValue);
        return;
    }
    network.setId(addNetworkReturnValue.getActionReturnValue());
    ActionReturnValue addVnicReturnValue = addVnicProfile(network, getParameters().isPublicUse());
    if (!addVnicReturnValue.getSucceeded()) {
        propagateFailure(addVnicReturnValue);
        return;
    }
    if (getParameters().isAttachToAllClusters()) {
        ActionReturnValue attachReturnValue = attachToAllClusters(dataCenterId, network.getId());
        if (!attachReturnValue.getSucceeded()) {
            propagateFailure(attachReturnValue);
            return;
        }
    }
    getReturnValue().setActionReturnValue(network.getId());
    setSucceeded(true);
}
#method_after
@Override
protected void executeCommand() {
    final Guid dataCenterId = getStoragePoolId();
    final Network network = getNetwork();
    network.setDataCenterId(dataCenterId);
    ActionReturnValue addNetworkReturnValue = addNetwork(dataCenterId, network);
    if (!addNetworkReturnValue.getSucceeded()) {
        propagateFailure(addNetworkReturnValue);
        return;
    }
    network.setId(addNetworkReturnValue.getActionReturnValue());
    ActionReturnValue addVnicReturnValue = networkHelper.addVnicProfileWithoutFilter(network, getParameters().isPublicUse());
    if (!addVnicReturnValue.getSucceeded()) {
        propagateFailure(addVnicReturnValue);
        return;
    }
    if (getParameters().isAttachToAllClusters()) {
        ActionReturnValue attachReturnValue = attachToAllClusters(dataCenterId, network.getId());
        if (!attachReturnValue.getSucceeded()) {
            propagateFailure(attachReturnValue);
            return;
        }
    }
    getReturnValue().setActionReturnValue(network.getId());
    setSucceeded(true);
}
#end_block

#method_before
@Before
public void setUp() {
    prepareNetwork(commandNoCluster.getParameters().getExternalNetwork());
    prepareNetwork(commandCluster.getParameters().getExternalNetwork());
    when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue());
    when(networkHelper.createVnicProfile(any())).thenReturn(new VnicProfile());
    ActionReturnValue returnValue = new ActionReturnValue();
    returnValue.setSucceeded(true);
    when(networkHelper.addVnicProfile(any(), anyBoolean())).thenReturn(returnValue);
    when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue);
    QueryReturnValue queryReturnValue = new QueryReturnValue();
    queryReturnValue.setReturnValue(getClusters());
    queryReturnValue.setSucceeded(true);
    when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue);
}
#method_after
@Before
public void setUp() {
    prepareNetwork(commandNoCluster.getParameters().getExternalNetwork());
    prepareNetwork(commandCluster.getParameters().getExternalNetwork());
    when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue());
    when(networkHelper.createVnicProfile(any())).thenReturn(new VnicProfile());
    ActionReturnValue returnValue = new ActionReturnValue();
    returnValue.setSucceeded(true);
    when(networkHelper.addVnicProfileWithoutFilter(any(), anyBoolean())).thenReturn(returnValue);
    when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue);
    QueryReturnValue queryReturnValue = new QueryReturnValue();
    queryReturnValue.setReturnValue(getClusters());
    queryReturnValue.setSucceeded(true);
    when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue);
}
#end_block

#method_before
private void verifyCalls(boolean attachToAllClusters) {
    verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any());
    verify(networkHelper).createVnicProfile(any());
    verify(networkHelper).addVnicProfile(any(), anyBoolean());
    VerificationMode expectedNumberOfCalls = attachToAllClusters ? times(1) : never();
    verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any());
    verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any());
}
#method_after
private void verifyCalls(boolean attachToAllClusters) {
    verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any());
    verify(networkHelper).addVnicProfileWithoutFilter(any(), anyBoolean());
    VerificationMode expectedNumberOfCalls = attachToAllClusters ? times(1) : never();
    verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any());
    verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any());
}
#end_block

#method_before
private void setReadOnlyEntity() {
    if (getIsUnmanaged().getEntity()) {
        getReadOnly().setEntity(false);
    } else {
        OpenstackNetworkProviderProperties properties = (OpenstackNetworkProviderProperties) provider.getAdditionalProperties();
        getReadOnly().setEntity(properties != null ? properties.getReadOnly() : true);
    }
}
#method_after
private void setReadOnlyEntity() {
    boolean isReadOnlyAware = getType().getSelectedItem().isReadOnlyAware();
    if (isReadOnlyAware && getIsUnmanaged().getEntity()) {
        getReadOnly().setEntity(false);
    } else if (isReadOnlyAware) {
        OpenstackNetworkProviderProperties properties = (OpenstackNetworkProviderProperties) provider.getAdditionalProperties();
        getReadOnly().setEntity(properties != null ? properties.getReadOnly() : true);
    }
}
#end_block

#method_before
// used by AuditLogger via reflection
@SuppressWarnings("unused")
public String getDueToMigrationError() {
    if (migrationErrorCode == null) {
        return " ";
    }
    return " due to Error: " + Backend.getInstance().getVdsErrorsTranslator().translateErrorTextSingle(migrationErrorCode.name(), true);
}
#method_after
// used by AuditLogger via reflection
@SuppressWarnings("unused")
public String getDueToMigrationError() {
    if (migrationErrorCode != null) {
        return " due to an Error: " + Backend.getInstance().getVdsErrorsTranslator().translateErrorTextSingle(migrationErrorCode.name(), true);
    }
    return " ";
}
#end_block

#method_before
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            if (getFlow() == RunVmFlow.REMOVE_STATELESS_IMAGES) {
                return AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT;
            }
            if (getFlow() == RunVmFlow.RESUME_PAUSE) {
                return getSucceeded() ? AuditLogType.USER_RESUME_VM : AuditLogType.USER_FAILED_RESUME_VM;
            } else if (isInternalExecution()) {
                if (getSucceeded()) {
                    boolean isStateless = isStatelessSnapshotExistsForVm();
                    if (isStateless) {
                        return AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS;
                    } else if (getFlow() == RunVmFlow.CREATE_STATELESS_IMAGES) {
                        return AuditLogType.VDS_INITIATED_RUN_AS_STATELESS_VM_NOT_YET_RUNNING;
                    } else {
                        return AuditLogType.VDS_INITIATED_RUN_VM;
                    }
                }
                return AuditLogType.VDS_INITIATED_RUN_VM_FAILED;
            } else {
                return getSucceeded() ? getActionReturnValue() == VMStatus.Up ? isVmRunningOnNonDefaultVds() ? AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS : isStatelessSnapshotExistsForVm() ? AuditLogType.USER_RUN_VM_AS_STATELESS : AuditLogType.USER_RUN_VM : _isRerun ? AuditLogType.VDS_INITIATED_RUN_VM : getVm().isRunAndPause() ? AuditLogType.USER_INITIATED_RUN_VM_AND_PAUSE : getFlow() == RunVmFlow.CREATE_STATELESS_IMAGES ? AuditLogType.USER_INITIATED_RUN_VM : AuditLogType.USER_STARTED_VM : _isRerun ? AuditLogType.USER_INITIATED_RUN_VM_FAILED : AuditLogType.USER_FAILED_RUN_VM;
            }
        case END_SUCCESS:
            // command should be with 'CommandShouldBeLogged = false':
            return isStatelessSnapshotExistsForVm() && !getSucceeded() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        case END_FAILURE:
            // be with 'CommandShouldBeLogged = false':
            return isStatelessSnapshotExistsForVm() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        default:
            // false':
            return AuditLogType.UNASSIGNED;
    }
}
#method_after
@Override
public AuditLogType getAuditLogTypeValue() {
    switch(getActionState()) {
        case EXECUTE:
            if (getFlow() == RunVmFlow.REMOVE_STATELESS_IMAGES) {
                return AuditLogType.USER_RUN_VM_FAILURE_STATELESS_SNAPSHOT_LEFT;
            }
            if (getFlow() == RunVmFlow.RESUME_PAUSE) {
                return getSucceeded() ? AuditLogType.USER_RESUME_VM : AuditLogType.USER_FAILED_RESUME_VM;
            } else if (isInternalExecution()) {
                if (getSucceeded()) {
                    boolean isStateless = isStatelessSnapshotExistsForVm();
                    if (isStateless) {
                        return AuditLogType.VDS_INITIATED_RUN_VM_AS_STATELESS;
                    } else if (getFlow() == RunVmFlow.CREATE_STATELESS_IMAGES) {
                        return AuditLogType.VDS_INITIATED_RUN_AS_STATELESS_VM_NOT_YET_RUNNING;
                    } else {
                        return AuditLogType.VDS_INITIATED_RUN_VM;
                    }
                }
                return AuditLogType.VDS_INITIATED_RUN_VM_FAILED;
            } else {
                addCustomValue("DueToError", " ");
                return getSucceeded() ? getActionReturnValue() == VMStatus.Up ? isVmRunningOnNonDefaultVds() ? AuditLogType.USER_RUN_VM_ON_NON_DEFAULT_VDS : isStatelessSnapshotExistsForVm() ? AuditLogType.USER_RUN_VM_AS_STATELESS : AuditLogType.USER_RUN_VM : _isRerun ? AuditLogType.VDS_INITIATED_RUN_VM : getVm().isRunAndPause() ? AuditLogType.USER_INITIATED_RUN_VM_AND_PAUSE : getFlow() == RunVmFlow.CREATE_STATELESS_IMAGES ? AuditLogType.USER_INITIATED_RUN_VM : AuditLogType.USER_STARTED_VM : _isRerun ? AuditLogType.USER_INITIATED_RUN_VM_FAILED : AuditLogType.USER_FAILED_RUN_VM;
            }
        case END_SUCCESS:
            // command should be with 'CommandShouldBeLogged = false':
            return isStatelessSnapshotExistsForVm() && !getSucceeded() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        case END_FAILURE:
            // be with 'CommandShouldBeLogged = false':
            return isStatelessSnapshotExistsForVm() ? AuditLogType.USER_RUN_VM_AS_STATELESS_FINISHED_FAILURE : AuditLogType.UNASSIGNED;
        default:
            // false':
            return AuditLogType.UNASSIGNED;
    }
}
#end_block

#method_before
protected void reexecuteCommand() {
    // restore Validate value to false so Validate checks will run again
    getReturnValue().setValid(false);
    if (getExecutionContext() != null) {
        Job job = getExecutionContext().getJob();
        if (job != null) {
            // mark previous steps as fail
            jobRepository.closeCompletedJobSteps(job.getId(), JobExecutionStatus.FAILED);
        }
    }
    executeAction();
}
#method_after
protected void reexecuteCommand() {
    // restore Validate value to false so Validate checks will run again
    getReturnValue().setValid(false);
    getParameters().setRerun(true);
    if (getExecutionContext() != null) {
        Job job = getExecutionContext().getJob();
        if (job != null) {
            // mark previous steps as fail
            jobRepository.closeCompletedJobSteps(job.getId(), JobExecutionStatus.FAILED);
        }
    }
    executeAction();
}
#end_block

#method_before
private void init(VM vm, VmInfoBuildUtils vmInfoBuildUtils, Guid hostId) {
    this.vm = vm;
    this.vmInfoBuildUtils = vmInfoBuildUtils;
    payloadIndex = -1;
    cdRomIndex = -1;
    vnicMetadata = new HashMap<>();
    diskMetadata = new HashMap<>();
    hypervEnabled = vmInfoBuildUtils.isHypervEnabled(vm.getVmOsId(), vm.getCompatibilityVersion());
    emulatedMachine = vm.getEmulatedMachine() != null ? vm.getEmulatedMachine() : vmInfoBuildUtils.getEmulatedMachineByClusterArch(vm.getClusterArch());
    cdInterface = vmInfoBuildUtils.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), ChipsetType.fromMachineType(emulatedMachine));
    writer = new XmlTextWriter();
    qosCache = new HashMap<>();
    if (hostId != null) {
        hostDevicesSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getHostDevices(hostId));
        hostStatisticsSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getVdsStatistics(hostId));
        hostNumaNodesSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getVdsNumaNodes(hostId));
    } else {
        hostDevicesSupplier = new MemoizingSupplier<>(() -> Collections.emptyMap());
        hostStatisticsSupplier = new MemoizingSupplier<>(() -> null);
        hostNumaNodesSupplier = new MemoizingSupplier<>(() -> Collections.emptyList());
    }
    vmNumaNodesSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getVmNumaNodes(vm));
}
#method_after
private void init(VM vm, VmInfoBuildUtils vmInfoBuildUtils, Guid hostId) {
    this.vm = vm;
    this.vmInfoBuildUtils = vmInfoBuildUtils;
    payloadIndex = -1;
    cdRomIndex = -1;
    vnicMetadata = new HashMap<>();
    diskMetadata = new HashMap<>();
    hypervEnabled = vmInfoBuildUtils.isHypervEnabled(vm.getVmOsId(), vm.getCompatibilityVersion());
    emulatedMachine = vm.getEmulatedMachine() != null ? vm.getEmulatedMachine() : vmInfoBuildUtils.getEmulatedMachineByClusterArch(vm.getClusterArch());
    cdInterface = vmInfoBuildUtils.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), ChipsetType.fromMachineType(emulatedMachine));
    writer = new XmlTextWriter();
    qosCache = new HashMap<>();
    vmCustomProperties = VmPropertiesUtils.getInstance().getVMProperties(vm.getCompatibilityVersion(), vm.getStaticData());
    if (hostId != null) {
        hostDevicesSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getHostDevices(hostId));
        hostStatisticsSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getVdsStatistics(hostId));
        hostNumaNodesSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getVdsNumaNodes(hostId));
    } else {
        hostDevicesSupplier = new MemoizingSupplier<>(() -> Collections.emptyMap());
        hostStatisticsSupplier = new MemoizingSupplier<>(() -> null);
        hostNumaNodesSupplier = new MemoizingSupplier<>(() -> Collections.emptyList());
    }
    vmNumaNodesSupplier = new MemoizingSupplier<>(() -> vmInfoBuildUtils.getVmNumaNodes(vm));
}
#end_block

#method_before
private void writeVmCustomMetadata() {
    writer.writeStartElement(OVIRT_VM_URI, "custom");
    Map<String, String> vmCustomProperties = VmPropertiesUtils.getInstance().getVMProperties(vm.getCompatibilityVersion(), vm.getStaticData());
    vmCustomProperties.forEach((key, value) -> writer.writeElement(OVIRT_VM_URI, key, value));
    writer.writeEndElement();
}
#method_after
private void writeVmCustomMetadata() {
    writer.writeStartElement(OVIRT_VM_URI, "custom");
    vmCustomProperties.forEach((key, value) -> writer.writeElement(OVIRT_VM_URI, key, value));
    writer.writeEndElement();
}
#end_block

#method_before
private void writeInterface(VmDevice device, VmNic nic) {
    // <interface type="bridge">
    // <mac address="aa:bb:dd:dd:aa:bb"/>
    // <model type="virtio"/>
    // <source bridge="engine"/>
    // [<driver name="vhost/qemu" queues="int"/>]
    // [<filterref filter='filter name'>
    // [<parameter name='parameter name' value='parameter value'>]
    // </filterref>]
    // [<tune><sndbuf>0</sndbuf></tune>]
    // [<link state='up|down'/>]
    // [<bandwidth>
    // [<inbound average="int" [burst="int"]  [peak="int"]/>]
    // [<outbound average="int" [burst="int"]  [peak="int"]/>]
    // </bandwidth>]
    // </interface>
    // 
    // -- or -- a slightly different SR-IOV network interface
    // <interface type='hostdev' managed='no'>
    // <driver name='vfio'/>
    // <source>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // </source>
    // <mac address='52:54:00:6d:90:02'/>
    // <vlan>
    // <tag id=100/>
    // </vlan>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // <boot order='1'/>
    // </interface>
    writer.writeStartElement("interface");
    Map<String, String> properties = VmPropertiesUtils.getInstance().getVMProperties(vm.getCompatibilityVersion(), vm.getStaticData());
    VnicProfile vnicProfile = vmInfoBuildUtils.getVnicProfile(nic.getVnicProfileId());
    Network network = vnicProfile != null ? vmInfoBuildUtils.getNetwork(vnicProfile.getNetworkId()) : null;
    switch(device.getDevice()) {
        case "bridge":
            writer.writeAttributeString("type", "bridge");
            writer.writeStartElement("model");
            VmInterfaceType ifaceType = nic.getType() != null ? VmInterfaceType.forValue(nic.getType()) : VmInterfaceType.rtl8139;
            String evaluatedIfaceType = vmInfoBuildUtils.evaluateInterfaceType(ifaceType, vm.getHasAgent());
            if ("pv".equals(evaluatedIfaceType)) {
                evaluatedIfaceType = "virtio";
            }
            writer.writeAttributeString("type", evaluatedIfaceType);
            writer.writeEndElement();
            writer.writeStartElement("link");
            writer.writeAttributeString("state", nic.isLinked() ? "up" : "down");
            writer.writeEndElement();
            // The source element is different when using legacy or OVS bridge. We
            // expect VDSM to replace the source element if it is a non legacy bridge
            writer.writeStartElement("source");
            writer.writeAttributeString("bridge", network != null ? network.getVdsmName() : "");
            writer.writeEndElement();
            String queues = vnicProfile != null ? vnicProfile.getCustomProperties().remove("queues") : null;
            String driverName = getDriverNameForNetwork(network != null ? network.getName() : "", properties);
            if (queues != null || driverName != null) {
                writer.writeStartElement("driver");
                if (queues != null) {
                    writer.writeAttributeString("queues", queues);
                    if (driverName == null) {
                        driverName = "vhost";
                    }
                }
                writer.writeAttributeString("name", driverName);
                writer.writeEndElement();
            }
            break;
        case "hostdev":
            writer.writeAttributeString("type", "hostdev");
            writer.writeAttributeString("managed", "no");
            writer.writeStartElement("driver");
            writer.writeAttributeString("name", "vfio");
            writer.writeEndElement();
            if (network != null && NetworkUtils.isVlan(network)) {
                writer.writeStartElement("vlan");
                writer.writeStartElement("tag");
                writer.writeAttributeString("id", network.getVlanId().toString());
                writer.writeEndElement();
                writer.writeEndElement();
            }
            writer.writeStartElement("source");
            writer.writeStartElement("address");
            String vfDeviceName = passthroughVnicToVfMap.get(nic.getId());
            Map<String, String> sourceAddress = hostDevicesSupplier.get().get(vfDeviceName).getAddress();
            sourceAddress.put("type", "pci");
            sourceAddress.forEach(writer::writeAttributeString);
            writer.writeEndElement();
            writer.writeEndElement();
            break;
    }
    writeAlias(device);
    writeAddress(device);
    writeBootOrder(device.getBootOrder());
    writer.writeStartElement("mac");
    writer.writeAttributeString("address", nic.getMacAddress());
    writer.writeEndElement();
    NetworkFilter networkFilter = vmInfoBuildUtils.fetchVnicProfileNetworkFilter(nic);
    if (networkFilter != null) {
        writer.writeStartElement("filterref");
        writer.writeAttributeString("filter", networkFilter.getName());
        vmInfoBuildUtils.getAllNetworkFiltersForVmNic(nic.getId()).forEach(parameter -> {
            writer.writeStartElement("parameter");
            writer.writeAttributeString("name", parameter.getName());
            writer.writeAttributeString("value", parameter.getValue());
            writer.writeEndElement();
        });
        writer.writeEndElement();
    }
    if (properties.containsKey("sndbuf")) {
        writer.writeStartElement("tune");
        writer.writeStartElement("sndbuf");
        writer.writeRaw(properties.get("sndbuf"));
        writer.writeEndElement();
        writer.writeEndElement();
    }
    Map<String, Object> profileData = new HashMap<>();
    vmInfoBuildUtils.addProfileDataToNic(profileData, vm, device, nic);
    List<String> portMirroring = (List<String>) profileData.get(VdsProperties.PORT_MIRRORING);
    if (portMirroring != null && !portMirroring.isEmpty()) {
        // store port mirroring in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("portMirroring", portMirroring);
    }
    Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(device.getId());
    if (runtimeCustomProperties != null && !runtimeCustomProperties.isEmpty()) {
        // store runtime custom properties in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("runtimeCustomProperties", runtimeCustomProperties);
    }
    if (vnicProfile != null && vnicProfile.getCustomProperties() != null) {
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).putAll(vnicProfile.getCustomProperties());
    }
    writer.writeStartElement("bandwidth");
    @SuppressWarnings("unchecked")
    Map<String, Object> specParams = (Map<String, Object>) profileData.get("specParams");
    if (specParams != null && (specParams.containsKey("inbound") || specParams.containsKey("outbound"))) {
        @SuppressWarnings("unchecked")
        Map<String, String> inboundMap = (Map<String, String>) specParams.get("inbound");
        if (inboundMap != null && !inboundMap.isEmpty()) {
            writer.writeStartElement("inbound");
            writer.writeAttributeString("average", String.valueOf(inboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(inboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(inboundMap.get("peak")));
            writer.writeEndElement();
        }
        @SuppressWarnings("unchecked")
        Map<String, String> outboundMap = (Map<String, String>) specParams.get("outbound");
        if (outboundMap != null && !outboundMap.isEmpty()) {
            writer.writeStartElement("outbound");
            writer.writeAttributeString("average", String.valueOf(outboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(outboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(outboundMap.get("peak")));
            writer.writeEndElement();
        }
    }
    writer.writeEndElement();
    writer.writeEndElement();
}
#method_after
private void writeInterface(VmDevice device, VmNic nic) {
    // <interface type="bridge">
    // <mac address="aa:bb:dd:dd:aa:bb"/>
    // <model type="virtio"/>
    // <source bridge="engine"/>
    // [<driver name="vhost/qemu" queues="int"/>]
    // [<filterref filter='filter name'>
    // [<parameter name='parameter name' value='parameter value'>]
    // </filterref>]
    // [<tune><sndbuf>0</sndbuf></tune>]
    // [<link state='up|down'/>]
    // [<bandwidth>
    // [<inbound average="int" [burst="int"]  [peak="int"]/>]
    // [<outbound average="int" [burst="int"]  [peak="int"]/>]
    // </bandwidth>]
    // </interface>
    // 
    // -- or -- a slightly different SR-IOV network interface
    // <interface type='hostdev' managed='no'>
    // <driver name='vfio'/>
    // <source>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // </source>
    // <mac address='52:54:00:6d:90:02'/>
    // <vlan>
    // <tag id=100/>
    // </vlan>
    // <address type='pci' domain='0x0000' bus='0x00' slot='0x07'
    // function='0x0'/>
    // <boot order='1'/>
    // </interface>
    writer.writeStartElement("interface");
    VnicProfile vnicProfile = vmInfoBuildUtils.getVnicProfile(nic.getVnicProfileId());
    Network network = vnicProfile != null ? vmInfoBuildUtils.getNetwork(vnicProfile.getNetworkId()) : null;
    switch(device.getDevice()) {
        case "bridge":
            writer.writeAttributeString("type", "bridge");
            writer.writeStartElement("model");
            VmInterfaceType ifaceType = nic.getType() != null ? VmInterfaceType.forValue(nic.getType()) : VmInterfaceType.rtl8139;
            String evaluatedIfaceType = vmInfoBuildUtils.evaluateInterfaceType(ifaceType, vm.getHasAgent());
            if ("pv".equals(evaluatedIfaceType)) {
                evaluatedIfaceType = "virtio";
            }
            writer.writeAttributeString("type", evaluatedIfaceType);
            writer.writeEndElement();
            writer.writeStartElement("link");
            writer.writeAttributeString("state", nic.isLinked() ? "up" : "down");
            writer.writeEndElement();
            // The source element is different when using legacy or OVS bridge. We
            // expect VDSM to replace the source element if it is a non legacy bridge
            writer.writeStartElement("source");
            writer.writeAttributeString("bridge", network != null ? network.getVdsmName() : "");
            writer.writeEndElement();
            String queues = vnicProfile != null ? vnicProfile.getCustomProperties().remove("queues") : null;
            String driverName = getDriverNameForNetwork(network != null ? network.getName() : "");
            if (queues != null || driverName != null) {
                writer.writeStartElement("driver");
                if (queues != null) {
                    writer.writeAttributeString("queues", queues);
                    if (driverName == null) {
                        driverName = "vhost";
                    }
                }
                writer.writeAttributeString("name", driverName);
                writer.writeEndElement();
            }
            break;
        case "hostdev":
            writer.writeAttributeString("type", "hostdev");
            writer.writeAttributeString("managed", "no");
            writer.writeStartElement("driver");
            writer.writeAttributeString("name", "vfio");
            writer.writeEndElement();
            if (network != null && NetworkUtils.isVlan(network)) {
                writer.writeStartElement("vlan");
                writer.writeStartElement("tag");
                writer.writeAttributeString("id", network.getVlanId().toString());
                writer.writeEndElement();
                writer.writeEndElement();
            }
            writer.writeStartElement("source");
            writer.writeStartElement("address");
            String vfDeviceName = passthroughVnicToVfMap.get(nic.getId());
            Map<String, String> sourceAddress = hostDevicesSupplier.get().get(vfDeviceName).getAddress();
            sourceAddress.put("type", "pci");
            sourceAddress.forEach(writer::writeAttributeString);
            writer.writeEndElement();
            writer.writeEndElement();
            break;
    }
    writeAlias(device);
    writeAddress(device);
    writeBootOrder(device.getBootOrder());
    writer.writeStartElement("mac");
    writer.writeAttributeString("address", nic.getMacAddress());
    writer.writeEndElement();
    NetworkFilter networkFilter = vmInfoBuildUtils.fetchVnicProfileNetworkFilter(nic);
    if (networkFilter != null) {
        writer.writeStartElement("filterref");
        writer.writeAttributeString("filter", networkFilter.getName());
        vmInfoBuildUtils.getAllNetworkFiltersForVmNic(nic.getId()).forEach(parameter -> {
            writer.writeStartElement("parameter");
            writer.writeAttributeString("name", parameter.getName());
            writer.writeAttributeString("value", parameter.getValue());
            writer.writeEndElement();
        });
        writer.writeEndElement();
    }
    String sndbuf = vmCustomProperties.get("sndbuf");
    if (sndbuf != null) {
        writer.writeStartElement("tune");
        writer.writeElement("sndbuf", sndbuf);
        writer.writeEndElement();
    }
    Map<String, Object> profileData = new HashMap<>();
    vmInfoBuildUtils.addProfileDataToNic(profileData, vm, device, nic);
    List<String> portMirroring = (List<String>) profileData.get(VdsProperties.PORT_MIRRORING);
    if (portMirroring != null && !portMirroring.isEmpty()) {
        // store port mirroring in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("portMirroring", portMirroring);
    }
    Map<String, String> runtimeCustomProperties = vm.getRuntimeDeviceCustomProperties().get(device.getId());
    if (runtimeCustomProperties != null && !runtimeCustomProperties.isEmpty()) {
        // store runtime custom properties in the metadata
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).put("runtimeCustomProperties", runtimeCustomProperties);
    }
    if (vnicProfile != null && vnicProfile.getCustomProperties() != null) {
        vnicMetadata.computeIfAbsent(nic.getMacAddress(), mac -> new HashMap<>());
        vnicMetadata.get(nic.getMacAddress()).putAll(vnicProfile.getCustomProperties());
    }
    writer.writeStartElement("bandwidth");
    @SuppressWarnings("unchecked")
    Map<String, Object> specParams = (Map<String, Object>) profileData.get("specParams");
    if (specParams != null && (specParams.containsKey("inbound") || specParams.containsKey("outbound"))) {
        @SuppressWarnings("unchecked")
        Map<String, String> inboundMap = (Map<String, String>) specParams.get("inbound");
        if (inboundMap != null && !inboundMap.isEmpty()) {
            writer.writeStartElement("inbound");
            writer.writeAttributeString("average", String.valueOf(inboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(inboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(inboundMap.get("peak")));
            writer.writeEndElement();
        }
        @SuppressWarnings("unchecked")
        Map<String, String> outboundMap = (Map<String, String>) specParams.get("outbound");
        if (outboundMap != null && !outboundMap.isEmpty()) {
            writer.writeStartElement("outbound");
            writer.writeAttributeString("average", String.valueOf(outboundMap.get("average")));
            writer.writeAttributeString("burst", String.valueOf(outboundMap.get("burst")));
            writer.writeAttributeString("peak", String.valueOf(outboundMap.get("peak")));
            writer.writeEndElement();
        }
    }
    writer.writeEndElement();
    writer.writeEndElement();
}
#end_block

#method_before
private String getDriverNameForNetwork(String network, Map<String, String> properties) {
    String vhostProp = properties.get("vhost");
    if (vhostProp == null) {
        return null;
    }
    for (String vhost : vhostProp.split(",")) {
        String[] bridgeAndstatus = vhost.split(":");
        if (network.equals(bridgeAndstatus[0])) {
            if ("true".equalsIgnoreCase(bridgeAndstatus[1])) {
                return "vhost";
            }
            if ("false".equalsIgnoreCase(bridgeAndstatus[1])) {
                return "qemu";
            }
            log.warn("invalid vhost setting for network {}: {}", network, bridgeAndstatus[1]);
            break;
        }
    }
    return null;
}
#method_after
private String getDriverNameForNetwork(String network) {
    String vhostProp = vmCustomProperties.get("vhost");
    if (vhostProp == null) {
        return null;
    }
    for (String vhost : vhostProp.split(",")) {
        String[] bridgeAndstatus = vhost.split(":");
        if (network.equals(bridgeAndstatus[0])) {
            if ("true".equalsIgnoreCase(bridgeAndstatus[1])) {
                return "vhost";
            }
            if ("false".equalsIgnoreCase(bridgeAndstatus[1])) {
                return "qemu";
            }
            log.warn("invalid vhost setting for network {}: {}", network, bridgeAndstatus[1]);
            break;
        }
    }
    return null;
}
#end_block

#method_before
private void writeAlias(VmDevice device) {
    writer.writeStartElement("alias");
    writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId().toString()));
    writer.writeEndElement();
}
#method_after
private void writeAlias(VmDevice device) {
    writer.writeStartElement("alias");
    writer.writeAttributeString("name", String.format("ua-%s", device.getId().getDeviceId()));
    writer.writeEndElement();
}
#end_block

#method_before
/**
 * Parses the page number out of the provided search string and returns it.
 * Page indication appears in the search string in this format: "page 15"
 * If page indication does not exist, null is returned. For example:
 *
 *   GET .../api/vms?search=page%203     will return 3.
 *   GET .../api/vms?search=name%3Dvm_1  will return null
 */
public static Integer parsePageNum(String searchStr) {
    if (searchStr.toLowerCase().indexOf("page ") == -1) {
        return null;
    } else {
        int pos = searchStr.toLowerCase().indexOf("page ") + 5;
        StringBuilder pageNumberStr = new StringBuilder();
        char c = searchStr.charAt(pos);
        while (Character.isDigit(c) && pos < searchStr.length()) {
            pageNumberStr.append(c);
            pos += 1;
            if (pos < searchStr.length()) {
                c = searchStr.charAt(pos);
            }
        }
        // if page number is empty ("page "), return 1 (the first page) by default
        int pageNum = pageNumberStr.length() == 0 ? 1 : Integer.valueOf(pageNumberStr.toString());
        return pageNum;
    }
}
#method_after
/**
 * Parses the page number out of the provided search string and returns it.
 * Page indication appears in the search string in this format: "page 15"
 * If page indication does not exist, null is returned. For example:
 *
 *   GET .../api/vms?search=page%203     will return 3.
 *   GET .../api/vms?search=name%3Dvm_1  will return null
 */
public static Integer parsePageNum(String searchStr) {
    if (searchStr.toLowerCase().indexOf("page ") == -1) {
        return null;
    } else {
        int pos = searchStr.toLowerCase().indexOf("page ") + 5;
        StringBuilder pageNumberStr = new StringBuilder();
        char c = searchStr.charAt(pos);
        while (Character.isDigit(c) && pos < searchStr.length()) {
            pageNumberStr.append(c);
            pos += 1;
            if (pos < searchStr.length()) {
                c = searchStr.charAt(pos);
            }
        }
        // if page number is empty ("page "), return 1 (the first page) by default
        int pageNum = pageNumberStr.length() == 0 ? 1 : Integer.parseInt(pageNumberStr.toString());
        return pageNum;
    }
}
#end_block

